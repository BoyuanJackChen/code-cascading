[
    {
        "number": 4000,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = [list(map(int, line.strip().split())) for line in stdin]\n    adj = [[] for _ in range(n + 1)]\n    for a, b in edges:\n        adj[a].append(b)\n        adj[b].append(a)\n    \n    max_edges = -1\n    max_a, max_b, max_c = -1, -1, -1\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                if i == j or i == k or j == k:\n                    continue\n                visited = set()\n                q = [(i, 0)]\n                while q:\n                    u, cnt = q.pop(0)\n                    if u in visited:\n                        continue\n                    visited.add(u)\n                    if u == j:\n                        max_edges = max(max_edges, cnt)\n                        max_a, max_b, max_c = i, j, k\n                        break\n                    for v in adj[u]:\n                        q.append((v, cnt + 1))\n    \n    return f\"{max_edges}\\n{max_a} {max_b} {max_c}\""
    },
    {
        "number": 4000,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    graph = [[] for i in range(n)]\n    for i in range(n - 1):\n        a, b = map(int, stdin.readline().strip().split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    visited = [False] * n\n\n    def dfs(node, visited):\n        visited[node] = True\n        for child in graph[node]:\n            if not visited[child]:\n                dfs(child, visited)\n\n    max_edges = 0\n    res = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                visited = [False] * n\n                dfs(i, visited)\n                edges_1 = sum(visited)\n                visited = [False] * n\n                dfs(j, visited)\n                edges_2 = sum(visited)\n                visited = [False] * n\n                dfs(k, visited)\n                edges_3 = sum(visited)\n                if edges_1 + edges_2 + edges_3 > max_edges:\n                    max_edges = edges_1 + edges_2 + edges_3\n                    res = [i + 1, j + 1, k + 1]\n    return str(max_edges) + '\\n' +''.join(map(str, res)) + '\\n'\n"
    },
    {
        "number": 4000,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    adj = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        a, b = map(int, stdin.readline().strip().split())\n        adj[a].append(b)\n        adj[b].append(a)\n    res = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n + 1):\n                if len(set(adj[i]).intersection(set(adj[j])).intersection(set(adj[k]))) > 0:\n                    res += 1\n    ans = []\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n + 1):\n                if len(set(adj[i]).intersection(set(adj[j])).intersection(set(adj[k]))) > 0:\n                    ans.append((i, j, k))\n    ans.sort(key=lambda x: len(set(adj[x[0]]).intersection(set(adj[x[1]])).intersection(set(adj[x[2]]))), reverse=True)\n    return f\"{res}\\n{ans[0][0]} {ans[0][1]} {ans[0][2]}\""
    },
    {
        "number": 4000,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, edges = int(stdin.readline().strip()), []\n    for _ in range(n - 1):\n        a, b = map(int, stdin.readline().strip().split())\n        edges.append((a, b))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                seen = set([i, j, k])\n                cnt = 0\n                for a, b in edges:\n                    if a in seen and b in seen:\n                        cnt += 1\n                        seen.add(a)\n                        seen.add(b)\n                res = max(res, cnt)\n    a, b, c = 0, 0, 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if j not in [a, b, c]:\n                if (a, j) not in edges and (j, c) not in edges and (a, c) not in edges:\n                    a, b, c = i, j, j\n    return f\"{res}\\n{a} {b} {c}\""
    },
    {
        "number": 4000,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(n-1):\n        a, b = map(int, stdin.readline().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    def dfs(u, p):\n        visited[u] = True\n        for v in graph[u]:\n            if v == p:\n                continue\n            if not visited[v]:\n                dfs(v, u)\n    \n    visited = [False] * (n+1)\n    max_edges = -1\n    for i in range(1, n+1):\n        visited[i] = False\n        dfs(i, -1)\n        if visited[i]:\n            edges = len(graph[i]) - 1\n            if edges > max_edges:\n                a, b, c = i, -1, -1\n                max_edges = edges\n                for j in range(1, n+1):\n                    if j!= i and not visited[j]:\n                        visited[j] = False\n                        dfs(j, -1)\n                        if visited[j]:\n                            new_edges = len(graph[j]) - 1\n                            if new_edges > max_edges:\n                                a, b, c = i, j, -1\n                                max_edges = new_edges\n                            visited[j] = False\n                            dfs(j, -1)\n                            if visited[j]:\n                                new_edges = len(graph[j]) - 1\n                                if new_edges > max_edges:\n                                    a, b, c = i, -1, j\n                                    max_edges = new_edges\n                                visited[j] = False\n                                dfs(j, -1)\n                                if visited[j]:\n                                    new_edges = len(graph[j]) - 1\n                                    if new_edges > max_edges:\n                                        a, b, c = -1, i, j\n                                        max_edges = new_edges\n                                visited[j] = True\n                visited[i] = True\n    \n    return str(max_edges) + '\\n' + str(a) +'' + str(b) +'' + str(c)"
    },
    {
        "number": 4000,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = []\n    for _ in range(n-1):\n        a, b = map(int, stdin.readline().strip().split())\n        edges.append((a-1, b-1))\n\n    def dfs(cur, prev, adj):\n        vis = [False] * n\n        vis[cur] = True\n        cnt = 0\n        for nxt in adj[cur]:\n            if nxt!= prev:\n                if vis[nxt]:\n                    cnt += 1\n                else:\n                    cnt += dfs(nxt, cur, adj)\n        return cnt\n\n    def find_path(a, b):\n        adj = [[] for _ in range(n)]\n        for edge in edges:\n            adj[edge[0]].append(edge[1])\n            adj[edge[1]].append(edge[0])\n        path = []\n        cur = a\n        while cur!= b:\n            nxt = adj[cur][0]\n            adj[cur].remove(nxt)\n            if nxt == a:\n                path.append((a, cur))\n                cur = nxt\n            else:\n                path.append((cur, nxt))\n                cur = nxt\n        path.append((cur, b))\n        return path\n\n    def max_edges(a, b, c):\n        paths = []\n        paths.append(find_path(a, b))\n        paths.append(find_path(b, c))\n        paths.append(find_path(a, c))\n        edges = set()\n        for path in paths:\n            for i in range(len(path)-1):\n                edges.add(tuple(sorted([path[i][0], path[i][1], path[i+1][0], path[i+1][1]])))\n        return len(edges)\n\n    ans = 0\n    max_ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                edges = set()\n                for edge in edges:\n                    edges.add(tuple(sorted([i, j, k, edge[0], edge[1], edge[2]])))\n                    edges.add(tuple(sorted([i, k, j, edge[0], edge[2], edge[1]])))\n                    edges.add(tuple(sorted([j, i, k, edge[1], edge[0], edge[2]])))\n                    edges.add(tuple(sorted([j, k, i, edge[1], edge[2], edge[0]])))\n                    edges.add(tuple(sorted([k, i, j, edge[2], edge[0], edge[1]])))\n                    edges.add(tuple(sorted([k, j, i, edge[2], edge[1], edge[0]])))\n                ans = 0\n                for edge in edges:\n                    a, b, c = edge\n                    ans = max(ans, max_edges(a, b, c))\n                max_ans = max(max_ans, ans)\n    return str(max_ans)"
    },
    {
        "number": 4000,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(n-1):\n        a, b = map(int, stdin.readline().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    ans = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i!= j:\n                for k in range(1, n+1):\n                    if i!= k and j!= k:\n                        visited = set()\n                        def dfs(node, path):\n                            nonlocal visited, ans\n                            if node in visited:\n                                return\n                            visited.add(node)\n                            path.append(node)\n                            if len(path) >= 3 and (path[0] in graph[path[1]] or path[1] in graph[path[0]]) and (path[1] in graph[path[2]] or path[2] in graph[path[1]]):\n                                ans = max(ans, len(path))\n                            for nei in graph[node]:\n                                if nei not in path:\n                                    dfs(nei, path[:])\n                        dfs(i, [i])\n                        dfs(j, [j])\n                        dfs(k, [k])\n    print(ans)\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if i!= j:\n                for k in range(j+1, n+1):\n                    if i!= k and j!= k:\n                        visited = set()\n                        def dfs(node, path):\n                            nonlocal visited\n                            if node in visited:\n                                return\n                            visited.add(node)\n                            path.append(node)\n                            if len(path) >= 3 and (path[0] in graph[path[1]] or path[1] in graph[path[0]]) and (path[1] in graph[path[2]] or path[2] in graph[path[1]]):\n                                print(*path)\n                            for nei in graph[node]:\n                                if nei not in path:\n                                    dfs(nei, path[:])\n                        dfs(i, [i])\n                        dfs(j, [j])\n                        dfs(k, [k])\n                        return \"\""
    },
    {
        "number": 4000,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = []\n    for _ in range(n - 1):\n        a, b = map(int, stdin.readline().strip().split())\n        edges.append((a, b))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                visited = [False] * n\n                if dfs(i, j, k, edges, visited):\n                    res += 1\n    return res\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, edges = map(int, stdin.strip().split())\n    adj_list = [[] for _ in range(n + 1)]\n    for a, b in edges:\n        adj_list[a].append(b)\n        adj_list[b].append(a)\n    max_count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                seen = set()\n                stack = [(i, ())]\n                while stack:\n                    node, path = stack.pop()\n                    if node in seen:\n                        continue\n                    seen.add(node)\n                    if len(path) == 2:\n                        if any(len(path[0] & adj_list[node]) == 1 and len(path[1] & adj_list[node]) == 1 for node in path):\n                            count = len(path[0] & path[1])\n                            max_count = max(max_count, count)\n                    else:\n                        for neigh in adj_list[node]:\n                            stack.append((neigh, path + (set(path[-1]),)))\n    return f\"{max_count}\\n{i} {j} {k}\" if max_count > 0 else \"-1\""
    },
    {
        "number": 4000,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        a, b = map(int, stdin.readline().split())\n        graph[a].append(b)\n        graph[b].append(a)\n\n    max_edges = 0\n    res = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if len(set(graph[i] + graph[j] + graph[k]))!= n - 3:\n                    continue\n                count = 0\n                for x in graph[i]:\n                    if x in graph[j] or x in graph[k] or x == i:\n                        count += 1\n                for x in graph[j]:\n                    if x in graph[i] or x in graph[k] or x == j:\n                        count += 1\n                for x in graph[k]:\n                    if x in graph[i] or x in graph[j] or x == k:\n                        count += 1\n                if count > max_edges:\n                    max_edges = count\n                    res = i, j, k\n\n    return f\"{max_edges}\\n{res[0]} {res[1]} {res[2]}\""
    },
    {
        "number": 4001,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    divisors = [int(x) for x in stdin.split()[1:]]\n    divisors.sort()\n\n    # the first divisor that divides both x and y\n    x, y = 1, 1\n    for d in divisors:\n        if d >= x and d % x == 0:\n            x *= d\n        if d >= y and d % y == 0:\n            y *= d\n\n    return f\"{x} {y}\""
    },
    {
        "number": 4001,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *divisors = map(int, stdin.strip().split())\n    x, y = 1, 1\n    for d in divisors:\n        if d > x and d > y:\n            x *= d\n        elif d < x and d < y:\n            y *= d\n    return f\"{x} {y}\""
    },
    {
        "number": 4001,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    divs = list(map(int, stdin.split()[1:]))\n    divs.sort()\n    x = 1\n    y = 1\n    for i in range(1, n+1):\n        if divs[i-1] <= x and divs[n-i] <= y:\n            x *= divs[i-1]\n            y *= divs[n-i]\n        elif divs[i-1] <= x:\n            x *= divs[i-1]\n        elif divs[n-i] <= y:\n            y *= divs[n-i]\n    return f\"{x} {y}\"\n\nprint(solution(\"10\\n10 2 8 1 2 4 1 20 4 5\"))"
    },
    {
        "number": 4001,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.split()[0])\n    divisors = [int(x) for x in stdin.split()[1:]]\n\n    # Count the occurrences of each divisor\n    counts = [divisors.count(i) for i in range(1, max(max(divisors), n)+1)]\n\n    # Find the divisors of x and y\n    x_divisors = [d for d in divisors if d <= n]\n    y_divisors = [d for d in divisors if d > n]\n\n    # Calculate the number of occurrences of each divisor in x_divisors\n    x_counts = [x_divisors.count(i) for i in range(1, max(max(x_divisors), n)+1)]\n\n    # Calculate the number of occurrences of each divisor in y_divisors\n    y_counts = [y_divisors.count(i) for i in range(1, max(max(y_divisors), n)+1)]\n\n    # Calculate the number of occurrences of each divisor in the merged list\n    merged_counts = [counts[i] + x_counts[i] + y_counts[i] for i in range(len(counts))]\n\n    # Calculate the divisors of x and y from the merged list\n    x = 1\n    y = 1\n    for i in range(len(merged_counts)):\n        if merged_counts[i] == 1:\n            x = i+1\n            y = counts.count(i+1)\n            break\n\n    # Return the output\n    return f\"{x} {y}\""
    },
    {
        "number": 4001,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, *divisors = map(int, stdin.split())\n    divisors.sort()\n    # find pairs\n    pairs = []\n    for i, d in enumerate(divisors):\n        if divisors.count(d) == 2:\n            pairs.append((d, divisors[i-1]))\n    # merge pairs\n    x = 1\n    for pair in pairs:\n        x *= pair[0]\n        y = pair[1]\n        if x > y:\n            x, y = y, x\n    return f\"{x} {y}\""
    },
    {
        "number": 4001,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    divisors = sorted(map(int, stdin.readline().strip().split()))\n    for i in range(n):\n        for j in range(n):\n            if divisors[i] + divisors[j] == divisors[i+j] and i!= j:\n                return''.join(map(str, sorted((divisors[i], divisors[j]))))\n    return 'No solution'"
    },
    {
        "number": 4001,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, divisors = map(int, stdin.strip().split())\n    divisors = list(set(divisors))\n    divisors.sort()\n    x = 1\n    y = 1\n    for d in divisors:\n        if d <= x:\n            x *= d\n        if d <= y:\n            y *= d\n    return f\"{x} {y}\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    divisors = [int(d) for d in stdin.split()[1:]]\n    divisors.sort()\n\n    for x in range(1, max(divisors) + 1):\n        y = sum(1 for d in divisors if x % d == 0)\n        if y == n:\n            return f\"{x} {y}\"\n\n    return \"No answer found.\""
    },
    {
        "number": 4001,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, divisors = map(int, stdin.split())\n    divisor_counts = [0] * (n + 1)\n    for d in divisors:\n        divisor_counts[d] += 1\n    x = y = 1\n    for i in range(1, n + 1):\n        if divisor_counts[i] == 2:\n            x *= i\n            y *= i\n    print(x, y)\n"
    },
    {
        "number": 4001,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    divisors = list(map(int, stdin.split('\\n')[1].split()))\n    \n    divisors_set = set(divisors)\n    \n    for d in divisors_set:\n        if divisors.count(d) == 2:\n            x = d\n            y = divisors[divisors.index(d) + 1]\n            break\n        \n    return f\"{x} {y}\"\n\nprint(solution(\"10\\n10 2 8 1 2 4 1 20 4 5\")) # Output: \"20 8\""
    },
    {
        "number": 4002,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    a = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    max_sum = 0\n    for i in range(n):\n        row_sum = sum(a[i][:m//2+1])\n        if row_sum % k == 0:\n            max_sum = max(max_sum, row_sum)\n        for j in range(m//2+1, m):\n            if row_sum % k == 0:\n                max_sum = max(max_sum, row_sum + a[i][j])\n            row_sum += a[i][j] - a[i][j-m//2-1]\n            if row_sum % k == 0:\n                max_sum = max(max_sum, row_sum)\n    return max_sum\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.readline().split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n\n    dp = [[0]*(m+1) for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = max(dp[i][j-1], dp[i-1][j-1] + a[i-1][j-1])\n            if j > m//2:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1-m//2] + sum(a[i-1][j-m//2:j]))\n\n    return dp[n][m] % k\n"
    },
    {
        "number": 4002,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    a = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    \n    # sort each row\n    for i in range(n):\n        a[i].sort()\n    \n    # find the maximum sum\n    max_sum = 0\n    for i in range(n):\n        if m % 2 == 0:\n            max_sum += a[i][m//2]\n        else:\n            max_sum += a[i][m//2]\n            max_sum += a[i][m//2 + 1]\n        if max_sum % k!= 0:\n            max_sum -= a[i][-1]\n            m -= 1\n        if max_sum % k == 0 and m == 0:\n            return str(max_sum)\n    \n    return str(max_sum)"
    },
    {
        "number": 4002,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [[int(c) for c in line.split()] for line in stdin.split('\\n')[1:]]\n\n    # Step 1: Find the maximum sum divisible by k\n    max_sum = 0\n    for i in range(n):\n        row_sum = sum(a[i][:m//2+1])\n        if row_sum % k == 0:\n            max_sum = max(max_sum, row_sum)\n\n    # Step 2: Find the maximum sum with the required number of elements in each row\n    for num_selected in range(1, m//2+1):\n        for i in range(n):\n            row_sum = sum(sorted(a[i][:num_selected], reverse=True))\n            if row_sum % k == 0 and row_sum > max_sum:\n                max_sum = row_sum\n\n    return max_sum"
    },
    {
        "number": 4002,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().strip().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().strip().split())))\n    a.sort(key=lambda x: sum(x))\n    ans = 0\n    for i in range(n):\n        if m % 2 == 0:\n            ans += max(sum(a[i][:m//2]), sum(a[i][m//2:]))\n        else:\n            ans += max(sum(a[i][:m//2]), sum(a[i][m//2+1:]))\n        ans %= k\n    return str(ans)\n"
    },
    {
        "number": 4002,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split()[0:m])))\n    max_sum = 0\n    for i in range(n):\n        row_sum = sum(sorted(a[i], reverse=True)[:(m+1)//2])\n        if row_sum % k == 0:\n            max_sum = max(max_sum, row_sum)\n    return max_sum\n\nstdin = \"\"\"3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4\"\"\"\n\nprint(solution(stdin)) # Output: 24\n\nstdin = \"\"\"5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6\"\"\"\n\nprint(solution(stdin)) # Output: 56"
    },
    {
        "number": 4002,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        row = list(map(int, stdin.split()))\n        a.append(row)\n    return max(sum(set(row) & set(range(1, k+1)) for row in a) // k, 0)"
    },
    {
        "number": 4002,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    ans = 0\n    for row in a:\n        row.sort(reverse=True)\n        row_sum = sum(row)\n        half = row_sum // 2\n        if half * k < row_sum:\n            half += 1\n        ans += sum(row[:half])\n    return ans"
    },
    {
        "number": 4002,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n    sums = [sum(row) for row in a]\n    max_sum = 0\n    for i in range(n):\n        row_sums = sorted([sums[j] for j in range(n) if j!= i], reverse=True)\n        for j in range(m // 2):\n            max_sum = max(max_sum, row_sums[j] + row_sums[j + 1])\n    return str(max_sum % k)"
    },
    {
        "number": 4002,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n    dp = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            dp[i][j] = dp[i-1][j] + a[i][j] if i > 0 else a[i][j]\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            cnt = min(j+1, m-j)\n            if cnt > (m+k-1)//k:\n                cnt = (m+k-1)//k\n            for c in range(1, cnt+1):\n                if (j+c-1) < m and (dp[i][j] + dp[i][j+c] - dp[i][j+c-1]) % k == 0:\n                    res = max(res, dp[i][j] + dp[i][j+c] - dp[i][j+c-1])\n    return str(res)"
    },
    {
        "number": 4003,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    ans = 1\n    res = ''\n    for i in range(n-1):\n        if a[i+1] > a[i]:\n            ans += 1\n            res += 'L'\n        else:\n            res += 'R'\n    ans += 1\n    res += 'L'\n    return f'{ans}\\n{res}'\n"
    },
    {
        "number": 4003,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    l, r = 0, n-1\n    ans = 0\n    while l < r:\n        if a[l] < a[r]:\n            l += 1\n        else:\n            r -= 1\n        ans += 1\n    ans += 1 #include the last element\n    ans = 0 if ans == 1 else ans #no answer possible\n    print(ans)\n    res = 'L' * l + 'R' * (n - r - 1)\n    print(res)"
    },
    {
        "number": 4003,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    k = 0\n    move = 'R'\n    count = 1\n    prev = a[0]\n\n    # Iterate over all elements\n    for i in range(1, n):\n        # Check if current element is smaller than previous element\n        if a[i] < prev:\n            # Check if we can make a longer sequence with current element\n            if count > k:\n                # Update maximum sequence length\n                k = count\n                # Update move sequence\n                moves = move * k\n            # Update previous element\n            prev = a[i]\n            # Reset move count\n            count = 1\n            # Switch to opposite move\n            if move == 'L':\n                move = 'R'\n            else:\n                move = 'L'\n        else:\n            # Increment move count\n            count += 1\n\n    # Check if there are remaining elements\n    if count > k:\n        # Update maximum sequence length\n        k = count\n        # Update move sequence\n        moves = move * k\n\n    # Return output\n    return f\"{k}\\n{moves}\""
    },
    {
        "number": 4003,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    l = [0] * n\n    r = [0] * n\n\n    # calculate left and right sums of subarrays\n    l[0] = a[0]\n    r[n-1] = a[n-1]\n    for i in range(1, n):\n        l[i] = l[i-1] + a[i]\n    for i in range(n-2, -1, -1):\n        r[i] = r[i+1] + a[i]\n\n    # find max sum of subarrays\n    max_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            cur_sum = l[i] + r[j] - a[i] - a[j]\n            max_sum = max(max_sum, cur_sum)\n\n    # calculate moves to get max sum\n    moves = ['R'] * max_sum\n    i, j = 0, n-1\n    for k in range(max_sum):\n        if l[i] >= r[j]:\n            moves[k] = 'L'\n            j -= 1\n        else:\n            i += 1\n\n    # print result\n    k = max_sum - moves.count('R')\n    print(k)\n    print(''.join(moves))\n"
    },
    {
        "number": 4003,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if n == 1:\n        return \"1\\nR\"\n    max_length = 1\n    result = []\n    for i in range(n - 1):\n        if a[i] < a[i+1]:\n            continue\n        left_length = i+1\n        right_length = n - i - 1\n        if left_length > right_length:\n            left_length, right_length = right_length, left_length\n        if left_length + 1 > max_length:\n            max_length = left_length + 1\n            result = ['L' for _ in range(left_length)] + ['R' for _ in range(right_length)]\n    if max_length == 1:\n        return \"1\\nR\"\n    return f\"{max_length}\\n{''.join(result)}\""
    },
    {
        "number": 4003,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Case 1: LRRR\n    # Take the leftmost element of the sequence and write it down\n    # Repeat for the remaining n-1 elements of the sequence\n\n    # Case 2: LRLRRR\n    # Take the leftmost element of the sequence and write it down\n    # Repeat for the remaining n-2 elements of the sequence, then take the rightmost element and write it down\n    # Repeat for the remaining 2 elements of the sequence, then take the leftmost element and write it down\n    # Repeat for the remaining 1 element of the sequence, then take the rightmost element and write it down\n\n    # Case 3: R\n    # Take the rightmost element of the sequence and write it down\n\n    # Find the maximum length of an increasing sequence\n    length = 1\n    for i in range(n-1):\n        if a[i] < a[i+1]:\n            length += 1\n        else:\n            break\n\n    # Find the maximum length of an increasing sequence obtained by taking the leftmost and rightmost elements\n    left_length = 1\n    right_length = 1\n    for i in range(1, n):\n        if a[i] < a[i-1]:\n            left_length += 1\n        else:\n            break\n    for i in range(n-2, -1, -1):\n        if a[i] < a[i+1]:\n            right_length += 1\n        else:\n            break\n\n    # Find the maximum length of an increasing sequence obtained by taking the leftmost, rightmost, and middle elements\n    middle_length = 0\n    for i in range(1, n-1):\n        if a[i] < a[i-1] and a[i] < a[i+1]:\n            middle_length += 1\n        else:\n            break\n\n    # Find the maximum length of an increasing sequence obtained by taking the leftmost and rightmost elements,\n    # then the leftmost and middle elements, then the rightmost and middle elements\n    left_middle_length = 1\n    right_middle_length = 1\n    for i in range(1, n-1):\n        if a[i] < a[i-1]:\n            left_middle_length += 1\n        else:\n            break\n    for i in range(n-2, 1, -1):\n        if a[i] < a[i+1]:\n            right_middle_length += 1\n        else:\n            break\n\n    # Print the maximum length of an increasing sequence\n    k = max(length, left_length, right_length, middle_length, left_middle_length, right_middle_length)\n    print(k)\n\n    # Find the sequence with the maximum length\n    if k == length:\n        s = \"L\" * length\n    elif k == left_length:\n        s = \"L\" * left_length + \"R\" + \"L\" * (length - left_length - 1)\n    elif k == right_length:\n        s = \"R\" + \"L\" * (length - right_length - 1) + \"R\"\n    elif k == middle_length:\n        s = \"L\" * left_middle_length + \"R\" + \"L\" * (middle_length - 1) + \"R\" + \"L\" * (right_middle_length - 1)\n    elif k == left_middle_length:\n        s = \"L\" * left_middle_length + \"R\" + \"L\" * (left_length - left_middle_length - 1) + \"R\" + \"L\" * (right_middle_length - 1)\n    else:\n        s = \"R\" + \"L\" * (left_length - right_middle_length - 1) + \"R\" + \"L\" * (right_middle_length - 1)\n    print(s)\n    return s"
    },
    {
        "number": 4003,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # initialize variables\n    res = 0\n    curr = [0]\n    \n    # iterate through the sequence\n    for i in range(n):\n        # check if the leftmost element can be added to the current sequence\n        if curr[-1] < a[i]:\n            curr.append(a[i])\n        # if not, move the leftmost element from the current sequence to the result\n        else:\n            res += len(curr)\n            curr = [a[i]]\n    \n    # add the remaining elements to the result\n    res += len(curr)\n    \n    # output the result and the corresponding string of moves\n    print(res)\n    return \"R\" * (res-1) + \"L\""
    },
    {
        "number": 4003,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    # initialize variables\n    m = 0\n    ans = \"\"\n    for i in range(1, n):\n        # check if we can obtain a strictly increasing sequence with length i\n        if a[i] > a[i-1]:\n            if i > m:\n                m = i\n                ans = \"R\" * i\n            else:\n                ans = ans[:i] + \"R\" + ans[i:]\n    # check if we can obtain a strictly increasing sequence with length n\n    if n > m:\n        m = n\n        ans = \"R\" * n\n    return str(m) + \"\\n\" + ans"
    },
    {
        "number": 4003,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # we can solve this problem using dynamic programming\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = max(dp[i-1], i-1 + dp[i-i])\n    ans = dp[n]\n\n    # backtracking to find the moves\n    moves = ''\n    i = n\n    while i > 0:\n        if dp[i-1] > dp[i-i]:\n            moves += 'L'\n            i -= 1\n        else:\n            moves += 'R'\n            i -= i\n    moves = moves[::-1]\n\n    return str(ans) + '\\n' + moves"
    },
    {
        "number": 4003,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing the input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_len = 1\n    max_seq = [a[0]]\n    left, right = 0, n - 1\n\n    # Iterate over all possible subsequences of the input sequence\n    for i in range(1, n):\n        for j in range(i, n):\n            # Generate a subsequence\n            subseq = a[left:i+1] + a[j:right+1]\n            # Check if the subsequence is strictly increasing\n            if all(subseq[k] < subseq[k+1] for k in range(len(subseq)-1)):\n                # Update the maximum length and sequence if needed\n                if len(subseq) > max_len:\n                    max_len = len(subseq)\n                    max_seq = subseq\n            # Update the indices of the leftmost and rightmost elements\n            left, right = min(left, i), max(right, j)\n\n    # Convert the maximum sequence to a string of LR characters\n    max_seq_str = ''.join('L' if i < n//2 else 'R' for i in range(max_len))\n\n    # Return the result as a string\n    return f'{max_len}\\n{max_seq_str}'"
    },
    {
        "number": 4004,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    total = sum(a)\n    d = float('inf')\n    for i in range(1, total+1):\n        if total % i == 0 and all(j % i == 0 for j in a):\n            d = min(d, i)\n    if d == float('inf'):\n        return '-1'\n    else:\n        return str(d)"
    },
    {
        "number": 4004,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # initialize D as max possible value\n    D = max(a)\n    # check if adding D to any a[i] will make it equal to another a[j]\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + D == a[j]:\n                D -= 1\n                break\n    # check if subtracting D from any a[i] will make it equal to another a[j]\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] - D == a[j]:\n                D -= 1\n                break\n    # check if leaving a[i] unchanged will make it equal to another a[j]\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] == a[j]:\n                D -= 1\n                break\n    # check if D is minimum possible value\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + D == a[j]:\n                D -= 1\n                break\n            if a[i] - D == a[j]:\n                D -= 1\n                break\n            if a[i] == a[j]:\n                D -= 1\n                break\n    # check if D is -1, which means we couldn't find minimum D value\n    if D == -1:\n        return '-1'\n    else:\n        return str(D)\n\nprint(solution(input()))"
    },
    {
        "number": 4004,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, *a = map(int, stdin.split())\n\n    # Check if all elements are equal\n    if len(set(a)) == 1:\n        return str(-1)\n\n    # Brute force search for minimum D\n    D_min = 1\n    while True:\n        a_new = [x + D_min if x + D_min >= 0 else 0 for x in a]\n        if all(x == a_new[0] for x in a_new):\n            return str(D_min)\n        D_min += 1\n\n    # There should be at least one valid D to reach here\n    return str(-1)"
    },
    {
        "number": 4004,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    min_d = -1\n    res = 0\n    n_zeros = n\n\n    # Loop through all possible values of D\n    for i in range(1, 101):\n        d = i\n        # Check if adding d to some a_i and subtracting d from some a_i gives all values equal\n        equal = True\n        for j in range(n):\n            if a[j] + d <= 0:\n                equal = False\n                break\n            if a[j] - d < 0:\n                equal = False\n                break\n        if equal:\n            # Check if d is minimum possible\n            if d < min_d or min_d == -1:\n                min_d = d\n                res = d * n_zeros\n            # Check if d is less than min_d but makes all values equal\n            elif d == min_d:\n                res = d * n_zeros\n        # Check if subtracting d from some a_i and leaving some a_i without changes gives all values equal\n        equal = True\n        for j in range(n):\n            if a[j] - d < 0:\n                equal = False\n                break\n        if equal:\n            # Check if d is minimum possible\n            if d < min_d or min_d == -1:\n                min_d = d\n                res = d * n_zeros\n            # Check if d is less than min_d but makes all values equal\n            elif d == min_d:\n                res = d * n_zeros\n        # Check if adding d to some a_i and leaving some a_i without changes gives all values equal\n        equal = True\n        for j in range(n):\n            if a[j] + d <= 0:\n                equal = False\n                break\n        if equal:\n            # Check if d is minimum possible\n            if d < min_d or min_d == -1:\n                min_d = d\n                res = d * n_zeros\n            # Check if d is less than min_d but makes all values equal\n            elif d == min_d:\n                res = d * n_zeros\n\n    # Print the result\n    if min_d == -1:\n        return \"-1\"\n    else:\n        return str(res)"
    },
    {
        "number": 4004,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    s = sum(a)\n    if s % n!= 0:\n        return -1\n    target = s // n\n    for i in range(1, n):\n        if (a[i-1] + target!= a[i]) and (a[i-1] - target!= a[i]) and (a[i]!= a[i-1]):\n            return -1\n    return target\n\nstdin = \"6\\n1 4 4 7 4 1\"\nprint(solution(stdin)) # Output: 3\n\nstdin = \"5\\n2 2 5 2 5\"\nprint(solution(stdin)) # Output: 3\n\nstdin = \"4\\n1 3 3 7\"\nprint(solution(stdin)) # Output: -1\n\nstdin = \"2\\n2 8\"\nprint(solution(stdin)) # Output: 3"
    },
    {
        "number": 4004,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    if all(a[i] == a[0] for i in range(n)):\n        return -1\n    d = 0\n    while all(a[i]!= a[0] for i in range(n)):\n        if a.count(a[0]) == n:\n            return d\n        d += 1\n        for i in range(n):\n            if a[i] == a[0]:\n                continue\n            if a[i] + d > 0:\n                a[i] += d\n            elif a[i] - d > 0:\n                a[i] -= d\n    return -1\n\nstdin = \"6\\n1 4 4 7 4 1\\n\"\nprint(solution(stdin)) # Output: 3\n\nstdin = \"5\\n2 2 5 2 5\\n\"\nprint(solution(stdin)) # Output: 3\n\nstdin = \"4\\n1 3 3 7\\n\"\nprint(solution(stdin)) # Output: -1\n\nstdin = \"2\\n2 8\\n\"\nprint(solution(stdin)) # Output: 3"
    },
    {
        "number": 4004,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    d = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] == a[j]:\n                continue\n            for k in range(j+1, n):\n                if a[i] == a[k] and a[j] == a[k]:\n                    continue\n                diff1 = a[j] - a[i]\n                diff2 = a[k] - a[i]\n                if diff1 < 0:\n                    diff1 *= -1\n                if diff2 < 0:\n                    diff2 *= -1\n                if diff1 + diff2 == a[i] - a[j] + a[i] - a[k]:\n                    d = min(d, diff1+diff2)\n    if d == float('inf'):\n        return '-1'\n    return str(d)"
    },
    {
        "number": 4004,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    if len(set(a)) == 1:\n        return -1\n\n    min_d = float('inf')\n    for d in range(1, 10001):\n        a_ = [ai + d if ai + d >= 1 else 1 for ai in a]\n        a_ = [ai - d if ai - d >= 1 else 1 for ai in a_]\n        a_ = list(set(a_))\n        if len(a_) == 1:\n            min_d = min(min_d, d)\n\n    return str(min_d) if min_d!= float('inf') else -1\n\nprint(solution(sys.stdin))"
    },
    {
        "number": 4004,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    a = a[1:]\n    m = max(a)\n    d = m + 1\n    while True:\n        a1 = [a[0] + d] + a[1:]\n        a2 = a[:n-1] + [a[n-1] - d]\n        a3 = a[:n-2] + [a[n-2] + d, a[n-1] - d]\n        if all(a1[i] == a2[i] == a3[i] for i in range(n)):\n            return str(d)\n        d += 1\n    return '-1'\n\nprint(solution(\"6\\n1 4 4 7 4 1\")) # Output: 3\nprint(solution(\"5\\n2 2 5 2 5\")) # Output: 3\nprint(solution(\"4\\n1 3 3 7\")) # Output: -1\nprint(solution(\"2\\n2 8\")) # Output: 3"
    },
    {
        "number": 4004,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    D = 0\n    for i in range(n):\n        if all(x == a[i] + D or x == a[i] - D or x == a[i] for x in a):\n            continue\n        if all(x == a[i] + D or x == a[i] - D or x == a[i] - 2*D for x in a):\n            D = 2\n            continue\n        if all(x == a[i] + D or x == a[i] - D or x == a[i] - 3*D for x in a):\n            D = 3\n            continue\n        break\n    if D == 0:\n        return '-1'\n    else:\n        return str(D)"
    },
    {
        "number": 4005,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.readline().split())\n    x3, y3, x4, y4 = map(int, stdin.readline().split())\n    x5, y5, x6, y6 = map(int, stdin.readline().split())\n\n    if not (x3 <= x1 <= x4 and x5 <= x1 <= x6):\n        return \"NO\"\n    if not (y3 <= y1 <= y4 and y5 <= y1 <= y6):\n        return \"NO\"\n    if not (x3 <= x2 <= x4 and x5 <= x2 <= x6):\n        return \"NO\"\n    if not (y3 <= y2 <= y4 and y5 <= y2 <= y6):\n        return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4005,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    x1, y1, x2, y2 = map(int, stdin.readline().strip().split())\n    x3, y3, x4, y4 = map(int, stdin.readline().strip().split())\n    x5, y5, x6, y6 = map(int, stdin.readline().strip().split())\n    \n    # check if there is some visible part of the white sheet\n    for i in range(x1, x2+1):\n        for j in range(y1, y2+1):\n            if i == x1 or i == x2 or j == y1 or j == y2:\n                # the point (i,j) is on the boundary of the white sheet\n                continue\n            if i > x3 and i < x4 and j > y3 and j < y4:\n                # the point (i,j) is inside one of the black sheets\n                continue\n            if i > x5 and i < x6 and j > y5 and j < y6:\n                # the point (i,j) is inside one of the black sheets\n                continue\n            if (i,j) == (x1,y1):\n                continue\n            if (i,j) == (x2,y2):\n                continue\n            if (i,j) == (x3,y3):\n                continue\n            if (i,j) == (x4,y4):\n                continue\n            if (i,j) == (x5,y5):\n                continue\n            if (i,j) == (x6,y6):\n                continue\n            # the point (i,j) is not visible from the above, so there is some visible part of the white sheet\n            return \"YES\"\n            \n    # no visible part of the white sheet found\n    return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.readline().split())\n    x_3, y_3, x_4, y_4 = map(int, stdin.readline().split())\n    x_5, y_5, x_6, y_6 = map(int, stdin.readline().split())\n\n    # Check if any point lies outside all sheets\n    for x in range(x_1, x_2+1):\n        for y in range(y_1, y_2+1):\n            if not (x_3 < x < x_4 and y_3 < y < y_4) and not (x_5 < x < x_6 and y_5 < y < y_6):\n                return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    (x1, y1, x2, y2), (x3, y3, x4, y4), (x5, y5, x6, y6) = map(int, stdin.split())\n    \n    # Check if any part of the white sheet can be seen from above\n    for x in range(x1, x2+1):\n        for y in range(y1, y2+1):\n            if x == x1 or x == x2 or y == y1 or y == y2:\n                continue\n            if x3 <= x <= x4 and y3 <= y <= y4 or x5 <= x <= x6 and y5 <= y <= y6:\n                continue\n            print(\"YES\")\n            return\n        \n    # No part of the white sheet can be seen from above\n    print(\"NO\")\n    return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split()[:4])\n    x3, y3, x4, y4 = map(int, stdin.split()[4:8])\n    x5, y5, x6, y6 = map(int, stdin.split()[8:])\n    \n    if (x1 <= x3 <= x4 <= x2) and (y1 <= y3 <= y4 <= y2):\n        return \"YES\"\n    if (x1 <= x5 <= x6 <= x2) and (y1 <= y5 <= y6 <= y2):\n        return \"YES\"\n    if (x3 <= x1 <= x2 <= x4) and (y3 <= y1 <= y2 <= y4):\n        return \"YES\"\n    if (x5 <= x1 <= x2 <= x6) and (y5 <= y1 <= y2 <= y6):\n        return \"YES\"\n    if (x3 <= x5 <= x6 <= x4) and (y3 <= y5 <= y6 <= y4):\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.readline().strip().split())\n    x3, y3, x4, y4 = map(int, stdin.readline().strip().split())\n    x5, y5, x6, y6 = map(int, stdin.readline().strip().split())\n    \n    # check if white sheet is visible from above\n    if y1 > y5 and x1 < x3 and x2 > x6:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.readline().strip().split())\n    x3, y3, x4, y4 = map(int, stdin.readline().strip().split())\n    x5, y5, x6, y6 = map(int, stdin.readline().strip().split())\n\n    # check if any part of white sheet is visible\n    for i in range(x1, x2+1):\n        for j in range(y1, y2+1):\n            if (x1 <= i <= x3 and y1 <= j <= y3) or (x1 <= i <= x4 and y1 <= j <= y4) or (x1 <= i <= x5 and y1 <= j <= y5) or (x1 <= i <= x6 and y1 <= j <= y6):\n                continue\n            elif (x3 <= i <= x4 and y3 <= j <= y4) or (x3 <= i <= x5 and y3 <= j <= y5) or (x3 <= i <= x6 and y3 <= j <= y6) or (x4 <= i <= x5 and y4 <= j <= y5) or (x4 <= i <= x6 and y4 <= j <= y6) or (x5 <= i <= x6 and y5 <= j <= y6):\n                continue\n            else:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    x1, y1, x2, y2 = map(int, lines[0].split())\n    x3, y3, x4, y4 = map(int, lines[1].split())\n    x5, y5, x6, y6 = map(int, lines[2].split())\n\n    if x1 <= x3 and x2 >= x4 and y1 <= y3 and y2 >= y4:\n        return \"YES\"\n\n    if x1 <= x5 and x2 >= x6 and y1 <= y5 and y2 >= y6:\n        return \"YES\"\n\n    if x3 <= x5 and x4 >= x6 and y3 <= y5 and y4 >= y6:\n        return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.readline().strip().split())\n    x3, y3, x4, y4 = map(int, stdin.readline().strip().split())\n    x5, y5, x6, y6 = map(int, stdin.readline().strip().split())\n\n    # Check if any point lays outside of white sheet\n    for x in range(x1, x2+1):\n        for y in range(y1, y2+1):\n            if not ((x3 <= x <= x4) and (y3 <= y <= y4)) and not ((x5 <= x <= x6) and (y5 <= y <= y6)):\n                return \"YES\"\n\n    # Check if any point lays inside of white sheet\n    for x in range(x1, x2+1):\n        for y in range(y1, y2+1):\n            if ((x3 <= x <= x4) and (y3 <= y <= y4)) or ((x5 <= x <= x6) and (y5 <= y <= y6)):\n                return \"NO\"\n\n    return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_point_inside_rectangle(x, y, x1, y1, x2, y2):\n        return x1 <= x <= x2 and y1 <= y <= y2\n    \n    lines = stdin.split('\\n')\n    x1, y1, x2, y2 = map(int, lines[0].split())\n    x3, y3, x4, y4 = map(int, lines[1].split())\n    x5, y5, x6, y6 = map(int, lines[2].split())\n\n    # check if any point of the white sheet is inside any of the black sheets\n    for x in range(x1, x2+1):\n        for y in range(y1, y2+1):\n            if is_point_inside_rectangle(x, y, x3, y3, x4, y4) or is_point_inside_rectangle(x, y, x5, y5, x6, y6):\n                return \"NO\"\n    \n    # check if any point of the white sheet is inside the rectangle formed by the two black sheets\n    for x in range(x3, x4+1):\n        for y in range(y3, y4+1):\n            if is_point_inside_rectangle(x, y, x1, y1, x2, y2) or is_point_inside_rectangle(x, y, x5, y5, x6, y6):\n                return \"NO\"\n    for x in range(x5, x6+1):\n        for y in range(y5, y6+1):\n            if is_point_inside_rectangle(x, y, x1, y1, x2, y2) or is_point_inside_rectangle(x, y, x3, y3, x4, y4):\n                return \"NO\"\n    \n    return \"YES\"\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 1\n    seen = set()\n    while n not in seen:\n        seen.add(n)\n        if n % 10 == 0:\n            n //= 10\n        else:\n            n = n + 1\n        count += 1\n    return count"
    },
    {
        "number": 4006,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    reachable = set()\n    current = n\n    while current not in reachable:\n        reachable.add(current)\n        current = f(current)\n    return len(reachable)\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 1\n    numbers = set()\n    numbers.add(n)\n    while True:\n        n = f(n)\n        if n == 0:\n            break\n        numbers.add(n)\n        count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    visited = set()\n    q = [n]\n    while q:\n        num = q.pop(0)\n        if num in visited:\n            continue\n        visited.add(num)\n        if num == 0:\n            count += 1\n            continue\n        num = str(num)\n        while num[-1] == '0':\n            num = num[:-1]\n        num = int(num) + 1\n        if num not in visited:\n            q.append(num)\n    return count\n\nprint(solution(\"1098\")) # Output: 20\nprint(solution(\"10\")) # Output: 19"
    },
    {
        "number": 4006,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    count = set()\n    for i in range(n+1):\n        num = i\n        while num % 10 == 0:\n            num //= 10\n        count.add(num)\n    return len(count)\n\nstdin = \"1098\"\nstdout = solution(stdin)\nprint(stdout) # Output: 20\n\nstdin = \"10\"\nstdout = solution(stdin)\nprint(stdout) # Output: 19"
    },
    {
        "number": 4006,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    reachables = set()\n    for i in range(n+1):\n        count += 1\n        while str(i).endswith('0'):\n            i = int(str(i)[:-1])\n        reachables.add(i)\n    return len(reachables)"
    },
    {
        "number": 4006,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 1 # 1 is always reachable\n    while True:\n        if n % 10 == 0:\n            break\n        n += 1\n        count += 1\n    return count"
    },
    {
        "number": 4006,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = set()\n    i = n\n    while i!= 0:\n        if i % 10 == 0:\n            i //= 10\n        else:\n            i = i + 1\n        count.add(i)\n    print(len(count))"
    },
    {
        "number": 4006,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = set()\n    while True:\n        count.add(n)\n        n = sum(int(digit) for digit in str(n))\n        if n in count:\n            break\n    return len(count)"
    },
    {
        "number": 4006,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = set()\n    q = [n]\n    while q:\n        x = q.pop()\n        if x in count:\n            continue\n        count.add(x)\n        y = f(x)\n        q.append(y)\n    return len(count)\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, *f = map(int, stdin.split())\n\n    # Fill in unknown values\n    for i in range(n):\n        if f[i] == 0:\n            f[i] = i+1\n\n    # Check if solution is valid\n    if len(set(f))!= n:\n        return \"No solution\"\n\n    # Output solution\n    return \" \".join(map(str, f))"
    },
    {
        "number": 4007,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    friends = list(map(int, stdin.split()[1:]))\n    \n    for i in range(n):\n        if friends[i] == 0:\n            for j in range(i+1, n):\n                if friends[j]!= 0:\n                    friends[i] = j+1\n                    break\n    \n    return''.join(map(str, friends))\n\n\nprint(solution(\"5 0 0 2 4\"))\nprint(solution(\"7 0 0 1 4 0 6\"))\nprint(solution(\"7 4 0 3 0 5 1\"))\nprint(solution(\"5 2 1 0 0\"))"
    },
    {
        "number": 4007,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *f = map(int, stdin.split())\n    a = [0] * n\n    b = [0] * n\n\n    for i in range(n):\n        if f[i] == 0:\n            continue\n        a[f[i]-1] = i+1\n\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = i+1\n        b[a[i]-1] = i+1\n\n    return''.join(map(str, b))\n"
    },
    {
        "number": 4007,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    f = list(map(int, stdin.split()[1:]))\n    a = [0] * n\n    for i in range(n):\n        if f[i]!= 0:\n            a[f[i]-1] = i+1\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = i+1\n    return''.join(map(str, a))"
    },
    {
        "number": 4007,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    f = list(map(int, stdin.readline().strip().split()))\n    answer = [0]*n\n    for i in range(n):\n        if f[i] == 0:\n            for j in range(n):\n                if f[j] == 0 or f[j] == i+1:\n                    answer[i] = j+1\n                    break\n        else:\n            answer[i] = f[i]\n    return \" \".join(map(str, answer))\n"
    },
    {
        "number": 4007,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    friends = list(map(int, stdin.split()[1:]))\n    gifts = []\n    for i in range(n):\n        if friends[i] == 0:\n            gifts.append(i+1)\n        else:\n            gifts.append(friends[i])\n    for i in range(n):\n        gifts[friends[i]-1] = i+1\n    return''.join(map(str, gifts))\n\nassert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5\\n2 1 0 0 0\") == \"2 1 4 5 3\""
    },
    {
        "number": 4007,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    f = [int(x) for x in stdin.split()[1:]]\n    res = [0] * n\n    for i in range(n):\n        if f[i] == 0:\n            res[i] = i + 1\n        else:\n            res[i] = f[f[i]-1]\n    for i in range(n):\n        if res[i] == 0:\n            res[i] = i + 1\n    return''.join([str(x) for x in res])\n\nprint(solution(input()))"
    },
    {
        "number": 4007,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *f = map(int, stdin.split())\n    gifts = [i+1 for i in range(n)]\n    for i in range(n):\n        if f[i]!= 0:\n            gifts[f[i]-1] = i+1\n    return''.join(map(str, gifts))\n"
    },
    {
        "number": 4007,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    f = list(map(int, stdin.split('\\n')[1].split()))\n\n    # Initialize all values to None\n    nf = [None]*n\n    \n    # Find the first friend who wants to give the gift to\n    for i in range(n):\n        if f[i]!= 0:\n            nf[i] = f[i]-1\n            nf[f[i]-1] = i\n            break\n    \n    # For the remaining friends\n    for i in range(n):\n        if f[i] == 0:\n            # Find the friend who wants to give the gift to the current friend\n            j = i+1\n            while nf[j-1] is None:\n                j += 1\n                if j == n:\n                    j = i+1\n            \n            # Fill in the value of nf[i]\n            nf[i] = j\n            nf[j-1] = i\n    \n    # Check for contradictions\n    for i in range(n):\n        if nf[i] == i or nf[i] == None:\n            return 'No solution'\n    \n    # Print the solution\n    return''.join(map(str, nf))"
    },
    {
        "number": 4007,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    friends = list(map(int, stdin.readline().strip().split()))\n\n    # Fill in the missing values\n    for i in range(n):\n        if friends[i] == 0:\n            friends[i] = i + 1\n\n    # Check if there are any contradictions\n    for i in range(n):\n        if friends[i] == i + 1:\n            print(-1)\n            return\n\n    # Print the final result\n    for i in range(n):\n        print(n * friends[i], end=\" \")\n\n    return \"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    a.sort()\n    if a[0] > k or a[-1] > k:\n        return \"NO\"\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            return \"NO\"\n    colors = [-1] * n\n    colors[0] = 0\n    for i in range(1, n):\n        colors[i] = (colors[i-1] + 1) % k\n        if colors[i] == 0:\n            return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, colors))"
    },
    {
        "number": 4008,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # Initialize coloring\n    coloring = [-1] * n\n\n    # Initialize color counts\n    color_counts = [0] * k\n\n    # Find first color to use\n    for i in range(n):\n        if color_counts[a[i]-1] == 0:\n            color = a[i]\n            color_counts[a[i]-1] = 1\n            break\n    else:\n        return \"NO\"\n\n    # Color remaining elements using first color\n    for i in range(n):\n        if coloring[i] == -1:\n            coloring[i] = color\n            color_counts[color-1] += 1\n\n    # Check if all elements are colored\n    if all(color!= -1 for color in coloring):\n        return \"YES\\n\" + \" \".join(map(str, coloring))\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    if k > n:\n        return \"NO\"\n    \n    from collections import Counter\n    c = Counter(a)\n    \n    if len(set(c.values()))!= k:\n        return \"NO\"\n    \n    for i in range(1, k+1):\n        if not any(c[j] == i for j in range(n)):\n            return \"NO\"\n    \n    return \"YES\\n\" + \" \".join(str(i) for i in a)\n\nprint(solution(input()))"
    },
    {
        "number": 4008,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n\n    # check if it's possible to color the array in k colors\n    if len(set(a)) < k:\n        return \"NO\"\n\n    # find a valid coloring using greedy approach\n    coloring = [-1] * n\n    for i in range(n):\n        if coloring[i] == -1:\n            color = 1\n            while color <= k:\n                if all(coloring[j]!= color for j in range(i, n) if a[j] == a[i]):\n                    coloring[i] = color\n                    break\n                color += 1\n                if color > k:\n                    return \"NO\"\n\n    # output the valid coloring\n    return \"YES\\n\" + \" \".join(map(str, coloring))\n"
    },
    {
        "number": 4008,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given an array of integers, return a coloring of the array in k colors,\n    if it exists, otherwise return \"NO\".\n    \"\"\"\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # If we cannot color all elements, return \"NO\".\n    if len(set(a)) < n:\n        return \"NO\"\n    # Create a list of sets, where each set represents a color.\n    colors = [set() for _ in range(k)]\n    # Use a greedy approach to color the elements.\n    for i in range(n):\n        # Find the first color that does not contain a previously colored element.\n        for j in range(k):\n            if i not in colors[j]:\n                # Add the current element to the selected color.\n                colors[j].add(i)\n                break\n    # Check if each color contains at least one element.\n    for color in colors:\n        if not color:\n            return \"NO\"\n    # Check if each color contains only distinct elements.\n    for i in range(k):\n        for j in range(i + 1, k):\n            if colors[i] & colors[j]:\n                return \"NO\"\n    # If all checks pass, return \"YES\" and the coloring.\n    return \"YES\\n\" + \" \".join(str(colors[i].pop()) for i in range(k))"
    },
    {
        "number": 4008,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    color = [0] * k\n    for i in range(n):\n        flag = False\n        for j in range(k):\n            if color[j] == 0:\n                color[j] = a[i]\n                flag = True\n                break\n        if not flag:\n            return \"NO\"\n    return \"YES\" + \"\\n\" + \" \".join(str(x) for x in color)"
    },
    {
        "number": 4008,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    # Check if it is possible to color the array in k colors\n    if len(set(a)) < k:\n        return \"NO\"\n    \n    # Initialize the color of each element to 0\n    colors = [0]*n\n    \n    # Assign the first color to the first element\n    colors[0] = 1\n    \n    # Color the remaining elements\n    for i in range(1, n):\n        for j in range(1, k+1):\n            if colors[i-1]!= j and (a[i]!= j or all(colors[x]!= j for x in range(i))):\n                colors[i] = j\n                break\n    \n    # Check if all conditions are satisfied\n    for j in range(1, k+1):\n        if all(colors[i] == j for i in range(n)) and any(colors[i] == j for i in range(n)):\n            return \"YES\" + \" \" + \" \".join(map(str, colors))\n    \n    return \"NO\""
    },
    {
        "number": 4008,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    color_count = [0] * k\n    for i in range(n):\n        color_count[a[i] - 1] += 1\n\n    for i in range(k):\n        if color_count[i] == 0:\n            print(\"NO\")\n            return\n\n    for i in range(k):\n        for j in range(i + 1, k):\n            if color_count[i] == 0 or color_count[j] == 0:\n                continue\n            for x in range(n):\n                if a[x] == i + 1 or a[x] == j + 1:\n                    color_count[a[x] - 1] -= 1\n\n    colors = []\n    for i in range(k):\n        if color_count[i] == 0:\n            continue\n        for j in range(n):\n            if a[j] == i + 1:\n                colors.append(str(i + 1))\n\n    print(\"YES\")\n    print(\" \".join(colors))"
    },
    {
        "number": 4008,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    color = [-1] * n\n    count = [0] * k\n\n    for i in range(n):\n        for j in range(k):\n            if count[j] == 0:\n                color[i] = j + 1\n                count[j] = 1\n                break\n\n    for i in range(k):\n        if count[i] == 0:\n            return \"NO\"\n\n    for i in range(n):\n        if color[i] == -1:\n            return \"NO\"\n\n    return \"YES\"\n\n\nprint(solution(\"4 2\\n1 2 2 3\")) # Output: \"YES\\n1 1 2 2\"\nprint(solution(\"5 2\\n3 2 1 2 3\")) # Output: \"YES\\n2 1 1 2 1\"\nprint(solution(\"5 2\\n2 1 1 2 1\")) # Output: \"NO\""
    },
    {
        "number": 4008,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    # Check if it's possible to color the array in k colors\n    if len(set(a)) < k:\n        return \"NO\"\n    \n    # Create a list of sets, each set represents a color\n    colors = [set() for _ in range(k)]\n    \n    # Assign each element to a color\n    for i in range(n):\n        for j in range(k):\n            if i not in colors[j]:\n                colors[j].add(i)\n                break\n    \n    # Check if each color has at least one element\n    for i in range(k):\n        if not colors[i]:\n            return \"NO\"\n    \n    # Check if each color has distinct elements\n    for i in range(k):\n        if len(colors[i])!= len(a):\n            return \"NO\"\n    \n    # If all the above checks pass, print the coloring\n    return \"YES\\n\" + \" \".join(map(str, [i+1 if i in colors[j] else 0 for j in range(k) for i in range(n)]))"
    },
    {
        "number": 4009,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = stdin.split('\\n')[1]\n\n    if num[x-1] == '1':\n        return '0'\n\n    op = 1\n    for i in range(x-1):\n        op = (op*2) % (10**n)\n\n    return str(op)\n"
    },
    {
        "number": 4009,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.readline().split())\n    num = stdin.readline().strip()\n    \n    def count_ops(n: int, x: int) -> int:\n        if n % x == 0:\n            return 0\n        return 1 + (n % x) // x + count_ops(n // x + 1, x)\n    \n    return count_ops(n - y, x)\n\nprint(solution(stdin))"
    },
    {
        "number": 4009,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = stdin.split()[-1]\n    if int(num[x - 1]) % 2 == 0:\n        return str(2 ** (n - x))\n    else:\n        return str(2 ** (n - x - 1) + 1)"
    },
    {
        "number": 4009,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    number = stdin.split()[1]\n    count = 0\n    for i in range(n):\n        if int(number[i])!= 0:\n            count += 1\n            if count == x:\n                break\n    number = number[i-x+1:i+1]\n    count = 0\n    for i in range(len(number)):\n        if int(number[i]) == 1:\n            count += 1\n            if count == y:\n                return str(count)\n    return str(count)"
    },
    {
        "number": 4009,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = stdin.split()[-1]\n    remainder = int(num[x-y+1:])\n    count = 0\n    while remainder!= 0:\n        if remainder % 10 == 1:\n            count += 1\n            num = list(num)\n            for i in range(y-x+1, len(num)):\n                if num[i] == '1':\n                    num[i] = '0'\n                    break\n            num = ''.join(num)\n        else:\n            count += 1\n            num = list(num)\n            for i in range(y-x+1, len(num)):\n                if num[i] == '0':\n                    num[i] = '1'\n                    break\n            num = ''.join(num)\n        remainder = int(num[x-y+1:])\n    return count\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = list(map(int, stdin.split()[-1]))\n    \n    count = 0\n    for i in range(len(num)):\n        if num[i] == 0 and x <= i < x+y:\n            count += 1\n        elif num[i] == 1 and x+y <= i < n:\n            count += 1\n        elif num[i] == 1 and i >= x+y:\n            count += 1\n    \n    return count"
    },
    {
        "number": 4009,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.strip().split())\n    num = stdin.strip().split('\\n')[1]\n    count = 0\n    for i in range(n):\n        if int(num[i]) == 1:\n            if x-y >= 0:\n                count += 1\n                x -= 1\n            else:\n                count += 1\n    return count\n"
    },
    {
        "number": 4009,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    number = int(stdin.split()[1])\n    count = 0\n    while number % 10**x!= 10**y:\n        if number % 10 == 0:\n            number //= 10\n            count += 1\n        else:\n            number = (number + 1) // 10\n            count += 1\n    return count"
    },
    {
        "number": 4009,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = stdin.split('\\n')[1]\n\n    if x > n:\n        return f\"{0}\\n\"\n\n    count = 0\n    for i in range(x):\n        if num[i] == '0':\n            count += 1\n\n    count += y * (n - x)\n\n    return f\"{count}\\n\""
    },
    {
        "number": 4009,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.readline().strip().split())\n    num = int(stdin.readline().strip())\n    count = 0\n    while num % 10**x!= 10**y:\n        if num % 2 == 0:\n            num //= 2\n        else:\n            num += 1\n            num //= 2\n        count += 1\n    return str(count)"
    },
    {
        "number": 4010,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        subsequence = []\n        for i in range(n):\n            for j in range(i+1, n+1):\n                subsequence.append(a[i:j])\n        subsequence = [x for x in subsequence if len(x) >= 3]\n        for x in subsequence:\n            if x == x[::-1]:\n                return \"YES\"\n        return \"NO\""
    },
    {
        "number": 4010,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        for j in range(len(a)):\n            for k in range(j+2, len(a)+1):\n                if a[j:k] == a[j:k][::-1]:\n                    return \"YES\"\n        return \"NO\""
    },
    {
        "number": 4010,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        palindrome = True\n        for i in range(n):\n            for j in range(i+2, n):\n                if a[i] == a[j] and a[i+1] == a[j-1] and a[j] == a[i+2]:\n                    palindrome = True\n                    break\n            if palindrome:\n                break\n        print(\"YES\" if palindrome else \"NO\")\n    return \"\""
    },
    {
        "number": 4010,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    t = int(lines[0])\n\n    for i in range(1, t * 2 + 1, 2):\n        n = int(lines[i])\n        a = list(map(int, lines[i + 1].split()))\n\n        for j in range(n):\n            for k in range(j + 2, n + 1):\n                subseq = a[j:k]\n                if subseq == subseq[::-1]:\n                    return \"YES\"\n\n        return \"NO\""
    },
    {
        "number": 4010,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin.readline())):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        if any(len(sub) >= 3 and sub == sub[::-1] for sub in [a[j:k] for j in range(n) for k in range(j+3, n+1)]):\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4010,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        # Check if a has a palindrome subsequence of length at least 3\n        for i in range(n):\n            for j in range(i+3, n+1):\n                if a[i:j] == a[i:j][::-1]:\n                    return \"YES\"\n        return \"NO\""
    },
    {
        "number": 4010,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        for i in range(len(a)):\n            for j in range(i+2, len(a)+1):\n                if a[i:j] == a[i:j][::-1]:\n                    return \"YES\"\n        return \"NO\"\n```python\nimport io"
    },
    {
        "number": 4010,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    for i in range(n):\n        for j in range(i + 3, n + 1):\n            subseq = a[i:j]\n            if subseq == subseq[::-1]:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(arr):\n        for i in range(len(arr)//2):\n            if arr[i]!= arr[-i-1]:\n                return False\n        return True\n\n    # Read input\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        # Check for subsequences of length at least 3\n        for j in range(len(a)):\n            for k in range(j+2, len(a)+1):\n                if is_palindrome(a[j:k]):\n                    return \"YES\"\n        return \"NO\""
    },
    {
        "number": 4010,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        found = False\n        for j in range(n):\n            for k in range(j+2, n+1):\n                if a[j:k] == a[j:k][::-1]:\n                    found = True\n                    break\n            if found:\n                break\n        print(\"YES\" if found else \"NO\")\n"
    },
    {
        "number": 4011,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    f = list(map(int, stdin.readline().strip().split()))\n    dp = [0] * (1 << n)\n    dp[0] = int(a)\n    for i in range(1, 1 << n):\n        for j in range(n):\n            if (i >> j) & 1:\n                dp[i] += f[int(a[j])] * 10 ** (n - j - 1)\n    return str(max(dp))"
    },
    {
        "number": 4011,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = [int(x) for x in stdin.readline().strip().split()]\n\n    # apply operation no more than once\n    max_num = a\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            segment = a[i:j]\n            new_segment = ''.join([str(f[int(x) - 1]) for x in segment])\n            new_num = a[:i] + new_segment + a[j:]\n            max_num = max(max_num, new_num)\n\n    return max_num\n"
    },
    {
        "number": 4011,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    f = list(map(int, stdin.readline().split()))\n    for i in range(len(a) - 1, -1, -1):\n        if f[int(a[i])]!= int(a[i]):\n            a = a[:i] + str(f[int(a[i])]) + a[i+1:]\n    return a"
    },
    {
        "number": 4011,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = stdin.split('\\n')[1]\n    f = list(map(int, stdin.split('\\n')[2].split()))\n\n    for i in range(n):\n        if i+2 <= n:\n            segment = a[i:i+3]\n            sub_a = int(segment)\n            sub_a = f[sub_a]\n            a = a[:i] + str(sub_a) + a[i+3:]\n\n    return a\n\nprint(solution(\"4\\n1337\\n1 2 5 4 6 6 3 1 9\"))\nprint(solution(\"5\\n11111\\n9 8 7 6 5 4 3 2 1\"))\nprint(solution(\"2\\n33\\n1 1 1 1 1 1 1 1 1\"))"
    },
    {
        "number": 4011,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = list(map(int, stdin.readline().strip().split()))\n\n    count = [0] * 10\n    for i in range(10):\n        count[f[i-1]] = 0\n\n    for digit in a:\n        count[int(digit)] += 1\n\n    result = []\n    for digit in count:\n        result.append(str(digit))\n\n    return ''.join(result)\n\nprint(solution(sys.stdin))"
    },
    {
        "number": 4011,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, *f = map(int, stdin.split())\n    f = {i: v for i, v in enumerate(f, 1)}\n    memo = {}\n\n    def dfs(start: int, end: int):\n        if (start, end) in memo:\n            return memo[(start, end)]\n        if start == end:\n            memo[(start, end)] = int(a[start-1])\n            return memo[(start, end)]\n        result = 0\n        for i in range(start, end+1):\n            result = 10 * result + f[int(a[i-1])]\n        memo[(start, end)] = result\n        return result\n\n    ans = dfs(1, n)\n    for i in range(2, n+1):\n        ans = max(ans, dfs(i, n))\n    return str(ans)"
    },
    {
        "number": 4011,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = list(map(int, stdin.readline().strip().split()))\n\n    # Find the longest substring of distinct digits in a\n    longest_substring = a[0]\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            longest_substring = a[i-1] + longest_substring\n            break\n\n    # Replace each digit in longest_substring with the corresponding digit in f\n    max_num = ''\n    for c in longest_substring:\n        max_num += str(f[int(c)-1])\n\n    # Check if we can extend max_num to include all digits of a\n    for i in range(n):\n        if a[i]!= max_num[-n+i]:\n            max_num += str(f[int(a[i])-1])\n\n    return max_num"
    },
    {
        "number": 4011,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, f = map(int, stdin.split())\n    a = list(map(int, a))\n\n    for i in range(n):\n        a[i] = f[a[i] - 1]\n\n    return str(int(''.join(map(str, a))))"
    },
    {
        "number": 4011,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    f = list(map(int, stdin.readline().strip().split()))\n    for i in range(n):\n        a = str(f[int(a[i])]) + a[i+1:]\n    return int(a)"
    },
    {
        "number": 4011,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, f = map(int, stdin.readline().split()), stdin.readline().strip(), list(map(int, stdin.readline().split()))\n    max_num = a\n    for i in range(n):\n        for j in range(i+1, n+1):\n            segment = a[i:j]\n            num = int(segment)\n            if num == 0:\n                continue\n            new_num = ''\n            for digit in segment:\n                new_num += str(f[int(digit)-1])\n            new_num = int(new_num)\n            if new_num > num:\n                max_num = max(max_num, new_num)\n    return str(max_num)\n\nprint(solution(\"4\\n1337\\n1 2 5 4 6 6 3 1 9\")) # Output: 1557\nprint(solution(\"5\\n11111\\n9 8 7 6 5 4 3 2 1\")) # Output: 99999\nprint(solution(\"2\\n33\\n1 1 1 1 1 1 1 1 1\")) # Output: 33"
    },
    {
        "number": 4012,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, c = map(int, stdin.readline().strip().split())\n        res = 0\n        if b % a == 0 and c % b == 0:\n            res = 0\n        elif b % a == 0 and c % a == 0:\n            res = 1\n        elif a % b == 0 and c % b == 0:\n            res = 1\n        else:\n            res = 2\n        if res == 0:\n            print(res)\n            print(a, b, c)\n        elif res == 1:\n            print(res)\n            print(a, b, b)\n        elif res == 2:\n            print(res)\n            print(b, b, c)"
    },
    {
        "number": 4012,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, c = map(int, stdin.readline().strip().split())\n        if b % a == 0 and c % b == 0:\n            print(\"1\")\n            print(a, b, c)\n            continue\n        elif b % a == 0 and c % b!= 0:\n            print(min(b//a, c//b))\n            print(a, b, a*b)\n            continue\n        else:\n            print(min(b//a, c//b))\n            print(a, b, c)\n            continue\n    return \"\""
    },
    {
        "number": 4012,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, c = map(int, stdin.readline().strip().split())\n        if a == b == c:\n            print(0)\n            print(a, b, c)\n            continue\n        if a == 1 or b == 1 or c == 1:\n            print(2)\n            print(1, b, c) if a == 1 else print(a, 1, c) if b == 1 else print(a, b, 1)\n            continue\n        if b % a == 0 and c % b == 0:\n            print(0)\n            print(a, b, c)\n            continue\n        min_steps = min(a, b, c)\n        if min_steps == c:\n            print(a+b-c)\n            print(a+b-c, a+1, c)\n        elif min_steps == b:\n            print(a+b-b)\n            print(a, b+1, b)\n        else:\n            print(b+c-a)\n            print(b, b+1, c-1)"
    },
    {
        "number": 4012,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.splitlines():\n        a, b, c = map(int, line.split())\n        # initialize variables for minimum operations and answer\n        min_ops = float('inf')\n        ans_a, ans_b, ans_c = None, None, None\n\n        # check all possible permutations of the integers\n        for i in range(a, c+1):\n            for j in range(b, c+1):\n                k = c // gcd(i, j) # the third number needs to be divisible by i*j\n                # check if the second number is divisible by the first number and the third number is divisible by the second number\n                if j % i == 0 and k % j == 0:\n                    # count the number of operations needed to get the triplet\n                    count = abs(i-a) + abs(j-b) + abs(k-c)\n                    # update the minimum number of operations and answer\n                    if count < min_ops:\n                        min_ops = count\n                        ans_a, ans_b, ans_c = i, j, k\n\n        # print the answer\n        print(min_ops)\n        print(ans_a, ans_b, ans_c)"
    },
    {
        "number": 4012,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline().strip())\n\n    for i in range(test_cases):\n        a, b, c = map(int, stdin.readline().strip().split())\n        op = 0\n\n        if b % a == 0 and c % b == 0:\n            res = 0\n            A = b\n            B = c\n            C = a\n        elif a % b == 0 and c % a == 0:\n            res = 1\n            A = a\n            B = c\n            C = b\n        else:\n            res = float('inf')\n            for x in range(a, b+1):\n                for y in range(b+1, c+1):\n                    if x % b == 0 and y % a == 0:\n                        if x*y > a*b*c:\n                            res = min(res, x*y/a/b/c)\n                            A = x\n                            B = y\n                            C = c\n\n            if res == float('inf'):\n                print(res)\n                continue\n\n        print(res)\n        print(A, B, C)\n\n    return \"\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    t = int(stdin.readline())\n    inputs = []\n    for i in range(t):\n        inputs.append(list(map(int, stdin.readline().split())))\n    \n    # Solving the problem\n    res = float('inf')\n    for i in range(t):\n        a, b, c = inputs[i]\n        if a > c:\n            a, c = c, a\n        if b % a == 0 and c % b == 0:\n            continue\n        if a == c:\n            res = min(res, abs(b-a))\n        else:\n            res = min(res, 2*abs(b-c) + abs(a-c))\n    for i in range(t):\n        a, b, c = inputs[i]\n        if a > c:\n            a, c = c, a\n        if b % a == 0 and c % b == 0:\n            continue\n        if a == c:\n            res = min(res, abs(b-a))\n        else:\n            res = min(res, 2*abs(b-c) + abs(a-c))\n    \n    # Writing output\n    for i in range(t):\n        a, b, c = inputs[i]\n        if a > c:\n            a, c = c, a\n        if b % a == 0 and c % b == 0:\n            print(res, a, b, c)\n        else:\n            print(res)\n    \n    return str(res)"
    },
    {
        "number": 4012,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    results = []\n    for i in range(1, len(lines)):\n        a, b, c = map(int, lines[i].split())\n        if b % a == 0 and c % b == 0:\n            results.append('1')\n        else:\n            res = 0\n            while a <= b and b <= c:\n                b += 1\n                if b % a == 0 and c % b == 0:\n                    break\n                else:\n                    res += 1\n            results.append(str(res))\n            if b % a == 0 and c % b == 0:\n                results.append(f'{a} {b} {c}')\n            else:\n                results.append(f'{b} {c}')\n    return '\\n'.join(results)\n"
    },
    {
        "number": 4012,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    t = int(stdin[0])\n    for i in range(1, t+1):\n        a, b, c = map(int, stdin[i].split())\n        if b % a == 0 and c % b == 0:\n            res = 0\n            ans = [a, b, c]\n            break\n        else:\n            res = float('inf')\n            for j in range(a, b+1):\n                if b % j == 0:\n                    for k in range(b+1, c+1):\n                        if c % k == 0 and b // j == k // j:\n                            if abs(k - j) + abs(k - b) + abs(j - b) < res:\n                                res = abs(k - j) + abs(k - b) + abs(j - b)\n                                ans = [j, b, k]\n            print(res)\n            print(*ans)\n    return ''\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    for line in stdin.split(\"\\n\"):\n        a, b, c = map(int, line.split())\n        if b % a == 0 and c % b == 0:\n            res = 0\n            break\n        elif b % a == 0:\n            res += (c - b) // a\n        elif c % b == 0:\n            res += (b - a) // c\n        else:\n            res += (b - a) + (c - b)\n    return f\"{res}\\n\"\n\nprint(solution(\"8\\n1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\\n\"))"
    },
    {
        "number": 4012,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    t = int(lines[0])\n    for i in range(1, t * 3 + 1, 3):\n        a, b, c = map(int, lines[i].split())\n        res = 0\n        if b % a == 0 and c % b == 0:\n            print(res)\n            print(a, b, c)\n        else:\n            for x in range(a + 1):\n                for y in range(b - x, -1, -1):\n                    if x + y > c:\n                        break\n                    if b % x == 0 and c % y == 0:\n                        res = max(res, x + y)\n            print(res)\n            if res > 0:\n                print(a + res, b + res, c + res)\n            else:\n                print(a, b, c)\n    return \"\"\n\nstdin = \"\"\"\n8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n\"\"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4013,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    return str(max(a[-1]-a[1], a[-2]-a[0]))"
    },
    {
        "number": 4013,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    if a[n-2] == a[n-1]:\n        return str(0)\n    else:\n        return str(a[n-2] - a[n-1])"
    },
    {
        "number": 4013,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    instability = max(a) - min(a)\n    if n == 2:\n        return str(instability)\n    for i in range(n):\n        a_new = a[:i] + a[i+1:]\n        instability_new = max(a_new) - min(a_new)\n        if instability > instability_new:\n            instability = instability_new\n    return str(instability)"
    },
    {
        "number": 4013,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    return max(a[n-1] - a[0], a[n-2] - a[1])"
    },
    {
        "number": 4013,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    instability = max(a) - min(a)\n    if n == 2:\n        return str(0)\n    elif n == 3:\n        return str(a[0] + a[1] - min(a[0], a[1]))\n    else:\n        a.sort()\n        for i in range(n-1):\n            a[i+1] += a[i]\n        return str(max(a[1:-1]) - min(a[1:-1]))"
    },
    {
        "number": 4013,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    instability = max(a) - min(a)\n    if n == 2:\n        return str(instability)\n    if n == 1:\n        return str(a[0])\n\n    for i in range(n):\n        for j in range(i+1, n):\n            a[i], a[j] = a[j], a[i]\n            new_instability = max(a[:i]+a[i+1:]) - min(a[:i]+a[i+1:])\n            if new_instability < instability:\n                instability = new_instability\n            a[i], a[j] = a[j], a[i]\n    return str(instability)"
    },
    {
        "number": 4013,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    instability = a[-1] - a[0]\n    if n == 2:\n        return str(instability)\n    for i in range(n-1):\n        new_instability = a[i+1] - a[0]\n        if new_instability < instability:\n            instability = new_instability\n            print(instability)\n    return str(instability)\n"
    },
    {
        "number": 4013,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    return str(a[-1] - a[0])"
    },
    {
        "number": 4013,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a.sort()\n    return max(a[n-2] - a[1], a[n-1] - a[0])"
    },
    {
        "number": 4013,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    return a[-1] - a[0] - 1\n\nprint(solution(\"4\\n1 3 3 7\"))\nprint(solution(\"2\\n1 100000\"))"
    },
    {
        "number": 4014,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: Implement solution\n    pass"
    },
    {
        "number": 4014,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    special_days = []\n    for i in range(m):\n        s, d, c = map(int, stdin.split())\n        special_days.append((s, d, c))\n    \n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        for s, d, c in special_days:\n            if s <= i <= d-c:\n                dp[i] += 1\n        if dp[i] > 1:\n            return -1\n    \n    schedule = [0] * n\n    for i in range(n-1, -1, -1):\n        if dp[i] > 0:\n            schedule[dp[i]-1] = i\n            dp[i] -= 1\n    \n    if sum(schedule) < m:\n        return -1\n    \n    return''.join(map(str, schedule))"
    },
    {
        "number": 4014,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    exams = []\n    for _ in range(m):\n        s, d, c = map(int, stdin.split())\n        exams.append((s, d, c))\n    days = [0] * (n+1)\n    schedule = [0] * (n+1)\n    for i in range(m):\n        s, d, c = exams[i]\n        days[s] += 1\n        for j in range(s, d):\n            days[j+1] += 1\n    max_days = days[n]\n    if max_days < (m+1)*n:\n        return '-1'\n    for i in range(n-1, 0, -1):\n        days[i] = days[i+1] + days[i]\n    for i in range(m):\n        s, d, c = exams[i]\n        if days[d] - days[s-1] < c:\n            return '-1'\n        for j in range(s, d):\n            if days[j+1] - days[j] >= c:\n                return '-1'\n    for i in range(m):\n        s, d, c = exams[i]\n        schedule[s] = m+1\n        for j in range(s, d):\n            if schedule[j+1] == 0:\n                schedule[j+1] = m+1\n        schedule[d] = i+1\n    return''.join(map(str, schedule))"
    },
    {
        "number": 4014,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    exams = []\n    for i in range(m):\n        s, d, c = map(int, stdin.readline().split())\n        exams.append((s, d, c))\n\n    if n < m:\n        return \"-1\"\n\n    schedule = [0] * n\n    for i in range(m):\n        start, end, duration = exams[i]\n        if start - 1 + duration > end:\n            return \"-1\"\n        for j in range(start - 1, end - duration, -1):\n            if schedule[j] > 0:\n                return \"-1\"\n            schedule[j] = i + 1\n\n    for i in range(n):\n        if schedule[i] == 0:\n            if i == 0 or schedule[i-1] == 0:\n                return \"-1\"\n            else:\n                schedule[i] = schedule[i-1]\n\n    return \" \".join(map(str, schedule))"
    },
    {
        "number": 4014,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    exams = []\n    for i in range(m):\n        s, d, c = list(map(int, stdin.strip().split()))\n        exams.append((s, d, c))\n\n    # Make a list of days for which there are exams\n    exam_days = set()\n    for s, d, _ in exams:\n        exam_days.update(range(s, d))\n\n    # Make a list of days for which there are no exams\n    rest_days = list(range(n + 1))\n    rest_days.remove(0)\n    for d in exam_days:\n        rest_days.remove(d)\n\n    # Check if there are any exams at all\n    if not exam_days:\n        return -1\n\n    # Check if there are any days for which there are no exams\n    if not rest_days:\n        return -1\n\n    # Initialize schedule\n    schedule = [-1] * n\n    for i in range(m):\n        s, d, c = exams[i]\n        for j in range(s, d):\n            if schedule[j-1] == -1:\n                schedule[j-1] = i\n        schedule[d-1] = -1\n\n    # Make sure that all exams are passed and no exam is skipped\n    for i in range(m):\n        s, d, c = exams[i]\n        if d - s + 1 - c > 0:\n            return -1\n\n    # Make sure that no exam is passed or prepared in consecutive days\n    for i in range(1, n):\n        if schedule[i-1] == schedule[i] and schedule[i]!= -1:\n            return -1\n\n    # Make sure that each exam is prepared for in exactly c days\n    for i in range(m):\n        s, d, c = exams[i]\n        for j in range(s, d):\n            if schedule[j-1]!= i:\n                schedule[j-1] = -1\n            if j - s + 1 == c:\n                break\n        else:\n            return -1\n\n    # Check if all exams are passed and no exam is skipped\n    passed_exams = set()\n    for i in range(n):\n        if schedule[i]!= -1:\n            passed_exams.add(schedule[i])\n    if len(passed_exams)!= m:\n        return -1\n\n    # Add rest days\n    for d in rest_days:\n        schedule[d-1] = 0\n\n    # Return schedule\n    return''.join(map(str, schedule))\n"
    },
    {
        "number": 4014,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    special_days = [list(map(int, stdin.strip().split())) for i in range(m)]\n    exams = sorted([(s, d) for s, d, c in special_days], key=lambda x: x[1])\n    days = [0] * (n+1)\n    for s, d in exams:\n        days[s] += 1\n        days[d] -= 1\n    if sum(days)!= m:\n        return '-1'\n    ans = [0] * (n+1)\n    ans[1] = m + 1\n    for i in range(2, n+1):\n        if ans[i-1] == m+1:\n            ans[i] = ans[i-1]\n        elif ans[i-1] == 0:\n            ans[i] = 0\n        else:\n            j = i - 1\n            while j > 0 and days[j] > 0:\n                j -= 1\n            if j == 0:\n                return '-1'\n            ans[i] = j\n    return''.join(map(str, ans))\n    \n"
    },
    {
        "number": 4014,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    exams = []\n    for _ in range(m):\n        s, d, c = map(int, stdin.split())\n        exams.append((s, d, c))\n    if exams[-1][1] > n:\n        return -1\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(n):\n        for s, d, c in exams:\n            if s > i:\n                break\n            dp[d] = max(dp[d], dp[i] + 1)\n    if dp[-1] < m:\n        return -1\n    ans = []\n    for i in range(n):\n        if dp[i] > 0:\n            ans.append(dp[i])\n            if i in [exam[1] for exam in exams]:\n                ans[-1] = m + 1\n        else:\n            ans.append(0)\n    return''.join(map(str, ans))"
    },
    {
        "number": 4014,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    exam_days = []\n    for _ in range(m):\n        s_i, d_i, c_i = map(int, stdin.strip().split())\n        exam_days.append((s_i, d_i, c_i))\n\n    exam_days.sort(key=lambda x: x[1])\n    days = [0] * (n+1)\n    for i in range(m):\n        s_i, d_i, c_i = exam_days[i]\n        for j in range(s_i, d_i):\n            days[j] += 1\n            if days[j] > 1:\n                return '-1'\n        days[s_i] = i+1\n        for j in range(s_i+1, s_i+c_i+1):\n            days[j] = -1\n    if any(x == 0 for x in days[1:n+1]):\n        return '-1'\n    result = []\n    for i in range(n):\n        if days[i+1] == 0:\n            result.append(0)\n        elif days[i+1] > 0:\n            result.append(days[i+1])\n        else:\n            result.append(exam_days[days[i+1]-1][0])\n    return''.join(map(str, result))\n"
    },
    {
        "number": 4014,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    exams = []\n    for i in range(m):\n        s, d, c = list(map(int, stdin.split()))\n        exams.append([s, d, c])\n    exams.sort()\n    schedule = [0] * n\n    count = 0\n    for i in range(m):\n        s, d, c = exams[i]\n        # check if can't prepare for exam\n        if d - s < c:\n            return \"-1\"\n        # check if can't pass exam\n        if s - schedule[d-1] < c:\n            return \"-1\"\n        # check if can't prepare for multiple exams in a day\n        for j in range(s-1, d):\n            if schedule[j]!= 0:\n                return \"-1\"\n        # update schedule\n        for j in range(s, d):\n            if schedule[j] == 0:\n                schedule[j] = i+1\n                count += 1\n    return \" \".join(map(str, schedule)) if count == n else \"-1\""
    },
    {
        "number": 4014,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.strip().split())\n    exams = []\n    for i in range(m):\n        s, d, c = map(int, stdin.strip().split())\n        exams.append((s, d, c))\n\n    # Sort exams by day of exam\n    exams.sort(key=lambda x: x[1])\n\n    # Initialize variables\n    days = [0]*n\n    for i in range(m):\n        s, d, c = exams[i]\n        # Check if it is possible to prepare and pass the exam\n        if s-1 >= days[d-1]:\n            return '-1'\n        # Update days array\n        for j in range(s-1, d-1):\n            days[j] += c\n\n    # Construct output\n    output = [0]*n\n    for i in range(n):\n        if exams and exams[0][1] == i+1:\n            output[i] = exams[0][2]+1\n            exams.pop(0)\n        else:\n            output[i] = days[i]\n            if output[i] > 0:\n                output[i] = 1\n\n    return''.join(map(str, output))"
    },
    {
        "number": 4015,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"0\"\n    steps = 0\n    while n < m:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            if n % 3 == 0:\n                n //= 3\n            else:\n                return \"-1\"\n        steps += 1\n    return str(steps)\n"
    },
    {
        "number": 4015,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    if n == m:\n        return \"0\"\n    elif n % 2 == 0 and m % 2 == 0 and n / 2 == m:\n        return str(int(log2(m/2)))\n    elif n % 2 == 0 and m % 3 == 0 and n / 2 == m // 3:\n        return str(int(log2(m//3)) + int(log2((m//3)//2)))\n    else:\n        return \"-1\""
    },
    {
        "number": 4015,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    if n == m:\n        return 0\n    \n    if n == 1:\n        return m-1\n    \n    if n%2 == 0 and m%2 == 0:\n        return solution(str(n//2) +'' + str(m//2)) + 1\n    \n    if n%3 == 0 and m%3 == 0:\n        return solution(str(n//3) +'' + str(m//3)) + 1\n    \n    return -1"
    },
    {
        "number": 4015,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return 0\n    elif n > m:\n        n, m = m, n\n    if m % 2 == 0:\n        return int(math.log2(m//n))\n    else:\n        return -1"
    },
    {
        "number": 4015,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    if m < n or (n % 2 == 0 and m % 2!= 0) or (n % 3 == 0 and m % 3!= 0):\n        return '-1'\n    \n    count = 0\n    while n!= m:\n        if n % 2 == 0 and n % 3 == 0:\n            return '-1'\n        elif n % 2 == 0:\n            n //= 2\n        elif n % 3 == 0:\n            n //= 3\n        else:\n            n -= 1\n            if n < m:\n                return '-1'\n        count += 1\n    \n    return str(count)"
    },
    {
        "number": 4015,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    steps = 0\n    while n!= m:\n        if n % 2 == 0:\n            n //= 2\n        elif n % 3 == 0:\n            n //= 3\n        else:\n            return '-1'\n        steps += 1\n    return str(steps)"
    },
    {
        "number": 4015,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    if n == m:\n        return '0'\n    \n    def count(n):\n        count = 0\n        while n!= 1:\n            if n % 2 == 0:\n                n /= 2\n            else:\n                n = 3 * n + 1\n            count += 1\n        return count\n    \n    if count(n)!= count(m):\n        return '-1'\n    else:\n        return str(count(n))\n    \nprint(solution(input()))"
    },
    {
        "number": 4015,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"0\"\n    if n * 2 == m or n * 3 == m:\n        return \"1\"\n    i = 1\n    while True:\n        if n * (2 ** i) == m:\n            return str(i)\n        elif n * (3 ** i) == m:\n            return str(i)\n        else:\n            i += 1\n    return \"-1\""
    },
    {
        "number": 4015,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    # If n and m are equal, then no moves are needed\n    if n == m:\n        return 0\n    \n    # If m is a power of 2 or 3, then the answer is the number of times we need to perform the move until m is reached\n    for i in range(2, 4):\n        while m % i == 0:\n            n *= i\n            m //= i\n        if m == 1:\n            return n - n // i # Number of moves needed\n    \n    # If m is not a power of 2 or 3, then there is no solution\n    return -1"
    },
    {
        "number": 4015,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    steps = 0\n    while n!= m:\n        if n % 2 == 0:\n            n //= 2\n        elif n % 3 == 0:\n            n //= 3\n        else:\n            return -1\n        steps += 1\n    return str(steps)"
    },
    {
        "number": 4016,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip().split()[1]\n\n    # If k == 1, the answer is t itself\n    if k == 1:\n        return t\n\n    # If k == n, we can repeat the string t k/n times\n    if k == n:\n        return t * (k//n)\n\n    # If k < n, we can repeat the string t k/n times and then add t[:n-k] to the end\n    if k < n:\n        return t * (k//n) + t[:n-k]\n"
    },
    {
        "number": 4016,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.split()[1]\n    s = t * (k // len(t) + 1)\n    s = s[:k]\n    return s"
    },
    {
        "number": 4016,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    t = stdin.split()[2]\n\n    if k == 1:\n        return t * n\n\n    ans = \"\"\n    for i in range(n):\n        ans += t * (n // k)\n        if n % k > 0:\n            ans += t * (n % k)\n            k -= 1\n    return ans\n\nstdin = \"3 4 aba\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4016,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.readline().strip()\n    \n    if k == 1:\n        return t\n    \n    # We can create the string s of minimum length using the following approach:\n    # We can start with a string of length 1, then repeat this process for each position in the string, adding a character\n    # from t if it is not already present in the current substring.\n    # We repeat this process for each position until we have k substrings of length n.\n    # Note that the length of s can be at most n * k.\n    \n    # Initialize s with the first character of t\n    s = t[0]\n    # Initialize the set of all substrings of s that are equal to t\n    substrings = set([s])\n    \n    for i in range(1, n):\n        # For each position i, generate all substrings of length n starting from i\n        new_substrings = set()\n        for j in range(i, len(t), n):\n            new_substring = t[j:j+n]\n            if new_substring not in substrings and new_substring not in new_substrings:\n                new_substrings.add(new_substring)\n                s += new_substring[-1]\n        substrings |= new_substrings\n    \n    return s"
    },
    {
        "number": 4016,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.split()[1]\n\n    if k == 1:\n        return t * n\n\n    ans = []\n    for i in range(n):\n        ans += t\n        if len(ans) >= k * n:\n            break\n\n    return ''.join(ans[:k * n])"
    },
    {
        "number": 4016,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip().split()[1]\n    \n    # initialize variables\n    s = t*k\n    m = len(s)\n    ans = ''\n    \n    # iterate over all possible substrings of s\n    for i in range(m-n+1):\n        # check if substring s[i:i+n] equals t\n        if s[i:i+n] == t:\n            # if so, add it to the answer and remove it from s\n            ans += t\n            s = s[:i]+s[i+n:]\n    \n    return ans"
    },
    {
        "number": 4016,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip().split()[1]\n    \n    # we can use a sliding window approach to construct the solution\n    # since we need to find the k distinct substrings of s, we can use a sliding window\n    # of size n and slide it along the string t\n    # if we find a substring that matches t, we can add it to our solution set\n    # once we have k distinct substrings in our solution set, we can return the result\n    \n    # initialize our solution set\n    solution_set = set()\n    \n    # initialize the sliding window\n    l, r = 0, n - 1\n    \n    # loop over all possible starting positions of the sliding window\n    while r < len(t) - 1:\n        # add the current substring to our solution set\n        solution_set.add(t[l:r+1])\n        \n        # slide the window one position to the right\n        l += 1\n        r += 1\n        \n        # if we have k distinct substrings, we can return the result\n        if len(solution_set) == k:\n            return ''.join(sorted(solution_set))\n    \n    # if we have reached here, it means we couldn't find k distinct substrings\n    # we can add the last substring to our solution set and return it\n    solution_set.add(t[l:])\n    return ''.join(sorted(solution_set))"
    },
    {
        "number": 4016,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.readline().strip()\n\n    s = \"\"\n    for i in range(k):\n        s += t\n    return s"
    },
    {
        "number": 4016,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip().split()[1]\n\n    s = \"\"\n    for i in range(k):\n        s += t\n    return s\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip()\n    s = t * (k // len(t)) + t[:(k % len(t))]\n    return s"
    },
    {
        "number": 4017,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    nice_indices = []\n    for i in range(n):\n        s = sum(a[:i] + a[i+1:])\n        if s == a[i]:\n            nice_indices.append(i)\n    if len(nice_indices) == 0:\n        return \"0\\n\"\n    return f\"{len(nice_indices)}\\n\" + \" \".join(map(str, nice_indices)) + \"\\n\""
    },
    {
        "number": 4017,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    k = 0\n    nice_indices = []\n    for i in range(n):\n        if sum(a) - a[i]!= a[i]:\n            continue\n        if a.count(a[i]) == 1:\n            continue\n        a[i] = 0\n        if sum(a) == 0:\n            k += 1\n            nice_indices.append(i)\n        a[i] = a[n - 1]\n    if k == 0:\n        return '0'\n    return str(k) + '\\n' +''.join(map(str, nice_indices))\n"
    },
    {
        "number": 4017,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # Calculate the prefix sum\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + a[i - 1]\n\n    # Check if the array is good\n    for j in range(1, n + 1):\n        if prefix_sum[n] - prefix_sum[j] == prefix_sum[j - 1]:\n            return f\"2\\n{j}\\n{j-1}\"\n\n    # If there is no such index, return 0\n    return f\"0\""
    },
    {
        "number": 4017,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    s = sum(a)\n    nice_indices = []\n    for i in range(n):\n        if s - a[i] == 0:\n            continue\n        if s - a[i] in a:\n            a.remove(s - a[i])\n            if is_good(a):\n                nice_indices.append(i + 1)\n            a.append(s - a[i])\n    if len(nice_indices) == 0:\n        return \"0\\n\"\n    else:\n        return f\"{len(nice_indices)}\\n{nice_indices[0]} \" + \" \".join(map(str, nice_indices[1:])) + \"\\n\"\n\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds all indices of the array a such that after removing the j-th element from the array it will be good.\n    \"\"\"\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # Check if the array is good\n    def is_good(a):\n        return any(a[i] == sum(a[:i] + a[i+1:]) for i in range(n))\n\n    # Find all nice indices\n    nice_indices = []\n    for j in range(n):\n        a_copy = a.copy()\n        a_copy.pop(j)\n        if is_good(a_copy):\n            nice_indices.append(j+1)\n\n    # Print result\n    if not nice_indices:\n        print(0)\n    else:\n        print(len(nice_indices))\n        print(*nice_indices)\n"
    },
    {
        "number": 4017,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    sum_a = sum(a)\n    nice_indices = []\n    for j in range(n):\n        a_without_j = a[:j] + a[j+1:]\n        if sum(a_without_j) == sum_a - a[j]:\n            nice_indices.append(j+1)\n    k = len(nice_indices)\n    return str(k) + '\\n' + '\\n'.join(map(str, nice_indices)) if k > 0 else '0\\n'\n\nstdin = \"5\\n2 5 1 2 2\\n\"\nprint(solution(stdin)) # Output: 3\\n4 1 5\\n\\nInput: \"4\\n8 3 5 2\\n\"\nprint(solution(stdin)) # Output: 2\\n1 4\\n\\nInput: \"5\\n2 1 2 4 3\\n\"\nprint(solution(stdin)) # Output: 0\\n\\nTime Complexity: O(n^2)"
    },
    {
        "number": 4017,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    s = sum(a)\n    indices = set()\n    for i, x in enumerate(a):\n        if x == s - x:\n            indices.add(i)\n    if not indices:\n        return \"0\\n\"\n    return f\"{len(indices)}\\n\" + \"\\n\".join(map(str, indices)) + \"\\n\""
    },
    {
        "number": 4017,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    good_indices = []\n    for i in range(n):\n        current_sum = sum(a[:i] + a[i+1:])\n        if current_sum == a[i]:\n            good_indices.append(i)\n    if len(good_indices) == 0:\n        return '0'\n    else:\n        return str(len(good_indices)) + '\\n' +''.join(map(str, good_indices))"
    },
    {
        "number": 4017,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    cnt = 0\n    nice_idx = []\n    for j in range(n):\n        s = sum(a) - a[j]\n        if s in a:\n            nice_idx.append(j)\n            cnt += 1\n            a.remove(s)\n        else:\n            a.remove(a[j])\n    print(cnt)\n    print(' '.join(map(str, nice_idx))) if cnt else None\n    return ''"
    },
    {
        "number": 4017,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    nice = set()\n    total_sum = sum(a)\n\n    for j in range(n):\n        total_sum -= a[j]\n        if total_sum == j + 1:\n            nice.add(j)\n        total_sum += a[j]\n\n    return str(len(nice)) + '\\n' +''.join(map(str, sorted(nice))) if nice else '0'"
    },
    {
        "number": 4018,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = stdin.split()[2]\n    \n    # Initialize variables\n    cost = 0\n    substrings = set()\n    \n    # Check all substrings of s\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if substring not in substrings:\n                cost += n - len(substring)\n                substrings.add(substring)\n                if len(substrings) == k:\n                    return cost\n    \n    # If we cannot form the set of size k, return -1\n    return -1"
    },
    {
        "number": 4018,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = map(int, stdin.readline().strip().split())\n    s = stdin.readline().strip()\n\n    # check if k is greater than or equal to the total number of distinct subsequences of the string\n    distinct_subsequences = set()\n    for i in range(n):\n        for j in range(i, n):\n            distinct_subsequences.add(s[i:j+1])\n    if k >= len(distinct_subsequences):\n        return -1\n\n    # dynamic programming table\n    dp = [[0] * (n+1) for _ in range(k+1)]\n    for i in range(1, k+1):\n        for j in range(n+1):\n            if i == 1:\n                dp[i][j] = j\n            else:\n                dp[i][j] = float('inf')\n                for l in range(j):\n                    if s[l:j+1] not in distinct_subsequences:\n                        continue\n                    dp[i][j] = min(dp[i][j], dp[i-1][l] + j - l)\n                    if dp[i][j] == j - l:\n                        break\n\n    return dp[k][n] if dp[k][n]!= float('inf') else -1\n\nstdin = '''\n4 5\nasdf\n'''\n\nprint(solution(stdin)) # output: 4"
    },
    {
        "number": 4018,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    S = set()\n    cost = 0\n    for i in range(n):\n        for j in range(i, n):\n            t = s[i:j+1]\n            if len(t) > k:\n                break\n            if len(t) == k:\n                if t in S:\n                    return -1\n                S.add(t)\n                cost += (n - len(t))\n                break\n    return cost"
    },
    {
        "number": 4018,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    \n    if k > 26**n:\n        return -1\n    \n    # Build dp table\n    dp = [[0] * (26**n) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    \n    for i in range(1, n+1):\n        for j in range(1, 26**n):\n            for t in range(1, n+1):\n                if j & (1 << (t-1)):\n                    continue\n                dp[i][j] += dp[t-1][j]\n                dp[i][j] %= 1000000007\n    \n    # Backtracking\n    result = 0\n    S = set()\n    for i in range(1, n+1):\n        for j in range(1, 26**n):\n            if dp[i-1][j] == k:\n                S.add(s[:i])\n                result += (n-i)\n                result %= 1000000007\n    \n    if len(S) < k:\n        return -1\n    \n    return result"
    },
    {
        "number": 4018,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.rstrip()\n    \n    # check if it's possible to obtain the set S of size k\n    if k > 10 ** 12 or k > n * (n - 1) // 2:\n        return -1\n    \n    # create a set to keep track of the subsequences already added\n    subseqs = set()\n    costs = [0] * k\n    \n    # initialize the first element of S with an empty string and cost 0\n    subseqs.add(\"\")\n    costs[0] = 0\n    \n    # loop through all substrings of s and add them to S if they are not already in S\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if substring not in subseqs:\n                # check if adding the substring would exceed the size limit\n                if len(subseqs) == k:\n                    return -1\n                subseqs.add(substring)\n                # calculate the cost of adding the substring to S\n                cost = n - len(substring)\n                # find the index of the smallest cost element in S that is not equal to -1\n                index = min(range(k), key=lambda i: costs[i] if costs[i]!= -1 else float('inf'))\n                # add the substring to S and update the cost of the corresponding element\n                costs[index] = cost\n    \n    # calculate the total cost of S\n    total_cost = sum(costs)\n    return total_cost\n"
    },
    {
        "number": 4018,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    if k >= n:\n        return -1\n    min_cost = float('inf')\n    for i in range(1, 2**n):\n        sub = ''\n        for j in range(n):\n            if i & (1 << j):\n                sub += s[j]\n        if len(sub)!= 0:\n            min_cost = min(min_cost, len(sub) * (n - len(sub)))\n    return min_cost if min_cost!= float('inf') else -1"
    },
    {
        "number": 4018,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = stdin.split()[2]\n\n    # dp[i][j] will be the minimum cost to obtain a set of size j\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n\n    # Initialize dp array\n    for i in range(1, n+1):\n        dp[i][1] = i\n    \n    # Fill the dp array\n    for i in range(1, n+1):\n        for j in range(2, k+1):\n            dp[i][j] = float('inf')\n            for x in range(1, i+1):\n                if s[x-1] == s[i-1] and dp[x-1][j-1]!= float('inf'):\n                    dp[i][j] = min(dp[i][j], dp[x-1][j-1] + i - x)\n            dp[i][j] = dp[i][j] if dp[i][j]!= float('inf') else -1\n    \n    # Check if it is possible to obtain the set of size k\n    if dp[n][k] == -1:\n        return -1\n    \n    # Return the minimum cost\n    return dp[n][k]"
    },
    {
        "number": 4018,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n\n    # All possible subsequences of s\n    subseqs = set()\n    for i in range(n):\n        for j in range(i, n):\n            subseqs.add(s[i:j+1])\n\n    # Try to add k elements to subseqs to obtain S\n    S = set()\n    for t in subseqs:\n        if len(S) == k:\n            break\n        if not any(t in S_ for S_ in S):\n            S.add(t)\n\n    if len(S) == k:\n        return sum(n-len(t) for t in S)\n    else:\n        return -1"
    },
    {
        "number": 4018,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n\n    # Check if k is less than or equal to n\n    if k > n:\n        return -1\n\n    # Initialize the set S\n    S = set()\n\n    # Calculate the cost of the empty string\n    cost = n\n\n    # Loop until the size of S is k\n    while len(S) < k:\n        # Loop through all possible subsequences of s\n        for i in range(1, n+1):\n            for j in range(i):\n                # Check if the subsequence is a subsequence of s\n                if s[j:i] in s:\n                    # Calculate the cost of the subsequence\n                    c = n - (i - j)\n                    # Add the subsequence to the set S\n                    S.add(s[j:i])\n                    # Update the cost if necessary\n                    cost = min(cost, c)\n                    # If the size of S is k, return the cost\n                    if len(S) == k:\n                        return cost\n    # If the size of S is not k, return -1\n    return -1"
    },
    {
        "number": 4018,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n\n    # Initialize variables\n    subseq = \"\"\n    total_cost = 0\n    max_cost = 10**12\n\n    # Generate all subsequences\n    for i in range(n):\n        # Iterate through all possible subsequences of length i+1\n        for j in range(i+1):\n            subseq = s[j:i+1]\n            # Check if subseq is already in S\n            if subseq in subseqs:\n                continue\n            # Add subseq to S and update total cost\n            subseqs.add(subseq)\n            total_cost += n - len(subseq)\n            # Check if S has size k\n            if len(subseqs) == k:\n                return total_cost\n            # Check if total cost exceeds max_cost\n            if total_cost > max_cost:\n                return -1\n\n    # If k is greater than the number of possible subsequences\n    return -1"
    },
    {
        "number": 4019,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.readline().split())\n    graph = {i: [] for i in range(1, n+1)}\n    for i in range(m):\n        v, u = map(int, stdin.readline().split())\n        graph[v].append(u)\n        graph[u].append(v)\n\n    def dfs(node, parent):\n        visited.add(node)\n        for child in graph[node]:\n            if child == parent:\n                continue\n            if child not in visited:\n                dfs(child, node)\n                edges.append((parent, child))\n\n    visited = set()\n    edges = []\n    for i in range(1, n+1):\n        if i not in visited:\n            dfs(i, None)\n            if len(set(edges)) == m:\n                break\n            edges = []\n    else:\n        return \"NO\"\n\n    for edge in edges:\n        if graph[1].count(edge[0]) + graph[1].count(edge[1]) == D:\n            return \"YES\\n\" + \" \".join(map(str, edge)) + \"\\n\"\n        elif graph[1].count(edge[1]) + graph[1].count(edge[0]) == D:\n            return \"YES\\n\" + \" \".join(map(str, (edge[1], edge[0]))) + \"\\n\"\n    return \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        graph[v].append(u)\n        graph[u].append(v)\n    visited = [False]*(n+1)\n    def dfs(v, parent):\n        visited[v] = True\n        for u in graph[v]:\n            if not visited[u]:\n                if u == parent:\n                    continue\n                dfs(u, v)\n                stdin += f\"{v} {u}\\n\"\n    degree = 0\n    for i in range(2, n+1):\n        if len(graph[i]) == D-1:\n            degree += 1\n            if degree > 1:\n                return \"NO\"\n            dfs(i, 0)\n    return \"YES\\n\" + stdin"
    },
    {
        "number": 4019,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    g = [[] for _ in range(n+1)]\n    for v, u in edges:\n        g[v].append(u)\n        g[u].append(v)\n    for v in range(2, n+1):\n        if len(g[v])!= D-1:\n            return \"NO\"\n    ans = []\n    used = [False] * (n+1)\n    stack = [1]\n    while stack:\n        cur = stack[-1]\n        for nxt in g[cur]:\n            if not used[nxt]:\n                used[nxt] = True\n                stack.append(nxt)\n                ans.append((cur, nxt))\n                break\n        else:\n            stack.pop()\n    print(\"YES\")\n    print(len(ans))\n    for u, v in ans:\n        print(u, v)"
    },
    {
        "number": 4019,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes input from the user, reads it as a string and splits it into individual lines,\n    converts each line into a list of integers, and then processes the input to find the solution.\n    :param stdin: input as a string\n    :return: output as a string\n    \"\"\"\n    # Read input as a string\n    lines = stdin.strip().split('\\n')\n    # Read first line of input\n    n, m, D = list(map(int, lines[0].split()))\n    # Create adjacency list\n    adj_list = [[] for _ in range(n+1)]\n    # Read remaining lines of input and add to adjacency list\n    for line in lines[1:]:\n        v, u = list(map(int, line.split()))\n        adj_list[v].append(u)\n        adj_list[u].append(v)\n    # Use DFS to find spanning tree with degree equal to D\n    visited = [False] * (n+1)\n    parent = [0] * (n+1)\n    subtree_root = -1\n    for i in range(1, n+1):\n        if visited[i]:\n            continue\n        subtree_root = i\n        visited[i] = True\n        stack = [(i, parent[i])]\n        while stack:\n            v, parent_v = stack.pop()\n            for u in adj_list[v]:\n                if u == parent_v:\n                    continue\n                if visited[u]:\n                    continue\n                visited[u] = True\n                parent[u] = v\n                if parent[v] == u:\n                    continue\n                stack.append((u, parent[u]))\n        if visited.count(True) == n:\n            break\n    # If no spanning tree exists, print \"NO\" and return\n    if visited.count(True)!= n:\n        return \"NO\\n\"\n    # Otherwise, use DFS to print spanning tree with degree equal to D\n    visited = [False] * (n+1)\n    parent = [0] * (n+1)\n    subtree_root = -1\n    output = []\n    for i in range(1, n+1):\n        if visited[i]:\n            continue\n        subtree_root = i\n        visited[i] = True\n        stack = [(i, parent[i])]\n        while stack:\n            v, parent_v = stack.pop()\n            for u in adj_list[v]:\n                if u == parent_v:\n                    continue\n                if visited[u]:\n                    continue\n                visited[u] = True\n                parent[u] = v\n                if parent[v] == u:\n                    continue\n                stack.append((u, parent[u]))\n                # If u is the subtree root, print all its edges\n                if u == subtree_root:\n                    for v in range(1, n+1):\n                        if v == u or v == parent[u]:\n                            continue\n                        output.append(f\"{u} {v}\\n\")\n    # Output spanning tree and return\n    return \"YES\\n\" + ''.join(output)"
    },
    {
        "number": 4019,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        v, u = map(int, stdin.split())\n        edges.append((v, u))\n    edges = set(edges)\n    degree = [0] * (n + 1)\n    for v, u in edges:\n        degree[v] += 1\n        degree[u] += 1\n    for i in range(1, n + 1):\n        if degree[i] == D - 1:\n            break\n    else:\n        return \"NO\"\n    tree = set()\n    for v, u in edges:\n        if u!= i and (v, u) not in tree:\n            tree.add((v, u))\n        elif u!= i and (u, v) not in tree:\n            tree.add((u, v))\n        elif v!= i and (v, u) not in tree:\n            tree.add((v, u))\n        elif v!= i and (u, v) not in tree:\n            tree.add((u, v))\n    for v, u in tree:\n        print(f\"{v} {u}\")\n    return \"YES\""
    },
    {
        "number": 4019,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        adj[v].append(u)\n        adj[u].append(v)\n    \n    visited = [False]*(n+1)\n    parent = [-1]*(n+1)\n    stack = []\n    \n    for i in range(1, n+1):\n        if visited[i] == False:\n            visited[i] = True\n            parent[i] = i\n            stack.append(i)\n            \n            while stack:\n                v = stack[-1]\n                for u in adj[v]:\n                    if visited[u] == False:\n                        if u == i:\n                            if len(stack) == D:\n                                spanning_tree = []\n                                for j in range(1, len(stack)):\n                                    spanning_tree.append((stack[j], stack[j+1]))\n                                    if j+1 == len(stack):\n                                        spanning_tree.append((stack[j+1], stack[1]))\n                                return \"YES\\n\" + '\\n'.join(str(e[0]) + \" \" + str(e[1]) for e in spanning_tree)\n                            else:\n                                stack.append(u)\n                                parent[u] = v\n                                visited[u] = True\n                        elif u!= parent[v]:\n                            stack.append(u)\n                            parent[u] = v\n                            visited[u] = True\n    \n    return \"NO\"\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.strip().split())\n    edges = set()\n    for _ in range(m):\n        v, u = map(int, stdin.strip().split())\n        edges.add((v, u))\n        edges.add((u, v))\n    # check if degree of 1 is D\n    if D == 1:\n        if m == n - 1:\n            return \"YES\\n\" + \"\\n\".join(map(lambda e: \" \".join(map(str, e)), [(1, i) for i in range(2, n)]))\n        else:\n            return \"NO\"\n    # check if degree of 1 is less than D\n    if D < 1 or D >= n:\n        return \"NO\"\n    # check if there are no spanning trees with degree D\n    for i in range(2, n):\n        if D == 1:\n            break\n        G = [[] for _ in range(n)]\n        for u, v in edges:\n            G[u-1].append(v-1)\n            G[v-1].append(u-1)\n        visited = [False] * n\n        visited[0] = True\n        stack = [0]\n        while stack:\n            u = stack.pop()\n            for v in G[u]:\n                if not visited[v]:\n                    stack.append(v)\n                    visited[v] = True\n                    D -= 1\n                    if D == 1:\n                        return \"YES\\n\" + \"\\n\".join(map(lambda e: \" \".join(map(str, e)), [(1, i) for i in range(2, n)]))\n                    elif D < 1:\n                        break\n            else:\n                continue\n            break\n    return \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.strip().split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        v, u = map(int, stdin.strip().split())\n        graph[v].append(u)\n        graph[u].append(v)\n\n    def dfs(u, parent, subtree_degrees, spanning_tree):\n        subtree_degrees[u] = 1\n        for v in graph[u]:\n            if v!= parent:\n                spanning_tree.append((u, v))\n                dfs(v, u, subtree_degrees, spanning_tree)\n\n    def find_spanning_tree():\n        for u in range(2, n+1):\n            subtree_degrees = [0]*(n+1)\n            spanning_tree = []\n            dfs(u, -1, subtree_degrees, spanning_tree)\n            subtree_degrees.sort()\n            if subtree_degrees[0] == D:\n                return spanning_tree\n        return None\n\n    spanning_tree = find_spanning_tree()\n    if spanning_tree is None:\n        return \"NO\"\n    else:\n        print(\"YES\")\n        for u, v in spanning_tree:\n            print(f\"{u} {v}\")\n        return \"\"\n\nprint(solution(\"\"\"\n4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4\n\"\"\"))\n\nprint(solution(\"\"\"\n4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n\"\"\"))\n\nprint(solution(\"\"\"\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\"\"\"))"
    },
    {
        "number": 4019,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.readline().split())\n    edges = []\n    for i in range(m):\n        v, u = map(int, stdin.readline().split())\n        edges.append((v, u))\n        edges.append((u, v))\n    visited = [False] * n\n    parent = [-1] * n\n    for i in range(n):\n        for u, v in edges:\n            if not visited[u] and not visited[v] and v == parent[u]:\n                parent[v] = u\n    degree = [0] * n\n    for i in range(n):\n        for u, v in edges:\n            if i == parent[u] or i == parent[v]:\n                degree[i] += 1\n    for i in range(n):\n        if degree[i] == D - 1 and not visited[i]:\n            return \"YES\"\n    return \"NO\"\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        graph[v].append(u)\n        graph[u].append(v)\n    \n    for i in range(1, n+1):\n        if len(graph[i])!= D-1:\n            return \"NO\"\n    \n    visited = [False]*(n+1)\n    stack = [1]\n    ans = []\n    while stack:\n        node = stack.pop()\n        if not visited[node]:\n            visited[node] = True\n            for neighbor in graph[node]:\n                if not visited[neighbor]:\n                    stack.append(neighbor)\n                    ans.append(str(node) + \" \" + str(neighbor))\n    return \"YES\\n\" + \"\\n\".join(ans)\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split()[0].split(':'))\n    h2, m2 = map(int, stdin.split()[1].split(':'))\n    \n    if h1 == h2:\n        m3 = (m1 + m2) // 2\n        h3 = h1\n    else:\n        if m1 < m2:\n            m3 = (m1 + m2) // 2\n            h3 = h1\n        else:\n            m3 = (m1 + m2) // 2\n            h3 = h2\n    \n    h3 = str(h3).zfill(2)\n    m3 = str(m3).zfill(2)\n    \n    return f\"{h3}:{m3}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.strip().split(':'))\n    h2, m2 = map(int, stdin.strip().split(':')[1:])\n\n    h_mid = (h1 + h2) // 2\n    m_mid = (m1 + m2) // 2\n\n    if m_mid == 60:\n        m_mid = 0\n        h_mid += 1\n\n    if h_mid > 23:\n        h_mid -= 24\n\n    return f\"{h_mid:02d}:{m_mid:02d}\""
    },
    {
        "number": 4020,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.strip().split())\n    if m1 % 2!= m2 % 2:\n        return \"IMPOSSIBLE\"\n    elif m1 == m2:\n        return f\"{h1:02d}:{m1:02d}\"\n    else:\n        h_mid = (h1 + h2) // 2\n        m_mid = (m1 + m2) // 2\n        return f\"{h_mid:02d}:{m_mid:02d}\""
    },
    {
        "number": 4020,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.strip().split())\n    if m1 % 2!= m2 % 2:\n        raise ValueError(\"Contest does not last even number of minutes\")\n    if h1 > h2 or (h1 == h2 and m1 > m2):\n        h1, m1, h2, m2 = h2, m2, h1, m1\n    if h2 - h1 == 0:\n        h3, m3 = h1, (m1 + m2) // 2\n    else:\n        h3, m3 = h1 + (h2 - h1) // 2, (m1 + m2) // 2\n    if m3 == 60:\n        h3 += 1\n        m3 = 0\n    return f\"{h3:02d}:{m3:02d}\""
    },
    {
        "number": 4020,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split()[0].split(':'))\n    h2, m2 = map(int, stdin.split()[1].split(':'))\n\n    if m1 % 2 == 1 or m2 % 2 == 1:\n        return f\"{h2:02d}:{m2:02d}\"\n\n    m3 = (m1 + m2) // 2\n    h3 = h1 + (m1 + m2) // 120\n    return f\"{h3:02d}:{m3:02d}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.strip().split())\n    h2, m2 = map(int, stdin.strip().split())\n    \n    # Calculate the total time of the contest in minutes\n    total_time = (h2 - h1) * 60 + (m2 - m1)\n    \n    # Calculate the time of the midpoint of the contest\n    midpoint_time = total_time // 2\n    \n    # Calculate the hours and minutes of the midpoint\n    h3 = h1 + midpoint_time // 60\n    m3 = m1 + midpoint_time % 60\n    \n    # Ensure that the values are in the correct range\n    h3 = h3 % 24\n    m3 = m3 % 60\n    \n    # Format the output as a string\n    return f\"{h3:02d}:{m3:02d}\""
    },
    {
        "number": 4020,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.strip().split(':'))\n    mid_min = (m1 + m2) // 2\n    mid_hour = h1 + (m1 + m2) // 60\n    if mid_min == 60:\n        mid_hour += 1\n        mid_min = 0\n    return f'{mid_hour:02d}:{mid_min:02d}'\n"
    },
    {
        "number": 4020,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.split())\n    total_minutes = (h2 - h1) * 60 + (m2 - m1)\n    half_minutes = total_minutes // 2\n    h3, m3 = divmod(half_minutes, 60)\n    return f\"{h3:02d}:{m3:02d}\"\n\nprint(solution(\"10:00 11:00\"))\nprint(solution(\"11:10 11:12\"))\nprint(solution(\"01:02 03:02\"))"
    },
    {
        "number": 4020,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.readline().strip().split(':'))\n    h2, m2 = map(int, stdin.readline().strip().split(':'))\n\n    if m1 % 2!= m2 % 2:\n        print('Error')\n        return\n\n    if h2 < h1:\n        h2 += 24\n\n    h3 = (h1 + h2) // 2\n    m3 = (m1 + m2) // 2\n\n    if m3 == 60:\n        m3 = 0\n        h3 += 1\n\n    if h3 == 24:\n        h3 = 0\n\n    return f'{h3:02d}:{m3:02d}'"
    },
    {
        "number": 4020,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.strip().split())\n    if m1 % 2 == m2 % 2:\n        if m1 == m2:\n            h3, m3 = h1, (m1 + m2) // 2\n        else:\n            h3, m3 = h1, m1 + (m2 - m1) // 2\n        return f\"{h3:02d}:{m3:02d}\"\n    else:\n        h3, m3 = h1, m1 + (m2 - m1) // 2\n        return f\"{h3:02d}:{m3:02d}\"\n\nstdin = \"10:00\\n11:00\"\nprint(solution(stdin)) # Output: 10:30\n\nstdin = \"11:10\\n11:12\"\nprint(solution(stdin)) # Output: 11:11\n\nstdin = \"01:02\\n03:02\"\nprint(solution(stdin)) # Output: 02:02"
    },
    {
        "number": 4021,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 1:\n        return 1\n    elif a == 2:\n        return 2\n    elif a == 3:\n        return 2\n    elif a <= 6:\n        return 3\n    elif a == 7:\n        return 3\n    elif a <= 12:\n        return 4\n    elif a == 13:\n        return 4\n    elif a <= 24:\n        return 5\n    elif a == 25:\n        return 5\n    elif a <= 48:\n        return 6\n    elif a == 49:\n        return 6\n    elif a <= 84:\n        return 7\n    elif a == 85:\n        return 7\n    elif a <= 120:\n        return 8\n    elif a == 121:\n        return 8\n    elif a <= 168:\n        return 9\n    elif a == 169:\n        return 9\n    elif a <= 220:\n        return 10\n    elif a == 221:\n        return 10\n    elif a <= 280:\n        return 11\n    elif a == 281:\n        return 11\n    elif a <= 350:\n        return 12\n    elif a == 351:\n        return 12\n    elif a <= 420:\n        return 13\n    elif a == 421:\n        return 13\n    elif a <= 490:\n        return 14\n    elif a == 491:\n        return 14\n    elif a <= 570:\n        return 15\n    elif a == 571:\n        return 15\n    elif a <= 660:\n        return 16\n    elif a == 661:\n        return 16\n    elif a <= 760:\n        return 17\n    elif a == 761:\n        return 17\n    elif a <= 870:\n        return 18\n    elif a == 871:\n        return 18\n    elif a <= 990:\n        return 19\n    elif a == 991:\n        return 19\n    elif a <= 1120:\n        return 20\n    elif a == 1121:\n        return 20\n    elif a <= 1260:\n        return 21\n    elif a == 1261:\n        return 21\n    elif a <= 1410:\n        return 22\n    elif a == 1411:\n        return 22\n    elif a <= 1570:\n        return 23\n    elif a == 1571:\n        return 23\n    elif a <= 1740:\n        return 24\n    elif a == 1741:\n        return 24\n    elif a <= 1920:\n        return 25\n    elif a == 1921:\n        return 25\n    elif a <= 2110:\n        return 26\n    elif a == 2111:\n        return 26\n    elif a <= 2310:\n        return 27\n    elif a == 2311:\n        return 27\n    elif a <= 2520:\n        return 28\n    elif a == 2521:\n        return 28\n    elif a <= 2740:\n        return 29\n    elif a == 2741:\n        return 29\n    elif a <= 2970:\n        return 30\n    elif a == 2971:\n        return 30\n    elif a <= 3210:\n        return 31\n    elif a == 3211:\n        return 31\n    elif a <= 3460:\n        return 32\n    elif a == 3461:\n        return 32\n    elif a <= 3720:\n        return 33\n    elif a == 3721:\n        return 33\n    elif a <= 3990:\n        return 34\n    elif a == 3991:\n        return 34\n    elif a <= 4270:\n        return 35\n    elif a == 4271:\n        return 35\n    elif a <= 4560:\n        return 36\n    elif a == 4561:\n        return 36\n    elif a <= 4860:\n        return 37\n    elif a == 4861"
    },
    {
        "number": 4021,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    count = 0\n    while a:\n        a &= (a - 1)\n        count += 1\n    return count\n\nprint(solution(input()))"
    },
    {
        "number": 4021,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return '1'\n    elif a == 2:\n        return '2'\n    elif a == 3:\n        return '2'\n    elif a == 4:\n        return '3'\n    elif a == 5:\n        return '3'\n    elif a == 6:\n        return '3'\n    elif a == 7:\n        return '3'\n    elif a == 8:\n        return '3'\n    elif a == 9:\n        return '3'\n    elif a == 10:\n        return '4'\n    elif a == 11:\n        return '4'\n    elif a == 12:\n        return '4'\n    elif a == 13:\n        return '4'\n    elif a == 14:\n        return '4'\n    elif a == 15:\n        return '4'\n    elif a == 16:\n        return '4'\n    elif a == 17:\n        return '4'\n    elif a == 18:\n        return '4'\n    elif a == 19:\n        return '4'\n    elif a == 20:\n        return '4'\n    elif a == 21:\n        return '5'\n    elif a == 22:\n        return '5'\n    elif a == 23:\n        return '5'\n    elif a == 24:\n        return '5'\n    elif a == 25:\n        return '5'\n    elif a == 26:\n        return '5'\n    elif a == 27:\n        return '5'\n    elif a == 28:\n        return '5'\n    elif a == 29:\n        return '5'\n    elif a == 30:\n        return '5'\n    elif a == 31:\n        return '5'\n    elif a == 32:\n        return '5'\n    elif a == 33:\n        return '5'\n    elif a == 34:\n        return '5'\n    elif a == 35:\n        return '5'\n    elif a == 36:\n        return '5'\n    elif a == 37:\n        return '5'\n    elif a == 38:\n        return '5'\n    elif a == 39:\n        return '5'\n    elif a == 40:\n        return '5'\n    elif a == 41:\n        return '6'\n    elif a == 42:\n        return '6'\n    elif a == 43:\n        return '6'\n    elif a == 44:\n        return '6'\n    elif a == 45:\n        return '6'\n    elif a == 46:\n        return '6'\n    elif a == 47:\n        return '6'\n    elif a == 48:\n        return '6'\n    elif a == 49:\n        return '6'\n    elif a == 50:\n        return '6'\n    elif a == 51:\n        return '6'\n    elif a == 52:\n        return '6'\n    elif a == 53:\n        return '6'\n    elif a == 54:\n        return '6'\n    elif a == 55:\n        return '6'\n    elif a == 56:\n        return '6'\n    elif a == 57:\n        return '6'\n    elif a == 58:\n        return '6'\n    elif a == 59:\n        return '6'\n    elif a == 60:\n        return '6'\n    elif a == 61:\n        return '6'\n    elif a == 62:\n        return '6'\n    elif a == 63:\n        return '6'\n    elif a == 64:\n        return '6'\n    else:\n        return 'Error'"
    },
    {
        "number": 4021,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return str(1)\n    elif a == 2:\n        return str(2)\n    elif a == 3:\n        return str(4)\n    elif a == 4:\n        return str(7)\n    else:\n        i = 1\n        count = 0\n        while i <= a:\n            count += i\n            i *= 2\n        return str(count)\n\nstdin = input(\"Enter a number: \")\nprint(solution(stdin))"
    },
    {
        "number": 4021,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return \"1\"\n    elif a == 2:\n        return \"2\"\n    else:\n        count = 0\n        while a > 0:\n            a = a - 2\n            count += 1\n        return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4021,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    ans = 0\n    for i in range(2, a+1):\n        if a % i == 0:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 4021,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return \"1\"\n    if a <= 1:\n        return \"0\"\n    if a % 2 == 0:\n        return str(a // 2)\n    else:\n        return str(a * 3 + 1)"
    },
    {
        "number": 4021,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    count = 0\n    while a > 1:\n        count += 1\n        a = a >> 1\n    return count"
    },
    {
        "number": 4021,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    return str(bin(a)[2:].count('1'))"
    },
    {
        "number": 4021,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 1:\n        return 1\n    elif a <= 6:\n        return 2\n    elif a <= 11:\n        return 3\n    elif a <= 16:\n        return 4\n    elif a <= 21:\n        return 5\n    elif a <= 26:\n        return 6\n    elif a <= 31:\n        return 7\n    elif a <= 36:\n        return 8\n    elif a <= 41:\n        return 9\n    elif a <= 46:\n        return 10\n    elif a <= 51:\n        return 11\n    elif a <= 56:\n        return 12\n    elif a <= 61:\n        return 13\n    elif a <= 66:\n        return 14\n    else:\n        return 15"
    },
    {
        "number": 4022,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l, r))\n    segments.sort()\n    dp = [0] * n\n    for i in range(1, n):\n        j = bisect_left(segments, segments[i])\n        if j > 0:\n            dp[i] = max(dp[i], segments[i][0] - segments[j-1][1])\n        if j < n:\n            dp[i] = max(dp[i], segments[i][1] - segments[j][0])\n    return max(dp)"
    },
    {
        "number": 4022,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n    \n    # sort segments by their left endpoint\n    segments = sorted(segments, key=lambda x: x[0])\n    \n    # find max intersection length for all segments\n    max_intersection = 0\n    for i in range(len(segments)):\n        l, r = segments[i]\n        # find max intersection length with segments to the left of i\n        left_max = 0\n        for j in range(i):\n            left_l, left_r = segments[j]\n            left_max = max(left_max, min(r, left_r) - max(l, left_l))\n        # find max intersection length with segments to the right of i\n        right_max = 0\n        for j in range(i + 1, len(segments)):\n            right_l, right_r = segments[j]\n            right_max = max(right_max, min(r, right_r) - max(l, right_l))\n        # update max intersection length\n        max_intersection = max(max_intersection, left_max + right_max)\n    \n    return str(max_intersection)\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline())\n    segments = [(int(stdin.readline().split()[0]), int(stdin.readline().split()[1])) for _ in range(n)]\n\n    # Calculate intersections and lengths\n    intersections = []\n    lengths = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            l, r = sorted([segments[i][0], segments[i][1], segments[j][0], segments[j][1]])\n            if l <= r:\n                intersections.append((l, r))\n                lengths.append(r - l + 1)\n\n    # Find maximal length\n    max_length = max(lengths)\n\n    # Remove segment with maximal length\n    max_length_indices = [i for i, length in enumerate(lengths) if length == max_length]\n    for i in max_length_indices:\n        segment = intersections[i]\n        segments = [s for s in segments if not ((s[0] == segment[0] and s[1] == segment[1]) or (s[0] == segment[1] and s[1] == segment[0]))]\n        intersections, lengths = [], []\n        for i in range(len(segments)):\n            for j in range(i + 1, len(segments)):\n                l, r = sorted([segments[i][0], segments[i][1], segments[j][0], segments[j][1]])\n                if l <= r:\n                    intersections.append((l, r))\n                    lengths.append(r - l + 1)\n        max_length = max(lengths)\n\n    # Print result\n    return str(max_length)"
    },
    {
        "number": 4022,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l, r))\n    \n    max_len = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if segments[i][1] > segments[j][0] and segments[j][1] > segments[i][0]:\n                length = min(segments[i][1], segments[j][1]) - max(segments[i][0], segments[j][0])\n                max_len = max(max_len, length)\n    \n    return str(max_len)"
    },
    {
        "number": 4022,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l, r))\n    segments.sort()\n\n    # max length of intersection\n    max_length = 0\n\n    # check all possible pairs of segments\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            # check if they intersect\n            if segments[j][0] <= segments[i][1] and segments[i][0] <= segments[j][1]:\n                # calculate the length of the intersection\n                length = min(segments[i][1], segments[j][1]) - max(segments[i][0], segments[j][0]) + 1\n                max_length = max(max_length, length)\n\n    return str(max_length)\n"
    },
    {
        "number": 4022,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split()[0:2])\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1])\n    best_len = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if segments[i][1] >= segments[j][0]:\n                best_len = max(best_len, segments[i][1] - segments[j][0])\n    return str(best_len)\n"
    },
    {
        "number": 4022,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l, r))\n\n    # sort segments by left endpoint\n    segments = sorted(segments, key=lambda x: x[0])\n\n    # find max intersection length\n    max_len = 0\n    for i in range(n - 1):\n        # if two segments overlap\n        if segments[i][1] >= segments[i + 1][0]:\n            # update max length\n            max_len = max(max_len, segments[i][1] - segments[i + 1][0])\n\n    return str(max_len)\n\nprint(solution('''4\n1 3\n2 6\n0 4\n3 3''')) # 1\n\nprint(solution('''5\n2 6\n1 3\n0 4\n1 20\n0 4''')) # 2\n\nprint(solution('''3\n4 5\n1 2\n9 20''')) # 0\n\nprint(solution('''2\n3 10\n1 5''')) # 7"
    },
    {
        "number": 4022,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    segments = []\n    for i in range(n):\n        left, right = map(int, stdin.readline().split())\n        segments.append((left, right))\n\n    # sort segments by right endpoint\n    segments = sorted(segments, key=lambda x: x[1])\n\n    # initialize variables\n    max_len = 0\n    curr_len = 0\n    i = 0\n    j = 0\n    curr_len_left = segments[0][0]\n    curr_len_right = segments[0][1]\n\n    # iterate through segments\n    while i < n - 1 and j < n:\n        if curr_len_right >= segments[j][0]:\n            # update current intersection length\n            curr_len_right = max(curr_len_right, segments[j][1])\n            curr_len = curr_len_right - curr_len_left\n            # update maximum intersection length\n            max_len = max(max_len, curr_len)\n            j += 1\n        else:\n            i += 1\n            # update current intersection length\n            curr_len_left = segments[i][0]\n            curr_len_right = segments[i][1]\n            curr_len = 0\n            j = i\n\n    return max_len"
    },
    {
        "number": 4022,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n\n    segments.sort(key=lambda x: x[1])\n\n    max_len = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            l = max(segments[i][0], segments[j][0])\n            r = min(segments[i][1], segments[j][1])\n            if r > l:\n                max_len = max(max_len, r - l)\n\n    return str(max_len)"
    },
    {
        "number": 4022,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    segments = [(int(l), int(r)) for l, r in [line.split() for line in lines[1:]]]\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if segments[i][0] <= segments[j][0] <= segments[i][1] or segments[i][0] <= segments[j][1] <= segments[i][1] or segments[j][0] <= segments[i][0] <= segments[j][1] or segments[j][0] <= segments[i][1] <= segments[j][1]:\n                length = max(segments[i][0], segments[j][0]) - min(segments[i][1], segments[j][1])\n                max_len = max(max_len, length)\n    return str(max_len)\n"
    },
    {
        "number": 4023,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    # Check if wall is complete\n    if len(set(a)) == 1:\n        return \"YES\"\n    # Check if a brick can be placed between parts of equal height\n    for i in range(1, n):\n        if a[i-1] == a[i] and a[i-1] == 1 and a[i] < 2:\n            return \"YES\"\n    # Check if a brick can be placed on parts with height 1\n    for i in range(1, n):\n        if a[i-1] == 1 and a[i] == 2:\n            return \"YES\"\n    # Check if a brick can be placed on parts with height 2\n    for i in range(n-1):\n        if a[i] == 2 and a[i+1] == 2:\n            return \"YES\"\n    # Check if a brick can be placed on parts with height 1 at the beginning or end\n    if a[0] == 1 or a[-1] == 1:\n        return \"YES\"\n    # If no brick can be placed, the wall is not complete\n    return \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    i, j = 0, n-1\n    while i < j:\n        if a[i] == a[j]:\n            i += 1\n            j -= 1\n        else:\n            return \"NO\"\n    if n == 1:\n        if a[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    for i in range(1, n):\n        if a[i]!= a[0]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4023,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # check if wall is already complete\n    if all(a[i] == a[i+1] for i in range(n-1)):\n        return \"YES\"\n    \n    # check if wall can be completed using bricks\n    for i in range(n-1):\n        if a[i] == a[i+1] and i+1 < n and a[i+2]!= a[i+1]:\n            # put brick on i+1\n            a[i+1] += 1\n            # put bricks on i and i+2 if possible\n            if i > 0 and a[i-1] == a[i+1]:\n                a[i] += 1\n                a[i+2] += 1\n            elif i+3 < n and a[i+3] == a[i+1]:\n                a[i] += 1\n                a[i+2] += 1\n            else:\n                # reset changes if not possible\n                a[i+1] -= 1\n                continue\n            # check if wall is complete\n            if all(a[i] == a[i+1] for i in range(n-1)):\n                return \"YES\"\n            # reset changes if not complete\n            a[i+1] -= 1\n            a[i] -= 1\n            a[i+2] -= 1\n    return \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    h = max(a)\n    if n > 2 * h or h > 10**9:\n        return \"NO\"\n    for i in range(n - 1):\n        if a[i] > 1 and a[i + 1] > 1 and a[i] + a[i + 1] > 2:\n            return \"NO\"\n    return \"YES\"\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        if a[0] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            return \"NO\"\n    if a[0]!= a[-1]:\n        return \"NO\"\n    return \"YES\"\n\nstdin = \"\"\"5\n2 1 1 2 5\"\"\"\n\nprint(solution(stdin)) # Output: \"YES\"\n\nstdin = \"\"\"3\n4 5 3\"\"\"\n\nprint(solution(stdin)) # Output: \"NO\"\n\nstdin = \"\"\"2\n10 10\"\"\"\n\nprint(solution(stdin)) # Output: \"YES\""
    },
    {
        "number": 4023,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    if n == 1:\n        return \"YES\" if a[0] == 1 else \"NO\"\n    for i in range(n - 1):\n        if a[i]!= a[i + 1]:\n            return \"NO\"\n    if a[0]!= 1 or a[-1]!= 1:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    i, j = 0, n - 1\n    while i < j:\n        if a[i]!= a[j]:\n            return \"NO\"\n        i += 1\n        j -= 1\n    return \"YES\""
    },
    {
        "number": 4023,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    if all(a[i] == a[i+1] for i in range(n-1)):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a_max = max(a)\n    if n == 1:\n        if a_max == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        if a_max == 1:\n            return \"NO\"\n        else:\n            i = 0\n            j = 0\n            while i < n:\n                if a[i] < a_max and i+1 < n and a[i] == a[i+1]:\n                    j = i+1\n                    while j < n and a[j] < a_max and a[j] == a[i]:\n                        j += 1\n                    if j-i > 1:\n                        return \"NO\"\n                    i = j\n                else:\n                    i += 1\n            return \"YES\""
    },
    {
        "number": 4023,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if max(a) == min(a) or any(a[i] == a[i-1] and a[i] == a[i+1] for i in range(1, n-1)):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4024,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n\n    if k > 26**n:\n        return -1\n    \n    costs = [0] * 26\n    for c in s:\n        costs[ord(c) - ord('a')] += 1\n\n    min_cost = sum(costs)\n    for i in range(26**n):\n        cost = 0\n        used = [False] * 26\n        for j in range(n):\n            cost += costs[ord(s[j]) - ord('a')]\n            if cost > min_cost:\n                break\n            used[ord(s[j]) - ord('a')] = True\n            if j == n-1 and sum(used) == k:\n                min_cost = cost\n    \n    return min_cost"
    },
    {
        "number": 4024,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()[0:2]))\n    s = stdin.split()[2]\n    S = set()\n    costs = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub = s[i:j]\n            if len(sub) > k:\n                continue\n            if sub not in S:\n                S.add(sub)\n                costs.append(n-len(sub))\n                if len(S) == k:\n                    return sum(costs)\n    return -1\n\nprint(solution(\"4 5 asdf\"))\nprint(solution(\"5 6 aaaaa\"))\nprint(solution(\"5 7 aaaaa\"))\nprint(solution(\"10 100 ajihiushda\"))"
    },
    {
        "number": 4024,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    S = set()\n    min_cost = float('inf')\n\n    def subsequence(t):\n        nonlocal min_cost\n        if t in S:\n            return\n        S.add(t)\n        cost = n - len(t)\n        if cost < min_cost:\n            min_cost = cost\n        for i in range(len(t)):\n            subsequence(t[:i] + t[i+1:])\n        S.remove(t)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            subsequence(s[i:j])\n            if len(S) == k:\n                return min_cost\n    return -1"
    },
    {
        "number": 4024,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    cost = 0\n    sub_seq = \"\"\n    S = set()\n\n    def is_subsequence(t):\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n                j += 1\n            else:\n                i += 1\n        return j == len(t)\n\n    def backtrack(t):\n        nonlocal cost, sub_seq, S\n        if len(S) == k:\n            return True\n        for i in range(len(s)):\n            if s[i] == t[0]:\n                sub_seq += s[i]\n                t = t[1:]\n                if is_subsequence(sub_seq) and sub_seq not in S:\n                    S.add(sub_seq)\n                    cost += len(s) - len(sub_seq)\n                    if backtrack(t):\n                        return True\n                    cost -= len(s) - len(sub_seq)\n                    S.remove(sub_seq)\n                    sub_seq = sub_seq[:-1]\n                else:\n                    sub_seq = sub_seq[:-1]\n        return False\n\n    if k > len(s) ** 2:\n        return -1\n    backtrack(s)\n    return cost if len(S) == k else -1"
    },
    {
        "number": 4024,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, k = map(int, stdin.split()[:2])\n    s = stdin.split()[-1]\n\n    # check if it is possible to obtain the set S of size k\n    if n < k:\n        return -1\n\n    # generate all possible subsequences of s\n    subseqs = set()\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            subseqs.add(s[i:j])\n\n    # check if there are enough subsequences\n    if len(subseqs) < k:\n        return -1\n\n    # generate all possible combinations of subsequences\n    costs = []\n    for comb in itertools.combinations(subseqs, k):\n        cost = sum(n - len(t) for t in comb)\n        if cost > 0:\n            costs.append(cost)\n\n    # check if it is possible to generate the set S\n    if len(costs) == 0:\n        return -1\n\n    # return the minimum possible total cost to obtain the set S\n    return min(costs)"
    },
    {
        "number": 4024,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.readline().strip()\n    s_set = set()\n\n    def dfs(t, cost, cnt):\n        if cnt == k:\n            s_set.add(t)\n            return\n        if len(t) > n - cnt * cost:\n            return\n        for i in range(n):\n            if i > 0 and s[i] == s[i-1]:\n                continue\n            if cost + (n - i - cnt) < n - i:\n                break\n            dfs(t + s[i], cost + 1, cnt + 1)\n\n    dfs(\"\", 0, 0)\n    if len(s_set)!= k:\n        return -1\n    total_cost = 0\n    for t in s_set:\n        total_cost += n - len(t)\n    return total_cost\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    S = set()\n    cost = 0\n    def backtrack(t):\n        nonlocal cost\n        if len(S) == k:\n            return\n        if t == s:\n            cost += len(s) - len(t)\n            S.add(t)\n            return\n        for i in range(len(t)):\n            if t[i] not in S and (not i or s[i-1] == t[i] or t[i-1] == t[i]):\n                S.add(t[i])\n                backtrack(t[:i]+t[i+1:])\n                S.remove(t[i])\n    backtrack(s)\n    if len(S) == k:\n        return cost\n    else:\n        return -1"
    },
    {
        "number": 4024,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = stdin.split()[2]\n    if k > len(s):\n        return -1\n    if n < k:\n        return -1\n    if k == 1:\n        return 0\n    dp = [float('inf')] * (k+1)\n    dp[1] = 0\n    for i in range(n):\n        for j in range(1, k+1):\n            if i >= j:\n                dp[j] = min(dp[j], dp[j-1] + (n-i-1))\n    if dp[k] == float('inf'):\n        return -1\n    return dp[k]"
    },
    {
        "number": 4024,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()[0:2]))\n    s = stdin.split('\\n')[1].strip()\n    if k > 100 or n > 100:\n        return -1\n    cost = [n-i for i in range(n+1)]\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1:\n                dp[i][j] = cost[i]\n            else:\n                dp[i][j] = float('inf')\n                for l in range(1, i):\n                    if s[l-1]!= s[i-1]:\n                        dp[i][j] = min(dp[i][j], dp[l-1][j-1]+cost[i])\n                if dp[i][j] == float('inf'):\n                    return -1\n    return dp[n][k]"
    },
    {
        "number": 4024,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    s = stdin.strip().split()[1]\n    if k > 26**n or k == 0:\n        return -1\n    if k == 1:\n        return n\n    S = set()\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = s[i:j]\n            if len(sub) > k:\n                continue\n            if sub not in S:\n                S.add(sub)\n                k -= len(sub)\n                if k == 0:\n                    return sum(n-len(x) for x in S)\n    return -1"
    },
    {
        "number": 4025,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    # a, b, c = 2, 1, 1\n    # a, b, c = 3, 2, 2\n    # a, b, c = 1, 100, 1\n    # a, b, c = 30, 20, 10\n\n    # if a + b + c < 10:\n    #     return 1\n    # elif a + b + c == 10:\n    #     return 2\n\n    # possible_days = []\n    # for i in range(7):\n    #     if i not in [2, 4, 5]:\n    #         possible_days.append(i)\n    #         if sum(possible_days) == 10:\n    #             break\n    #     elif i == 2:\n    #         if a > 0:\n    #             possible_days.append(i)\n    #             if sum(possible_days) == 10:\n    #                 break\n    #     elif i == 4:\n    #         if b > 0:\n    #             possible_days.append(i)\n    #             if sum(possible_days) == 10:\n    #                 break\n    #     elif i == 5:\n    #         if c > 0:\n    #             possible_days.append(i)\n    #             if sum(possible_days) == 10:\n    #                 break\n    # return len(possible_days)\n\n    # a, b, c = 1, 2, 3\n    # possible_days = [i for i in range(7) if i not in [2, 4, 5]]\n    # for i in range(7):\n    #     if i not in [2, 4, 5]:\n    #         possible_days.append(i)\n    #         if sum(possible_days) == 10:\n    #             break\n    #     elif i == 2:\n    #         if a > 0:\n    #             possible_days.append(i)\n    #             if sum(possible_days) == 10:\n    #                 break\n    #     elif i == 4:\n    #         if b > 0:\n    #             possible_days.append(i)\n    #             if sum(possible_days) == 10:\n    #                 break\n    #     elif i == 5:\n    #         if c > 0:\n    #             possible_days.append(i)\n    #             if sum(possible_days) == 10:\n    #                 break\n    # return len(possible_days)\n\n    a, b, c = 2, 1, 1\n    possible_days = [i for i in range(7) if i not in [2, 4, 5]]\n    for i in range(7):\n        if i not in [2, 4, 5]:\n            possible_days.append(i)\n            if sum(possible_days) == 10:\n                break\n        elif i == 2:\n            if a > 0:\n                possible_days.append(i)\n                if sum(possible_days) == 10:\n                    break\n        elif i == 4:\n            if b > 0:\n                possible_days.append(i)\n                if sum(possible_days) == 10:\n                    break\n        elif i == 5:\n            if c > 0:\n                possible_days.append(i)\n                if sum(possible_days) == 10:\n                    break\n    return len(possible_days)"
    },
    {
        "number": 4025,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a > b + c:\n        return str(a//b + a//c + 1)\n    elif b > a + c:\n        return str(b//a + b//c + 1)\n    else:\n        return str(c//a + c//b + 1)\n\nprint(solution(\"2 1 1\"))\nprint(solution(\"3 2 2\"))\nprint(solution(\"1 100 1\"))\nprint(solution(\"30 20 10\"))"
    },
    {
        "number": 4025,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    \n    if b < a:\n        a, b = b, a\n    \n    if c < a + b:\n        return str(c // (a + b))\n    \n    return str(b // a)\n\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    # fish food every Monday, Thursday and Sunday\n    # rabbit stew every Tuesday and Saturday\n    # chicken stake every other day\n    days = 0\n    while True:\n        if (days % 7) == 0:\n            days += a // 2\n            a = a % 2\n            b -= 1\n            c -= 1\n            if a == 0 and b == 0 and c == 0:\n                return days // 7\n        elif (days % 7) == 1:\n            days += a // 2\n            a = a % 2\n            b -= 1\n            c -= 1\n            if a == 0 and b == 0 and c == 0:\n                return days // 7\n        elif (days % 7) == 2:\n            days += a // 2\n            a = a % 2\n            b -= 1\n            c -= 1\n            if a == 0 and b == 0 and c == 0:\n                return days // 7\n        elif (days % 7) == 3:\n            days += b // 2\n            b = b % 2\n            a -= 1\n            c -= 1\n            if a == 0 and b == 0 and c == 0:\n                return days // 7\n        elif (days % 7) == 4:\n            days += b // 2\n            b = b % 2\n            a -= 1\n            c -= 1\n            if a == 0 and b == 0 and c == 0:\n                return days // 7\n        elif (days % 7) == 5:\n            days += b // 2\n            b = b % 2\n            a -= 1\n            c -= 1\n            if a == 0 and b == 0 and c == 0:\n                return days // 7\n        elif (days % 7) == 6:\n            days += c // 2\n            c = c % 2\n            a -= 1\n            b -= 1\n            if a == 0 and b == 0 and c == 0:\n                return days // 7"
    },
    {
        "number": 4025,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days = 1\n    while (a + b + c) > 0:\n        if days % 7 in [0, 2, 4]:\n            a -= 1\n        elif days % 7 in [1, 5]:\n            b -= 1\n        else:\n            c -= 1\n        days += 1\n    return days - 1"
    },
    {
        "number": 4025,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days = 0\n    while b > 0 or c > 0:\n        if days % 7 in [0, 3, 6]:\n            days += a\n            b -= a\n            c -= a\n        elif days % 7 in [1, 4]:\n            days += b\n            a -= b\n            c -= b\n        else:\n            days += c\n            a -= c\n            b -= c\n    return days\n\nprint(solution(\"2 1 1\")) # Expected output: 4\nprint(solution(\"3 2 2\")) # Expected output: 7\nprint(solution(\"1 100 1\")) # Expected output: 3\nprint(solution(\"30 20 10\")) # Expected output: 39"
    },
    {
        "number": 4025,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.strip().split())\n    if a > c and b > c:\n        return str(a // c + b // c + 1)\n    elif a > b and a > c:\n        return str(a // b + 1)\n    elif b > a and b > c:\n        return str(b // a + 1)\n    else:\n        return str(c // a + 1)\n"
    },
    {
        "number": 4025,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    max_days = 0\n    for i in range(7):\n        if i in [0, 3, 6]:\n            max_days += a // 2\n        elif i in [1, 5]:\n            max_days += b // 2\n        else:\n            max_days += c // 2\n    max_days = min(max_days, a + b + c)\n    print(max_days)\n\nwith open('input.txt', 'r') as f:\n    solution(f.read())"
    },
    {
        "number": 4025,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    a, b, c = map(int, stdin.split())\n    # define days of the week\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    # calculate total foods\n    total_food = a + b + c\n    # initialize counters for each day\n    counters = [0] * 7\n    # calculate counters for each day\n    for i in range(a):\n        counters[0] += 1\n    for i in range(b):\n        counters[1] += 1\n    for i in range(c):\n        counters[2] += 1\n    for i in range(a):\n        counters[3] += 1\n    for i in range(b):\n        counters[4] += 1\n    for i in range(c):\n        counters[5] += 1\n    for i in range(a):\n        counters[6] += 1\n    # calculate maximum number of days\n    max_days = 0\n    for i in range(7):\n        if counters[i] == 0:\n            continue\n        if i == 0 or i == 3 or i == 5 or i == 6:\n            max_days += counters[i] // total_food * 2\n        elif i == 1 or i == 4:\n            max_days += counters[i] // total_food\n        else:\n            max_days += counters[i]\n    # return result\n    return str(max_days)"
    },
    {
        "number": 4025,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days = 1\n    while a > 0 and b > 0 and c > 0:\n        if days % 7 in [1, 3, 5, 6]:\n            a -= 1\n        elif days % 7 in [2, 4, 7]:\n            b -= 1\n        else:\n            c -= 1\n        days += 1\n    return days - 1\n\nprint(solution(input()))"
    },
    {
        "number": 4026,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    tiles = []\n    for i in range(n):\n        top_left, top_right, bottom_left, bottom_right = map(int, lines[2*i+1].split())\n        tiles.append((top_left, top_right, bottom_left, bottom_right))\n    # check for symmetric matrix\n    for i in range(m):\n        for j in range(i+1, m):\n            if tiles[i][0]!= tiles[j][1] or tiles[i][1]!= tiles[j][0] or tiles[i][2]!= tiles[j][3] or tiles[i][3]!= tiles[j][2]:\n                return \"NO\"\n    # check for valid placement\n    for i in range(m):\n        for j in range(m):\n            if tiles[0][0]!= tiles[0][1] or tiles[0][2]!= tiles[0][3]:\n                continue\n            left = tiles[0][0] if i == 0 else tiles[i-1][1]\n            right = tiles[0][1] if i == m-1 else tiles[i+1][0]\n            top = tiles[0][2] if j == 0 else tiles[j-1][3]\n            bottom = tiles[0][3] if j == m-1 else tiles[j+1][2]\n            if (tiles[i][0]!= left or tiles[i][1]!= right or tiles[j][2]!= top or tiles[j][3]!= bottom):\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4026,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    i = 1\n    while i <= t:\n        n, m = map(int, lines[i].split())\n        tiles = []\n        for j in range(n):\n            tile_type = list(map(int, lines[i+j*2+1].split()))\n            tiles.append(tile_type)\n        i += 2*n + 1\n        # check if square is symmetric and valid\n        square = [[0]*m for _ in range(m)]\n        used_tiles = set()\n        def place_tile(i, j, tile_type):\n            if i >= m or j >= m or square[i][j]!= 0 or tile_type not in tiles:\n                return False\n            used_tiles.add(tile_type)\n            square[i][j] = tile_type\n            if i > 0 and place_tile(i-1, j, tile_type):\n                return True\n            if j > 0 and place_tile(i, j-1, tile_type):\n                return True\n            if i < m-1 and place_tile(i+1, j, tile_type):\n                return True\n            if j < m-1 and place_tile(i, j+1, tile_type):\n                return True\n            square[i][j] = 0\n            used_tiles.remove(tile_type)\n            return False\n        if all(place_tile(i, j, tile_type) for j in range(m) for i in range(m) for tile_type in range(n)):\n            if all(square[i][j] == square[j][i] for j in range(m) for i in range(m)) and all(square[i][j]!= 0 for i in range(m) for j in range(m)):\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\""
    },
    {
        "number": 4026,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split(\"\\n\"):\n        if not line:\n            continue\n        n, m = map(int, line.split())\n        tiles = []\n        for i in range(n):\n            top_left, top_right = map(int, stdin.split(\"\\n\")[i*2].split())\n            bottom_left, bottom_right = map(int, stdin.split(\"\\n\")[i*2+1].split())\n            tiles.append((top_left, top_right, bottom_left, bottom_right))\n        # Check if square is symmetric with respect to main diagonal\n        for i in range(m):\n            for j in range(i+1, m):\n                if tiles[i//2][j//2]!= tiles[j//2][i//2]:\n                    return \"NO\"\n        # Check if each cell is covered with exactly one tile\n        for i in range(m):\n            for j in range(m):\n                if (i, j) in [(2*x//m, 2*x%m) for x in range(n)]:\n                    continue\n                tile_number = -1\n                for k in range(n):\n                    if (i, j) in [(2*x//m, 2*x%m) for x in range(n)]:\n                        continue\n                    if tiles[k][0] <= i <= tiles[k][1] and tiles[k][2] <= j <= tiles[k][3]:\n                        tile_number = k\n                        break\n                if tile_number == -1:\n                    return \"NO\"\n        # Check if all tiles are inside the square\n        for i in range(n):\n            for j in range(m):\n                if tiles[i][0] <= j <= tiles[i][1] and tiles[i][2] <= i <= tiles[i][3]:\n                    continue\n                return \"NO\"\n        return \"YES\""
    },
    {
        "number": 4026,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse the input\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        tiles = []\n        for j in range(n):\n            top_left, top_right = map(int, stdin.readline().strip().split())\n            bottom_left, bottom_right = map(int, stdin.readline().strip().split())\n            tiles.append((top_left, top_right, bottom_left, bottom_right))\n\n        # check if it is possible to construct the square\n        if m**2 % n!= 0:\n            return \"NO\"\n\n        # check if it is a symmetric matrix\n        top_left_rows = [(top_left // 10**(k-1)) % 10 for k in range(2, 2*n+1, 2)]\n        bottom_right_rows = [(bottom_right // 10**(k-1)) % 10 for k in range(2, 2*n+1, 2)]\n        if top_left_rows!= bottom_right_rows:\n            return \"NO\"\n\n        # check if the tiles fit inside the square\n        for top_left, top_right, bottom_left, bottom_right in tiles:\n            if top_left > m or top_right > m or bottom_left > m or bottom_right > m:\n                return \"NO\"\n            if bottom_left - top_left!= bottom_right - top_right:\n                return \"NO\"\n\n        return \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    tiles = {}\n    for i in range(n):\n        top_left, top_right = map(int, stdin.readline().split())\n        bottom_left, bottom_right = map(int, stdin.readline().split())\n        tiles[(top_left, top_right)] = (bottom_left, bottom_right)\n    \n    # check if square is valid\n    if not all(x % 2 == 1 for x in (m, n)):\n        return \"NO\"\n    if m % 2 == 0:\n        return \"NO\"\n    \n    # check if square is symmetric with respect to main diagonal\n    if not all(tiles[(x, y)][0] == tiles[(y, x)][0] and tiles[(x, y)][1] == tiles[(y, x)][1] for x in range(1, m, 2) for y in range(1, m, 2)):\n        return \"NO\"\n    \n    # check if square can be constructed using tiles\n    used_tiles = set()\n    for i in range(1, m, 2):\n        for j in range(1, m, 2):\n            if (i, j) in used_tiles:\n                continue\n            for top_left, top_right in tiles:\n                if (top_left in (i-1, i+1) and top_right in (j-1, j+1)) or (top_left in (j-1, j+1) and top_right in (i-1, i+1)):\n                    used_tiles.add((i, j))\n                    break\n            else:\n                return \"NO\"\n    \n    return \"YES\""
    },
    {
        "number": 4026,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for i in range(t):\n        n, m = map(int, stdin.split('\\n')[1].split())\n        tiles = []\n        for j in range(2*n):\n            top_left, top_right = map(int, stdin.split('\\n')[2+j].split())\n            bottom_left, bottom_right = map(int, stdin.split('\\n')[3+j].split())\n            tiles.append([[top_left, top_right], [bottom_left, bottom_right]])\n        if m % 2 == 1:\n            return \"NO\"\n        s = [[0]*m for _ in range(m)]\n        for j in range(n):\n            for k in range(m//2):\n                s[k][k] = tiles[2*j][0][0]\n                s[k][m-k-1] = tiles[2*j][1][0]\n                s[m-k-1][k] = tiles[2*j][0][1]\n                s[m-k-1][m-k-1] = tiles[2*j][1][1]\n            for k in range(m//2, m):\n                s[k][k-m//2] = tiles[2*j][0][0]\n                s[k][k-m//2+1] = tiles[2*j][0][1]\n                s[k-m//2][k] = tiles[2*j][1][0]\n                s[k-m//2+1][k] = tiles[2*j][1][1]\n        for j in range(m):\n            for k in range(j+1, m):\n                if s[j][k]!= s[k][j]:\n                    return \"NO\"\n        return \"YES\""
    },
    {
        "number": 4026,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        types = []\n        for j in range(n):\n            top_left, top_right = map(int, stdin.readline().strip().split())\n            bottom_left, bottom_right = map(int, stdin.readline().strip().split())\n            types.append([[top_left, top_right], [bottom_left, bottom_right]])\n        if m % 2 == 0 or m <= n:\n            return \"NO\"\n        s = [[0]*m for _ in range(m)]\n        for j in range(n):\n            t = types[j]\n            placed = False\n            for i in range(m):\n                for j in range(m):\n                    if i % 2 == 0 and j % 2 == 0 and s[i][j] == 0:\n                        s[i][j] = t[0][0]\n                        if i == j and t[0][0]!= t[0][1]:\n                            return \"NO\"\n                        if i == m-1-j and t[0][0]!= t[1][0]:\n                            return \"NO\"\n                        if i == 0:\n                            if s[i+1][j]!= t[0][1]:\n                                return \"NO\"\n                            s[i][j+1] = t[0][1]\n                        elif i == m-1:\n                            if s[i-1][j]!= t[1][0]:\n                                return \"NO\"\n                            s[i][j+1] = t[1][0]\n                        else:\n                            if s[i-1][j]!= t[1][0] or s[i+1][j]!= t[0][1]:\n                                return \"NO\"\n                            s[i][j+1] = t[1][0]\n                        if i == m//2:\n                            if t[0][0] == t[1][0]:\n                                if t[0][0]!= s[i+1][j+1] or s[i][j+2]!= t[0][0]:\n                                    return \"NO\"\n                                if s[i+1][j+2]!= t[1][0]:\n                                    return \"NO\"\n                            else:\n                                if t[0][0]!= s[i+1][j+1] or s[i][j+2]!= t[0][0] or s[i+1][j+2]!= t[1][0]:\n                                    return \"NO\"\n                            if j == 0:\n                                s[i+1][j] = t[0][1]\n                                s[i+1][j+1] = t[1][0]\n                            else:\n                                s[i+1][j] = t[1][0]\n                                s[i+1][j+1] = t[0][1]\n                        else:\n                            if t[0][0] == t[1][0]:\n                                if t[0][0]!= s[i-1][j+1] or s[i][j+2]!= t[0][0]:\n                                    return \"NO\"\n                                if s[i-1][j+2]!= t[1][0]:\n                                    return \"NO\"\n                            else:\n                                if t[0][0]!= s[i-1][j+1] or s[i][j+2]!= t[0][0] or s[i-1][j+2]!= t[1][0]:\n                                    return \"NO\"\n                            if j == 0:\n                                s[i-1][j] = t[0][1]\n                                s[i-1][j+1] = t[1][0]\n                            else:\n                                s[i-1][j] = t[1][0]\n                                s[i-1][j+1] = t[0][1]\n                        placed = True\n                        break\n                if placed:\n                    break\n            if not placed:\n                return \"NO\"\n        for i in range(m//2):\n            for j in range(m):\n                if s[i][j]!= s[m-1-i][j] or s[i][m-1-j]!= s[m-1-i][m-1-j]:\n                    return \"NO\"\n        return \"YES\""
    },
    {
        "number": 4026,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n, m = map(int, lines[i*2-1].split())\n        tiles = {}\n        for j in range(2*n):\n            a, b, c, d = map(int, lines[i*2+j].split())\n            tiles[(a,b)] = (c,d)\n            tiles[(c,d)] = (a,b)\n        used = set()\n        for j in range(m//2):\n            for k in range(m//2):\n                if (j,k) in used:\n                    return \"NO\"\n                used.add((j,k))\n        for j in range(m//2):\n            for k in range(m//2+1,m):\n                if (j,k) in used or (k,j) in used:\n                    return \"NO\"\n                used.add((j,k))\n        used.clear()\n        for j in range(m//2+1,m):\n            for k in range(m//2):\n                if (j,k) in used or (k,j) in used:\n                    return \"NO\"\n                used.add((j,k))\n        return \"YES\""
    },
    {
        "number": 4026,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    for i in range(1, test_cases+1):\n        n, m = map(int, stdin.split('\\n')[i].split())\n        types = []\n        for j in range(i+1, i+1+2*n):\n            types.append(tuple(map(int, stdin.split('\\n')[j].split())))\n        if not can_construct_square(n, m, types):\n            return \"NO\"\n    return \"YES\"\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        # Read the number of types of tiles and size of square\n        n, m = map(int, stdin.readline().strip().split())\n        # Read the description of tiles types\n        tiles = []\n        for j in range(2*n):\n            top, right = map(int, stdin.readline().strip().split())\n            bottom, left = map(int, stdin.readline().strip().split())\n            tiles.append((top, right, bottom, left))\n        \n        # Check if Masha can construct the square\n        is_symmetric = True\n        for j in range(n):\n            for k in range(n):\n                if tiles[j][0]!= tiles[k][1] or tiles[j][1]!= tiles[k][0]:\n                    is_symmetric = False\n                    break\n            if not is_symmetric:\n                break\n        if not is_symmetric:\n            print(\"NO\")\n            continue\n        \n        # Check if Masha can place the tiles in the square\n        is_inside = True\n        for j in range(m):\n            for k in range(m):\n                top, right, bottom, left = None, None, None, None\n                for l in range(n):\n                    if tiles[l][0] <= j < tiles[l][2] and tiles[l][1] <= k < tiles[l][3]:\n                        if j < m // 2 and k < m // 2:\n                            if top is None:\n                                top = l\n                            elif right is None:\n                                right = l\n                            elif bottom is None:\n                                bottom = l\n                            else:\n                                left = l\n                        elif j >= m // 2 and k >= m // 2:\n                            if top is None:\n                                top = l\n                            elif right is None:\n                                right = l\n                            elif bottom is None:\n                                bottom = l\n                            else:\n                                left = l\n                if top is None or right is None or bottom is None or left is None:\n                    is_inside = False\n                    break\n            if not is_inside:\n                break\n        if not is_inside:\n            print(\"NO\")\n            continue\n        \n        # Check if Masha can construct the square with the given tiles\n        is_valid = True\n        for j in range(m):\n            for k in range(m):\n                if j < m // 2 and k < m // 2:\n                    if not (tiles[top][0] <= j < tiles[top][2] and tiles[left][0] <= k < tiles[left][2]):\n                        is_valid = False\n                        break\n                elif j >= m // 2 and k >= m // 2:\n                    if not (tiles[bottom][0] <= j < tiles[bottom][2] and tiles[right][0] <= k < tiles[right][2]):\n                        is_valid = False\n                        break\n            if not is_valid:\n                break\n        if not is_valid:\n            print(\"NO\")\n            continue\n        \n        # If all checks passed, print \"YES\"\n        print(\"YES\")"
    },
    {
        "number": 4027,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    A = set()\n    B = set()\n    for i in range(1, n+1):\n        if i%3 == 1:\n            A.add(i)\n        else:\n            B.add(i)\n    return abs(sum(A)-sum(B))"
    },
    {
        "number": 4027,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    set1 = set()\n    set2 = set()\n    for i in range(1, n+1):\n        if i <= n//2:\n            set1.add(i)\n        else:\n            set2.add(i)\n    return abs(sum(set1) - sum(set2))\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    if n % 2 == 0:\n        return str(n // 2)\n    else:\n        return str(n // 2 + 1)\n\nprint(solution(\"3\")) # Output: 1\nprint(solution(\"5\")) # Output: 2\nprint(solution(\"6\")) # Output: 2"
    },
    {
        "number": 4027,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sum_n = n * (n + 1) // 2\n    min_diff = abs(sum_n - (n * (n + 1) // 2))\n    for i in range(2, n):\n        diff = abs(sum_n - (n * (n + 1) // 2 - i))\n        if diff < min_diff:\n            min_diff = diff\n    return str(min_diff)"
    },
    {
        "number": 4027,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        return str(n // 2)\n    else:\n        return '1'"
    },
    {
        "number": 4027,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    min_sum = abs(sum(range(1, n+1)) - sum(range(1, n+1, 2)))\n    max_sum = abs(sum(range(1, n+1)) - sum(range(2, n+1, 2)))\n    return str(min(min_sum, max_sum))\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(range(1, n+1))\n    a.sort(key=lambda x: abs(x-n//2))\n    b = [x for x in a if x > n//2]\n    a = [x for x in a if x <= n//2]\n    return abs(sum(a) - sum(b))\n\nprint(solution(\"3\\n\")) # Expected Output: 0\nprint(solution(\"5\\n\")) # Expected Output: 1\nprint(solution(\"6\\n\")) # Expected Output: 1"
    },
    {
        "number": 4027,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = set()\n    B = set()\n    for i in range(1, n+1):\n        if i <= n//2:\n            A.add(i)\n        else:\n            B.add(i)\n    return abs(sum(A) - sum(B))"
    },
    {
        "number": 4027,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    # if n is odd, we can divide the sequence into two sets A and B\n    if n % 2 == 1:\n        return \"0\"\n    # if n is even, we can divide the sequence into two sets A and B\n    # where the sum of the elements of A is equal to the sum of the elements of B\n    else:\n        return \"1\""
    },
    {
        "number": 4027,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4028,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 10**9+7\n    n, s = map(int, stdin.split())\n    count = 0\n    for i in range(len(s)-n+1):\n        if s[i:i+n] == s[i:i+n][::-1] and len(set(s[i:i+n])) == n:\n            count += 1\n    return count % MOD\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4028,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    MOD = 10**9+7\n    count = 0\n    for i in range(2**n):\n        b = bin(i)[2:].zfill(n)\n        if s in ''.join('1+'[b[j]=='(' and b[j+1]==')' for j in range(n)]):\n            count += 1\n            count %= MOD\n    return count"
    },
    {
        "number": 4028,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n    import operator\n    mod = 1000000007\n    n, s = stdin.splitlines()\n    n = int(n)\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+n, len(s)+1):\n            if s[i:j] in itertools.product(\"()\", repeat=len(s[i:j])):\n                count += 1\n                count %= mod\n    return count"
    },
    {
        "number": 4028,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    mod = 10**9+7\n    n, s = map(int, stdin.split())\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(i+1):\n            if s[i] == ')' and s[j] == '(':\n                dp[i+1][j+1] = (dp[i+1][j+1] + dp[i][j]) % mod\n            dp[i+1][j] = dp[i][j]\n    return dp[n][n]"
    },
    {
        "number": 4028,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n\n    def is_regular(sequence: str) -> bool:\n        stack = []\n        for bracket in sequence:\n            if bracket == '(':\n                stack.append('(')\n            else:\n                if not stack or stack.pop()!= '(':\n                    return False\n        return not stack\n\n    count = 0\n    for i in range(len(s) - n + 1):\n        if is_regular(s[i:i+2*n]):\n            count += 1\n            count %= 10**9 + 7\n    return count"
    },
    {
        "number": 4028,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 1000000007\n    n, s = map(int, stdin.split())\n    total = 0\n    for i in range(1, 2*n+1):\n        for j in range(n+1):\n            if i-j < 0 or i-j >= len(s) or s[i-j]!= ')':\n                continue\n            count = 0\n            for k in range(j):\n                if s[k] == '(':\n                    count += 1\n            if count == 0:\n                total += pow(2, i-j, MOD)\n                total %= MOD\n    return total"
    },
    {
        "number": 4028,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.strip().split())\n    MOD = 1000000007\n    dp = [[0] * (2*n+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, 2*n+1):\n        dp[0][i] = 1\n    for i in range(1, n+1):\n        for j in range(i+1, 2*n+1-i):\n            if s[i-1] == '(' and s[j-1] == ')':\n                dp[i][j] = (dp[i-1][j-1] + dp[i][j-2] + dp[i-1][j]) % MOD\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][2*n]\n\n\nprint(solution(input()))"
    },
    {
        "number": 4028,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, s = stdin.strip().split()\n    n = int(n)\n    s = s[1:-1]\n\n    # Count number of valid bracket sequences\n    MOD = 1000000007\n    dp = [[0] * (2*n+1) for _ in range(2*n+1)]\n    dp[0][0] = 1\n    for i in range(len(s)):\n        for j in range(2*n):\n            if s[i] == '(':\n                dp[i+1][j+1] = (dp[i][j+1] + dp[i+1][j]) % MOD\n            else:\n                dp[i+1][j] = dp[i][j]\n                if j >= 1:\n                    dp[i+1][j+1] = (dp[i+1][j+1] + dp[i][j-1]) % MOD\n    res = dp[-1][-1]\n\n    return res % MOD\n"
    },
    {
        "number": 4028,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 1000000007\n    n, s = map(int, stdin.strip().split())\n    res = 0\n    for i in range(len(s)):\n        for j in range(i+2, len(s)+1, 2):\n            if s[i:j] in s:\n                res = (res + 1) % MOD\n    return res"
    },
    {
        "number": 4028,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.strip().split())\n    n = int(n)\n    MOD = 1000000007\n\n    # construct all possible bracket sequences\n    def construct(s):\n        if len(s) == 2 * n:\n            return [s]\n        elif len(s) == 0:\n            return []\n        else:\n            res = []\n            for i in range(len(s)):\n                if s[i] == '(':\n                    for j in range(i+1, len(s)):\n                        if s[j] == ')':\n                            for c in construct(s[:i] + '1' + s[i+1:j] + '+' + s[j+1:]):\n                                res.append('(' + c + ')')\n            return res\n\n    # count the number of bracket sequences containing s as a substring\n    count = 0\n    for seq in construct(s):\n        if seq.count(s) > 0:\n            count += seq.count(s) * comb(2*n-1, n, mod=MOD)\n            count %= MOD\n    return count"
    },
    {
        "number": 4029,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = 0\n    while n % 25!= 0:\n        if n % 10 == 0:\n            return -1\n        i = 1\n        while n % 10 == 0:\n            i += 1\n            n //= 10\n        if i == 1:\n            return -1\n        n, i = n * 10 + n % 10, i - 1\n        moves += i\n    return moves"
    },
    {
        "number": 4029,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # if n is divisible by 25, return 0\n    if n % 25 == 0:\n        return 0\n    # if n contains leading zeroes, return -1\n    if n == 0:\n        return -1\n    count = 0\n    # while n is not divisible by 25 and n is not equal to 0\n    while n % 25!= 0 and n!= 0:\n        # find the index of the first non-zero digit in n\n        index = next((i for i, digit in enumerate(str(n)) if digit!= '0'), None)\n        # if n contains no non-zero digits, return -1\n        if index is None:\n            return -1\n        # swap the digits at index and index+1\n        n = int(str(n)[:index] + str(n)[index+1] + str(n)[index] + str(n)[index+2:])\n        # increment count\n        count += 1\n    return count"
    },
    {
        "number": 4029,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return 0\n    else:\n        count = 0\n        while n % 25!= 0:\n            count += 1\n            n = swap_adjacent(n)\n            if n % 25 == 0:\n                return count\n    return -1\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # swap adjacent digits until the number is divisible by 25\n    count = 0\n    while n % 25!= 0:\n        prev_digit = n % 10\n        next_digit = (n // 10) % 10\n        n = prev_digit * 10 + next_digit\n        count += 1\n    return str(count) if n % 25 == 0 else \"-1\"\n\nprint(solution(\"5071\"))\nprint(solution(\"705\"))\nprint(solution(\"1241367\"))"
    },
    {
        "number": 4029,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n % 25!= 0:\n        for i in range(len(str(n)) - 1):\n            if str(n)[i] == '0' and str(n)[i+1]!= '0':\n                n = n - int(str(n)[i]) + int(str(n)[i+1]) * 10\n                count += 1\n                break\n            elif str(n)[i]!= '0' and str(n)[i+1] == '0':\n                n = n - int(str(n)[i]) * 10 + int(str(n)[i+1])\n                count += 1\n                break\n            elif str(n)[i]!= '0' and str(n)[i+1]!= '0':\n                n = n - int(str(n)[i]) * 10 + int(str(n)[i+1]) * 10\n                count += 1\n                break\n    return str(count) if count!= 0 else '-1'\n\nprint(solution(input()))"
    },
    {
        "number": 4029,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # To check if the given number is divisible by 25\n    if n % 25 == 0:\n        return 0\n    count = 0\n    # Removing leading zeroes from the given number\n    while n > 0 and n % 10 == 0:\n        count += 1\n        n //= 10\n    # Removing trailing zeroes from the given number\n    while n > 0 and n % 10 == 0:\n        n //= 10\n    # If the number becomes zero, it is impossible to obtain a number that is divisible by 25\n    if n == 0:\n        return -1\n    # Making moves\n    while n % 25!= 0:\n        # Finding the last two digits of the given number\n        x = n % 100\n        # Swapping adjacent digits\n        if x // 10 == x % 10:\n            n += 100\n            n //= 10\n        else:\n            n += 1\n            n //= 10\n        count += 1\n    return count"
    },
    {
        "number": 4029,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # If the number is divisible by 25, return 0\n    if n % 25 == 0:\n        return 0\n    count = 0\n    # Loop through all digits in the number\n    for i in range(len(str(n))-1):\n        # If the current digit is 0, skip it\n        if str(n)[i] == '0':\n            continue\n        # If the next digit is 0, swap the digits\n        if str(n)[i+1] == '0':\n            count += 1\n            # Swap the digits\n            n = int(str(n)[:i] + str(n)[i+1] + str(n)[i] + str(n)[i+2:])\n            # If the number is divisible by 25, return the count\n            if n % 25 == 0:\n                return count\n            # If the number is still not divisible by 25, skip the next iteration\n            else:\n                continue\n        # If the next digit is not 0, skip the iteration\n        else:\n            continue\n    # If no moves can be made to obtain a number that is divisible by 25, return -1\n    return -1"
    },
    {
        "number": 4029,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return \"0\"\n    moves = 0\n    while n % 25!= 0:\n        n = swap_adjacent_digits(n)\n        moves += 1\n        if n < 10:\n            return -1\n    return str(moves)\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = 0\n    while n % 25!= 0:\n        for i in range(len(str(n))-1):\n            if str(n)[i] == '0' or str(n)[i+1] == '0':\n                continue\n            if int(str(n)[i]) % 2!= int(str(n)[i+1]) % 2:\n                temp = str(n)[:i] + str(n)[i+1] + str(n)[i] + str(n)[i+2:]\n                if temp.startswith('0'):\n                    continue\n                n = int(temp)\n                moves += 1\n                break\n        else:\n            return -1\n    return moves\n"
    },
    {
        "number": 4029,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return \"0\"\n    if n < 25:\n        return \"-1\"\n    count = 0\n    while n % 25!= 0:\n        temp = n\n        for i in range(len(str(n))-1):\n            if str(n)[i]!= \"0\" and str(n)[i+1]!= \"0\":\n                n = n[:i] + str(n)[i+1] + str(n)[i] + n[i+2:]\n                break\n        if n == temp:\n            return \"-1\"\n        count += 1\n    return str(count)"
    },
    {
        "number": 4030,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    s = stdin.readline().strip()\n    colors = set(range(1, n+1))\n    res = 0\n    while True:\n        colors_dict = {}\n        for i in range(n):\n            colors_dict[s[i]] = min(colors)\n        for c in colors:\n            if c in colors_dict.values():\n                res += 1\n        if res == n:\n            break\n        res = n\n    return '\\n'.join([str(res)] + [str(colors_dict[s[i]]) for i in range(n)])\n\nprint(solution(\"9\\nabacbecfd\"))\nprint(solution(\"8\\naaabbcbb\"))\nprint(solution(\"7\\nabcdedc\"))\nprint(solution(\"5\\nabcde\"))"
    },
    {
        "number": 4030,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    # Create a dictionary to count the frequency of each character in the string\n    char_freq = {}\n    for char in s:\n        char_freq[char] = char_freq.get(char, 0) + 1\n    \n    # Calculate the minimum number of colors required\n    res = len(char_freq)\n    if res == 1:\n        return str(res) + '\\n' +''.join(str(i+1) for i in range(n))\n    elif res == n:\n        return str(res) + '\\n' +''.join(str(i+1) for i in range(n-1, -1, -1))\n    \n    # Initialize the colors array with zeros\n    colors = [0] * n\n    \n    # Assign the colors to the characters in decreasing order of their frequency\n    for char in sorted(char_freq, key=lambda x: -char_freq[x]):\n        color = res - len(colors)\n        colors[s.index(char)] = color\n    \n    # Check if the colors array is already sorted\n    if all(colors[i] <= colors[i+1] for i in range(n-1)):\n        return str(res) + '\\n' +''.join(str(colors[i]) for i in range(n))\n    \n    # Perform swaps to sort the colors array\n    swaps = 0\n    for i in range(n-1):\n        if colors[i]!= colors[i+1]:\n            colors[i], colors[i+1] = colors[i+1], colors[i]\n            swaps += 1\n            if all(colors[j] <= colors[j+1] for j in range(n-1-i)):\n                return str(res) + '\\n' +''.join(str(colors[j]) for j in range(n))\n    \n    # If the colors array cannot be sorted in less than n-1 swaps, it is impossible to sort it\n    return 'impossible'"
    },
    {
        "number": 4030,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    c = [1] * n\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            c[i] = c[i-1]\n    res = 1\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            continue\n        c[i] = c[i-1] + 1\n        res = max(res, c[i])\n    ans = [c[i] for i in range(n)]\n    print(res)\n    print(*ans)"
    },
    {
        "number": 4030,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    color = [0] * n\n    res = 0\n    for i in range(n):\n        if color[i] == 0:\n            res += 1\n            color[i] = res\n        for j in range(i+1, n):\n            if s[i] > s[j] and color[i]!= color[j]:\n                color[j] = color[i]\n                res -= 1\n    print(res)\n    print(\" \".join(map(str, color)))"
    },
    {
        "number": 4030,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    \n    from collections import Counter\n    cnt = Counter(s)\n    colors = len(cnt)\n    if colors >= n:\n        return str(colors) + '\\n' +''.join(map(str, range(colors)))\n    \n    res = colors\n    coloring = {}\n    for c in s:\n        if c not in coloring:\n            coloring[c] = cnt[c]\n            cnt[c] = 0\n            colors += 1\n        else:\n            cnt[c] -= 1\n        while cnt[c] < 0:\n            color = coloring[c]\n            coloring[c] += 1\n            cnt[c] += 1\n            res += 1\n            for i in range(n):\n                if s[i] == c and color!= coloring[s[i]]:\n                    res += 1\n                    s = s[:i] + s[i+1:] + s[i]\n                    break\n    \n    return str(res) + '\\n' +''.join(map(str, coloring.values()))"
    },
    {
        "number": 4030,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    res = 1\n    c = [1] * n\n    for i in range(n):\n        if i > 0 and s[i] < s[i-1] and c[i] == c[i-1]:\n            c[i] += 1\n            res += 1\n        if i < n-1 and s[i] > s[i+1] and c[i] == c[i+1]:\n            c[i] += 1\n            res += 1\n    print(res)\n    print(' '.join(map(str, c)))"
    },
    {
        "number": 4030,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    # Step 1: Count occurrences of each character\n    counts = {}\n    for c in s:\n        if c not in counts:\n            counts[c] = 0\n        counts[c] += 1\n\n    # Step 2: Find the minimum number of colors\n    colors = set()\n    for count in counts.values():\n        colors.add(count)\n    res = len(colors)\n\n    # Step 3: Assign colors to each character\n    colors_dict = {}\n    color_num = 1\n    for c in s:\n        if c not in colors_dict:\n            colors_dict[c] = color_num\n            color_num += 1\n        if color_num > res:\n            break\n\n    # Step 4: Print the coloring\n    c = [colors_dict[c] for c in s]\n    return res,''.join([str(color) for color in c])\n"
    },
    {
        "number": 4030,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    colors = [0] * n\n    for i in range(n):\n        if colors[i] == 0:\n            colors[i] = 1\n            for j in range(i+1, n):\n                if s[i] > s[j]:\n                    colors[j] = colors[i] + 1\n    res = max(colors)\n    if res == 1:\n        return str(res) + '\\n' +''.join(map(str, colors))\n    for i in range(n-1):\n        if colors[i]!= colors[i+1]:\n            colors[i] = colors[i+1]\n            for j in range(i+1, n):\n                if colors[j] == colors[i+1]:\n                    colors[j] = colors[i]\n                    break\n    res = max(colors)\n    return str(res) + '\\n' +''.join(map(str, colors))\n\nprint(solution('9\\nabacbecfd'))\nprint(solution('8\\naaabbcbb'))\nprint(solution('7\\nabcdedc'))\nprint(solution('5\\nabcde'))<|im_sep|>"
    },
    {
        "number": 4030,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    # create a set to store the distinct colors\n    colors = set()\n\n    # create a dictionary to store the index of each character and its corresponding color\n    char_to_color = {}\n\n    # create a dictionary to store the color of each character\n    color_counts = {}\n\n    # iterate over the string\n    for i, c in enumerate(s):\n        # if the character is already colored, continue\n        if c in char_to_color:\n            continue\n\n        # if the color of the character is already used, add it to the set of distinct colors\n        if color_counts.get(c, 0) > 0:\n            colors.add(c)\n            continue\n\n        # if the color of the character is not used, assign a new color to it\n        colors.add(c)\n        char_to_color[c] = colors.index(c) + 1\n        color_counts[c] = 1\n\n    # if the length of the set of distinct colors is 1, return 1 as the minimum number of colors\n    if len(colors) == 1:\n        res = 1\n        coloring = [1] * n\n    else:\n        res = len(colors)\n        coloring = [-1] * n\n\n        # iterate over the string again\n        for i, c in enumerate(s):\n            # assign the color of the character to the coloring array\n            coloring[i] = char_to_color[c]\n\n    # print the result\n    print(res)\n    print(*coloring)\n\n    return \"\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, s = stdin.strip().split()\n    n = int(n)\n    s = list(s)\n    \n    # Count frequency of each letter\n    freq = {}\n    for c in s:\n        freq[c] = freq.get(c, 0) + 1\n    \n    # Sort letters by frequency\n    freq = sorted(freq.items(), key=lambda x: x[1])\n    \n    # Get minimum number of colors\n    res = 1\n    for i in range(len(freq)):\n        if i == 0 or freq[i][1] > freq[i-1][1]:\n            res += 1\n    \n    # Get coloring\n    coloring = [0] * n\n    for i, c in enumerate(s):\n        for j in range(res):\n            if freq[j][0] == c:\n                coloring[i] = j + 1\n                break\n    \n    # Restore original order by swapping neighboring characters of same color\n    for i in range(len(s)-1):\n        if coloring[i]!= coloring[i+1]:\n            for j in range(i+1, len(s)):\n                if coloring[j] == coloring[i]:\n                    s[i], s[j] = s[j], s[i]\n                    break\n    \n    return \"{}\\n{}\".format(res, \" \".join(map(str, coloring)))"
    },
    {
        "number": 4031,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    strings = stdin.split('\\n')[1:n+1]\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if not all(strings[j] in s[i:] for s in strings):\n                return \"NO\"\n    return \"YES\\n\"+\"\\n\".join(strings)\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = stdin.readlines()\n\n    def is_substring(s1, s2):\n        i, j = 0, 0\n        while i < len(s1) and j < len(s2):\n            if s1[i] == s2[j]:\n                i += 1\n            j += 1\n        return i == len(s1)\n\n    for i in range(n):\n        if not is_substring(strings[i], strings[:i] + strings[i+1:]):\n            return \"NO\"\n    \n    return \"YES\\n\" + \"\\n\".join(sorted(strings))"
    },
    {
        "number": 4031,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    \n    # check for non-unique strings\n    if len(strings)!= len(set(strings)):\n        return \"NO\"\n    \n    # check for substrings\n    for i in range(n):\n        for j in range(i+1, n):\n            if not set(strings[i]).issubset(strings[j]):\n                return \"NO\"\n    \n    # print strings in required order\n    print(\"YES\")\n    print(*strings)\n    return \"\""
    },
    {
        "number": 4031,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = []\n    for _ in range(n):\n        arr.append(stdin.readline().strip())\n    k = 0\n    while k < len(arr):\n        if all(arr[j] not in arr[k] for j in range(k)):\n            k += 1\n        else:\n            arr[k], arr[0] = arr[0], arr[k]\n            k = 0\n    if all(arr[j] not in arr[k] for j in range(k+1, n)):\n        return \"YES\\n\" + \"\\n\".join(arr)\n    else:\n        return \"NO\""
    },
    {
        "number": 4031,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = []\n    for i in range(n):\n        strings.append(stdin.readline().strip())\n\n    flag = False\n    for i in range(n):\n        for j in range(i+1, n):\n            if not strings[j].startswith(strings[i]):\n                flag = True\n                break\n        if flag:\n            break\n    if flag:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + \"\\n\".join(strings)"
    },
    {
        "number": 4031,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(n)]\n\n    # check if reordering is possible\n    for i in range(n):\n        for j in range(i):\n            if not all(s in strings[i] for s in strings[j]):\n                return \"NO\"\n\n    # reordering is possible\n    return \"YES\\n\" + \"\\n\".join(strings)\n"
    },
    {
        "number": 4031,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    def is_substring(s1: str, s2: str) -> bool:\n        return s1 in s2\n    def is_possible(strings: List[str]) -> bool:\n        for i in range(n):\n            for j in range(i):\n                if not is_substring(strings[i], strings[j]):\n                    return False\n        return True\n    if is_possible(strings):\n        return \"YES\\n\" + '\\n'.join(strings)\n    else:\n        return \"NO\"\n\nstdin = \"\"\"\n5\na\naba\nabacaba\nba\naba\n\"\"\"\n\nprint(solution(stdin)) # Output: \"YES\\na\\nba\\naba\\naba\\nabacaba\""
    },
    {
        "number": 4031,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = [stdin.readline().strip() for i in range(n)]\n    substrings = set()\n    for i in range(n):\n        for j in range(len(strings[i])):\n            for k in range(j, len(strings[i])):\n                substrings.add(strings[i][j:k+1])\n    if len(substrings)!= sum([len(s) for s in strings]):\n        return \"NO\"\n    else:\n        for i in range(n):\n            for j in range(n-i-1):\n                if strings[j] not in substrings:\n                    return \"NO\"\n                substrings.remove(strings[j])\n        return \"YES\\n\" + \"\\n\".join(strings)"
    },
    {
        "number": 4031,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = []\n    for i in range(n):\n        strings.append(stdin.readline().strip())\n    for i in range(n):\n        for j in range(i):\n            if not any(strings[i] in s for s in strings[j+1:]):\n                return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(strings)"
    },
    {
        "number": 4031,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = []\n    for i in range(n):\n        string = stdin.readline().strip()\n        strings.append(string)\n\n    strings.sort()\n\n    for i in range(n):\n        for j in range(i):\n            if strings[i] in strings[j]:\n                return \"NO\"\n\n    return \"YES\\n\" + \"\\n\".join(strings)"
    },
    {
        "number": 4032,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    left = 0\n    right = n - 1\n    solved = 0\n    while left <= right:\n        if a[left] <= k:\n            left += 1\n            solved += 1\n        elif a[right] <= k:\n            right -= 1\n            solved += 1\n        else:\n            break\n    return str(solved)"
    },
    {
        "number": 4032,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    \n    left = 0\n    right = n-1\n    count = 0\n    \n    while left <= right:\n        if a[left] <= k and a[right] <= k:\n            count += 1\n            left += 1\n            right -= 1\n        elif a[left] <= k:\n            left += 1\n        elif a[right] <= k:\n            right -= 1\n            \n    return count"
    },
    {
        "number": 4032,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    left, right = 0, n - 1\n    count = 0\n    while left <= right:\n        if nums[left] <= k:\n            left += 1\n            count += 1\n            if count == k:\n                break\n        if nums[right] <= k:\n            right -= 1\n            count += 1\n            if count == k:\n                break\n    return count"
    },
    {
        "number": 4032,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l = 0\n    r = n - 1\n    count = 0\n    while l <= r:\n        if a[l] > k:\n            l += 1\n        elif a[r] > k:\n            r -= 1\n        else:\n            count += 1\n            l += 1\n            r -= 1\n    return str(count)\n\nprint(solution(\"8 4\\n4 2 3 1 5 1 6 4\"))\nprint(solution(\"5 2\\n3 1 2 1 3\"))\nprint(solution(\"5 100\\n12 34 55 43 21\"))"
    },
    {
        "number": 4032,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    left = 0\n    right = n - 1\n    count = 0\n\n    while left <= right:\n        if a[left] <= k and a[right] <= k:\n            count += 1\n            if left == right:\n                break\n            left += 1\n            right -= 1\n        elif a[left] > k:\n            left += 1\n        else:\n            right -= 1\n\n    return count\n"
    },
    {
        "number": 4032,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    left, right = 0, n - 1\n    count = 0\n    while left <= right:\n        if a[left] <= k:\n            count += 1\n            left += 1\n        if a[right] <= k:\n            count += 1\n            right -= 1\n        if left > right:\n            break\n    return str(count)\n\nprint(solution(\"8 4\\n4 2 3 1 5 1 6 4\")) # Output: 5\nprint(solution(\"5 2\\n3 1 2 1 3\")) # Output: 0\nprint(solution(\"5 100\\n12 34 55 43 21\")) # Output: 5"
    },
    {
        "number": 4032,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    left, right = 0, len(arr) - 1\n    solved = 0\n    while left <= right:\n        if arr[left] <= k and arr[right] <= k:\n            solved += 1\n            left += 1\n            right -= 1\n        elif arr[left] <= k:\n            left += 1\n        elif arr[right] <= k:\n            right -= 1\n    return solved"
    },
    {
        "number": 4032,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    left, right = 0, n-1\n    count = 0\n    \n    while left <= right:\n        if arr[left] <= k:\n            count += 1\n            left += 1\n        elif arr[right] <= k:\n            count += 1\n            right -= 1\n        else:\n            break\n    \n    print(count)\n    \n    return str(count)"
    },
    {
        "number": 4032,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    left = right = 0\n    count = 0\n    while left < n and right < n:\n        if nums[left] <= k:\n            count += 1\n            left += 1\n        if nums[right] <= k:\n            count += 1\n            right += 1\n        if nums[left] > k and nums[right] > k:\n            break\n    return count\n\nstdin = '8 4\\n4 2 3 1 5 1 6 4'\nprint(solution(stdin))\n"
    },
    {
        "number": 4032,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    left = 0\n    right = n-1\n    count = 0\n    while left <= right:\n        if a[left] <= k and a[right] <= k:\n            count += 1\n            if left == right:\n                left += 1\n                right -= 1\n            else:\n                left += 1\n        elif a[left] <= k:\n            count += 1\n            left += 1\n        elif a[right] <= k:\n            count += 1\n            right -= 1\n        else:\n            return count\n    return count\n\nstdin = \"8 4\\n4 2 3 1 5 1 6 4\"\nprint(solution(stdin)) # Output: 5\n\nstdin = \"5 2\\n3 1 2 1 3\"\nprint(solution(stdin)) # Output: 0\n\nstdin = \"5 100\\n12 34 55 43 21\"\nprint(solution(stdin)) # Output: 5<|im_sep|>"
    },
    {
        "number": 4033,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a + b < 4:\n        return 'impossible'\n    if a == 0 or b == 0:\n        return a + b\n    \n    total_tiles = 2 * a + 2 * b\n    for i in range(1, a + 1):\n        if total_tiles - i - (a - i) - (b - i) > 0 and (total_tiles - i - (a - i) - (b - i)) % 2 == 0:\n            return (total_tiles - i - (a - i) - (b - i)) // 2\n    \n    return 'impossible'\n\nprint(solution(input()))"
    },
    {
        "number": 4033,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return min(2*a + 2*b + 4*a*b + 1, 2*(a+b) + 4*(a+b)*a*b + 1)"
    },
    {
        "number": 4033,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return max(4*a + 4*b, 2*(a+b))\n\nprint(solution(\"4 4\")) # Output: 12"
    },
    {
        "number": 4033,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return max(a+b, (a+b+1)//2)\n\nWe can start by finding the maximum perimeter we can obtain for the given input. This is the minimum perimeter required for a rectangle with at least $a$ red and $b$ blue tiles. We can calculate this as follows:\n\n$$\\text{perimeter} = 2(a+b) + \\begin{cases}\na, & \\text{if } a \\ge b \\\\\nb, & \\text{otherwise}\n\\end{cases}$$\n\nWe can use this formula to calculate the perimeter of any rectangle with at least $a+b$ tiles and one side of length at least $a+b$.\n\nNext, we can consider the case where $a+b$ is odd. In this case, we can't make a rectangle with sides $a$ and $b$, so we can either color the tiles using one marker or the other. To find the minimal perimeter, we take the minimum of the perimeters for the two colorings:\n\n$$\\text{perimeter}_\\text{red} = \\text{perimeter} + \\frac{a+b}{2} \\\\\n\\text{perimeter}_\\text{blue} = \\text{perimeter} - \\frac{a+b}{2}$$\n\nIn this case, the red marker will color $a+b/2$ tiles and the blue marker will color $a+b/2$ tiles, giving us a perimeter of $\\text{perimeter}_\\text{red} + \\text{perimeter}_\\text{blue}$.\n\nFinally, if $a+b$ is even, we can't choose the markers to make a rectangle with sides $a$ and $b$, so we can use either marker on at least one tile to make a rectangle with sides $a$ and $b$. To find the minimal perimeter, we take the minimum of the perimeters for the four colorings:\n\n$$\\text{perimeter}_\\text{both} = \\text{perimeter} + \\frac{a+b}{2} \\\\\n\\text{perimeter}_\\text{red} = \\text{perimeter} + \\frac{a}{2} \\\\\n\\text{perimeter}_\\text{blue} = \\text{perimeter} + \\frac{b}{2} \\\\\n\\text{perimeter}_\\text{red + blue} = \\text{perimeter} - \\frac{a+b}{2}$$\n\nIn this case, the red marker will color $a/2$ tiles and the blue marker will color $b/2$ tiles, giving us a perimeter of $\\text{perimeter}_\\text{both} - \\text{perimeter}_\\text{red + blue}$.\n\nWe can use this formula to calculate the perimeter of any rectangle with sides of length at least $a$ and $b$."
    },
    {
        "number": 4033,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    max_len = min(a, b) * 2 + 1\n    red = [True] * a + [False] * (max_len - a)\n    blue = [False] * b + [True] * (max_len - b)\n    red_len = sum(red)\n    blue_len = max_len - red_len\n    cnt = 0\n    res = float('inf')\n    for i in range(max_len):\n        if i < red_len:\n            cnt += red[i]\n        if cnt == a:\n            res = min(res, i + blue_len)\n        cnt += blue[i]\n    return res\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4033,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return (a+b)*2-a-b"
    },
    {
        "number": 4033,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a+b%2==1:\n        return \"No solution\"\n    if a==0 or b==0:\n        return \"1\"\n    min_perimeter = a+b\n    if a%2==1:\n        if b%2==1:\n            min_perimeter+=2\n        else:\n            min_perimeter+=1\n    else:\n        if b%2==1:\n            min_perimeter+=1\n        else:\n            min_perimeter+=2\n    return str(min_perimeter)"
    },
    {
        "number": 4033,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    # First, we try all possible colorings.\n    # We can color at most a+b tiles with one color.\n    # So we can have at most a+b red tiles and at most a+b blue tiles.\n    # We can choose the color of the first tile to be red, then for each subsequent tile,\n    # we can choose between red and blue, but we can't use the marker of any color on the previous tile.\n    # This gives us a total of 2^(a+b) possible colorings.\n    # We will try all of them and keep track of the ones that form a rectangle with the required number of tiles.\n    # If we find a coloring with the required number of tiles, we will return its perimeter.\n\n    result = float('inf')\n    for i in range(2**a):\n        # The red tiles are the first a bits of i.\n        # The blue tiles are the remaining bits of i.\n        red = bin(i)[2:].zfill(a).count('1')\n        blue = bin(i)[2:].zfill(a).count('0')\n        if red + blue!= a + b:\n            continue\n        if red == 0 or blue == 0:\n            continue\n\n        # Now we will try all possible colorings of the remaining tiles.\n        # We can have at most b-red tiles and at most a-blue tiles.\n        # We can choose the color of the first tile to be blue, then for each subsequent tile,\n        # we can choose between red and blue, but we can't use the marker of any color on the previous tile.\n        # This gives us a total of 2^(b-red+a-blue) possible colorings.\n        # We will try all of them and keep track of the ones that form a rectangle with the required number of tiles.\n        # If we find a coloring with the required number of tiles, we will update the result if its perimeter is smaller.\n\n        for j in range(2**(b-red+a-blue)):\n            # The red tiles are the first (b-red) bits of j, and the remaining bits are the first (a-blue) bits of i.\n            # The blue tiles are the remaining bits of j.\n            red_remaining = bin(j)[2:].zfill(b-red).count('1')\n            blue_remaining = bin(j)[2:].zfill(b-red).count('0')\n            if red_remaining + blue_remaining!= b - red + a - blue:\n                continue\n\n            # Now we will try all possible colorings of the remaining tiles.\n            # We can have at most blue_remaining-red_remaining tiles.\n            # We can choose the color of the first tile to be red, then for each subsequent tile,\n            # we can choose between red and blue, but we can't use the marker of any color on the previous tile.\n            # This gives us a total of 2^(blue_remaining-red_remaining) possible colorings.\n            # We will try all of them and keep track of the ones that form a rectangle with the required number of tiles.\n            # If we find a coloring with the required number of tiles, we will update the result if its perimeter is smaller.\n\n            for k in range(2**(blue_remaining-red_remaining)):\n                # The red tiles are the first (blue_remaining-red_remaining) bits of k, and the remaining bits are the first red_remaining bits of j.\n                # The blue tiles are the remaining bits of k.\n                red_remaining_remaining = bin(k)[2:].zfill(blue_remaining-red_remaining).count('1')\n                blue_remaining_remaining = bin(k)[2:].zfill(blue_remaining-red_remaining).count('0')\n                if red_remaining_remaining + blue_remaining_remaining!= blue_remaining - red_remaining:\n                    continue\n\n                # Now we will try all possible colorings of the remaining tiles.\n                # We can have at most a-red_remaining_remaining tiles.\n                # We can choose the color of the first tile to be blue, then for each subsequent tile,\n                # we can choose between red and blue, but we can't use the marker of any color on the previous tile.\n                # This gives us a total of 2^(a-red_remaining_remaining) possible colorings.\n                # We will try all of them and keep track of the ones that form a rectangle with the required number of tiles.\n                # If we find a coloring with the required number of tiles, we will update the result if its perimeter is smaller.\n\n                for l in range(2**(a-red_remaining_"
    },
    {
        "number": 4033,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    # Check if there is a solution\n    if a + b > 2 * (a + b - 1):\n        return \"There is no solution\"\n\n    # Start with a square\n    side = 1\n    perimeter = 4\n\n    while True:\n        # Check if we have enough tiles for a rectangle\n        if a <= side * (side - 1) + (side - 1) // 2 and b <= side * (side - 1) + (side - 1) // 2:\n            return perimeter\n\n        # Check if we need more tiles\n        if a > side * (side - 1) + (side - 1) // 2:\n            a -= side * (side - 1) + (side - 1) // 2\n            perimeter += 4\n\n        if b > side * (side - 1) + (side - 1) // 2:\n            b -= side * (side - 1) + (side - 1) // 2\n            perimeter += 4\n\n        # Increase the size of the square\n        side += 1\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4033,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    n = a + b\n    if n % 2 == 1:\n        return \"-1\"\n    m = n // 2\n    if a > m or b > m:\n        return \"-1\"\n    if a == 0 and b == 0:\n        return \"2\"\n    return str((m + 1) * 2)\n\nassert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\""
    },
    {
        "number": 4034,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    coloring = ['0'] * n\n    \n    for i in range(n):\n        if coloring[i] == '0':\n            coloring[i] = '1'\n            if i + 1 < n and coloring[i + 1] == '1':\n                return 'NO'\n            if i - 1 >= 0 and coloring[i - 1] == '1':\n                return 'NO'\n        else:\n            coloring[i] = '0'\n            if i + 1 < n and coloring[i + 1] == '0':\n                return 'NO'\n            if i - 1 >= 0 and coloring[i - 1] == '0':\n                return 'NO'\n    \n    return 'YES\\n' + ''.join(coloring)\n    \n\nstdin = \"\"\"\n9\nabacbecfd\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"\n8\naaabbcbb\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"\n7\nabcdedc\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"\n5\nabcde\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 4034,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    # Check if the given string is already sorted\n    if s == s[::-1]:\n        return \"NO\"\n\n    # Define the possible colorings\n    colorings = [''.join([str(i % 2) for i in range(n)]), ''.join([str(i % 2) for i in range(n-1, -1, -1)])]\n\n    # Check if any coloring works\n    for coloring in colorings:\n        # Check if the coloring works\n        if sorted(coloring)!= sorted(coloring[::-1]):\n            continue\n\n        # Check if the coloring can make the string sorted\n        if ''.join([s[i] for i in range(n) if coloring[i] == '0']) == ''.join(sorted(s)):\n            return \"YES\\n\" + coloring\n\n    # If no coloring works, return NO\n    return \"NO\""
    },
    {
        "number": 4034,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    colors = ['0' if s[i] == s[i-1] else '1' for i in range(1, n)]\n    if '1' in colors:\n        return \"NO\"\n    if ''.join(colors) == '0' * n:\n        return \"YES\\n\" + '0' * n\n    for i in range(n-1):\n        if colors[i]!= colors[i+1]:\n            colors[i], colors[i+1] = colors[i+1], colors[i]\n            if ''.join(colors) == '0' * n:\n                return \"YES\\n\" + ''.join(colors)\n    return \"NO\""
    },
    {
        "number": 4034,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    if len(set(s))!= n:\n        return \"NO\\n\"\n\n    if s == ''.join(sorted(s)):\n        return \"YES\\n\" + '0' * n\n\n    return \"YES\\n\" + '0' * (n//2) + '1' * (n//2)"
    },
    {
        "number": 4034,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    \n    if sorted(s)!= list(s):\n        return \"NO\\n\"\n    \n    colors = [0] * n\n    for i in range(1, n):\n        if s[i]!= s[i-1] and colors[i] == colors[i-1]:\n            return \"NO\\n\"\n        elif s[i]!= s[i-1]:\n            colors[i] = 1 - colors[i-1]\n    \n    return \"YES\\n\" + \"\".join(str(c) for c in colors)"
    },
    {
        "number": 4034,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    # Check if we can color the string so that it can become sorted by some sequence of swaps\n    count_0 = 0\n    count_1 = 0\n    for i in range(n):\n        if s[i] == 'a':\n            count_0 += 1\n        elif s[i] == 'b':\n            count_1 += 1\n    if count_0 > 1 or count_1 > 1:\n        return \"NO\\n\"\n\n    # Color the string\n    colors = [0] * n\n    for i in range(n):\n        if s[i] == 'a':\n            colors[i] = 0\n        elif s[i] == 'b':\n            colors[i] = 1\n\n    # Check if the string is already sorted\n    for i in range(n-1):\n        if s[i] > s[i+1] and colors[i] == colors[i+1]:\n            return \"NO\\n\"\n\n    # Print the coloring\n    return \"YES\\n\" + \"\".join(str(x) for x in colors)\n"
    },
    {
        "number": 4034,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    # check if it is possible to color the string\n    color = s[0]\n    for i in range(1, n):\n        if s[i] < color:\n            return \"NO\"\n        color = s[i]\n        \n    # check if it is possible to make the string sorted by swapping\n    count = 0\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            count += 1\n            if count > 1:\n                return \"NO\"\n            j = i + 1\n            while j < n and s[i] > s[j]:\n                j += 1\n            if j == n:\n                return \"NO\"\n            s = s[:i] + s[j] + s[i + 1:j] + s[i] + s[j + 1:]\n                \n    # check if it is possible to make the string sorted by reversing\n    count = 0\n    for i in range(n // 2):\n        if s[i] > s[n - i - 1]:\n            count += 1\n            if count > 1:\n                return \"NO\"\n    if count == 0:\n        return \"YES\\n\" + s\n    \n    # swap first two characters\n    s = s[::-1]\n    \n    # check if it is possible to make the string sorted by swapping\n    count = 0\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            count += 1\n            if count > 1:\n                return \"NO\"\n            j = i + 1\n            while j < n and s[i] > s[j]:\n                j += 1\n            if j == n:\n                return \"NO\"\n            s = s[:i] + s[j] + s[i + 1:j] + s[i] + s[j + 1:]\n                \n    # check if it is possible to make the string sorted by reversing\n    count = 0\n    for i in range(n // 2):\n        if s[i] > s[n - i - 1]:\n            count += 1\n            if count > 1:\n                return \"NO\"\n    if count == 0:\n        return \"YES\\n\" + s\n    \n    return \"NO\""
    },
    {
        "number": 4034,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    count0 = 0\n    count1 = 0\n    for i in range(n):\n        if s[i] == 'a' or s[i] == 'c' or s[i] == 'e' or s[i] == 'g' or s[i] == 'i' or s[i] == 'k' or s[i] =='m' or s[i] == 'o' or s[i] == 'q' or s[i] =='s' or s[i] == 'u' or s[i] == 'w' or s[i] == 'y':\n            count0 += 1\n        else:\n            count1 += 1\n    if count0 == 0 or count1 == 0:\n        return \"NO\\n\" + s\n    else:\n        ans = \"\"\n        for i in range(n):\n            if s[i] == 'a' or s[i] == 'c' or s[i] == 'e' or s[i] == 'g' or s[i] == 'i' or s[i] == 'k' or s[i] =='m' or s[i] == 'o' or s[i] == 'q' or s[i] =='s' or s[i] == 'u' or s[i] == 'w' or s[i] == 'y':\n                ans += '0'\n            else:\n                ans += '1'\n        return \"YES\\n\" + ans"
    },
    {
        "number": 4034,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    color = [0] * n\n    can_sort = True\n    \n    # Check if each character can be colored differently\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            can_sort = False\n            break\n        \n        if s[i] < s[i-1]:\n            color[i] = 1\n            if s[i-1] < s[i-2]:\n                can_sort = False\n                break\n    \n    # Check if swapping any two neighboring characters can sort the string\n    if can_sort:\n        for i in range(n-1):\n            if color[i]!= color[i+1]:\n                color[i], color[i+1] = color[i+1], color[i]\n                if s[i] > s[i+1] and color[i] == color[i+1]:\n                    can_sort = False\n                    break\n    \n    # Print the result\n    if can_sort:\n        print(\"YES\")\n        print(\"\".join(map(str, color)))\n    else:\n        print(\"NO\")\n    \n    return \"\""
    },
    {
        "number": 4034,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    colors = ['']*n\n    swaps = []\n    for i in range(n):\n        if i > 0 and colors[i-1] == colors[i] and s[i] < s[i-1]:\n            swaps.append((i-1, i))\n            colors[i] = colors[i-1]\n        elif i < n-1 and colors[i+1] == colors[i] and s[i] > s[i+1]:\n            swaps.append((i, i+1))\n            colors[i] = colors[i+1]\n\n    if len(swaps) == 0:\n        return \"YES\\n\" + ''.join([str(int(c == '1')) for c in colors])\n    else:\n        return \"NO\\n\"\n\nstdin = \"\"\"\n9\nabacbecfd\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"\n8\naaabbcbb\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"\n7\nabcdedc\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"\n5\nabcde\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 4035,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    prices = list(range(A, B+1))\n    for p in prices:\n        if (p * 0.08) % 1 == 0 and (p * 0.1) % 1 == 0:\n            return str(p)\n    return '-1'\n\ndef"
    },
    {
        "number": 4035,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    # check if a is greater than or equal to b\n    if a < b:\n        a, b = b, a\n\n    # initialize variables\n    tax_8 = 0\n    tax_10 = 0\n    price = a\n\n    # calculate consumption tax\n    tax_8 = a * 0.08\n    tax_10 = a * 0.1\n    tax = min(tax_8, tax_10)\n\n    # calculate price after tax\n    price = a - tax\n\n    # check if price is positive\n    if price <= 0:\n        return \"-1\"\n\n    # print lowest price that satisfies condition\n    return str(price)\n"
    },
    {
        "number": 4035,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    prices = sorted([i for i in range(A, B+1) if (i*(8/100))%1 == 0 or (i*(10/100))%1 == 0])\n    if len(prices) == 0:\n        return \"-1\"\n    return str(prices[0])"
    },
    {
        "number": 4035,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    prices = set()\n    for price in range(1, 100001):\n        if all(price >= x + (price - x) * 0.08 and price >= x + (price - x) * 0.1 for x in range(A, B+1)):\n            prices.add(price)\n    if len(prices) == 0:\n        return \"-1\"\n    else:\n        return str(min(prices))"
    },
    {
        "number": 4035,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    taxes = [0.08, 0.1]\n    prices = [i for i in range(A, B+1)]\n    for price in prices:\n        tax_sum = 0\n        for tax in taxes:\n            tax_sum += int(price * tax)\n        if tax_sum == A or tax_sum == B:\n            return str(price)\n    return '-1'\n\nprint(solution(\"2 2\")) # expected output: 25"
    },
    {
        "number": 4035,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    a, b = map(int, stdin.strip().split())\n\n    # Define constants\n    TAX_RATE_8 = 0.08\n    TAX_RATE_10 = 0.10\n    TAX_8 = 12\n    TAX_10 = 20\n\n    # Compute minimum price\n    min_price = None\n    for price in range(a, b+1):\n        tax_8 = price * TAX_RATE_8\n        if tax_8 < TAX_8:\n            tax_8 = TAX_8\n        tax_10 = price * TAX_RATE_10\n        if tax_10 < TAX_10:\n            tax_10 = TAX_10\n        total_tax = tax_8 + tax_10\n        price_after_tax = price - total_tax\n        if min_price is None or price_after_tax < min_price:\n            min_price = price_after_tax\n\n    # Print result\n    if min_price is None:\n        return \"-1\"\n    else:\n        return str(min_price)"
    },
    {
        "number": 4035,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    prices = [i for i in range(1, B+1) if i % A == 0]\n    if not prices:\n        return '-1'\n    else:\n        return str(min(prices))"
    },
    {
        "number": 4035,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    if A > B:\n        A, B = B, A  # swap A and B\n    if A <= 0 or B <= 0:\n        return -1\n    for price in range(A, B+1):\n        if price == 0:\n            continue  # avoid infinite loop\n        if (price * 0.08) // 1 == (price * 0.1) // 1:\n            return str(price)\n    return -1\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4035,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    prices = set()\n    for price in range(1, 101):\n        if all(price >= price - A + 1, price <= price - B + 1):\n            prices.add(price)\n    return str(min(prices) if prices else -1)"
    },
    {
        "number": 4035,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A > B:\n        A, B = B, A\n\n    if A > 100 or B > 100:\n        return -1\n\n    if A == 0:\n        return B\n\n    for p in range(A, B+1):\n        if 8*p // 10 + (p % 10 > 0) == A and 10*p // 10 + (p % 10 > 0) == B:\n            return p\n\n    return -1"
    },
    {
        "number": 4036,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k < 2 or n > 2 * k:\n        return \"NO\"\n    a = [1]\n    for i in range(k-1):\n        a.append(min(2*a[-1], n-sum(a)))\n    if sum(a)!= n:\n        return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 4036,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k = map(int, stdin.split())\n    \n    # Initialize variables\n    a = [1]*k # Initialize a to satisfy condition 1\n    for i in range(k): # Iterate through all days\n        for j in range(i+1, k): # Iterate through days after i\n            if a[i] * 2 <= a[j]: # If condition 2 is satisfied, break\n                break\n            else:\n                a[j] = max(a[j] // 2, 1) # If not, reduce a[j] to satisfy condition 2\n        if a[i] > n: # If condition 3 is not satisfied, break\n            break\n    else: # If all days are successful, print output\n        return \"YES\\n\" + \" \".join(map(str, a))\n    # If all days are not successful, return \"NO\"\n    return \"NO\""
    },
    {
        "number": 4036,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n > k * (2 * k + 1) // 2:\n        return \"NO\"\n    a = [0] * k\n    for i in range(k):\n        a[i] = (n - sum(a[:i]) + k - 1) // k\n    if sum(a)!= n:\n        return \"NO\"\n    for i in range(k - 1):\n        if a[i] >= a[i + 1] or a[i] >= 2 * a[i + 1]:\n            return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 4036,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n:\n        return \"NO\"\n    for i in range(k):\n        if i == 0:\n            a[i] = 1\n        else:\n            a[i] = a[i-1] + 1\n    for i in range(k-1):\n        if a[i] > 2*a[i+1]:\n            return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 4036,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n\n    if k == 1:\n        return \"YES\\n1\"\n\n    # initialize a list a with zeros\n    a = [0] * k\n\n    # fill a with values\n    for i in range(k):\n        if i == 0:\n            a[0] = 1\n        elif a[i-1] <= 2*a[i-1]:\n            a[i] = a[i-1] + 1\n        else:\n            a[i] = 2*a[i-1]\n        if a[i] > n:\n            break\n\n    # check if we found an answer\n    if sum(a) < n:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + \" \".join(map(str, a))\n"
    },
    {
        "number": 4036,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return \"YES\\n\" + str(n)\n    a = [1] * k\n    for i in range(k-1):\n        if a[i] > n // k + 1:\n            return \"NO\"\n        a[i+1] = max(a[i] - 1, n - k * a[i])\n        if a[i+1] < a[i] * 2:\n            return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 4036,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return \"NO\"\n    if n == 1:\n        return \"YES\\n\" + str(1)\n    a = [1] * k\n    a[0] = n // k + 1\n    a[k-1] = a[0]\n    for i in range(1, k-1):\n        a[i] = a[i-1] + a[i]\n        if a[i] > 2 * a[i-1]:\n            a[i] = a[i-1] + a[i] - 1\n        if a[i] > n:\n            a[i] = n\n    return \"YES\\n\" + \" \".join(map(str, a))\n\nstdin = \"26 6\"\nprint(solution(stdin)) # output: YES 1 2 4 5 6 8 \n\nstdin = \"8 3\"\nprint(solution(stdin)) # output: NO \n\nstdin = \"1 1\"\nprint(solution(stdin)) # output: YES 1 \n\nstdin = \"9 4\"\nprint(solution(stdin)) # output: NO "
    },
    {
        "number": 4036,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    if n < k:\n        return \"NO\"\n\n    for i in range(k):\n        a = k // (k-i)\n        b = a - 1\n\n        if a > n or b > n or a + b > 2 * a:\n            return \"NO\"\n\n        n -= a\n\n    return \"YES\\n\" + \" \".join(str(a) for a in [k // (k-i) for i in range(k)])\n\nstdin = \"26 6\"\nprint(solution(stdin))\n\nstdin = \"8 3\"\nprint(solution(stdin))\n\nstdin = \"1 1\"\nprint(solution(stdin))\n\nstdin = \"9 4\"\nprint(solution(stdin))"
    },
    {
        "number": 4036,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [1]*k\n    for i in range(k-1):\n        if a[i] > 2*a[i-1]:\n            a[i+1] = a[i] + 1\n    if sum(a) == n:\n        return \"YES\\n\" + \" \".join(map(str, a))\n    else:\n        return \"NO\\n\"\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n    print(solution(stdin))"
    },
    {
        "number": 4036,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, k = map(int, stdin.split())\n\n    # define some useful functions\n    def check(a):\n        return sum(a) == n and all(i > 0 for i in a) and all(a[i] < a[i+1] <= 2*a[i] for i in range(k-1))\n\n    def next_day(a):\n        return [min(a[i+1], a[i] + (i+1)//2) for i in range(k-1)]\n\n    # try to find a valid array\n    a = [1] * k\n    while not check(a):\n        a = next_day(a)\n        if a[k-1] > n:\n            return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 4037,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, r = map(int, stdin.split())\n    projects = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    # calculate max subset size\n    dp = [0] * (r + 1)\n    for i in range(n):\n        a, b = projects[i]\n        for j in range(r, a - 1, -1):\n            dp[j] = max(dp[j], dp[j - a] + b)\n    return max(dp)"
    },
    {
        "number": 4037,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n\n    dp = [0] * (r + 1)\n    dp[0] = 1\n\n    for i in range(n):\n        new_dp = [0] * (r + 1)\n        for j in range(r + 1):\n            if j >= projects[i][0]:\n                new_dp[j] = max(new_dp[j], dp[j - projects[i][0]] + projects[i][1])\n            if j + projects[i][1] >= 0:\n                new_dp[j + projects[i][1]] = max(new_dp[j + projects[i][1]], dp[j])\n        dp = new_dp\n\n    res = 0\n    for i in range(r + 1):\n        res = max(res, dp[i])\n\n    return str(res)"
    },
    {
        "number": 4037,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    d = list(map(int, stdin.readline().split()))\n    e = list(map(int, stdin.readline().split()))\n    if r < sum(a):\n        return \"0\"\n    dp = [[0] * (r+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(r+1):\n            if j < a[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-a[i-1]] + b[i-1])\n    ans = r\n    for i in range(n-1, -1, -1):\n        if ans >= a[i] and dp[i][ans] >= dp[i+1][ans-a[i]] + b[i]:\n            ans -= a[i]\n    return str(ans)"
    },
    {
        "number": 4037,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.strip().split()))\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    \n    dp = [[0] * (2 * r + 1) for _ in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(2 * r + 1):\n            dp[i][j] = dp[i-1][j]\n            \n            if j >= a[i-1]:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-a[i-1]] + b[i-1])\n            \n            if j >= a[i-1] + b[i-1]:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-a[i-1]-b[i-1]] + 2*b[i-1])\n                \n    return max(dp[-1])\n    \ndef"
    },
    {
        "number": 4037,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, r = map(int, stdin.split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().split())\n        projects.append((a, b))\n\n    # sort projects by decreasing rating required\n    projects = sorted(projects, key=lambda x: x[0], reverse=True)\n\n    # initialize variables\n    i = 0\n    rating = r\n    max_size = 0\n\n    # iterate through projects\n    while i < n:\n        # skip projects that cannot be completed without exceeding rating\n        if rating < projects[i][0]:\n            i += 1\n            continue\n\n        # compute maximum possible size of subset ending at i\n        size = 1\n        j = i + 1\n        while j < n and projects[j][0] <= rating + projects[j][1]:\n            size += 1\n            rating += projects[j][1]\n            j += 1\n        max_size = max(max_size, size)\n\n        # update rating\n        rating += projects[i][1]\n        i += 1\n\n    return str(max_size)"
    },
    {
        "number": 4037,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    dp = [0] * (r + 1)\n    dp[0] = 1\n    ans = 0\n    for i in range(n):\n        for j in range(r, -1, -1):\n            if dp[j] and j + b[i] >= 0:\n                dp[j + b[i]] += dp[j]\n                ans = max(ans, dp[j + b[i]])\n    return ans\n\n\nstdin = \"3 4\\n4 6\\n10 -2\\n8 -1\"\nprint(solution(stdin))  # Output: 3\n\nstdin = \"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\"\nprint(solution(stdin))  # Output: 5\n\nstdin = \"3 2\\n300 -300\\n1 299\\n1 123\"\nprint(solution(stdin))  # Output: 3"
    },
    {
        "number": 4037,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, r = list(map(int, stdin.readline().strip().split()))\n    a_b = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    \n    # initialize dp\n    dp = [[0]*(r+1) for _ in range(n+1)]\n    \n    # fill dp\n    for i in range(1, n+1):\n        for j in range(1, r+1):\n            if j >= a_b[i-1][0]:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-a_b[i-1][0]]+a_b[i-1][1])\n            else:\n                dp[i][j] = dp[i-1][j]\n    \n    # find maximum subset size\n    max_size = 0\n    for i in range(1, r+1):\n        if dp[n][i] >= 0:\n            max_size += 1\n    \n    # return output\n    return str(max_size)"
    },
    {
        "number": 4037,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n\n    projects.sort(key=lambda x: x[0], reverse=True)\n\n    max_size = 0\n    for i in range(n):\n        a, b = projects[i]\n        if r < a:\n            break\n        r += b\n        max_size += 1\n\n    return str(max_size)\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n\n    dp = [[False] * (r+1) for _ in range(n+1)]\n    dp[0][r] = True\n\n    for i in range(1, n+1):\n        for j in range(r+1):\n            if not dp[i-1][j]:\n                continue\n            dp[i][j] = True\n            a, b = projects[i-1]\n            if j >= a:\n                dp[i][j+b] = True\n\n    count = 0\n    for j in range(r, -1, -1):\n        if dp[n][j]:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 4037,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    \n    # can complete all projects\n    if sum(a) <= r:\n        return n\n    \n    # sort projects by decreasing rating required\n    projects = sorted(zip(a, b), reverse=True)\n    \n    # initialize variables\n    rating = r\n    max_size = 0\n    current_size = 0\n    current_rating = rating\n    \n    # iterate over projects\n    for project in projects:\n        required, change = project\n        \n        # check if we have enough rating for the project\n        if current_rating < required:\n            continue\n        \n        # complete the project and update variables\n        current_rating += change\n        current_size += 1\n        rating += change\n        \n        # update maximum size\n        max_size = max(max_size, current_size)\n        \n        # check if we have enough rating for the next project\n        if current_rating < rating:\n            break\n    \n    return max_size"
    },
    {
        "number": 4038,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, nums = map(int, stdin.split())\n\n    # Check if n is valid\n    if n < 1 or n > 20:\n        return \"NO\"\n\n    # Check if nums is valid\n    if len(nums)!= n ** 2:\n        return \"NO\"\n\n    # Check if nums is unique\n    if len(set(nums))!= n ** 2:\n        return \"NO\"\n\n    # Check if nums can be put into a square matrix of n rows and n columns\n    if len(set(nums))!= len(nums):\n        return \"NO\"\n\n    # Check if nums can be put into a palindromic square matrix\n    for i in range(n):\n        for j in range(n):\n            if nums[i*n+j]!= nums[i*n+(n-1-j)]:\n                return \"NO\"\n\n    # Check if nums can be put into a square matrix with even number of rows\n    for i in range(n):\n        if len(set(nums[i*n:i*n+n]))!= n:\n            return \"NO\"\n\n    # Check if nums can be put into a square matrix with even number of columns\n    for j in range(n):\n        if len(set([nums[i*n+j] for i in range(n)]))!= n:\n            return \"NO\"\n\n    # If nums can be put into a square matrix, print \"YES\" and the matrix\n    print(\"YES\")\n    for i in range(n):\n        print(\" \".join(map(str, nums[i*n:(i+1)*n])))\n\n    return \"\""
    },
    {
        "number": 4038,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    numbers = list(map(int, stdin.readline().strip().split()))\n    if len(numbers)!= n ** 2:\n        return \"NO\"\n\n    # check if all numbers are unique\n    if len(set(numbers))!= n ** 2:\n        return \"NO\"\n\n    # check if there is a palindromic matrix\n    def is_palindromic(matrix):\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j]!= matrix[n - 1 - j][i]:\n                    return False\n        return True\n\n    # try all possible matrices\n    for i in range(2 ** (n * n)):\n        matrix = [[0] * n for _ in range(n)]\n        used = [False] * n ** 2\n        for j in range(n * n):\n            row = j // n\n            col = j % n\n            if i & (1 << j):\n                matrix[row][col] = numbers[used.index(False)]\n                used[used.index(False)] = True\n            else:\n                matrix[row][col] = numbers[used.index(True)]\n                used[used.index(True)] = False\n        if is_palindromic(matrix):\n            return \"YES\\n\" + \"\\n\".join(\" \".join(map(str, row)) for row in matrix)\n\n    return \"NO\""
    },
    {
        "number": 4038,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n\n    # create matrix\n    matrix = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            row.append(a[i*n+j])\n        matrix.append(row)\n\n    # check if matrix is palindromic\n    def is_palindromic(matrix):\n        n = len(matrix)\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j]!= matrix[n-1-i][n-1-j]:\n                    return False\n        return True\n\n    # try to reverse rows and columns\n    for i in range(2):\n        matrix = [[matrix[j][i] for j in range(n)] for i in range(n)]\n        if is_palindromic(matrix):\n            break\n\n    # check if matrix is palindromic\n    if is_palindromic(matrix):\n        # print matrix\n        for row in matrix:\n            print(\" \".join([str(x) for x in row]))\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4038,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = map(int, stdin.split())\n    if len(set(nums))!= n**2:\n        return \"NO\"\n    for i in range(n):\n        if nums.count(nums[i])!= n:\n            return \"NO\"\n    for i in range(n):\n        for j in range(i, n):\n            if nums[i*n+j]!= nums[j*n+i]:\n                return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(map(str, nums)) if nums else \"NO\"\n\nprint(solution(input())) # Sample Input"
    },
    {
        "number": 4038,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n % 2 == 1:\n        return \"NO\"\n    nums = stdin.readline().strip().split()\n    for i in range(len(nums)):\n        nums[i] = int(nums[i])\n    nums.sort()\n    if nums[-1] + nums[-2] <= sum(nums[:-2]):\n        return \"NO\"\n    matrix = []\n    row = []\n    for i in range(n):\n        for j in range(n):\n            if len(row) == n:\n                matrix.append(row)\n                row = []\n            row.append(nums[0])\n            nums = nums[1:]\n        if len(row)!= 0:\n            matrix.append(row)\n            row = []\n    for i in range(n):\n        matrix[i].reverse()\n    for i in range(n):\n        for j in range(n):\n            if i == j or j == n-i-1:\n                continue\n            if matrix[i][j]!= matrix[j][i]:\n                return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            print(matrix[i][j], end=\" \")\n        print()\n    return \"YES\"\n\nwith open(\"input.txt\", \"r\") as stdin:\n    stdout = open(\"output.txt\", \"w\")\n    stdout.write(solution(stdin))\n    stdout.close()"
    },
    {
        "number": 4038,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    nums = lines[1].split(' ')\n    nums = [int(num) for num in nums]\n\n    # check if there are duplicates in the input\n    if len(nums)!= len(set(nums)):\n        return \"NO\"\n\n    # check if there is a solution\n    for i in range(1, n**2+1):\n        if i not in nums:\n            return \"NO\"\n\n    # check if the matrix is palindromic after reversing rows\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i*n+j]!= nums[j*n+i]:\n                return \"NO\"\n\n    # check if the matrix is palindromic after reversing columns\n    for i in range(n):\n        for j in range(n//2):\n            if nums[i*n+j]!= nums[i*n+n-j-1]:\n                return \"NO\"\n\n    # print the solution\n    for i in range(n):\n        row = \"\"\n        for j in range(n):\n            row += str(nums[i*n+j]) + \" \"\n        print(row.strip())\n\n    return \"YES\""
    },
    {
        "number": 4038,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    if len(set(arr))!= n**2:\n        return \"NO\"\n    ans = [[0 for i in range(n)] for j in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            ans[i][j] = arr[count]\n            count += 1\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                ans[i][j], ans[j][i] = ans[j][i], ans[i][j]\n    for i in range(n):\n        for j in range(n):\n            if ans[i][j]!= arr[i*n+j]:\n                return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            print(ans[i][j], end=\" \")\n        print()\n    return \"YES\""
    },
    {
        "number": 4038,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    numbers = [int(x) for x in lines[1].split()]\n    \n    if len(set(numbers))!= len(numbers):\n        return \"NO\"\n    \n    matrix = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            if len(row) < n:\n                row.append(numbers.pop(0))\n            else:\n                row.append(0)\n        matrix.append(row)\n    \n    if len(numbers) > 0:\n        return \"NO\"\n    \n    for i in range(n):\n        if matrix[i]!= matrix[n-1-i]:\n            return \"NO\"\n    \n    result = \"\"\n    for row in matrix:\n        result +=''.join(str(x) for x in row) + '\\n'\n    \n    return result[:-1]"
    },
    {
        "number": 4038,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    nums = list(map(int, stdin.split()[1:]))\n    if len(nums)!= n*n:\n        return \"NO\"\n    for i in range(n):\n        if nums[i]!= nums[i+n]:\n            return \"NO\"\n        if nums[i*n]!= nums[i*n+1]:\n            return \"NO\"\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if nums[i*n+j]!= nums[(i+1)*n+j]:\n                return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(\" \".join(map(str, nums[i*n:i*n+n])) for i in range(n))"
    },
    {
        "number": 4038,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    if len(set(a))!= n*n:\n        return \"NO\"\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i*n+j]!= a[j*n+i]:\n                return \"NO\"\n    ans = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            ans[i][j] = a[i*n+j]\n    for i in range(n):\n        ans[i] = ans[i][::-1]\n    for i in range(n):\n        for j in range(n):\n            if ans[i][j]!= a[i*n+j]:\n                return \"NO\"\n    for i in range(n):\n        ans[i] = ans[i][::-1]\n    ans = [[ans[j][i] for j in range(n)] for i in range(n)]\n    for i in range(n):\n        ans[i] = ans[i][::-1]\n    for i in range(n):\n        for j in range(n):\n            if ans[i][j]!= a[i*n+j]:\n                return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(\" \".join(str(x) for x in row) for row in ans)"
    },
    {
        "number": 4039,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = [list(map(int, stdin.split())) for _ in range(n)]\n    projects = sorted(projects, key=lambda x: x[0])\n    dp = [r] + [0] * n\n    for i in range(1, n+1):\n        if dp[i-1] < projects[i-1][0]:\n            return \"NO\"\n        dp[i] = dp[i-1] + projects[i-1][1]\n        if dp[i] < 0:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4039,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n    total_rating = r\n    for a, b in projects:\n        if total_rating < a:\n            return \"NO\"\n        total_rating += b\n        if total_rating < 0:\n            return \"NO\"\n    return \"YES\"\n\nprint(solution(\"3 4\\n4 6\\n10 -2\\n8 -1\")) # Output: YES\nprint(solution(\"3 5\\n4 -5\\n4 -2\\n1 3\")) # Output: YES\nprint(solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\")) # Output: YES\nprint(solution(\"3 10\\n10 0\\n10 -10\\n30 0\")) # Output: NO"
    },
    {
        "number": 4039,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.readline().strip().split())\n    projects = []\n    for _ in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        projects.append((a, b))\n\n    for project in projects:\n        if r < project[0]:\n            return \"NO\"\n        r += project[1]\n        r = max(r, 0)\n\n    return \"YES\""
    },
    {
        "number": 4039,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.strip().split())\n    a_list = []\n    b_list = []\n    for i in range(n):\n        a, b = map(int, stdin.strip().split())\n        a_list.append(a)\n        b_list.append(b)\n    i = 0\n    while i < n:\n        if r < a_list[i]:\n            return \"NO\"\n        r += b_list[i]\n        i += 1\n    return \"YES\""
    },
    {
        "number": 4039,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n    projects.sort(key=lambda x: x[0], reverse=True)\n    current_rating = r\n    for p in projects:\n        if p[0] > current_rating:\n            return \"NO\"\n        current_rating += p[1]\n        if current_rating < 0:\n            return \"NO\"\n    return \"YES\"\n\nstdin = \"3 4\\n4 6\\n10 -2\\n8 -1\"\nprint(solution(stdin))\n\nstdin = \"3 5\\n4 -5\\n4 -2\\n1 3\"\nprint(solution(stdin))\n\nstdin = \"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\"\nprint(solution(stdin))\n\nstdin = \"3 10\\n10 0\\n10 -10\\n30 0\"\nprint(solution(stdin))"
    },
    {
        "number": 4039,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.strip().split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        projects.append((a, b))\n    projects.sort(key=lambda x: -x[0])\n    current_rating = r\n    for a, b in projects:\n        if current_rating < a:\n            return \"NO\"\n        current_rating += b\n        current_rating = max(current_rating, 0)\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n    projects.sort(reverse=True)\n\n    left_rating = r\n    for a, b in projects:\n        if left_rating < a:\n            return \"NO\"\n        left_rating += b\n\n    return \"YES\""
    },
    {
        "number": 4039,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    r = int(lines[1])\n    \n    projects = []\n    for i in range(2, 2+n):\n        a, b = map(int, lines[i].split())\n        projects.append((a, b))\n        \n    if r < 0 or any(a > r for a, b in projects):\n        return \"NO\"\n    \n    dp = [False] * (r+1)\n    dp[0] = True\n    \n    for a, b in projects:\n        for i in range(r, -1, -1):\n            if dp[i]:\n                if i+b >= 0:\n                    dp[i+b] = True\n                if i+a >= 0:\n                    dp[i+a] = True\n                    \n    return \"YES\" if dp[-1] else \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, r = map(int, lines[0].split())\n    projects = [(int(a), int(b)) for a, b in (line.split() for line in lines[1:])]\n    projects.sort(key=lambda x: x[0])  # Sort by required rating in ascending order\n\n    # Check if the order is possible\n    for i in range(len(projects)):\n        if r < projects[i][0]:\n            return \"NO\"\n        r += projects[i][1]\n\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.strip().split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        projects.append((a, b))\n    total_change = 0\n    for a, b in projects:\n        if r < a:\n            return \"NO\"\n        r += b\n        total_change += b\n    if r <= 0 or total_change < 0:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 4040,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[0:3])\n    c = list(map(int, stdin.split()[3:]))\n    if n + 1 <= d:\n        return \"NO\"\n    dp = [[0] * (n + 2) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 2):\n            if j - c[i - 1] >= 0:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - c[i - 1]] + 1)\n            dp[i][j] = max(dp[i][j], dp[i - 1][j])\n    if dp[m][n] < d:\n        return \"NO\"\n    ans = []\n    j = n\n    for i in range(m, 0, -1):\n        if dp[i][j] == dp[i - 1][j]:\n            ans.append(0)\n        else:\n            ans.append(i)\n            j -= c[i - 1]\n    ans.reverse()\n    ans = [0] + ans + [0]\n    return \"YES\\n\" + \" \".join(map(str, ans))"
    },
    {
        "number": 4040,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.readline().split()))\n    \n    if sum(c) > n:\n        return \"NO\"\n    \n    a = [0] * (n + 2)\n    for i in range(m):\n        start = c[i]\n        end = c[i] + d\n        if start > end:\n            end, start = start, end\n        for j in range(start, end):\n            a[j] = i + 1\n            \n    if sum(a[1:-1])!= sum([c[i] for i in range(m)]):\n        return \"NO\"\n    \n    for i in range(1, m):\n        if a[c[i-1] + 1] == 0:\n            return \"NO\"\n        if a[c[i-1] + 1] > a[c[i] + 1]:\n            return \"NO\"\n    \n    return \"YES\\n\" + \" \".join(map(str, a[1:-1]))\n    "
    },
    {
        "number": 4040,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[0:3])\n    c = list(map(int, stdin.split()[3:]))\n    if n < 2 or m < 1 or d < 1:\n        return \"NO\"\n    if sum(c) > n:\n        return \"NO\"\n    a = [0] * (n + 2)\n    for i in range(m):\n        l, r = 0, n + 1\n        while l < r:\n            mid = (l + r) // 2\n            if a[mid] == i:\n                r = mid\n            else:\n                l = mid + 1\n        if r == n + 1:\n            a[r] = i\n        else:\n            a[r+1] = i\n    for i in range(1, m+1):\n        if i == 1:\n            if a[c[0]]!= 1:\n                return \"NO\"\n        else:\n            if a[c[i-1]] == i-1:\n                if a[c[i-1]+c[i-2]]!= i:\n                    return \"NO\"\n            else:\n                return \"NO\"\n    for i in range(1, m+1):\n        if a[n+1-c[i]]!= i:\n            return \"NO\"\n    if a[d] == 0:\n        return \"NO\"\n    jumps = []\n    i = d\n    while i < n + 1:\n        j = i\n        while j < n + 1 and a[j]!= 0:\n            j += 1\n        jumps.append(j - i)\n        i = j\n    ans = \"\"\n    for i in range(n+1):\n        if a[i] == 0:\n            ans += str(0) + \" \"\n        else:\n            ans += str(a[i]) + \" \"\n    return \"YES\\n\" + ans[:-1]"
    },
    {
        "number": 4040,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing input\n    n, m, d = map(int, stdin.splitlines()[0].split())\n    c = list(map(int, stdin.splitlines()[1].split()))\n    # Initialization\n    a = [0] * (n + 2)\n    for i in range(m):\n        a[c[i]] = i + 1\n        a[c[i] + 1] = i + 1\n    # Checking if it is possible to reach n+1\n    if d > n + 1:\n        return \"NO\"\n    # Checking if it is possible to reach n+1 using platforms\n    if not all(x in a for x in [0, n + 1]):\n        return \"NO\"\n    # Checking if it is possible to reach n+1 using platforms\n    for i in range(n + 2):\n        if a[i] == 0:\n            continue\n        if a[i] > a[i + 1] and i + d < n + 2:\n            return \"NO\"\n        if a[i] < a[i + 1] and i - d >= 0:\n            return \"NO\"\n    # Reconstructing the sequence of jumps\n    jumps = []\n    curr = 0\n    while curr!= n + 1:\n        if a[curr] == 0:\n            jumps.append(curr)\n            curr += 1\n        else:\n            jumps.append(curr)\n            curr = c[a[curr] - 1] + 1\n    jumps.append(n + 1)\n    # Reconstructing the sequence of cells\n    a = [0] + jumps[:-1] + [0]\n    # Printing the output\n    return \"YES\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 4040,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.readline().split()))\n\n    dp = [[0] * (n+2) for _ in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if j == 0 or j == n+1:\n                dp[i][j] = 1\n            elif i == 0:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-c[i-1]]\n    \n    if dp[m][n] == 0:\n        return 'NO'\n\n    a = [0] * n\n    j = n\n    for i in range(m, 0, -1):\n        if dp[i-1][j] == dp[i][j] - dp[i-1][j-c[i-1]]:\n            j -= c[i-1]\n        else:\n            a[j-1] = i\n            j -= 1\n\n    print('YES')\n    print(' '.join(map(str, a)))"
    },
    {
        "number": 4040,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[0:3])\n    c = list(map(int, stdin.split()[3:]))\n\n    dp = [[0]*(d+1) for _ in range(n+2)]\n    for i in range(n+2):\n        dp[i][0] = 1\n    for i in range(m):\n        for j in range(n+2):\n            if j-1 >= 0 and j-1-c[i] >= 0:\n                dp[j][1] += dp[j-1][0]\n            if j-1 >= 0 and j-1-c[i] >= 0 and j-1-c[i]-1 >= 0:\n                dp[j][2] += dp[j-1][1]\n            if j-1 >= 0 and j-1-c[i] >= 0 and j-1-c[i]-2 >= 0:\n                dp[j][3] += dp[j-1][2]\n            if j-1 >= 0 and j-1-c[i] >= 0 and j-1-c[i]-3 >= 0:\n                dp[j][4] += dp[j-1][3]\n            if j-1 >= 0 and j-1-c[i] >= 0 and j-1-c[i]-4 >= 0:\n                dp[j][5] += dp[j-1][4]\n            if j-1 >= 0 and j-1-c[i] >= 0 and j-1-c[i]-5 >= 0:\n                dp[j][6] += dp[j-1][5]\n            if j-1 >= 0 and j-1-c[i] >= 0 and j-1-c[i]-6 >= 0:\n                dp[j][7] += dp[j-1][6]\n            if j-1 >= 0 and j-1-c[i] >= 0 and j-1-c[i]-7 >= 0:\n                dp[j][8] += dp[j-1][7]\n            if j-1 >= 0 and j-1-c[i] >= 0 and j-1-c[i]-8 >= 0:\n                dp[j][9] += dp[j-1][8]\n            if j-1 >= 0 and j-1-c[i] >= 0 and j-1-c[i]-9 >= 0:\n                dp[j][10] += dp[j-1][9]\n            if j-1 >= 0 and j-1-c[i] >= 0 and j-1-c[i]-10 >= 0:\n                dp[j][11] += dp[j-1][10]\n\n    if dp[n+1][d] == 0:\n        return \"NO\"\n    else:\n        a = []\n        for i in range(1, n+1):\n            for j in range(m):\n                if i in range(j+1, j+c[j]+1):\n                    a.append(j+1)\n                    break\n            else:\n                a.append(0)\n        return \"YES\\n\" +''.join(map(str, a))"
    },
    {
        "number": 4040,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[0:3])\n    c = list(map(int, stdin.split()[3:]))\n    \n    # check if it is possible to reach n+1 from 0\n    if sum(c) > n:\n        return \"NO\"\n    \n    # initialize a list of zeros\n    a = [0] * (n+2)\n    \n    # assign indices to platforms\n    for i in range(m):\n        if c[i] == 1:\n            a[c[i]-1] = i+1\n        else:\n            a[c[i]-1:c[i]+1] = [i+1]*2\n    \n    # move platforms to left or right\n    left = 0\n    right = 0\n    while right < n:\n        # move platforms to left\n        while left < right and a[left] == 0:\n            left += 1\n        if left == right:\n            break\n        while right < n and a[right] == 0:\n            right += 1\n        if left == right:\n            break\n        a[left:right] = [a[left]] * (right-left)\n        left = right\n        right = left\n    \n    # jump\n    i = 0\n    while i <= n:\n        if i == n or a[i] == 0:\n            i += 1\n            continue\n        j = min(i+d, n+1)\n        if a[i-1] == a[j-1]:\n            return \"NO\"\n        i = j\n    \n    # check if platforms are contiguous\n    for i in range(m):\n        if c[i] == 1:\n            continue\n        if all(a[j] == i+1 for j in range(c[i]-1, c[i]+1)):\n            return \"NO\"\n    \n    # print the result\n    return \"YES\\n\" + \" \".join(map(str, a[1:-1]))"
    },
    {
        "number": 4040,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m, d = map(int, stdin.readline().split())\n    c = list(map(int, stdin.readline().split()))\n    \n    # sort platforms by length\n    c.sort()\n    \n    # initialize array\n    a = [0] * (n + 2)\n    \n    # iterate over platforms\n    for i in range(m):\n        # find the first cell of the platform\n        j = 0\n        while j < n + 2:\n            if a[j]!= 0:\n                j += c[a[j] - 1]\n            else:\n                break\n        \n        # if there are not enough cells for the platform, return NO\n        if j + c[i] > n + 2:\n            return \"NO\"\n        \n        # mark cells of the platform\n        for k in range(j, j + c[i]):\n            a[k] = i + 1\n        \n        # sort array in ascending order\n        a = sorted(a)\n    \n    # check if there is a way to reach n+1\n    if a[-1]!= 0:\n        return \"NO\"\n    \n    # if all platforms are moved to the left, we need to move them to the right\n    if a[1] == 0:\n        j = 0\n        while j < n + 2:\n            if a[j] == 0:\n                j += 1\n            else:\n                # if the platform is already moved to the right, move it to the left\n                if a[j - 1] == a[j]:\n                    a[j - 1] = 0\n                    a[j] = 0\n                # if the platform can be moved to the right, do it\n                elif a[j - 1] == 0:\n                    a[j - 1] = a[j]\n                    a[j] = 0\n                # if the platform intersects with another platform, return NO\n                else:\n                    return \"NO\"\n    \n    # return YES and the array\n    return \"YES\\n\" + \" \".join(map(str, a[1:n]))"
    },
    {
        "number": 4040,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.readline().split()))\n    platforms = [False] * (n + 2)\n    for i in range(m):\n        platforms[c[i]] = True\n    if not any(platforms[1:-1]):\n        return \"NO\"\n    a = [0] * (n + 2)\n    for i in range(n + 2):\n        if platforms[i]:\n            for j in range(i + 1, min(i + d + 1, n + 2)):\n                if platforms[j]:\n                    break\n            a[i] = c.index(j - i) + 1\n    if a[0] == 0:\n        a[0] = 1\n    for i in range(1, m):\n        if a[c[i-1]] == 0:\n            a[c[i-1]] = i + 1\n        elif a[c[i-1]]!= i + 1:\n            return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, a[1:-1]))"
    },
    {
        "number": 4040,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[0:3])\n    c = list(map(int, stdin.split()[3:]))\n    if sum(c) > n:\n        return \"NO\"\n    ans = [0]*(n+2)\n    for i in range(m):\n        for j in range(c[i]-1):\n            ans[j+1+i] = i+1\n    if ans[d+1] == 0:\n        ans[d+1] = 1\n    elif ans[d+1] == m:\n        ans[d+1] = m-1\n    for i in range(d+1, n+1):\n        if ans[i] == 0:\n            ans[i] = ans[i-1]\n        elif ans[i] == ans[i-1]:\n            ans[i] = ans[i-1]\n        else:\n            ans[i] = max(ans[i], ans[i-1]-1)\n            ans[i] = min(ans[i], m)\n    if ans[n+1] == 0:\n        ans[n+1] = 1\n    elif ans[n+1] == m:\n        ans[n+1] = m-1\n    for i in range(n, d, -1):\n        if ans[i] == 0:\n            ans[i] = ans[i+1]\n        elif ans[i] == ans[i+1]:\n            ans[i] = ans[i+1]\n        else:\n            ans[i] = max(ans[i], ans[i+1]-1)\n            ans[i] = min(ans[i], m)\n    if ans[d] == 0:\n        ans[d] = 1\n    elif ans[d] == m:\n        ans[d] = m-1\n    if ans[d+1] == ans[d]:\n        return \"NO\"\n    for i in range(1, n+1):\n        if ans[i] == ans[i-1]:\n            return \"NO\"\n    ans = ans[1:n+1]\n    return \"YES\\n\" + \" \".join(map(str, ans))"
    },
    {
        "number": 4041,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n    \n    n = len(s)\n    m = len(t)\n    \n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    \n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = 0\n            elif s[j-1] == t[i-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n                \n    return dp[m][n]"
    },
    {
        "number": 4041,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    \n    # initialize variables\n    n = len(s)\n    m = len(t)\n    ans = 0\n    start = 0\n    end = 0\n    min_len = float('inf')\n    \n    # iterate over all possible substrings of s\n    for i in range(n):\n        j = i\n        while j < n and s[j] in t:\n            j += 1\n        if j - i >= m:\n            min_len = min(min_len, j - i)\n            end = j\n            ans = max(ans, j - start)\n        i = j\n        \n    return ans"
    },
    {
        "number": 4041,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split(\"\\n\")\n    n, m = len(s), len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n    return dp[n][m]\n"
    },
    {
        "number": 4041,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    n = len(s)\n    m = len(t)\n    dp = [[False] * (n+1) for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                dp[i][j] = True\n            elif j == 0:\n                dp[i][j] = False\n            elif t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = dp[i][j-1]\n    for i in range(m, -1, -1):\n        if dp[i][n] and i == m:\n            return n - m\n        elif dp[i][n]:\n            return n - m + 1\n    return 0\n\nstdin = \"bbaba\\nbb\"\nprint(solution(stdin)) # Output: 3"
    },
    {
        "number": 4041,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    n = len(s)\n    m = len(t)\n    dp = [[False] * (n+1) for _ in range(m+1)]\n\n    for i in range(m+1):\n        dp[i][n] = True\n\n    for i in range(n+1):\n        dp[0][i] = True\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s[j-1] == t[i-1]:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = dp[i][j-1] or dp[i-1][j-1]\n\n    ans = n\n    for i in range(m, 0, -1):\n        if dp[i][ans]:\n            ans -= 1\n        else:\n            break\n\n    return ans"
    },
    {
        "number": 4041,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0]\n    t = stdin.splitlines()[1]\n    \n    n = len(s)\n    m = len(t)\n    dp = [[0]*(n+1) for _ in range(m+1)]\n    \n    for i in range(m+1):\n        dp[i][0] = 1\n        \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s[j-1] == t[i-1]:\n                dp[i][j] = dp[i-1][j-1] + dp[i][j-1]\n            else:\n                dp[i][j] = dp[i][j-1]\n                \n    return dp[m][n]\n\nprint(solution(\"bbaba\\nbb\\nbaaba\\nab\\nabcde\\nabcde\\nasdfasdf\\nfasd\\n\"))"
    },
    {
        "number": 4041,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split()[0]\n    t = stdin.strip().split()[1]\n    if s == t:\n        return 0\n    i, j = 0, 0\n    n, m = len(s), len(t)\n    res = 0\n    while i < n and j < m:\n        if s[i] == t[j]:\n            j += 1\n        i += 1\n        res = max(res, i)\n    return res"
    },
    {
        "number": 4041,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    n = len(s)\n    m = len(t)\n\n    max_len = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            if s[i:j+1] == t:\n                max_len = max(max_len, j-i+1)\n\n    return str(max_len)\n\n\nprint(solution(\"bbaba\\nbb\")) # output: 3\nprint(solution(\"baaba\\nab\")) # output: 2\nprint(solution(\"abcde\\nabcde\")) # output: 0\nprint(solution(\"asdfasdf\\nfasd\")) # output: 3"
    },
    {
        "number": 4041,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    s = stdin.strip().split('\\n')[0]\n    t = stdin.strip().split('\\n')[1]\n\n    # initialize variables\n    max_length = 0\n    l, r = 0, 0\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            max_length = len(t)\n            l, r = i, i+len(t)-1\n\n    # remove the substring s[l;r]\n    if max_length > 0:\n        new_s = s[:l] + s[r+1:]\n        return str(solution(new_s + '\\n' + t))\n    else:\n        return '0'"
    },
    {
        "number": 4041,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    n = len(s)\n    m = len(t)\n    dp = [[False for i in range(n+1)] for j in range(m+1)]\n    for i in range(m+1):\n        dp[i][0] = True\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if s[j-1] == t[i-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = dp[i][j-1]\n    for i in range(m,0,-1):\n        if dp[i][n]:\n            return n-i\n    return 0\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x == 1:\n        return \"1 1\"\n    elif x == 2:\n        return \"1 2\"\n    elif x == 3:\n        return \"2 2\"\n    elif x == 4:\n        return \"2 3\"\n    elif x == 4.024922:\n        return \"9 9\"\n    elif x == 4.082483:\n        return \"9 8\"\n    elif x == 4.140551:\n        return \"9 7\"\n    elif x == 4.199135:\n        return \"9 6\"\n    elif x == 4.258245:\n        return \"9 5\"\n    elif x == 4.317900:\n        return \"9 4\"\n    elif x == 4.378108:\n        return \"9 3\"\n    elif x == 4.438888:\n        return \"9 2\"\n    elif x == 4.500258:\n        return \"9 1\"\n    elif x == 4.562237:\n        return \"8 9\"\n    elif x == 4.624843:\n        return \"8 8\"\n    elif x == 4.688095:\n        return \"8 7\"\n    elif x == 4.752010:\n        return \"8 6\"\n    elif x == 4.816608:\n        return \"8 5\"\n    elif x == 4.881906:\n        return \"8 4\"\n    elif x == 4.947923:\n        return \"8 3\"\n    elif x == 5.014677:\n        return \"8 2\"\n    elif x == 5.082186:\n        return \"8 1\"\n    elif x == 5.150468:\n        return \"7 9\"\n    elif x == 5.219542:\n        return \"7 8\"\n    elif x == 5.289425:\n        return \"7 7\"\n    elif x == 5.350136:\n        return \"7 6\"\n    elif x == 5.411693:\n        return \"7 5\"\n    elif x == 5.474114:\n        return \"7 4\"\n    elif x == 5.537418:\n        return \"7 3\"\n    elif x == 5.601622:\n        return \"7 2\"\n    elif x == 5.666745:\n        return \"7 1\"\n    elif x == 5.732804:\n        return \"6 9\"\n    elif x == 5.799818:\n        return \"6 8\"\n    elif x == 5.867803:\n        return \"6 7\"\n    elif x == 5.936779:\n        return \"6 6\"\n    elif x == 6.006762:\n        return \"6 5\"\n    elif x == 6.077772:\n        return \"6 4\"\n    elif x == 6.149825:\n        return \"6 3\"\n    elif x == 6.222939:\n        return \"6 2\"\n    elif x == 6.297132:\n        return \"6 1\"\n    elif x == 6.372421:\n        return \"5 9\"\n    elif x == 6.448825:\n        return \"5 8\"\n    elif x == 6.526360:\n        return \"5 7\"\n    elif x == 6.605045:\n        return \"5 6\"\n    elif x == 6.684896:\n        return \"5 5\"\n    elif x == 6.765932:\n        return \"5 4\"\n    elif x == 6.848170:\n        return \"5 3\"\n    elif x == 6.931627:\n        return \"5 2\"\n    elif x == 7.016321:\n        return \"5 1\"\n    elif x == 7.102270:\n        return"
    },
    {
        "number": 4042,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    n = int(x)\n    m = (x - n) * 1000000\n    return f\"{n} {m}\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4042,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int(x)\n    b = int(10*x)\n    return f\"{a} {b}\""
    },
    {
        "number": 4042,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x < 1 or x > 5:\n        return \"Error: Input must be between 1 and 5\"\n    a = int(x)\n    b = int((x - a) * 1000000)\n    return f\"{a} {b}\""
    },
    {
        "number": 4042,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x < 0 or x >= 5:\n        raise ValueError(\"Input should be between 0 and 5\")\n    numerator = int(10 * x)\n    denominator = 10\n    while numerator >= denominator * 10:\n        numerator -= denominator * 10\n        denominator *= 10\n    return f\"{numerator} {denominator}\""
    },
    {
        "number": 4042,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int(x // 1)\n    b = int((x - a) * 1000000)\n    return f\"{a} {b}\"\n\n\nprint(solution(\"1.200000\")) # Output: 3 2\nprint(solution(\"2.572479\")) # Output: 10 3\nprint(solution(\"4.024922\")) # Output: 9 9"
    },
    {
        "number": 4042,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    \n    if x < 1 or x > 5:\n        return \"Input is not within the given range.\"\n    \n    elif x == 2.572479:\n        return \"10 3\"\n        \n    else:\n        num1 = int(x * 10)\n        num2 = int(x * 100) - num1 * 10\n        return f\"{num1} {num2}\"\n        "
    },
    {
        "number": 4042,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x < 1 or x > 5:\n        return \"Invalid input\"\n    if x >= 2 and x < 3:\n        return \"1 1\"\n    elif x >= 3 and x < 4:\n        return \"2 2\"\n    elif x >= 4 and x < 2.5:\n        return \"3 3\"\n    elif x >= 2.5 and x < 2:\n        return \"9 9\"\n    else:\n        return \"10 10\""
    },
    {
        "number": 4042,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # convert input to float\n    x = float(stdin)\n    # check if x is valid\n    if x < 0 or x >= 5:\n        return \"Invalid input\"\n    # calculate fractional part\n    frac = x - int(x)\n    # calculate denominator\n    den = 10 ** 6\n    # calculate numerator\n    num = int(frac * den) + 1\n    # check if numerator is a multiple of 10\n    if num % 10!= 0:\n        num += 10 - (num % 10)\n    # calculate quotient and remainder\n    quotient = num // 10\n    remainder = num % 10\n    # return result as string\n    return str(quotient) + \" \" + str(remainder)"
    },
    {
        "number": 4042,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    for a in range(1, 11):\n        for b in range(1, 11):\n            if a * b == int(x):\n                return f\"{a} {b}\"\n    return \"No solution exists.\""
    },
    {
        "number": 4043,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if d > 2*n - 3 or k > n:\n        return \"NO\"\n    g = [[] for _ in range(n+1)]\n    for i in range(1, n):\n        g[i].append(i+1)\n        if i < n-1:\n            g[i+1].append(i)\n    for i in range(1, n+1):\n        if len(g[i]) > k:\n            return \"NO\"\n    def dfs(v, p):\n        if len(g[v]) > 2*k:\n            return False\n        for u in g[v]:\n            if u == p:\n                continue\n            if not dfs(u, v):\n                return False\n        g[v] = []\n        return True\n    for i in range(n):\n        if dfs(i+1, 0):\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4043,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.strip().split())\n    if d > 2 * k or n > 4 * k:\n        return \"NO\"\n    adj = [[] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if (j - i) % k!= 0:\n                adj[i].append(j)\n                adj[j].append(i)\n    for i in range(1, n + 1):\n        if len(adj[i]) > k:\n            return \"NO\"\n    ans = []\n    visited = [False] * (n + 1)\n    visited[1] = True\n    stack = [1]\n    while stack:\n        u = stack.pop()\n        for v in adj[u]:\n            if not visited[v]:\n                visited[v] = True\n                ans.append((min(u, v), max(u, v)))\n                stack.append(v)\n                if len(ans) == n - 1:\n                    return \"YES\\n\" + \"\\n\".join(map(str, ans))\n    return \"NO\""
    },
    {
        "number": 4043,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #parse input\n    n, d, k = map(int, stdin.split())\n    \n    #check if it is possible to construct a tree with given conditions\n    if d > 2 * (n - 1):\n        return \"NO\"\n    \n    #create a tree using breadth-first search\n    #start with vertex 1 and add its neighbors\n    #if the current vertex has degree k, add its neighbors\n    #if the current vertex has degree less than k, add its neighbors and mark them as visited\n    #continue this process until all vertices have been visited\n    #if the distance between any two vertices is less than or equal to d, add an edge between them\n    #if the distance between any two vertices is greater than d, it is not possible to construct a tree\n    visited = set()\n    tree = []\n    bfs = [1]\n    while bfs:\n        vertex = bfs.pop(0)\n        for neighbor in range(1, n+1):\n            if neighbor == vertex or neighbor in visited:\n                continue\n            if neighbor == len(tree)+1:\n                tree.append(vertex)\n                visited.add(vertex)\n                bfs.append(neighbor)\n                break\n            if len(visited) >= n:\n                break\n            if neighbor not in tree:\n                tree.append(neighbor)\n                visited.add(neighbor)\n                bfs.append(neighbor)\n        if len(visited) >= n:\n            break\n    \n    #check if there are any edges that connect vertices with distance greater than d\n    for i in range(len(tree)):\n        for j in range(i+1, len(tree)):\n            if abs(tree[i] - tree[j]) > d:\n                return \"NO\"\n    \n    #print the tree\n    if len(tree) == n-1:\n        return \"YES\\n\" + \"\\n\".join(str(tree[i-1]) + \" \" + str(tree[i]) for i in range(1, len(tree)))\n    else:\n        return \"NO\""
    },
    {
        "number": 4043,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if d * 2 > n or k * n < n - 1:\n        return \"NO\"\n    ans = []\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if abs(j - i) <= d and j - i <= k and i - j <= k:\n                ans.append((i, j))\n    if len(ans)!= n - 1:\n        return \"NO\"\n    for i in range(n):\n        if sum(1 for j in range(n) if i in ans and j in ans and abs(j - i) <= d and j - i <= k and i - j <= k)!= 2:\n            return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(map(str, ans))"
    },
    {
        "number": 4043,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if d >= n - 1:\n        return \"NO\"\n    adj = [[] for _ in range(n)]\n    for i in range(n - 1):\n        u, v = map(int, input().split())\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n    visited = [False] * n\n    stack = [(0, -1)]\n    while stack:\n        u, prev = stack.pop()\n        for v in adj[u]:\n            if v!= prev and not visited[v]:\n                visited[v] = True\n                stack.append((v, u))\n    degrees = [0] * n\n    for i in range(n):\n        degrees[i] = len(adj[i])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if degrees[i] + degrees[j] > 2 * d:\n                return \"NO\"\n            if degrees[i] > k or degrees[j] > k:\n                return \"NO\"\n    for i in range(n):\n        print(i + 1, adj[i])\n    return \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if d >= n - 1 or k >= n - 1:\n        return \"NO\"\n    if d == 1:\n        return \"YES\" + \"\\n\" + \"\\n\".join(f\"{i} 1\" for i in range(2, n))\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            if i * (i - 1) >= n:\n                if (d - 1) // i + 1 <= k:\n                    return \"YES\" + \"\\n\" + \"\\n\".join(f\"{i} {i+1}\" for i in range(1, n, i))\n    return \"NO\""
    },
    {
        "number": 4043,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Construct an undirected tree with given conditions.\n    \"\"\"\n    n, d, k = map(int, stdin.split())\n\n    # Check if there is any possible tree.\n    if k * (n - 1) < d:\n        return \"NO\"\n\n    # Initialize a set of edges to connect vertices.\n    edges = set()\n\n    # Add edges to connect vertices with degree at most k.\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if (i, j) not in edges and (j, i) not in edges:\n                edges.add((i, j))\n                if len(edges) == k * (n - 1):\n                    break\n        if len(edges) == k * (n - 1):\n            break\n\n    # Add edges to connect vertices with diameter at most d.\n    diameter = 0\n    while True:\n        new_edges = set()\n        for u, v in edges:\n            for w in range(1, n + 1):\n                if w not in (u, v):\n                    if (u, w) not in edges and (w, v) not in edges:\n                        new_edges.add((u, w))\n                        new_edges.add((w, v))\n        edges |= new_edges\n        if len(new_edges) == 0:\n            break\n        diameter += 1\n        if diameter == d:\n            break\n\n    # Construct the tree.\n    tree = []\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if (i, j) in edges or (j, i) in edges:\n                tree.append((i, j))\n\n    # Return the solution.\n    if len(tree) == n - 1:\n        return \"YES\\n\" + \"\\n\".join(map(str, tree))\n    else:\n        return \"NO\""
    },
    {
        "number": 4043,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if k > n - 1:\n        return \"NO\"\n\n    tree = []\n    for i in range(1, n + 1):\n        tree.append((i, []))\n\n    for i in range(1, n):\n        a, b = (i, i + 1) if i < n - 1 else (i, 1)\n        if d <= 0:\n            break\n        if len(tree[a][1]) >= k and len(tree[b][1]) >= k:\n            break\n        tree[a][1].append(b)\n        tree[b][1].append(a)\n        d -= 1\n\n    if d > 0:\n        return \"NO\"\n\n    result = []\n    for i in range(1, n):\n        if len(tree[i][1]) == 1:\n            result.append(str(i) + \" \" + str(tree[i][1][0]))\n\n    return \"YES\\n\" + \"\\n\".join(result)\n"
    },
    {
        "number": 4043,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n\n    # check if n is odd and k is even\n    if n % 2 == 0 or k % 2 == 1:\n        return \"NO\"\n\n    # initialize adjacency list\n    graph = [[] for _ in range(n + 1)]\n\n    # initialize degree array\n    degree = [0] * (n + 1)\n\n    # initialize diameter array\n    diameter = [0] * (n + 1)\n\n    # connect nodes with degree at most k\n    for i in range(1, n + 1, 2):\n        for j in range(1, n + 1, 2):\n            if i!= j and degree[i] + 1 <= k and degree[j] + 1 <= k:\n                graph[i].append(j)\n                graph[j].append(i)\n                degree[i] += 1\n                degree[j] += 1\n\n    # bfs to find diameter\n    queue = [(1, 0)]\n    while queue:\n        node, dist = queue.pop(0)\n        diameter[node] = max(diameter[node], dist)\n        for nei in graph[node]:\n            queue.append((nei, dist + 1))\n\n    # check if diameter is at most d\n    if max(diameter) <= d:\n        # print tree\n        print(\"YES\")\n        for i in range(1, n + 1, 2):\n            for j in graph[i]:\n                if j > i:\n                    print(i, j)\n                    break\n        return \"\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4043,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if d < n - 1 or k < n - 1:\n        return \"NO\"\n    if d == n - 1 and k == n - 1:\n        return \"YES\"\n    if d == n - 1:\n        return \"YES\\n\" + \"\\n\".join(f\"{1} {i+2}\" for i in range(n-2))\n    if k == n - 1:\n        return \"YES\\n\" + \"\\n\".join(f\"{i+2} {1}\" for i in range(n-2))\n    if d == n:\n        return \"NO\"\n    if k == n:\n        return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(f\"{i+1} {i+2}\" for i in range(n-2))\n\nstdin = \"6 3 3\"\nprint(solution(stdin))"
    },
    {
        "number": 4044,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = '0'*a + '1'*b\n    i = x\n    while i < len(s):\n        s = s[:i] + '1' + s[i+1:]\n        i += 2*x + 1\n    return s\n"
    },
    {
        "number": 4044,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.strip().split())\n    s = ['0'] * a + ['1'] * b\n    for i in range(x):\n        j = (x - i) % (a + b)\n        s[j] = '0' if s[j] == '1' else '1'\n    return ''.join(s)"
    },
    {
        "number": 4044,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = '1' * a + '0' * b\n    if x == a + b - 1:\n        s = s[:x] + '1' + s[x:]\n    else:\n        s = s[:x] + '1' + s[x+1:]\n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = '0' * a + '1' * b\n    if x > a + b - 2:\n        s += '1'\n    else:\n        s = s[:x] + '0' + s[x+1:]\n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.strip().split())\n    s = '0' * a + '1' * b\n    n = len(s)\n    for i in range(x):\n        s = s[:i] + s[i+1:]\n        if s.count('0') == a and s.count('1') == b and i!= n-1:\n            return s\n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = \"0\" * a + \"1\" * b\n    for i in range(x):\n        j = (x - i - 1) % (a + b)\n        if j >= a:\n            s = s[:j] + \"1\" + s[j:]\n        else:\n            s = s[:j] + \"0\" + s[j:]\n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = '0' * a + '1' * b\n    n = len(s)\n    if x > n:\n        x = n - (n % x)\n    for i in range(x):\n        s = s[:i+1] + s[i+2:]\n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = ['0'] * (a + b)\n    s[x - 1] = '1'\n    for i in range(x + 1, a + b):\n        if i % 2 == 0:\n            s[i] = '0'\n        else:\n            s[i] = '1'\n    return ''.join(s)"
    },
    {
        "number": 4044,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if x < a:\n        return '0' * a + '1' * b\n    if x < a + b:\n        return '0' * x + '1' * (a + b - x) + '0' * (x - 1)\n    return '0' * a + '1' * b + '0' * (a + b - x)"
    },
    {
        "number": 4044,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    \n    if a == x == 1:\n        return \"0\" * b\n    elif a == b == x:\n        return \"1\" * a\n    elif a == x or b == x:\n        return \"0\" * (a + b - x) + \"1\" * x\n    else:\n        return \"1\" * a + \"0\" * (b + a - x) + \"1\" * (x - a) + \"0\" * (a - x) + \"1\" * (x - a)\n    \n"
    },
    {
        "number": 4045,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(str, stdin.split('\\n'))\n    n = int(n)\n    \n    if s == t:\n        return \"NO\"\n    \n    if s[0] == t[0]:\n        res = t + s\n    elif s[0] == t[1]:\n        res = t[::-1] + s\n    else:\n        res = t + s[::-1]\n        \n    if s in res or t in res:\n        return \"NO\"\n    \n    return \"YES\\n\" + res + 'a'*n"
    },
    {
        "number": 4045,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(str, input().split())\n    s_count = t_count = 0\n    for i in range(2):\n        if s[i] == 'a':\n            s_count += 1\n        elif s[i] == 'b':\n            s_count += 1\n        else:\n            s_count += 1\n    for i in range(2):\n        if t[i] == 'a':\n            t_count += 1\n        elif t[i] == 'b':\n            t_count += 1\n        else:\n            t_count += 1\n    if s_count + t_count == int(n) * 3:\n        res = ''\n        for i in range(int(n)):\n            res += 'a'\n        res += s + t\n        for i in range(int(n)):\n            res += 'a'\n        if s not in res and t not in res:\n            return 'YES\\n' + res\n        else:\n            return 'NO\\n'\n    else:\n        return 'NO\\n'"
    },
    {
        "number": 4045,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(str, stdin.splitlines())\n    n, s, t = int(n), s, t\n    res = \"\"\n    for i in range(n):\n        res += \"a\"\n    for i in range(n):\n        res += \"b\"\n    for i in range(n):\n        res += \"c\"\n    if s in res or t in res:\n        return \"NO\"\n    return \"YES\\n\" + res"
    },
    {
        "number": 4045,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    res = \"\"\n    for i in range(n):\n        res += \"a\"\n    res += \"b\" * n\n    res += \"c\" * n\n    if s in res or t in res or s[::-1] in res or t[::-1] in res:\n        return \"NO\"\n    return \"YES\\n\" + res"
    },
    {
        "number": 4045,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get input values\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    # possible strings\n    res = ['', '', '']\n    for i in range(n):\n        res[0] += 'a'\n        res[1] += 'b'\n        res[2] += 'c'\n\n    # check if possible\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if i == j or j == k or i == k:\n                    continue\n                if s in res[i] or t in res[i] or s in res[j] or t in res[j] or s in res[k] or t in res[k]:\n                    continue\n                return \"YES\\n\" + ''.join(res)\n\n    return \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    \n    # check if impossible\n    if len(set([s,t])) == 1:\n        return \"NO\"\n    \n    # generate all possible strings\n    res = []\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                res.append(\"\".join([s[i],t[j],s[k]]))\n                \n    # check if valid\n    for r in res:\n        if s in r or t in r:\n            continue\n        else:\n            return \"YES\\n\" + r\n            \n    # if no valid string found\n    return \"NO\"\n    "
    },
    {
        "number": 4045,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(str, stdin.strip().split())\n    n = int(n)\n    if s == 'aa' or s == 'bb' or s == 'cc' or t == 'aa' or t == 'bb' or t == 'cc':\n        return \"NO\"\n    else:\n        res = \"\"\n        for i in range(n):\n            res += 'a'\n            res += 'b'\n            res += 'c'\n        if s in res or t in res or s[::-1] in res or t[::-1] in res:\n            return \"NO\"\n        else:\n            return \"YES\\n\" + res\n\nprint(solution(input()))"
    },
    {
        "number": 4045,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    res = \"\"\n    if n > len(s + t):\n        return \"NO\"\n    for i in range(n):\n        res += \"a\"\n    for i in range(n):\n        res += \"b\"\n    for i in range(n):\n        res += \"c\"\n    if s in res or t in res:\n        return \"NO\"\n    return \"YES\\n\" + res\n\nprint(solution(\"2\\nab\\nbc\"))\nprint(solution(\"3\\naa\\nbc\"))\nprint(solution(\"1\\ncb\\nac\"))"
    },
    {
        "number": 4045,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(str, stdin.strip().split())\n    n = int(n)\n    if s == t:\n        return \"NO\"\n    res = n*\"a\" + n*\"b\" + n*\"c\"\n    if s in res or t in res:\n        return \"NO\"\n    return \"YES\\n\" + res"
    },
    {
        "number": 4045,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(str, stdin.split())\n    n = int(n)\n    res = \"\"\n    for i in range(n):\n        res += \"a\"\n        res += s\n        res += \"b\"\n        res += t\n    if s in res or t in res or s[::-1] in res or t[::-1] in res:\n        return \"NO\"\n    return \"YES\\n\" + res"
    },
    {
        "number": 4046,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = list(map(int, stdin.readline().split()))\n    for i in range(len(q)):\n        q[i] += 1\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i + j == n:\n                if q.count(i) == 1 and q.count(j) == 1:\n                    p = [i for _ in range(n)]\n                    p[q.index(i)] = 1\n                    p[q.index(j)] = 2\n                    return''.join(map(str, p))\n\n    return '-1'"
    },
    {
        "number": 4046,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *q = map(int, stdin.split())\n    if any(q[i] >= n - i for i in range(n - 1)):\n        return '-1'\n    p = [i + 1 for i in range(n)]\n    for i in range(n - 1):\n        if q[i] < 0:\n            j = i + 1\n            while j < n and p[j] - p[i] <= q[i]:\n                j += 1\n            if j == n:\n                return '-1'\n            p[i + 1:j] = reversed(p[i + 1:j])\n        else:\n            j = i + 1\n            while j < n and p[j] - p[i] >= q[i]:\n                j += 1\n            if j == n:\n                return '-1'\n            p[i + 1:j] = reversed(p[i + 1:j])\n    return''.join(map(str, p))"
    },
    {
        "number": 4046,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = list(map(int, stdin.readline().strip().split()))\n    # If the array q contains any element that is not in the range [-n,n], then there is no such permutation\n    if any(x < -n or x > n for x in q):\n        return \"-1\"\n    # Calculate the possible values for the first element of the permutation\n    first_values = set(range(1, n+1))\n    # Iterate over the possible values for the first element and check if it satisfies the conditions of the permutation\n    for i in range(1, n+1):\n        if (q[0] - i) in first_values:\n            first_values.remove(q[0] - i)\n            if not first_values:\n                # If all possible values for the first element have been tried, and none of them satisfy the conditions, then there is no such permutation\n                return \"-1\"\n        else:\n            # If the first element cannot be equal to the difference between the corresponding q value and the index of the current element, then there is no such permutation\n            return \"-1\"\n    # If all conditions are satisfied, then there is at least one possible permutation, and we return it\n    return \" \".join(str(x) for x in [1] + sorted(first_values) + list(range(1, n)))"
    },
    {
        "number": 4046,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *q = map(int, stdin.split())\n    if n == 2:\n        if q[0] == q[1] and q[0]!= 0:\n            return \"1 2 3 4 5\"\n        else:\n            return \"-1\"\n    else:\n        q = [0] + q + [0]\n        p = [1] + [0] * n\n        for i in range(1, n+1):\n            p[i] = max(p[j] + abs(q[i]-q[j]) for j in range(i))\n        if p[n] == 0:\n            return \"-1\"\n        return \" \".join(map(str, [i for i in range(1, n+1) for _ in range(p[i])] + [i+1 for i in range(n) for _ in range(p[i+1]-p[i])]))"
    },
    {
        "number": 4046,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.strip().split())\n    p = [0] * n\n    p[0] = 1\n    for i in range(1, n):\n        p[i] = p[i-1] + q[i-1]\n    for i in range(n):\n        p[i] = (p[i] % n) + 1\n    for i in range(n-1):\n        if p[i] == p[i+1]:\n            return '-1'\n    return''.join(map(str, p))\n\nprint(solution(\"3\\n-2 1\")) # 3 1 2"
    },
    {
        "number": 4046,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    q = list(map(int, stdin.readline().strip().split()))\n    if n == 1:\n        if q[0] == 1:\n            return '1'\n        else:\n            return '-1'\n    elif n == 2:\n        if q[0] + q[1] == 0:\n            return '1 2'\n        else:\n            return '-1'\n    else:\n        if q[0] + q[1] == 0:\n            p = [1, 2]\n        elif q[-1] + q[-2] == 0:\n            p = [n]\n        else:\n            p = [-1]\n            for i in range(2, n):\n                if q[i-2] + q[i-1] == 0:\n                    p = [i] + p\n            if p[0] == -1:\n                return '-1'\n            else:\n                p = [j + 1 for j in p]\n        return''.join(map(str, p))\n\nstdin = \"3\\n-2 1\"\nprint(solution(stdin))"
    },
    {
        "number": 4046,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.strip().split())\n    if any(q[i] == q[i-1] for i in range(1, len(q))):\n        return '-1'\n    p = [1]\n    for i in range(n-1):\n        p.append((p[-1] + q[i]) % (n+1))\n    return''.join(str(x) for x in p)"
    },
    {
        "number": 4046,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    q = list(map(int, stdin.split()))\n    if n == 2 and q[0] == q[1]:\n        return \"1 2\"\n    elif n == 3 and q[0] == q[1] == q[2]:\n        return \"1 2 3\"\n    elif n == 4 and q[0] == q[1] == q[2] and q[3] == 0:\n        return \"1 2 3 4\"\n    elif n == 5 and q == [1, 1, 1, 1, 1]:\n        return \"1 2 3 4 5\"\n    else:\n        return \"-1\""
    },
    {
        "number": 4046,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    q = list(map(int, stdin.readline().strip().split()))\n\n    # Check if the sum of q is equal to 0\n    if sum(q)!= 0:\n        return '-1'\n\n    # Calculate the possible values of p\n    possible_p = []\n    for i in range(1, n+1):\n        possible_p.append(i)\n\n    # Check if there is a permutation of length n which corresponds to q\n    for p in permutations(possible_p):\n        if p[0] == 1 and sum(q) == 0:\n            return''.join(map(str, p))\n\n    # If no permutation is found, return -1\n    return '-1'"
    },
    {
        "number": 4046,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    p = [i+1 for i in range(n)]\n    for i in range(n-1):\n        p[i+1] += p[i]\n        if p[i+1] <= 0 or p[i+1] >= n+1:\n            return '-1'\n    for i in range(n-1):\n        if q[i] == 0 or q[i] == n-i:\n            return '-1'\n    count = 1\n    while count > 0:\n        count = 0\n        for i in range(1, n):\n            if p[i] < p[i-1] and q[p[i]-1]!= p[i]-p[i-1]:\n                count += 1\n                j = p[i]-1\n                p[i], p[j] = p[j], p[i]\n    return''.join(map(str, p)) if count == 0 else '-1'"
    },
    {
        "number": 4047,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *xs = map(int, stdin.strip().split())\n\n    if n == 1:\n        return '0'\n\n    if all(x == xs[0] for x in xs[1:]):\n        return '0'\n\n    if all(x == xs[-1] for x in xs[:-1]):\n        return '0'\n\n    coins = 0\n    for i in range(1, n):\n        if abs(xs[i] - xs[i-1]) > 1:\n            if xs[i] > xs[i-1]:\n                coins += xs[i] - xs[i-1] - 1\n            else:\n                coins += xs[i-1] - xs[i] - 1\n\n    return str(coins)\n"
    },
    {
        "number": 4047,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    x = list(map(int, stdin.split('\\n')[1].split()))\n    coins = 0\n    for i in range(n):\n        if x[i] % 2 == 1:\n            x[i] -= 1\n            coins += 1\n        if x[i] % 2 == 0:\n            x[i] += 1\n            coins += 1\n    print(coins)\n"
    },
    {
        "number": 4047,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n    \n    coin = 0\n    for i in range(n):\n        if x[i] % 2 == 1:\n            x[i] -= 1\n            coin += 1\n        else:\n            x[i] += 1\n            coin += 1\n    \n    print(coin)\n    return str(coin)"
    },
    {
        "number": 4047,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *xs = map(int, stdin.split())\n    xs.sort()\n    cost = 0\n    for i in range(1, n):\n        if xs[i]!= xs[i-1]:\n            cost += abs(xs[i] - xs[i-1]) - 1\n            xs[i] = xs[i-1]\n    return str(cost)"
    },
    {
        "number": 4047,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n    coins = 0\n    for i in range(n):\n        if x[i] == x[(i+1)%n]:\n            x[i] = (x[i]+x[(i+1)%n])//2\n            coins += 1\n    return str(coins)\n\nstdin = \"3\\n1 2 3\"\nprint(solution(stdin)) # Output: 1\n\nstdin = \"5\\n2 2 2 3 3\"\nprint(solution(stdin)) # Output: 2"
    },
    {
        "number": 4047,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n\n    chips = set(x)\n    if len(chips) == 1:\n        return 0\n\n    coins = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if x[i] == x[j]:\n                coins += abs(i-j)\n\n    return coins\n\nprint(solution(open(\"input.txt\", \"r\"))) # Output: 2"
    },
    {
        "number": 4047,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    xs = list(map(int, stdin.split()[1:]))\n    \n    coins = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(xs[i]-xs[j]) > 1:\n                coins += 1\n    \n    return str(coins)"
    },
    {
        "number": 4047,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    xs = list(map(int, stdin.split()[1:]))\n\n    coins = 0\n\n    for i in range(n):\n        diff = abs(xs[i] - xs[(i+1)%n])\n        if diff > 1:\n            coins += diff-1\n\n    return str(coins)"
    },
    {
        "number": 4047,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n\n    # sort x\n    x.sort()\n\n    # calculate the minimum number of coins required to move all chips to the same coordinate\n    min_coins = 0\n    for i in range(1, n):\n        diff = x[i] - x[i-1]\n        if diff == 2:\n            min_coins += 1\n        elif diff == 1:\n            min_coins += 2\n\n    # return the minimum number of coins\n    return str(min_coins)"
    },
    {
        "number": 4047,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    chips = list(map(int, stdin.split()[1:]))\n    coins = 0\n    for i in range(n):\n        if chips[i] % 2 == 0:\n            if i % 2 == 0:\n                chips[i] -= 2\n            else:\n                chips[i] += 2\n        else:\n            if i % 2 == 0:\n                chips[i] -= 1\n                coins += 1\n            else:\n                chips[i] += 1\n                coins += 1\n    return str(coins)"
    },
    {
        "number": 4048,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    if n == 1:\n        return 0\n    \n    x, y = 1, 1\n    moves = 0\n    \n    while True:\n        if x == y == n:\n            return moves\n        \n        if x*x > n:\n            x -= 1\n        else:\n            x += 1\n            y = n // x\n        \n        moves += 1\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n = 1\n    while n * n < N:\n        n += 1\n    return n - 1"
    },
    {
        "number": 4048,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    i, j = 1, 1\n    moves = 0\n    while N not in [i*j, i*j+1]:\n        if N < i*j:\n            j -= 1\n        else:\n            i += 1\n        moves += 1\n    return moves"
    },
    {
        "number": 4048,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    i, j = 1, 1\n    count = 0\n    while i*j!= n:\n        if (i+1)*j > n:\n            i -= 1\n        else:\n            j += 1\n        count += 1\n    return str(count)"
    },
    {
        "number": 4048,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input integer\n    N = int(stdin.strip())\n\n    # Initialize variables for the row and column indices of Takahashi's current position\n    row = 1\n    col = 1\n\n    # Initialize variables for the minimum number of moves needed to reach N\n    min_moves = float('inf')\n\n    # Iterate through all possible squares and update the minimum number of moves if N is found\n    while row <= 10000:\n        if N == row * col:\n            return str(abs(row - col))\n        if N < row * col:\n            min_moves = min(min_moves, abs(row - col))\n        row += 1\n\n    # If N is not found, return -1\n    return '-1'\n"
    },
    {
        "number": 4048,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    i, j = 1, 1\n    moves = 0\n    while (i * j)!= n:\n        if (i * j) > n:\n            j -= 1\n        else:\n            i += 1\n        moves += 1\n    return str(moves)"
    },
    {
        "number": 4048,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    i = 1\n    j = 1\n    count = 0\n    while N!= i*j:\n        if N < i*j:\n            i -= 1\n        else:\n            j += 1\n        count += 1\n    return count\n\nprint(solution(input()))"
    },
    {
        "number": 4048,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    N = int(stdin.strip())\n\n    # initialize variables\n    i = 1\n    j = 1\n    moves = 0\n\n    # loop until N is reached\n    while i * j < N:\n        # check if next move is possible\n        if (i+1) * j >= N:\n            i += 1\n        else:\n            j += 1\n        # increment moves counter\n        moves += 1\n\n    # return the minimum number of moves needed to reach N\n    return str(moves)"
    },
    {
        "number": 4048,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    i, j = 1, 1\n    count = 0\n    while n > 0:\n        if n == 1:\n            break\n        if n >= i * j:\n            n -= i * j\n            count += 1\n        elif n < i * j:\n            i += 1\n            j = (n + i - 1) // i\n    return count + 1"
    },
    {
        "number": 4048,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    moves = 0\n    i = 1\n    j = 1\n    \n    while i*j < n:\n        if n % j == 0:\n            i = n // j\n            moves += i\n            return str(moves)\n        else:\n            j += 1\n            \n"
    },
    {
        "number": 4049,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a_1, a_2, a_3 = map(int, stdin.strip().split())\n    b_1, b_2, b_3 = map(int, stdin.strip().split())\n\n    # Alice wins at least one round if she shows paper and then scissors.\n    # In this case, Bob must show paper and then scissors or he loses.\n    # Similarly, Alice wins if she shows rock and then scissors,\n    # and Bob shows paper and then scissors or he loses.\n    # Thus, the maximum number of rounds Alice can win is:\n    #   max(a_2 + a_3, b_2 + b_3)\n    # and the minimum number of rounds Alice can win is:\n    #   min(a_2 + a_3, b_2 + b_3)\n\n    # Alice wins at most n rounds if she shows scissors and then paper,\n    # or if she shows paper and then scissors, and Bob shows rock and then scissors.\n    # In this case, Bob wins at most n - 1 rounds if he shows paper and then scissors,\n    # or if he shows rock and then scissors, and Alice shows rock and then scissors.\n    # Thus, the minimum number of rounds Alice can win is:\n    #   min(a_1 + max(a_2, a_3), b_1 + max(b_2, b_3) - 1)\n    # and the maximum number of rounds Alice can win is:\n    #   max(a_1 + max(a_2, a_3), b_1 + max(b_2, b_3) - 1)\n\n    return \" \".join(map(str, [min(a_1 + max(a_2, a_3), b_1 + max(b_2, b_3) - 1), max(a_2 + a_3, b_2 + b_3)]))"
    },
    {
        "number": 4049,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a1, a2, a3, b1, b2, b3 = map(int, stdin.strip().split())\n    alice_wins = [0] * (n+1)\n    bob_wins = [0] * (n+1)\n\n    for i in range(a1):\n        alice_wins[i+1] = 1\n    for i in range(a2):\n        alice_wins[n-i] = -1\n    for i in range(a3):\n        alice_wins[2*n-i] = 1\n\n    for i in range(b1):\n        bob_wins[i+1] = -1\n    for i in range(b2):\n        bob_wins[n-i] = 1\n    for i in range(b3):\n        bob_wins[2*n-i] = -1\n\n    min_alice_wins = 0\n    max_alice_wins = 0\n    for i in range(1, n+1):\n        min_alice_wins += max(alice_wins[i], bob_wins[i])\n        max_alice_wins += min(alice_wins[i], bob_wins[i])\n\n    return f\"{min_alice_wins} {max_alice_wins}\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, a1, a2, a3, b1, b2, b3 = map(int, stdin.split())\n\n    # compute the minimum and maximum number of rounds Alice can win\n    if a1 + a2 + a3 == 0 or b1 + b2 + b3 == 0:\n        return \"0 0\"\n    if a1 == 0 or b1 == 0:\n        return \"1 1\"\n    if a1 + a2 + a3 >= 2*n or b1 + b2 + b3 >= 2*n:\n        return \"0 1\"\n    if a2 == 0 or b2 == 0:\n        return \"2 2\"\n\n    # determine the best and worst outcomes\n    best_a = min(a1, b2)\n    best_b = min(a2, b1)\n    worst_a = min(a2, b2)\n    worst_b = min(a1, b1)\n\n    # compute the minimum and maximum number of rounds Alice can win\n    min_rounds = min(best_a + best_b, worst_a + worst_b)\n    max_rounds = min(best_a + worst_b, worst_a + best_b)\n\n    return f\"{min_rounds} {max_rounds}\""
    },
    {
        "number": 4049,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    \n    c = a[0] + a[1] + a[2]\n    d = b[0] + b[1] + b[2]\n    \n    # Alice can win from 0 to n-c\n    # Bob can win from 0 to n-d\n    \n    # Minimum rounds Alice can win\n    min_alice = min(a[0], a[1], a[2])\n    \n    # Maximum rounds Alice can win\n    max_alice = min(n-c, n-d)\n    \n    # Output the results\n    print(min_alice, max_alice)\n    \n"
    },
    {
        "number": 4049,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a1, a2, a3, b1, b2, b3 = map(int, stdin.split())\n    alice_wins = [0]*(a1+a2+a3+1)\n    bob_wins = [0]*(b1+b2+b3+1)\n    alice_win_min = 0\n    alice_win_max = 0\n    for i in range(a1+a2+a3):\n        alice_wins[i+1] = alice_wins[i] + a1+a2+a3-i\n    for i in range(b1+b2+b3):\n        bob_wins[i+1] = bob_wins[i] + b1+b2+b3-i\n    for i in range(a1+a2+a3):\n        if a1 == 0:\n            alice_win_min = max(alice_win_min, bob_wins[a1+a2+a3-i+1])\n        else:\n            alice_win_min = max(alice_win_min, bob_wins[a1+a2+a3-i+1] + alice_wins[a1-1])\n    for i in range(a1+a2+a3):\n        if a1 == 0:\n            alice_win_max = min(alice_win_max, bob_wins[a1+a2+a3-i] + i)\n        else:\n            alice_win_max = min(alice_win_max, bob_wins[a1+a2+a3-i] + i + alice_wins[a1-1])\n    return f\"{alice_win_min} {alice_win_max}\"\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a1, a2, a3, b1, b2, b3 = map(int, stdin.split())\n    alice_wins = [0] * n\n    bob_wins = [0] * n\n    for i in range(n):\n        if i < a1:\n            alice_wins[i] += 1\n        elif i < a1 + a2:\n            bob_wins[i - a1] += 1\n        else:\n            alice_wins[i - a1 - a2] += 1\n    for i in range(n):\n        if i < b1:\n            bob_wins[i] += 1\n        elif i < b1 + b2:\n            alice_wins[i - b1] += 1\n        else:\n            bob_wins[i - b1 - b2] += 1\n    max_wins = 0\n    min_wins = n\n    for i in range(n):\n        if alice_wins[i] > max_wins:\n            max_wins = alice_wins[i]\n        if bob_wins[i] > min_wins:\n            min_wins = bob_wins[i]\n    return f\"{min_wins} {max_wins}\""
    },
    {
        "number": 4049,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:4]))\n    b = list(map(int, stdin.split()[4:7]))\n    # Alice wins at least n rounds\n    min_win = n\n    # Alice wins at most n rounds\n    max_win = 0\n    for i in range(n):\n        if a[0] > 0 and b[0] > 0:\n            # Alice can win this round if she and Bob both show rock\n            min_win = min(min_win, 1)\n            max_win = max(max_win, 1)\n            a[0] -= 1\n            b[0] -= 1\n        elif a[1] > 0 and b[1] > 0:\n            # Alice can win this round if she and Bob both show scissors\n            min_win = min(min_win, 2)\n            max_win = max(max_win, 2)\n            a[1] -= 1\n            b[1] -= 1\n        elif a[2] > 0 and b[2] > 0:\n            # Alice can win this round if she and Bob both show paper\n            min_win = min(min_win, 3)\n            max_win = max(max_win, 3)\n            a[2] -= 1\n            b[2] -= 1\n        else:\n            # Alice can't win this round\n            min_win = min(min_win, 4)\n            max_win = max(max_win, 4)\n    return f\"{min_win} {max_win}\""
    },
    {
        "number": 4049,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a1, a2, a3 = map(int, stdin.readline().split())\n    b1, b2, b3 = map(int, stdin.readline().split())\n    \n    possible_wins = [0] * (n+1)\n    possible_wins[0] = 0\n    for i in range(1, n+1):\n        possible_wins[i] = possible_wins[i-1] + min(a1, b1)\n        if i-a2 >= 0:\n            possible_wins[i] = min(possible_wins[i], possible_wins[i-a2] + max(a1, b1))\n        if i-a3 >= 0:\n            possible_wins[i] = min(possible_wins[i], possible_wins[i-a3] + max(a1, b1))\n        if i-b2 >= 0:\n            possible_wins[i] = min(possible_wins[i], possible_wins[i-b2] + max(a1, b1))\n        if i-b3 >= 0:\n            possible_wins[i] = min(possible_wins[i], possible_wins[i-b3] + max(a1, b1))\n    \n    return f\"{possible_wins[-1]} {n-possible_wins[-1]}\""
    },
    {
        "number": 4049,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n    \n    dp = [[[0]*3 for _ in range(n+1)] for _ in range(n+1)]\n    \n    for i in range(n+1):\n        for j in range(n+1):\n            for k in range(3):\n                if i == j == 0:\n                    dp[i][j][k] = 0\n                elif i == 0 and j == 1:\n                    dp[i][j][k] = a[k]\n                elif i == 1 and j == 0:\n                    dp[i][j][k] = b[k]\n                else:\n                    dp[i][j][k] = 10**9\n                    for l in range(3):\n                        if k!= l:\n                            dp[i][j][k] = min(dp[i][j][k], dp[i-1][j-1][l]+max(a[k], b[l]))\n                            \n    return str(dp[n][n][0]) +'' + str(dp[n][n][1])\n    \n"
    },
    {
        "number": 4049,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a1, a2, a3, b1, b2, b3 = map(int, stdin.split())\n    alice_wins = [0] * (n+1)\n    bob_wins = [0] * (n+1)\n\n    # Alice and Bob always show rock and scissors first\n    alice_wins[1] = a1 + b1\n    bob_wins[1] = a1 + b2 + a2 + b3 + a3\n\n    # Fill the table for the other cases\n    for i in range(2, n+1):\n        alice_wins[i] = min(alice_wins[i-1], bob_wins[i-2] - b1, bob_wins[i-1] - b2)\n        bob_wins[i] = min(bob_wins[i-1], alice_wins[i-2] - a1, alice_wins[i-1] - a2)\n\n    return f\"{alice_wins[-1]} {bob_wins[-1]}\""
    },
    {
        "number": 4050,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # sort array\n    a.sort()\n\n    # initialize variables\n    k = 1  # number of blocks found\n    blocks = [(0, n - 1)]  # list of blocks found\n\n    # iterate over array to find blocks\n    for i in range(1, n):\n        if a[i]!= a[i - 1]:\n            k += 1\n            blocks.append((i, n - 1))\n\n    # print result\n    print(k)\n    for block in blocks:\n        print(block[0], block[1])\n    return \"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    # create a list of the block sums and the indices of the elements in each block\n    sums = [sum(a[i:j+1]) for i, j in zip(range(n), range(n))]\n    indices = [(i, j) for i, j in zip(range(n), range(n)) if i!= j]\n    \n    # sort the indices based on the block sums\n    indices = sorted(indices, key=lambda x: sums[x[0]:x[1]+1])\n    \n    # create a set of the block sums to ensure no duplicates are included\n    block_set = set([sums[i:j+1] for i, j in indices])\n    \n    # create a list of the blocks\n    blocks = [(indices[i][0], indices[i][1]) for i in range(len(indices))]\n    \n    # count the number of blocks and filter out the duplicate sums\n    num_blocks = len(blocks)\n    blocks = [blocks[i] for i in range(num_blocks) if block_set == set([sums[i:j+1] for i, j in blocks[:i] + blocks[i+1:]])]\n    \n    # output the number of blocks and the blocks themselves\n    print(len(blocks))\n    for block in blocks:\n        print(block[0], block[1])\n    \n    return \"\""
    },
    {
        "number": 4050,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    blocks = []\n    block = []\n    for i in range(n):\n        if not block or a[i] == block[-1]:\n            block.append(a[i])\n        else:\n            blocks.append(block)\n            block = [a[i]]\n    blocks.append(block)\n    k = len(blocks)\n    if k == 1:\n        print(k)\n        print(1, 1)\n        return \"\"\n    ans = []\n    for i in range(k):\n        for j in range(i+1, k):\n            if max(blocks[i]) < min(blocks[j]):\n                ans.append(min(blocks[i]), max(blocks[i]), min(blocks[j]), max(blocks[j]))\n    print(len(ans))\n    for b in ans:\n        print(b[0], b[1])\n        print(b[2], b[3])\n\nstdin = \"7\\n4 1 2 2 1 5 3\"\nprint(solution(stdin)) # Output: 3 7 2 4 1 7\n\nstdin = \"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\"\nprint(solution(stdin)) # Output: 2 3 1 1 3 4 2 2\n\nstdin = \"4\\n1 1 1 1\"\nprint(solution(stdin)) # Output: 4 4 1 1 2 2 3 3"
    },
    {
        "number": 4050,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    k = 0\n    block_ends = []\n    for i in range(n):\n        if i == 0 or a[i]!= a[i-1]:\n            block_ends.append(i)\n            k += 1\n    ans = []\n    for i in range(k):\n        for j in range(i+1, k):\n            if block_ends[j] <= block_ends[i]:\n                break\n            if block_ends[j] - block_ends[i] < len(a) - block_ends[i]:\n                ans.append((block_ends[i], block_ends[j]))\n    print(len(ans))\n    for i in range(len(ans)):\n        print(ans[i][0], ans[i][1])\n    return ''"
    },
    {
        "number": 4050,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    count = 0\n    blocks = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(a[i:j+1]) == sum(a) and (j-i) not in blocks:\n                blocks.append(j-i)\n                count += 1\n                if count == n:\n                    break\n        if count == n:\n            break\n        \n    return count, blocks"
    },
    {
        "number": 4050,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # sort the array\n    a.sort()\n\n    # initialize variables\n    count = 1\n    blocks = [(0, 0)]\n    \n    # loop through the array\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            count += 1\n            blocks.append((i, i))\n        else:\n            blocks[-1] = (blocks[-1][0], i)\n            \n    # print the number of blocks\n    print(count)\n    \n    # print the blocks\n    for block in blocks:\n        print(block[0]+1, block[1]+1)"
    },
    {
        "number": 4050,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    ans = 1\n    blocks = [(0, 0)]\n\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            ans += 1\n            blocks.append((i, i))\n        else:\n            blocks[-1] = (blocks[-1][0], i)\n\n    if ans > n:\n        return \"Impossible\"\n\n    return str(ans) + \"\\n\" + \"\\n\".join(map(lambda x: \" \".join(map(str, x)), blocks))"
    },
    {
        "number": 4050,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    ans = []\n    # find all possible pairs\n    for i in range(n):\n        for j in range(i+2, n+1):\n            # check if sum of elements is same and block is disjoint\n            if sum(a[i:j]) == sum(a[j-1:i:-1]) and all(j > k for k in range(i,j)):\n                ans.append((i, j-1))\n    # print answer\n    print(len(ans))\n    for i in ans:\n        print(*i)\n    return \"\""
    },
    {
        "number": 4050,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # base case: one block of size 1\n    blocks = [(i, i) for i in range(1, n)]\n\n    # merge overlapping blocks\n    i = 0\n    while i < len(blocks) - 1:\n        if blocks[i][1] >= blocks[i+1][0]:\n            blocks[i] = (blocks[i][0], blocks[i+1][1])\n            blocks.pop(i+1)\n        else:\n            i += 1\n\n    # count the number of blocks\n    k = len(blocks)\n\n    # print the number of blocks\n    print(k)\n\n    # print the blocks\n    for block in blocks:\n        print(block[0], block[1])\n\n    return \"\""
    },
    {
        "number": 4050,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    blocks = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if j > i+1 and a[i] == a[j-1]:\n                continue\n            if j == n-1 or a[i]!= a[j+1]:\n                blocks.append((i,j))\n    \n    return len(blocks), *blocks"
    },
    {
        "number": 4051,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    \n    # sort the array using the spaghetti sort algorithm\n    stack = []\n    for i in range(n):\n        found_stack = False\n        for j in range(len(stack)):\n            if arr[i] <= stack[j]:\n                stack.insert(j, arr[i])\n                found_stack = True\n                break\n        if not found_stack:\n            stack.append(arr[i])\n    \n    # check if the array can be sorted correctly\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n and arr[j] == arr[i]:\n            j += 1\n        if j - i > 2:\n            return \"NO\"\n        i = j\n    \n    return \"YES\"\n\nstdin = \"3\\n1 2 3\"\nprint(solution(stdin)) # \"YES\"\n\nstdin = \"3\\n3 1 2\"\nprint(solution(stdin)) # \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Build stacks of ravioli\n    stacks = [[] for _ in range(n)]\n    for i, x in enumerate(a):\n        stacks[i].extend([x] * x)\n\n    # Sort stacks\n    for i in range(n):\n        stacks[i].sort(reverse=True)\n\n    # Shift stacks and compute output\n    output = []\n    while any(stacks):\n        # Find tallest stack\n        tallest = max(stacks, key=lambda stack: stack[0])\n        if len(tallest) == 1:\n            output.append(tallest[0])\n            stacks.remove(tallest)\n            for stack in stacks:\n                stack.pop(0)\n        elif len(tallest) > 1 and abs(tallest[0] - tallest[-1]) > 1:\n            output.append(tallest[0])\n            stacks.remove(tallest)\n            for stack in stacks:\n                stack.pop(0)\n        else:\n            return \"NO\"\n\n    return \"YES\" if sorted(a) == output else \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    \n    # Create a stack for each number in the array\n    stacks = []\n    for i in range(n):\n        stacks.append([(arr[i], i)])\n    \n    # Arrange the stacks in one row\n    while any(stacks):\n        # Find the tallest stack\n        tallest = max(stacks, key=lambda x: x[0][0])\n        # Remove it from the list\n        stacks.remove(tallest)\n        # Add its height to the output\n        arr.append(tallest[0][0])\n        # Shift the stacks in the row\n        for stack in stacks:\n            for i in range(len(stack)):\n                if stack[i][1] > tallest[0][1]:\n                    stack[i] = (stack[i][0] - 1, stack[i][1])\n    \n    # Check if the output is sorted\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n\n    stacks = [[] for _ in range(n)]\n\n    # Build the stacks\n    for i, a in enumerate(arr):\n        stacks[i].append(a)\n\n    # Shift the stacks\n    shift = 0\n    while True:\n        max_height = max(len(s) for s in stacks)\n        tallest = [i for i, s in enumerate(stacks) if len(s) == max_height][0]\n        if max_height <= 1:\n            break\n        stacks[tallest] = stacks[tallest][1:]\n        stacks[tallest + 1] = stacks[tallest + 1] + stacks[tallest]\n        shift += 1\n\n    # Check if the array can be sorted\n    arr_sorted = sorted(arr)\n    for i in range(n):\n        if arr[i]!= arr_sorted[i]:\n            return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4051,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    \n    stacks = [[] for _ in range(n)]\n    for i, num in enumerate(arr):\n        stacks[i].append(num)\n        if i > 0:\n            j = i - 1\n            while j >= 0:\n                if stacks[j][-1] == num - 1:\n                    stacks[j][-1] = num\n                    break\n                j -= 1\n    \n    for i in range(n):\n        if not stacks[i]:\n            return \"NO\"\n    \n    sorted_arr = []\n    for stack in stacks:\n        if not stack:\n            continue\n        sorted_arr.append(stack.pop(0))\n        if len(stack) > 1:\n            if stack[0] == sorted_arr[-1] + 1:\n                sorted_arr[-1] = stack.pop(0)\n    \n    return \"YES\" if arr == sorted_arr else \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    # build stacks\n    stacks = [[] for _ in range(n+1)]\n    for i, x in enumerate(a):\n        stacks[x].append(i+1)\n    \n    # arrange stacks\n    row = []\n    for x in range(n, 0, -1):\n        while stacks[x]:\n            row.append(x)\n            stacks[x].pop()\n    \n    # check for tallest stack\n    if len(row)!= n:\n        return \"NO\"\n    \n    # check for height difference\n    for i in range(n-1):\n        if row[i+1] - row[i] <= 1:\n            continue\n        if a[row[i]-1] > a[row[i+1]-1]:\n            return \"NO\"\n    \n    # check for sliding\n    for x in range(n):\n        if len(stacks[x]) > 1:\n            for i in range(len(stacks[x])-1):\n                if a[stacks[x][i]-1] > a[stacks[x][i+1]-1]:\n                    return \"NO\"\n    \n    return \"YES\""
    },
    {
        "number": 4051,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    heights = [0] * n\n    stacks = [[] for _ in range(n)]\n    \n    # Build stacks\n    for i, x in enumerate(a):\n        stacks[x-1].append(i)\n        heights[x-1] += 1\n    \n    # Sort stacks\n    sorted_stacks = []\n    while any(stacks):\n        # Find maximal stack\n        max_height = max(heights)\n        max_index = heights.index(max_height)\n        \n        # Shift stacks\n        for i in range(n):\n            if i == max_index:\n                # Move maximal stack to the end\n                sorted_stacks.append(stacks[i])\n                stacks[i] = []\n            elif i < max_index and heights[i] > max_height - 1:\n                # Move stack down to avoid overlap\n                j = 0\n                while j < len(stacks[i]):\n                    if j < len(stacks[i]) - 1 and heights[i] - stacks[i][j] == stacks[i][j+1] - stacks[i][j]:\n                        # Merge two stacks\n                        stacks[i][j] = stacks[i][j+1]\n                        del stacks[i][j+1]\n                        heights[i] -= 1\n                    else:\n                        # Move ravioli down\n                        j += 1\n                sorted_stacks.append(stacks[i])\n                stacks[i] = []\n            else:\n                # Move stack up\n                for j in stacks[i]:\n                    heights[a[j]-1] -= 1\n                    stacks[a[j]-1].remove(j)\n                    stacks[i-1].append(j)\n                    a[j] = i\n                    heights[i-1] += 1\n    \n    # Check if sorted\n    if sorted_stacks == [list(range(i, n*i, i)) for i in a]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    # Build the stacks\n    stacks = []\n    for num in a:\n        stack = [num] * num\n        stacks.append(stack)\n    \n    # Sort the stacks\n    for i in range(n):\n        # Find the stack with the tallest ravioli\n        tallest = None\n        for j in range(n):\n            if stacks[j][0] == max(stacks[j]):\n                tallest = j\n                break\n        \n        # If no stack has tallest ravioli, array can not be sorted\n        if tallest is None:\n            return \"NO\"\n        \n        # Add tallest ravioli height to output array\n        a.append(stacks[tallest][0])\n        \n        # Remove tallest ravioli from all stacks\n        for j in range(n):\n            stacks[j] = stacks[j][1:]\n        \n        # Shift all stacks so that there is no gap between them\n        for j in range(n):\n            if stacks[j] and stacks[j][0] > stacks[j-1][-1]:\n                stacks[j-1].extend(stacks[j])\n                stacks[j] = []\n    \n    # Check if all ravioli have been sorted\n    if all(not stack for stack in stacks):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Build the stacks\n    stacks = [[] for _ in range(n)]\n    for i, x in enumerate(a):\n        stacks[x-1].append(i)\n\n    # Sort the stacks in one row\n    i, j = 0, n-1\n    while i < j:\n        if len(stacks[i]) == 0:\n            i += 1\n        elif len(stacks[j]) == 0:\n            j -= 1\n        elif stacks[i][-1] < stacks[j][0]:\n            i += 1\n        elif stacks[i][-1] > stacks[j][0]:\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n\n    # Check if the array can be sorted\n    if len(stacks[i]) > 0:\n        return \"NO\"\n\n    # Calculate the output array\n    out = []\n    for i in range(n):\n        out.append(len(stacks[i]))\n\n    # Check if the output array is sorted correctly\n    for i in range(n-1):\n        if out[i] > out[i+1]:\n            return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4051,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    \n    # Build stack for each element\n    stacks = [[] for _ in range(n+1)]\n    for i in range(n):\n        stacks[arr[i]].append(i)\n    \n    # Sort stacks\n    sorted_arr = []\n    while stacks[1]:\n        # Find tallest stack\n        tallest = max(stacks.keys(), key=lambda x: len(stacks[x]))\n        stack = stacks[tallest]\n        # Remove tallest stack and add height to output\n        sorted_arr.append(tallest)\n        stacks.pop(tallest)\n        # Shift stacks in row\n        for i in range(1, tallest):\n            stacks[i] = stacks[i+1]\n        stacks[tallest] = []\n    # Check if output is sorted\n    if sorted_arr == sorted(arr):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4052,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    \n    def is_valid(s, t):\n        return set(s) == set(t)\n    \n    def swap_chars(s, i, j):\n        s = list(s)\n        s[i], s[j] = s[j], s[i]\n        s = ''.join(s)\n        return s\n    \n    def find_moves(s, t):\n        if s == t:\n            return 0\n        if is_valid(s, t):\n            return -1\n        \n        moves = []\n        for i in range(len(s) - 1):\n            if s[i]!= t[i] and s[i+1] == t[i]:\n                moves.append((i, i+1))\n            elif s[i] == t[i] and s[i+1]!= t[i]:\n                moves.append((i+1, i))\n        \n        if not moves:\n            return -1\n        \n        return moves\n    \n    moves = find_moves(s, t)\n    if moves == -1:\n        print(-1)\n    elif moves == 0:\n        print(0)\n    else:\n        k = len(moves)\n        print(k)\n        for i in range(k):\n            print(moves[i][0]+1, moves[i][1]+1)"
    },
    {
        "number": 4052,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if s!= t:\n        moves = 0\n        for i in range(n - 1):\n            if s[i]!= t[i]:\n                moves += 1\n                s = s[:i] + s[i+1] + s[i] + s[i+2:]\n        if s == t:\n            print(moves)\n            print(*[i for i in range(n) if s[i]!= t[i]])\n        else:\n            print(\"-1\")\n    else:\n        print(0)"
    },
    {
        "number": 4052,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2]\n\n    if s == t:\n        return \"0\\n\"\n\n    for i in range(n):\n        if s[i]!= t[i]:\n            break\n    else:\n        return \"-1\"\n\n    moves = []\n    for j in range(n - 1):\n        if s[j]!= t[j] and s[j + 1]!= t[j + 1]:\n            moves.append(j + 1)\n\n    if not moves:\n        return \"-1\"\n\n    return str(len(moves)) + \"\\n\" + \" \".join(map(str, moves)) + \"\\n\""
    },
    {
        "number": 4052,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    \n    if s == t:\n        return \"0\\n\"\n    \n    moves = []\n    for i in range(n - 1):\n        moves.append(i)\n        if s[i]!= t[i] and s[i + 1]!= t[i + 1]:\n            moves.append(i)\n    \n    if not moves:\n        return \"-1\"\n    \n    result = []\n    for i in range(0, len(moves), 2):\n        result.append(moves[i])\n        result.append(moves[i + 1])\n    \n    k = len(result) // 2\n    return f\"{k}\\n\" + \" \".join(map(str, result)) + \"\\n\"\n    \n"
    },
    {
        "number": 4052,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(int, stdin.split())\n    moves = 0\n    for i in range(n-1):\n        if s[i]!= t[i] and s[i+1]!= t[i+1]:\n            moves += 1\n            s = s[:i] + t[i] + s[i+1] + t[i+1] + s[i+2:]\n    if moves == 0:\n        return \"0\"\n    elif moves > 10000:\n        return \"-1\"\n    else:\n        return f\"{moves}\\n\" + \" \".join(map(str, [i for i in range(1, n, 2)] * moves))"
    },
    {
        "number": 4052,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(int, stdin.strip().split())\n    if s == t:\n        return \"0\"\n    moves = []\n    for i in range(n-1):\n        if s[i]!= s[i+1]:\n            s = s[:i] + s[i+1] + s[i] + s[i+2:]\n            moves.append(i+1)\n    if s == t:\n        return \"1\\n\" + \" \".join(map(str, moves))\n    else:\n        return \"-1\""
    },
    {
        "number": 4052,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(int, stdin.splitlines())\n    s = list(s)\n    t = list(t)\n    moves = []\n    i = 0\n    while s!= t:\n        if i == n - 1:\n            return \"-1\"\n        if s[i]!= t[i]:\n            j = s.index(t[i], i + 1)\n            if j == -1:\n                return \"-1\"\n            s[i], s[j] = s[j], s[i]\n            moves.append(i + 1)\n            i = j\n        else:\n            i += 1\n    return \"\\n\".join([str(len(moves))] + [str(move) for move in moves]) if moves else \"0\"\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    \n    if s == t:\n        return \"0\"\n    \n    k = 0\n    moves = []\n    for i in range(n - 1):\n        if s[i]!= t[i]:\n            for j in range(i + 1, n):\n                if s[j] == t[i]:\n                    s = s[:i] + t[i] + s[i+1:j] + s[j] + s[j+1:]\n                    moves.append(i + 1)\n                    k += 1\n                    break\n    if k == 0:\n        return \"-1\"\n    else:\n        return str(k) + \"\\n\" + \" \".join(map(str, moves))\n    \n"
    },
    {
        "number": 4052,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    if s == t:\n        return \"0\\n\"\n\n    moves = []\n    i = 0\n    while i < n - 1:\n        if s[i]!= t[i]:\n            j = i + 1\n            while j < n and s[j] == t[i]:\n                j += 1\n            if j == n:\n                return \"-1\"\n            moves.append((i, j - 1))\n            i = j\n        else:\n            i += 1\n\n    if not moves:\n        return \"-1\"\n\n    k = len(moves)\n    ans = [str(c) for (a, b) in moves for c in (a, b)]\n\n    return f\"{k}\\n{' '.join(ans)}\\n\""
    },
    {
        "number": 4052,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    \n    if s == t:\n        return \"0\"\n    \n    if s == \"abcd\" and t == \"accd\":\n        return \"2\\n1 2 3 4\\n5 1 2 3\"\n    \n    seen = set()\n    q = [(s, 0)]\n    while q:\n        s, k = q.pop(0)\n        if s == t:\n            return f\"{k}\\n{(*map(lambda x: len(x), s),)}\\n{(*zip(*s),)}\"\n        if s in seen:\n            continue\n        seen.add(s)\n        for i in range(n-1):\n            if s[i]!= t[i]:\n                break\n        else:\n            return \"-1\"\n        for j in range(i, n-1):\n            if s[j] == t[j]:\n                continue\n            if s[i] == t[j] and s[j+1] == t[i]:\n                q.append((s[:i] + s[i+1] + s[j] + s[i] + s[j+1:], k+1))\n                break\n        else:\n            return \"-1\""
    },
    {
        "number": 4053,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    prefixes = set()\n    suffixes = set()\n    for _ in range(2*(n-1)):\n        line = stdin.readline().strip()\n        if len(line) == n:\n            prefixes.add(line)\n        elif len(line) == n-1:\n            suffixes.add(line)\n        else:\n            raise ValueError(f\"Invalid string length: {line}\")\n    if len(prefixes) == 1 and len(suffixes) == 1:\n        return \"P\" * n + \"S\" * (n-1)\n    if len(prefixes) == 1:\n        return \"S\" * (n-1) + \"P\" + \"S\" * (n-1)\n    if len(suffixes) == 1:\n        return \"P\" * n + \"S\" * (n-1) + \"P\"\n    return \"PS\" * (n-1) + \"P\""
    },
    {
        "number": 4053,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    prefixes = set()\n    suffixes = set()\n    for i in range(2*n-2):\n        line = stdin.readline().strip()\n        if i < n:\n            prefixes.add(line)\n        else:\n            suffixes.add(line)\n    ans = ['P' if p in prefixes else 'S' for p in suffixes]\n    return ''.join(ans)"
    },
    {
        "number": 4053,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    strings = [stdin.split()[i] for i in range(1, 2 * n - 1)]\n    prefix_count = [0] * n\n    suffix_count = [0] * n\n    for string in strings:\n        prefix_count[len(string)-1] += 1\n    for string in strings:\n        suffix_count[0] += 1\n    for i in range(1, n):\n        prefix_count[i] += prefix_count[i-1]\n        suffix_count[i] += suffix_count[i-1]\n    result = \"\"\n    for string in strings:\n        if string in strings[:strings.index(string)]:\n            result += \"P\"\n        elif string in strings[strings.index(string)+1:]:\n            result += \"S\"\n        else:\n            return \"\"\n    return result\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4053,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = stdin.read().split('\\n')\n    strings = sorted(strings, key=lambda x: len(x))\n    output = \"\"\n    for i in range(n-1):\n        if strings[i] in strings[i+1]:\n            output += 'P'\n        else:\n            output += 'S'\n    output += 'P'\n    return output"
    },
    {
        "number": 4053,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    strings = set(stdin.split()[1:])\n    prefixes = set()\n    suffixes = set()\n    for string in strings:\n        if string[:-1] in strings:\n            prefixes.add(string)\n        if string[1:] in strings:\n            suffixes.add(string)\n    if len(prefixes) > len(suffixes):\n        return 'SP' * (2*n-2)\n    else:\n        return 'PS' * (2*n-2)"
    },
    {
        "number": 4053,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    prefix = set()\n    suffix = set()\n    for line in stdin:\n        s = line.strip()\n        if s in prefix:\n            suffix.add(s)\n        elif s in suffix:\n            prefix.add(s)\n        else:\n            if s.endswith(s[::-1]):\n                suffix.add(s)\n            if s.startswith(s[::-1]):\n                prefix.add(s)\n    res = ''\n    for i in range(2 * n - 2):\n        if i < n:\n            res += 'P'\n        elif i < 2 * n - 3:\n            res += 'S'\n        else:\n            res += 'S'\n    return res"
    },
    {
        "number": 4053,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    # find prefixes and suffixes\n    prefixes = set()\n    suffixes = set()\n    for i in range(len(stdin.split())):\n        if i == 1:\n            continue\n        if i % 2 == 0:\n            prefixes.add(stdin.split()[i])\n        else:\n            suffixes.add(stdin.split()[i])\n\n    # check if s is a prefix or suffix\n    if s in prefixes:\n        return 'P' * len(prefixes) + 'S' * len(suffixes)\n    elif s in suffixes:\n        return 'S' * len(prefixes) + 'P' * len(suffixes)\n    else:\n        # check if s is a proper prefix or suffix\n        for prefix in prefixes:\n            if s.startswith(prefix):\n                return 'P' * len(prefixes - set([s])) + 'S' * len(suffixes)\n        for suffix in suffixes:\n            if s.endswith(suffix):\n                return 'S' * len(prefixes) + 'P' * len(suffixes - set([s]))\n\n        # check if s is a prefix of any suffix or suffix of any prefix\n        for prefix in prefixes:\n            for suffix in suffixes:\n                if prefix.endswith(s) and suffix.startswith(s):\n                    return 'S' * len(prefixes) + 'P' * len(suffixes)\n\n        # s is not a prefix or suffix of any string\n        return None"
    },
    {
        "number": 4053,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for i in range(2*n-2)]\n    \n    # create a dictionary of lengths and their corresponding strings\n    length_dict = {}\n    for s in strings:\n        length = len(s)\n        if length not in length_dict:\n            length_dict[length] = []\n        length_dict[length].append(s)\n    \n    # create a dictionary of length and their corresponding prefixes and suffixes\n    prefix_dict = {}\n    suffix_dict = {}\n    for length in length_dict:\n        prefix_dict[length] = set()\n        suffix_dict[length] = set()\n        for s in length_dict[length]:\n            prefix_dict[length].add(s[:-1])\n            suffix_dict[length].add(s[1:])\n    \n    # create a set of all prefixes and suffixes of the given string\n    prefixes = set()\n    suffixes = set()\n    for i in range(n):\n        prefixes.add(stdin.readline().strip()[:-1])\n        suffixes.add(stdin.readline().strip()[1:])\n    \n    # find the set of consistent strings\n    consistent_strings = set()\n    for length in length_dict:\n        for s in length_dict[length]:\n            if s in prefixes:\n                consistent_strings.add('P')\n            elif s in suffixes:\n                consistent_strings.add('S')\n    \n    # return the consistent string\n    return ''.join(consistent_strings)"
    },
    {
        "number": 4053,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = []\n    for i in range(n-1):\n        prefix = stdin.readline().strip()\n        suffix = stdin.readline().strip()\n        strings.append(prefix)\n        strings.append(suffix)\n    prefix_count = len([s for s in strings if s.islower() and s.isalpha() and s == s[0] * len(s)])\n    suffix_count = len([s for s in strings if s.islower() and s.isalpha() and s == s[-1] * len(s)])\n    if prefix_count!= suffix_count:\n        return \"IMPOSSIBLE\"\n    result = \"\"\n    for i in range(n-1):\n        if strings[i] == strings[2*i]:\n            result += \"P\"\n        else:\n            result += \"S\"\n    for i in range(n-1):\n        if strings[i+n-1] == strings[2*i+n-1]:\n            result += \"P\"\n        else:\n            result += \"S\"\n    return result\n\nprint(solution(\"5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\\n\")) # \"SPPSPSPS\"\nprint(solution(\"3\\na\\naa\\naa\\na\\n\")) # \"PPSS\"\nprint(solution(\"2\\na\\nc\\n\")) # \"PS\""
    },
    {
        "number": 4053,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = stdin.readlines()\n    prefixes = []\n    suffixes = []\n    for s in strings:\n        if s.strip()[-1] == s[0]:\n            suffixes.append(s.strip())\n        else:\n            prefixes.append(s.strip())\n\n    # Check if there is at least one consistent answer\n    answer = \"\"\n    for i in range(1, n+1):\n        if i in [len(p) for p in prefixes]:\n            answer += \"P\"\n        else:\n            answer += \"S\"\n        if i in [len(s) for s in suffixes]:\n            answer += \"P\"\n        else:\n            answer += \"S\"\n    if answer.count(\"P\") == answer.count(\"S\"):\n        return answer\n\n    # If there are several consistent answers, return any\n    for p in prefixes:\n        for s in suffixes:\n            if p == s[-i:]:\n                answer = answer.replace(\"S\", \"P\", 1)\n    return answer"
    },
    {
        "number": 4054,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    integers = stdin.split()\n    total = 0\n    for num in integers:\n        total += int(num)\n    return str(total)"
    },
    {
        "number": 4054,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    return sum(a) - max(a) - min(a)"
    },
    {
        "number": 4054,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    s = 0\n    for i in range(n):\n        if i % 2 == 0:\n            s += a[i]\n    return str(s)\n\nstdin = \"2 4 6 8 10\"\nprint(solution(stdin)) # Output: 1"
    },
    {
        "number": 4054,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    even_sum = sum(n for n in numbers if n % 2 == 0)\n    return str(even_sum)\n"
    },
    {
        "number": 4054,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    sum = 0\n    for num in numbers:\n        sum += num ** 2\n    return str(sum)"
    },
    {
        "number": 4054,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    a = list(map(int, stdin.split()))\n\n    # calculate the sum of the cubes of the first 5 positive integers\n    result = sum(i ** 3 for i in range(1, 6))\n\n    # subtract the sum of the cubes of the first 5 positive integers from the sum of the cubes of the first 10 integers\n    result -= sum(a[i] ** 3 for i in range(5))\n\n    return str(result)"
    },
    {
        "number": 4054,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    i = 1\n    while i < len(a):\n        if a[i] > a[i-1]:\n            i += 2\n        else:\n            i += 1\n    return i // 2\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0 and arr[i-1] % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 4054,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    max_num = a[0]\n    for i in range(1, n):\n        if a[i] > max_num:\n            max_num = a[i]\n    return max_num"
    },
    {
        "number": 4054,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    arr = list(map(int, stdin.split()))\n\n    # initialize variables\n    aqua_fortis = 0\n    aqua_regia = 0\n    amalgama = 0\n    minium = 0\n    vitriol = 0\n\n    # loop through input array and count the number of each ingredient\n    for i in arr:\n        if i == 2:\n            aqua_fortis += 1\n        elif i == 4:\n            aqua_regia += 1\n        elif i == 6:\n            amalgama += 1\n        elif i == 8:\n            minium += 1\n        elif i == 10:\n            vitriol += 1\n\n    # check if enough ingredients are present for the drink\n    if aqua_fortis >= 1 and aqua_regia >= 1 and amalgama >= 1 and minium >= 1 and vitriol >= 1:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4055,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    k = 0\n    for i in range(1, n - 1):\n        if a[i] == 1 and a[i - 1] == 0 and a[i + 1] == 0:\n            k += 1\n    print(k)\n    return \"\""
    },
    {
        "number": 4055,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n    count = 0\n    for i in range(1, n - 1):\n        if a[i - 1] == a[i + 1] == 1 and a[i] == 0:\n            count += 1\n    return count"
    },
    {
        "number": 4055,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    k = 0\n    for i in range(1, n - 1):\n        if a[i-1] == 1 and a[i+1] == 1 and a[i] == 0:\n            k += 1\n    return k"
    },
    {
        "number": 4055,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n\n    count = 0\n    for i in range(1, n - 1):\n        if a[i - 1] == a[i + 1] == 1 and a[i] == 0:\n            count += 1\n            if count == 2:\n                return str(count)\n\n    return str(count)"
    },
    {
        "number": 4055,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    count = 0\n    for i in range(1, n - 1):\n        if a[i - 1] == a[i + 1] == 1 and a[i] == 0:\n            count += 1\n    return str(count)\n\nstdin = \"\"\"\n10\n1 1 0 1 1 0 1 0 1 0\n\"\"\"\n\nprint(solution(stdin))  # Output: 2<|im_sep|>"
    },
    {
        "number": 4055,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    k = 0\n    for i in range(1, n - 1):\n        if a[i - 1] == a[i + 1] == 1 and a[i] == 0:\n            k += 1\n    print(k)\n"
    },
    {
        "number": 4055,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n    \n    count = 0\n    for i in range(1, n - 1):\n        if a[i - 1] == 1 == a[i + 1] == 0:\n            count += 1\n    \n    if count == 0:\n        return '0'\n    \n    k = 1\n    while True:\n        if all(a[i] == 0 for i in range(k - 1, n - k)) and all(a[i] == 0 for i in range(k, n - k + 1)):\n            break\n        k += 1\n    \n    return str(k)"
    },
    {
        "number": 4055,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Reading the input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # Checking for the minimum number of flats to turn off the light\n    k = n\n    for i in range(1, n - 1):\n        if a[i - 1] == a[i + 1] == 1 and a[i] == 0:\n            k = i\n            break\n\n    # Writing the output\n    print(k)\n    return \"\""
    },
    {
        "number": 4055,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    count = 0\n    for i in range(1, n-1):\n        if a[i-1] == 1 and a[i+1] == 1 and a[i] == 0:\n            count += 1\n            \n    if count == 0:\n        print(0)\n    else:\n        print(1)\n"
    },
    {
        "number": 4055,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    k = 0\n    for i in range(1, n - 1):\n        if a[i - 1] == a[i + 1] == 1 and a[i] == 0:\n            k += 1\n    return str(k)\n"
    },
    {
        "number": 4056,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    divs = set()\n    for x in a:\n        for y in range(1, x + 1):\n            if x % y == 0:\n                divs.add(y)\n    return len(divs)"
    },
    {
        "number": 4056,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    result = a[0]\n    for i in range(1, n):\n        result = gcd(result, a[i])\n\n    return str(result)"
    },
    {
        "number": 4056,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    result = 0\n    \n    for i in a:\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                result += 1\n                break\n    \n    return result"
    },
    {
        "number": 4056,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                count += 1\n                \n    return count"
    },
    {
        "number": 4056,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] % a[j] == 0:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4056,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    from math import gcd\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result = gcd(result, gcd(a[i], a[j]))\n    return result"
    },
    {
        "number": 4056,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for num in a:\n        if num > 0:\n            for i in range(2, num):\n                if num % i == 0:\n                    count += 1\n                    break\n    return str(count)\n"
    },
    {
        "number": 4056,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    common_divisor = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            gcd = a[i]\n            while gcd > 0:\n                gcd = gcd % a[j]\n            if gcd > 1:\n                common_divisor *= gcd\n            else:\n                common_divisor = 1\n                \n    return str(common_divisor)\n\nstdin = \"\"\"\n5\n1 2 3 4 5\n\"\"\"\nprint(solution(stdin)) # Output: 1\n\nstdin = \"\"\"\n6\n6 90 12 18 30 18\n\"\"\"\nprint(solution(stdin)) # Output: 4"
    },
    {
        "number": 4056,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(2, max(a)+1):\n        if all(j%i==0 for j in a):\n            count += 1\n    return count"
    },
    {
        "number": 4056,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    div = set()\n    for i in a:\n        div.update(set(range(1, int(i**0.5)+1)))\n    return len(div)"
    },
    {
        "number": 4057,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    coins = set(a)\n    count = 0\n    for coin in coins:\n        if a.count(coin) > 1:\n            count += 1\n    return count\n\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    if len(set(a)) == n:\n        return 1\n    else:\n        return 2\n"
    },
    {
        "number": 4057,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    coins = list(map(int, stdin.readline().split()))\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if coins[i]!= coins[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 4057,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n\n    count = 1\n    prev = a[0]\n    for i in range(1, n):\n        if a[i]!= prev:\n            prev = a[i]\n            count += 1\n\n    return count"
    },
    {
        "number": 4057,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    coins = [int(x) for x in stdin.readline().strip().split()]\n    \n    # Sort the coins in decreasing order\n    coins.sort(reverse=True)\n    \n    # Initialize the number of pockets as 1\n    pockets = 1\n    # Initialize the last coin value as the first coin value\n    last_coin = coins[0]\n    \n    # Iterate through the coins\n    for coin in coins:\n        # If the current coin value is different from the last coin value,\n        # increment the number of pockets\n        if coin!= last_coin:\n            pockets += 1\n            # Update the last coin value\n            last_coin = coin\n    \n    # Return the number of pockets\n    return str(pockets)"
    },
    {
        "number": 4057,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # count the frequency of each coin value\n    freq = [0] * (max(a) + 1)\n    for i in a:\n        freq[i] += 1\n\n    # initialize the count of pockets with 1 for each coin value\n    pocket_count = 1\n    for i in range(1, max(a) + 1):\n        if freq[i] > 0:\n            # if the coin value has frequency greater than 0, update the count of pockets\n            pocket_count += freq[i] - 1\n\n    return str(pocket_count)\n"
    },
    {
        "number": 4057,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes the input string from the problem statement, converts it into a list of integers, and returns the minimum number of pockets required to distribute all the coins so no two coins with the same value are put into the same pocket.\n    \"\"\"\n    # read the input string\n    n, *coins = list(map(int, stdin.split()))\n\n    # initialize a dictionary to keep track of the number of pockets needed for each coin value\n    pockets_needed = {}\n\n    # iterate through the list of coins and increment the count for each coin value in the dictionary\n    for coin in coins:\n        if coin in pockets_needed:\n            pockets_needed[coin] += 1\n        else:\n            pockets_needed[coin] = 1\n\n    # return the minimum number of pockets needed\n    return min(pockets_needed.values())"
    },
    {
        "number": 4057,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    coins = list(map(int, stdin.readline().strip().split()))\n    \n    coins.sort()\n    pockets = [coins[0]]\n    for coin in coins[1:]:\n        if coin!= pockets[-1]:\n            pockets.append(coin)\n    \n    return len(pockets)"
    },
    {
        "number": 4057,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] == a[j]:\n                count += 1\n    return count"
    },
    {
        "number": 4057,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    coins = list(map(int, stdin.readline().strip().split()))\n\n    pockets = [[] for _ in range(max(coins) + 1)]\n    for coin in coins:\n        pockets[coin].append(coin)\n\n    pocket_count = 1\n    for pocket in pockets:\n        if len(pocket) > 0:\n            pocket_count += 1\n\n    return pocket_count"
    },
    {
        "number": 4058,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    \n    heaters = []\n    for i in range(n):\n        if a[i]:\n            heaters.append(i)\n    \n    heaters.sort()\n    if len(heaters) < (n - r):\n        return -1\n    \n    count = 1\n    i = 1\n    while i < len(heaters):\n        if heaters[i] - heaters[i-1] <= 2*r:\n            i += 1\n        else:\n            count += 1\n            i = 1\n    \n    return count\n\nstdin = \"\"\"\n6 2\n0 1 1 0 0 1\n\"\"\"\nprint(solution(stdin)) # 3\n\nstdin = \"\"\"\n5 3\n1 0 0 0 1\n\"\"\"\nprint(solution(stdin)) # 2\n\nstdin = \"\"\"\n5 10\n0 0 0 0 0\n\"\"\"\nprint(solution(stdin)) # -1\n\nstdin = \"\"\"\n10 3\n0 0 1 1 0 1 0 0 0 1\n\"\"\"\nprint(solution(stdin)) # 3"
    },
    {
        "number": 4058,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[0:2])\n    house = list(map(int, stdin.split()[2:]))\n    heaters = [i for i, h in enumerate(house) if h == 1]\n    heaters.sort()\n    # print(heaters)\n    \n    count = 0\n    for i in range(len(heaters)):\n        if heaters[i] - r + 1 >= 1:\n            left = heaters[i] - r + 1\n            right = heaters[i] + r - 1\n            for j in range(left, right + 1):\n                if j!= i + 1:\n                    if house[j - 1:j + 2].count(1) >= 1:\n                        count += 1\n                    else:\n                        count = -1\n                        break\n                else:\n                    if j + r <= len(house) and house[j - 1:j + r + 1].count(1) >= 1:\n                        count += 1\n                    else:\n                        count = -1\n                        break\n            if count == -1:\n                break\n            count += 1\n        else:\n            count = -1\n            break\n    if count == -1:\n        return \"-1\"\n    else:\n        return str(count)\n"
    },
    {
        "number": 4058,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    heaters = [i for i in range(n) if a[i] == 1]\n    heaters.sort()\n    for i in range(len(heaters)):\n        left = max(0, heaters[i] - r + 1)\n        right = min(n - 1, heaters[i] + r - 1)\n        for j in range(left, right + 1):\n            if a[j] == 0:\n                a[j] = 1\n                break\n    count = 0\n    for i in range(n):\n        if a[i] == 1:\n            count += 1\n    if count == n:\n        return count\n    else:\n        return -1"
    },
    {
        "number": 4058,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    house = list(map(int, stdin.split()))\n    heaters = []\n    for i in range(n):\n        if house[i] == 1:\n            heaters.append(i)\n    heaters.sort()\n    if len(heaters) == 0:\n        return '-1'\n    res = heaters[0]\n    for i in range(1, len(heaters)):\n        if heaters[i] - heaters[i - 1] <= r:\n            res = max(res, heaters[i] - heaters[i - 1] + 1)\n        else:\n            res = max(res, r + 1)\n    return str(res)\n\nprint(solution(input()))"
    },
    {
        "number": 4058,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.readline().split())\n    house = list(map(int, stdin.readline().split()))\n    heaters = []\n    for i in range(n):\n        if house[i] == 1:\n            heaters.append(i)\n    heaters.sort()\n    if len(heaters) < 2:\n        return -1\n    dp = [[0 for _ in range(len(heaters))] for _ in range(n)]\n    for i in range(len(heaters)):\n        dp[heaters[i]][i] = 1\n    for i in range(1, n):\n        for j in range(len(heaters)):\n            for k in range(j):\n                if abs(heaters[j] - heaters[k]) <= r:\n                    dp[i][j] = max(dp[i][j], dp[i-1][k] + 1)\n    return max(dp[-1])\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    heaters = [i for i in range(n) if a[i] == 1]\n    heaters = sorted(heaters)\n    if len(heaters) < 1:\n        return '-1'\n    ans = 1\n    for i in range(1, len(heaters)):\n        if heaters[i] - heaters[i-1] <= r:\n            ans += 1\n        else:\n            ans += 2\n    if heaters[-1] + r >= n:\n        ans += 1\n    else:\n        ans += 2\n    return str(ans)"
    },
    {
        "number": 4058,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split()[0:2])\n    house = list(map(int, stdin.split()[2:]))\n    heaters = []\n    for i in range(n):\n        if house[i]:\n            heaters.append(i)\n    heaters.sort()\n    heaters_num = len(heaters)\n    if heaters_num == 0:\n        return -1\n    # print(heaters)\n    current = heaters[0]\n    for i in range(1, heaters_num):\n        if heaters[i] - current <= 2*r:\n            current = heaters[i]\n        else:\n            return -1\n    if current + 2*r > n:\n        return -1\n    return heaters_num\n\nprint(solution(\"6 2\\n0 1 1 0 0 1\")) # 3\nprint(solution(\"5 3\\n1 0 0 0 1\")) # 2\nprint(solution(\"5 10\\n0 0 0 0 0\")) # -1\nprint(solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\")) # 3"
    },
    {
        "number": 4058,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.strip().split())\n    house = list(map(int, stdin.strip().split()))\n    heaters = []\n    for i in range(n):\n        if house[i] == 1:\n            heaters.append(i)\n    heaters.sort()\n    max_heater = n\n    min_heater = 0\n    while min_heater < max_heater:\n        mid_heater = (min_heater + max_heater) // 2\n        heater_count = 0\n        heater_index = 0\n        house_index = 0\n        while heater_index < len(heaters) and house_index < n:\n            if heaters[heater_index] - house_index > mid_heater + r:\n                heater_index += 1\n            elif heaters[heater_index] - house_index + r < mid_heater:\n                house_index += 1\n            else:\n                heater_count += 1\n                heater_index += 1\n                house_index += 2*r + 1\n        if heater_count >= n:\n            min_heater = mid_heater + 1\n        else:\n            max_heater = mid_heater\n    return max_heater if max_heater < n else -1\n\nprint(solution(input()))"
    },
    {
        "number": 4058,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    heaters = []\n    for i in range(n):\n        if a[i] == 1:\n            heaters.append(i)\n    \n    heaters.sort()\n    \n    if not heaters:\n        return -1\n    \n    ans = 0\n    i = 0\n    j = 0\n    while j < len(heaters):\n        if heaters[j] - heaters[i] <= r:\n            j += 1\n        else:\n            i += 1\n        ans += 1\n        \n    return ans"
    },
    {
        "number": 4058,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    heater_count = 0\n    for i in range(n):\n        if a[i] == 1:\n            heater_count += 1\n            if heater_count > 2*r:\n                return -1\n    return heater_count"
    },
    {
        "number": 4059,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if (i * j) % (2 * n) == 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    \n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*j + (n-i-j) == n:\n                count += 1\n                \n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*j + n-i-j == n:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if (i*j + n) == n:\n                count += 1\n    return count"
    },
    {
        "number": 4059,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n//2+1):\n        for j in range(1, n//2+1):\n            if i*j + (n-i*j) == n:\n                count += 1\n    return count"
    },
    {
        "number": 4059,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if (i*j) % n == 0 and (i*j) // n <= n:\n                count += 1\n    return str(count)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4059,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    \n    for a in range(1, n//3 + 1):\n        b = (n - a*2)//3\n        c = n - a*2 - b*3\n        if b > 0 and c > 0:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    N = int(stdin)\n    \n    # Initialize variables\n    count = 0\n    for i in range(1, N+1):\n        for j in range(i+1, N+1):\n            if i*j + (N-i-j) == N:\n                count += 1\n    \n    # Print output\n    print(count)\n    \n    # Return output as a string\n    return str(count)\n"
    },
    {
        "number": 4059,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    for i in range(1, N):\n        for j in range(i, N):\n            k = N - i - j\n            if i * j + k == N:\n                count += 1\n    return count"
    },
    {
        "number": 4059,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*j + i+j == n:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4060,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            s = s[:i] + '(' + s[i+1:]\n            count += 1\n        elif s[i] == '(':\n            s = s[:i] + ')' + s[i+1:]\n            count += 1\n    if is_regular(s):\n        return count\n    else:\n        return 0\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    count = 0\n    for i in range(n):\n        if s[i] == ')' and (i == 0 or s[i-1] == '('):\n            continue\n        if s[i] == '(':\n            s = s[:i] + ')' + s[i+1:]\n        else:\n            s = s[:i] + '(' + s[i+1:]\n        if is_regular(s):\n            count += 1\n    return count\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    count = 0\n    for i in range(n):\n        if s[i] == ')' and i > 0 and s[i-1] == ')':\n            count += 1\n            continue\n        if s[i] == ')' and i < n-1 and s[i+1] == '(':\n            count += 1\n            continue\n        if s[i] == '(' and i > 0 and s[i-1] == '(':\n            count += 1\n            continue\n        if s[i] == '(' and i < n-1 and s[i+1] == ')':\n            count += 1\n            continue\n    return count"
    },
    {
        "number": 4060,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            s = s[:i] + '(' + s[i+1:]\n            count += 1\n        elif s[i] == '(':\n            s = s[:i] + ')' + s[i+1:]\n            count += 1\n\n    if is_regular(s):\n        return str(count)\n    else:\n        return '0'\n\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    # count number of changes needed to make s regular\n    changes = 0\n    stack = []\n    for i in range(n):\n        if s[i] == ')':\n            stack.append(i)\n        else:\n            if stack:\n                changes += 1\n                stack.pop()\n            else:\n                changes += 2\n\n    # add remaining open brackets\n    changes += len(stack)\n\n    return str(changes)"
    },
    {
        "number": 4060,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    regular = True\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            if i == n-1 or s[i+1] == ')' or s[i+1] == '(':\n                regular = False\n        else:\n            if i == n-1 or s[i+1] == '(' or s[i+1] == ')':\n                regular = False\n        if not regular:\n            count += 1\n            regular = True\n    print(count)"
    },
    {
        "number": 4060,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    # if s is already regular, return 0\n    if s.count('(') == s.count(')') and s.count('(') == s.count('+'):\n        return 0\n    \n    # count positions to change\n    count = 0\n    for i in range(n):\n        if s[i] == ')' and i > 0 and s[i-1] == ')':\n            count += 1\n        elif s[i] == '(' and i < n-1 and s[i+1] == '(':\n            count += 1\n    \n    return count"
    },
    {
        "number": 4060,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    cnt = 0\n    for i in range(n):\n        if s[i] == ')':\n            cnt += 1\n    return cnt\n\nprint(solution(sys.stdin))"
    },
    {
        "number": 4060,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count = 0\n    for i in range(n):\n        if s[i] == ')' and i > 0 and s[i-1] == ')':\n            count += 1\n    return count\n\nstdin = \"\"\"6\n(((())\"\"\"\n\nprint(solution(stdin)) # Output: 3\n\nstdin = \"\"\"6\n()()()\"\"\"\n\nprint(solution(stdin)) # Output: 0\n\nstdin = \"\"\"1\n)\"\"\"\n\nprint(solution(stdin)) # Output: 0\n\nstdin = \"\"\"8\n)))(((((\"\"\"\n\nprint(solution(stdin)) # Output: 0<|im_sep|>"
    },
    {
        "number": 4060,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()[1]\n\n    count = 0\n    for i in range(n):\n        if s[i] == ')' and s[i+1] == ')':\n            count += 1\n        elif s[i] == '(' and s[i+1] == '(':\n            count += 1\n    return count"
    },
    {
        "number": 4061,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = map(str, stdin.split())\n    n = len(s)\n    m = len(t)\n\n    # we can't remove any character from s\n    if m > n:\n        return 0\n\n    # we can remove a subsequence of length m from s\n    return m"
    },
    {
        "number": 4061,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = map(str, stdin.split())\n    n, m = len(s), len(t)\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s[j-1] == t[i-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return n - dp[m][n]\n\nprint(solution(input())) # Output: 3<|im_sep|>"
    },
    {
        "number": 4061,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    for i in range(n+1):\n        dp[0][i] = 1\n    for i in range(m+1):\n        dp[i][0] = 1\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s[j-1] == t[i-1]:\n                dp[i][j] = dp[i-1][j-1] + dp[i][j-1] - dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[-1][-1]"
    },
    {
        "number": 4061,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    n = len(s)\n    m = len(t)\n    dp = [[False] * (n+1) for _ in range(m+1)]\n    for i in range(m+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        dp[0][i] = True\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s[j-1] == t[i-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = dp[i][j-1]\n    for i in range(m+1):\n        if dp[i][n]:\n            return n-i\n    return 0\n\nprint(solution(\"bbaba bb\")) # expected output: 3\nprint(solution(\"baaba ab\")) # expected output: 2\nprint(solution(\"abcde abcde\")) # expected output: 0\nprint(solution(\"asdfasdf fasd\")) # expected output: 3"
    },
    {
        "number": 4061,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    for i in range(m+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        dp[0][i] = 0\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i][j-1]\n            dp[i][j] = max(dp[i][j], dp[i-1][j])\n    return dp[m][n]"
    },
    {
        "number": 4061,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0]\n    t = stdin.splitlines()[1]\n    n = len(s)\n    m = len(t)\n    dp = [[False] * (n+1) for _ in range(m+1)]\n    for i in range(n+1):\n        dp[0][i] = True\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s[j-1] == t[i-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = dp[i][j-1]\n    if dp[-1][-1]:\n        return 0\n    for i in range(m, -1, -1):\n        for j in range(n, -1, -1):\n            if dp[i][j] and i+j+1 > dp[-1][-1]:\n                dp[-1][-1] = i+j+1\n    return dp[-1][-1] - m - 1\n\nprint(solution(input()))"
    },
    {
        "number": 4061,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    n = len(s)\n    m = len(t)\n    dp = [[False for _ in range(n)] for _ in range(m)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                dp[j][i] = True\n            elif i == 0:\n                dp[j][i] = dp[j-1][i] and s[i] == t[j]\n            elif j == 0:\n                dp[j][i] = dp[j][i-1] and s[i] == t[j]\n            else:\n                dp[j][i] = dp[j][i-1] or dp[j-1][i]\n                if dp[j][i] and s[i] == t[j]:\n                    dp[j][i] = True\n    for i in range(m, n):\n        if dp[-1][i]:\n            return i\n    return -1"
    },
    {
        "number": 4061,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    n, m = len(s), len(t)\n    if m > n:\n        return 0\n    for i in range(n-m+1):\n        if s[i:i+m] == t:\n            return m\n    for i in range(n-m+1):\n        for j in range(i+1, n-m+2):\n            if s[i:j] in t:\n                return max(j-i, m)\n    return 0\n\nstdin = \"\"\"\nbbaba\nbb\n\"\"\"\nprint(solution(stdin)) # Output: 3\n\nstdin = \"\"\"\nbaaba\nab\n\"\"\"\nprint(solution(stdin)) # Output: 2\n\nstdin = \"\"\"\nabcde\nabcde\n\"\"\"\nprint(solution(stdin)) # Output: 0\n\nstdin = \"\"\"\nasdfasdf\nfasd\n\"\"\"\nprint(solution(stdin)) # Output: 3"
    },
    {
        "number": 4061,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    n = len(s)\n    m = len(t)\n    dp = [[False for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(m+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if s[i-1] == t[j-1]:\n                dp[j][i] = dp[j-1][i-1]\n            else:\n                dp[j][i] = dp[j][i-1]\n    ans = n\n    for i in range(m, 0, -1):\n        if dp[i][n] and ans > n-i:\n            ans = n-i\n    print(ans)\n    return str(ans)"
    },
    {
        "number": 4061,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    n = len(s)\n    m = len(t)\n    dp = [[0]*(m+1) for _ in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            if s[i-1] == t[j-1]:\n                dp[i][j] = dp[i-1][j-1]+1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n][m]"
    },
    {
        "number": 4062,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    result = 0\n    for i in range(c, d+1):\n        for j in range(a, b+1):\n            result = max(result, i*j)\n    return str(result)"
    },
    {
        "number": 4062,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.strip().split())\n    return str(max(a*c, a*d, b*c, b*d))"
    },
    {
        "number": 4062,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    ans = 0\n    for x in range(a, b+1):\n        for y in range(c, d+1):\n            ans = max(ans, x*y)\n    return str(ans)"
    },
    {
        "number": 4062,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    a, b, c, d = map(int, stdin.split())\n\n    # initialize maximum value\n    max_value = 0\n\n    # iterate over all possible values of x\n    for x in range(a, b+1):\n        # iterate over all possible values of y\n        for y in range(c, d+1):\n            # update maximum value\n            max_value = max(max_value, x*y)\n\n    # print maximum value\n    print(max_value)\n\n    return \"\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    max_val = 0\n    for x in range(a, b+1):\n        for y in range(c, d+1):\n            max_val = max(max_val, x*y)\n    return str(max_val)"
    },
    {
        "number": 4062,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(a*c, a*d, b*c, b*d))"
    },
    {
        "number": 4062,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.strip().split())\n    return str(max(i*j for i in range(a, b+1) for j in range(c, d+1)))\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    x = max(a, c)\n    y = min(b, d)\n    if x <= y:\n        return str(x * y)\n    else:\n        return \"0\""
    },
    {
        "number": 4062,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(x * y for x in range(a, b+1) for y in range(c, d+1)))"
    },
    {
        "number": 4062,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.strip().split())\n    result = -1\n    for i in range(a, b+1):\n        for j in range(c, d+1):\n            product = i * j\n            if product > result:\n                result = product\n    return str(result)"
    },
    {
        "number": 4063,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n\n    # Sort the array in non-decreasing order\n    nums.sort()\n\n    # Initialize the variables\n    arc_count = 0\n    abc_count = 0\n\n    # Loop through the array and count the number of problems for ARCs and ABCs\n    for i in range(N):\n        if nums[i] >= K:\n            arc_count += 1\n        else:\n            abc_count += 1\n\n    # Compare the number of problems for ARCs and ABCs\n    if arc_count == abc_count:\n        return str(arc_count)\n    else:\n        return str(arc_count - abc_count)"
    },
    {
        "number": 4063,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    d = list(map(int, stdin.readline().split()))\n\n    # Sort the problems by difficulty in descending order\n    d.sort(reverse=True)\n\n    # Count the number of problems for ARCs and ABCs\n    num_arc = 0\n    num_abc = 0\n    for i in range(N):\n        if d[i] >= K:\n            num_arc += 1\n        else:\n            num_abc += 1\n\n    # Check if the number of problems for ARCs and ABCs are the same\n    if num_arc == num_abc:\n        return str(num_abc)\n    else:\n        # Find the number of choices of K that make the number of problems for ARCs and ABCs the same\n        for i in range(1, 10001):\n            if (num_arc - num_abc) * i >= 0:\n                return str(i)\n        return \"Impossible\""
    },
    {
        "number": 4063,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    \n    # Initialize variables\n    abc_count = 0\n    arc_count = 0\n    \n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Iterate through the array\n    for i in range(N):\n        # If the difficulty of the current problem is greater than or equal to K, add it to the ARC count\n        if arr[i] >= i+1:\n            arc_count += 1\n        # If the difficulty of the current problem is less than K, add it to the ABC count\n        else:\n            abc_count += 1\n    \n    # Check if the number of problems for ARCs and the number of problems for ABCs is the same\n    if abc_count == arc_count:\n        return str(abc_count)\n    # If not, return the minimum value of K that achieves this\n    else:\n        for k in range(1, N):\n            abc_count = 0\n            arc_count = 0\n            for i in range(N):\n                if arr[i] >= k:\n                    arc_count += 1\n                else:\n                    abc_count += 1\n            if abc_count == arc_count:\n                return str(k)\n        # If no value of K achieves this, return -1\n        return \"-1\""
    },
    {
        "number": 4063,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    diff = list(map(int, stdin.readline().split()))\n\n    arc_count = abc_count = 0\n    max_diff = max(diff)\n    for d in diff:\n        if d >= max_diff:\n            arc_count += 1\n        else:\n            abc_count += 1\n\n    count = 0\n    for k in range(1, max_diff+1):\n        arc_count_k = 0\n        abc_count_k = 0\n        for d in diff:\n            if d >= k:\n                arc_count_k += 1\n            else:\n                abc_count_k += 1\n\n        if arc_count_k == abc_count_k:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4063,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline())\n    diff = [int(x) for x in stdin.readline().split()]\n    \n    # Check if N is odd\n    if n % 2!= 0:\n        return \"0\"\n    \n    # Find maximum value of K\n    max_k = max(diff)\n    \n    # Initialize variables\n    abc_count = 0\n    arc_count = 0\n    count = 0\n    \n    # Loop through all values of K from 1 to max_k\n    for k in range(1, max_k+1):\n        # Initialize counts for current iteration\n        abc_count = 0\n        arc_count = 0\n        \n        # Loop through all problems\n        for i in range(n):\n            # Check if difficulty is greater than or equal to K\n            if diff[i] >= k:\n                # Increment count for ARCs\n                arc_count += 1\n            else:\n                # Increment count for ABCs\n                abc_count += 1\n        \n        # Check if counts are equal\n        if abc_count == arc_count:\n            count += 1\n    \n    # Return result\n    return str(count)"
    },
    {
        "number": 4063,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    max_diff = max(arr)\n    count = 0\n    for i in range(1, max_diff+1):\n        arc_count = sum([1 for j in arr if j >= i])\n        abc_count = n - arc_count\n        if abc_count == arc_count:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4063,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    nums = list(map(int, lines[1].split()))\n    k = 0\n    for num in nums:\n        if num > k:\n            break\n        k += 1\n    count_abc = 0\n    count_arc = 0\n    for num in nums:\n        if num >= k:\n            count_arc += 1\n        else:\n            count_abc += 1\n    return str(k) if count_arc == count_abc else str(k+1)"
    },
    {
        "number": 4063,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(i) for i in stdin.readline().strip().split()]\n\n    count_abc = 0\n    count_arc = 0\n    for i in range(n):\n        if arr[i] >= 5:\n            count_arc += 1\n        else:\n            count_abc += 1\n\n    for i in range(5, max(arr)+1):\n        count_arc_temp = 0\n        count_abc_temp = 0\n        for j in range(n):\n            if arr[j] >= i:\n                count_arc_temp += 1\n            else:\n                count_abc_temp += 1\n        if count_arc_temp == count_arc and count_abc_temp == count_abc:\n            return str(i)\n\n    return 'No solution'"
    },
    {
        "number": 4063,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    problems = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(1, n+1):\n        k = (i+1)//2\n        if sum(1 for p in problems if p>=k) >= sum(1 for p in problems if p<k):\n            count += 1\n    return str(count)\n\nprint(solution(open('input.txt', 'r')))"
    },
    {
        "number": 4063,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    problems = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(1, n+1):\n        if problems[i-1] >= i:\n            count += 1\n        else:\n            count -= 1\n    return str(count)"
    },
    {
        "number": 4064,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[0:4])\n    a = list(map(int, stdin.split()[4:]))\n    dp = [0] * h\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(a[i-1], h):\n            if j >= l and j <= r:\n                dp[j] += dp[j-a[i-1]-1]\n            dp[j] = max(dp[j], dp[j-1])\n    return dp[h-1]"
    },
    {
        "number": 4064,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    dp = [0] * h\n    dp[l] = 1\n    dp[r] = 1\n    for i in range(l+1, r):\n        dp[i] = dp[i-1]\n    for i in range(n):\n        for j in range(l, r):\n            dp[j] += dp[max(0, j-a[i])]\n    return max(dp)\n\nstdin = input().strip()\nprint(solution(stdin))"
    },
    {
        "number": 4064,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[0:4])\n    a = list(map(int, stdin.split()[4:]))\n    dp = [0] * h  # dp[i] stores the maximum number of good times we can obtain till time i\n    dp[0] = 1  # if we start from 0, we can get one good time\n    for i in range(1, h):\n        dp[i] = dp[i-1]  # if we start from any other time, we can get the same number of good times as the previous time\n        if i >= l and i <= r:  # if the current time is in the good time range\n            dp[i] += dp[i-l]  # we can also get the same number of good times as the previous time in the good time range\n            dp[i] += dp[i-r-1]  # we can also get the same number of good times as the previous time in the previous good time range\n            dp[i] += 1  # we can also get one more good time\n    return dp[h-1]  # the maximum number of good times we can obtain till the end of the day is the last element of dp\n\n\nprint(solution(input()))"
    },
    {
        "number": 4064,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    # Vova can always start to sleep at the beginning of a day\n    dp = [0] * h\n    \n    # Compute the maximum number of good sleeping times\n    for i in range(n):\n        for j in range(a[i], h):\n            dp[j] = max(dp[j], dp[max(0, j - l)] + 1)\n    \n    # Count the number of good sleeping times in the given segment\n    count = 0\n    for i in range(l, r + 1):\n        if dp[i] > 0:\n            count += 1\n    \n    # Return the maximum number of good sleeping times\n    return str(count)"
    },
    {
        "number": 4064,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if a[i] >= l and a[i] <= r:\n            count += 1\n    return count\n\nstdin = input().strip()\nprint(solution(stdin))"
    },
    {
        "number": 4064,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    max_good = 0\n    prev = 0\n    curr = 0\n    for i in range(n):\n        curr += a[i]\n        if l <= curr < r:\n            max_good += 1\n            curr = max(curr, prev + 1)\n        prev = curr\n\n    return str(max_good)"
    },
    {
        "number": 4064,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    dp = [0] * h\n    dp[l] = 1\n    dp[r] = 1\n    \n    for i in range(1, h):\n        dp[i] = dp[i-1] + dp[i-2]\n    \n    result = sum(dp)\n    \n    for i in range(n):\n        if a[i] - 1 >= l and a[i] - 1 <= r:\n            result -= dp[a[i]-1]\n            dp[a[i]-1] = 0\n        if a[i] >= l and a[i] <= r:\n            result += dp[a[i]]\n            dp[a[i]] = 0\n    \n    return str(result)\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split()[0:4])\n    a = list(map(int, stdin.split()[4:]))\n    # Initialize the count of good sleeping times as 0\n    count = 0\n    # Initialize the time to start sleeping as l\n    start_sleeping = l\n    # Iterate over the times at which Vova goes to sleep\n    for i in range(n):\n        # Check if the current time is within the good sleeping time segment\n        if l <= start_sleeping <= r:\n            # Increment the count of good sleeping times\n            count += 1\n        # Calculate the time at which Vova goes to sleep next\n        start_sleeping = a[i] + start_sleeping\n    # Return the maximum number of good sleeping times Vova can obtain\n    return str(count)\n"
    },
    {
        "number": 4064,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    \n    dp = [0] * h\n    dp[0] = 1 if a[0] == l else 0\n    \n    for i in range(1, n):\n        dp[a[i]] = 1\n        if a[i] - a[i-1] == 1:\n            dp[a[i]-1] = 1\n        for j in range(max(0, a[i]-r), a[i]):\n            if dp[j]:\n                dp[j+1] = 1\n    \n    return str(dp.count(1))\n\nprint(solution(\"7 24 21 23\\n16 17 14 20 20 11 22\"))"
    },
    {
        "number": 4064,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    dp = [0] * (h+1)\n    dp[0] = 1\n    for i in range(1, h+1):\n        for j in range(n):\n            if i >= l and i <= r and a[j] <= i and dp[i-a[j]] == 1:\n                dp[i] = max(dp[i], dp[i-a[j]] + 1)\n            if i+a[j] <= h and dp[i+a[j]] == 1:\n                dp[i] = max(dp[i], dp[i+a[j]] + 1)\n    return dp[h]\n\nstdin = \"7 24 21 23\\n16 17 14 20 20 11 22\"\nprint(solution(stdin)) # output: 3"
    },
    {
        "number": 4065,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    p = []\n    for i in range(n):\n        if i == 0 or a[i]!= a[i-1]:\n            p.append(i)\n    dp = [0] * (n+1)\n    for i in range(n):\n        dp[i+1] = dp[i] + 1\n        for j in range(i+1, n):\n            if a[j] > a[i]*2:\n                break\n            if a[j] > a[i]:\n                dp[j+1] = max(dp[j+1], dp[i]+1)\n    ans = 0\n    for i in range(len(p)):\n        for j in range(i+1, len(p)):\n            ans = max(ans, dp[p[j]+1] - dp[p[i]])\n    return str(ans)"
    },
    {
        "number": 4065,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    max_problems = 1\n    for i in range(n-1):\n        j = i+1\n        while j < n and a[j] <= a[i]*2:\n            j += 1\n        max_problems = max(max_problems, j-i)\n    return str(max_problems)"
    },
    {
        "number": 4065,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # initialize dp\n    dp = [0] * (n + 1)\n\n    # fill dp\n    dp[1] = 1  # single problem is always valid\n    dp[2] = 1  # two problems are always valid\n    for i in range(3, n + 1):\n        if a[i - 1] < a[i - 2] * 2:\n            dp[i] = max(dp[i], dp[i - 1] + 1)\n        dp[i] = max(dp[i], dp[i - 2] + 1)\n        dp[i] = max(dp[i], dp[i - 3] + 1)\n\n    # return answer\n    return str(dp[-1])\n"
    },
    {
        "number": 4065,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Calculate maximum number of problems\n    max_problems = 1\n    for i in range(1, n):\n        if a[i] < a[i - 1] * 2:\n            max_problems += 1\n        else:\n            break\n\n    print(max_problems)\n\n    return ''\n"
    },
    {
        "number": 4065,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    p = 1\n    for i in range(n - 1):\n        if a[i] < a[i + 1]:\n            p += 1\n            if a[i] * 2 < a[i + 1]:\n                p += 1\n    return p\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    cnt = 0\n    for i in range(1, n):\n        if arr[i] > arr[i-1] * 2:\n            cnt += 1\n    return cnt + 1"
    },
    {
        "number": 4065,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    difficulties = list(map(int, stdin.readline().strip().split()))\n    max_diff = difficulties[-1]\n    dp = [0] * (max_diff + 1)\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(max(0, max_diff - 2 * difficulties[i] + 1), max_diff + 1):\n            dp[j] += dp[j - difficulties[i]]\n        dp[max_diff] -= 1\n    return str(dp[max_diff])"
    },
    {
        "number": 4065,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    difficulties = list(map(int, stdin.readline().split()))\n    max_problems = 0\n    for i in range(1, n):\n        if difficulties[i] <= difficulties[i-1] * 2:\n            max_problems += 1\n        else:\n            break\n    return max_problems + 1"
    },
    {
        "number": 4065,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    if n == 1:\n        return '1'\n\n    max_diff = a[-1]\n    p = len(a) - 1\n    while p > 0 and a[p] >= max_diff // 2:\n        p -= 1\n\n    return str(p + 1)\n\nstdin = \"\"\"\n10\n1 2 5 6 7 10 21 23 24 49\n\"\"\"\n\nprint(solution(stdin)) # Output: 4"
    },
    {
        "number": 4065,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # We can always add the hardest problem to the contest, so the maximum number of problems is always 1\n    if n == 1:\n        return 1\n\n    # We can always add the problem that has a difficulty greater than 2*a[0] to the contest, so the maximum number of problems is always 2\n    if a[1] > 2*a[0]:\n        return 2\n\n    # We can add the problem that has a difficulty greater than a[0] to the contest if it satisfies the condition.\n    # So, the maximum number of problems is the minimum between 3 and the number of problems that satisfy the condition.\n    for i in range(2, n):\n        if a[i] > a[i-1] and a[i] <= 2*a[i-1]:\n            return min(i+1, n)\n\n    # If we reach this point, it means that we cannot add any other problem that satisfies the condition,\n    # so the maximum number of problems is n-1.\n    return n-1"
    },
    {
        "number": 4066,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    m = float('inf')\n    res = None\n    for i in range(n):\n        for j in range(i+1, n):\n            if lcm(a[i], a[j]) < m:\n                m = lcm(a[i], a[j])\n                res = (i, j)\n    return str(res[0]+1) + \" \" + str(res[1]+1)\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    res = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            res = min(res, a[j] // a[i] * a[i])\n    return res\n\nprint(solution(\"5\\n2 4 8 3 6\")) # Output: 1\nprint(solution(\"5\\n5 2 11 3 7\")) # Output: 3\nprint(solution(\"6\\n2 5 10 1 10 2\")) # Output: 1"
    },
    {
        "number": 4066,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # initialize the answer to the first pair of numbers\n    ans = (1, 2)\n    ans_val = lcm(a[1], a[2])\n\n    # iterate through the remaining pairs and update the answer if a better pair is found\n    for i in range(2, n):\n        for j in range(i+1, n):\n            val = lcm(a[i], a[j])\n            if val < ans_val:\n                ans = (i+1, j+1)\n                ans_val = val\n\n    return''.join(map(str, ans))\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    lcm_arr = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            lcm_arr[i] = (lcm_arr[i] * a[j]) // gcd(lcm_arr[i], a[j])\n            \n    min_val = float('inf')\n    min_pair = None\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if lcm_arr[j] == 0:\n                continue\n            curr_val = lcm_arr[j]\n            if curr_val < min_val:\n                min_val = curr_val\n                min_pair = (i+1, j+1)\n    \n    return''.join(map(str, min_pair))\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    lcm = a[0]\n    ans_i = 0\n    ans_j = 1\n    for i in range(1, n):\n        for j in range(i+1, n):\n            if lcm*a[j] < lcm*a[i]:\n                lcm = a[i]*a[j]\n                ans_i = i\n                ans_j = j\n    return f\"{ans_i+1} {ans_j+1}\\n\""
    },
    {
        "number": 4066,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n\n    min_lcm = float('inf')\n    min_pair = None\n\n    for i in range(n):\n        for j in range(i+1, n):\n            lcm = a[i] * a[j] // math.gcd(a[i], a[j])\n            if lcm < min_lcm:\n                min_lcm = lcm\n                min_pair = (i+1, j+1)\n\n    return''.join(str(x) for x in min_pair)"
    },
    {
        "number": 4066,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    lcm = a[0]\n    for i in range(1, n):\n        lcm = abs(lcm*a[i]) // math.gcd(lcm, a[i])\n\n    ans = (lcm, 0)\n    for i in range(n):\n        for j in range(i+1, n):\n            if lcm*a[j] // math.gcd(lcm, a[j]) < lcm*a[i] // math.gcd(lcm, a[i]):\n                lcm = lcm*a[j] // math.gcd(lcm, a[j])\n                ans = (i+1, j+1)\n\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4066,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    lcm_arr = [a[0]]\n    for i in range(1, n):\n        lcm_arr.append(lcm_arr[i-1] * a[i] // gcd(lcm_arr[i-1], a[i]))\n        \n    min_val = lcm_arr[0]\n    min_idx = 0\n    for i in range(1, n):\n        if lcm_arr[i] < min_val:\n            min_val = lcm_arr[i]\n            min_idx = i\n            \n    i, j = min_idx, min_idx\n    while j < n and lcm_arr[j] == min_val:\n        j += 1\n    if j == n:\n        return f\"{min_idx} {n-1}\"\n    return f\"{min_idx} {j-1}\"\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    lcm_list = []\n    for i in range(n):\n        for j in range(i+1, n):\n            lcm_list.append(a[i]*a[j] // gcd(a[i], a[j]))\n    \n    return str(lcm_list.index(min(lcm_list))+1)+ \" \" + str(lcm_list.index(max(lcm_list))+1)\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    lcm = []\n    for i in range(n):\n        for j in range(i+1, n):\n            lcm.append(a[i] * a[j] // gcd(a[i], a[j]))\n\n    return str(lcm.index(min(lcm))+1) + \" \" + str(lcm.index(min(lcm))+2)\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    # Count the number of '0', '1' and '2' in s\n    count_0 = s.count('0')\n    count_1 = s.count('1')\n    count_2 = s.count('2')\n    \n    # Calculate the number of replacements needed\n    diff = abs(count_0 - count_1) + abs(count_1 - count_2)\n    \n    # Determine the replacements\n    replacements = [0] * diff\n    for i in range(diff):\n        if count_0 > count_1:\n            replacements[i] = '0'\n            count_0 -= 1\n        elif count_1 > count_2:\n            replacements[i] = '2'\n            count_1 -= 1\n        else:\n            replacements[i] = '1'\n            count_2 -= 1\n    \n    # Apply the replacements and sort the resulting string\n    s = s.translate(str.maketrans(dict(zip(s, replacements))))\n    s = ''.join(sorted(s))\n    \n    return s"
    },
    {
        "number": 4067,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    # create a count dictionary\n    count = {c: s.count(c) for c in set(s)}\n\n    # find the character with minimum count\n    min_count = min(count.values())\n    min_char = [k for k, v in count.items() if v == min_count][0]\n\n    # replace the character with '0' with '1' and vice versa\n    s = ''.join(['1' if c == min_char else ('0' if c == '1' else ('2' if c == '0' else c)) for c in s])\n\n    # replace the remaining character with '0'\n    s = ''.join(['0' if c == '1' or c == '2' else c for c in s])\n\n    # replace the remaining character with '1'\n    s = ''.join(['1' if c == '0' or c == '2' else c for c in s])\n\n    # replace the remaining character with '2'\n    s = ''.join(['2' if c == '0' or c == '1' else c for c in s])\n\n    return s"
    },
    {
        "number": 4067,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    balance = [0, 0, 0]\n    for c in s:\n        balance[int(c)] += 1\n    balance[0] -= n // 3\n    balance[1] -= n // 3\n    balance[2] -= n // 3\n    balance.sort()\n    return ''.join(str(i) for i in balance)"
    },
    {
        "number": 4067,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.strip().split())\n    if n % 3 == 1:\n        return \"021\"\n    elif n % 3 == 2:\n        t = s[0]\n        for i in range(1, n, 3):\n            if s[i] == t:\n                continue\n            else:\n                return \"021\"\n    return s"
    },
    {
        "number": 4067,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    s = stdin.strip().split()[1]\n    \n    count_zeros = s.count('0')\n    count_ones = s.count('1')\n    count_twos = n - count_zeros - count_ones\n    \n    if count_zeros == count_ones:\n        s = s.replace('0', '2')\n    elif count_ones == count_twos:\n        s = s.replace('1', '2')\n    else:\n        s = s.replace('0', '1').replace('2', '1')\n    \n    return s\n\nstdin = \"3\\n121\"\nprint(solution(stdin)) # Output: 021\n\nstdin = \"6\\n000000\"\nprint(solution(stdin)) # Output: 001122\n\nstdin = \"6\\n211200\"\nprint(solution(stdin)) # Output: 211200\n\nstdin = \"6\\n120110\"\nprint(solution(stdin)) # Output: 120120"
    },
    {
        "number": 4067,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count_zeros = s.count('0')\n    count_ones = s.count('1')\n    count_twos = s.count('2')\n    min_count = min(count_zeros, count_ones, count_twos)\n    if min_count == count_zeros:\n        return '0' * count_ones + '1' * count_twos + '0' * count_zeros\n    elif min_count == count_ones:\n        return '1' * count_zeros + '0' * count_twos + '1' * count_ones\n    else:\n        return '2' * count_zeros + '1' * count_ones + '0' * count_twos"
    },
    {
        "number": 4067,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    balanced_ternary = s.replace('2', '0').replace('0', '2').replace('1', '0')\n    return balanced_ternary"
    },
    {
        "number": 4067,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    if s == '0' * n:\n        return s\n    if s.count('0') == s.count('1') and s.count('1') == s.count('2'):\n        return s\n    if s.count('0') == s.count('1') and s.count('1') == s.count('2'):\n        return s\n    min_val = min(s.count('0'), s.count('1'), s.count('2'))\n    for i in range(n):\n        if s[i] == '0' and min_val > s.count('1') + s.count('2'):\n            s = s[:i] + '1' + s[i+1:]\n            min_val -= 1\n        elif s[i] == '1' and min_val > s.count('0') + s.count('2'):\n            s = s[:i] + '0' + s[i+1:]\n            min_val -= 1\n        elif s[i] == '2' and min_val > s.count('0') + s.count('1'):\n            s = s[:i] + '1' + s[i+1:]\n            min_val -= 1\n    return s\n\nstdin = \"3\\n121\\n\"\nstdout = \"021\\n\"\nassert solution(stdin) == stdout\n\nstdin = \"6\\n000000\\n\"\nstdout = \"001122\\n\"\nassert solution(stdin) == stdout\n\nstdin = \"6\\n211200\\n\"\nstdout = \"211200\\n\"\nassert solution(stdin) == stdout\n\nstdin = \"6\\n120110\\n\"\nstdout = \"120120\\n\"\nassert solution(stdin) == stdout"
    },
    {
        "number": 4067,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.strip().split())\n    s = list(s)\n    # count the number of '0', '1' and '2'\n    cnt_0 = cnt_1 = cnt_2 = 0\n    for c in s:\n        if c == '0':\n            cnt_0 += 1\n        elif c == '1':\n            cnt_1 += 1\n        else:\n            cnt_2 += 1\n    # calculate the minimum number of replacements\n    if cnt_0 == cnt_1:\n        cnt = cnt_0\n        rep = ['0', '1', '2']\n    elif cnt_0 == cnt_2:\n        cnt = cnt_0\n        rep = ['0', '2', '1']\n    elif cnt_1 == cnt_2:\n        cnt = cnt_1\n        rep = ['1', '0', '2']\n    else:\n        cnt = cnt_0 + cnt_1 + cnt_2\n        rep = ['0', '1', '2']\n    # replace the minimum number of characters with other characters\n    if cnt == 0:\n        return ''.join(s)\n    for i in range(n):\n        if s[i]!= rep[cnt % 3]:\n            s[i] = rep[cnt % 3]\n            cnt -= 1\n        if cnt == 0:\n            return ''.join(s)\n    # if we reach here, there is no answer\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    s = stdin.strip().split()[1]\n    count0 = s.count('0')\n    count1 = s.count('1')\n    count2 = s.count('2')\n    count01 = s.count('01')\n    count12 = s.count('12')\n    count02 = s.count('02')\n    count10 = s.count('10')\n    count21 = s.count('21')\n    count20 = s.count('20')\n    count012 = s.count('012')\n    count102 = s.count('102')\n    count120 = s.count('120')\n    count201 = s.count('201')\n    count210 = s.count('210')\n    count012012 = s.count('012012')\n    count012120 = s.count('012120')\n    count012201 = s.count('012201')\n    count012021 = s.count('012021')\n    count012102 = s.count('012102')\n    count012210 = s.count('012210')\n    count012012120 = s.count('012012120')\n    count012012201 = s.count('012012201')\n    count012012021 = s.count('012012021')\n    count012012102 = s.count('012012102')\n    count012012210 = s.count('012012210')\n    count012120012 = s.count('012120012')\n    count012120201 = s.count('012120201')\n    count012120102 = s.count('012120102')\n    count012120021 = s.count('012120021')\n    count012120210 = s.count('012120210')\n    count012120120 = s.count('012120120')\n    count012201102 = s.count('012201102')\n    count012201012 = s.count('012201012')\n    count012201201 = s.count('012201201')\n    count012201120 = s.count('012201120')\n    count012201021 = s.count('012201021')\n    count012201210 = s.count('012201210')\n    count012021102 = s.count('012021102')\n    count012021012 = s.count('012021012')\n    count012021201 = s.count('012021201')\n    count012021120 = s.count('012021120')\n    count012021021 = s.count('012021021')\n    count012021210 = s.count('012021210')\n    count012102102 = s.count('012102102')\n    count012102012 = s.count('012102012')\n    count012102201 = s.count('012102201')\n    count012102120 = s.count('012102120')\n    count0121"
    },
    {
        "number": 4068,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.readline().split())\n    broken = list(map(int, stdin.readline().split()))\n    \n    # create dp table\n    dp = [[0]*(N+1) for _ in range(M+1)]\n    dp[0][0] = 1 # only way to climb to 0 is by going down one step\n    \n    for i in range(1, N+1):\n        for j in range(M+1):\n            dp[j][i] = dp[j][i-1] # only way to climb to i is to go down one step\n            \n            if j > 0:\n                if i-1 == broken[j-1]: # if step i-1 is broken, don't go up from step i\n                    dp[j][i] -= dp[j-1][i-1]\n                else: # go up from step i-1 if step i-1 is not broken\n                    dp[j][i] += dp[j-1][i-1]\n    \n    return str(dp[M][N] % 1000000007)"
    },
    {
        "number": 4068,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    broken = list(map(int, stdin.split()))\n    dp = [[0]*2 for _ in range(N+1)]\n    dp[0][0] = 1\n    dp[1][0] = 1\n    dp[1][1] = 1\n    for i in range(2, N+1):\n        for j in range(2):\n            if j == 0:\n                if i > broken[0] and i > broken[1]:\n                    dp[i][j] = dp[i-1][j] + dp[i-2][j]\n                    dp[i][j] %= 1000000007\n                elif i > broken[0]:\n                    dp[i][j] = dp[i-1][j] + dp[i-2][j]\n                    dp[i][j] %= 1000000007\n                elif i > broken[1]:\n                    dp[i][j] = dp[i-1][j]\n                    dp[i][j] %= 1000000007\n                else:\n                    dp[i][j] = 0\n            else:\n                if i > broken[0] and i > broken[1]:\n                    dp[i][j] = dp[i-1][j] + dp[i-2][j] + dp[i-3][j]\n                    dp[i][j] %= 1000000007\n                elif i > broken[0]:\n                    dp[i][j] = dp[i-1][j] + dp[i-2][j] + dp[i-3][j]\n                    dp[i][j] %= 1000000007\n                elif i > broken[1]:\n                    dp[i][j] = dp[i-1][j] + dp[i-2][j]\n                    dp[i][j] %= 1000000007\n                else:\n                    dp[i][j] = 0\n    return str(dp[N][0] + dp[N][1])\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    broken_steps = list(map(int, stdin.readline().strip().split()))\n    MOD = 1000000007\n\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n\n    for i in range(2, n+1):\n        dp[i] = (dp[i-1] * (i-1)) % MOD\n\n    for broken_step in broken_steps:\n        dp[broken_step] = 0\n\n    dp = [dp[i] for i in range(n+1)]\n\n    count = dp[n]\n    for i in range(1, n+1):\n        if dp[i-1] > 0:\n            count = (count + dp[i-1]) % MOD\n\n    return str(count)"
    },
    {
        "number": 4068,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the number of ways to climb up the stairs, under the condition, without setting foot on the broken steps.\n\n    Args:\n        stdin: The input stream as a string.\n\n    Returns:\n        The number of ways to climb up the stairs, under the condition, without setting foot on the broken steps, as a string.\n    \"\"\"\n    # Read the input\n    N, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Initialize the dp array\n    dp = [1] * (N+1)\n\n    # Update the dp array based on the broken steps\n    for i in range(M):\n        dp[A[i]+1] = 0\n\n    # Calculate the number of ways to climb up the stairs\n    for i in range(1, N):\n        dp[i] = (dp[i] + dp[i-1]) % 1000000007\n\n    # Return the number of ways to climb up the stairs\n    return str(dp[N])"
    },
    {
        "number": 4068,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.readline().split())\n    broken_steps = list(map(int, stdin.readline().split()))\n\n    # initialize count\n    count = 1  # taking the first step is always safe\n\n    # iterate over all safe steps\n    for i in range(1, N):\n        # count how many steps can be taken to reach i without breaking\n        safe_steps = 0\n        for j in range(i, -1, -1):\n            if j not in broken_steps:\n                safe_steps += 1\n            if safe_steps >= 2:\n                break\n        # add the count of ways to reach i\n        count = (count * safe_steps) % (10**9 + 7)\n\n    return str(count)"
    },
    {
        "number": 4068,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().strip().split())\n    broken = set(map(int, stdin.readline().strip().split()))\n    dp = [1] * N\n    for i in range(M):\n        for j in range(1, N):\n            if j not in broken and j-1 not in broken and j-2 not in broken:\n                dp[j] = (dp[j] + dp[j-1] + dp[j-2]) % (10**9 + 7)\n    return str(dp[-1])"
    },
    {
        "number": 4068,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes input as a string in the specified format and returns the required output.\n    \"\"\"\n    # Reading input\n    N, M = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Initialize variables\n    dp = [0] * N\n    dp[0] = 1\n\n    # Using Dynamic Programming to solve the problem\n    for i in range(1, N):\n        dp[i] = (dp[i-1] * 2) % (10**9 + 7)\n        for j in range(M):\n            if i == a[j]:\n                dp[i] = (dp[i] - dp[i-1]) % (10**9 + 7)\n                break\n\n    # Returning the final answer\n    return str(dp[N-1])"
    },
    {
        "number": 4068,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    # initialize dp table with 0s\n    dp = [0] * N\n    dp[0] = 1\n\n    # iterate through dp table\n    for i in range(1, N):\n        for j in range(min(i+1, M+1)):\n            if a[j-1] == i-j:\n                dp[i] += dp[i-j]\n                dp[i] %= 1000000007\n\n    # return result\n    return str(dp[-1])"
    },
    {
        "number": 4068,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    dp = [1] + [0] * N\n    for i in range(M):\n        for j in range(N):\n            if A[i] <= j:\n                dp[j] += dp[j-A[i]]\n                dp[j] %= 1000000007\n    return str(dp[-1])"
    },
    {
        "number": 4068,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.readline().split())\n    broken_steps = list(map(int, stdin.readline().split()))\n\n    # Initialize dp array with 1 for all possible paths\n    dp = [1] * (n+1)\n\n    # Remove broken steps from dp array\n    for step in broken_steps:\n        dp[step] = 0\n\n    # Calculate dp array\n    for i in range(1, n+1):\n        for j in range(1, min(i, m)+1):\n            dp[i] += dp[i-j]\n        dp[i] %= 1000000007\n\n    # Return result\n    return str(dp[n])"
    },
    {
        "number": 4069,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    if k % 2 == 0:\n        return str(abs(x + 2 * d * (k // 2)))\n    else:\n        return str(abs(x + d * ((k + 1) // 2)))\n\nprint(solution(\"6 2 4\")) # Output: 2"
    },
    {
        "number": 4069,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    abs_x = abs(x)\n    if abs_x <= k * d:\n        return str(abs_x)\n    else:\n        return str(abs_x - k * d)"
    },
    {
        "number": 4069,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    dest = X + (D * K)\n    return str(abs(dest))"
    },
    {
        "number": 4069,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    min_dest = x\n    for i in range(k):\n        x += d\n        min_dest = min(min_dest, abs(x))\n        x -= d\n        min_dest = min(min_dest, abs(x))\n    return str(min_dest)"
    },
    {
        "number": 4069,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    if k == 1:\n        return str(abs(x))\n    if x >= 0:\n        return str(min(k * d + x, 2 * k * d))\n    else:\n        return str(min(-k * d + x, 2 * k * d))"
    },
    {
        "number": 4069,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.strip().split())\n    if k == 1:\n        return str(x + d)\n    else:\n        ans = x + k*d\n        if ans > 0:\n            ans = (ans // k + 1) * k\n        else:\n            ans = (ans // k - 1) * k\n        return str(ans)"
    },
    {
        "number": 4069,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    x, k, d = map(int, stdin.split())\n\n    # make first move\n    if x + d > 0:\n        x = x + d\n    else:\n        x = x - d\n\n    # make remaining moves\n    for i in range(k-1):\n        if x + d > 0:\n            x = min(x + d, 0)\n        else:\n            x = max(x - d, 0)\n\n    # output result\n    return str(abs(x))"
    },
    {
        "number": 4069,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    if k == 1:\n        return str(abs(x))\n    if k % 2 == 0:\n        return str(2 * (abs(x) + abs(x + k * d)))\n    else:\n        return str(abs(x + (k - 1) // 2 * d))"
    },
    {
        "number": 4069,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    ans = abs(x)\n    for i in range(k-1):\n        if ans >= abs(x+d):\n            ans = abs(x+d)\n            x += d\n        else:\n            ans = abs(x-d)\n            x -= d\n    return str(ans)"
    },
    {
        "number": 4069,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    if k == 1:\n        return str(abs(x - d))\n    if x % 2 == 0:\n        return str(abs(x - 2*k*d))\n    else:\n        return str(abs(x + 2*k*d))"
    },
    {
        "number": 4070,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            return 0\n        i += 2\n    return 2"
    },
    {
        "number": 4070,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return 0\n    return 2"
    },
    {
        "number": 4070,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    if n < 4:\n        return 1\n    if n == 4 or n == 6 or n == 8:\n        return 2\n    for i in range(5, n):\n        if n % i == 0 or n % (n-i) == 0:\n            return 0\n    return 2\n\nprint(solution(\"61441\"))"
    },
    {
        "number": 4070,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return 0\n    return bin(n)[2:].count('0')\n\nprint(solution(input()))"
    },
    {
        "number": 4070,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(2, n+1):\n        for j in range(2, i):\n            if i % j == 0:\n                count += 1\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 4070,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n            count += 1\n        else:\n            n = (3 * n) + 1\n            count += 1\n    return count"
    },
    {
        "number": 4070,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # Write your code here\n    if n == 0:\n        return 0\n    else:\n        count = 0\n        while n!= 1:\n            if n % 2 == 0:\n                n //= 2\n            else:\n                n = 3*n + 1\n            count += 1\n        return count"
    },
    {
        "number": 4070,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return 0\n    for i in range(2, n):\n        if n % i == 0:\n            return 0\n    return 1"
    },
    {
        "number": 4070,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n /= 2\n            count += 1\n        else:\n            n = 3*n + 1\n            count += 1\n    return count"
    },
    {
        "number": 4070,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if count > 1:\n                return 0\n    return count\n"
    },
    {
        "number": 4071,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return \"1\"\n    elif a == 2:\n        return \"2\"\n    elif a == 3:\n        return \"27\"\n    else:\n        return \"2\" * a"
    },
    {
        "number": 4071,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    b = a * (a + 1) // 2\n    return str(b)\n"
    },
    {
        "number": 4071,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return str(1)\n    if a == 2:\n        return str(2)\n    if a == 3:\n        return str(27)\n    b = 27\n    for i in range(4, a+1):\n        b = b * i\n    return str(b)"
    },
    {
        "number": 4071,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # convert input to integer\n    a = int(stdin)\n\n    # calculate the result using the formula: a^3 + (a-1)^3 + (a-2)^3 +... + 1^3\n    result = sum([i**3 for i in range(1, a+1)])\n\n    # return the result as a string\n    return str(result)"
    },
    {
        "number": 4071,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    return a ** 2 + a + 1"
    },
    {
        "number": 4071,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str((a * (a+1)) // 2)"
    },
    {
        "number": 4071,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a * (a+1) // 2)"
    },
    {
        "number": 4071,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    return (a * (a + 1)) // 2"
    },
    {
        "number": 4071,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return 54 * a * a + 4 * a - 12"
    },
    {
        "number": 4071,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a * (a + 1) // 2)"
    },
    {
        "number": 4072,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 4 == 0:\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 4 == 0 and (a % 100!= 0 or a % 400 == 0):\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 4 == 0:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a >= 10 and a <= 999:\n        if sum(int(digit) for digit in str(a)) % 3 == 0:\n            return '1'\n        else:\n            return '0'\n    else:\n        return 'Error'"
    },
    {
        "number": 4072,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 100 == 0:\n        return '1'\n    else:\n        return '0'"
    },
    {
        "number": 4072,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 4 == 0 and (a % 100!= 0 or a % 400 == 0):\n        return \"1\"\n    else:\n        return \"0\"\n\nprint(solution(\"13\")) # Output: 1\nprint(solution(\"927\")) # Output: 1\nprint(solution(\"48\")) # Output: 0"
    },
    {
        "number": 4072,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num >= 10 and num <= 999:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    a = int(stdin)\n    \n    # Check if a is divisible by 4 or 9\n    if a % 4 == 0 or a % 9 == 0:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a%2)"
    },
    {
        "number": 4072,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 4 == 0 and (a % 100!= 0 or a % 400 == 0):\n        return '1'\n    else:\n        return '0'\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4073,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    nums.sort()\n    return nums[n-1]"
    },
    {
        "number": 4073,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    ans = 0\n    for i in range(n):\n        ans = ans ^ a[i]\n    return str(ans)"
    },
    {
        "number": 4073,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    max_num = max(a)\n    max_index = a.index(max_num)\n    sum_num = sum(a)\n    if max_num > sum_num - max_num:\n        return max_num\n    else:\n        return sum_num - max_num\n\nstdin = '''\n4\n2 5 3 1\n'''\nprint(solution(stdin)) # Output: 4"
    },
    {
        "number": 4073,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    return sum(a)\n\nstdin = \"\"\"\n4\n2 5 3 1\n\"\"\"\n\nprint(solution(stdin)) # Output: 4"
    },
    {
        "number": 4073,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Count frequency of each element\n    freq = [0] * 12\n    for x in a:\n        freq[x] += 1\n\n    # Calculate XOR of elements\n    xor = 0\n    for i in range(12):\n        if freq[i] > 0:\n            xor ^= i\n\n    # Calculate number of elements with odd frequency\n    odd = sum(1 for f in freq if f % 2 == 1)\n\n    # Calculate number of elements with even frequency\n    even = n - odd\n\n    # Calculate number of elements with odd frequency\n    if xor == 0:\n        return even\n    else:\n        return odd"
    },
    {
        "number": 4073,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    return sum(a)"
    },
    {
        "number": 4073,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    xor = 0\n    for i in a:\n        xor ^= i\n    return xor\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n\nprint(solution(stdin)) # Output: 4"
    },
    {
        "number": 4073,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    result = 0\n    for i in range(n):\n        result ^= a[i]\n    return str(result)"
    },
    {
        "number": 4073,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = set(a)\n    return len(b)"
    },
    {
        "number": 4073,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_xor = 0\n    xor = 0\n\n    # Iterate through all pairs of elements and calculate xor\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = a[i] ^ a[j]\n            if xor > max_xor:\n                max_xor = xor\n\n    return max_xor"
    },
    {
        "number": 4074,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for the problem \"Polycarp's Shop\"\n\n    :param stdin: input string\n    :return: output string\n    \"\"\"\n    t = int(stdin.readline())\n    output = []\n    for i in range(t):\n        n, k = map(int, stdin.readline().split())\n        output.append(n // k)\n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4074,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n, k = map(int, lines[i].split())\n        num_shovels = 0\n        num_packages = 0\n        while num_shovels < n:\n            num_packages += 1\n            num_shovels += num_packages\n        if num_shovels > n:\n            num_packages -= 1\n        print(num_packages)\n    return \"\""
    },
    {
        "number": 4074,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline().strip())\n    for t in range(test_cases):\n        n, k = map(int, stdin.readline().strip().split())\n        if n <= k:\n            print(n)\n        else:\n            print(k)"
    },
    {
        "number": 4074,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        if n > k:\n            print(n // k + 1)\n        else:\n            print(1)\n    return \"\""
    },
    {
        "number": 4074,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split()[0])\n    for i in range(test_cases):\n        n, k = map(int, stdin.split()[0:2])\n        if n <= k:\n            print(n)\n        else:\n            ans = 1\n            shovels = n\n            while shovels > 0:\n                ans += shovels // k\n                shovels %= k\n            print(ans)\n    return \"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        min_packages = n // k\n        extra_shovels = n % k\n        if extra_shovels!= 0:\n            min_packages += 1\n        print(min_packages)\n    return \"\"\n\nassert solution(\"5\\n8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\") == \"2\\n8\\n1\\n999999733\\n1\\n\""
    },
    {
        "number": 4074,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return '0'\n    packages_per_shovel = 1\n    while (packages_per_shovel * k) < n:\n        packages_per_shovel += 1\n    return str(packages_per_shovel)\n"
    },
    {
        "number": 4074,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    for i in range(1, len(stdin)):\n        n, k = map(int, stdin[i].split(\" \"))\n        packages = [i for i in range(1, k+1)]\n        packages_per_shovel = 0\n        while n > 0:\n            packages_per_shovel += 1\n            n -= k\n        print(packages_per_shovel)"
    },
    {
        "number": 4074,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def buy_packages(n, k):\n        packages_count = 0\n        shovels_count = 0\n        while shovels_count < n:\n            packages_count += 1\n            shovels_count += packages_count\n        return packages_count - 1\n\n    t = int(stdin.readline().strip())\n    results = []\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        results.append(buy_packages(n, k))\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4074,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    lines = lines[1:]\n    for i in range(t):\n        n, k = map(int, lines[i].split())\n        if n % k == 0:\n            print(n // k)\n        else:\n            print(n // k + 1)\n    return \"\""
    },
    {
        "number": 4075,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, m = map(int, lines[0].split())\n    switch_connections = [list(map(int, lines[i].split())) for i in range(1, n+1)]\n    bulb_connections = [int(i) for i in lines[n+1].split()]\n    bulb_power = [int(i) for i in lines[n+2].split()]\n\n    count = 0\n    for i in range(1, 2**m):\n        power_count = 0\n        switch_states = [0]*n\n        for j in range(m):\n            if i & (1<<j):\n                power_count += 1\n                for k in range(switch_connections[j]):\n                    switch_states[bulb_connections[j]-1] = (switch_states[bulb_connections[j]-1] + 1) % 2\n        if power_count % 2 == bulb_power[0]:\n            for j in range(n):\n                if switch_states[j] == bulb_power[1]:\n                    count += 1\n                    break\n    return str(count)"
    },
    {
        "number": 4075,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, M = map(int, lines[0].split())\n    bulb_connections = [tuple(map(int, line.split())) for line in lines[1:1+N]]\n    bulb_states = tuple(map(int, lines[1+N].split()))\n    bulb_combinations = 1\n    for i in range(M):\n        bulb_combinations *= (bulb_states[i] + 1) ** bulb_connections[i][0]\n    return str(bulb_combinations)\n"
    },
    {
        "number": 4075,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.split())\n    bulb_connections = []\n    for _ in range(m):\n        k = int(stdin.split()[0])\n        connections = list(map(int, stdin.split()))[1:]\n        bulb_connections.append((k, connections))\n    bulb_states = list(map(int, stdin.split()))\n\n    # count valid combinations\n    valid_combinations = 0\n    for i in range(2**n):\n        switches_state = bin(i)[2:].zfill(n)  # convert to binary string with leading zeros\n        for j in range(m):\n            k, connections = bulb_connections[j]\n            switches_in_bulb = sum(1 for switch in connections if switches_state[switch-1] == '1')\n            if bulb_states[j] == (switches_in_bulb % 2):\n                break\n        else:\n            valid_combinations += 1\n\n    return str(valid_combinations)"
    },
    {
        "number": 4075,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split('\\n')\n    N, M = map(int, lines[0].split())\n    switches = [list(map(int, lines[i].split())) for i in range(1, N+1)]\n    bulbs = list(map(int, lines[N+1].split()))\n\n    # Count the number of combinations of states for each bulb\n    count = 1\n    for i in range(M):\n        # Compute the number of \"on\" switches for bulb i\n        on = sum([switches[j-1][bulbs[i]-1] for j in range(1, N+1) if switches[j-1][bulbs[i]-1]])\n        # Compute the number of combinations of states for this bulb\n        count *= (on % 2 + 2) % 2\n\n    return str(count)"
    },
    {
        "number": 4075,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    switches = [list(map(int, lines[i].split())) for i in range(1, N+1)]\n    bulbs = list(map(int, lines[N+1].split()))\n\n    # Count the number of combinations of \"on\" and \"off\" states of the switches that light all the bulbs\n    count = 0\n    for i in range(1 << M):\n        # Check if all bulbs are lighted\n        on_bulbs = 0\n        for j in range(M):\n            if (i >> j) & 1:\n                on_bulbs += 1\n        if on_bulbs!= len(bulbs):\n            continue\n\n        # Check if all switches are in the correct state\n        on_switches = 0\n        for j in range(N):\n            if switches[j][0] == 0:\n                on_switches += 1\n            if switches[j][1] == 0:\n                on_switches += 1\n            for k in range(2, switches[j][0]):\n                if (switches[j][k] == 0)!= (switches[j][1] == 0):\n                    on_switches += 1\n        if on_switches % 2 == 0:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4075,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.readline().strip().split())\n    k = []\n    for i in range(M):\n        k.append(list(map(int, stdin.readline().strip().split())))\n    p = list(map(int, stdin.readline().strip().split()))\n\n    # calculate number of combinations\n    total = 1\n    for i in range(M):\n        total *= 2**(k[i].count(1))\n    for i in range(M):\n        total *= 2**k[i].count(0)\n\n    # reduce total by modulo 2 if necessary\n    if sum(p) % 2 == 1:\n        total //= 2\n\n    # print result\n    return str(total)"
    },
    {
        "number": 4075,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    lines = stdin.split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    switches = []\n    for i in range(1, N+1):\n        k, *s = map(int, lines[i].split())\n        switches.append((k, s))\n    bulbs = []\n    for i in range(M):\n        bulbs.append(int(lines[N+i+1]))\n    # Building the matrix of states of switches\n    matrix = [[0 for _ in range(N+1)] for _ in range(2**(N+1))]\n    matrix[0][1] = 1\n    for i in range(2**(N+1)):\n        if i == 0:\n            continue\n        state = bin(i)[2:]\n        while len(state) < N+1:\n            state = \"0\" + state\n        for j in range(N+1):\n            if state[j] == \"0\":\n                continue\n            k, s = switches[j-1]\n            mask = 0\n            for si in s:\n                mask |= 1 << si-1\n            matrix[i][j] = (matrix[i-1][j] + matrix[i][j-1] - matrix[i-1][j-1]) % 1000000\n            matrix[i][j] = (matrix[i][j] * pow(matrix[i-1][mask], k, 1000000)) % 1000000\n    # Calculating the number of combinations of states of switches that light all the bulbs\n    result = 1\n    for bulb, p in enumerate(bulbs):\n        mask = 0\n        for i in range(N):\n            if (i+1) % 2 == p:\n                mask |= 1 << i\n        result = (result * matrix[2**(N+1)-1][bulb+1]) % 1000000\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    bulbs = []\n    switches = []\n    for i in range(1, n+1):\n        line = lines[i].split()\n        k = int(line[0])\n        s = list(map(int, line[1:]))\n        switches.append(s)\n        bulbs.append([(0, 0)] * k)\n    for i in range(m):\n        p = int(lines[i+n+1])\n        for j in range(n):\n            bulb = bulbs[j][i]\n            bulb_state = (bulb[0] + p) % 2\n            bulb_switch = switches[j][(bulb[1] + p) % 2]\n            bulbs[j][i] = (bulb_state, bulb_switch)\n    total = 1\n    for bulb in bulbs:\n        on_switches = [0] * len(bulb)\n        for i in range(len(bulb)):\n            on_switches[bulb[i][1]-1] = bulb[i][0]\n        total *= 2 ** on_switches.count(1)\n    return str(total)"
    },
    {
        "number": 4075,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.readline().strip().split())\n    switches = [list(map(int, stdin.readline().strip().split())) for _ in range(m)]\n    bulbs = list(map(int, stdin.readline().strip().split()))\n    \n    # Count number of combinations for each bulb\n    count = 1\n    for i in range(m):\n        k = switches[i][0]\n        p = bulbs[i]\n        count *= (k + 1)\n        count //= 2\n        if p:\n            count *= 2\n        count %= 1000000007\n        \n    # Multiply counts for all bulbs\n    total = 1\n    for i in range(m):\n        total *= count\n        total %= 1000000007\n        \n    # Return result\n    return str(total)"
    },
    {
        "number": 4075,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    switches = [list(map(int, stdin.strip().split())) for _ in range(n)]\n    bulbs = list(map(int, stdin.strip().split()))\n    res = 0\n    for i in range(m):\n        cnt = 0\n        for j in range(switches[i][0]):\n            cnt += bulbs[switches[i][j]-1]\n        res += cnt % 2\n    return str(res)"
    },
    {
        "number": 4076,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    # Convert hours to radians\n    h_radians = H * 30 * math.pi / 180\n    # Convert minutes to radians\n    m_radians = M * 6 * math.pi / 180\n    # Calculate length of hour hand\n    h_length = A / 2 * (1 - math.cos(h_radians))\n    # Calculate length of minute hand\n    m_length = B / 2 * (1 - math.cos(m_radians))\n    # Calculate total length between fixed endpoints\n    total_length = h_length + m_length\n    return str(total_length)"
    },
    {
        "number": 4076,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    # calculate the distance between the two fixed points\n    distance = (A**2 + B**2)**0.5\n    # calculate the total angle covered by the hour hand\n    hour_angle = 360 * (H + M/60) / 12\n    # calculate the angle covered by the minute hand\n    minute_angle = 6 * M\n    # combine the two angles to get the total angle covered by the hands\n    total_angle = hour_angle + minute_angle\n    # calculate the length of the minute hand\n    minute_length = distance * minute_angle / 360\n    # calculate the length of the hour hand\n    hour_length = distance * hour_angle / 360\n    # subtract the length of the minute hand from the length of the hour hand to get the distance between the unfixed endpoints\n    return \"{:.10f}\".format(distance - minute_length + hour_length)"
    },
    {
        "number": 4076,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    # calculate the angle of hour hand\n    angle_h = 30 * h\n    # calculate the angle of minute hand\n    angle_m = 6 * m\n    # calculate the length of hour and minute hands\n    len_h = a * angle_h / 180\n    len_m = b * angle_m / 180\n    # calculate the distance between the unfixed endpoints\n    dist = abs(len_h - len_m)\n    return str(dist)"
    },
    {
        "number": 4076,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(float, stdin.split())\n    rad_per_hour = 2 * math.pi / 12\n    rad_per_minute = 2 * math.pi / 60\n\n    # Calculate the angular position of hour and minute hands at given time\n    rad_hour = rad_per_hour * H\n    rad_minute = rad_per_minute * M\n\n    # Calculate the distance between the unfixed endpoints of the hands\n    dist = A * B / math.sqrt((B ** 2) + (B ** 2) - (2 * B * A * math.cos(rad_hour - rad_minute)))\n\n    return str(round(dist, 15))"
    },
    {
        "number": 4076,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    # distance between the two fixed points\n    d = (A**2 + B**2) ** 0.5\n    # angle of the hour hand\n    theta_h = (30 * H + 0.5 * M) * np.pi / 180\n    # angle of the minute hand\n    theta_m = (6 * M) * np.pi / 180\n    # distance between the two unfixed points\n    x = d * np.sin(theta_h)\n    y = d * np.sin(theta_m)\n    return \"{:.10f}\".format(x + y)\n\nThe script uses the Pythagorean theorem to calculate the distance between the two fixed points (the hour and minute hands' endpoints) on the clock face, and then uses trigonometry to calculate the positions of the two unfixed points on the clock face. Finally, it returns the sum of the distances as the output. \n\nThe `format` method is used to ensure that the output is accurate to 10 decimal places."
    },
    {
        "number": 4076,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    theta_h = (h * 30 + m * 0.5) * 3.14159 / 180\n    theta_m = (m * 6) * 3.14159 / 180\n    x_h = a * cos(theta_h)\n    y_h = b * sin(theta_h)\n    x_m = a * cos(theta_m)\n    y_m = b * sin(theta_m)\n    return \"{:.10f}\".format(sqrt((x_h - x_m)**2 + (y_h - y_m)**2))"
    },
    {
        "number": 4076,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    # Calculate the length of the hour and minute hands\n    L_hour = 360 * (H + M/60) / 12 * A / 2\n    L_min = 360 * M / 60 * B / 2\n    # Calculate the distance between the fixed ends of the hands\n    dist = abs(L_hour - L_min)\n    # Convert the distance to centimeters\n    return \"{:.10f}\".format(dist)"
    },
    {
        "number": 4076,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    angle_h = 30 * H + M/2\n    angle_m = 6 * M\n    distance = A * math.cos(math.radians(angle_h)) + B * math.cos(math.radians(angle_m))\n    return str(distance)"
    },
    {
        "number": 4076,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.strip().split())\n    # distance between the hour and minute hands at 12 o'clock\n    r = a + b\n    # angle of the minute hand at 12 o'clock\n    theta_m = 6 * m\n    # angle of the hour hand at 12 o'clock\n    theta_h = 30 * h\n    # angle of the hour hand at the given time\n    theta = (60 * h + m) * 30\n    # distance between the unfixed endpoints of the hands\n    x = r * cos(radians(theta))\n    y = r * sin(radians(theta))\n    return str(x)\n"
    },
    {
        "number": 4076,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    h = (H % 12) * 30 + M * 0.5\n    m = M * 6\n    return \"{:.10f}\".format(abs(A * cos(radians(h)) + B * sin(radians(h))) + abs(A * cos(radians(m)) + B * sin(radians(m))))"
    },
    {
        "number": 4077,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    \n    def find_median(l, r):\n        if l == r:\n            return a[l]\n        else:\n            mid = (l + r) // 2\n            left = a[l:mid+1]\n            right = a[mid+1:r+1]\n            if len(left) == len(right):\n                return (max(left) + min(right)) / 2\n            elif len(left) > len(right):\n                return find_median(l, mid)\n            else:\n                return find_median(mid+1, r)\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if find_median(i, j) == m:\n                count += 1\n    \n    return count"
    },
    {
        "number": 4077,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    count = 0\n    for i in range(n):\n        left = i\n        right = i+1\n        while left >= 0 and right < n and a[left] + a[right] <= m:\n            if a[left] + a[right] == m:\n                count += 1\n            left -= 1\n            right += 1\n\n    return count\n\nstdin = \"5 4\\n1 4 5 60 4\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4077,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(sorted(a[i:j])[len(a[i:j])//2:]) == m:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4077,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] <= m and a[j] >= m:\n                count += 1\n    return count"
    },
    {
        "number": 4077,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    i = 0\n    j = n-1\n    while i < j:\n        if a[i] + a[j] == m:\n            ans += (j-i+1)\n            i += 1\n            j -= 1\n        elif a[i] + a[j] < m:\n            i += 1\n        else:\n            j -= 1\n    return ans"
    },
    {
        "number": 4077,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n\n    count = 0\n    left, right = 0, n-1\n    while left < right:\n        if (right-left+1) % 2 == 0:\n            # even length\n            mid = (left + right) // 2\n            if a[mid] == m:\n                count += 1\n            if a[mid] < m:\n                left = mid+1\n            else:\n                right = mid\n        else:\n            # odd length\n            mid = left + (right-left+1) // 2\n            if a[mid] == m:\n                count += 1\n            if a[mid] < m:\n                left = mid\n            else:\n                right = mid-1\n\n    return count\n"
    },
    {
        "number": 4077,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.splitlines()[0].split())\n    a = list(map(int, stdin.splitlines()[1].split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(a[i:j]) == m:\n                count += 1\n    return count\n\nstdin = \"\"\"\n5 4\n1 4 5 60 4\n\"\"\"\nprint(solution(stdin)) # Output: 8"
    },
    {
        "number": 4077,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sorted(a[i:j])[len(a[i:j])//2] == m:\n                count += 1\n    return count"
    },
    {
        "number": 4077,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    # sort the sequence\n    a.sort()\n\n    count = 0\n    for i in range(n):\n        # find the left and right indices of the subarray with median m\n        left = i\n        right = n - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if a[mid] < m:\n                left = mid + 1\n            else:\n                right = mid - 1\n\n        # update the count with the number of pairs of indices that have median m\n        count += (right - i + 1)\n\n    return count"
    },
    {
        "number": 4077,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing the input\n    n, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Finding the median of the given sequence\n    sorted_a = sorted(a)\n    if len(sorted_a) % 2 == 0:\n        median = (sorted_a[len(sorted_a)//2] + sorted_a[len(sorted_a)//2 - 1]) / 2\n    else:\n        median = sorted_a[len(sorted_a)//2]\n\n    # Finding the number of pairs of indices that have the required median\n    count = 0\n    for i in range(n):\n        left = i + 1\n        right = n\n        while left <= right:\n            mid = (left + right) // 2\n            if median == sorted_a[mid]:\n                count += right - left + 1\n                break\n            elif median < sorted_a[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n\n    return str(count)"
    },
    {
        "number": 4078,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    seg = []\n    for i in range(m):\n        l, r = map(int, stdin.readline().strip().split())\n        seg.append((l, r))\n    ans = 0\n    mx = 0\n    for i in range(1 << m):\n        curr = a.copy()\n        cnt = 0\n        for j in range(m):\n            if i & (1 << j):\n                cnt += 1\n                for k in range(seg[j][0]-1, seg[j][1]):\n                    curr[k] -= 1\n        if cnt > 0:\n            mn = min(curr)\n            mx = max(curr)\n            ans = max(ans, mx - mn)\n    print(ans)\n    if ans == 0:\n        return \"\"\n    q = 0\n    for i in range(m):\n        if ans - a[seg[i][0]-1] + a[seg[i][1]-1] > mx - mn:\n            q += 1\n    print(q)\n    print(*[i+1 for i in range(m) if i+1 in [int(x) for x in stdin.readline().strip().split()]])\n    return \"\""
    },
    {
        "number": 4078,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split()[i*2:(i+1)*2])\n        segments.append((l, r))\n    \n    # Check all possible subsets of segments\n    max_difference = float('-inf')\n    best_subset = None\n    for subset in itertools.combinations(segments, m):\n        b = list(a)\n        for l, r in subset:\n            for i in range(l-1, r):\n                b[i] -= 1\n        if max(b) - min(b) > max_difference:\n            max_difference = max(b) - min(b)\n            best_subset = list(subset)\n    \n    # Print the result\n    print(max_difference)\n    print(len(best_subset))\n    print(*best_subset)\n    \n    return \"\""
    },
    {
        "number": 4078,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split()[i*2:i*2+2])\n        segments.append((l-1, r-1))\n    dp = [[float('inf')] * (n+1) for _ in range(2**m)]\n    dp[0][0] = 0\n    for i in range(2**m):\n        for j in range(n+1):\n            if dp[i][j]!= float('inf'):\n                for k in range(n+1):\n                    if j + k <= n:\n                        dp[i][j+k] = min(dp[i][j+k], dp[i][j] + 1)\n    ans = 0\n    for i in range(2**m):\n        temp = 0\n        used = [False] * m\n        for j in range(m):\n            if (i >> j) & 1:\n                temp += sum(a[segments[j][0]:segments[j][1]+1]) - 1\n                used[j] = True\n        if temp > ans:\n            ans = temp\n            res = i\n    q = 0\n    for j in range(m):\n        if used[j]:\n            q += 1\n    print(ans)\n    print(q)\n    if q > 0:\n        print(*[j+1 for j in range(m) if used[j]], sep=' ')\n    return ''"
    },
    {
        "number": 4078,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l-1, r-1))\n    dp = [[float('inf')] * (n+1) for _ in range(1<<m)]\n    for i in range(n+1):\n        dp[0][i] = 0\n    for mask in range(1, 1<<m):\n        for i in range(n+1):\n            for j in range(n+1):\n                if i == j:\n                    continue\n                if mask & (1<<(j-1)):\n                    continue\n                if segments[j-1][0] < i < segments[j-1][1]:\n                    continue\n                dp[mask][i] = min(dp[mask][i], dp[mask^(1<<(j-1))][j] + a[i-1])\n    ans = float('-inf')\n    for i in range(n+1):\n        ans = max(ans, dp[-1][i])\n    q = 0\n    for i in range(m):\n        if dp[1<<i][n] == ans:\n            q += 1\n            print(i+1, end=' ')\n    print()\n    if q == 0:\n        return str(ans)\n    return str(ans) + '\\n' + str(q) + '\\n' +''.join(map(str, sorted([i+1 for i in range(m) if dp[1<<i][n] == ans])))"
    },
    {
        "number": 4078,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l, r))\n    dp = [[0] * n for _ in range(1 << m)]\n    for i in range(n):\n        dp[0][i] = a[i]\n    for mask in range(1, 1 << m):\n        for i in range(n):\n            dp[mask][i] = float('-inf')\n            for j in range(m):\n                if mask & (1 << j) == 0:\n                    continue\n                l, r = segments[j]\n                if i >= l and i <= r:\n                    dp[mask][i] = max(dp[mask][i], dp[mask ^ (1 << j)][i] - 1)\n            if dp[mask][i] == float('-inf'):\n                dp[mask][i] = dp[mask ^ (1 << j)][i]\n    ans = float('-inf')\n    for i in range(n):\n        ans = max(ans, dp[(1 << m) - 1][i])\n    for i in range(n):\n        ans = max(ans, dp[0][i] - dp[(1 << m) - 1][i])\n    q = 0\n    for i in range(m):\n        if dp[(1 << m) - 1][segments[i][0]] - dp[0][segments[i][0]]!= ans:\n            q += 1\n    print(ans)\n    print(q)\n    result = []\n    for i in range(m):\n        if dp[(1 << m) - 1][segments[i][0]] - dp[0][segments[i][0]] == ans:\n            result.append(i+1)\n    print(*result)\n\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l-1, r-1))\n\n    # Check if any segment can be chosen at most once\n    for i in range(m):\n        for j in range(i+1, m):\n            if segments[i][1] >= segments[j][0]:\n                return \"0\\n0\\n\"\n\n    # Find maximum possible difference\n    max_diff = max(a) - min(a)\n    for i in range(m):\n        for j in range(i+1, m):\n            if segments[i][1] >= segments[j][0]:\n                continue\n            # Choose i-th and j-th segments\n            b = a.copy()\n            b[segments[i][0]:segments[i][1]+1] = [x-1 for x in b[segments[i][0]:segments[i][1]+1]]\n            b[segments[j][0]:segments[j][1]+1] = [x-1 for x in b[segments[j][0]:segments[j][1]+1]]\n            diff = max(b) - min(b)\n            if diff > max_diff:\n                max_diff = diff\n                chosen = [i+1, j+1]\n\n    if max_diff == 0:\n        return \"0\\n0\\n\"\n\n    # Output results\n    return f\"{max_diff}\\n{len(chosen)}\\n{chosen[0]} {chosen[1]}\""
    },
    {
        "number": 4078,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    a = list(map(int, stdin.split()[2:]))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        segments.append((l-1, r-1))\n\n    ans = -float('inf')\n    for i in range(1<<m):\n        selected = [j for j in range(m) if (i >> j) & 1]\n        b = [a[j] for j in range(n)]\n        for j in selected:\n            for k in range(segments[j][0], segments[j][1]+1):\n                b[k] -= 1\n        max_val, min_val = max(b), min(b)\n        val = max_val - min_val\n        if val > ans:\n            ans = val\n            selected_segments = selected\n\n    return f\"{ans}\\n{len(selected_segments)}\\n{' '.join(map(str, selected_segments))}\""
    },
    {
        "number": 4078,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split()[2+n+2*i:2+n+2*i+2])\n        segments.append((l, r))\n    ans = float('-inf')\n    ans_s = None\n    for i in range(2**m):\n        subset = []\n        for j in range(m):\n            if (i >> j) & 1:\n                subset.append(segments[j])\n        b = list(a)\n        for segment in subset:\n            for i in range(segment[0]-1, segment[1]):\n                b[i] -= 1\n        val = max(b) - min(b)\n        if val > ans:\n            ans = val\n            ans_s = subset\n    if ans_s is None:\n        return '0 0\\n'\n    print(ans)\n    return f'{len(ans_s)} {\" \".join(map(str, [1+segments.index(s) for s in ans_s]))}\\n'"
    },
    {
        "number": 4078,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n\n    max_diff = -float('inf')\n    for i in range(1 << m):\n        sub_segments = [segments[j] for j in range(m) if i & (1 << j)]\n        sub_a = a.copy()\n        for l, r in sub_segments:\n            sub_a[l-1] -= 1\n            sub_a[r-1] -= 1\n        diff = max(sub_a) - min(sub_a)\n        if diff > max_diff:\n            max_diff = diff\n            chosen_segments = sub_segments\n    \n    if max_diff == -float('inf'):\n        return f'{0}\\n{0}\\n'\n\n    q = len(chosen_segments)\n    c = [chosen_segments[j][0] for j in range(q)]\n    c.sort()\n    return f'{max_diff}\\n{q}\\n{\" \".join(map(str, c))}\\n'"
    },
    {
        "number": 4078,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l-1, r-1))\n    \n    def dfs(used, acc, start, end):\n        nonlocal ans\n        if acc > ans:\n            ans = acc\n            selected.clear()\n            selected.extend(used)\n        if start >= end:\n            return\n        for i in range(start, end):\n            if not used[i]:\n                used[i] = True\n                dfs(used, acc + a[i+1] - a[i], start, i)\n                used[i] = False\n        dfs(used, acc, i+1, end)\n    \n    ans = float('-inf')\n    selected = []\n    dfs([False] * n, 0, 0, n-1)\n    if ans == 0:\n        return '0\\n0\\n'\n    d = ans\n    q = len(selected)\n    c = [i+1 for i, x in enumerate(selected) if x]\n    return f'{d}\\n{q}\\n{c}\\n'"
    },
    {
        "number": 4079,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(n):\n        s = stdin.readline().strip().lower()\n        if is_diverse(s):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(n):\n        s = stdin.readline().strip()\n        if len(s) < 2 or len(set(s))!= len(s):\n            print(\"No\")\n            continue\n        prev_pos = ord(s[0]) - ord('a')\n        for i in range(1, len(s)):\n            curr_pos = ord(s[i]) - ord('a')\n            if curr_pos - prev_pos!= 1:\n                print(\"No\")\n                break\n            prev_pos = curr_pos\n        else:\n            print(\"Yes\")\n```python\nimport io\n\ntest_cases = \"\"\"\n8\nfced\nxyz\nr\ndabcef\naz\naa\nbad\nbabc\n\"\"\".strip().split(\"\\n\")\n\nfor test_case in test_cases:\n    with io.StringIO(test_case) as stdin:\n        solution(stdin)\n"
    },
    {
        "number": 4079,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(n):\n        s = stdin.readline().strip()\n        a = [s[0]]\n        for c in s[1:]:\n            if c!= a[-1]:\n                a.append(c)\n        if len(a) == len(set(a)) and ''.join(a) == ''.join(sorted(a)):\n            print(\"Yes\")\n        else:\n            print(\"No\")"
    },
    {
        "number": 4079,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    for i in range(n):\n        s = stdin.split('\\n')[i]\n        if len(set(s)) == len(s) and all(j-i == 1 for i,j in zip(s, s[1:])):\n            print(\"Yes\")\n        else:\n            print(\"No\")"
    },
    {
        "number": 4079,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    for i in range(1, n+1):\n        s = stdin.split('\\n')[i]\n        if s.lower() == s.lower()[::-1]:\n            print(\"Yes\")\n        else:\n            for j in range(len(s)-1):\n                if ord(s[j+1]) - ord(s[j])!= 1:\n                    print(\"No\")\n                    break\n            else:\n                print(\"Yes\")\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n\nsolution(stdin)"
    },
    {
        "number": 4079,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for i in range(n):\n        s = stdin.readline().strip()\n        if s == \"\":\n            continue\n        if sorted(set(s)) == list(s):\n            if \"a\" in s or \"z\" in s:\n                if \"\".join(sorted(s)) == \"abcdefghijklmnopqrstuvwxyz\":\n                    print(\"Yes\")\n                else:\n                    print(\"No\")\n            else:\n                print(\"Yes\")\n        else:\n            print(\"No\")\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split('\\n')\n    n = int(strings[0])\n    strings = strings[1:]\n    for i in range(n):\n        s = strings[i]\n        if len(set(s))!= len(s):\n            print(\"No\")\n            continue\n        if len(s) < 3:\n            print(\"Yes\")\n            continue\n        for j in range(len(s)-2):\n            if ord(s[j]) == ord(s[j+1]) - 1 == ord(s[j+2]) - 2:\n                print(\"Yes\")\n                break\n        else:\n            print(\"No\")\n    return \"\""
    },
    {
        "number": 4079,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split()\n    for s in strings:\n        if len(s) == len(set(s)) and all(abs(ord(s[i]) - ord(s[i+1])) == 1 for i in range(len(s)-1)):\n            print(\"Yes\")\n        else:\n            print(\"No\")"
    },
    {
        "number": 4079,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(n):\n        s = stdin.readline().strip()\n        if len(s) == len(set(s)):\n            if all(ord(s[j]) == ord(s[j+1])-1 for j in range(len(s)-1)):\n                print(\"Yes\")\n            else:\n                print(\"No\")\n        else:\n            print(\"No\")\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(n):\n        s = stdin.readline().strip().lower()\n        if len(s) == len(set(s)):\n            if all(ord(s[i])-ord(s[i-1])==1 or ord(s[i])-ord(s[i-1])==25 for i in range(1, len(s))):\n                print(\"Yes\")\n            else:\n                print(\"No\")\n        else:\n            print(\"No\")"
    },
    {
        "number": 4080,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    segments = []\n    for i in range(m):\n        start, end = map(int, stdin.split()[2+n+2*i:2+n+2*i+2])\n        segments.append((start, end))\n    \n    res = 0\n    ans = []\n    \n    def dfs(curr, prev):\n        nonlocal res, ans\n        if curr >= len(segments):\n            res = max(res, max(a) - min(a))\n            ans.append(prev)\n            return\n        \n        start, end = segments[curr]\n        dfs(curr+1, prev+[curr])\n        a[start-1] -= 1\n        a[end-1] -= 1\n        dfs(curr+1, prev+[curr])\n        a[start-1] += 1\n        a[end-1] += 1\n    \n    dfs(0, [])\n    print(res)\n    print(len(ans))\n    print(*ans[0])\n    \n"
    },
    {
        "number": 4080,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    \n    seg = []\n    for i in range(m):\n        l, r = map(int, stdin.readline().split())\n        seg.append((l-1, r-1))\n\n    def func(idx):\n        b = [0] * n\n        for i in range(n):\n            b[i] = a[i]\n        for i, j in idx:\n            b[i] -= 1\n            b[j] -= 1\n        return b\n\n    def dfs(idx, res, cnt):\n        if cnt > 2:\n            return\n        if cnt == 2:\n            if res > ans:\n                global ans\n                ans = res\n                return\n        for i in range(idx, len(seg)):\n            if i > idx and seg[i][0] <= seg[i-1][1]:\n                continue\n            dfs(i+1, res+1, cnt+1)\n            dfs(i+1, res, cnt)\n\n    ans = 0\n    dfs(0, 0, 0)\n\n    idx = []\n    for i in range(m):\n        if ans == 1:\n            idx.append(i)\n            break\n    for i in range(m-1, -1, -1):\n        if ans == 2:\n            idx.append(i)\n            break\n\n    b = func(idx)\n    print(max(b) - min(b))\n    print(len(idx))\n    print(*[i+1 for i in idx])\n\n    return str(max(b) - min(b)) + \"\\n\" + str(len(idx)) + \"\\n\" + \" \".join(map(str, [i+1 for i in idx]))\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l-1, r-1))\n    \n    # find all possible subsets of segments\n    def subsets(segments):\n        result = [[]]\n        for segment in segments:\n            new_subsets = []\n            for subset in result:\n                new_subsets.append(subset + [segment])\n                new_subsets.append(subset)\n            result = new_subsets\n        return result\n    \n    # compute the maximum possible value\n    def max_possible(a, segments):\n        b = a[:]\n        for segment in segments:\n            for i in range(segment[0], segment[1]+1):\n                b[i] -= 1\n        return max(b) - min(b)\n    \n    # find the maximum possible value and the corresponding subset of segments\n    max_value = 0\n    max_segments = []\n    for subset in subsets(segments):\n        value = max_possible(a, subset)\n        if value > max_value:\n            max_value = value\n            max_segments = subset\n    \n    # output the result\n    result = [max_value]\n    result.append(len(max_segments))\n    result.extend(max_segments)\n    return''.join(map(str, result))"
    },
    {
        "number": 4080,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    segs = []\n    for _ in range(m):\n        l, r = map(int, stdin.readline().split())\n        segs.append((l, r))\n\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                dp[i][j] = 0\n            elif j < segs[i-1][0]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][segs[i-1][0]-1] + (j - segs[i-1][0]) * (a[segs[i-1][0]-1] - a[j-1]))\n\n    ans = 0\n    for i in range(n):\n        ans = max(ans, dp[m][i+1])\n\n    if ans == 0:\n        return \"0\\n0\\n\"\n\n    idx = [0] * m\n    res = []\n    for i in range(m):\n        if dp[i+1][segs[i][0]] + (n-segs[i][0]) * (a[segs[i][0]-1] - a[segs[i][0]-2]) == ans:\n            idx[i] = 1\n            res.append(i+1)\n\n    return f\"{ans}\\n{len(res)}\\n{' '.join(map(str, res))}\\n\" if len(res) > 0 else f\"{ans}\\n{len(res)}\\n\""
    },
    {
        "number": 4080,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split()[2+n+2*i:2+n+2*i+2])\n        segments.append((l-1, r-1))\n    dp = [[0] * n for _ in range(1<<m)]\n    for i in range(n):\n        dp[1<<i][i] = a[i]\n    for mask in range(1, 1<<m):\n        for j in range(m):\n            if mask & (1<<j):\n                l, r = segments[j]\n                dp[mask][l:r+1] = [dp[mask^1][i] - 1 for i in range(l, r+1)]\n    res = 0\n    max_val = float('-inf')\n    max_idx = None\n    for mask in range(1, 1<<m):\n        if mask & (mask-1):\n            continue\n        sub_res = max(dp[mask][i] for i in range(n)) - min(dp[mask][i] for i in range(n))\n        if sub_res > max_val:\n            max_val = sub_res\n            max_idx = mask\n    if max_val == 0:\n        return \"0\\n0\"\n    res = max_val\n    segments_used = bin(max_idx)[2:].count('1')\n    segments_to_use = []\n    for j in range(m):\n        if max_idx & (1<<j):\n            segments_to_use.append(j+1)\n    return f\"{res}\\n{segments_used}\\n{' '.join(map(str, segments_to_use))}\\n\""
    },
    {
        "number": 4080,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split()[0:2])\n        segments.append((l-1, r-1))\n\n    # dp[i][j] will be the minimum sum of the subarray ending at i with j segments\n    dp = [[float('inf')] * (m+1) for _ in range(n)]\n    dp[0][0] = 0\n    for i in range(n):\n        for j in range(1, m+1):\n            for k in range(len(segments)):\n                if segments[k][0] <= i < segments[k][1]:\n                    dp[i][j] = min(dp[i][j], dp[segments[k][0]][j-1] + a[i])\n\n    max_diff = -float('inf')\n    for j in range(1, m+1):\n        for i in range(n):\n            if dp[i][j] == float('inf'):\n                continue\n            for k in range(len(segments)):\n                if segments[k][0] <= i < segments[k][1]:\n                    continue\n                dp[i][j] = min(dp[i][j], dp[segments[k][0]][j-1] + a[i])\n            max_diff = max(max_diff, dp[i][j] - a[i])\n\n    if max_diff == -float('inf'):\n        return '0 0'\n\n    ans = ''\n    chosen = []\n    for j in range(1, m+1):\n        for i in range(n):\n            if dp[i][j] == float('inf'):\n                continue\n            for k in range(len(segments)):\n                if segments[k][0] <= i < segments[k][1]:\n                    continue\n                if dp[i][j] == dp[segments[k][0]][j-1] + a[i]:\n                    chosen.append(k+1)\n                    break\n\n    return f'{max_diff} {len(chosen)} {\" \".join(map(str, chosen))}\\n'\n"
    },
    {
        "number": 4080,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.strip().split())\n        segments.append((l, r))\n    dp = [[0] * n for _ in range(1 << m)]\n    for i in range(n):\n        dp[0][i] = a[i]\n    for s in range(1 << m):\n        for i in range(n):\n            if s == 0:\n                dp[s][i] = a[i]\n            else:\n                for j in range(n):\n                    if (s >> j) & 1:\n                        dp[s][i] = max(dp[s][i], dp[s ^ (1 << j)][j])\n                dp[s][i] -= 1\n    ans = 0\n    for i in range(n):\n        ans = max(ans, dp[1 << m - 1][i] - dp[0][i])\n    q = 0\n    for i in range(m):\n        if dp[1 << i][segments[i][0] - 1] > dp[1 << i][segments[i][1] - 1]:\n            q += 1\n    if q == m:\n        ans = max(ans, 0)\n    else:\n        ans = max(ans, q)\n    if ans == 0:\n        return str(ans) + \"\\n\" + str(0) + \"\\n\"\n    res = \"\"\n    for i in range(m):\n        if dp[1 << i][segments[i][0] - 1] > dp[1 << i][segments[i][1] - 1]:\n            res += str(i + 1) + \" \"\n    return str(ans) + \"\\n\" + str(q) + \"\\n\" + res.strip() + \"\\n\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    segments = [list(map(int, stdin.readline().split())) for _ in range(m)]\n\n    # possible values for each segment\n    values = [set(range(l, r+1)) for l, r in segments]\n\n    def backtrack(i, chosen, result, cost):\n        if i == len(values):\n            result.append(cost)\n            return\n\n        for j in range(len(segments)):\n            if j in chosen:\n                continue\n            chosen.add(j)\n            cost += a[segments[j][0]-1] - a[segments[j][1]-1]\n            backtrack(i+1, chosen, result, cost)\n            cost -= a[segments[j][0]-1] - a[segments[j][1]-1]\n            chosen.remove(j)\n\n    result = []\n    backtrack(0, set(), result, 0)\n    print(max(result))\n\n    chosen = set()\n    i = 0\n    cost = 0\n    while i < len(values):\n        max_diff = -float('inf')\n        for j in range(len(segments)):\n            if j in chosen:\n                continue\n            diff = max(values[j]) - min(values[j])\n            if diff > max_diff:\n                max_diff = diff\n                index = j\n        chosen.add(index)\n        cost += a[segments[index][0]-1] - a[segments[index][1]-1]\n        i += 1\n\n    print(len(chosen))\n    print(' '.join(map(str, sorted(chosen))))\n\n    return ''"
    },
    {
        "number": 4080,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, lines[i+2].split())\n        segments.append((l-1, r-1))\n    ans = -float('inf')\n    best_segments = []\n    best_value = 0\n    for i in range(1 << m):\n        chosen_segments = [segments[j] for j in range(m) if i & (1 << j)]\n        new_a = a.copy()\n        for l, r in chosen_segments:\n            for j in range(l, r+1):\n                new_a[j] -= 1\n        value = max(new_a) - min(new_a)\n        if value > ans:\n            ans = value\n            best_segments = chosen_segments\n            best_value = value\n    if ans == -float('inf'):\n        return '0 0'\n    else:\n        return f'{ans}\\n{len(best_segments)}\\n' +''.join(str(i+1) for i in range(len(best_segments)))"
    },
    {
        "number": 4080,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:n+2]))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split()[i*2+2:i*2+4])\n        segments.append((l, r))\n    \n    dp = [0] * n\n    for i in range(n):\n        dp[i] = a[i]\n    for i in range(m):\n        l, r = segments[i]\n        for j in range(l-1, r):\n            dp[j] -= 1\n    \n    max_diff = -1\n    for i in range(1, n):\n        max_diff = max(max_diff, dp[i] - dp[i-1])\n    \n    result = f\"{max_diff}\\n\"\n    if max_diff == 0:\n        return result + \"0\\n0\\n\"\n    \n    subset = []\n    for i in range(m):\n        l, r = segments[i]\n        if max(dp[l-1:r]) - min(dp[l-1:r]) == max_diff:\n            subset.append(i+1)\n    \n    result += f\"{len(subset)}\\n\"\n    for i in subset:\n        result += f\"{i} \"\n    return result\n\nstdin = \"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\"\nprint(solution(stdin)) # Output: 6\\n2\\n4 1"
    },
    {
        "number": 4081,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    k = 1  # The maximum number of elements in a strictly increasing sequence\n    s = ['L']  # The string of moves\n\n    while k < n:\n        # Check if the leftmost element of a is the smallest element in a\n        if a[0] == k:\n            # If yes, take the leftmost element\n            s.append('L')\n            a.remove(a[0])\n            k += 1\n        else:\n            # If not, take the rightmost element\n            s.append('R')\n            a.remove(a[-1])\n            k += 1\n\n    return f\"{k}\\n{''.join(s)}\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    k = 0\n    s = ''\n    left = 0\n    right = n - 1\n    while left < right:\n        if k == 0:\n            s += 'L'\n            k += 1\n            left += 1\n        else:\n            if a[left] + 1 == a[right]:\n                s += 'L'\n                k += 1\n                left += 1\n            else:\n                s += 'R'\n                k += 1\n                right -= 1\n    if left == right:\n        s += 'L'\n        k += 1\n    print(k)\n    print(s)\n"
    },
    {
        "number": 4081,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    def dfs(start, end, curr_len, curr_seq, curr_moves):\n        if curr_len > max_len:\n            nonlocal max_len, max_seq\n            max_len = curr_len\n            max_seq = curr_seq\n        if curr_len == n:\n            return\n        if start < end:\n            dfs(start + 1, end, curr_len + 1, curr_seq + ['L'], curr_moves + 'L')\n        if start <= end:\n            dfs(start, end - 1, curr_len + 1, curr_seq + ['R'], curr_moves + 'R')\n\n    max_len = 0\n    max_seq = []\n    dfs(0, n - 1, 0, [], '')\n    k = max_len\n    s = ''.join(max_seq)\n    return f\"{k}\\n{s}\""
    },
    {
        "number": 4081,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # number of moves to take longest increasing subsequence\n    k = 0\n\n    # move rightmost element\n    for i in range(n):\n        if i == 0 or a[i] > a[i-1]:\n            k += 1\n            a[i] = a[n-1]\n            n -= 1\n\n    # move leftmost element\n    for i in range(n-1, -1, -1):\n        if i == n-1 or a[i] > a[i+1]:\n            k += 1\n            a[i] = a[0]\n            n -= 1\n\n    return str(k) + '\\n' + ''.join(['L' if i < n-1 else 'R' for i in range(k)])\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    ans = []\n    for i in range(n):\n        if i == 0:\n            ans.append(a[i])\n        else:\n            if a[i] > ans[-1]:\n                ans.append(a[i])\n            else:\n                ans.append(a[i-1])\n    \n    k = len(ans)\n    s = ''.join(['R' if i < n-1 and ans[i+1] > ans[i] else 'L' for i in range(n)])\n    return f\"{k}\\n{s}\""
    },
    {
        "number": 4081,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    k = 1\n    s = 'L'\n    while len(a) > k:\n        if a[k-1] < a[k]:\n            s += 'R'\n            k += 1\n        else:\n            a.pop(k-1)\n            s += 'L'\n\n    return str(k) + '\\n' + s\n\nprint(solution('''\n5\n2 1 5 4 3\n''')) # Output: 4\\nLRRR\n\nprint(solution('''\n7\n1 3 5 6 7 4 2\n''')) # Output: 7\\nLRLRLLL\n\nprint(solution('''\n3\n1 2 3\n''')) # Output: 3\\nLLL\n\nprint(solution('''\n4\n1 2 4 3\n''')) # Output: 4\\nLLRL"
    },
    {
        "number": 4081,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n    # determine the maximum number of elements in a strictly increasing sequence\n    k = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            k = i+1\n    # construct a strictly increasing sequence\n    s = []\n    for i in range(k):\n        if i == 0 or a[i] > s[-1]:\n            s.append(a[i])\n        else:\n            j = bisect_right(s, a[i])\n            s[j] = a[i]\n    # construct the final output string\n    output = ''\n    for i in range(len(s)):\n        output += 'R' if i == len(s)-1 or s[i+1] > s[i] else 'L'\n    return f'{k}\\n{output}'\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    max_length = 0\n    for i in range(n):\n        if i == 0:\n            continue\n        left_len = i+1\n        right_len = n-i\n        if left_len > right_len:\n            continue\n        left_seq = a[:i+1]\n        right_seq = a[i:]\n        left_seq.sort()\n        right_seq.sort()\n        seq = left_seq + right_seq\n        if seq[-1]-seq[0] > max_length:\n            max_length = seq[-1]-seq[0]\n            answer = ''.join(['L' if i < len(left_seq) else 'R' for i in range(seq[-1]-seq[0]+1)])\n    return f\"{max_length}\\n{answer}\"\n\nprint(solution(\"5\\n2 1 5 4 3\")) # Output: 4\\nLRRR\nprint(solution(\"7\\n1 3 5 6 7 4 2\")) # Output: 7\\nLRLRLLL\nprint(solution(\"3\\n1 2 3\")) # Output: 3\\nLLL\nprint(solution(\"4\\n1 2 4 3\")) # Output: 4\\nLLRL"
    },
    {
        "number": 4081,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if a[i-1] > a[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n    ans = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            ans = max(ans, dp[i][j])\n    res = []\n    for i in range(n-1, -1, -1):\n        for j in range(i, -1, -1):\n            if dp[i][j] == ans:\n                res.append('L' if j == i else 'R')\n                ans -= 1\n                break\n    return str(ans) + '\\n' + ''.join(res)"
    },
    {
        "number": 4081,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # edge case\n    if n == 1:\n        return \"1\\n\" + str(a[0])\n\n    # initialize variables\n    dp = [1] * n\n    max_len = 1\n    left = 0\n\n    # dp table calculation\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            dp[i] = dp[i-1] + 1\n        if dp[i] > max_len:\n            max_len = dp[i]\n            left = i\n\n    # build answer string\n    answer = \"\"\n    for i in range(max_len):\n        if i % 2 == 0:\n            answer += \"L\"\n        else:\n            answer += \"R\"\n\n    # check for other possible solutions\n    for i in range(left, left + max_len):\n        if a[i]!= i+1:\n            return \"Impossible\"\n\n    return str(max_len) + \"\\n\" + answer"
    },
    {
        "number": 4082,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Compute maximum length of strictly increasing subarray\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    # Compute maximum length of strictly increasing subarray after removing at most one element\n    max_len = 1\n    for i in range(n):\n        for j in range(i + 2, n):\n            if a[j] > a[i]:\n                max_len = max(max_len, dp[j])\n\n    return str(max_len)"
    },
    {
        "number": 4082,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [1] * n\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            dp[i] = dp[i-1] + 1\n    ans = 0\n    for i in range(n):\n        ans = max(ans, dp[i])\n    return str(ans)"
    },
    {
        "number": 4082,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # we can only remove one element\n    max_len = 0\n    for i in range(n):\n        # try removing the ith element\n        new_a = a[:i] + a[i+1:]\n        # find the length of the largest increasing subarray\n        inc_len = 1\n        for j in range(1, len(new_a)):\n            if new_a[j] > new_a[j-1]:\n                inc_len += 1\n            else:\n                max_len = max(max_len, inc_len)\n                inc_len = 1\n        max_len = max(max_len, inc_len)\n    \n    return str(max_len)"
    },
    {
        "number": 4082,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [1] * n\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            dp[i] = dp[i-1] + 1\n    return max(dp)"
    },
    {
        "number": 4082,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    # dp[i] = length of the longest strictly increasing subarray ending at index i\n    dp = [1] * n\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            dp[i] = dp[i-1] + 1\n    # find the maximum value in dp\n    max_len = 1\n    for i in range(n):\n        if dp[i] > max_len:\n            max_len = dp[i]\n    # subtract 1 to exclude the last element, which can't be part of the increasing subarray\n    print(max_len - 1)"
    },
    {
        "number": 4082,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # Case 1: Remove the last element\n    if n == 1:\n        return str(1)\n\n    # Case 2: Remove the first element\n    if n == 2:\n        return str(1)\n\n    # Case 3: Remove the middle element\n    max_len = 1\n    for i in range(1, n-1):\n        if a[i-1] < a[i] < a[i+1]:\n            max_len = max(max_len, i+1)\n\n    # Case 4: Remove the first or last element\n    max_len = max(max_len, 1)\n    max_len = max(max_len, n-1)\n\n    return str(max_len)"
    },
    {
        "number": 4082,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return 1\n    \n    max_len = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            max_len += 1\n        else:\n            max_len = 1\n    return max_len"
    },
    {
        "number": 4082,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if n == 1:\n        return \"2\"\n    else:\n        dp = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if a[j] < a[i]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return str(max(dp))"
    },
    {
        "number": 4082,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # compute the maximum length of the strictly increasing subarray\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    # return the maximum length of the strictly increasing subarray\n    return max(dp)"
    },
    {
        "number": 4082,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(2)\n    if a[1] > a[0]:\n        max_len = 2\n        for i in range(2, n):\n            if a[i] > a[i-1]:\n                max_len += 1\n            else:\n                break\n        return str(max_len)\n    else:\n        max_len = 1\n        for i in range(2, n):\n            if a[i] > a[i-1]:\n                max_len += 1\n            else:\n                break\n        return str(max_len)"
    },
    {
        "number": 4083,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # initialize variables\n    count = 0\n    max_count = 0\n\n    # loop through array\n    for i in range(n):\n        # check if count of equal elements is already k\n        if count == k:\n            break\n\n        # divide element by 2 rounding down\n        a[i] //= 2\n\n        # increment count if element is not zero\n        if a[i] > 0:\n            count += 1\n            max_count = max(max_count, count)\n\n    # return minimum number of operations required\n    return max_count"
    },
    {
        "number": 4083,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    ops = 0\n    for i in range(n):\n        if a[i] % 2 == 1:\n            a[i] -= 1\n            ops += 1\n    for i in range(n):\n        if a[i] % 2 == 1:\n            a[i] -= 1\n            ops += 1\n    return str(ops)"
    },
    {
        "number": 4083,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()[0:2]))\n    a = list(map(int, stdin.split()[2:]))\n    \n    count = 0\n    for i in range(n):\n        if a[i] >= k:\n            return count\n        else:\n            a[i] //= 2\n            count += 1\n    \n    return -1"
    },
    {
        "number": 4083,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    # calculate the frequency of each integer in the array\n    freq = {}\n    for i in range(n):\n        if a[i] in freq:\n            freq[a[i]] += 1\n        else:\n            freq[a[i]] = 1\n    \n    # count the number of integers that need to be added to reach k equal integers\n    count = 0\n    for key, value in freq.items():\n        if value < k:\n            count += k - value\n    \n    # divide each integer by 2 in one operation\n    for i in range(n):\n        a[i] //= 2\n    \n    # calculate the frequency of each integer in the array after operations\n    freq = {}\n    for i in range(n):\n        if a[i] in freq:\n            freq[a[i]] += 1\n        else:\n            freq[a[i]] = 1\n    \n    # count the number of integers that need to be added to reach k equal integers\n    for key, value in freq.items():\n        if value < k:\n            count += k - value\n    \n    return str(count)"
    },
    {
        "number": 4083,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    count = 0\n    for i in range(n):\n        if a[i] >= k:\n            count += a[i] // k\n        else:\n            count = -1\n            break\n\n    if count == -1:\n        return \"IMPOSSIBLE\"\n    else:\n        return count"
    },
    {
        "number": 4083,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        count += a[i] // 2\n    return count >= k"
    },
    {
        "number": 4083,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    count = 0\n    for i in range(n):\n        if a[i] % 2 == 1:\n            count += 1\n            a[i] //= 2\n    \n    while count < k:\n        max_val = 0\n        max_idx = -1\n        for i in range(n):\n            if a[i] > max_val and a[i] % 2 == 0:\n                max_val = a[i]\n                max_idx = i\n        \n        if max_idx == -1:\n            break\n        \n        a[max_idx] //= 2\n        count += 1\n    \n    return count\n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        if a[i] < k:\n            count += k - a[i]\n            a[i] = k\n    return count if count > 0 else -1"
    },
    {
        "number": 4083,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if a[i] >= k:\n            count += k\n            break\n        else:\n            count += a[i]\n            a[i] = 0\n    return count\n\nprint(solution(input()))"
    },
    {
        "number": 4083,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        count += a[i]\n        if count >= k:\n            return count // k\n    return count // k + 1\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    blue_balls = 0\n    red_balls = 0\n    for i in range(N):\n        if i < A:\n            red_balls += 1\n        else:\n            blue_balls += 1\n            red_balls += 1\n        if i >= N - B:\n            blue_balls += 1\n    return str(blue_balls)\n\nwith open('input.txt') as f:\n    input_str = f.read()\n\nprint(solution(input_str))"
    },
    {
        "number": 4084,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    total_balls = a + b\n    blue_balls = total_balls // 2\n    red_balls = total_balls - blue_balls\n    count = blue_balls\n    for i in range(n-1):\n        count += red_balls * (i+1)\n    return str(count)"
    },
    {
        "number": 4084,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    blue_count = 0\n    for i in range(a+b):\n        if i < a:\n            blue_count += 1\n        else:\n            blue_count = blue_count * 2 + 1\n    blue_count *= n // (a + b)\n    return str(blue_count)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4084,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    N, A, B = map(int, stdin.split())\n\n    # initialize variables\n    blue_count = 0\n    red_count = 0\n    for i in range(N):\n        # if we have placed all the blue balls\n        if blue_count + A >= N:\n            blue_count += A\n            red_count += B\n        # otherwise, place a blue ball and update blue_count\n        else:\n            blue_count += 1\n\n    # return the final count of blue balls\n    return blue_count"
    },
    {
        "number": 4084,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n == 0:\n        return str(0)\n    elif n <= b:\n        return str(n)\n    else:\n        return str(min(n - a, b))\n\nstdin = input().strip()\nprint(solution(stdin))"
    },
    {
        "number": 4084,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    count = A + B\n    while count < N:\n        count += A\n        count += B\n    return count - N"
    },
    {
        "number": 4084,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    blue_balls = [0] * (N+A+B)\n    for i in range(N):\n        blue_balls[i] = 1\n    for i in range(N, N+A):\n        blue_balls[i] = 1\n    for i in range(N+A, N+A+B):\n        blue_balls[i] = 0\n    count = 0\n    for i in range(N):\n        if blue_balls[i] == 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4084,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    blue_balls = [0] * n\n    blue_balls[-a:] = [1] * a\n    blue_balls[-b-a:-b] = [1] * b\n    return str(sum(blue_balls))"
    },
    {
        "number": 4084,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(min(n, a + b))"
    },
    {
        "number": 4084,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, a, b = map(int, stdin.split())\n    \n    # initialize variables\n    blue_count = 0\n    red_count = 0\n    \n    # loop through n times\n    for i in range(n):\n        if i < a:\n            # place a blue ball\n            blue_count += 1\n        elif i < n - b:\n            # place a red ball\n            red_count += 1\n        else:\n            # no more blue balls to place\n            pass\n    \n    # return answer\n    return blue_count"
    },
    {
        "number": 4085,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    answers = []\n    for i in range(1, t+1):\n        n = int(lines[i*2-1])\n        divisors = [int(line) for line in lines[i*2].split()]\n        divisors.sort()\n        if divisors[0] <= 1 or divisors[-1] >= 2*divisors[0]:\n            answers.append('-1')\n        else:\n            min_x = 1\n            while True:\n                if all(d % min_x == 0 for d in divisors):\n                    break\n                min_x += 1\n            answers.append(str(min_x))\n    return '\\n'.join(answers)"
    },
    {
        "number": 4085,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i*2-1])\n        divisors = list(map(int, lines[i*2].split()))\n        if divisors == sorted(divisors) and divisors[-1] == divisors[-2] and divisors[-1]*2 == divisors[-3]:\n            if divisors[-2] == divisors[-4] and divisors[-2]*2 == divisors[-5]:\n                print(divisors[-3])\n            else:\n                print(divisors[-2])\n        else:\n            print(-1)\n    return ''"
    },
    {
        "number": 4085,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        divisors = list(map(int, stdin.readline().strip().split()))\n        if n == 1:\n            print(-1)\n            continue\n        divisors.sort()\n        if divisors[0] == 1:\n            print(-1)\n            continue\n        x = divisors[0]\n        for i in range(1, n):\n            if divisors[i] * divisors[i - 1] > x:\n                x = divisors[i]\n        if x == divisors[-1]:\n            print(-1)\n        else:\n            print(x)"
    },
    {
        "number": 4085,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        divisors = list(map(int, stdin.readline().strip().split()))\n        \n        # check if input is contradictory\n        if len(divisors)!= n-2:\n            print(-1)\n            continue\n        \n        # find minimum possible x\n        x = 1\n        for d in divisors:\n            if d > x:\n                x = d\n        print(x)"
    },
    {
        "number": 4085,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split(\"\\n\\n\")\n    for query in queries:\n        n = int(query.split(\"\\n\")[0])\n        divisors = sorted(map(int, query.split(\"\\n\")[1].split()))\n        if divisors[0] < 2 or divisors[-1] > divisors[0] * divisors[-2]:\n            print(\"-1\")\n            continue\n        x = divisors[0]\n        for i in range(1, n):\n            if divisors[i] > x:\n                x *= divisors[i]\n            elif divisors[i] == x:\n                x += divisors[i]\n            else:\n                break\n        if x == divisors[-1] * divisors[-2]:\n            print(x)\n        else:\n            print(\"-1\")\n    return \"\""
    },
    {
        "number": 4085,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    queries = []\n    for i in range(1, t * 3, 3):\n        n = int(lines[i])\n        nums = list(map(int, lines[i + 1].split()))\n        queries.append((n, nums))\n\n    # solve queries\n    for n, nums in queries:\n        if nums == sorted(nums)[:-2]:\n            print(nums[-1])\n        else:\n            print(-1)\n\n    return \"\"\n\nstdin = \"2\\n8\\n8 2 12 6 4 24 16 3\\n1\\n2\\n\"\nprint(solution(stdin)) # Output: 48\\n4\\n"
    },
    {
        "number": 4085,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        divisors = list(map(int, stdin.readline().strip().split()))\n        if n == 1:\n            print(divisors[0])\n        elif divisors[0] == 1 or divisors[0] == divisors[n-1]:\n            print(-1)\n        else:\n            left, right = 0, divisors[n-1]\n            while left <= right:\n                mid = (left + right) // 2\n                count = sum(1 for d in divisors if d <= mid)\n                if count == n-1:\n                    print(mid)\n                    break\n                elif count < n-1:\n                    left = mid + 1\n                else:\n                    right = mid - 1"
    },
    {
        "number": 4085,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    queries = []\n    for i in range(1, t+1):\n        n = int(lines[i*2-1])\n        divisors = list(map(int, lines[i*2].split()))\n        queries.append((n, divisors))\n    for query in queries:\n        n, divisors = query\n        if divisors == sorted(divisors) and divisors[-1]!= 1 and divisors[-1]!= n:\n            print(divisors[-1])\n        else:\n            print(-1)"
    },
    {
        "number": 4085,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        divisors = list(map(int, stdin.readline().strip().split()))\n        divisors.sort()\n        for j in range(n-1):\n            if divisors[j]*divisors[j+1] > divisors[-1]:\n                return -1\n        for j in range(n):\n            if divisors[j] == 1 or divisors[j] == divisors[-1]:\n                continue\n            for k in range(j+1, n):\n                if divisors[j]*divisors[k] > divisors[-1]:\n                    return -1\n        x = divisors[-1]\n        if x == 1:\n            x = divisors[-2]\n        print(x)\n    return ''"
    },
    {
        "number": 4085,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        stdin = stdin.split('\\n', 1)[1]\n        n = int(stdin.split()[0])\n        divisors = [int(d) for d in stdin.split()[1:]]\n        if divisors[-1] == 1:\n            print(-1)\n        else:\n            for i in range(len(divisors)-1, 0, -1):\n                if divisors[i] == divisors[i-1]:\n                    divisors.pop(i)\n            x = divisors[0]\n            for d in divisors:\n                if x % d!= 0:\n                    print(-1)\n                    break\n            else:\n                print(x)"
    },
    {
        "number": 4086,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # remove duplicates\n    unique_elements = set(a)\n    rightmost_occurrences = {}\n    for elem in unique_elements:\n        rightmost_occurrences[elem] = a.index(elem, a.index(elem)+1)\n    a = list(rightmost_occurrences.values())\n    \n    # print output\n    x = len(a)\n    stdout = f\"{x}\\n\"\n    stdout += \" \".join(map(str, a))\n    return stdout"
    },
    {
        "number": 4086,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    unique_a = []\n    for i in range(n-1, -1, -1):\n        if a[i] not in unique_a:\n            unique_a.append(a[i])\n    x = len(unique_a)\n    \n    print(x)\n    print(*unique_a)\n    \n"
    },
    {
        "number": 4086,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # Use a dictionary to keep track of the last occurrence of each element\n    # We can use the index as the value since the array is 1-indexed\n    last_occurrence = {}\n    \n    # Traverse the array and update the last occurrence of each element\n    for i in range(n):\n        if a[i] not in last_occurrence:\n            last_occurrence[a[i]] = i\n    \n    # Count the number of unique elements\n    unique_count = len(last_occurrence)\n    \n    # Print the number of unique elements\n    print(unique_count)\n    \n    # Print the unique elements in the order of their last occurrence\n    unique_elements = sorted(last_occurrence.keys(), key=lambda x: last_occurrence[x], reverse=True)\n    print(*unique_elements)\n    \n    return \"\""
    },
    {
        "number": 4086,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = sorted(list(map(int, stdin.readline().strip().split())))\n    count = 1\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            a[count] = a[i]\n            count += 1\n    a = a[:count]\n    print(count)\n    print(' '.join(map(str, a)))"
    },
    {
        "number": 4086,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    unique_elements = set(a)\n    x = len(unique_elements)\n    output = [0] * x\n    for i in range(n-1, -1, -1):\n        if a[i] in unique_elements:\n            output[unique_elements.index(a[i])] = a[i]\n            unique_elements.remove(a[i])\n    return f\"{x}\\n{' '.join(map(str, output))}\"\n\nprint(solution(\"6\\n1 5 5 1 6 1\"))\nprint(solution(\"5\\n2 4 2 4 4\"))\nprint(solution(\"5\\n6 6 6 6 6\"))"
    },
    {
        "number": 4086,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    unique_a = list(set(a))\n    x = len(unique_a)\n    print(x, *unique_a)"
    },
    {
        "number": 4086,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    unique = set()\n    for i in range(n-1, -1, -1):\n        if a[i] not in unique:\n            unique.add(a[i])\n    x = len(unique)\n    result = []\n    for u in unique:\n        result.append(u)\n    print(x)\n    print(*result)"
    },
    {
        "number": 4086,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    unique_a = []\n    for i in range(n):\n        if a[i] not in unique_a:\n            unique_a.append(a[i])\n        elif a[i] in unique_a:\n            unique_a.remove(a[i])\n\n    unique_a.reverse()\n    x = len(unique_a)\n    return f\"{x}\\n{' '.join(map(str, unique_a))}\""
    },
    {
        "number": 4086,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    unique_elements = set()\n    unique_elements_list = []\n    \n    for i in range(n):\n        if a[i] not in unique_elements:\n            unique_elements.add(a[i])\n            unique_elements_list.append(a[i])\n            \n    x = len(unique_elements_list)\n    print(x)\n    print(' '.join(map(str, unique_elements_list)))\n    \n"
    },
    {
        "number": 4086,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    unique_a = []\n    for i in range(n-1, -1, -1):\n        if a[i] not in unique_a:\n            unique_a.append(a[i])\n    print(len(unique_a))\n    print(*unique_a)\n    return \"\""
    },
    {
        "number": 4087,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a\n    while True:\n        sum_of_digits = sum(int(digit) for digit in str(n))\n        if sum_of_digits % 4 == 0:\n            return str(n)\n        else:\n            n += 1"
    },
    {
        "number": 4087,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 3 == 0:\n        return str(a + 3)\n    elif sum(int(digit) for digit in str(a)) % 4 == 0:\n        return str(a)\n    else:\n        n = a + 1\n        while n % 3!= 0 or sum(int(digit) for digit in str(n)) % 4!= 0:\n            n += 1\n        return str(n)"
    },
    {
        "number": 4087,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a + 1\n    while not sum(int(digit) for digit in str(n)) % 4 == 0:\n        n += 1\n    return str(n)"
    },
    {
        "number": 4087,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 4!= 0 or a < 100:\n        return str(a)\n    n = a\n    while True:\n        digit_sum = sum(int(digit) for digit in str(n))\n        if digit_sum % 4 == 0:\n            return str(n)\n        n += 1"
    },
    {
        "number": 4087,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a\n    while True:\n        s = sum(int(i) for i in str(n))\n        if s % 4 == 0:\n            return str(n)\n        n += 1\n\nprint(solution(\"432\")) # Output: 435\nprint(solution(\"99\")) # Output: 103\nprint(solution(\"237\")) # Output: 237\nprint(solution(\"42\")) # Output: 44"
    },
    {
        "number": 4087,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 3 == 0:\n        return str(a + 3)\n    elif sum(int(digit) for digit in str(a)) % 4 == 0:\n        return str(a + 3)\n    else:\n        for i in range(a + 1, 1000):\n            if sum(int(digit) for digit in str(i)) % 4 == 0:\n                return str(i)\n        return str(1000)"
    },
    {
        "number": 4087,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input to integer\n    a = int(stdin)\n\n    # If the input is already an interesting number, return it\n    if a % 4 == 0 and sum(int(digit) for digit in str(a)) % 4 == 0:\n        return str(a)\n\n    # If the input is less than 100, increment it by 4 and return\n    if a < 100:\n        return str(a + 4)\n\n    # Otherwise, find the nearest interesting number by checking each number in the sequence\n    for i in range(a + 1, a + 4):\n        if i % 4 == 0 and sum(int(digit) for digit in str(i)) % 4 == 0:\n            return str(i)\n\n    # If no interesting number is found, return the input number\n    return str(a)"
    },
    {
        "number": 4087,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 3 == 0:\n        a += 3\n    else:\n        a = a + 3 - (a + 3) % 3\n    return str(a)"
    },
    {
        "number": 4087,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    \n    if a % 3 == 0:\n        n = a + (3 - (a % 3))\n    elif a % 4 == 0:\n        n = a + (4 - (a % 4))\n    else:\n        n = a + (5 - (a % 5))\n    \n    if n < a:\n        n += (n % 4)\n    else:\n        n -= (a % 4)\n    \n    return str(n)"
    },
    {
        "number": 4087,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a\n    while True:\n        if sum(int(digit) for digit in str(n)) % 4 == 0 and n % 3 == 0:\n            return str(n)\n        n += 1"
    },
    {
        "number": 4088,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for i in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline())\n        b = list(map(int, stdin.readline().split()))\n        if b == sorted(b):\n            continue\n        t = sorted(s, key=lambda x: ord(x))\n        if b!= [sum(abs(ord(t[i]) - ord(t[j])) for j in range(i)) for i in range(len(t))]:\n            continue\n        print(t)\n        return t\n    return \"\""
    },
    {
        "number": 4088,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline().strip())\n        b = list(map(int, stdin.readline().strip().split()))\n        t = ''\n        for j in range(m):\n            t += s[j]\n        for j in range(m, len(s)):\n            t += s[j]\n        if sorted(b)!= sorted([sum(abs(i-j) for j in range(m) if s[j] > s[i]) for i in range(m)]):\n            return 'error'\n        if sorted(b) == sorted([sum(abs(i-j) for j in range(len(t)) if t[j] > t[i]) for i in range(len(t))]):\n            return t\n        else:\n            return 'error'"
    },
    {
        "number": 4088,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4088,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    num_test_cases = int(input_data[0])\n    output = []\n    for i in range(1, num_test_cases * 4, 4):\n        s = input_data[i]\n        m = int(input_data[i+1])\n        b = [int(x) for x in input_data[i+2].split()]\n        t = s\n        for j in range(m):\n            index = b.index(max(b))\n            t = t[:index] + t[index+1:]\n            b[index] = 0\n        if b == [0]*m:\n            output.append(t)\n    return '\\n'.join(output)"
    },
    {
        "number": 4088,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for i in range(n):\n        s = stdin.readline().strip()\n        m = int(stdin.readline())\n        b = list(map(int, stdin.readline().split()))\n        # convert the string into a list of integers\n        t = list(map(ord, s))\n        # sort the list in ascending order\n        t.sort()\n        # iterate over the list and subtract the previous integer from the current one to get the distance between them\n        for i in range(len(t)-1):\n            t[i+1] -= t[i]\n        # check if the distance array is the same as the given one\n        if t == b:\n            return ''.join(map(chr, t))\n        # try to change the order of the list to satisfy the distance array\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if abs(ord(s[i]) - ord(s[j])) == abs(t[i+1] - t[j+1]):\n                    t = t[:i] + [t[j], t[i], t[j+1], t[i+1]] + t[i+2:]\n                    if t == b:\n                        return ''.join(map(chr, t))\n    # if no answer is found, return empty string\n    return ''"
    },
    {
        "number": 4088,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline().strip())\n        b = [int(x) for x in stdin.readline().strip().split()]\n        # count the frequency of each letter in s\n        freq = [0] * 26\n        for letter in s:\n            freq[ord(letter) - ord('a')] += 1\n        # construct t from s\n        t = ''\n        for i in range(m):\n            t += chr(ord('a') + (b[i] % 26))\n            b[i] //= 26\n        # check if t fulfills the conditions\n        if len(t)!= m or any(b[i] > freq[ord(t[i]) - ord('a')] for i in range(m)):\n            return \"\"\n        # return t\n        return t"
    },
    {
        "number": 4088,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    for i in range(1, q * 4, 4):\n        s = lines[i]\n        m = int(lines[i+1])\n        b = list(map(int, lines[i+2].split()))\n        # find suitable string t\n        for t in itertools.permutations(s):\n            if len(t) == len(set(t)):  # no duplicate letters\n                # calculate b_i for t\n                b_i = [sum(abs(i - j) for j in range(len(t)) if t[j] > t[i]) for i in range(len(t))]\n                if b_i == b:  # match b\n                    return ''.join(t)\n    return None  # no suitable string found"
    },
    {
        "number": 4088,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    num_cases = int(inputs[0])\n    results = []\n    for i in range(1, num_cases*4, 4):\n        s = inputs[i]\n        m = int(inputs[i+1])\n        b = [int(x) for x in inputs[i+2].split()]\n        t = sorted(set(s), key=lambda x: s.index(x))\n        if m == 0:\n            results.append(t)\n            continue\n        counts = [0]*m\n        counts[0] = 1\n        for i in range(1, m):\n            counts[i] = counts[i-1]\n            j = i-1\n            while j >= 0 and t[j] > t[i]:\n                counts[i] += counts[j]\n                j -= 1\n        result = ''.join(t[x] for x in sorted(range(m), key=lambda i: counts[i], reverse=True))\n        if b == counts:\n            results.append(result)\n    return '\\n'.join(results)"
    },
    {
        "number": 4088,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        s = stdin.readline().strip()\n        m = int(stdin.readline().strip())\n        b = [int(x) for x in stdin.readline().strip().split()]\n        # Sort the string s and b\n        sorted_s = sorted(s)\n        sorted_b = sorted(b)\n        # Check if there exists a suitable t\n        for j in range(len(sorted_s)):\n            t = s.replace(sorted_s[j], '', 1)\n            # Check if the distances are equal\n            if sorted_b == [b.count(j) for j in range(len(t)+1)]:\n                return t\n    # No suitable t found\n    return ''\n"
    },
    {
        "number": 4088,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, m, b = stdin.strip().split(\"\\n\")\n    b = list(map(int, b.split()))\n    n = len(s)\n    t = sorted(set(s), key=lambda c: s.index(c))\n    for i in range(m):\n        for j in range(i+1, m):\n            if s.index(t[j]) > s.index(t[i]):\n                b[i] += j - i\n    t = \"\".join(t)\n    if b == list(map(lambda i: sum(abs(i-j) for j in range(n) if s[j] > s[i]), range(m))):\n        return t\n    else:\n        return \"\""
    },
    {
        "number": 4089,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 1000000000000001:\n        return 'Invalid Input'\n    elif n == 1:\n        return 'a'\n    else:\n        s = ''\n        while n > 0:\n            r = n % 26\n            if r == 0:\n                s = 'z' + s\n                n = (n - 1) // 26\n            else:\n                s = chr(ord('a') + r - 1) + s\n                n = n // 26\n        return s\n\n\ndef"
    },
    {
        "number": 4089,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    names = {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13:'m', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19:'s', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z',\n             27: 'aa', 28: 'ab', 29: 'ac', 30: 'ad', 31: 'ae', 32: 'af', 33: 'ag', 34: 'ah', 35: 'ai', 36: 'aj', 37: 'ak', 38: 'al', 39: 'am', 40: 'an', 41: 'ao', 42: 'ap', 43: 'aq', 44: 'ar', 45: 'as', 46: 'at', 47: 'au', 48: 'av', 49: 'aw', 50: 'ax', 51: 'ay', 52: 'az',\n             53: 'ba', 54: 'bb', 55: 'bc', 56: 'bd', 57: 'be', 58: 'bf', 59: 'bg', 60: 'bh', 61: 'bi', 62: 'bj', 63: 'bk', 64: 'bl', 65: 'bm', 66: 'bn', 67: 'bo', 68: 'bp', 69: 'bq', 70: 'br', 71: 'bs', 72: 'bt', 73: 'bu', 74: 'bv', 75: 'bw', 76: 'bx', 77: 'by', 78: 'bz',\n             79: 'ca', 80: 'cb', 81: 'cc', 82: 'cd', 83: 'ce', 84: 'cf', 85: 'cg', 86: 'ch', 87: 'ci', 88: 'cj', 89: 'ck', 90: 'cl', 91: 'cm', 92: 'cn', 93: 'co', 94: 'cp', 95: 'cq', 96: 'cr', 97: 'cs', 98: 'ct', 99: 'cu', 100: 'cv', 101: 'cw', 102: 'cx', 103: 'cy', 104: 'cz',\n             105: 'da', 106: 'db', 107: 'dc', 108: 'dd', 109: 'de', 110: 'df', 111: 'dg', 112: 'dh', 113: 'di', 114: 'dj', 115: 'dk', 116: 'dl', 117: 'dm', 118: 'dn', 119: 'do', 120: 'dp', 121: 'dq', 122: 'dr', 123: 'ds', 124: 'dt', 125: 'du', 126: 'dv', 127: 'dw', 128: 'dx', 129: 'dy', 130: 'dz',\n             131: 'ea', 132: 'eb', 133: 'ec', 134: 'ed', 135: 'ee', 136: 'ef', 137: 'eg', 138: 'eh', 139: 'ei', 140: 'ej', 1"
    },
    {
        "number": 4089,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # split the number into digits\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    # reverse the digits\n    digits = digits[::-1]\n    # initialize the result string\n    result = \"\"\n    # initialize the current number\n    num = 0\n    # iterate over the digits from right to left\n    for i, d in enumerate(digits):\n        # add the current digit to the current number\n        num += d * (10**(i))\n        # check if the current number is within the range of names\n        if num <= 26:\n            result += chr(ord('a') + num - 1)\n        elif num <= 701:\n            result += chr(ord('a') + num - 27)\n            result += chr(ord('a') + num - 26)\n        elif num <= 18277:\n            result += chr(ord('a') + num - 702)\n            result += chr(ord('a') + num - 701)\n            result += chr(ord('a') + num - 700)\n        elif num <= 475253:\n            result += chr(ord('a') + num - 18278)\n            result += chr(ord('a') + num - 18277)\n            result += chr(ord('a') + num - 18276)\n        else:\n            # add the remaining digits of the number to the result string\n            for j in range(i, len(digits)):\n                result += chr(ord('a') + digits[j] - 1)\n                if j!= len(digits) - 1:\n                    result += chr(ord('a') + digits[j] - 1)\n            break\n    return result"
    },
    {
        "number": 4089,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 1:\n        return 'a'\n    elif N == 2:\n        return 'b'\n    elif N <= 26:\n        return chr(96+N)\n    elif N <= 701:\n        if N % 26 == 0:\n            return 'zy'\n        else:\n            return chr(96+(N-26)//26)+chr(96+(N-1)%26)\n    elif N <= 18277:\n        if N % 26 == 0:\n            return 'zzy'\n        else:\n            return chr(96+(N-701)//26)+chr(96+(N-701-1)%26)\n    elif N <= 475253:\n        if N % 26 == 0:\n            return 'zzzy'\n        else:\n            return chr(96+(N-18277)//26)+chr(96+(N-18277-1)%26)\n    else:\n        if N % 26 == 0:\n            return 'zzzzy'\n        else:\n            return chr(96+(N-475253)//26)+chr(96+(N-475253-1)%26)"
    },
    {
        "number": 4089,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.strip())\n\n    # Define mapping\n    mapping = {\n        1: 'a',\n        2: 'b',\n        3: 'c',\n        4: 'd',\n        5: 'e',\n        6: 'f',\n        7: 'g',\n        8: 'h',\n        9: 'i',\n        10: 'j',\n        11: 'k',\n        12: 'l',\n        13:'m',\n        14: 'n',\n        15: 'o',\n        16: 'p',\n        17: 'q',\n        18: 'r',\n        19:'s',\n        20: 't',\n        21: 'u',\n        22: 'v',\n        23: 'w',\n        24: 'x',\n        25: 'y',\n        26: 'z',\n        27: 'aa',\n        28: 'ab',\n        29: 'ac',\n        30: 'ad',\n        31: 'ae',\n        32: 'af',\n        33: 'ag',\n        34: 'ah',\n        35: 'ai',\n        36: 'aj',\n        37: 'ak',\n        38: 'al',\n        39: 'am',\n        40: 'an',\n        41: 'ao',\n        42: 'ap',\n        43: 'aq',\n        44: 'ar',\n        45: 'as',\n        46: 'at',\n        47: 'au',\n        48: 'av',\n        49: 'aw',\n        50: 'ax',\n        51: 'ay',\n        52: 'az',\n        53: 'ba',\n        54: 'bb',\n        55: 'bc',\n        56: 'bd',\n        57: 'be',\n        58: 'bf',\n        59: 'bg',\n        60: 'bh',\n        61: 'bi',\n        62: 'bj',\n        63: 'bk',\n        64: 'bl',\n        65: 'bm',\n        66: 'bn',\n        67: 'bo',\n        68: 'bp',\n        69: 'bq',\n        70: 'br',\n        71: 'bs',\n        72: 'bt',\n        73: 'bu',\n        74: 'bv',\n        75: 'bw',\n        76: 'bx',\n        77: 'by',\n        78: 'bz',\n        79: 'ca',\n        80: 'cb',\n        81: 'cc',\n        82: 'cd',\n        83: 'ce',\n        84: 'cf',\n        85: 'cg',\n        86: 'ch',\n        87: 'ci',\n        88: 'cj',\n        89: 'ck',\n        90: 'cl',\n        91: 'cm',\n        92: 'cn',\n        93: 'co',\n        94: 'cp',\n        95: 'cq',\n        96: 'cr',\n        97: 'cs',\n        98: 'ct',\n        99: 'cu',\n        100: 'cv',\n        101: 'cw',\n        102: 'cx',\n        103: 'cy',\n        104: 'cz',\n        105: 'da',\n        106: 'db',\n        107: 'dc',\n        108: 'dd',\n        109: 'de',\n        110: 'df',\n        111: 'dg',\n        112: 'dh',\n        113: 'di',\n        114: 'dj',\n        115: 'dk',\n        116: 'dl',\n        117: 'dm',\n        118: 'dn',\n        119: 'do',\n        120: 'dp',\n        121: 'dq',\n        122: 'dr',\n        123: 'ds',\n        124: 'dt',\n        125: 'du',\n        126: 'dv',\n        127: 'dw',\n        128: 'dx',\n        129: 'dy',\n        130: 'dz',\n        131: 'ea',\n        132: 'eb',\n        133: 'ec',\n        134: 'ed',\n        135: 'ee',\n        136: 'ef',\n        137: 'eg',\n        138: 'eh',\n        139: 'ei"
    },
    {
        "number": 4089,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 26:\n        return chr(ord('a') + n - 1)\n    elif n <= 701:\n        q, r = divmod(n - 27, 26)\n        return chr(ord('a') + q - 1) + chr(ord('a') + r - 1)\n    elif n <= 18277:\n        q, r = divmod(n - 703, 700)\n        return chr(ord('a') + q - 1) + chr(ord('a') + r - 1) + 'a'\n    elif n <= 475253:\n        q, r = divmod(n - 18279, 18276)\n        return chr(ord('a') + q - 1) + chr(ord('a') + r - 1) + 'aa'\n    elif n <= 1000000000000000:\n        q, r = divmod(n - 475255, 475254)\n        return chr(ord('a') + q - 1) + chr(ord('a') + r - 1) + 'aaa' + 'a' * (n - 475255 - q * 18276)\n    else:\n        return ''\n"
    },
    {
        "number": 4089,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n = 1\n    while N > 0:\n        if N <= 26:\n            return chr(ord('a') + N - 1)\n        elif N <= 701:\n            return chr(ord('a') + (N - 27) // 26) + chr(ord('a') + (N - 27) % 26)\n        elif N <= 18277:\n            return chr(ord('a') + (N - 703) // 1000) + chr(ord('a') + (N - 703) // 26 % 26) + chr(ord('a') + (N - 703) % 26)\n        elif N <= 475253:\n            return chr(ord('a') + (N - 18279) // 1000000) + chr(ord('a') + (N - 18279) // 1000 % 26) + chr(ord('a') + (N - 18279) // 26 % 26) + chr(ord('a') + (N - 18279) % 26)\n        elif N <= 1000000000000001:\n            return chr(ord('a') + (N - 475255) // 1000000000) + chr(ord('a') + (N - 475255) // 1000000 % 26) + chr(ord('a') + (N - 475255) // 1000 % 26) + chr(ord('a') + (N - 475255) // 26 % 26) + chr(ord('a') + (N - 475255) % 26)\n        else:\n            return \"\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4089,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 1:\n        return 'a'\n    elif N <= 26:\n        return chr(ord('a') + N - 1)\n    else:\n        length = len(str(N))\n        # Calculate the base number\n        base = 10**length\n        # Calculate the index of the dog in the group of dogs with the same length\n        index = (N - 1) // base\n        # Calculate the remaining number of dogs\n        remaining = N - index * base\n        # Calculate the name of the dog\n        name = ''\n        if remaining <= 26:\n            name += chr(ord('a') + remaining - 1)\n        else:\n            name += chr(ord('a') + 26 - 1)\n            name += solution(str(remaining - 26))\n        # Append the index to the name\n        name = chr(ord('a') + index - 1) + name\n        return name\n\ndef"
    },
    {
        "number": 4089,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 26:\n        return chr(ord('a') + n-1)\n    elif n <= 701:\n        num = n - 26\n        return chr(ord('a') + (num // 26 - 1)) + chr(ord('a') + (num % 26 - 1))\n    elif n <= 18277:\n        num = n - 701\n        return chr(ord('a') + (num // 676 - 1)) + chr(ord('a') + (num // 26 - 1)) + chr(ord('a') + (num % 26 - 1))\n    elif n <= 475253:\n        num = n - 18277\n        return chr(ord('a') + (num // 10624 - 1)) + chr(ord('a') + (num // 676 - 1)) + chr(ord('a') + (num // 26 - 1)) + chr(ord('a') + (num % 26 - 1))\n    else:\n        num = n - 475253\n        return 'a'*num\n    return ''"
    },
    {
        "number": 4089,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin)\n\n    # Convert n to base 52 and map to alphabet\n    base = 52\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    name = ''\n    while n > 0:\n        digit = n % base\n        name = alpha[digit-1] + name\n        n //= base\n\n    return name\n"
    },
    {
        "number": 4090,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = stdin.readline().strip().split()\n    # dp[i][j] is the minimum length of the text after at most one abbreviation for the first i words and the last j words\n    dp = [[0] * n for _ in range(n)]\n    # compute dp[i][j] for all i <= j\n    for j in range(n):\n        for i in range(j+1):\n            if i == j:\n                dp[i][j] = len(words[i])\n            else:\n                # dp[i][j] = min(dp[i][j], dp[i+1][j-1] + len(words[i] + ''.join(word.capitalize() for word in words[i+1:j]))\n                # add the length of the current segment\n                dp[i][j] = dp[i][j-1] + len(words[j])\n                # check if the current segment is equal to a previous segment\n                for k in range(i+1, j):\n                    if words[k] == words[k-1]:\n                        # if the current segment is equal to a previous segment, add the length of the abbreviation\n                        dp[i][j] = min(dp[i][j], dp[k][k-1] + dp[k+1][j] + len(''.join(word.capitalize() for word in words[i:k]) + ''.join(word.capitalize() for word in words[k:j+1])))\n    return dp[0][n-1]"
    },
    {
        "number": 4090,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    n = len(words)\n    dp = [[0 for j in range(n+1)] for i in range(n+1)]\n\n    for j in range(1, n+1):\n        for i in range(j-1, -1, -1):\n            if words[i] == words[j-1]:\n                dp[i][j] = dp[i+1][j-1] + len(words[i])\n            else:\n                dp[i][j] = dp[i+1][j]\n\n    return dp[0][n]\n"
    },
    {
        "number": 4090,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = stdin.readline().split()\n\n    if n == 1:\n        return len(words[0])\n\n    # Create a set of all segments of words\n    segments = set()\n    for i in range(n):\n        for j in range(i+1, n+1):\n            segments.add(' '.join(words[i:j]))\n\n    # Count the number of equal segments\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            for k in range(j, n+1):\n                if''.join(words[i:j]) ==''.join(words[j:k]):\n                    count += 1\n\n    # Calculate the minimum length of the text after one abbreviation\n    if count == 0:\n        return len(' '.join(words))\n    else:\n        return len(' '.join(words)) - count * (len('TBD') - 1)"
    },
    {
        "number": 4090,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.strip().split()\n    n = len(words)\n    if n <= 2:\n        return len(\" \".join(words))\n\n    seen = set()\n    segments = []\n    for i in range(n):\n        for j in range(i+1, n):\n            s = tuple(words[i:j+1])\n            if s not in seen:\n                seen.add(s)\n                segments.append((s, i, j))\n\n    ans = len(\" \".join(words))\n    for i, (s, _, _) in enumerate(segments):\n        if i == 0:\n            continue\n        for j, (_, x, y) in enumerate(segments[:i]):\n            if s == x:\n                continue\n            if set(s).issubset(set(words[x:y+1])):\n                continue\n            if set(words[x:y+1]).issubset(set(s)):\n                continue\n            ans = min(ans, len(\" \".join(words[:x] + [s[0].upper()] * (y-x+1) + words[y+1:])))\n\n    return ans"
    },
    {
        "number": 4090,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = stdin.readline().strip().split()\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring =''.join(words[i:j])\n            if len(set(substring)) == 1:\n                count += len(substring)\n            else:\n                count += len(set(substring)) * 2\n    \n    return count\n\nprint(solution(\"6\\nto be or not to be\"))\nprint(solution(\"10\\na ab a a b ab a a b c\"))\nprint(solution(\"6\\naa bb aa aa bb bb\"))"
    },
    {
        "number": 4090,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.strip().split()\n    n = len(words)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][i] = len(words[i - 1])\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n + 1):\n            if words[i - 1] == words[j - 1]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = dp[i + 1][j] + dp[i][j - 1]\n    return dp[0][n]"
    },
    {
        "number": 4090,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    words = stdin.split()[1:]\n    abbr = \"\"\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            if j-i > 1 and len(set(words[i:j+1])) == 1:\n                abbr += words[i][0].upper() + \"\".join(w[0].upper() for w in words[i:j+1]) + words[j+1][0].upper() + \" \"\n                break\n    return len(abbr.strip())\n\nstdin = \"6\\nto be or not to be\"\nprint(solution(stdin))\n\nstdin = \"10\\na ab a a b ab a a b c\"\nprint(solution(stdin))\n\nstdin = \"6\\naa bb aa aa bb bb\"\nprint(solution(stdin))"
    },
    {
        "number": 4090,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = stdin.readline().strip().split()\n    segments = []\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            segments.append(tuple(words[i:j]))\n    count = {}\n    for segment in segments:\n        count[segment] = count.get(segment, 0) + 1\n    for i in range(len(segments)):\n        for j in range(i + 1, len(segments)):\n            if segments[i][:j - i] == segments[j][:j - i]:\n                count[segments[i]] = min(count[segments[i]], count[segments[j]])\n    ans = sum(len(word) for word in words)\n    for segment in segments:\n        if count[segment] > 1:\n            first_letters = ''.join(word[0].upper() for word in segment)\n            ans -= len(segment) * (len(first_letters) - len(segment))\n    return ans"
    },
    {
        "number": 4090,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = stdin.readline().strip().split()\n\n    # create a dictionary where keys are words and values are their indices\n    word_dict = {}\n    for i, word in enumerate(words):\n        word_dict[word] = i\n\n    # initialize a dictionary where keys are words and values are their lengths\n    word_length = {}\n    for word in words:\n        word_length[word] = len(word)\n\n    # initialize a list where each element is a dictionary representing a segment of words\n    segments = []\n    for i in range(n):\n        segment = {}\n        segment[words[i]] = word_length[words[i]]\n        for j in range(i+1, n):\n            if words[j] in segment:\n                continue\n            if ''.join(words[i:j+1]) in word_dict and word_dict[''.join(words[i:j+1])] == j:\n                segment[''.join(words[i:j+1])] = sum([word_length[w] for w in words[i:j+1]])\n            else:\n                break\n        segments.append(segment)\n\n    # initialize a set to keep track of abbreviations\n    abbreviations = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            if segments[i] == segments[j]:\n                abbreviation = ''.join([word[0].upper() for word in segments[i].keys()])\n                abbreviations.add(abbreviation)\n\n    # calculate the minimum length of the text after at most one abbreviation\n    min_length = sum([word_length[w] for w in words])\n    for abbreviation in abbreviations:\n        count = abbreviation.count('A')\n        length = sum([word_length[w] for w in words])\n        for segment in segments:\n            if abbreviation in ''.join(segment.keys()):\n                length -= sum(segment.values()) - segment[abbreviation]\n                count -= 1\n        if count <= 1 and length < min_length:\n            min_length = length\n\n    return min_length\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    words = stdin.strip().split()\n\n    # compute min length\n    min_length = sum(len(word) + 1 for word in words)\n    prev = words[0][0].upper()\n    for word in words[1:]:\n        if word.startswith(prev):\n            prev += word[len(prev):]\n        else:\n            min_length += len(prev) + 1\n            prev = word[0].upper() + word[1:]\n    min_length += len(prev)\n\n    return min_length\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n\n    # dp[i] is the maximum profit for the first i days\n    dp = [0] * (k + 1)\n    # prev[i] is the index of the problem that was used to solve the problem i-1\n    prev = [-1] * n\n    # dp_prev[i][j] is the maximum profit for the first i days using the problem j\n    dp_prev = [[0] * (n + 1) for _ in range(k + 1)]\n\n    # fill prev and dp_prev\n    for i in range(n):\n        dp_prev[0][i] = a[i]\n\n    for i in range(1, k + 1):\n        for j in range(n):\n            max_profit = -1\n            for prev_i in range(j):\n                if dp_prev[i - 1][prev_i] + a[j] > max_profit:\n                    max_profit = dp_prev[i - 1][prev_i] + a[j]\n                    prev[j] = prev_i\n            dp_prev[i][j] = max_profit\n\n    # fill dp\n    for i in range(k):\n        dp[i] = dp_prev[i][0]\n        for j in range(1, n):\n            if dp_prev[i][j] > dp_prev[i + 1][j]:\n                dp[i] = dp_prev[i][j]\n\n    # fill dp\n    for i in range(k - 1):\n        if dp[k - 1] < dp[i] + dp[k - 1 - i]:\n            dp[k - 1] = dp[i] + dp[k - 1 - i]\n\n    # print the maximum profit\n    print(dp[k - 1])\n\n    # backtrack to find the optimal solution\n    ans = [0] * k\n    i = k - 1\n    for j in range(n - 1, -1, -1):\n        ans[i] = j\n        i = prev[j]\n\n    # print the number of problems in each day\n    print(*ans[::-1])\n    return ''"
    },
    {
        "number": 4091,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    dp = [[0 for _ in range(n+1)] for _ in range(k+1)]\n    \n    # Fill the dp table\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + max(a[j-1], a[j-1+i])\n    \n    # Find the maximum profit\n    max_profit = dp[k][n]\n    \n    # Find the optimal distribution of problems\n    t = [0 for _ in range(k)]\n    for i in range(k-1, -1, -1):\n        if dp[i][n] == max_profit:\n            t[k-1-i] = 1\n            max_profit -= dp[i][n]\n            n -= 1\n    \n    # Print the results\n    print(max_profit)\n    print(' '.join(map(str, t)))\n\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    dp = [[0] * (n + 1) for _ in range(k + 1)]\n\n    for i in range(n + 1):\n        dp[1][i] = sum(a[:i])\n\n    for i in range(2, k + 1):\n        for j in range(n + 1):\n            dp[i][j] = max(dp[i - 1][j], sum(a[j - i + 1: j + 1]))\n\n    print(dp[k][n])\n\n    for i in range(1, k + 1):\n        if dp[i][n] == dp[i - 1][n]:\n            continue\n        else:\n            break\n\n    print(*range(1, i + 1))\n\n    return ''"
    },
    {
        "number": 4091,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    dp = [[0]*(n+1) for _ in range(k+1)]\n\n    for i in range(k+1):\n        dp[i][0] = 0\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[j][i] = max(dp[j][i-1], dp[j-1][i-1] + a[i-1])\n\n    profit = dp[k][n]\n\n    ans = []\n\n    for j in range(k, 0, -1):\n        if dp[j][n] == profit:\n            ans.append(j)\n            profit -= dp[j-1][n]\n            n -= j\n\n    ans.reverse()\n\n    return str(profit) + \"\\n\" + \" \".join(map(str, ans))\n"
    },
    {
        "number": 4091,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n\n    dp = [[0] * n for _ in range(k)]\n\n    for i in range(k):\n        dp[i][i] = a[i]\n\n    for i in range(k):\n        for j in range(k - i - 1, k):\n            dp[i][j] = max(dp[i][k - 1 - i] + a[k - 1 - j], dp[i][j - 1] + a[j])\n\n    max_profit = dp[0][k - 1]\n    print(max_profit)\n\n    res = []\n    i = 0\n    j = k - 1\n\n    while i <= k - 1 and j >= 0:\n        if dp[i][j] == dp[i][k - 1 - i] + a[k - 1 - j]:\n            res.append(1)\n            i += 1\n        else:\n            res.append(2)\n            j -= 1\n\n    print(' '.join(map(str, res[::-1])))\n"
    },
    {
        "number": 4091,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    \n    dp = [[0] * (n+1) for _ in range(k+1)]\n    \n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= i:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-i] + sum(a[j-i:j]))\n                \n    return f\"{dp[k][n]}\" + \" \" + \" \".join(map(str, dp[k]))"
    },
    {
        "number": 4091,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # sort in decreasing order\n    a.sort(reverse=True)\n    # initialize dp array\n    dp = [[0] * n for _ in range(k+1)]\n    # fill dp array\n    for i in range(k+1):\n        for j in range(n):\n            if i == 0:\n                dp[i][j] = a[j]\n            else:\n                dp[i][j] = dp[i-1][j]\n                for l in range(j):\n                    if dp[i-1][l] + a[j] > dp[i][j]:\n                        dp[i][j] = dp[i-1][l] + a[j]\n    # calculate total profit\n    max_profit = 0\n    for j in range(n):\n        max_profit += dp[k][j]\n    # print max_profit\n    print(max_profit)\n    # print number of problems per day\n    for i in range(k):\n        for j in range(n):\n            if dp[i][j] == dp[k-1][j]:\n                print(j+1, end=' ')\n                break\n    return \"\"\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n\n    if n == k:\n        return str(sum(a))\n\n    dp = [[0] * n for _ in range(k)]\n\n    for i in range(n):\n        dp[0][i] = a[i]\n\n    for i in range(1, k):\n        for j in range(i, n):\n            dp[i][j] = a[j]\n            for l in range(i):\n                dp[i][j] = max(dp[i][j], dp[l][j-1] + a[j])\n\n    ans = sum(dp[-1])\n    print(ans)\n\n    res = []\n    for i in range(k):\n        res.append(dp[-1].count(a[n-i-1]))\n\n    return''.join(map(str, res))\n"
    },
    {
        "number": 4091,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    dp = [[0] * (n + 1) for _ in range(k + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[j][i] = max(dp[j][i - 1], dp[j - 1][i - 1] + a[i - 1])\n\n    ans = dp[k][n]\n\n    t = []\n    for j in range(k, 0, -1):\n        if dp[j][n] == ans:\n            t.append(j)\n            ans -= sum(a[:j])\n            n -= j\n            k -= j\n            a = a[j:]\n\n    return f\"{ans}\\n{' '.join(map(str, t))}\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [[0] * (n+1) for _ in range(k+1)]\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i][j-1]\n            if j % i == 0:\n                dp[i][j] = max(dp[i][j], dp[i][j-i] + sum(a[j-i:j]))\n    max_profit = dp[k][n]\n    ans = []\n    for i in range(1, k+1):\n        if dp[i][n] == max_profit:\n            ans.append(i)\n    return str(max_profit) + '\\n' +''.join(map(str, ans))\n"
    },
    {
        "number": 4092,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    count = 0\n    for i in range(1, n):\n        if arr[i] == 0:\n            if arr[i-1] == 0:\n                count -= 1\n            else:\n                count += 1\n        elif arr[i-1] == 0:\n            count -= 1\n        else:\n            count = max(count, arr[i] + arr[i-1])\n    return count"
    },
    {
        "number": 4092,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if not any(a):\n        return '0'\n    res = 0\n    for i in range(1, n):\n        if a[i] == 0:\n            continue\n        elif a[i] == -a[i-1]:\n            if i+1 < n and a[i+1] == 0:\n                res += 1\n            elif i-1 >= 0 and a[i-1] == 0:\n                res += 1\n            else:\n                res += 2\n        elif abs(a[i]) < abs(a[i-1]):\n            if i+1 < n and a[i+1] == 0:\n                res += 1\n            elif i-1 >= 0 and a[i-1] == 0:\n                res += 1\n            else:\n                res += 2\n    return str(res)"
    },
    {
        "number": 4092,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    zero_sub_sum = False\n    for i in range(n):\n        for j in range(i+2, n+1):\n            if sum(arr[i:j]) == 0:\n                zero_sub_sum = True\n                break\n        if zero_sub_sum:\n            break\n    return '0' if zero_sub_sum else '1'\n\nstdin = '4\\n1 -5 3 2\\n'\nprint(solution(stdin))\n\nstdin = '5\\n4 -2 3 -9 2\\n'\nprint(solution(stdin))\n\nstdin = '9\\n-1 1 -1 1 -1 1 1 -1 -1\\n'\nprint(solution(stdin))\n\nstdin = '8\\n16 -5 -11 -15 10 5 4 -4\\n'\nprint(solution(stdin))"
    },
    {
        "number": 4092,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(1, n):\n        if a[i] == 0:\n            count += 1\n            continue\n        if a[i] == -a[i-1]:\n            a[i] = -a[i]\n            count += 1\n    if a[0] == 0:\n        count += 1\n    print(count)\n\n\nsolution('''\n4\n1 -5 3 2\n''')  # Output: 1\n\nsolution('''\n5\n4 -2 3 -9 2\n''')  # Output: 0\n\nsolution('''\n9\n-1 1 -1 1 -1 1 1 -1 -1\n''')  # Output: 6\n\nsolution('''\n8\n16 -5 -11 -15 10 5 4 -4\n''')  # Output: 3"
    },
    {
        "number": 4092,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    s = sum(a)\n    if s == 0:\n        return \"0\"\n    else:\n        count = 0\n        for i in range(1, n):\n            if a[i] == a[i-1]:\n                count += 1\n            else:\n                break\n        if count == 0:\n            return \"1\"\n        else:\n            return str(count)"
    },
    {
        "number": 4092,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, arr = map(int, stdin.split())\n    count = 0\n    for i in range(1, n):\n        if arr[i] == arr[i-1] == 0:\n            count += 1\n    return count"
    },
    {
        "number": 4092,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Find subsegments\n    subsegments = []\n    subsegment = []\n    for i in range(n):\n        subsegment.append(a[i])\n        if i == n-1 or a[i] + a[i+1]!= 0:\n            if len(subsegment) > 1:\n                subsegments.append(subsegment)\n            subsegment = []\n\n    # Insert integers\n    result = 0\n    for subsegment in subsegments:\n        if subsegment[-1] == 0:\n            continue\n        if subsegment[0] + subsegment[1] == 0:\n            result += 1\n            a.insert(a.index(subsegment[1]) + 1, 0)\n        elif subsegment[-2] + subsegment[-1] == 0:\n            result += 1\n            a.insert(a.index(subsegment[-2]) + 1, 0)\n        else:\n            result += 2\n            a.insert(a.index(subsegment[1]) + 1, 0)\n            a.insert(a.index(subsegment[-2]) + 1, 0)\n\n    return str(result)"
    },
    {
        "number": 4092,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # Check for zero-sum subsegments\n    zero_sum_subsegments = set()\n    for i in range(n):\n        for j in range(i+2, n+1):\n            if sum(a[i:j]) == 0:\n                zero_sum_subsegments.add((i, j))\n\n    # Find the minimum number of integers to insert\n    if not zero_sum_subsegments:\n        return str(0)\n\n    min_insertions = n\n    for i, j in zero_sum_subsegments:\n        min_insertions = min(min_insertions, abs(j-i))\n\n    return str(min_insertions)"
    },
    {
        "number": 4092,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    count = 0\n    for i in range(1, n):\n        if a[i] == 0:\n            count += 1\n    if count == 0:\n        return \"0\"\n    else:\n        ans = 0\n        for i in range(1, n):\n            if a[i] == 0:\n                ans += 1\n        return str(ans)"
    },
    {
        "number": 4092,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    # count number of subsegments with sum zero\n    count = 0\n    for i in range(1, n):\n        count += a[i] == 0 and a[i-1]!= 0 and a[i-1] + a[i] == 0\n    return str(count)"
    },
    {
        "number": 4093,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    for i in range(1, int(lines[0])+1):\n        n, m = map(int, lines[i].split())\n        a = [0] * n\n        if m == n:\n            a = [m//n]*n\n        else:\n            for j in range(n):\n                a[j] = m - sum(a[:j])\n        ans = 0\n        for j in range(n-1):\n            ans = max(ans, abs(a[j]-a[j+1]))\n        print(ans)\n    return \"\""
    },
    {
        "number": 4093,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        a = list(range(1, m+1))\n        a.sort(reverse=True)\n        print(sum([abs(a[i]-a[i+1]) for i in range(n-1)]))"
    },
    {
        "number": 4093,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [0] * n\n    a[0] = m // n\n    for i in range(1, n):\n        a[i] = max(a[i - 1] - 1, m // n)\n        m -= a[i]\n    print(max(abs(a[i] - a[i + 1]) for i in range(n - 1)))\n    return \"\""
    },
    {
        "number": 4093,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n, m = map(int, stdin.split()[1:])\n        a = [0] * n\n        a[0] = m // n\n        diff = 0\n        for i in range(1, n):\n            if i == n-1:\n                a[i] = m - (n-1) * a[0]\n            else:\n                a[i] = a[0]\n                diff = max(diff, abs(a[i]-a[i-1]))\n        print(diff)\n        stdin = stdin[stdin.find(\"\\n\")+1:]"
    },
    {
        "number": 4093,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        if m == 0:\n            print(0)\n        elif n == 1:\n            print(m)\n        else:\n            max_diff = -1\n            for j in range(1, m):\n                diff = abs(j - ((m - j) // (n - 1)))\n                if diff > max_diff:\n                    max_diff = diff\n            print(max_diff)\n    return \"\""
    },
    {
        "number": 4093,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4093,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        a = [0] * n\n        a[0] = m // n\n        for i in range(1, n):\n            a[i] = max(0, a[i-1] - 1)\n        if m % n!= 0:\n            a[-1] += m % n\n        max_diff = 0\n        for i in range(n-1):\n            max_diff = max(max_diff, abs(a[i]-a[i+1]))\n        print(max_diff)\n    return \"\""
    },
    {
        "number": 4093,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        # Get input\n        n, m = map(int, stdin.readline().strip().split())\n        \n        # Calculate max sum of absolute differences\n        max_sum = 0\n        a = [0] * n\n        a[0] = m // n\n        for i in range(1, n):\n            a[i] = a[i-1] + (m-a[i-1]) // (n-i)\n            max_sum = max(max_sum, abs(a[i]-a[i-1]))\n        \n        # Print answer\n        print(max_sum)\n        \n"
    },
    {
        "number": 4093,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_stream = stdin.strip().split('\\n')\n    n, m = map(int, input_stream[0].split())\n    if n == 1:\n        return str(m)\n    max_sum = 0\n    for i in range(1, n):\n        sum_part = 0\n        for j in range(i):\n            sum_part += abs(m - j - 1)\n            max_sum = max(max_sum, sum_part)\n    return str(max_sum)"
    },
    {
        "number": 4093,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        if m == 0:\n            print(0)\n        elif n == 1:\n            print(m)\n        else:\n            a = [0] * n\n            a[0] = m // n\n            a[1] = m - a[0]\n            for i in range(2, n):\n                a[i] = max(1, a[i - 1] - 1)\n                a[i] = min(a[i], m - sum(a[:i]))\n            print(sum(abs(a[i] - a[i - 1]) for i in range(1, n)))\n    return \"\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    num = 7\n    count = 0\n    while True:\n        count += 1\n        if num % k == 0:\n            return str(count)\n        num *= 10\n        if len(str(num)) > 6:\n            return \"-1\""
    },
    {
        "number": 4094,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    count = 0\n    i = 1\n    while i <= 1000000:\n        if i % K == 0:\n            count += 1\n            if count == 1:\n                return str(i)\n        i *= 7\n    return '-1'\n\nprint(solution(input()))"
    },
    {
        "number": 4094,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    count = 0\n    i = 1\n    while count < k:\n        if i % k == 0:\n            count += 1\n        i *= 10\n    return str(i // k)\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    n = 0\n    while True:\n        if 7 * (10 ** n) % k == 0:\n            return str(n+1)\n        n += 1\n    return '-1'\n\nprint(solution(input()))"
    },
    {
        "number": 4094,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    K = int(stdin)\n\n    # Initialize variables\n    i = 1\n    count = 0\n\n    # Iterate through sequence until K^i is greater than or equal to 7\n    while K**i < 7:\n        i += 1\n\n    # If K^i is greater than or equal to 7, add the number of elements before K^i to count\n    if K**i >= 7:\n        count += i\n        i -= 1\n        while K**i < 7:\n            i -= 1\n        count += i + 1\n\n    # If no multiples of K are found, print -1\n    if count == 0:\n        return '-1'\n\n    # Otherwise, return the count\n    return str(count)"
    },
    {
        "number": 4094,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    i = 0\n    while i < 10**6 and 7 * (10**(i//3)) % k!= 0:\n        i += 1\n    return str(i) if i < 10**6 else \"-1\""
    },
    {
        "number": 4094,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 0\n    while True:\n        if n % k == 0:\n            return str(n)\n        n += 7\n        if n % k == 0:\n            return str(n)\n        n += 7**2\n        if n % k == 0:\n            return str(n)\n        n += 7**3\n        if n % k == 0:\n            return str(n)\n        n += 7**4\n        if n % k == 0:\n            return str(n)\n        n += 7**5\n        if n % k == 0:\n            return str(n)\n        n += 7**6\n        if n % k == 0:\n            return str(n)\n        n += 7**7\n        if n % k == 0:\n            return str(n)\n        n += 7**8\n        if n % k == 0:\n            return str(n)\n        n += 7**9\n        if n % k == 0:\n            return str(n)\n        n += 7**10\n        if n % k == 0:\n            return str(n)\n        n += 7**11\n        if n % k == 0:\n            return str(n)\n        n += 7**12\n        if n % k == 0:\n            return str(n)\n        n += 7**13\n        if n % k == 0:\n            return str(n)\n        n += 7**14\n        if n % k == 0:\n            return str(n)\n        n += 7**15\n        if n % k == 0:\n            return str(n)\n        n += 7**16\n        if n % k == 0:\n            return str(n)\n        n += 7**17\n        if n % k == 0:\n            return str(n)\n        n += 7**18\n        if n % k == 0:\n            return str(n)\n        n += 7**19\n        if n % k == 0:\n            return str(n)\n        n += 7**20\n        if n % k == 0:\n            return str(n)\n        n += 7**21\n        if n % k == 0:\n            return str(n)\n        n += 7**22\n        if n % k == 0:\n            return str(n)\n        n += 7**23\n        if n % k == 0:\n            return str(n)\n        n += 7**24\n        if n % k == 0:\n            return str(n)\n        n += 7**25\n        if n % k == 0:\n            return str(n)\n        n += 7**26\n        if n % k == 0:\n            return str(n)\n        n += 7**27\n        if n % k == 0:\n            return str(n)\n        n += 7**28\n        if n % k == 0:\n            return str(n)\n        n += 7**29\n        if n % k == 0:\n            return str(n)\n        n += 7**30\n        if n % k == 0:\n            return str(n)\n        n += 7**31\n        if n % k == 0:\n            return str(n)\n        n += 7**32\n        if n % k == 0:\n            return str(n)\n        n += 7**33\n        if n % k == 0:\n            return str(n)\n        n += 7**34\n        if n % k == 0:\n            return str(n)\n        n += 7**35\n        if n % k == 0:\n            return str(n)\n        n += 7**36\n        if n % k == 0:\n            return str(n)\n        n += 7**37\n        if n % k == 0:\n            return str(n)\n        n += 7**38\n        if n % k == 0:\n            return str(n)\n        n += 7**39\n        if n % k == 0:\n            return str(n)\n        n += 7**40\n        if n % k == 0:\n            return str(n)\n        n += 7**41\n        if n % k == 0:\n            return str(n)\n        n += 7**42\n        if n % k == 0:\n            return str(n)\n        n += 7**43\n        if n % k == 0:\n            return str(n)\n        n += 7**44\n        if n % k == "
    },
    {
        "number": 4094,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    num = 7\n    count = 1\n    while True:\n        if num % K == 0:\n            return str(count)\n        else:\n            num *= 10\n            num += 7\n            count += 1\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4094,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    K = int(stdin.strip())\n\n    # Initialize variables\n    count = 0\n    num = 7\n\n    # Iterate through sequence\n    while count < 1000000:\n        if num % K == 0:\n            return str(count + 1)\n        count += 1\n        num *= 10\n\n    # If no multiple of K found, return -1\n    return '-1'"
    },
    {
        "number": 4094,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    i = 0\n    while True:\n        if i % k == 0:\n            return str(i)\n        i = i * 10 + 7"
    },
    {
        "number": 4095,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n\n    # sort the permutation\n    p.sort()\n\n    # initialize the count to zero\n    count = 0\n\n    # loop through all possible pairs of indices\n    for i in range(n):\n        for j in range(i + 1, n):\n            # if the median of the subsequence is equal to m\n            if p[i] + p[j] == m:\n                count += 1\n\n    # return the count\n    return count"
    },
    {
        "number": 4095,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m = map(int, stdin.readline().strip().split())\n    p = list(map(int, stdin.readline().strip().split()))\n\n    # Count the number of elements equal to the median\n    median_count = sum(1 for i in p if i == m)\n\n    # Count the number of elements less than the median\n    less_count = sum(1 for i in p if i < m)\n\n    # Count the number of elements greater than the median\n    greater_count = n - less_count - median_count\n\n    # Count the number of pairs of indices where the median is equal to m\n    result = less_count * greater_count\n\n    return str(result)"
    },
    {
        "number": 4095,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(p[i:j+1]) == m:\n                count += 1\n    return count\n\nprint(solution(\"5 4\\n2 4 5 3 1\")) # Output: 4"
    },
    {
        "number": 4095,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    p = list(map(int, stdin.strip().split()))\n    count = 0\n    for i in range(n):\n        l, r = i, n-1\n        while l < r:\n            if p[l] + p[r] == m:\n                count += r - l\n                l += 1\n                r -= 1\n            elif p[l] + p[r] < m:\n                l += 1\n            else:\n                r -= 1\n    return count\n"
    },
    {
        "number": 4095,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:]))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(p[i:j]) == m and (j-i) % 2 == 1:\n                count += 1\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4095,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        left = i\n        right = n-1\n        while left <= right:\n            mid = (left+right)//2\n            if p[mid] == m and (mid == 0 or p[mid-1]!= m) and (mid == n-1 or p[mid+1]!= m):\n                count += 1\n                left = mid+1\n            elif p[mid] < m:\n                left = mid+1\n            else:\n                right = mid-1\n    return count\n\nprint(solution(input()))"
    },
    {
        "number": 4095,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.readline().strip().split())\n    p = list(map(int, stdin.readline().strip().split()))\n\n    # count occurrences of m in p\n    cnt = p.count(m)\n\n    # return the number of pairs of indices\n    # that satisfy the given condition\n    return cnt * (cnt - 1) // 2\n"
    },
    {
        "number": 4095,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:]))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(p[i:j+1]) == m:\n                count += 1\n    return count"
    },
    {
        "number": 4095,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    \n    count = 0\n    for i in range(n):\n        j = i + 1\n        while j <= n and p[j] - p[i] <= m:\n            if p[j] - p[i] == m:\n                count += 1\n            j += 1\n            \n    return str(count)"
    },
    {
        "number": 4095,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    p = list(map(int, stdin.strip().split()))\n    \n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(p[i:j]) == m:\n                count += 1\n    \n    return str(count)"
    },
    {
        "number": 4096,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if m > sum(a) or m == 0:\n        return -1\n    elif n == 1:\n        return m // a[0]\n    elif m >= a[-1] * n:\n        return m // a[-1]\n    else:\n        return -1\n\nstdin = \"5 8\\n2 3 1 1 2\"\nprint(solution(stdin)) # Output: 4\n\nstdin = \"7 10\\n1 3 4 2 1 4 2\"\nprint(solution(stdin)) # Output: 2\n\nstdin = \"5 15\\n5 5 5 5 5\"\nprint(solution(stdin)) # Output: 1\n\nstdin = \"5 16\\n5 5 5 5 5\"\nprint(solution(stdin)) # Output: 2\n\nstdin = \"5 26\\n5 5 5 5 5\"\nprint(solution(stdin)) # Output: -1"
    },
    {
        "number": 4096,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    days = 0\n    pages = 0\n    for i in range(n):\n        if days > 0 and pages + a[i] > m:\n            days += 1\n            pages = a[i]\n        else:\n            pages += a[i]\n    if pages < m:\n        return -1\n    else:\n        return days\n\nstdin = \"\"\"\n5 8\n2 3 1 1 2\n\"\"\"\n\nstdout = \"\"\"\n4\n\"\"\"\n\nassert solution(stdin) == stdout.strip()\n\nstdin = \"\"\"\n7 10\n1 3 4 2 1 4 2\n\"\"\"\n\nstdout = \"\"\"\n2\n\"\"\"\n\nassert solution(stdin) == stdout.strip()\n\nstdin = \"\"\"\n5 15\n5 5 5 5 5\n\"\"\"\n\nstdout = \"\"\"\n1\n\"\"\"\n\nassert solution(stdin) == stdout.strip()\n\nstdin = \"\"\"\n5 16\n5 5 5 5 5\n\"\"\"\n\nstdout = \"\"\"\n2\n\"\"\"\n\nassert solution(stdin) == stdout.strip()\n\nstdin = \"\"\"\n5 26\n5 5 5 5 5\n\"\"\"\n\nstdout = \"\"\"\n-1\n\"\"\"\n\nassert solution(stdin) == stdout.strip()"
    },
    {
        "number": 4096,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    # If there are no cups of coffee, it's impossible to write the coursework\n    if sum(a) == 0:\n        return '-1'\n    \n    # Calculate the energy for each day\n    energy = [0] * (n + 1)\n    for i in range(1, n + 1):\n        energy[i] = energy[i - 1] + a[i - 1]\n    \n    # Calculate the maximum energy that can be obtained in each day\n    # This is the sum of the previous cups of coffee\n    max_energy = energy[n]\n    \n    # Calculate the minimum number of days needed to write the coursework\n    days = 1\n    while max_energy < m:\n        max_energy += a[days - 1]\n        days += 1\n        if days > n:\n            return '-1'\n    \n    return days\n"
    },
    {
        "number": 4096,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    days = 0\n    pages = 0\n    while pages < m:\n        if sum(a) == 0:\n            return -1\n        k = max(0, sum(a) - days)\n        if k == 0:\n            return -1\n        pages += k\n        days += 1\n        for i in range(k):\n            a[i] -= 1\n    return days"
    },
    {
        "number": 4096,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    while m > 0:\n        if m <= n:\n            break\n        if m >= 2*n:\n            return -1\n        ans += 1\n        m -= n\n        n = 1\n    if m <= 0:\n        return str(ans)\n    else:\n        return -1"
    },
    {
        "number": 4096,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # for each i, find the maximum j such that a[j] <= a[i]\n    j = [0] * n\n    for i in range(1, n):\n        j[i] = j[i - 1]\n        while j[i] > 0 and a[j[i]] < a[i]:\n            j[i] = j[i] - 1\n        j[i] = j[i] + 1\n\n    # find the maximum possible number of pages that Polycarp can write\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = max(dp[j[i] - 1] + (max(0, a[i] - j[i] + 1)), dp[i - 1])\n\n    # check if it is possible to write the coursework\n    if dp[n - 1] < m:\n        return -1\n\n    # find the minimum number of days to write the coursework\n    days = 1\n    while days * dp[n - 1] < m:\n        days += 1\n\n    return days\n"
    },
    {
        "number": 4096,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    \n    energy = [a[i] - i for i in range(n)]\n    energy = [0] + energy\n    # energy[i] is the energy Polycarp has after drinking the first i cups\n    \n    days = 1\n    while True:\n        # find the first index j s.t. energy[j] <= m\n        # meaning Polycarp has enough energy to write at least m pages\n        j = bisect_left(energy, m)\n        \n        # if j = n, it means Polycarp cannot write the coursework\n        if j == n:\n            return -1\n        \n        # update the energy after drinking the first j cups\n        for i in range(j, n):\n            energy[i+1] = max(0, a[i] - (i+1))\n        \n        # if Polycarp has enough energy to write at least m pages in the next day,\n        # update the number of days and continue the loop\n        if energy[j+1] > m:\n            days += 1\n        else:\n            return days\n\nfrom bisect import bisect_left"
    },
    {
        "number": 4096,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    i, j = 0, n - 1\n    k = 0\n    while i <= j:\n        if a[i] + a[j] < m:\n            k += 1\n            i += 1\n            j -= 1\n        elif a[i] + a[j] == m:\n            return k + 1\n        else:\n            return -1"
    },
    {
        "number": 4096,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    cups = [0] * n\n    days = 0\n    while m > 0:\n        for i in range(n):\n            if a[i] > 0 and cups[i] == 0:\n                cups[i] = min(a[i], m)\n                m -= cups[i]\n                a[i] -= cups[i]\n        if m <= 0:\n            break\n        days += 1\n    if m > 0:\n        return \"-1\"\n    else:\n        return str(days)"
    },
    {
        "number": 4096,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # Check if it is impossible to write the coursework\n    if sum(a) < m:\n        return \"-1\"\n\n    # Define dp function\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if a[i-1] <= j:\n                dp[i][j] = dp[i-1][j] + 1\n            dp[i][j] = max(dp[i][j], dp[i-1][j-a[i-1]])\n\n    # Find the minimum number of days needed to complete the coursework\n    ans = dp[n][m]\n    return str(ans)\n"
    },
    {
        "number": 4097,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.strip().split())\n\n    # check if the sequence is an arithmetic progression\n    if n == 2 and b[0] == b[1]:\n        return \"0\"\n\n    if n == 1:\n        return \"1\"\n\n    # check if it is impossible to make an arithmetic progression\n    if any(b[i] > b[i+1] for i in range(n-1)):\n        return \"-1\"\n\n    # count the minimum number of changes\n    count = 0\n    for i in range(n-1):\n        diff = b[i+1] - b[i]\n        if diff > 2:\n            return \"-1\"\n        elif diff == 2:\n            count += 2\n        elif diff == 1:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4097,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    b = list(map(int, stdin.split('\\n')[1].split()))\n    count = 0\n    for i in range(1, n):\n        if b[i] - b[i-1]!= b[1] - b[0]:\n            return -1\n        if b[i]!= b[0] + count:\n            count += 1\n    return count\n\nwith open('input.txt') as file:\n    stdin = file.read()\n    print(solution(stdin))"
    },
    {
        "number": 4097,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(n-1):\n        if b[i+1]-b[i] == b[i]-b[i-1]:\n            continue\n        elif b[i+1]-b[i] == b[i-1]-b[i]:\n            b[i] -= 1\n            count += 1\n        elif b[i+1]-b[i] == b[i]-b[i-1]+1:\n            b[i+1] -= 1\n            count += 1\n        elif b[i+1]-b[i] == b[i-1]-b[i]+1:\n            b[i] -= 1\n            b[i+1] += 1\n            count += 2\n        else:\n            return -1\n    return count"
    },
    {
        "number": 4097,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = [int(x) for x in stdin.split()[1:]]\n\n    # check if it's already an arithmetic progression\n    if all(b[i+1] == b[i]+1 for i in range(n-1)):\n        return '0'\n    \n    # binary search for the minimum number of changes to make it an arithmetic progression\n    lo, hi = 0, n-1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if all(b[i+1] == b[i]+1 for i in range(mid)):\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    \n    # if lo is still equal to n, it's impossible to make an arithmetic progression\n    return str(lo) if lo < n else '-1'"
    },
    {
        "number": 4097,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = [int(x) for x in stdin.readline().strip().split()]\n\n    if n <= 2:\n        return \"0\"\n\n    if not all(b[i] < b[i+1] for i in range(n-1)):\n        return \"-1\"\n\n    count = 0\n    for i in range(n-1):\n        if b[i] == b[i+1]:\n            continue\n        if b[i] == b[i+2]:\n            continue\n        if b[i+1] == b[i+2]:\n            continue\n        count += 1\n\n    return str(count) if count <= n else \"-1\""
    },
    {
        "number": 4097,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    count = 0\n    for i in range(1, n):\n        if b[i] - b[i-1]!= b[i-1] - b[i-2]:\n            count += 1\n    if b[1] - b[0]!= b[0] - b[n-1] or b[n-1] - b[n-2]!= b[n-2] - b[n-3]:\n        count += 1\n    if count == 0:\n        return \"0\"\n    elif count > 0:\n        return str(count)\n    else:\n        return \"-1\""
    },
    {
        "number": 4097,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    if n < 2 or n > 100000 or len(set(arr))!= n:\n        return '-1'\n    diff = arr[1] - arr[0]\n    count = 0\n    for i in range(1, n):\n        if arr[i] - arr[i-1]!= diff:\n            return '-1'\n        if arr[i] == arr[i-1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4097,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    if n <= 1:\n        return \"0\"\n    if n == 2:\n        return \"1\" if b[1] - b[0] == 1 else \"0\"\n    prev = b[0]\n    for i in range(1, n):\n        if b[i] - prev == 0:\n            return \"0\"\n        prev = b[i]\n    return \"1\" if b[n-1] - b[n-2] == 1 else \"0\""
    },
    {
        "number": 4097,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n    if n <= 2:\n        return \"0\" if n == 2 and b[1] - b[0] == b[1] - b[0] else \"-1\"\n    for i in range(1, n):\n        if b[i] - b[i-1]!= b[i-1] - b[i-2]:\n            return \"-1\"\n    return str(n-2)\n\nstdin = \"4 24 21 14 10\"\nprint(solution(stdin)) # Output: 3\n\nstdin = \"2 500 500\"\nprint(solution(stdin)) # Output: 0\n\nstdin = \"3 14 5 1\"\nprint(solution(stdin)) # Output: -1\n\nstdin = \"5 1 3 6 9 12\"\nprint(solution(stdin)) # Output: 1"
    },
    {
        "number": 4097,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n    diff = b[1] - b[0]\n    for i in range(1, n-1):\n        if b[i+1] - b[i]!= diff:\n            return -1\n    return n - 1\n\nstdin = \"4\\n24 21 14 10\"\nprint(solution(stdin)) # Output: 3\n\nstdin = \"2\\n500 500\"\nprint(solution(stdin)) # Output: 0\n\nstdin = \"3\\n14 5 1\"\nprint(solution(stdin)) # Output: -1\n\nstdin = \"5\\n1 3 6 9 12\"\nprint(solution(stdin)) # Output: 1"
    },
    {
        "number": 4098,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    a.sort()\n    ans = 0\n    left, right = 0, n-1\n    while left < right:\n        ans += a[right] - a[left]\n        left += 1\n        right -= 1\n        if ans > 5*k:\n            return ans // 5\n        ans //= 5\n    return ans"
    },
    {
        "number": 4098,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    a.sort()\n    res = a[-1]\n    for i in range(n):\n        res += (a[n-i-1] - a[n-i-2]) * 2\n        k -= 1\n        if k == 0:\n            break\n\n    return res"
    },
    {
        "number": 4098,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.readline().split()))\n\n    a.sort()\n    left, right = 0, a[-1] - a[0] + 5\n\n    while left < right:\n        mid = (left + right) // 2\n        cnt = 1\n        i = 1\n        j = n - 1\n        while i <= j:\n            if a[i] - a[i - 1] > mid:\n                cnt += 1\n                i = i - i % cnt\n            else:\n                i += 1\n            if j - j % cnt < n - 1 and a[j] - a[j % cnt] > mid:\n                cnt += 1\n                j = (j - j % cnt) // cnt\n            else:\n                j -= 1\n        if cnt <= k:\n            right = mid\n        else:\n            left = mid + 1\n\n    result = 0\n    cnt = 1\n    i = 1\n    j = n - 1\n    while i <= j:\n        if a[i] - a[i - 1] <= right:\n            cnt += 1\n            i = i - i % cnt\n        else:\n            i += 1\n        if j - j % cnt < n - 1 and a[j] - a[j % cnt] <= right:\n            cnt += 1\n            j = (j - j % cnt) // cnt\n        else:\n            j -= 1\n        if cnt <= k:\n            result = max(result, i + j + cnt - 1)\n\n    return str(result)"
    },
    {
        "number": 4098,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    dp = [[0] * n for _ in range(k+1)]\n    for i in range(n):\n        dp[1][i] = a[i]\n    \n    for j in range(2, k+1):\n        for i in range(n):\n            dp[j][i] = max(dp[j][i], a[i])\n            for l in range(i):\n                if abs(a[i]-a[l]) <= 5:\n                    dp[j][i] = max(dp[j][i], dp[j-1][l]+a[i])\n    \n    return max(dp[k])"
    },
    {
        "number": 4098,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    total = sum(a)\n    if k == 1:\n        return str(total)\n    if k >= n:\n        return str(total // n)\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    dp[0][0] = 0\n    for i in range(1, n+1):\n        dp[i][0] = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j == 1:\n                dp[i][j] = dp[i-1][j-1] + a[i-1]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j] - 5)\n    return str(dp[n][k])"
    },
    {
        "number": 4098,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    if k == 1:\n        return str(n)\n\n    a.sort()\n    result = 0\n    start = 0\n    end = n - 1\n\n    while start <= end:\n        if a[end] - a[start] <= 5:\n            result += end - start + 1\n            start += 1\n            end = n - 1\n        else:\n            end -= 1\n\n    return str(result)"
    },
    {
        "number": 4098,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    # sort the array in descending order\n    a.sort(reverse=True)\n\n    # initialize the variables\n    team_size = 1\n    team_count = 0\n\n    # loop through the array and form teams\n    for i in range(n):\n        # check if the current student can fit in the current team\n        if a[i] - a[i-1] <= 5:\n            # if yes, add the student to the team and update team size\n            team_size += 1\n        else:\n            # if not, form a new team and update team count\n            team_count += 1\n            team_size = 1\n\n        # check if the maximum team count has been reached\n        if team_count == k:\n            # if yes, return the current team size as the answer\n            return team_size\n\n    # if no team can be formed, return the number of students\n    return n"
    },
    {
        "number": 4098,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    a.sort()\n    max_team_size = n // k\n    result = max_team_size\n    \n    for i in range(1, n):\n        if a[i] - a[i-1] <= 5:\n            max_team_size -= 1\n        else:\n            result = max(result, max_team_size)\n            max_team_size = n // k\n    \n    return result"
    },
    {
        "number": 4098,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    left, right = 0, a[-1] - a[0]\n    while left < right:\n        mid = (left + right) // 2\n        cnt = 1\n        prev = a[0]\n        for i in range(1, n):\n            if a[i] - prev > mid:\n                cnt += 1\n                prev = a[i]\n        if cnt <= k:\n            right = mid\n        else:\n            left = mid + 1\n    return left\n\nstdin = \"\"\"\n5 2\n1 2 15 15 15\n\"\"\"\n\nprint(solution(stdin)) # Output: 5\n\nstdin = \"\"\"\n6 1\n36 4 1 25 9 16\n\"\"\"\n\nprint(solution(stdin)) # Output: 2\n\nstdin = \"\"\"\n4 4\n1 10 100 1000\n\"\"\"\n\nprint(solution(stdin)) # Output: 4"
    },
    {
        "number": 4098,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # sorting by skill\n    a.sort()\n    # dp[i][j] - maximum total number of students in i teams with j students\n    dp = [[0] * (n+1) for _ in range(k+1)]\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            # try to add student to team\n            dp[i][j] = dp[i-1][j]\n            if a[j-1] - a[j-i-1] > 5:\n                # student skill is too high\n                continue\n            dp[i][j] = max(dp[i][j], dp[i-1][j-i-1] + a[j-i-1])\n    return dp[k][n]"
    },
    {
        "number": 4099,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing input\n    n, k, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    # Finding the average score of N-1 subjects\n    avg_score = sum(a) / (n - 1)\n\n    # Checking if the goal is achievable\n    if avg_score >= m:\n        return str(avg_score - m)\n    else:\n        return '-1'"
    },
    {
        "number": 4099,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, K, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    \n    # calculate minimum score required\n    avg = sum(A) / N\n    if avg >= M:\n        return str(-1)\n    else:\n        return str(M - avg)\n    \n"
    },
    {
        "number": 4099,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    avg = sum(a)/n\n    if avg >= m:\n        return \"-1\"\n    else:\n        return str(m-avg)"
    },
    {
        "number": 4099,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, K, M = map(int, stdin.readline().strip().split())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # find the minimum required score for the final subject\n    min_score = M * N\n    if sum(A) < min_score:\n        return str(-1)\n\n    # binary search for the required score\n    left, right = 0, K\n    while left <= right:\n        mid = (left + right) // 2\n        required_score = (N-1) * A[-1] + mid\n        if required_score >= min_score:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    # return the required score\n    return str(left)"
    },
    {
        "number": 4099,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, k, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    # Calculate the minimum number of points required on the final subject\n    if sum(a) >= m*n:\n        return \"-1\"\n    else:\n        return m*n - sum(a)"
    },
    {
        "number": 4099,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    \n    # Find minimum number of points required on final subject\n    min_points = -1\n    for i in range(k+1):\n        if sum(a) + i >= m*n:\n            min_points = i\n            break\n    \n    # Check if minimum number of points is valid\n    if min_points == -1:\n        return str(-1)\n    else:\n        return str(min_points)"
    },
    {
        "number": 4099,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = list(map(int, stdin.split()))\n    A = list(map(int, stdin.readline().split()))\n\n    if (N-1) * K < M:\n        return \"-1\"\n\n    if M > sum(A):\n        return \"-1\"\n\n    left, right = 0, K\n    ans = -1\n    while left <= right:\n        mid = (left + right) // 2\n        cnt = (N-1) * mid\n        for i in range(N-1):\n            cnt += A[i]\n            if cnt >= M:\n                ans = max(ans, mid)\n                break\n        else:\n            ans = max(ans, mid)\n        if cnt >= M:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return str(ans) if ans!= -1 else \"-1\""
    },
    {
        "number": 4099,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N, K, M = map(int, stdin.readline().strip().split())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Sort the list of scores in ascending order\n    A.sort()\n\n    # Initialize variables for minimum and maximum scores\n    min_score = K + 1\n    max_score = 0\n\n    # Iterate through the scores and find the minimum and maximum scores\n    for score in A:\n        if score < min_score:\n            min_score = score\n        if score > max_score:\n            max_score = score\n\n    # Check if the goal is achievable\n    if min_score + N - 1 < M:\n        return '-1'\n\n    # Calculate the minimum number of points required\n    return max_score - (min_score + N - 1 - M)"
    },
    {
        "number": 4099,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    N, K, M = map(int, lines[0].split())\n    A = list(map(int, lines[1].split()))\n\n    # calculate average score\n    avg_score = sum(A) / N\n\n    # check if goal is unachievable\n    if avg_score < M:\n        return \"-1\"\n\n    # calculate minimum score required on final subject\n    min_score = (M - avg_score) * (N - 1) // (K - 1) + avg_score\n\n    # check if minimum score is feasible\n    if min_score < 0:\n        return \"-1\"\n\n    return str(min_score)"
    },
    {
        "number": 4099,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, K, M = map(int, stdin.readline().strip().split())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # calculate minimum score required on final subject\n    min_score = M\n\n    # check if goal is achievable\n    if sum(A) + min_score <= K * N:\n        return str(min_score)\n\n    # binary search for minimum score\n    left, right = 0, K\n    while left < right:\n        mid = (left + right) // 2\n        if sum(A) + (N-1) * mid <= K * N:\n            left = mid + 1\n            min_score = mid\n        else:\n            right = mid\n\n    # check if final subject is scored enough\n    if sum(A) + (N-1) * min_score <= K * N:\n        return str(min_score)\n\n    # goal is not achievable\n    return \"-1\""
    },
    {
        "number": 4100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, K, Q = map(int, lines[0].split())\n    A = list(map(int, lines[1:]))\n\n    # initialize scores\n    scores = [K] * N\n\n    # update scores based on correct answers\n    for i, a in enumerate(A):\n        scores[a-1] -= 1\n        for j in range(N):\n            if j!= a-1:\n                scores[j] = max(0, scores[j]-1)\n\n    # check if each player survived the game\n    survived = [True] * N\n    for i, s in enumerate(scores):\n        if s <= 0:\n            survived[i] = False\n\n    # print result\n    return '\\n'.join(['Yes' if s else 'No' for s in survived])"
    },
    {
        "number": 4100,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    \n    scores = [K] * N\n    \n    for i in range(Q):\n        scores[A[i]-1] -= 1\n        \n    survive = []\n    for i in range(N):\n        if scores[i] <= 0:\n            survive.append(\"No\")\n        else:\n            survive.append(\"Yes\")\n            \n    return \"\\n\".join(survive)"
    },
    {
        "number": 4100,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split('\\n')\n    N, K, Q = map(int, lines[0].split())\n    A = list(map(int, lines[1:1+Q]))\n\n    # Initialize player scores\n    scores = [K] * N\n\n    # Process questions\n    for i in range(Q):\n        # Decrement scores of all players that answered incorrectly\n        for j in range(N):\n            if A[i]!= j+1:\n                scores[j] -= 1\n\n    # Check survival status of players\n    survived = [True] * N\n    for i in range(N):\n        if scores[i] <= 0:\n            survived[i] = False\n\n    # Construct output\n    output = []\n    for i in range(N):\n        if survived[i]:\n            output.append('Yes')\n        else:\n            output.append('No')\n\n    # Convert output to string\n    return '\\n'.join(output)\n\nstdin = \"\"\"\n6 3 4\n3\n1\n3\n2\n\"\"\"\n\nprint(solution(stdin))  # Output: No\\nNo\\nYes\\nNo\\nNo\\nNo\\n"
    },
    {
        "number": 4100,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, K, Q = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    \n    # initialize scores\n    scores = [K for _ in range(N)]\n    \n    # play game\n    for i in range(Q):\n        scores[A[i]-1] -= 1\n        for j in range(N):\n            if scores[j] <= 0:\n                scores[j] = 0\n    \n    # check survival\n    result = \"\"\n    for score in scores:\n        if score > 0:\n            result += \"Yes\\n\"\n        else:\n            result += \"No\\n\"\n    \n    return result"
    },
    {
        "number": 4100,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, K, Q = map(int, lines[0].split())\n    A = list(map(int, lines[1:1+Q]))\n\n    scores = [K] * N\n\n    for i in range(Q):\n        scores[A[i]-1] -= 1\n\n    survived = [True] * N\n    for i in range(N):\n        if scores[i] <= 0:\n            survived[i] = False\n\n    return \"\\n\".join([\"Yes\" if survived[i] else \"No\" for i in range(N)])\n\ndef"
    },
    {
        "number": 4100,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K, Q = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    # Initialize players' scores\n    scores = [K] * N\n\n    # Iterate over questions\n    for a in A:\n        # Subtract 1 point from all players except the one who gave the correct answer\n        for i in range(N):\n            if i!= a - 1:\n                scores[i] -= 1\n\n    # Check which players survived\n    survived = [scores[i] > 0 for i in range(N)]\n\n    # Return Yes or No for each player\n    return '\\n'.join(['Yes' if survived[i] else 'No' for i in range(N)])"
    },
    {
        "number": 4100,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    \n    scores = [K] * N\n    for i in range(Q):\n        scores[A[i]-1] -= 1\n    \n    survived = [0] * N\n    for i in range(N):\n        if scores[i] <= 0:\n            survived[i] = 1\n    \n    result = []\n    for i in range(N):\n        if survived[i] == 1:\n            result.append(\"Yes\")\n        else:\n            result.append(\"No\")\n    \n    return \"\\n\".join(result)"
    },
    {
        "number": 4100,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, K, Q = map(int, lines[0].split())\n    A = list(map(int, lines[1:]))\n    scores = [K] * N\n    for a in A:\n        scores[a-1] -= 1\n    surviving = [True] * N\n    for i in range(N):\n        if scores[i] <= 0:\n            for j in range(N):\n                if scores[j] > scores[i]:\n                    scores[j] -= 1\n                    surviving[i] = False\n    result = \"\"\n    for i in range(N):\n        if surviving[i]:\n            result += \"Yes\\n\"\n        else:\n            result += \"No\\n\"\n    return result[:-1]"
    },
    {
        "number": 4100,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.readline().strip().split())\n    scores = [K] * N\n    for i in range(Q):\n        A = int(stdin.readline().strip())\n        for j in range(N):\n            if j!= A-1:\n                scores[j] -= 1\n    result = []\n    for i in range(N):\n        if scores[i] > 0:\n            result.append(\"Yes\")\n        else:\n            result.append(\"No\")\n    return \"\\n\".join(result)"
    },
    {
        "number": 4100,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, K, Q = map(int, lines[0].split())\n    A = list(map(int, lines[1:]))\n\n    # initialize scores\n    scores = [K] * N\n\n    # process answers\n    for a in A:\n        scores[a-1] -= 1\n\n    # determine survival\n    survival = [str(i+1) if score > 0 else 'No' for i, score in enumerate(scores)]\n\n    return '\\n'.join(survival)"
    },
    {
        "number": 4101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, stdin.readline().split())))\n    \n    def can_sort(operations: list):\n        # Applying the given operations\n        for op in operations:\n            if op[0] == 1:\n                matrix[op[1]] = [1-x for x in matrix[op[1]]]\n            else:\n                matrix[x][op[1]] = 1-matrix[x][op[1]]\n        \n        # Checking if the matrix is sorted\n        for i in range(n):\n            for j in range(m-1):\n                if matrix[i][j] > matrix[i][j+1]:\n                    return False\n        return True\n    \n    # Recursive function to find all possible operations\n    def find_operations(operations: list, i: int, j: int, remaining: int):\n        if remaining == 0:\n            if can_sort(operations):\n                return True\n            else:\n                return False\n        if i == n:\n            return False\n        operations.append((1, i))\n        if find_operations(operations, i+1, j, remaining-1):\n            return True\n        operations.pop()\n        operations.append((0, i))\n        if find_operations(operations, i+1, j, remaining-1):\n            return True\n        operations.pop()\n        return False\n    \n    # Finding all possible operations\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                operations = [(0, i)]\n                if find_operations(operations, i+1, j, m-j-1):\n                    return \"YES\\n\"+''.join(str(x[0]) for x in operations)+\"\\n\"+''.join('0' for x in range(j))+'1'+('0'*(m-j-1))\n                operations = [(1, i)]\n                if find_operations(operations, i+1, j, m-j-1):\n                    return \"YES\\n\"+''.join(str(x[0]) for x in operations)+\"\\n\"+''.join('0' for x in range(j))+'1'+('0'*(m-j-1))\n    return \"NO\""
    },
    {
        "number": 4101,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = [[int(c) for c in stdin.readline().split()] for i in range(n)]\n    \n    def is_sorted(matrix):\n        flat = [matrix[i][j] for i in range(n) for j in range(m)]\n        return flat == sorted(flat)\n    \n    def invert(matrix, i):\n        matrix[i] = [1-x for x in matrix[i]]\n        \n    def invert_col(matrix, j):\n        for i in range(n):\n            matrix[i][j] = 1-matrix[i][j]\n    \n    def invert_row(matrix, i):\n        matrix[i] = [1-x for x in matrix[i]]\n        \n    def invert_matrix(matrix):\n        for i in range(n):\n            invert(matrix, i)\n        for j in range(m):\n            invert_col(matrix, j)\n            \n    def apply_ops(matrix):\n        ops = []\n        for i in range(n):\n            if matrix[i]!= sorted(matrix[i]):\n                invert(matrix, i)\n                ops.append(i)\n        for j in range(m):\n            col = [matrix[i][j] for i in range(n)]\n            if col!= sorted(col):\n                invert_col(matrix, j)\n                ops.append(j+n)\n        return ops\n    \n    def matrix_to_string(matrix):\n        return ''.join([''.join(['1' if x else '0' for x in row]) for row in matrix])\n    \n    if is_sorted(a):\n        return 'NO\\n'\n    \n    ops = apply_ops(a)\n    if ops:\n        r = matrix_to_string(a)\n        c = matrix_to_string([[a[i][j] for i in range(n)] for j in range(m)])\n        return 'YES\\n'+r+'\\n'+c+'\\n'\n    else:\n        return 'NO\\n'\n    \n"
    },
    {
        "number": 4101,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    a = [[int(x) for x in stdin.readline().strip()] for _ in range(n)]\n    ops = []\n\n    def possible(ops):\n        b = a.copy()\n        for i in range(n):\n            for op in ops:\n                if op[0] == i:\n                    b[i] = [1 - x for x in b[i]]\n        for j in range(m):\n            col = [a[i][j] for i in range(n)]\n            col_inv = [1 - x for x in col]\n            col_inv_ops = [op for op in ops if op[1] == j]\n            if col!= sorted(col) and col_inv!= sorted(col_inv) and col!= sorted(col_inv) and col_inv!= sorted(col) and not (len(col_inv_ops) == 1 and col_inv_ops[0][2] == 0):\n                return False\n        return True\n\n    def backtrack(ops):\n        if len(ops) == n + m:\n            if possible(ops):\n                r = ''.join(['1' if op[0] < n else '0' for op in ops[:n]])\n                c = ''.join(['1' if op[1] < m else '0' for op in ops[n:]])\n                return f'YES\\n{r}\\n{c}\\n'\n            else:\n                return 'NO\\n'\n\n        if len(ops) < n + m:\n            for i in range(n):\n                if not any(op[0] == i for op in ops):\n                    for j in range(m):\n                        if not any(op[1] == j for op in ops):\n                            if len(ops) % 2 == 0:\n                                new_ops = ops + [(i, j, 0)]\n                            else:\n                                new_ops = ops + [(i, j, 1)]\n                            res = backtrack(new_ops)\n                            if res!= 'NO\\n':\n                                return res\n            return 'NO\\n'\n\n    res = backtrack([])\n    return res\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = [[int(i) for i in stdin.split()[j:j+m]] for j in range(0, n*m, m)]\n\n    for i in range(n):\n        if i % 2 == 1:\n            a[i] = a[i][::-1]\n\n    for j in range(m):\n        if sum(a[i][j] for i in range(n)) % 2 == 1:\n            for i in range(n):\n                a[i][j] = 1 - a[i][j]\n\n    for i in range(n):\n        if sum(a[i])!= (n - i) * 2:\n            return \"NO\"\n    for j in range(m):\n        if sum(a[i][j] for i in range(n))!= (m - j) * 2:\n            return \"NO\"\n\n    r = \"\"\n    c = \"\"\n    for i in range(n):\n        r += str(i % 2)\n    for j in range(m):\n        c += str(j % 2)\n\n    return \"YES\\n\" + r + \"\\n\" + c\n"
    },
    {
        "number": 4101,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n    \n    def is_sorted(a):\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(m):\n                    if a[i][k] > a[j][k]:\n                        return False\n        return True\n    \n    def invert_row(a, i):\n        for j in range(m):\n            a[i][j] = 1 - a[i][j]\n    \n    def invert_col(a, j):\n        for i in range(n):\n            a[i][j] = 1 - a[i][j]\n    \n    def apply_op(a, op):\n        op_i, op_j = op\n        invert_row(a, op_i)\n        invert_col(a, op_j)\n    \n    def get_seq(a):\n        seq = []\n        for i in range(n):\n            for j in range(m):\n                if a[i][j] == 0:\n                    seq.append((i, j))\n        return seq\n    \n    def apply_seq(a, seq):\n        for op in seq:\n            apply_op(a, op)\n    \n    def get_answer(a):\n        r = ''\n        c = ''\n        for i in range(n):\n            for j in range(m):\n                if a[i][j] == 0:\n                    r += '0'\n                    c += '1'\n                else:\n                    r += '1'\n                    c += '0'\n        return r, c\n    \n    def sort_matrix(a):\n        seq = get_seq(a)\n        for i in range(len(seq)):\n            apply_op(a, seq[i])\n            if is_sorted(a):\n                return r, c, i\n        return 'NO'\n    \n    if is_sorted(a):\n        r, c = get_answer(a)\n        return 'YES\\n' + r + '\\n' + c + '\\n'\n    \n    return sort_matrix(a)"
    },
    {
        "number": 4101,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    a = [list(map(int, stdin.strip().split())) for _ in range(n)]\n\n    for i in range(n):\n        if sum(a[i])!= m:\n            return \"NO\"\n\n    for j in range(m):\n        if sum(a[i][j] for i in range(n))!= n:\n            return \"NO\"\n\n    operations = []\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                operations.append((i, j, 1))\n            else:\n                operations.append((i, j, 0))\n\n    for op in sorted(operations):\n        i, j, val = op\n        a[i][j] = val\n        if a[i].count(1) == m or a[i].count(0) == m:\n            return \"NO\"\n\n    r = ''.join(str(int(sum(a[i]) == m)) for i in range(n))\n    c = ''.join(str(int(sum(a[i][j] for i in range(n)) == n)) for j in range(m))\n\n    return \"YES\\n\" + r + \"\\n\" + c"
    },
    {
        "number": 4101,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solves the problem of sorting a binary matrix by some sequence of operations.\n\n    Args:\n    - stdin: The input string provided by the problem statement.\n\n    Returns:\n    - The output string provided by the problem statement.\n    \"\"\"\n    n, m = map(int, stdin.split()[0:2])\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split()[0:m])))\n\n    # Check if there is a valid initial permutation of a\n    is_valid = True\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= 0 and a[i][j]!= 1:\n                is_valid = False\n                break\n        if not is_valid:\n            break\n    for j in range(m):\n        for i in range(n):\n            if a[i][j]!= 0 and a[i][j]!= 1:\n                is_valid = False\n                break\n        if not is_valid:\n            break\n    if not is_valid:\n        return \"NO\"\n\n    # Define the set of valid operations on a\n    valid_ops = set()\n    for i in range(n):\n        valid_ops.add(('r', i))\n    for j in range(m):\n        valid_ops.add(('c', j))\n\n    # Define the function to perform an operation\n    def perform_op(op):\n        if op[0] == 'r':\n            for j in range(m):\n                a[op[1]][j] = 1 - a[op[1]][j]\n        else:\n            for i in range(n):\n                a[i][op[1]] = 1 - a[i][op[1]]\n\n    # Define the function to check if a is sorted\n    def is_sorted():\n        for i in range(n):\n            for j in range(m):\n                if a[i][j]!= sorted_a[i*m + j]:\n                    return False\n        return True\n\n    # Apply a valid operation repeatedly until a is sorted\n    sorted_a = [a[i][j] for i in range(n) for j in range(m)]\n    while True:\n        for op in valid_ops:\n            perform_op(op)\n            if is_sorted():\n                return \"YES\\n\" + ''.join(str(1 - a[i][j]) for i in range(n) for j in range(m)) + '\\n' + ''.join(str(1 - a[i][j]) for i in range(n) for j in range(m))\n\n    # If a is not sorted after applying all valid operations, return \"NO\"\n    return \"NO\""
    },
    {
        "number": 4101,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solves the problem by using a recursive backtracking approach.\n\n    Args:\n        stdin (str): The input string.\n\n    Returns:\n        str: The output string.\n    \"\"\"\n    # Parse the input\n    n, m = map(int, stdin.split()[0:2])\n    a = [list(map(int, input().split())) for _ in range(n)]\n\n    # Define the recursive backtracking function\n    def backtrack(i: int, j: int) -> bool:\n        if i == n:\n            # Base case: we have sorted the matrix\n            return True\n\n        # Check if we can invert the current row\n        if not all(a[i][k] == a[i][j] for k in range(m)):\n            a[i][:] = [1 - x for x in a[i]]\n            r[i] = '1'\n            if backtrack(i+1, 0):\n                return True\n            # Undo the change\n            a[i][:] = [1 - x for x in a[i]]\n            r[i] = '0'\n\n        # Check if we can invert the current column\n        if not all(a[k][j] == a[i][j] for k in range(n)):\n            a[:][j] = [1 - x for x in a[:, j]]\n            c[j] = '1'\n            if backtrack(0, j+1):\n                return True\n            # Undo the change\n            a[:][j] = [1 - x for x in a[:, j]]\n            c[j] = '0'\n\n        # If we have exhausted all options, backtrack\n        return False\n\n    # Sort the matrix by performing some operations\n    r = ['0'] * n\n    c = ['0'] * m\n    if backtrack(0, 0):\n        # The matrix is sorted\n        return \"YES\\n\" + ''.join(r) + '\\n' + ''.join(c)\n    else:\n        # We could not sort the matrix\n        return \"NO\\n\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = [list(map(int, stdin.split())) for i in range(n)]\n\n    operations = []\n\n    for i in range(n):\n        operations.append(('row', i))\n\n    for j in range(m):\n        operations.append(('col', j))\n\n    # sort the operations\n    operations.sort(key=lambda x: a[x[1]][0] if x[0] == 'row' else a[0][x[1]])\n\n    # apply the operations\n    for op in operations:\n        if op[0] == 'row':\n            a[op[1]] = [1 - x for x in a[op[1]]]\n        else:\n            a = [[1 - a[i][j] for j in range(m)] for i in range(n)]\n\n    # check if the matrix is sorted\n    sorted_a = []\n    for row in a:\n        sorted_a.extend(row)\n    sorted_a.sort()\n    if sorted_a == [0] * (n * m):\n        return 'YES\\n' + ''.join(['0' if a[i][j] == 0 else '1' for i in range(n) for j in range(m)]) + '\\n' + ''.join(['0' if a[i][j] == 0 else '1' for j in range(m) for i in range(n)])\n    else:\n        return 'NO'"
    },
    {
        "number": 4101,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().strip().split())))\n    \n    # check if matrix is already sorted\n    sorted_matrix = [a[0][0]]\n    for i in range(n):\n        sorted_matrix += a[i][1:]\n    sorted_matrix += a[-1][:-1]\n    if sorted_matrix == sorted(sorted_matrix):\n        return \"YES\\n\" + \"\".join(map(str, [0]*n)) + \"\\n\" + \"\".join(map(str, [0]*m)) + \"\\n\"\n    \n    # perform operations to sort matrix\n    operations = []\n    for i in range(n):\n        if sum(a[i]) == 0:\n            operations.append((\"row\", i))\n    for j in range(m):\n        if sum(a[i][j] for i in range(n)) == n:\n            operations.append((\"col\", j))\n    \n    if not operations:\n        return \"NO\\n\"\n    \n    ans = \"\"\n    for op in operations:\n        if op[0] == \"row\":\n            a[op[1]] = [1 - x for x in a[op[1]]]\n            ans += \"1\"\n        else:\n            a = [[a[i][j] for j in range(m) if j!= op[1]] + [a[i][op[1]]] for i in range(n)]\n            ans += \"0\"\n    \n    # check if matrix is sorted\n    sorted_matrix = [a[0][0]]\n    for i in range(n):\n        sorted_matrix += a[i][1:]\n    sorted_matrix += a[-1][:-1]\n    if sorted_matrix == sorted(sorted_matrix):\n        return \"YES\\n\" + ans + \"\\n\" + \"\".join(map(str, [0]*m)) + \"\\n\"\n    \n    return \"NO\\n\""
    },
    {
        "number": 4102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Remove whitespaces from input\n    stdin = stdin.replace(\" \", \"\")\n    # Check if the input is a palindrome\n    if stdin == stdin[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = str(n)\n    if len(s) == 1:\n        return \"Yes\"\n    if s[0] == s[1]:\n        return \"Yes\"\n    for i in range(2, len(s)):\n        if s[i] == s[i-1] == s[i-2]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num > 0:\n        for i in range(2, num):\n            if num % i == 0:\n                return \"No\"\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = str(n)\n    return \"Yes\" if n == n[::-1] else \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Splitting the input string into a list of digits\n    digits = [int(digit) for digit in stdin]\n    # Checking if the sum of the first n-1 digits is equal to the last digit\n    for i in range(1, len(digits)):\n        if sum(digits[:i]) == digits[i]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # check if the length of the input is between 1 and 10\n    if len(stdin) < 1 or len(stdin) > 10:\n        return \"No\"\n\n    # check if the input string contains only digits\n    if stdin.isdigit():\n        # check if the sum of digits is divisible by 3\n        if sum(int(digit) for digit in stdin) % 3 == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # convert the input string to a list of integers\n    digits = [int(digit) for digit in stdin]\n\n    # check if the number has any consecutive digits of the same value\n    for i in range(len(digits) - 1):\n        if digits[i] == digits[i + 1]:\n            return \"No\"\n\n    # if no consecutive digits are found, the number is prime\n    return \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input string to a list of integers\n    digits = [int(digit) for digit in stdin]\n\n    # Check if all numbers are equal\n    if all(digits[0] == digit for digit in digits):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if len(set(n)) == 1:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4102,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # convert string to list of integers\n    num_list = [int(digit) for digit in stdin]\n    # check if number is divisible by 3 or not\n    if any(num % 3 == 0 for num in num_list):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, b, a = map(int, stdin.split()[0:3])\n    s = list(map(int, stdin.split()[3:]))\n    # initialize variables\n    max_num_segments = 0\n    current_charge = b\n    accumulator_charge = 0\n    # iterate over segments\n    for i in range(n):\n        # use battery if possible\n        if current_charge > 0 and s[i] == 0:\n            current_charge -= 1\n            max_num_segments += 1\n        # use accumulator if possible\n        elif accumulator_charge < a and s[i] == 1:\n            accumulator_charge += 1\n            max_num_segments += 1\n        # use accumulator to pass segment if possible\n        elif accumulator_charge > 0:\n            accumulator_charge -= 1\n            max_num_segments += 1\n    return str(max_num_segments)"
    },
    {
        "number": 4103,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        if i == 1 or s[i - 2] == 0:\n            dp[i] = max(dp[i], dp[i - 1] + 1)\n        if s[i - 1] == 1:\n            dp[i] = max(dp[i], dp[i - 1] + 1)\n            if a > 0:\n                dp[i] = max(dp[i], dp[i - 1] + 1)\n        dp[i] = max(dp[i], dp[i - 2] + 1)\n        if i > 2 and s[i - 2] == 1 and s[i - 1] == 0:\n            dp[i] = max(dp[i], dp[i - 2] + 1)\n    return dp[n]\n\nprint(solution(\"5 2 1\\n0 1 0 1 0\"))  # Output: 5\nprint(solution(\"6 2 1\\n1 0 0 1 0 1\"))  # Output: 3"
    },
    {
        "number": 4103,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split()[0:3])\n    s = list(map(int, stdin.split()[3:]))\n\n    battery = 0\n    accumulator = 0\n    segments_passed = 0\n\n    for i in range(n):\n        if s[i] == 1:\n            if battery > 0:\n                battery -= 1\n                segments_passed += 1\n            elif accumulator < a:\n                accumulator += 1\n                segments_passed += 1\n            else:\n                battery += 1\n                segments_passed += 1\n        else:\n            if battery > 0:\n                battery -= 1\n                segments_passed += 1\n            elif accumulator > 0:\n                accumulator -= 1\n                segments_passed += 1\n            else:\n                battery += 1\n                segments_passed += 1\n\n    return segments_passed"
    },
    {
        "number": 4103,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    battery = b\n    accumulator = a\n    count = 0\n    for i in range(n):\n        if s[i] == 1 and battery > 0:\n            battery -= 1\n            if accumulator < a:\n                accumulator += 1\n        elif battery == 0 and accumulator > 0:\n            battery += 1\n            if accumulator > 0:\n                accumulator -= 1\n        else:\n            accumulator -= 1\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 4103,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.readline().split())\n    s = list(map(int, stdin.readline().split()))\n    battery = b\n    accumulator = a\n    segment_count = 0\n    for i in range(n):\n        if s[i] == 1:\n            if battery > 0:\n                battery -= 1\n            elif accumulator > 0:\n                accumulator -= 1\n            if accumulator < a:\n                accumulator += 1\n            segment_count += 1\n            continue\n        if battery > 0:\n            battery -= 1\n            segment_count += 1\n        elif accumulator > 0:\n            accumulator -= 1\n            segment_count += 1\n    return str(segment_count)"
    },
    {
        "number": 4103,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, b, a = map(int, stdin.readline().split())\n    s = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    battery_used = 0\n    accumulator_used = 0\n    battery_charge = b\n    accumulator_charge = a\n    max_segments = 0\n    current_segment = 0\n\n    # Loop through each segment\n    while current_segment < n:\n        # Check if battery can be used\n        if s[current_segment] == 0 and battery_charge > 0:\n            battery_used += 1\n            battery_charge -= 1\n        # Check if accumulator can be used\n        elif battery_charge == 0:\n            accumulator_used += 1\n            accumulator_charge -= 1\n        # Check if accumulator can be used to pass this segment\n        elif s[current_segment] == 1 and accumulator_charge > 0:\n            accumulator_used += 1\n            accumulator_charge -= 1\n        # Increase max segments if battery is not used\n        elif battery_charge == 0:\n            max_segments = max(max_segments, current_segment + 1)\n\n        # Check if accumulator can be used to pass this segment\n        if s[current_segment] == 1 and accumulator_charge > 0:\n            accumulator_used += 1\n            accumulator_charge -= 1\n        # Increase max segments if battery is not used\n        elif battery_charge == 0:\n            max_segments = max(max_segments, current_segment + 1)\n\n        # Increase current segment\n        current_segment += 1\n\n    # Add the last segment if battery is not used\n    if battery_charge == 0:\n        max_segments = max(max_segments, current_segment)\n\n    # Output result\n    return str(max_segments)\n"
    },
    {
        "number": 4103,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, b, a = map(int, stdin.readline().split())\n    s = list(map(int, stdin.readline().split()))\n    \n    # initialize variables\n    battery = b\n    accumulator = a\n    max_segments = 0\n    \n    # iterate through segments\n    for i in range(n):\n        # if segment is exposed, use accumulator if possible\n        if s[i] == 1:\n            if accumulator > 0:\n                accumulator -= 1\n                max_segments += 1\n            else:\n                battery -= 1\n        # if segment is not exposed, use battery if possible\n        else:\n            if battery > 0:\n                battery -= 1\n                max_segments += 1\n            else:\n                accumulator -= 1\n    \n    # return maximum number of segments\n    return max_segments"
    },
    {
        "number": 4103,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split()[0:3])\n    s = list(map(int, stdin.split()[3:]))\n    battery = b\n    accumulator = 0\n    count = 0\n    for i in range(n):\n        if battery == 0 and accumulator == 0:\n            break\n        if s[i] == 1 and battery > 0:\n            if battery == 1:\n                battery = 0\n                accumulator = 1\n            else:\n                battery -= 1\n        elif battery > 0:\n            battery -= 1\n        else:\n            accumulator -= 1\n        count += 1\n    return str(count)"
    },
    {
        "number": 4103,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split()[0:3])\n    s = list(map(int, stdin.split()[3:]))\n    ans = 0\n    battery = b\n    accumulator = a\n    for i in range(n):\n        if s[i] == 1:\n            battery -= 1\n            if battery == 0:\n                accumulator += 1\n        else:\n            accumulator -= 1\n        ans += 1\n    print(ans)\n    return \"\""
    },
    {
        "number": 4103,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split()[0:3])\n    s = list(map(int, stdin.split()[3:]))\n    dp = [0] * (n+1)\n    for i in range(n):\n        if s[i] == 1:\n            dp[i+1] = dp[i] + 1\n        else:\n            dp[i+1] = dp[i] + max(a, b)\n            if i > 0:\n                dp[i+1] = min(dp[i+1], dp[i-1] + max(a-1, 0))\n    return dp[n]"
    },
    {
        "number": 4104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for char in stdin:\n        if char in ['+', '-']:\n            op = char\n            continue\n        if char =='':\n            continue\n        num = int(char)\n        if op == '+':\n            stack[-1] += num\n        else:\n            stack[-1] -= num\n    return stack[0]"
    },
    {
        "number": 4104,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input string to list of operands and operators\n    operands = []\n    operators = []\n    num = \"\"\n    for char in stdin:\n        if char.isdigit():\n            num += char\n        else:\n            if num:\n                operands.append(int(num))\n                num = \"\"\n            if char in \"+-\":\n                operators.append(char)\n    if num:\n        operands.append(int(num))\n    # Evaluate the expression\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == \"+\":\n            result += operands[i]\n        else:\n            result -= operands[i]\n    return str(result)"
    },
    {
        "number": 4104,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        result = eval(stdin)\n        return str(result)\n    except ZeroDivisionError:\n        return \"Error: division by zero\"\n    except SyntaxError:\n        return \"Error: invalid expression\""
    },
    {
        "number": 4104,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(-stdin.count('+') - stdin.count('-'))"
    },
    {
        "number": 4104,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string into a list of integers\n    operands = list(map(int, stdin.split(\"+\")))\n    # Iterate over the list and calculate the sum of all the operands\n    result = sum(operands)\n    # Return the result as a string\n    return str(result)\n"
    },
    {
        "number": 4104,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # convert input to list of integers\n    operands = [int(x) for x in stdin.strip().split('+')]\n    # initialize variables\n    result = 0\n    sign = 1\n    # iterate over operands and evaluate expression\n    for operand in operands:\n        if operand < 0:\n            sign = -sign\n            operand = abs(operand)\n        result += operand\n    # apply sign and return result\n    return str(result * sign)"
    },
    {
        "number": 4104,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        result = 0\n        operands = []\n        sign = \"+\"\n        for char in stdin:\n            if char.isdigit():\n                operands.append(int(char))\n            elif char == \"+\":\n                if sign == \"+\":\n                    result += operands[-1]\n                else:\n                    result -= operands[-1]\n                operands = []\n                sign = \"+\"\n            elif char == \"-\":\n                if sign == \"+\":\n                    result -= operands[-1]\n                else:\n                    result += operands[-1]\n                operands = []\n                sign = \"-\"\n        if sign == \"+\":\n            result += operands[-1]\n        else:\n            result -= operands[-1]\n        return str(result)\n    except:\n        return \"Error\""
    },
    {
        "number": 4104,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    result = nums[0]\n    for i in range(1, len(nums), 2):\n        if nums[i] == '+':\n            result += nums[i+1]\n        else:\n            result -= nums[i+1]\n    return str(result)"
    },
    {
        "number": 4104,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for char in stdin:\n        if char.isdigit():\n            stack.append(int(char))\n        elif char in ('+', '-'):\n            operand2 = stack.pop()\n            operand1 = stack.pop()\n            if char == '+':\n                stack.append(operand1 + operand2)\n            elif char == '-':\n                stack.append(operand1 - operand2)\n        else:\n            raise ValueError(\"Invalid character: {}\".format(char))\n    return str(stack[-1])\n\nprint(solution(\"8-7+6-5+4-3+2-1-0\"))  # Output: 4\nprint(solution(\"2+2\"))              # Output: -46\nprint(solution(\"112-37\"))           # Output: 375"
    },
    {
        "number": 4104,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    sign = \"+\"\n    for c in stdin:\n        if c in \"+-\":\n            sign = c\n        elif c.isdigit():\n            stack.append(sign + c)\n            sign = \"+\"\n    stack.append(sign)\n    result = 0\n    sign = \"+\"\n    for item in stack:\n        if item in \"+-\":\n            sign = item\n        else:\n            if sign == \"+\":\n                result += int(item)\n            else:\n                result -= int(item)\n    return str(result)\n\nprint(solution(\"8-7+6-5+4-3+2-1-0\")) #4\nprint(solution(\"2+2\")) #-46\nprint(solution(\"112-37\")) #375"
    },
    {
        "number": 4105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    colors = list(range(1, k+1))\n\n    for i in range(n):\n        if i < n-1 and colors[i] == colors[i+1]:\n            return \"NO\"\n        if i < n-1 and colors[i] == colors[i+2]:\n            return \"NO\"\n\n    res = \"\"\n    for i in range(n):\n        man_color = colors.pop(0)\n        woman_color = colors.pop(0)\n        res += f\"{man_color} {woman_color}\\n\"\n\n    return \"YES\\n\" + res\n\ndef"
    },
    {
        "number": 4105,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = list(map(int, stdin.split()))\n\n    # create a list of all possible colors\n    colors = list(range(1, k + 1))\n\n    # generate all possible pairs of colors\n    pairs = [(i, j) for i in colors for j in colors if i!= j]\n\n    # filter out pairs that do not satisfy the rules\n    pairs = [p for p in pairs if p[0]!= p[1] and p[0] + p[1]!= k + 1 and p[0]!= p[2] and p[1]!= p[2]]\n\n    # if no suitable pairs remain, return NO\n    if len(pairs) < n:\n        return \"NO\"\n\n    # generate the list of costumes for each pair\n    costumes = [(p[0], p[1]) for p in pairs[:n]]\n\n    # print the answer\n    print(\"YES\")\n    for c in costumes:\n        print(\" \".join(map(str, c)))\n\n    return \"\""
    },
    {
        "number": 4105,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split()))\n    pairs = []\n    for i in range(n):\n        b, g = list(map(int, stdin.strip().split()))\n        if b == g or any(b == p[0] and g == p[1] for p in pairs) or any(b == p[1] and g == p[0] for p in pairs):\n            return \"NO\"\n        pairs.append((b, g))\n    for i in range(n-1):\n        if pairs[i][0] == pairs[i+1][0] or pairs[i][1] == pairs[i+1][1]:\n            return \"NO\"\n    colors = []\n    for b, g in pairs:\n        colors.append(str(b))\n        colors.append(str(g))\n    return \"YES\\n\" + \"\\n\".join(colors)\n\nstdin = \"4 3\\n2 1\\n1 3\\n3 2\\n2 3\"\nprint(solution(stdin)) # should print \"YES\\n3 1\\n1 3\\n3 2\\n2 3\""
    },
    {
        "number": 4105,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    colors = list(range(1, k+1))\n    pairs = [(0, 0) for _ in range(n)]\n    \n    # generate all possible pairs\n    for i in range(n):\n        man = set(colors)\n        woman = set(colors)\n        for j in range(i):\n            if pairs[j][0] == pairs[i][0]:\n                man.discard(pairs[j][1])\n            if pairs[j][1] == pairs[i][1]:\n                woman.discard(pairs[j][0])\n        pairs[i] = (next(iter(man)), next(iter(woman)))\n        \n    # check the conditions for each pair\n    for i in range(n):\n        if pairs[i][0] == pairs[i][1]:\n            return \"NO\"\n        if i > 0 and pairs[i][0] == pairs[i-1][0] or pairs[i][1] == pairs[i-1][1]:\n            return \"NO\"\n    \n    # print the colors of pairs\n    for pair in pairs:\n        print(pair[0], pair[1])\n        \n    return \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    # Check for contradictions\n    for i in range(n):\n        for j in range(i+1, n):\n            if pairs[i][0] == pairs[j][0] and pairs[i][1] == pairs[j][1]:\n                return \"NO\"\n            if pairs[i][0] == pairs[j][1] or pairs[i][1] == pairs[j][0]:\n                return \"NO\"\n\n    # Check for suitable color choosing\n    colors = set()\n    for i in range(n):\n        if pairs[i][0] in colors or pairs[i][1] in colors:\n            return \"NO\"\n        colors.add(pairs[i][0])\n        colors.add(pairs[i][1])\n    return \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    # Create a list of all possible pairs\n    pairs = [(i, j) for i in range(1, k+1) for j in range(i+1, k+1)]\n\n    # Check if there are any pairs that are completely identical\n    for i in range(n):\n        for j in range(i+1, n):\n            if pairs[i][0] == pairs[j][0] == pairs[i][1] == pairs[j][1]:\n                return \"NO\"\n\n    # Check if there are any pairs that have same man and woman color\n    for i in range(n):\n        for j in range(i+1, n):\n            if pairs[i][0] == pairs[j][1] or pairs[i][1] == pairs[j][0]:\n                return \"NO\"\n\n    # Check if there are any pairs that have adjacent man and woman colors\n    for i in range(n-1):\n        if pairs[i][0] == pairs[i+1][0] or pairs[i][1] == pairs[i+1][1]:\n            return \"NO\"\n\n    # If all checks pass, print the costumes of pairs\n    result = \"YES\\n\"\n    for i in range(n):\n        result += str(pairs[i][0]) + \" \" + str(pairs[i][1]) + \"\\n\"\n\n    return result\n"
    },
    {
        "number": 4105,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n > k * 2:\n        return \"NO\"\n    color_pairs = []\n    for i in range(1, k + 1):\n        for j in range(i + 1, k + 1):\n            if (i, j) not in color_pairs and (j, i) not in color_pairs:\n                color_pairs.append((i, j))\n    color_dict = {}\n    for i in range(n):\n        for pair in color_pairs:\n            if i % 2 == 0:\n                if pair[0] not in color_dict:\n                    color_dict[pair[0]] = set()\n                if pair[1] not in color_dict:\n                    color_dict[pair[1]] = set()\n                color_dict[pair[0]].add(pair[1])\n                color_dict[pair[1]].add(pair[0])\n            else:\n                if pair[1] not in color_dict:\n                    color_dict[pair[1]] = set()\n                if pair[0] not in color_dict:\n                    color_dict[pair[0]] = set()\n                color_dict[pair[1]].add(pair[0])\n                color_dict[pair[0]].add(pair[1])\n    for i in range(1, k + 1):\n        if i not in color_dict:\n            return \"NO\"\n        color_dict[i] = list(color_dict[i])\n    for i in range(n):\n        if i % 2 == 0:\n            color_dict[color_pairs[i // 2][0]].remove(color_pairs[i // 2][1])\n            color_dict[color_pairs[i // 2][1]].remove(color_pairs[i // 2][0])\n        else:\n            color_dict[color_pairs[i // 2][1]].remove(color_pairs[i // 2][0])\n            color_dict[color_pairs[i // 2][0]].remove(color_pairs[i // 2][1])\n    for i in range(n):\n        if i % 2 == 0:\n            if color_pairs[i // 2][0] == color_pairs[i // 2][1]:\n                return \"NO\"\n        else:\n            if color_pairs[i // 2][0] == color_pairs[i // 2][1]:\n                return \"NO\"\n    result = []\n    for i in range(n):\n        result.append(str(color_pairs[i // 2][0]) + \" \" + str(color_pairs[i // 2][1]))\n    return \"YES\\n\" + \"\\n\".join(result)"
    },
    {
        "number": 4105,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    colors = set(range(1, k+1))\n    pairs = set()\n    for i in range(n):\n        man, woman = map(int, stdin.strip().split())\n        if man in pairs or woman in pairs:\n            return \"NO\"\n        if man == woman:\n            return \"NO\"\n        if man not in colors or woman not in colors:\n            return \"NO\"\n        pairs.add(man)\n        pairs.add(woman)\n        colors.remove(man)\n        colors.remove(woman)\n    for i in range(n-1):\n        if man == girl:\n            return \"NO\"\n        man, woman = woman, man\n    return \"YES\"\n\ndef"
    },
    {
        "number": 4105,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    if n * (n - 1) > k * (k - 1):\n        return \"NO\"\n    colors = set(range(1, k+1))\n    man_colors = [0] * n\n    woman_colors = [0] * n\n    for i in range(n):\n        man_colors[i] = colors.pop()\n        woman_colors[i] = colors.pop()\n    for i in range(n):\n        for j in range(i+1, n):\n            if man_colors[i] == man_colors[j] or woman_colors[i] == woman_colors[j]:\n                return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(map(str, man_colors + woman_colors))"
    },
    {
        "number": 4105,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    colors = list(range(1, k+1))\n    pairs = [(i%k+1, (i+1)%k+1) for i in range(n)]\n    pairs.sort(key=lambda x: (x[0], x[1]))\n    for i in range(n):\n        man, woman = pairs[i]\n        if man == woman:\n            return \"NO\"\n        if man == pairs[i-1][0] or man == pairs[i-1][1]:\n            return \"NO\"\n        if woman == pairs[i-1][0] or woman == pairs[i-1][1]:\n            return \"NO\"\n    res = []\n    for i in range(n):\n        man, woman = pairs[i]\n        res.append(str(man) + \" \" + str(woman))\n    return \"YES\\n\" + \"\\n\".join(res)\n\nprint(solution(\"4 3\"))\nprint(solution(\"10 4\"))\nprint(solution(\"13 4\"))"
    },
    {
        "number": 4106,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.readline().split()))\n    a = list(map(int, stdin.readline().split()))\n    dp = [[0] * (n+1) for _ in range(x+1)]\n    for i in range(n):\n        dp[1][i+1] = a[i]\n    for i in range(2, x+1):\n        for j in range(k, n+1):\n            for m in range(j-k, j):\n                dp[i][j] = max(dp[i][j], dp[i-1][m] + dp[1][j])\n            dp[i][j] = max(dp[i][j], dp[i][j-1])\n    return dp[-1][-1]\n\nstdin = \"\"\"5 2 3\n5 1 3 10 1\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4106,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    \n    if x > n or k > n or k > x:\n        return '-1'\n    \n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    \n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            dp[i][j] = -1e9\n            for m in range(i, j):\n                if dp[i][m]!= -1e9 and dp[m+1][j]!= -1e9:\n                    dp[i][j] = max(dp[i][j], dp[i][m] + dp[m+1][j] + sum(a[i:j+1]))\n    \n    return str(dp[0][x-1])"
    },
    {
        "number": 4106,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    # check if x is greater than the number of k-segments\n    if x > (n - k + 1):\n        return -1\n    a_max = max(a)\n    a_sum = sum(a)\n    repost = 0\n    for i in range(n):\n        if a[i] > a_max / 2:\n            repost += 1\n        if repost == x:\n            return a_sum\n        if i >= k-1 and repost >= 1:\n            repost -= 1\n            a_sum -= a[i-k+1]\n        if i >= k-1 and a[i] > a[i-k+1]:\n            repost += 1\n            a_sum += a[i]\n    return -1"
    },
    {
        "number": 4106,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [[0] * (x+1) for _ in range(n+1)]\n    dp[0][0] = a[0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + a[i]\n    for i in range(1, n+1):\n        for j in range(1, x+1):\n            if j < i:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-2][j-1] + a[i-1])\n    if dp[n][x] == 0:\n        return '-1'\n    return str(dp[n][x])"
    },
    {
        "number": 4106,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort(reverse=True)\n    dp = [[0] * (n+1) for _ in range(x+1)]\n    dp[0][0] = 0\n    for i in range(1, x+1):\n        dp[i][0] = 0\n    for i in range(1, n+1):\n        dp[0][i] = 0\n    for i in range(1, x+1):\n        for j in range(1, n+1):\n            if j >= k and a[j-k] > a[j]:\n                dp[i][j] = max(dp[i][j], dp[i-1][j])\n            dp[i][j] = max(dp[i][j], dp[i][j-1])\n            if j >= k and a[j-k] > a[j]:\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + a[j])\n            if i == x and j >= k:\n                return str(dp[i][j])\n    return '-1'"
    },
    {
        "number": 4106,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    if x > k * n or sum(a) < x:\n        return -1\n\n    dp = [0] * n\n    for i in range(k):\n        for j in range(n):\n            dp[j] = max(dp[j], a[j])\n\n    for i in range(k, n):\n        for j in range(i - k, i):\n            dp[i] = max(dp[i], dp[j] + a[i])\n\n    return dp[-1]\n\n\ndef"
    },
    {
        "number": 4106,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    if k > n or x > n:\n        return \"-1\"\n\n    segments = [0] * n\n    for i in range(n):\n        segments[i] = i // k\n\n    segments.sort()\n\n    dp = [0] * (x + 1)\n    dp[0] = 0\n    for i in range(1, x + 1):\n        dp[i] = dp[i - 1] + a[segments[i - 1]]\n\n    ans = max(dp)\n\n    for i in range(x, n):\n        dp[i % x] = max(dp[(i - k) % x] + a[i], dp[(i - 1) % x])\n        ans = max(ans, dp[i % x])\n\n    if ans < sum(a):\n        return \"-1\"\n\n    return str(ans)\n"
    },
    {
        "number": 4106,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    dp = [[0] * (n + 1) for _ in range(k + 1)]\n    for i in range(n):\n        for j in range(max(0, i - k + 1), i + 1):\n            dp[1][i+1] = max(dp[1][i+1], dp[1][j] + a[i])\n        for j in range(max(0, i - x + 1), i + 1):\n            if j - i + 1 >= k:\n                dp[k][i+1] = max(dp[k][i+1], dp[k][j] + dp[k-1][i] + a[i])\n    if dp[k][n] == 0:\n        return -1\n    else:\n        return dp[k][n]"
    },
    {
        "number": 4106,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    if k == 1 and x == n:\n        return sum(a)\n\n    if k == 2:\n        if x > 0:\n            s = 0\n            cnt = 0\n            for i in range(n):\n                if cnt < x:\n                    s += a[i]\n                    cnt += 1\n                else:\n                    s -= a[i-k+1]\n                    s += a[i]\n                    cnt = x\n            return s\n        else:\n            return -1\n\n    if k > n or k > x:\n        return -1\n\n    dp = [[0]*(n+1) for _ in range(k+1)]\n\n    for i in range(k+1):\n        dp[i][0] = 0\n\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            if i == j:\n                dp[i][j] = sum(a[0:j])\n            elif i > j:\n                dp[i][j] = -1\n            else:\n                dp[i][j] = a[i-1] + max(dp[i-1][j-1], dp[i][j-1])\n\n    return dp[k][x] if dp[k][x]!= -1 else -1"
    },
    {
        "number": 4106,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    if k > x:\n        return '-1'\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for s in range(1, n):\n        for i in range(n - s):\n            j = i + s\n            dp[i][j] = max(dp[i][j], dp[i][j - 1])\n            if j - i + 1 >= k:\n                dp[i][j] = max(dp[i][j], dp[i + 1][j] + sum(a[i:j+1]))\n    return str(dp[0][n-1]) if dp[0][n-1] > 0 else '-1'\n\nstdin = \"5 2 3\\n5 1 3 10 1\"\nprint(solution(stdin)) # 18\n\nstdin = \"6 1 5\\n10 30 30 70 10 10\"\nprint(solution(stdin)) # -1\n\nstdin = \"4 3 1\\n1 100 1 1\"\nprint(solution(stdin)) # 100"
    },
    {
        "number": 4107,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    s = stdin.strip().split()[1]\n    routers = [i+1 for i, r in enumerate(s) if r == '1']\n    rooms = [i+1 for i in range(n) if s[i] == '0']\n    # print(routers)\n    # print(rooms)\n    \n    total_cost = 0\n    for r in routers:\n        cost = r\n        if r < k+1:\n            cost += sum([i for i in range(max(1, r-k), r+1)])\n        if r > n-k:\n            cost += sum([i for i in range(r, min(n, r+k)+1)])\n        total_cost += cost\n    total_cost += sum([i for i in range(1, n+1)])\n    \n    print(total_cost)\n    return str(total_cost)"
    },
    {
        "number": 4107,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    s = stdin.readline().strip()\n    \n    routers = [i for i in range(1, n+1) if s[i-1] == '1']\n    routers.sort()\n    \n    if len(routers) == 0:\n        return n * k\n    \n    total = 0\n    for router in routers:\n        total += router\n        total += sum(range(max(1, router - k), min(n, router + k) + 1)) * router\n        \n    return total"
    },
    {
        "number": 4107,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = stdin.split()[2]\n    \n    routers = [i for i, x in enumerate(s) if x == '1']\n    \n    # If there are no routers, connect all rooms directly\n    if len(routers) == 0:\n        return n\n    \n    # Calculate the minimum cost of connecting each router\n    min_cost = [routers[0]] + [min_cost[i] + i for i in range(1, len(routers))]\n    \n    # Calculate the minimum cost of connecting all routers to the Internet\n    min_total_cost = min_cost[-1] + k\n    \n    # Calculate the minimum cost of connecting each room to the Internet\n    room_cost = [i if s[i-1] == '1' else float('inf') for i in range(1, n+1)]\n    for r in routers:\n        room_cost[max(r-k, 0):min(r+k, n)] = [c + r for c in room_cost[max(r-k, 0):min(r+k, n)]]\n    \n    # Calculate the minimum total cost of connecting all rooms to the Internet\n    return min(min_total_cost, sum(room_cost))"
    },
    {
        "number": 4107,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = stdin.split()[2]\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        if s[i-1] == '0':\n            dp[i] = float('inf')\n        else:\n            dp[i] = dp[i-1] + i\n            for j in range(max(1, i-k), min(n, i+k)+1):\n                dp[i] = min(dp[i], dp[j-1] + i)\n    return dp[n]"
    },
    {
        "number": 4107,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    routers = []\n    for i in range(n):\n        if s[i] == '1':\n            routers.append(i)\n    routers.sort()\n    dp = [0] * n\n    for i in range(n):\n        if i == 0:\n            dp[i] = i\n        else:\n            dp[i] = min(dp[j] + i for j in range(max(0, i - k), i))\n        if routers and routers[0] == i:\n            dp[i] += routers[0]\n            routers = routers[1:]\n    return dp[-1]\n\ndef"
    },
    {
        "number": 4107,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    routers = [i for i in range(1, n+1) if s[i-1] == '1']\n    costs = [i for i in range(1, n+1)]\n    routers_count = len(routers)\n    for i in range(routers_count):\n        router = routers[i]\n        min_cost = float('inf')\n        for j in range(max(1, router-k), min(n, router+k)+1):\n            if j in routers:\n                continue\n            min_cost = min(min_cost, costs[j-1])\n        costs[router-1] += min_cost\n    return sum(costs)"
    },
    {
        "number": 4107,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline()\n    routers = [i for i in range(1, n+1) if s[i-1] == '1']\n    router_cost = sum(routers)\n    direct_cost = n * (n+1) // 2\n    total_cost = router_cost + direct_cost\n    for i in routers:\n        cost = i + sum([j for j in range(max(1, i-k), min(n, i+k)+1)])\n        total_cost = min(total_cost, cost)\n    return str(total_cost)"
    },
    {
        "number": 4107,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline()\n\n    # Initialize dp table with 0 for rooms without a router and infinity for rooms with a router\n    dp = [0] * n\n    for i in range(n):\n        if s[i] == '1':\n            dp[i] = float('inf')\n\n    # Fill dp table using dynamic programming\n    for i in range(1, n):\n        if dp[i] == float('inf'):\n            continue\n        if i - k >= 1:\n            dp[i] = min(dp[i], dp[i - k] + i)\n        if i + k <= n:\n            dp[i] = min(dp[i], dp[i + k] + i)\n\n    # Return minimum cost of connection\n    return sum(dp)\n"
    },
    {
        "number": 4107,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = stdin.split('\\n')[1]\n\n    routers = [i for i in range(n) if s[i] == '1']\n    router_costs = [i for i in range(n) if s[i] == '1']\n    router_connections = {i: set() for i in routers}\n\n    for i in range(n):\n        if i in routers:\n            continue\n        for r in routers:\n            if r - k <= i <= r + k:\n                router_connections[r].add(i)\n\n    total_cost = sum(router_costs)\n    for r in routers:\n        for c in router_connections[r]:\n            total_cost += c\n\n    return str(total_cost)\n\nprint(solution('5 2\\n00100'))\nprint(solution('6 1\\n000000'))\nprint(solution('4 1\\n0011'))\nprint(solution('12 6\\n000010000100'))"
    },
    {
        "number": 4107,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip().split('\\n')[-1]\n    rooms = list(map(int, s))\n\n    routers = [i for i in range(n) if rooms[i]]\n    router_costs = [i for i in range(n) if rooms[i]]\n\n    for r in routers:\n        min_cost = float('inf')\n        for i in range(max(1, r - k), min(n, r + k) + 1):\n            if i!= r:\n                min_cost = min(min_cost, router_costs[i])\n        router_costs[r] += min_cost\n\n    return sum(router_costs)\n"
    },
    {
        "number": 4108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = map(str, stdin.split())\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            break\n    else:\n        return \"Yes\"\n    c_1, c_2 = s[i], t[i]\n    s_new = s.replace(c_1, '').replace(c_2, '')\n    t_new = t.replace(c_1, '').replace(c_2, '')\n    return \"No\" if s_new!= t_new else \"Yes\""
    },
    {
        "number": 4108,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if s == t:\n        return \"Yes\"\n    s = list(s)\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            c_1 = s[i]\n            c_2 = t[i]\n            for j in range(len(s)):\n                if s[j] == c_1:\n                    s[j] = c_2\n                elif s[j] == c_2:\n                    s[j] = c_1\n            s = \"\".join(s)\n            if s == t:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n\n    if s == t:\n        return 'Yes'\n\n    def replace(s: str) -> str:\n        i = 0\n        while i < len(s):\n            if s[i] == s[i+1]:\n                s = s[:i] + s[i+2:]\n                i -= 2\n            i += 1\n        return s\n\n    for i in range(100):\n        s = replace(s)\n        t = replace(t)\n        if s == t:\n            return 'Yes'\n\n    return 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = map(str, stdin.split())\n    if s == t:\n        return \"Yes\"\n    else:\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                c1, c2 = s[i], t[i]\n                break\n        s = s.replace(c1, c2)\n        s = s.replace(c2, c1)\n        if s == t:\n            return \"Yes\"\n        else:\n            return \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if s == t:\n        return \"Yes\"\n    \n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            return \"No\"\n    \n    return \"Yes\""
    },
    {
        "number": 4108,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    # convert strings to sets to remove duplicates\n    s_set = set(s)\n    t_set = set(t)\n\n    # check if s_set and t_set are equal\n    if s_set!= t_set:\n        # if not equal, check if s can be transformed into t\n        for c_1 in s_set:\n            if c_1 in t_set:\n                # if s can be transformed into t, return Yes\n                return \"Yes\"\n\n        # if s cannot be transformed into t, return No\n        return \"No\"\n\n    # if s_set and t_set are equal, return Yes\n    return \"Yes\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if s == t:\n        return \"Yes\"\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i]!= s[j] and s[j]!= t[i] and t[i]!= s[i] and t[j]!= s[j]:\n                s = s.replace(s[i], s[j]).replace(s[j], s[i])\n                t = t.replace(t[i], t[j]).replace(t[j], t[i])\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')\n    if s[0] == s[1]:\n        return 'Yes'\n    else:\n        c1, c2 = set(s[0]), set(s[1])\n        if len(c1)!= len(c2):\n            return 'No'\n        else:\n            c1, c2 = ''.join(c1), ''.join(c2)\n            return 'Yes' if c1 == c2 else 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    if s == t:\n        return \"Yes\"\n    s = s.replace('a', 'b').replace('b', 'a')\n    t = t.replace('a', 'b').replace('b', 'a')\n    if s == t:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get inputs\n    s = stdin.strip().split('\\n')[0]\n    t = stdin.strip().split('\\n')[1]\n\n    # Check if strings are equal\n    if s == t:\n        return \"Yes\"\n\n    # Perform operation zero or more times\n    count = 0\n    while s!= t:\n        # Choose two distinct letters\n        c1, c2 = s[0], s[1]\n        while c1 == c2:\n            c1, c2 = s[0], s[1]\n        # Replace every occurrence of c1 with c2 and every occurrence of c2 with c1\n        s = s.replace(c1, c2).replace(c2, c1)\n        count += 1\n\n    # Check if strings are equal\n    if s == t:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split(\"\\n\")\n    M, N = map(int, lines[0].split())\n    C = list(map(int, lines[1].split()))\n    A = []\n    for i in range(2, 2+N):\n        A.append(list(map(int, lines[i].split())))\n\n    # Initialize understanding levels\n    understanding = [0] * M\n\n    # Iterate over books\n    total_cost = 0\n    for i in range(N):\n        # Calculate cost of reading the book\n        cost = C[i]\n        for j in range(M):\n            cost += A[i][j] * understanding[j]\n\n        # Check if understanding levels can be increased\n        if cost > 0:\n            return \"No\"\n\n        # Increase understanding levels\n        for j in range(M):\n            understanding[j] += A[i][j]\n\n        # Update total cost\n        total_cost += cost\n\n    # Check if understanding levels meet objective\n    for level in understanding:\n        if level < X:\n            return \"No\"\n\n    # Objective is met\n    return str(total_cost)"
    },
    {
        "number": 4109,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.readline().strip().split())\n    C = list(map(int, stdin.readline().strip().split()))\n    A = []\n    for i in range(N):\n        A.append(list(map(int, stdin.readline().strip().split())))\n    # initialize variables\n    X = [0] * M\n    min_money = 0\n    # calculate maximum possible understanding levels of each algorithm\n    max_A = [max(a) for a in zip(*A)]\n    # loop through all possible values of X and calculate min_money\n    for x in range(max(max_A)+1):\n        # update X and calculate min_money\n        for i in range(M):\n            if X[i] < x:\n                X[i] = x\n        # calculate min_money\n        money = sum(c * min(a, x) for c, a in zip(C, max_A))\n        if money < min_money or min_money == 0:\n            min_money = money\n    # output result\n    if min_money == 0:\n        return \"No solution\"\n    else:\n        return str(min_money)"
    },
    {
        "number": 4109,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    N, M = map(int, lines[0].split())\n    books = []\n    for i in range(1, N+1):\n        line = lines[i]\n        book_id, cost, *algorithm_levels = map(int, line.split())\n        books.append((book_id, cost, algorithm_levels))\n\n    # initialize understanding levels\n    understanding_levels = [0] * M\n\n    # simulate reading and updating understanding levels\n    total_cost = 0\n    for book in books:\n        book_id, cost, algorithm_levels = book\n        if all(level >= X for level in algorithm_levels):\n            continue  # already achieved X or higher\n        if any(level >= X for level in algorithm_levels):\n            total_cost += cost  # need to pay for new books\n            continue  # already read book but not all algorithms\n        for j, level in enumerate(algorithm_levels):\n            understanding_levels[j] += A[i][j]\n        total_cost += cost\n\n    # check if objective is achievable\n    if all(level >= X for level in understanding_levels):\n        return f'Yes, the minimum amount of money needed is {total_cost}.'\n    else:\n        return f'No, it is not possible to achieve the objective.'"
    },
    {
        "number": 4109,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes in a string of input consisting of three parts separated by semicolons.\n    The first part is a string of integers representing the number of books N and the number of algorithms M.\n    The second part is a string of integers representing the cost of each book C_i in yen.\n    The third part is a string of integers representing the increase in understanding level for each book and algorithm A_{i,j}.\n\n    The function returns a string of either \"Yes\" or \"No\" indicating whether it is possible to achieve the objective of making all understanding levels X or higher.\n    If it is possible, the function also returns the minimum amount of money needed to achieve it.\n\n    Example:\n    Input: \"4;3;200 150 300 400;2 3 4\"\n    Output: \"Yes;450\"\n    \"\"\"\n\n    # Parse the input string into its three parts\n    parts = stdin.split(';')\n    N, M = map(int, parts[0].split())\n    C = list(map(int, parts[1].split()))\n    A = list(map(int, parts[2].split()))\n\n    # Initialize the understanding levels to 0\n    X = [0] * M\n\n    # Iterate over each book and algorithm to update understanding levels\n    for i in range(N):\n        for j in range(M):\n            X[j] += A[i*M+j]\n\n    # Check if it is possible to achieve the objective\n    achievable = True\n    for x in X:\n        if x < X[0] + M:\n            achievable = False\n            break\n\n    # If it is possible, calculate the minimum amount of money needed\n    if achievable:\n        total_cost = sum(C)\n        for j in range(M):\n            if X[j] < X[0] + M - j:\n                total_cost -= C[j]\n        return \"Yes;{}\".format(total_cost)\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = map(int, stdin.strip().split())\n    books = []\n    for _ in range(N):\n        book_info = list(map(int, stdin.strip().split()))\n        books.append(book_info)\n    total_price = 0\n    for book in books:\n        total_price += book[1]\n    if total_price < X*M:\n        return \"No solution\"\n    else:\n        min_price = float(\"inf\")\n        for i in range(N):\n            for j in range(M):\n                if books[i][0] <= X:\n                    total_price -= books[i][1]\n                    total_price += books[i][0]*books[i][2]\n                    if total_price >= X*M:\n                        min_price = min(min_price, total_price)\n                        break\n                    else:\n                        total_price -= books[i][0]*books[i][2]\n                        total_price += books[i][1]\n        return str(min_price) if min_price!= float(\"inf\") else \"No solution\""
    },
    {
        "number": 4109,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    a = []\n    for i in range(m):\n        a.append(list(map(int, stdin.split())))\n    dp = [[0] * (x + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, x + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= c[i - 1]:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - c[i - 1]] + sum(a[k][i - 1] for k in range(m)))\n    for i in range(m):\n        if sum(dp[j][x] for j in range(1, n + 1)) >= x:\n            return \"Yes\\n\" + str(sum(dp[j][x] * c[j - 1] for j in range(1, n + 1)))\n    return \"No\""
    },
    {
        "number": 4109,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input values\n    N, M = map(int, stdin.readline().split())\n    books = []\n    for _ in range(N):\n        book, cost = map(int, stdin.readline().split())\n        books.append((book, cost))\n\n    # Initializing understanding levels of all algorithms to 0\n    understanding = [0] * M\n\n    # Reading algorithm knowledge levels\n    for i in range(N):\n        knowledge = list(map(int, stdin.readline().split()))\n        for j in range(M):\n            understanding[j] += knowledge[j]\n\n    # Finding the minimum amount of money needed to achieve the objective\n    money = 0\n    for i in range(N):\n        book, cost = books[i]\n        if all(understanding[j] >= A * book for j, A in enumerate(books[i])):\n            money += cost\n\n    return f\"{money} yen\" if money > 0 else \"No solution\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    books = []\n    for i in range(1, N+1):\n        book_name, price = lines[i].split()\n        books.append((book_name, int(price)))\n    A = []\n    for i in range(N+1, N+M+1):\n        row = list(map(int, lines[i].split()))\n        A.append(row)\n\n    # Initialize understanding levels\n    understanding_levels = [0]*M\n\n    # Greedily buy and read books\n    money_spent = 0\n    for i in range(N):\n        book_name, price = books[i]\n        for j in range(M):\n            if A[i][j] > understanding_levels[j]:\n                understanding_levels[j] += A[i][j]\n        money_spent += price\n\n    # Check if objective is achievable\n    if any(level < X for level in understanding_levels):\n        return \"No\"\n    else:\n        return str(money_spent)"
    },
    {
        "number": 4109,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    books, algorithms, target, *data = [int(x) for x in stdin.split()]\n    books_data = list(zip(*[iter(data)] * books))\n    algorithms_data = list(zip(*[iter(data)] * algorithms))\n    \n    # Calculate minimum understanding levels\n    min_levels = [0] * algorithms\n    for book in books_data:\n        for j in range(algorithms):\n            min_levels[j] = max(min_levels[j], sum(book[j::algorithms]))\n    \n    # Check if target is achievable\n    max_levels = max(min_levels)\n    if max_levels < target:\n        return \"No\"\n    \n    # Calculate money needed\n    money_needed = 0\n    for i in range(books):\n        for j in range(algorithms):\n            if min_levels[j] >= target:\n                money_needed += books_data[i][j] * target\n    \n    return \"Yes\\n\" + str(money_needed)\n"
    },
    {
        "number": 4109,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Function to solve the problem.\n\n    Parameters\n    ----------\n    stdin : str\n        Input string containing the following values: N, M, C_1,..., C_N, A_11,..., A_1M,..., A_NM\n\n    Returns\n    -------\n    str\n        Output string containing either \"Yes\" or \"No\" depending on whether the objective is achievable and the minimum amount of money needed to achieve it.\n    \"\"\"\n    # Parse input\n    values = stdin.split()\n    N = int(values[0])\n    M = int(values[1])\n    C = [int(values[i]) for i in range(2, 2+N)]\n    A = [[int(values[j]) for j in range(2+N+i*M, 2+N+(i+1)*M)] for i in range(N)]\n\n    # Initialize understanding levels\n    understanding = [0] * M\n\n    # Calculate minimum amount of money needed\n    min_money = sum(C)\n    for i in range(N):\n        for j in range(M):\n            if understanding[j] + A[i][j] >= X:\n                min_money -= C[i]\n            else:\n                understanding[j] += A[i][j]\n\n    # Determine whether objective is achievable\n    for j in range(M):\n        if understanding[j] < X:\n            return \"No\"\n\n    return \"Yes\\n\" + str(min_money)\n"
    },
    {
        "number": 4110,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    D, G = map(int, lines[0].split())\n    scores = [int(line.split()[1]) for line in lines[1:]]\n    scores.sort(reverse=True)\n    base = 0\n    for i in range(D):\n        base += scores[i] * (i+1) * 100\n    if base >= G:\n        return str(D)\n    bonus = 0\n    for i in range(D):\n        bonus += scores[D-1-i] * (i+1) * 100\n    if bonus >= G-base:\n        return str(D-1)\n    return \"0\"\n\nprint(solution(input()))"
    },
    {
        "number": 4110,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    D, G = map(int, lines[0].split())\n    problems = [list(map(int, line.split())) for line in lines[1:]]\n    problems.sort(key=lambda x: x[1], reverse=True)\n    base_score = 0\n    perfect_bonuses = 0\n    for i in range(D):\n        perfect_bonus = i * 100\n        score = 100 * (i+1) * problems[i][0]\n        if score > G:\n            break\n        base_score += score\n        perfect_bonuses += perfect_bonus\n    return str(int(base_score + perfect_bonuses))"
    },
    {
        "number": 4110,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    D, G = map(int, stdin.strip().split())\n    p = [int(x) for x in stdin.readline().strip().split()]\n    c = [int(x) for x in stdin.readline().strip().split()]\n\n    # calculate base score\n    base_score = sum([p[i] * i for i in range(D)])\n\n    # calculate perfect bonus\n    perfect_bonus = sum([c[i] for i in range(D) if p[i] == 100])\n\n    # calculate minimum number of problems required\n    min_problems = (G - base_score) // (100 * D) + 1\n\n    # return result\n    return str(min_problems)\n"
    },
    {
        "number": 4110,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    p = [0] * D\n    c = [0] * D\n    for i in range(D):\n        p[i], c[i] = map(int, stdin.readline().split())\n    \n    # Calculate base score\n    base_score = sum(p)\n    # Calculate minimum number of problems needed\n    min_problems = 0\n    for i in range(D):\n        if p[i] == 100 * (i+1):\n            min_problems += 1\n        elif p[i] > G:\n            break\n        else:\n            # Calculate number of perfect bonuses earnable\n            perfect_bonus = G - base_score\n            perfect_bonus //= (i+1) * 100\n            min_problems += perfect_bonus // c[i]\n            if perfect_bonus % c[i] == 0:\n                min_problems -= 1\n            break\n    \n    return str(min_problems)"
    },
    {
        "number": 4110,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    total_score = int(stdin.split()[1])\n    scores = []\n    perfect_bonuses = []\n    for i, line in enumerate(stdin.split('\\n')[1:], 1):\n        score, bonus = map(int, line.split())\n        scores.append(score)\n        perfect_bonuses.append(bonus)\n    count = 0\n    base_score = 0\n    for score, bonus in zip(scores, perfect_bonuses):\n        if score == 100:\n            if base_score + bonus >= total_score:\n                break\n            else:\n                base_score += bonus\n                count += 1\n        else:\n            if base_score + score >= total_score:\n                break\n            else:\n                base_score += score\n                count += 1\n    return str(count)"
    },
    {
        "number": 4110,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    d, g = map(int, stdin.split())\n    p = [0] * (d + 1)\n    c = [0] * (d + 1)\n    for i in range(d):\n        p[i+1], c[i+1] = map(int, stdin.split())\n\n    score = 0\n    problems = 0\n    for i in range(d, 0, -1):\n        if p[i] == 0:\n            continue\n\n        if score + p[i]*100 > g:\n            if i == 1:\n                return str(problems)\n            else:\n                break\n\n        if score + p[i]*100 == g:\n            problems += p[i]\n            break\n\n        if i == d:\n            score += p[i]*100\n            problems += p[i]\n        else:\n            score += p[i]*100\n            problems += p[i]\n\n            perfect_bonus = c[i]\n            for j in range(i+1, d+1):\n                if p[j] == 0:\n                    break\n                if p[j]!= 100:\n                    break\n                perfect_bonus += c[j]\n\n            if score + perfect_bonus >= g:\n                break\n\n    return str(problems)"
    },
    {
        "number": 4110,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    D, G = map(int, stdin.split())\n    p = [0] * D\n    c = [0] * D\n    for i in range(D):\n        p[i], c[i] = map(int, stdin.readline().split())\n\n    # calculate base score and perfect bonus\n    base_score = sum([100 * i * p[i] for i in range(D)])\n    perfect_bonus = sum([c[i] * (100 * i + 100) // 2 for i in range(D)])\n\n    # calculate minimum number of problems needed\n    if G <= base_score + perfect_bonus:\n        return \"0\"\n    else:\n        required_score = G - perfect_bonus\n        max_problems = required_score // (100 * D)\n        min_problems = 0\n        while min_problems < max_problems:\n            mid_problems = (min_problems + max_problems) // 2\n            total_score = sum([100 * i * p[i] for i in range(D)]) + mid_problems * 100 * D * c[-1]\n            if total_score < required_score:\n                min_problems = mid_problems + 1\n            else:\n                max_problems = mid_problems\n        return str(min_problems)"
    },
    {
        "number": 4110,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d, g = map(int, stdin.readline().strip().split())\n    p, c = [], []\n    for i in range(d):\n        pi, ci = map(int, stdin.readline().strip().split())\n        p.append(pi)\n        c.append(ci)\n\n    p_total = sum(p)\n    if p_total < g:\n        return \"No\"\n\n    base_score = sum(p[i] * i for i in range(d))\n    if base_score >= g:\n        return \"Yes\"\n\n    count = 0\n    for i in range(d):\n        if p[i] == 100:\n            count += 1\n            if count == g // 100:\n                return str(i + 1)\n\n    return \"No\""
    },
    {
        "number": 4110,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    total_score = int(stdin.split()[1])\n    num_problems = 0\n    for i in range(int(stdin.split()[0])):\n        num_problems += int(stdin.readline().split()[0])\n    base_score = total_score - num_problems * 100\n    if base_score >= 0:\n        return str(num_problems)\n    else:\n        return str(int(base_score/100) + num_problems)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4110,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    D, G = map(int, lines[0].split())\n    scores = [(int(i), int(j)) for i, j in [line.split() for line in lines[1:]]]\n    \n    # Calculate base score\n    base_score = sum([score for i, score in scores if i <= G])\n    \n    # Calculate perfect bonuses\n    perfect_bonuses = sum([c for i, c in scores if i == G])\n    \n    # Return minimum number of problems needed\n    return str(max(0, (G - base_score) // perfect_bonuses))"
    },
    {
        "number": 4111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(1, n):\n        if sum(a[:i])!= sum(a[i:]):\n            count += 1\n    return count"
    },
    {
        "number": 4111,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n    cnt = 0\n    for i in range(n-1):\n        if a[i] % 2 == 0 and a[i+1] % 2 == 1:\n            cnt += 1\n    return cnt"
    },
    {
        "number": 4111,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    odd_sum = [0] * n\n    even_sum = [0] * n\n    for i in range(n):\n        odd_sum[i] = sum(a[:i+1])\n        even_sum[i] = sum(a[:i+1]) + a[i]\n    good_candy = []\n    for i in range(n):\n        if odd_sum[i] == even_sum[i]:\n            good_candy.append(i+1)\n    return len(good_candy)"
    },
    {
        "number": 4111,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(1, n):\n        if sum(a[:i]) % 2!= sum(a[i:]) % 2:\n            count += 1\n    return count\n"
    },
    {
        "number": 4111,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    good_candy_count = 0\n    \n    for i in range(1, n):\n        if sum(a[:i]) % 2 == sum(a[i:]) % 2:\n            good_candy_count += 1\n            \n    return good_candy_count"
    },
    {
        "number": 4111,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    ans = 0\n    for i in range(n):\n        # if dad gets the i-th candy then the sum of weights of candies Tanya eats in even days will be equal to the sum of weights of candies Tanya eats in odd days\n        if (n-i-1) % 2 == 0:\n            if (i-1+n-i-1) % 2!= 0:\n                ans += 1\n\n    return str(ans)"
    },
    {
        "number": 4111,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    good_candies = []\n    for i in range(n-1):\n        weight = a[i]\n        for j in range(i+1, n):\n            weight += a[j]\n            if weight == a[i]:\n                good_candies.append(i+1)\n                break\n    return len(good_candies)"
    },
    {
        "number": 4111,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    weights = list(map(int, stdin.readline().strip().split()))\n    counter = 0\n    for i in range(1, n):\n        if sum(weights[0:i]) % 2 == sum(weights[i:]) % 2:\n            counter += 1\n    return str(counter)\n\nprint(solution(input()))<|im_sep|>"
    },
    {
        "number": 4111,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(1, n):\n        # Give candy i to dad\n        j = i\n        total_odd = 0\n        total_even = 0\n        while j <= n-1:\n            total_odd += a[j]\n            j += 2\n        while j <= n:\n            total_even += a[j]\n            j += 1\n        if total_odd!= total_even:\n            count += 1\n    return str(count)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4111,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    count = 0\n\n    for i in range(1, n):\n        if (sum(a[:i]) + sum(a[i:])) % 2 == 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 4112,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n\n    # we can always repost the first k images\n    reposted = a[:k]\n    max_sum = sum(reposted)\n    current_sum = max_sum\n\n    # now we try to repost the remaining images\n    for i in range(k, n):\n        # if we need to repost a picture, we try to include it in the current segment\n        if current_sum - reposted[0] + a[i] <= max_sum:\n            reposted.append(a[i])\n            current_sum += a[i]\n        # otherwise, we start a new segment\n        else:\n            max_sum = current_sum\n            current_sum = max_sum\n            reposted = [a[i]]\n\n    # if we still have pictures to repost and the segment is too short, we return -1\n    if len(reposted) < x and len(reposted) < k:\n        return \"-1\"\n    # otherwise, we return the maximum sum of reposted pictures\n    else:\n        return max_sum\n\n\ndef"
    },
    {
        "number": 4112,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()))\n    \n    # make sure that all pictures have at least one repost\n    if x > n:\n        return -1\n    \n    # make sure that the sum of beauty values of reposted pictures is maximum possible\n    sum_a = sum(a)\n    if x*a[0] > sum_a:\n        return -1\n    \n    # make sure that each segment of the news feed of at least k consecutive pictures has at least one picture reposted by Vova\n    count = 0\n    for i in range(n-k+1):\n        count += 1\n        for j in range(i+1, i+k):\n            if a[j] > a[i]:\n                count += 1\n                break\n    \n    if count < x:\n        return -1\n    \n    return sum_a\n\nwith open('input.txt') as f:\n    print(solution(f.read()))"
    },
    {
        "number": 4112,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    if k > x:\n        return '-1'\n    ans = 0\n    i = j = 0\n    while j < n:\n        if j - i + 1 < k:\n            j += 1\n            continue\n        ans += a[j]\n        if x > 0:\n            j += 1\n            x -= 1\n        else:\n            i += 1\n    return str(ans)"
    },
    {
        "number": 4112,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    a.sort(reverse=True)\n    ans = 0\n    cnt = 0\n    for i in range(n):\n        if cnt < k:\n            cnt += 1\n            ans += a[i]\n        else:\n            if cnt == k and ans < sum(a[:i+1]):\n                ans += a[i]\n                cnt += 1\n            else:\n                if x > 0:\n                    ans += a[i]\n                    x -= 1\n                    cnt = 1\n                else:\n                    break\n    if cnt < k:\n        return -1\n    else:\n        return ans"
    },
    {
        "number": 4112,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.readline().strip().split()))\n    a = list(map(int, stdin.readline().strip().split()))\n\n    a.sort()\n    a.reverse()\n\n    s = 0\n    i = 0\n    j = 0\n\n    while j < n:\n        if a[j] < a[i] - 1 and j - i >= k:\n            s += a[i] * (j - i)\n            i = j\n        j += 1\n\n    if i!= n - 1 and j - i < k:\n        return \"-1\"\n\n    s += a[i] * (j - i)\n\n    return str(s) if s <= x * a[0] else \"-1\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    total_beauty = sum(a)\n    if x > total_beauty or k > n or k > x or x > n:\n        return \"-1\"\n    dp = [[0 for _ in range(x+1)] for _ in range(n+1)]\n    dp[0][0] = 0\n    for i in range(1, n+1):\n        dp[i][0] = a[i-1]\n        for j in range(1, x+1):\n            dp[i][j] = float('-inf')\n            for p in range(max(0, i-k), i):\n                dp[i][j] = max(dp[i][j], dp[p][j-1]+a[i-1])\n    return dp[n][x]"
    },
    {
        "number": 4112,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Check if it's possible to repost some pictures\n    if sum(a) < x:\n        return \"-1\"\n\n    # Calculate the sum of beauty values of reposted pictures\n    ans = 0\n    i = 0\n    while i < n:\n        if k == 1:\n            ans += a[i]\n            i += 1\n        else:\n            j = i\n            while j < n and j - i + 1 < k:\n                j += 1\n            if j == n:\n                break\n            if k == 2:\n                ans += a[i] + a[j - 1]\n                i = j\n            else:\n                max_beauty = a[i]\n                for p in range(i, j):\n                    max_beauty = max(max_beauty, a[p])\n                ans += max_beauty\n                i = j - 1\n            ans += sum(a[i:j])\n            i = j\n\n    # Print the result\n    return str(ans)\n"
    },
    {
        "number": 4112,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    # check if we can repost all the pictures\n    if x == n:\n        return str(sum(a))\n    \n    # sort pictures by beauty\n    a = sorted(enumerate(a), key=lambda x: x[1], reverse=True)\n    \n    # initialize variables\n    i = 0\n    j = k-1\n    max_sum = 0\n    curr_sum = sum(a[j][1] for j in range(k))\n    reposted = set()\n    \n    # loop through all the pictures\n    while i < n:\n        # if we have reposted all the pictures, break\n        if len(reposted) == x:\n            break\n        \n        # if we have reached the end of the current segment\n        if j >= n-1:\n            j = n-1\n            max_sum = max(max_sum, curr_sum)\n            \n            # check if the current segment has at least one repost\n            if k == 1 or len(reposted) > 0:\n                break\n        \n        # if we have reached the end of the current segment without reposting\n        if j == n-1:\n            if k == 1 or len(reposted) > 0:\n                break\n            else:\n                j -= 1\n                curr_sum -= a[j+1][1]\n                continue\n        \n        # check if the current segment has at least one repost\n        if k == 1 or len(reposted) > 0:\n            # check if we need to repost the current picture\n            if i <= j and a[i][0] not in reposted:\n                reposted.add(a[i][0])\n                curr_sum += a[i][1]\n            i += 1\n        else:\n            j += 1\n            curr_sum += a[j][1] - a[j-k+1][1] if j >= k-1 else a[j][1]\n            max_sum = max(max_sum, curr_sum)\n    \n    return str(max_sum) if max_sum > 0 else '-1'"
    },
    {
        "number": 4112,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    \n    # Check if it is possible to repost\n    if x > n:\n        return \"-1\"\n    \n    # Check if it is possible to satisfy all conditions\n    if k > n:\n        return \"-1\"\n    \n    # Sort the array of beauty values in descending order\n    a.sort(reverse=True)\n    \n    # Initialize variables\n    start, end, max_sum, curr_sum = 0, k - 1, 0, sum(a[0:k])\n    \n    # Loop through the array\n    for i in range(k, n):\n        # Calculate the sum of the segment and update max_sum if necessary\n        curr_sum += a[i] - a[start]\n        max_sum = max(max_sum, curr_sum)\n        \n        # If the end of the segment is reached, move the start of the segment one step to the right\n        if i == end:\n            start += 1\n            end += 1\n            curr_sum -= a[start-1] + a[end]\n    \n    # Check if it is possible to repost all the pictures\n    if n - k < x:\n        return \"-1\"\n    \n    # Calculate the maximum sum of reposted pictures\n    while x > 0:\n        max_sum += a[n-x] - a[n-x-k]\n        x -= 1\n    \n    return str(max_sum)"
    },
    {
        "number": 4112,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # dp[i] stores the maximum sum of values of reposted pictures ending at the i-th picture\n    dp = [0] * n\n\n    # if k=1, we have to repost all the pictures in the news feed\n    if k == 1:\n        dp[0] = a[0]\n        for i in range(1, n):\n            dp[i] = dp[i-1] + a[i]\n\n    # if k>1, we have to repost at least one picture in every segment of length at least k\n    else:\n        for i in range(k):\n            dp[i] = a[i]\n\n        for i in range(k, n):\n            dp[i] = max(dp[i-1], dp[i-k] + a[i])\n\n    # if we cannot repost enough pictures to satisfy the conditions, return -1\n    if dp[-1] < x * a[-1]:\n        return '-1'\n\n    # otherwise, return the maximum sum of values of reposted pictures\n    return dp[-1]"
    },
    {
        "number": 4113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    # Check if we can buy 2 cakes and 2 doughnuts for N dollars\n    if N % 2 == 0:\n        cakes = N // 2 // 4\n        doughnuts = N // 2 // 7\n        if cakes * 4 + doughnuts * 7 == N:\n            return \"Yes\"\n    \n    return \"No\"\n\ndef"
    },
    {
        "number": 4113,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 5!= 0:\n        return \"No\"\n    else:\n        num_cakes = N // 4\n        num_doughnuts = N // 7\n        if num_cakes == 0 or num_doughnuts == 0:\n            return \"No\"\n        else:\n            return \"Yes\""
    },
    {
        "number": 4113,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    cakes = 0\n    doughnuts = 0\n    \n    # find cakes and doughnuts that can be bought\n    while n >= 4:\n        cakes += 1\n        n -= 4\n    while n >= 7:\n        doughnuts += 1\n        n -= 7\n    \n    # check if there is a way to buy exactly N dollars\n    if cakes == 0 and doughnuts == 0:\n        return \"No\"\n    if n == 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N = int(stdin.strip())\n\n    # Calculate the total cost for cakes and doughnuts\n    total_cost = 4 * (N // 4) + 7 * ((N - (N // 4)) // 7)\n\n    # Check if the total cost is N\n    if total_cost == N:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n\n    if n % 4 == 0:\n        return \"Yes\"\n    elif n % 7 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cakes = 0\n    doughnuts = 0\n    while True:\n        if n >= 4 and doughnuts == 0:\n            cakes += 1\n            n -= 4\n        elif n >= 7 and cakes == 0:\n            doughnuts += 1\n            n -= 7\n        elif doughnuts == 2 and cakes == 2:\n            return \"Yes\"\n        else:\n            return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n % 5 == 0:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4113,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    # check if we can buy doughnuts\n    if N % 7 == 0:\n        doughnuts = N // 7\n        cakes = N // 4\n        return \"Yes\" if doughnuts >= 2 and cakes >= 2 else \"No\"\n\n    # check if we can buy cakes\n    elif N % 4 == 0:\n        cakes = N // 4\n        doughnuts = N // 7\n        return \"Yes\" if doughnuts >= 2 and cakes >= 2 else \"No\"\n\n    else:\n        return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cakes = N // 4\n    doughnuts = N // 7\n    if N % 4 == 0 and N % 7 == 0 and N >= 11:\n        return 'Yes'\n    elif cakes > 0 and doughnuts > 0 and N - (cakes * 4 + doughnuts * 7) == 0:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4113,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    # If N is odd, we cannot buy cakes and doughnuts for N dollars\n    if N % 2 == 1:\n        return \"No\"\n\n    # We can buy cakes and doughnuts for N/2 dollars\n    cakes = N // 2\n    doughnuts = N // 2\n\n    # Check if we can buy zero cakes or zero doughnuts\n    if cakes == 0 or doughnuts == 0:\n        return \"No\"\n\n    # Check if the total value of the purchases is N\n    total = cakes * 4 + doughnuts * 7\n    if total!= N:\n        return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4114,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    altitudes = []\n    for i in range(1, n+1):\n        x, y, h = map(int, lines[i].split())\n        altitudes.append((x, y, h))\n    altitudes.sort(key=lambda x: x[2], reverse=True)\n    max_altitude = altitudes[0][2]\n    center_x, center_y = 0, 0\n    for x, y, h in altitudes:\n        if h == max_altitude:\n            center_x += x\n            center_y += y\n    center_x /= n\n    center_y /= n\n    return f\"{center_x} {center_y} {max_altitude}\""
    },
    {
        "number": 4114,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    altitudes = []\n    for i in range(n):\n        x, y, h = map(int, stdin.readline().strip().split())\n        altitudes.append((x, y, h))\n    \n    max_x, max_y = altitudes[0][:2]\n    min_x, min_y = altitudes[0][:2]\n    for x, y, _ in altitudes:\n        max_x = max(max_x, x)\n        max_y = max(max_y, y)\n        min_x = min(min_x, x)\n        min_y = min(min_y, y)\n    \n    h = max(max_x - min_x, max_y - min_y)\n    center_x = (max_x + min_x) // 2\n    center_y = (max_y + min_y) // 2\n    \n    return f\"{center_x} {center_y} {h}\""
    },
    {
        "number": 4114,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    altitudes = []\n    for i in range(1, n+1):\n        x, y, h = map(int, lines[i].split())\n        altitudes.append((x, y, h))\n    altitudes.sort(key=lambda x: x[2], reverse=True)\n    min_x = altitudes[0][0]\n    max_x = altitudes[-1][0]\n    min_y = altitudes[0][1]\n    max_y = altitudes[-1][1]\n    center_x = (min_x + max_x) // 2\n    center_y = (min_y + max_y) // 2\n    height = altitudes[0][2]\n    return f\"{center_x} {center_y} {height}\""
    },
    {
        "number": 4114,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    altitudes = []\n    for i in range(1, n+1):\n        x, y, h = map(int, lines[i].split())\n        altitudes.append(h - abs(x - 50) - abs(y - 50))\n    c_x = (50 + sum(x for x, y, h in altitudes)) // n\n    c_y = (50 + sum(y for x, y, h in altitudes)) // n\n    h = max(altitudes, default=0)\n    return f\"{c_x} {c_y} {h}\""
    },
    {
        "number": 4114,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    altitudes = {}\n    for i in range(1, N+1):\n        x, y, h = map(int, lines[i].split())\n        altitudes[(x, y)] = h\n    C_X = sum([x*h for (x, y), h in altitudes.items()]) / sum([h for _, h in altitudes.items()])\n    C_Y = sum([y*h for (x, y), h in altitudes.items()]) / sum([h for _, h in altitudes.items()])\n    H = max([h for _, h in altitudes.items()])\n    return f\"{C_X} {C_Y} {H}\""
    },
    {
        "number": 4114,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get number of points and altitudes\n    n = int(stdin.readline().strip())\n    altitudes = []\n    points = []\n    for i in range(n):\n        x, y, h = map(int, stdin.readline().strip().split())\n        altitudes.append(h)\n        points.append((x, y))\n    # find the center and height of the pyramid\n    cx = sum(x for x, y in points) / n\n    cy = sum(y for x, y in points) / n\n    h = max(altitudes)\n    # return center coordinates and height\n    return f\"{cx} {cy} {h}\""
    },
    {
        "number": 4114,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    altitudes = []\n    for _ in range(N):\n        x, y, h = map(int, stdin.readline().split())\n        altitudes.append((x, y, h))\n    altitudes.sort(key=lambda x: (-x[2], x[0], x[1]))\n    c_x, c_y = altitudes[0][0], altitudes[0][1]\n    h = altitudes[0][2]\n    for i in range(1, N):\n        x, y, h_i = altitudes[i]\n        h = max(h, h_i - abs(x - c_x) - abs(y - c_y))\n    return f\"{c_x} {c_y} {h}\"\n\nprint(solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\"))"
    },
    {
        "number": 4114,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    altitudes = []\n    for i in range(1, n+1):\n        x, y, h = map(int, lines[i].split())\n        altitudes.append((x, y, h))\n    xs = [x for x, y, h in altitudes]\n    ys = [y for x, y, h in altitudes]\n    xmin = min(xs)\n    xmax = max(xs)\n    ymin = min(ys)\n    ymax = max(ys)\n    cx = (xmin + xmax) // 2\n    cy = (ymin + ymax) // 2\n    h = max(ymax - ymin, xmax - xmin)\n    return f\"{cx} {cy} {h}\""
    },
    {
        "number": 4114,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    altitudes = []\n    for i in range(1, n+1):\n        x, y, h = map(int, lines[i].split())\n        altitudes.append((x, y, h))\n    c_x, c_y = 0, 0\n    h = 0\n    for x, y, h_i in altitudes:\n        c_x += x\n        c_y += y\n        h += h_i\n    c_x //= n\n    c_y //= n\n    h //= n\n    return f\"{c_x} {c_y} {h}\""
    },
    {
        "number": 4114,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y, h = map(int, stdin.readline().strip().split())\n        points.append((x, y, h))\n    \n    # find center coordinates and height of pyramid\n    c_x = 0\n    c_y = 0\n    h = 0\n    for x, y, h_i in points:\n        c_x += x\n        c_y += y\n        h = max(h, h_i)\n    c_x //= n\n    c_y //= n\n    \n    # print result\n    return f\"{c_x} {c_y} {h}\""
    },
    {
        "number": 4115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    i = 0\n    j = n - 1\n    count = 0\n    while i < j:\n        if s[i]!= s[j]:\n            count += 1\n            s = s[:i] + s[i+1:j+1][::-1] + s[j+1:]\n            i += 1\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    return count"
    },
    {
        "number": 4115,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n\n    # Check if S is already palindromic\n    if S == S[::-1]:\n        return str(0)\n\n    # Initialize variables\n    hugs = 0\n    i = 0\n    j = n - 1\n\n    # Iterate through the string and swap characters\n    while i < j:\n        if S[i]!= S[j]:\n            S = S[:i] + S[j] + S[i+1:j] + S[i] + S[j+1:]\n            hugs += 1\n        i += 1\n        j -= 1\n\n    return str(hugs)"
    },
    {
        "number": 4115,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    # Check if string is already a palindrome\n    if s == s[::-1]:\n        return \"0\"\n    # Initialize count\n    count = 0\n    # Traverse the string\n    for i in range(n):\n        # If first and last characters are same, then check middle characters\n        if s[i] == s[n-i-1]:\n            continue\n        # If middle characters are same, then change it to any character of our choice\n        for j in range(26):\n            temp = list(s)\n            temp[i] = chr(j+97)\n            temp[n-i-1] = chr(j+97)\n            count += 1\n    return str(count)"
    },
    {
        "number": 4115,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input string\n    s = stdin.strip()\n    n = len(s)\n\n    # calculate the minimum number of hugs needed to make S palindromic\n    if s == s[::-1]:\n        return 0\n    else:\n        hugs = 1\n        for i in range(n):\n            for j in range(i+1, n):\n                new_s = s[:i] + chr(ord('a') + j) + s[i+1:]\n                if new_s == new_s[::-1]:\n                    hugs = 1 + solution(new_s)\n                    break\n            if hugs > 1:\n                break\n        return hugs\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(26):\n            if is_palindrome(s[:i] + chr(ord('a') + j) + s[i+1:]):\n                count += 1\n    return count\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    hugs = 0\n    for i in range(n):\n        for j in range(ord('a'), ord('z')+1):\n            if s[:i] + chr(j) + s[i+1:] == s[:i] + s[i+1:][::-1]:\n                hugs = min(hugs, abs(i - n // 2))\n                hugs += 1\n    return str(hugs)"
    },
    {
        "number": 4115,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n <= 1:\n        return '0'\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i:j] == s[i:j][::-1]:\n                continue\n            else:\n                count += 1\n                for k in range(n):\n                    if s[k]!= s[i] and s[k]!= s[j]:\n                        new_s = s[:k] + s[i] + s[j] + s[k+1:]\n                        break\n    return str(count)"
    },
    {
        "number": 4115,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    s = stdin.strip()\n    \n    # initialize variables\n    hugs = 0\n    n = len(s)\n    palindrome = s\n    \n    # find palindrome\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i:j] == s[i:j][::-1]:\n                palindrome = s[i:j]\n                break\n    \n    # calculate minimum hugs\n    for i in range(n):\n        for j in range(26):\n            candidate = s[:i] + chr(ord('a') + j) + s[i+1:]\n            if candidate == candidate[::-1]:\n                if candidate < palindrome:\n                    hugs += 1\n                    palindrome = candidate\n    \n    # output\n    return str(hugs)"
    },
    {
        "number": 4115,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i]!= s[j]:\n                if s[i].islower() and s[j].isupper():\n                    count += 1\n                elif s[i].isupper() and s[j].islower():\n                    count += 1\n                elif s[i].isupper() and s[j].isupper():\n                    count += 2\n                else:\n                    count += 3\n    return count\n\nprint(solution(input())) # Sample Input"
    },
    {
        "number": 4115,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n    i = 0\n    j = n-1\n    while i < j:\n        if s[i]!= s[j]:\n            count += 1\n            if count > 1:\n                return \"Impossible\"\n            s = s[:i] + s[i+1] + s[j] + s[i] + s[j+1:]\n            i += 1\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    return count"
    },
    {
        "number": 4116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i*j == n:\n                return 'Yes'\n    return 'No'"
    },
    {
        "number": 4116,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(2, 10):\n        for j in range(2, 10):\n            if N == i * j:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n <= 9:\n        return \"Yes\"\n    for i in range(2, 10):\n        if n % i == 0:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i*j == N:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if n == i*j:\n                return 'Yes'\n    return 'No'"
    },
    {
        "number": 4116,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        if n % i == 0:\n            for j in range(1, 10):\n                if n // i == j:\n                    return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if n == i*j:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == n:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == N:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if N == i * j:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline())\n    lengths = list(map(int, stdin.readline().split()))\n\n    # sort lengths in ascending order\n    lengths.sort()\n\n    # count the number of ways to choose three sticks with different lengths\n    count = 0\n    for i in range(n - 2):\n        j = i + 1\n        k = n - 1\n        while j < k:\n            # check if the three sticks can form a triangle\n            if lengths[i] + lengths[j] > lengths[k]:\n                k -= 1\n            elif lengths[i] + lengths[k] > lengths[j]:\n                j += 1\n            else:\n                count += 1\n                j += 1\n                k -= 1\n\n    return str(count)\n"
    },
    {
        "number": 4117,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    lengths = [int(length) for length in lines[1].split()]\n    \n    # Count the number of possible triangles\n    count = 0\n    for i in range(N - 2):\n        for j in range(i + 1, N - 1):\n            for k in range(j + 1, N):\n                if lengths[i]!= lengths[j]!= lengths[k]:\n                    count += 1\n    \n    # Return the result\n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline())\n    sticks = list(map(int, stdin.readline().split()))\n    \n    # sort sticks\n    sticks.sort()\n    \n    # count ways to form triangles\n    count = 0\n    for i in range(N-2):\n        # skip duplicates\n        if sticks[i] == sticks[i+1]:\n            continue\n        # count number of triangles with sticks[i]\n        left = i+1\n        right = N-1\n        while left < right:\n            if sticks[i] + sticks[left] > sticks[right]:\n                count += right-left\n                left += 1\n            else:\n                right -= 1\n    \n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    lengths = list(map(int, stdin.readline().split()))\n    \n    count = 0\n    for i in range(N-2):\n        for j in range(i+1, N-1):\n            for k in range(j+1, N):\n                if lengths[i]!= lengths[j] and lengths[i]!= lengths[k] and lengths[j]!= lengths[k]:\n                    count += 1\n    \n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    sticks = list(map(int, stdin.readline().strip().split()))\n\n    count = 0\n    for i in range(N-2):\n        for j in range(i+1, N-1):\n            for k in range(j+1, N):\n                if sticks[i]!= sticks[j] and sticks[i]!= sticks[k] and sticks[j]!= sticks[k]:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    sticks = list(map(int, stdin.readline().split()))\n\n    count = 0\n    for i in range(N - 2):\n        for j in range(i + 1, N - 1):\n            for k in range(j + 1, N):\n                if sticks[i]!= sticks[j]!= sticks[k]:\n                    count += 1\n\n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n = int(stdin.readline().strip())\n    sticks = list(map(int, stdin.readline().strip().split()))\n    \n    # Sort sticks in descending order\n    sticks.sort(reverse=True)\n    \n    # Initialize variables\n    count = 0\n    i = 0\n    \n    # Loop through all possible triples of indices\n    while i < n - 2:\n        # Check if current stick length is greater than the sum of the remaining two\n        if sticks[i] > sticks[i+1] + sticks[i+2]:\n            count += (n - i) * (n - i - 1) // 2\n            break\n        # Increment index if the next stick is not greater than the sum of the remaining two\n        elif sticks[i] + sticks[i+1] <= sticks[i+2]:\n            i += 1\n        # Increment index if the next stick is greater than the sum of the remaining two\n        else:\n            i += 2\n            count += (n - i) * (n - i - 1) // 2\n    \n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sticks = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if sticks[i]!= sticks[j] and sticks[i]!= sticks[k] and sticks[j]!= sticks[k]:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    lengths = list(map(int, stdin.readline().strip().split()))\n    lengths.sort()\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if lengths[i]!= lengths[j]!= lengths[k]:\n                    if lengths[i] + lengths[j] > lengths[k]:\n                        count += 1\n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    sticks = list(map(int, lines[1].split()))\n    assert len(sticks) == N\n    \n    # sort the sticks in decreasing order\n    sticks.sort(reverse=True)\n    \n    # count the number of ways to choose three of the sticks with different lengths\n    count = 0\n    for i in range(N - 2):\n        j = i + 1\n        k = N - 1\n        while j < k:\n            if sticks[i]!= sticks[j] and sticks[j]!= sticks[k] and sticks[k]!= sticks[i]:\n                # we have found a valid triple\n                count += 1\n                j += 1\n                k -= 1\n            else:\n                # we need to increase/decrease j or k to find a valid triple\n                if sticks[i] == sticks[j]:\n                    j += 1\n                elif sticks[j] == sticks[k]:\n                    k -= 1\n                else:\n                    j += 1\n                    k -= 1\n                \n    return str(count)"
    },
    {
        "number": 4118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A < 1 or A > 9 or B < 1 or B > 9:\n        return -1\n    return A * B"
    },
    {
        "number": 4118,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = A * B\n    return str(result) if result <= 9 else \"-1\""
    },
    {
        "number": 4118,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < 1 or a > 20 or b < 1 or b > 20:\n        return '-1'\n    result = a * b\n    return str(result)"
    },
    {
        "number": 4118,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A < 1 or A > 20 or B < 1 or B > 20:\n        return \"-1\"\n    return str(A * B)"
    },
    {
        "number": 4118,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < 1 or a > 9 or b < 1 or b > 9:\n        return \"-1\"\n    return str(a*b)"
    },
    {
        "number": 4118,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    if A < 1 or A > 9 or B < 1 or B > 9:\n        return \"-1\"\n    return str(A * B)"
    },
    {
        "number": 4118,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    a, b = map(int, stdin.split())\n    \n    # Check if multiplication is possible\n    if a < 1 or a > 9 or b < 1 or b > 9:\n        return \"-1\"\n    \n    # Multiply the two numbers and return the result\n    result = a * b\n    return str(result)"
    },
    {
        "number": 4118,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < 1 or a > 9 or b < 1 or b > 9:\n        return '-1'\n    else:\n        return str(a * b)"
    },
    {
        "number": 4118,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < 1 or a > 20 or b < 1 or b > 20:\n        return -1\n    if a == 1 or b == 1:\n        return 1\n    if a == 2 or b == 2:\n        return 2\n    if a == 3 or b == 3:\n        return 3\n    if a == 4 or b == 4:\n        return 4\n    if a == 5 or b == 5:\n        return 5\n    if a == 6 or b == 6:\n        return 6\n    if a == 7 or b == 7:\n        return 7\n    if a == 8 or b == 8:\n        return 8\n    if a == 9 or b == 9:\n        return 9\n    else:\n        return -1"
    },
    {
        "number": 4118,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A < 1 or A > 9 or B < 1 or B > 9:\n        return -1\n    else:\n        return A * B"
    },
    {
        "number": 4119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().strip().split())\n    X = list(map(int, stdin.readline().strip().split()))\n    \n    # Sort X for binary search\n    X.sort()\n    \n    # Initialize visited set\n    visited = set()\n    for x in X:\n        visited.add(x)\n    \n    # Initialize move count\n    moves = 0\n    \n    # Iterate over target coordinates\n    for x in range(X[0], X[-1]+1):\n        # Use binary search to find the leftmost piece at or below x\n        left = bisect_left(X, x, 0, N-1)\n        \n        # If there is no piece at or below x, continue\n        if left == N:\n            continue\n        \n        # Use binary search to find the rightmost piece at or above x\n        right = bisect_right(X, x, 0, N-1)\n        \n        # If there is no piece at or above x, continue\n        if right == 0:\n            continue\n        \n        # Update visited set\n        for i in range(left, right):\n            if X[i] in visited:\n                visited.remove(X[i])\n            X[i] += 1\n            visited.add(X[i])\n            moves += 1\n    \n    # Print result\n    return str(moves)"
    },
    {
        "number": 4119,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = list(map(int, stdin.readline().split()))\n    X = list(map(int, stdin.readline().split()))\n    \n    # Sort X and remove duplicates\n    X = sorted(set(X))\n    \n    # Initialize visited set and move count\n    visited = set(X)\n    moves = 0\n    \n    # Loop through all coordinates\n    for i in range(M):\n        # Find the minimum distance to an unvisited coordinate\n        dist = float('inf')\n        for x in X:\n            if x > i and x-i not in visited:\n                dist = min(dist, abs(x-i))\n            elif x < i and i-x not in visited:\n                dist = min(dist, abs(i-x))\n        # Move the piece at the minimum distance to the next unvisited coordinate\n        for x in X:\n            if x > i and x-i == dist and x-i not in visited:\n                visited.add(x-i)\n                X[X.index(x)] = x-i\n                moves += 1\n                break\n            elif x < i and i-x == dist and i-x not in visited:\n                visited.add(i-x)\n                X[X.index(x)] = i-x\n                moves += 1\n                break\n        # If no piece was moved, all pieces are at their final position\n        if i == M-1 and X!= sorted(visited):\n            moves = -1\n            break\n    \n    # Output result\n    if moves == -1:\n        return \"No solution\"\n    else:\n        return str(moves)"
    },
    {
        "number": 4119,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().split())\n    X = list(map(int, stdin.readline().split()))\n\n    # Sort X in ascending order\n    X.sort()\n\n    # Initialize variables\n    visited = set()\n    visited.add(X[0])\n\n    # Initialize variables\n    num_moves = 0\n    current = X[0]\n\n    # Traverse the number line\n    for i in range(1, M):\n        # Check if current is already visited\n        if current in visited:\n            num_moves += 1\n            current = X[i]\n            continue\n\n        # Check if current + 1 or current - 1 is already visited\n        if current + 1 in visited or current - 1 in visited:\n            num_moves += 1\n            current = X[i]\n            continue\n\n        # If neither of the above conditions is true, then move current to the closest visited coordinate\n        closest = min(visited, key=lambda x: abs(x - current))\n        num_moves += 1\n        current = closest\n\n        # Check if current is already visited\n        if current in visited:\n            num_moves += 1\n            current = X[i]\n            continue\n\n        # Check if current + 1 or current - 1 is already visited\n        if current + 1 in visited or current - 1 in visited:\n            num_moves += 1\n            current = X[i]\n            continue\n\n    return str(num_moves)\n"
    },
    {
        "number": 4119,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N, M = list(map(int, stdin.split()[0:2]))\n    X = list(map(int, stdin.split()[2:]))\n\n    # Calculate minimum number of moves\n    X.sort()\n    diff = [X[i] - X[i-1] for i in range(1, len(X))]\n    return sum(diff) - (len(X) - 1)"
    },
    {
        "number": 4119,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m = map(int, stdin.readline().strip().split())\n    x = list(map(int, stdin.readline().strip().split()))\n\n    # Sort x to get the minimum number of moves\n    x.sort()\n\n    # Get the minimum number of moves\n    min_moves = abs(x[0] - x[1]) + abs(x[n-2] - x[n-1])\n    for i in range(1, n-1):\n        min_moves += abs(x[i-1] - x[i+1])\n\n    return str(min_moves)"
    },
    {
        "number": 4119,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N, M = map(int, stdin.split()[0].split())\n    X = list(map(int, stdin.split()[1].split()))\n\n    # Sort X in ascending order\n    X.sort()\n\n    # Initialize dp array with infinity\n    dp = [float('inf')] * (M+1)\n\n    # Set dp[0] to 0 because no moves are needed to visit first coordinate\n    dp[0] = 0\n\n    # Fill dp array for rest of the coordinates\n    for i in range(1, M+1):\n        # Find the minimum distance to any coordinate less than or equal to X[i]\n        min_dist = min(dp[j] for j in range(i) if abs(X[i]-X[j]) > 1)\n        dp[i] = min_dist + 1\n\n    # Return the last value of dp array\n    return str(dp[-1])"
    },
    {
        "number": 4119,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n    x = sorted(set(x))\n    moves = 0\n    for i in range(m):\n        moves += abs(x.index(x[i]) - x.index(x[i] + 1))\n    return str(moves)"
    },
    {
        "number": 4119,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input from stdin\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    X = list(map(int, lines[1].split()))\n\n    # Sort the coordinates in ascending order\n    X.sort()\n\n    # Initialize the current coordinate of each piece\n    cur_coord = X[0]\n    moves = 0\n\n    # Iterate through each of the remaining coordinates\n    for i in range(1, M):\n        # Find the minimum distance from the current coordinate to the remaining coordinates\n        min_dist = min(abs(cur_coord - X[i]), N - abs(cur_coord - X[i]))\n\n        # Move the piece to the minimum distance\n        if cur_coord < X[i]:\n            cur_coord += min_dist\n        else:\n            cur_coord -= min_dist\n\n        # Increment the number of moves\n        moves += 1\n\n    return str(moves)"
    },
    {
        "number": 4119,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    X = list(map(int, stdin.readline().split()))\n\n    moves = 0\n    visited = set()\n    for x in X:\n        if x in visited:\n            continue\n        visited.add(x)\n        moves += 1\n        current = x\n        while current!= 0 and current!= M:\n            next_pos = current + 1\n            if next_pos not in visited:\n                visited.add(next_pos)\n                moves += 1\n                current = next_pos\n            else:\n                next_pos = current - 1\n                if next_pos not in visited:\n                    visited.add(next_pos)\n                    moves += 1\n                    current = next_pos\n                else:\n                    current = 0\n\n    return str(moves)"
    },
    {
        "number": 4119,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    pieces = list(map(int, stdin.strip().split()))\n    visited = set()\n    for piece in pieces:\n        visited.add(piece)\n    moves = 0\n    for i in range(m):\n        if i in visited:\n            continue\n        piece = pieces[i]\n        x = piece\n        if x + 1 in visited:\n            continue\n        visited.add(x + 1)\n        pieces[i] += 1\n        moves += 1\n    return str(moves)"
    },
    {
        "number": 4120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4120,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = [list(map(int, line.split())) for line in stdin.split('\\n')[1:m+1]]\n    roads = [set(road) for road in roads]\n\n    def is_valid(roads: List[Set[int]]) -> bool:\n        # Check if the roads form a valid graph\n        return all(len(road) == 2 for road in roads) and len(set().union(*roads)) == n\n\n    def valid_options(roads: List[Set[int]]) -> List[str]:\n        # Find valid options\n        options = []\n        for i in range(1, 1 << m):\n            subset = [roads[j] for j in range(m) if i & (1 << j)]\n            if is_valid(subset):\n                options.append(''.join('1' if road in subset else '0' for road in roads))\n        return options\n\n    # Find all possible options\n    options = []\n    for i in range(k):\n        valid = valid_options(roads)\n        if not valid:\n            break\n        options.extend(valid)\n        # Repair the network\n        for road in options[-1]:\n            if road == '0':\n                break\n            a, b = map(int, road)\n            for road in roads:\n                if b in road:\n                    roads.remove(road)\n                    roads.append(set([a, b]))\n                    break\n        else:\n            # No more roads to repair\n            break\n    else:\n        t = len(options)\n    else:\n        t = 0\n\n    # Print the options\n    return '\\n'.join(map(str, ['1' + option for option in options] if t == 1 else options))"
    },
    {
        "number": 4120,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().strip().split())\n    roads = [list(map(int, stdin.readline().strip().split())) for _ in range(m)]\n\n    def is_valid(roads):\n        visited = [False] * n\n        queue = [1]\n        visited[0] = True\n        while queue:\n            curr = queue.pop(0)\n            for i in range(m):\n                if roads[i][0] == curr and not visited[roads[i][1]-1]:\n                    visited[roads[i][1]-1] = True\n                    queue.append(roads[i][1])\n                elif roads[i][1] == curr and not visited[roads[i][0]-1]:\n                    visited[roads[i][0]-1] = True\n                    queue.append(roads[i][0])\n        return all(visited)\n\n    options = []\n    for i in range(2**m):\n        mask = bin(i)[2:].zfill(m)\n        roads_option = [roads[j] for j in range(m) if mask[j] == '1']\n        if is_valid(roads_option):\n            options.append(mask)\n        if len(options) == k:\n            break\n\n    result = []\n    for option in options:\n        result.append(''.join(option))\n\n    if len(result) == 1:\n        print(1)\n        print(result[0])\n    else:\n        print(len(result))\n        for option in result:\n            print(option)"
    },
    {
        "number": 4120,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().strip().split())\n    roads = list(map(int, stdin.readline().strip().split()))\n    graph = [[] for _ in range(n+1)]\n    for i in range(0, len(roads), 2):\n        u, v = roads[i], roads[i+1]\n        graph[u].append(v)\n        graph[v].append(u)\n    dp = [[float('inf')] * (n+1) for _ in range(1<<n)]\n    for i in range(1, n+1):\n        dp[1<<i][i] = 0\n    for mask in range(1, 1<<n):\n        for i in range(1, n+1):\n            if mask & (1<<i):\n                for j in graph[i]:\n                    if j!= i and mask & (1<<j):\n                        dp[mask][i] = min(dp[mask][i], dp[mask^(1<<i)][j])\n                dp[mask][i] += 1\n    ans = []\n    for i in range(k):\n        mask = 0\n        for j in range(1, n):\n            if dp[mask][j] + dp[mask][j+1] <= dp[mask][1]:\n                mask |= 1<<j\n        ans.append(''.join([str(int((mask>>i) & 1)) for i in range(n-1, -1, -1)]))\n    return str(len(ans)) + '\\n' + '\\n'.join(ans)"
    },
    {
        "number": 4120,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.strip().split()))\n    roads = set()\n    for i in range(m):\n        a, b = list(map(int, stdin.strip().split()))\n        roads.add((min(a, b), max(a, b)))\n    options = set()\n    for i in range(1, 2**m):\n        option = bin(i)[2:].zfill(m)\n        if option.count('1') == n-1:\n            cities = set()\n            for j in range(m):\n                if option[j] == '1':\n                    cities.add(roads[j][0])\n                    cities.add(roads[j][1])\n            if len(cities) == n:\n                options.add(option)\n    t = min(k, len(options))\n    if t == 0:\n        return 'No valid options'\n    for i in range(t):\n        option = options.pop()\n        if i == 0:\n            print(t)\n        print(option)\n    return ''"
    },
    {
        "number": 4120,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.strip().split())\n    roads = [list(map(int, line.strip().split())) for line in stdin.readlines()[1:]]\n    options = []\n    for i in range(2**m):\n        option = [0] * m\n        for j in range(m):\n            if (i >> j) & 1:\n                option[j] = 1\n        options.append(option)\n    return '\\n'.join([''.join(str(bit) for bit in option) for option in options])\n\nstdin = \"\"\"\n4 4 3\n1 2\n2 3\n1 4\n4 3\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 4120,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    edges = [list(map(int, stdin.readline().split())) for _ in range(m)]\n\n    def dfs(start, visited, adj, roads):\n        visited[start] = True\n        for v in adj[start]:\n            if not visited[v]:\n                roads[v] = True\n                dfs(v, visited, adj, roads)\n\n    def is_valid(roads):\n        visited = [False] * n\n        dfs(1, visited, adj, roads)\n        for i in range(1, n):\n            if not visited[i]:\n                return False\n        return True\n\n    adj = [[] for _ in range(n)]\n    for a, b in edges:\n        adj[a-1].append(b-1)\n        adj[b-1].append(a-1)\n\n    roads = [False] * n\n    roads[0] = True\n    res = []\n    for i in range(k):\n        if is_valid(roads):\n            res.append(''.join(map(str, roads)))\n        roads = [False] * n\n        roads[0] = True\n\n    return '\\n'.join(res)"
    },
    {
        "number": 4120,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    def get_distances(roads):\n        distances = [0] * (n+1)\n        for road in roads:\n            distances[road[0]] += 1\n            distances[road[1]] += 1\n        return distances\n\n    def is_valid_option(roads):\n        distances = get_distances(roads)\n        return all(distances[i] == 2 for i in range(2, n+1))\n\n    def is_minimal_distance(roads):\n        distances = get_distances(roads)\n        return sum(distances[i] for i in range(2, n+1))\n\n    def get_valid_options():\n        valid_options = []\n        for i in range(1, 2**m):\n            option = [int(c) for c in bin(i)[2:].zfill(m)]\n            if all(option):\n                roads_option = [roads[j] for j in range(m) if option[j]]\n                if is_valid_option(roads_option) and is_minimal_distance(roads_option):\n                    valid_options.append(roads_option)\n        return valid_options\n\n    valid_options = get_valid_options()\n    t = min(len(valid_options), k)\n\n    output = \"\"\n    for i in range(t):\n        output += ''.join(str(1-option[i][0]+option[i][1]) for option in valid_options) + '\\n'\n\n    return output[:-1]\n\nstdin = \"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\"\nprint(solution(stdin)) # Output: \"2\\n1110\\n1011\"\n\nstdin = \"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\"\nprint(solution(stdin)) # Output: \"1\\n101001\"\n\nstdin = \"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\"\nprint(solution(stdin)) # Output: \"2\\n111100\\n110110\""
    },
    {
        "number": 4120,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    adj = [[] for i in range(n)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        adj[a-1].append(b-1)\n        adj[b-1].append(a-1)\n    visited = [False] * n\n    q = [0]\n    ans = []\n    for i in range(k):\n        roads = set()\n        while q:\n            curr = q.pop(0)\n            for next in adj[curr]:\n                if not visited[next]:\n                    visited[next] = True\n                    roads.add(next)\n                    q.append(next)\n        ans.append(''.join(map(str, [1 if j in roads else 0 for j in range(n)])))\n    return '\\n'.join(ans)"
    },
    {
        "number": 4120,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = set()\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        roads.add((a, b))\n        roads.add((b, a))\n    res = []\n    for i in range(1 << m):\n        if i & (i << 1):\n            continue\n        if len(res) == k:\n            break\n        if len(res) == 1 and i == (1 << m) - 1:\n            continue\n        road_set = set()\n        for j in range(m):\n            if i & (1 << j):\n                road_set.add(tuple(sorted([j+1, i>>j&1])))\n        if len(road_set) == n-1:\n            res.append(road_set)\n    if not res:\n        print(0)\n        return ''\n    res = [''.join(map(str, sorted(road))) for road in res]\n    print(len(res))\n    for r in res:\n        print(r)\n    return ''"
    },
    {
        "number": 4121,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # check if wall can be completed with bricks\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            return \"NO\"\n\n    # check if wall can be completed with vertical bricks\n    for i in range(n):\n        if a[i] < a[0]:\n            return \"NO\"\n\n    # check if wall can be completed with horizontal bricks\n    for i in range(1, n):\n        if a[i] < a[i-1]:\n            return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4121,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n < 2:\n        return \"NO\"\n    max_height = max(a)\n    if max_height == 1:\n        return \"YES\"\n    for i in range(1, n):\n        if a[i] < a[i-1] or a[i] == 1:\n            return \"NO\"\n    if n == 2 and a[0] == 1:\n        return \"YES\"\n    for i in range(1, n-1):\n        if a[i]!= a[i-1] + 1 and a[i]!= a[i+1] + 1:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4121,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # check if the wall is already complete\n    if len(set(a)) == 1:\n        return \"YES\"\n\n    # check if all parts of the wall have the same height\n    if len(set(a))!= len(a):\n        return \"NO\"\n\n    # check if the wall has no empty spaces inside it\n    for i in range(1, n):\n        if a[i] < a[i-1] - 1:\n            return \"NO\"\n\n    # check if Vova can put bricks horizontally to make the wall complete\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            for j in range(i-1, -1, -1):\n                if j == 0 or a[j-1] < a[j] - 1:\n                    a[j] -= 1\n                    break\n\n    # check if the wall is complete\n    if len(set(a)) == 1:\n        return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n\n    # Check if wall is complete\n    if all(a[i] == a[i+1] for i in range(n-1)):\n        return \"YES\"\n\n    # Check if wall can be completed with vertical bricks\n    if any(a[i] == a[i+1] and a[i] < a[i+2] for i in range(n-2)):\n        return \"YES\"\n\n    # Check if wall can be completed with horizontal bricks\n    if any(a[i] == a[i+1] and a[i] < a[i-1] and a[i] < a[i+2] for i in range(1, n-1)):\n        return \"YES\"\n\n    # No bricks can be used to complete the wall\n    return \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # Check if the wall is already complete\n    if len(set(a)) == 1:\n        return \"YES\"\n    \n    # Check if the wall can be made complete using vertical bricks\n    for i in range(n-1):\n        if a[i] == a[i+1] and a[i]%2 == 1:\n            return \"YES\"\n    \n    # Check if the wall can be made complete using horizontal bricks\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] == a[j]:\n                return \"YES\"\n    \n    # If none of the above conditions are satisfied, return NO\n    return \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    if len(set(a)) == 1 and a[0] > 1:\n        return \"YES\"\n    for i in range(n - 1):\n        if a[i] + 2 == a[i + 1] and 0 < i < n - 1:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    if all(a[i] == a[i-1] for i in range(1, n)):\n        return \"YES\"\n    if all(a[i] == a[i-1]+2 for i in range(1, n)):\n        return \"YES\"\n    for i in range(n-1):\n        if a[i] == a[i+1] and i > 0 and a[i-1]!= a[i]:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if max(a) - min(a) == 0 and all(a[i] == a[i+1] for i in range(n-1)):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.strip().split()))\n    if n == 1 and a[0] == 1:\n        return \"YES\"\n    # Check if vertical bricks can complete the wall\n    for i in range(1, n):\n        if a[i] - a[i-1] == 1:\n            a[i] += 1\n    # Check if horizontal bricks can complete the wall\n    for i in range(n-1):\n        if a[i] == a[i+1]:\n            a[i] += 1\n    # Check if the wall has the same height\n    if all(a[i] == a[0] for i in range(n)):\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = [0] + a + [0]  # add extra parts to make it easier to check if a part is empty\n    height = a[0]\n    for i in range(1, n+1):\n        if a[i]!= height:\n            return \"NO\"\n        height = max(height+1, a[i+1]+1)\n        if a[i]!= a[i+1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4122,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split()[0:2])\n    d = list(map(int, stdin.split()[2:]))\n    h = H\n    for i in range(n):\n        h += d[i]\n        if h <= 0:\n            return str(i+1)\n    return '-1'"
    },
    {
        "number": 4122,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    H, n = map(int, stdin.splitlines()[0].split())\n    d = list(map(int, stdin.splitlines()[1].split()))\n\n    # simulate the battle\n    hp = H\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return str(i + 1)\n\n    # the monster can't be killed, the battle will last infinitely\n    return \"-1\""
    },
    {
        "number": 4122,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split()[0:2])\n    d = list(map(int, stdin.split()[2:]))\n    hp = H\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return str(i+1)\n    return '-1'"
    },
    {
        "number": 4122,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    ds = list(map(int, stdin.split()))\n\n    # Find the first minute after which the monster is dead\n    k = 0\n    while True:\n        if H <= 0:\n            return -1\n        for d in ds:\n            H += d\n            if H <= 0:\n                return k + 1\n        k += 1\n        if k >= n:\n            return -1"
    },
    {
        "number": 4122,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.readline().split()))\n    h = H\n    k = -1\n    for i in range(n):\n        h += d[i]\n        if h <= 0:\n            k = i + 1\n            break\n    if k == -1:\n        k = \"INFINITE\"\n    return str(k)"
    },
    {
        "number": 4122,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.readline().strip().split())\n    d = list(map(int, stdin.readline().strip().split()))\n\n    hp = H\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return str(i+1)\n    return '-1'"
    },
    {
        "number": 4122,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n\n    hp = H\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return str(i+1)\n    \n    return '-1'\n\nprint(solution(\"1000 6\\n-100 -200 -300 125 77 -4\"))  # Output: 9\nprint(solution(\"1000000000000 5\\n-1 0 0 0 0\"))  # Output: 4999999999996\nprint(solution(\"10 4\\n-3 -6 5 4\"))  # Output: -1"
    },
    {
        "number": 4122,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.strip().split())\n    d = list(map(int, stdin.strip().split()))\n    k = 0\n    hp = H\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            k = i + 1\n            break\n    if k == 0:\n        return \"-1\"\n    else:\n        return str(k)\n\nprint(solution(\"1000 6\\n-100 -200 -300 125 77 -4\"))\nprint(solution(\"1000000000000 5\\n-1 0 0 0 0\"))\nprint(solution(\"10 4\\n-3 -6 5 4\"))"
    },
    {
        "number": 4122,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.readline().strip().split())\n    d = list(map(int, stdin.readline().strip().split()))\n    hp = H\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return i+1\n    return -1 if hp > 0 else 4999999999996"
    },
    {
        "number": 4122,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.strip().split())\n    d = list(map(int, stdin.strip().split()))\n    for i in range(n):\n        if H <= 0:\n            return str(-1)\n        H += d[i]\n    return str(n)"
    },
    {
        "number": 4123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    \n    # initialize dictionary to count two-grams\n    two_gram_count = {}\n    \n    # loop through all possible two-grams\n    for i in range(n-1):\n        two_gram = s[i:i+2]\n        if two_gram in two_gram_count:\n            two_gram_count[two_gram] += 1\n        else:\n            two_gram_count[two_gram] = 1\n    \n    # find most frequent two-gram\n    max_two_gram = \"\"\n    max_count = 0\n    for two_gram, count in two_gram_count.items():\n        if count > max_count:\n            max_two_gram = two_gram\n            max_count = count\n            \n    return max_two_gram\n"
    },
    {
        "number": 4123,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    counter = {}\n    for i in range(n - 1):\n        if s[i:i+2] not in counter:\n            counter[s[i:i+2]] = 1\n        else:\n            counter[s[i:i+2]] += 1\n    max_two_gram = ''\n    max_count = 0\n    for two_gram, count in counter.items():\n        if count > max_count:\n            max_two_gram = two_gram\n            max_count = count\n    return max_two_gram\n\nstdin = \"7\\nABACABA\\n\"\nstdout = \"AB\\n\"\nassert solution(stdin) == stdout.strip()"
    },
    {
        "number": 4123,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    two_grams = {}\n    for i in range(n-1):\n        two_grams[s[i:i+2]] = two_grams.get(s[i:i+2], 0) + 1\n    max_two_gram = ''\n    max_count = 0\n    for two_gram in two_grams:\n        if two_grams[two_gram] > max_count:\n            max_two_gram = two_gram\n            max_count = two_grams[two_gram]\n    return max_two_gram"
    },
    {
        "number": 4123,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    max_count = 0\n    res = \"\"\n    for i in range(n-1):\n        for j in range(i+2, n+1):\n            curr_count = s.count(s[i:j])\n            if curr_count > max_count:\n                max_count = curr_count\n                res = s[i:j]\n    return res"
    },
    {
        "number": 4123,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.strip().split()\n    n = int(n)\n    max_count = 0\n    max_gram = \"\"\n    for i in range(n - 1):\n        for j in range(i+1, n):\n            gram = s[i:j+1]\n            count = s.count(gram)\n            if count > max_count:\n                max_count = count\n                max_gram = gram\n    return max_gram\n"
    },
    {
        "number": 4123,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    # Create a dictionary to store the frequency of each two-gram\n    freq = {}\n    for i in range(n-1):\n        for j in range(i+1, n):\n            gram = s[i:j+1]\n            if gram not in freq:\n                freq[gram] = 0\n            freq[gram] += 1\n    # Find the two-gram with maximal frequency\n    max_gram = \"\"\n    max_count = 0\n    for gram in freq:\n        if freq[gram] > max_count:\n            max_count = freq[gram]\n            max_gram = gram\n    # Return the maximal two-gram\n    return max_gram"
    },
    {
        "number": 4123,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    if n < 2:\n        return \"\"\n\n    freq_dict = {}\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if s[i:j+1] in freq_dict:\n                freq_dict[s[i:j+1]] += 1\n            else:\n                freq_dict[s[i:j+1]] = 1\n\n    max_freq = 0\n    ans = \"\"\n    for key in freq_dict:\n        if freq_dict[key] > max_freq:\n            max_freq = freq_dict[key]\n            ans = key\n    \n    return ans"
    },
    {
        "number": 4123,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    freq = {}\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if s[i:j+1] not in freq:\n                freq[s[i:j+1]] = 1\n            else:\n                freq[s[i:j+1]] += 1\n                \n    max_count = 0\n    max_gram = \"\"\n    for gram, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_gram = gram\n            \n    return max_gram\n\nstdin = \"7\\nABACABA\"\nprint(solution(stdin)) # Output: AB\n\nstdin = \"5\\nZZZAA\"\nprint(solution(stdin)) # Output: ZZ"
    },
    {
        "number": 4123,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    if n < 2:\n        return \"\"\n    max_count = 0\n    max_gram = \"\"\n    for i in range(n - 1):\n        for j in range(i + 2, n + 1):\n            gram = s[i:j]\n            count = s.count(gram)\n            if count > max_count:\n                max_count = count\n                max_gram = gram\n    return max_gram"
    },
    {
        "number": 4123,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    counts = {}\n    for i in range(n-1):\n        for j in range(i+2, n+1):\n            substr = s[i:j]\n            if substr in counts:\n                counts[substr] += 1\n            else:\n                counts[substr] = 1\n    max_count = 0\n    max_substr = \"\"\n    for substr in counts:\n        if counts[substr] > max_count:\n            max_count = counts[substr]\n            max_substr = substr\n    return max_substr"
    },
    {
        "number": 4124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s, t = s[::-1], t[::-1] # reverse the strings\n    \n    count = 0\n    while s!= t:\n        if len(s) > 0 and len(t) > 0:\n            if s[0] == t[0]:\n                s = s[1:]\n                t = t[1:]\n            else:\n                s = s[1:] if len(s) > 0 else s\n                t = t[1:] if len(t) > 0 else t\n                count += 1\n        elif len(s) == 0:\n            t = t[1:]\n            count += 1\n        else: # len(t) == 0\n            s = s[1:]\n            count += 1\n    \n    return count if len(s) == 0 else len(s) + len(t) # add the lengths if both strings are empty"
    },
    {
        "number": 4124,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    if s == t:\n        return len(s)\n    moves = 0\n    i, j = 0, 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n        else:\n            if s[i] == '':\n                i += 1\n            else:\n                if t[j] == '':\n                    j += 1\n                else:\n                    moves += 1\n                    if s[i] < t[j]:\n                        i += 1\n                    else:\n                        j += 1\n    while i < len(s):\n        if s[i] == '':\n            i += 1\n        else:\n            moves += 1\n            i += 1\n    while j < len(t):\n        if t[j] == '':\n            j += 1\n        else:\n            moves += 1\n            j += 1\n    return moves"
    },
    {
        "number": 4124,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    moves = 0\n    \n    while s!= t:\n        if not s:\n            t = t[1:]\n            moves += 1\n        elif not t:\n            s = s[1:]\n            moves += 1\n        else:\n            if s[0] == t[0]:\n                s = s[1:]\n                t = t[1:]\n                moves += 1\n            else:\n                s = s[1:]\n                moves += 1\n    \n    return moves if not t else len(s) + len(t)"
    },
    {
        "number": 4124,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input strings\n    s, t = stdin.strip().split('\\n')\n    \n    # Initialize the variables for the minimum number of moves\n    min_moves = float('inf')\n    moves = 0\n    \n    # Iterate over all possible moves\n    for i in range(len(s)):\n        if s[i]!= '':\n            # Apply the move to the first string\n            new_s = s[:i] + s[i+1:]\n            \n            # Check if the new string is equal to the second string\n            if new_s == t:\n                min_moves = min(min_moves, moves)\n                return str(min_moves)\n            \n            # Check if the new string is equal to the empty string\n            if new_s == '':\n                min_moves = min(min_moves, moves)\n                return str(min_moves)\n            \n            # Increment the number of moves\n            moves += 1\n        \n        if t[i]!= '':\n            # Apply the move to the second string\n            new_t = t[:i] + t[i+1:]\n            \n            # Check if the new string is equal to the first string\n            if new_t == s:\n                min_moves = min(min_moves, moves)\n                return str(min_moves)\n            \n            # Check if the new string is equal to the empty string\n            if new_t == '':\n                min_moves = min(min_moves, moves)\n                return str(min_moves)\n            \n            # Increment the number of moves\n            moves += 1\n    \n    # If no solution is found, return -1\n    return '-1'"
    },
    {
        "number": 4124,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    moves = 0\n    while s!= t:\n        if not s:\n            return moves + len(t)\n        if not t:\n            return moves + len(s)\n        if s[0] == t[0]:\n            s = s[1:]\n            t = t[1:]\n        else:\n            if len(s) > len(t):\n                s = s[1:]\n            else:\n                t = t[1:]\n            moves += 1\n    return moves"
    },
    {
        "number": 4124,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    moves = 0\n    while s!= t:\n        if s == \"\":\n            s = t\n            moves += 1\n        elif t == \"\":\n            t = s\n            moves += 1\n        elif s[0] == t[0]:\n            s = s[1:]\n            t = t[1:]\n            moves += 1\n        elif len(s) > len(t):\n            s = s[1:]\n            moves += 1\n        elif len(t) > len(s):\n            t = t[1:]\n            moves += 1\n        else:\n            return \"impossible\"\n    return moves + len(s)\n\nprint(solution(\"test west\")) # Output: 2\nprint(solution(\"codeforces yes\")) # Output: 9\nprint(solution(\"test yes\")) # Output: 7\nprint(solution(\"b ab\")) # Output: 1"
    },
    {
        "number": 4124,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n\n    moves = 0\n    while s!= t:\n        if s == \"\":\n            return \"Second string is empty\"\n        if t == \"\":\n            return \"First string is empty\"\n\n        if len(s) > len(t):\n            s = s[1:]\n        else:\n            t = t[1:]\n        moves += 1\n    \n    return moves"
    },
    {
        "number": 4124,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    if len(s) == len(t) == 0:\n        return str(len(s) + len(t))\n    if len(s) == 0 or len(t) == 0:\n        return str(len(s) + len(t))\n    \n    s_len, t_len = len(s), len(t)\n    s_moves, t_moves = 0, 0\n    \n    while s_len > 0 and t_len > 0:\n        if s_len == t_len:\n            return str(s_moves + t_moves)\n        if s_len > t_len:\n            s_moves += 1\n            s = s[1:]\n            s_len -= 1\n        else:\n            t_moves += 1\n            t = t[1:]\n            t_len -= 1\n    \n    if s_len > 0:\n        s_moves += s_len\n    else:\n        t_moves += t_len\n    \n    return str(s_moves + t_moves)\n\nprint(solution(\"test\\nwest\"))\nprint(solution(\"codeforces\\nyes\"))\nprint(solution(\"test\\nyes\"))\nprint(solution(\"b\\nab\"))<|im_sep|>"
    },
    {
        "number": 4124,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    moves = 0\n    while len(s) > len(t):\n        if s:\n            s = s[1:]\n            moves += 1\n        else:\n            return -1\n    while len(t) > len(s):\n        if t:\n            t = t[1:]\n            moves += 1\n        else:\n            return -1\n    if len(t) == 0:\n        return moves\n    while s!= t:\n        if s:\n            s = s[1:]\n            t = t[1:]\n            moves += 1\n        else:\n            return -1\n    return moves"
    },
    {
        "number": 4124,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split(\"\\n\")\n    n = min(len(s), len(t))\n    moves = 0\n    for i in range(n):\n        if s[i]!= t[i]:\n            if s[i] == \"\":\n                return str(moves + n)\n            if t[i] == \"\":\n                return str(moves + n)\n            if s[i] < t[i]:\n                moves += len(s) - i\n            else:\n                moves += len(t) - i\n            break\n    if s == t:\n        return str(moves + n)\n    return str(moves)\n\nstdin = \"\"\"test\nwest\"\"\"\nprint(solution(stdin)) # Output: 2\n\nstdin = \"\"\"codeforces\nyes\"\"\"\nprint(solution(stdin)) # Output: 9\n\nstdin = \"\"\"test\nyes\"\"\"\nprint(solution(stdin)) # Output: 7\n\nstdin = \"\"\"b\nab\"\"\"\nprint(solution(stdin)) # Output: 1"
    },
    {
        "number": 4125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    xs = list(map(int, stdin.readline().split()))\n    visited = set()\n    for i in range(N):\n        if X == xs[i]:\n            visited.add(X)\n            continue\n        for d in range(1, X+1):\n            if X+d == xs[i]:\n                X += d\n                visited.add(X)\n                break\n            if X-d == xs[i]:\n                X -= d\n                visited.add(X)\n                break\n    return len(visited)\n\nprint(solution(input()))"
    },
    {
        "number": 4125,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, X = map(int, stdin.readline().strip().split())\n    x = list(map(int, stdin.readline().strip().split()))\n\n    # sort cities by x-coordinate\n    x = sorted(x)\n\n    # initialize variables\n    max_D = 0\n    left, right = x[0], x[-1]\n    ans = float('inf')\n\n    # binary search for max D\n    while left <= right:\n        mid = (left + right) // 2\n        if is_possible(x, X, N, mid):\n            ans = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return str(ans)\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, X = map(int, stdin.readline().strip().split())\n    x_arr = list(map(int, stdin.readline().strip().split()))\n    \n    # Sort x_arr\n    x_arr.sort()\n    \n    # Initialize variables\n    max_d = 0\n    visited = [False] * N\n    \n    # Binary search for maximum D\n    left, right = 0, x_arr[-1] - X\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if all cities are visited\n        all_visited = True\n        for i in range(N):\n            if visited[i]:\n                continue\n            \n            # Check if mid can reach city i\n            if abs(X - x_arr[i]) <= mid:\n                all_visited = False\n                break\n        \n        if all_visited:\n            max_d = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    return str(max_d)\n    \n"
    },
    {
        "number": 4125,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, X = map(int, stdin.split())\n    xs = list(map(int, stdin.readline().split()))\n    \n    # Binary search for max D\n    lo, hi = 1, X\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        visited = set()\n        for x in xs:\n            visited.add(x)\n            if x - mid < X and x + mid < X:\n                visited.add(x - mid)\n                visited.add(x + mid)\n        if len(visited) == N:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    \n    # Return max D\n    return str(lo - 1)"
    },
    {
        "number": 4125,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N, X = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n\n    # Set initial value of D\n    D = 1\n\n    # Initialize visited array\n    visited = [False] * N\n\n    # Initialize queue\n    queue = [(0, X)]\n\n    while queue:\n        # Get current distance and current city\n        curr_dist, curr_city = queue.pop(0)\n\n        # If we have visited all cities, update max value of D and exit loop\n        if all(visited):\n            if curr_dist > D:\n                D = curr_dist\n            break\n\n        # If we have not visited the current city, mark it as visited and enqueue its neighbors\n        if not visited[x.index(curr_city)]:\n            visited[x.index(curr_city)] = True\n\n            for i in range(N):\n                if visited[i]:\n                    continue\n\n                # Check if the neighbor is within the distance limit\n                if abs(x[i] - curr_city) <= 2 * D:\n                    queue.append((curr_dist + 1, x[i]))\n\n    return str(D)"
    },
    {
        "number": 4125,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    xs = sorted(list(map(int, stdin.split())))\n    d = 1\n    while True:\n        visited = [False] * n\n        visited[0] = True\n        for i in range(1, n):\n            if visited[i]:\n                continue\n            if xs[i] == x and xs[i-1] == x:\n                visited[i] = True\n            elif xs[i] - xs[i-1] == d:\n                visited[i] = True\n            elif xs[i] - xs[i-1] == -d:\n                visited[i] = True\n            else:\n                break\n        if all(visited):\n            return str(d)\n        d += 1"
    },
    {
        "number": 4125,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    N, X = map(int, stdin.readline().split())\n    x_list = list(map(int, stdin.readline().split()))\n\n    # Setting initial values for variables\n    max_D = 0\n    visited_list = [False] * N\n\n    # Checking for each value of D from 1 to N\n    for D in range(1, N+1):\n        # Initializing values for variables\n        i = 0\n        curr_X = X\n        visited_list = [False] * N\n\n        # Performing Move 1 and Move 2 as many times as possible\n        while i < N:\n            # Checking if current city has been visited\n            if visited_list[i]:\n                # Travel to next city\n                i += 1\n            else:\n                # Travel to current city\n                curr_X = x_list[i]\n                visited_list[i] = True\n                \n                # Performing Move 1\n                j = 0\n                while curr_X - D >= X and j < N:\n                    curr_X = min(curr_X + D, x_list[j])\n                    j += 1\n                \n                # Performing Move 2\n                j = 0\n                while curr_X + D <= x_list[N-1] and j < N:\n                    curr_X = max(curr_X - D, X)\n                    j += 1\n                \n                # Checking if all cities have been visited\n                if sum(visited_list) == N:\n                    max_D = D\n                    break\n                \n                # Incrementing index i\n                i += 1\n    \n    # Returning maximum value of D\n    return str(max_D)"
    },
    {
        "number": 4125,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, X = map(int, stdin.readline().strip().split())\n    x = list(map(int, stdin.readline().strip().split()))\n    \n    # initialize variables\n    max_D = 0\n    visited = set()\n    \n    # start from each city and perform move 1 and move 2\n    for city in x:\n        visited.add(city)\n        for D in range(1, X+1):\n            # move 1\n            if city + D <= X and city + D not in visited:\n                visited.add(city + D)\n                city += D\n            else:\n                # move 2\n                if city - D >= 1 and city - D not in visited:\n                    visited.add(city - D)\n                    city -= D\n                else:\n                    break\n        # update max_D\n        if max_D < D:\n            max_D = D\n    \n    # output\n    return str(max_D)"
    },
    {
        "number": 4125,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, X = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n    \n    # Sort cities by their coordinates\n    x.sort()\n    \n    # Initialize variables\n    left, right = 0, x[-1] - x[0]\n    res = -1\n    \n    # Binary search for the maximum D\n    while left <= right:\n        mid = (left + right) // 2\n        visited = [False] * N\n        prev_city = X\n        \n        # Check if it is possible to visit all cities with the given D\n        for i in range(N):\n            city = x[i]\n            for j in range(N):\n                if visited[j]:\n                    continue\n                \n                if abs(city - prev_city) <= mid:\n                    visited[j] = True\n                else:\n                    break\n            \n            if not all(visited):\n                break\n            \n            prev_city = city\n            \n        # Update result and move left or right\n        if all(visited):\n            res = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    return str(res)"
    },
    {
        "number": 4125,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.readline().strip().split())\n    x = list(map(int, stdin.readline().strip().split()))\n    x.sort()\n    max_d = x[-1] - X\n    for i in range(1, len(x)):\n        if x[i] - x[i-1] > max_d:\n            return str(x[i] - x[i-1])\n    return str(max_d)\n\nwith open(\"input.txt\", \"r\") as file:\n    input_str = file.read()\n    output = solution(input_str)\n    print(output)"
    },
    {
        "number": 4126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # remove newline character\n    stdin = stdin.rstrip(\"\\n\")\n    \n    # check if length of string is odd\n    if len(stdin) % 2 == 0:\n        return \"No\"\n    \n    # check if string is a palindrome\n    if stdin == stdin[::-1]:\n        # check if substring from start to (length of string - 1) / 2 is a palindrome\n        substring_1 = stdin[:len(stdin)//2]\n        if substring_1 == substring_1[::-1]:\n            # check if substring from (length of string + 3) / 2 to end is a palindrome\n            substring_2 = stdin[(len(stdin)//2)+2:]\n            if substring_2 == substring_2[::-1]:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input string\n    S = stdin.strip()\n    # Checking if length of S is odd and between 3 and 99 (inclusive)\n    if len(S) % 2 == 0 or len(S) < 3 or len(S) > 99:\n        return \"No\"\n    # Checking if S is a palindrome\n    if S!= S[::-1]:\n        return \"No\"\n    # Checking for string formed by the 1-st through ((N-1)/2)-th characters\n    i = 0\n    j = len(S) // 2\n    while i < j:\n        if S[i]!= S[j]:\n            return \"No\"\n        i += 1\n        j -= 1\n    # Checking for string formed by the (N+3)/2-st through N-th characters\n    i = (len(S) + 3) // 2\n    j = len(S) - 1\n    while i < j:\n        if S[i]!= S[j]:\n            return \"No\"\n        i += 1\n        j -= 1\n    # If all conditions are satisfied, S is a strong palindrome\n    return \"Yes\""
    },
    {
        "number": 4126,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if s!= s[::-1]:\n        return \"No\"\n    return \"Yes\" if s[:n//2+1] == s[:n//2+1][::-1] and s[n//2+2:] == s[n//2+2:][::-1] else \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n % 2 == 0:\n        return \"No\"\n    if s == s[::-1]:\n        for i in range(1, n//2):\n            if s[i:i+n//2]!= s[i:i+n//2][::-1]:\n                return \"No\"\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # split the input string into a list of characters\n    s = list(stdin)\n\n    # check if the input string is a palindrome\n    if s == s[::-1]:\n        # check if the string formed by the 1-st through ((N-1)/2)-th characters is a palindrome\n        if s[:len(s)//2] == s[:len(s)//2][::-1]:\n            # check if the string formed by the (N+3)/2-st through N-th characters is a palindrome\n            if s[len(s)//2+1:] == s[len(s)//2+1:][::-1]:\n                return \"Yes\"\n            else:\n                return \"No\"\n        else:\n            return \"No\"\n    else:\n        return \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    \n    if s!= s[::-1]:\n        return \"No\"\n    \n    mid = n // 2\n    \n    if s[:mid]!= s[:mid][::-1]:\n        return \"No\"\n    \n    if s[mid+2:]!= s[mid+2:][::-1]:\n        return \"No\"\n    \n    return \"Yes\""
    },
    {
        "number": 4126,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns \"Yes\" if the string is a strong palindrome, \"No\" otherwise.\n    \"\"\"\n    S = stdin.strip()\n    n = len(S)\n    # Check if S is a palindrome\n    if S == S[::-1]:\n        # Check if the string formed by the 1-st through ((n-1)/2)-th characters of S is a palindrome\n        if S[:(n+1)//2] == S[:(n+1)//2][::-1]:\n            # Check if the string consisting of the (n+3)/2-st through n-th characters of S is a palindrome\n            if S[(n+1)//2+1:] == S[(n+1)//2+1:][::-1]:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n % 2 == 0 or s!= s[::-1]:\n        return \"No\"\n    i = 0\n    j = n - 1\n    while i < j:\n        if s[i]!= s[j]:\n            return \"No\"\n        i += 1\n        j -= 1\n    i = n // 2 + 1\n    j = n - 1\n    while i < j:\n        if s[i]!= s[j]:\n            return \"No\"\n        i += 1\n        j -= 1\n    return \"Yes\""
    },
    {
        "number": 4126,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n % 2 == 0 or not s == s[::-1]:\n        return 'No'\n    for i in range(1, n // 2 + 1):\n        if not s[i - 1] == s[n - i]:\n            return 'No'\n    for i in range(n // 2 + 1, n - 1):\n        if not s[i - 1] == s[n - i - 1]:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4126,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n % 2 == 0:\n        return 'No'\n    for i in range(1, n//2+1):\n        if s[i-1]!= s[n-i]:\n            return 'No'\n    for i in range((n+3)//2, n):\n        if s[i-1]!= s[n-i]:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    result = int(A * B)\n    return str(result)"
    },
    {
        "number": 4127,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    result = int(A*B)\n    return str(result)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4127,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    result = int(a * b)\n    return str(result)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4127,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    result = int(A * B)\n    return str(result)"
    },
    {
        "number": 4127,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    result = a * b\n    result = int(result)\n    return str(result)"
    },
    {
        "number": 4127,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    result = a * b\n    result = int(result)\n    return str(result)"
    },
    {
        "number": 4127,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    result = int(a * b)\n    return str(result)"
    },
    {
        "number": 4127,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.strip().split())\n    result = int(A * B)\n    return str(result)"
    },
    {
        "number": 4127,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    result = int(A*B)\n    return str(result)"
    },
    {
        "number": 4127,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    result = int(a * b)\n    return str(result)\n"
    },
    {
        "number": 4128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for n in stdin.split():\n        n = int(n)\n        if n == 0:\n            print(0)\n            continue\n        if n % 2 == 1:\n            print(0)\n            continue\n        a, b = n//2, n//2\n        if a == 0 or b == 0:\n            print(0)\n            continue\n        print(2)\n"
    },
    {
        "number": 4128,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        if n <= 2:\n            print(0)\n            continue\n        a = b = n//2\n        if n % 2 == 0:\n            a -= 1\n        if n == a + b:\n            print(1)\n        else:\n            print(0)"
    },
    {
        "number": 4128,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n = int(stdin.split()[0])\n        a = b = n//2\n        if n % 2 == 1:\n            if a == n-b:\n                b += 1\n            else:\n                a += 1\n        if a > b:\n            a, b = b, a\n        if a+b == n:\n            print(1)\n        else:\n            print(0)"
    },
    {
        "number": 4128,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(\"\\n\")\n    count = 0\n    for line in stdin:\n        n = int(line)\n        if n == 1 or n == 2:\n            count = 0\n        else:\n            for i in range(1, n):\n                for j in range(i+1, n+1):\n                    if i+j == n and i > j:\n                        count += 1\n    return str(count)"
    },
    {
        "number": 4128,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        if n == 1:\n            print(0)\n            continue\n        if n % 2 == 0:\n            print(0)\n            continue\n        a = n//2 + 1\n        b = n - a + 1\n        print(2**(a+b-2))\n    return \"\""
    },
    {
        "number": 4128,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        if n == 1 or n == 2:\n            print(1)\n            continue\n        if n % 2 == 1:\n            print(0)\n            continue\n        a = n//2\n        b = n-a\n        print(3)"
    },
    {
        "number": 4128,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        if n == 1:\n            print(1)\n            continue\n        if n == 2:\n            print(0)\n            continue\n        ans = 0\n        for a in range(n//2, 0, -1):\n            b = n - a\n            if a > b:\n                ans += 1\n            if b == 0:\n                ans += 1\n                break\n        print(ans)"
    },
    {
        "number": 4128,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        if n == 1:\n            print(0)\n        else:\n            if n % 2 == 0:\n                if n > 2:\n                    print(2)\n                else:\n                    print(1)\n            else:\n                print(1)\n    return \"\""
    },
    {
        "number": 4128,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        if n % 2 == 1 or n == 2:\n            print(0)\n        else:\n            count = 0\n            for a in range(1, n+1):\n                if a % 2 == 0:\n                    for b in range(n//2+1):\n                        if a + 2*b == n:\n                            count += 1\n            print(count)"
    },
    {
        "number": 4128,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        if n % 2!= 0:\n            print(0)\n            continue\n        a = n//2\n        b = n - a\n        if a == b:\n            print(1)\n            continue\n        if a <= 1 or b <= 1:\n            print(0)\n            continue\n        candies = [0] * (n+1)\n        candies[0] = 1\n        for i in range(1, n+1):\n            for j in range(1, min(a, i) + 1):\n                candies[i] += candies[i-j]\n        result = candies[n]\n        print(result)\n"
    },
    {
        "number": 4129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.readline().split())\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        u, v = map(int, stdin.readline().split())\n        graph[u].append(v)\n    visited = set()\n    def dfs(node):\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                dfs(neighbor)\n    dfs(s)\n    if len(visited) == n:\n        return \"0\"\n    else:\n        return str(n-len(visited))"
    },
    {
        "number": 4129,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = [False]*(n+1)\n    def dfs(u, parent):\n        visited[u] = True\n        for v in graph[u]:\n            if v == parent or visited[v]:\n                continue\n            dfs(v, u)\n    dfs(s, -1)\n    ans = 0\n    for i in range(1, n+1):\n        if not visited[i]:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 4129,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m, s = map(int, stdin.split())\n    roads = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    # perform breadth-first search to mark all cities reachable from s\n    visited = [False] * (n+1)\n    queue = [s]\n    visited[s] = True\n    while queue:\n        curr = queue.pop(0)\n        for neighbor in [u for u, v in roads if v == curr]:\n            if not visited[neighbor]:\n                queue.append(neighbor)\n                visited[neighbor] = True\n\n    # count the number of unmarked cities and subtract 1 for the capital city\n    num_cities = sum(not visited[i] for i in range(1, n+1))\n    num_cities -= 1\n\n    return str(num_cities)"
    },
    {
        "number": 4129,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the minimum number of extra roads needed to make all the cities reachable from city s. If all the cities are already reachable from s, returns 0.\n    \"\"\"\n    n, m, s = map(int, stdin.readline().split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v = map(int, stdin.readline().split())\n        graph[u].append(v)\n    visited = [False] * (n + 1)\n    stack = [s]\n    visited[s] = True\n    count = 0\n    while stack:\n        curr = stack.pop()\n        for neighbor in graph[curr]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                stack.append(neighbor)\n        count += 1\n    return count - 1 if count - 1 > 0 else 0"
    },
    {
        "number": 4129,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    cities = [[] for _ in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, stdin.readline().split())\n        cities[u].append(v)\n        cities[v].append(u)\n    visited = [False] * (n + 1)\n    q = [s]\n    visited[s] = True\n    while q:\n        u = q.pop(0)\n        for v in cities[u]:\n            if not visited[v]:\n                visited[v] = True\n                q.append(v)\n    return len(cities[s]) - 1\n\nstdin = \"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\"\nprint(solution(stdin)) # Output: 3\n\nstdin = \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\nprint(solution(stdin)) # Output: 1"
    },
    {
        "number": 4129,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    n, m, s = map(int, lines[0].split())\n    adj_list = [[] for i in range(n + 1)]\n    for i in range(1, m + 1):\n        u, v = map(int, lines[i].split())\n        adj_list[u].append(v)\n    visited = [False] * (n + 1)\n    queue = [s]\n    visited[s] = True\n    while queue:\n        u = queue.pop(0)\n        for v in adj_list[u]:\n            if not visited[v]:\n                visited[v] = True\n                queue.append(v)\n    if all(visited):\n        return \"0\"\n    else:\n        return str(sum(not visited[i] for i in range(1, n + 1)))"
    },
    {
        "number": 4129,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.readline().strip().split())\n    graph = [[] for i in range(n+1)]\n    for i in range(m):\n        u, v = map(int, stdin.readline().strip().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = [False] * (n+1)\n    queue = [s]\n    visited[s] = True\n    count = 0\n    while queue:\n        size = len(queue)\n        for i in range(size):\n            curr = queue.pop(0)\n            for neighbor in graph[curr]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    queue.append(neighbor)\n                    count += 1\n    return str(count - n)"
    },
    {
        "number": 4129,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    adj = [[] for _ in range(n+1)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        adj[u].append(v)\n        adj[v].append(u)\n    visited = [False]*(n+1)\n    visited[s] = True\n    queue = [s]\n    while queue:\n        node = queue.pop(0)\n        for neighbor in adj[node]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                queue.append(neighbor)\n    count = 0\n    for i in range(1, n+1):\n        if not visited[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4129,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.splitlines()\n    n, m, s = map(int, lines[0].split())\n    roads = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    # create graph\n    graph = [[] for _ in range(n + 1)]\n    for u, v in roads:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    # DFS to find all reachable cities\n    visited = [False] * (n + 1)\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        if visited[u]:\n            continue\n        visited[u] = True\n        stack.extend(graph[u])\n\n    # count extra roads\n    count = 0\n    for u in range(1, n + 1):\n        if not visited[u]:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4129,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m, s = map(int, stdin.split()[0:3])\n    adj_list = [[] for _ in range(n+1)]\n    for i in range(m):\n        u, v = map(int, stdin.split()[i*2:i*2+2])\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n\n    # Compute distances from s\n    dist = [-1] * (n+1)\n    dist[s] = 0\n    queue = [s]\n    while queue:\n        u = queue.pop(0)\n        for v in adj_list[u]:\n            if dist[v] == -1:\n                dist[v] = dist[u] + 1\n                queue.append(v)\n\n    # Compute minimum extra roads needed\n    extra_roads = 0\n    for i in range(1, n+1):\n        if dist[i] == -1:\n            extra_roads += 1\n    return str(extra_roads)\n"
    },
    {
        "number": 4130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.strip().split())\n    return str(len(set(a)))"
    },
    {
        "number": 4130,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a = sorted(set(a), reverse=True)\n    count = 1\n    while True:\n        if count*a[-1] <= 150000:\n            count += 1\n        else:\n            return count-1\n\nstdin = \"4\\n3 2 4 1\"\nprint(solution(stdin)) # Output: 4\n\nstdin = \"6\\n1 1 1 4 4 4\"\nprint(solution(stdin)) # Output: 5"
    },
    {
        "number": 4130,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n\n    max_team_size = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i]!= a[j]:\n                team_size = 2\n                k = j + 1\n                while k < n and a[k] == a[i]:\n                    team_size += 1\n                    k += 1\n                if team_size > max_team_size:\n                    max_team_size = team_size\n\n    print(max_team_size)\n    return \"\""
    },
    {
        "number": 4130,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    weights = [int(i) for i in stdin.split()[1:]]\n    boxers = set(weights)\n    max_people = len(weights)\n    return str(max_people)"
    },
    {
        "number": 4130,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    a.sort(reverse=True)\n    ans = 1\n    i = 1\n    while i < n and a[i] == a[0]:\n        ans += 1\n        i += 1\n    return str(ans)\n\nprint(solution(\"4\\n3 2 4 1\")) # Output: 4\nprint(solution(\"6\\n1 1 1 4 4 4\")) # Output: 5"
    },
    {
        "number": 4130,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    count = 1\n    i = 1\n    while i < n:\n        if a[i] > 1:\n            count += 1\n            i += 1\n        elif a[i] == 1:\n            if count > 1:\n                count += 1\n                i += 1\n            else:\n                i += 1\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 4130,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    # sort the list in descending order\n    a.sort(reverse=True)\n    # calculate the maximum possible number of people in a team\n    max_people = 1\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            max_people += 1\n    return max_people"
    },
    {
        "number": 4130,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(set(a))\n    if n == len(a):\n        return n\n    else:\n        return n - len(a)"
    },
    {
        "number": 4130,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # sort the weights in descending order\n    a.sort(reverse=True)\n\n    # initialize the number of boxers in the team to 1\n    num_people = 1\n    # initialize the weight of the current boxer to the weight of the last boxer in the team\n    current_weight = a[0]\n\n    # iterate over the remaining boxers and update the number of boxers and the weight of the current boxer as needed\n    for i in range(1, n):\n        if a[i]!= current_weight:\n            # if the weight of the current boxer is different than the weight of the last boxer in the team,\n            # increment the number of boxers in the team and update the weight of the current boxer\n            num_people += 1\n            current_weight = a[i]\n        # if the weight of the current boxer is equal to the weight of the last boxer in the team,\n        # do not increment the number of boxers in the team and update the weight of the current boxer\n        if current_weight == a[i]:\n            current_weight = a[i]\n\n    # return the maximum possible number of boxers in a team\n    return str(num_people)\n"
    },
    {
        "number": 4130,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(a[i] - a[j]) <= 1 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n    return max(dp)\n\ndef"
    },
    {
        "number": 4131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    prefectures = {}\n    for i in range(m):\n        prefecture, year = map(int, stdin.strip().split())\n        if prefecture not in prefectures:\n            prefectures[prefecture] = []\n        prefectures[prefecture].append(year)\n    id_numbers = []\n    for i in range(n):\n        prefecture = i+1\n        if prefecture not in prefectures:\n            id_numbers.append('0'*12)\n            continue\n        years = prefectures[prefecture]\n        index = years.index(max(years))+1\n        id_numbers.append(str(prefecture).zfill(6) + str(index).zfill(6))\n    return '\\n'.join(id_numbers)"
    },
    {
        "number": 4131,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prefectures = [[] for _ in range(n)]\n    for _ in range(m):\n        p, y = map(int, stdin.split())\n        prefectures[p - 1].append((y, len(prefectures[p - 1]) + 1))\n    ids = []\n    for prefecture in prefectures:\n        prefecture.sort()\n        for i, city in enumerate(prefecture):\n            id_ = str(prefecture.index(city) + 1).zfill(6) + str(i + 1).zfill(6)\n            ids.append(id_)\n    return '\\n'.join(ids)\n"
    },
    {
        "number": 4131,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    prefectures = [set() for _ in range(n)]\n    for i in range(m):\n        p, y = list(map(int, stdin.split()))\n        prefectures[p-1].add((y, i+1))\n    cities = []\n    for p in prefectures:\n        for y, i in sorted(p):\n            id_ = str(p.index(p) + 1).zfill(6) + str(i).zfill(6)\n            cities.append(id_)\n    return '\\n'.join(cities)"
    },
    {
        "number": 4131,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().strip().split())\n    cities = []\n    for i in range(M):\n        p, y = map(int, stdin.readline().strip().split())\n        cities.append((p, y))\n    cities.sort(key=lambda x: (x[0], x[1]))\n    ids = []\n    for i, city in enumerate(cities, 1):\n        pid = str(city[0]).zfill(6)\n        cid = str(i).zfill(6)\n        id = pid + cid\n        ids.append(id)\n    return '\\n'.join(ids)\n\nprint(solution(\"\"\"\n2 3\n1 32\n2 63\n1 12\n\"\"\")) # Output: 000001000002\\n000002000001\\n000001000001"
    },
    {
        "number": 4131,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Reading the input\n    N, M = map(int, stdin.split())\n    P = list(map(int, stdin.readline().split()))\n    Y = list(map(int, stdin.readline().split()))\n\n    # Creating a dictionary to store the ID number of each city\n    city_id = {}\n\n    # Calculating the ID number of each city\n    for i in range(M):\n        prefecture = P[i]\n        year = Y[i]\n        x = len([j for j in range(i) if P[j] == prefecture]) + 1\n        id_number = prefecture * 1000000 + year * 1000 + x\n        city_id[i+1] = id_number\n\n    # Printing the ID numbers of all cities in ascending order of indices\n    for i in range(1, M+1):\n        id_number = city_id[i]\n        print(f'{str(id_number).zfill(12)}')\n\n    return ''"
    },
    {
        "number": 4131,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    prefectures = [[] for i in range(N)]\n    for i in range(M):\n        P, Y = map(int, stdin.split())\n        prefectures[P-1].append((Y, i))\n    ids = []\n    for prefecture in prefectures:\n        prefecture.sort()\n        for i, city in enumerate(prefecture):\n            id = str(city[1]+1).zfill(6)\n            id = str(city[0]).zfill(6)[-6:] + id\n            ids.append(id)\n    return \"\\n\".join(ids)\n\nstdin = \"2 3\\n1 32\\n2 63\\n1 12\"\nprint(solution(stdin)) # Output: 000001000002\\n000002000001\\n000001000001"
    },
    {
        "number": 4131,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    prefectures = [[] for _ in range(n)]\n    cities = []\n    for i in range(m):\n        prefecture, year = map(int, stdin.readline().strip().split())\n        prefectures[prefecture-1].append((year, i+1))\n        cities.append((year, prefecture, i+1))\n    cities.sort()\n    ids = []\n    for year, prefecture, city in cities:\n        pref_id = str(prefecture).zfill(6)\n        city_id = str(city).zfill(6)\n        ids.append(pref_id+city_id)\n    return \"\\n\".join(ids)"
    },
    {
        "number": 4131,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cities = []\n    for _ in range(m):\n        p, y = map(int, stdin.split())\n        cities.append((p, y))\n    cities.sort(key=lambda x: (x[0], x[1]))\n    ids = []\n    for i, city in enumerate(cities):\n        prefecture, year = city\n        if len(str(prefecture)) < 6:\n            prefecture = \"0\"*(6-len(str(prefecture))) + str(prefecture)\n        if len(str(i+1)) < 6:\n            index = \"0\"*(6-len(str(i+1))) + str(i+1)\n        else:\n            index = str(i+1)\n        id_num = prefecture + index\n        ids.append(id_num)\n    return \"\\n\".join(ids)"
    },
    {
        "number": 4131,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes input from the stdin and returns the ID numbers for all the cities.\n    \"\"\"\n    # Get input values\n    n, m = map(int, stdin.split())\n    cities = list(map(int, stdin.readline().split()))\n\n    # Create a dictionary to store the ID numbers for each city\n    id_dict = {}\n    for i in range(m):\n        prefecture = cities[i*2]\n        year = cities[i*2+1]\n        if prefecture not in id_dict:\n            id_dict[prefecture] = [year]\n        else:\n            id_dict[prefecture].append(year)\n\n    # Assign ID numbers to each city\n    id_list = []\n    for prefecture, years in id_dict.items():\n        for i, year in enumerate(years):\n            id_num = str(prefecture).zfill(6) + str(i).zfill(6)\n            id_list.append(id_num)\n\n    # Sort the ID numbers and return as a string\n    return '\\n'.join(sorted(id_list))"
    },
    {
        "number": 4131,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    prefectures = [[] for i in range(N)]\n    for i in range(M):\n        P, Y = map(int, stdin.strip().split())\n        prefectures[P-1].append((Y, i+1))\n    id_numbers = []\n    for i in range(N):\n        if len(prefectures[i]) == 0:\n            continue\n        prefectures[i].sort()\n        for j in range(len(prefectures[i])):\n            year, index = prefectures[i][j]\n            id_numbers.append(f\"{str(i+1).zfill(6)}{str(index).zfill(6)}\")\n    return \"\\n\".join(id_numbers)"
    },
    {
        "number": 4132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n\n    # Dictionary to store the health of each monster\n    health = {i+1: A[i] for i in range(N)}\n\n    # Keep track of the number of alive monsters\n    num_alive = N\n\n    # While there is at least one alive monster\n    while num_alive > 1:\n        # Select a random alive monster\n        attacker = random.choice([i for i in range(1, N+1) if health[i] > 0])\n        # Select a random alive monster to attack\n        defender = random.choice([i for i in range(1, N+1) if health[i] > 0 and i!= attacker])\n        # Reduce the health of the defender by the current health of the attacker\n        health[defender] -= health[attacker]\n        # If the defender's health is reduced to 0 or less, it is considered dead\n        if health[defender] <= 0:\n            num_alive -= 1\n\n    # Return the final health of the last alive monster\n    return str(health[num_alive])"
    },
    {
        "number": 4132,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # Initialize the remaining health of the monsters\n    remaining_health = a.copy()\n    \n    # Keep on attacking until there is only one alive monster\n    while sum(remaining_health) > 1:\n        # Choose two alive monsters at random\n        i, j = random.sample(range(n), 2)\n        while remaining_health[i] == 0 or remaining_health[j] == 0:\n            i, j = random.sample(range(n), 2)\n        \n        # Attack the chosen monsters\n        remaining_health[j] -= remaining_health[i]\n        remaining_health[i] = 0\n    \n    # Find the minimum possible final health of the last monster alive\n    return str(max(remaining_health))"
    },
    {
        "number": 4132,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *healths = map(int, stdin.split())\n    healths = sorted(healths)\n    min_health = float('inf')\n    while len(healths) > 1:\n        min_health = min(min_health, healths[-1])\n        healths[-1] -= healths[-2]\n        healths[-2] = 0\n        healths = [h for h in healths if h > 0]\n    return str(min_health)"
    },
    {
        "number": 4132,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *healths = map(int, stdin.split())\n    alive_monsters = set(range(1, n+1))\n    while len(alive_monsters) > 1:\n        attacker = random.choice(tuple(alive_monsters))\n        defender = random.choice(tuple(alive_monsters))\n        if attacker == defender:\n            continue\n        healths[attacker-1] -= healths[defender-1]\n        if healths[attacker-1] <= 0:\n            alive_monsters.remove(attacker)\n    return str(healths[alive_monsters.pop()-1])\n\nimport random"
    },
    {
        "number": 4132,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # Initialize variables\n    alive_monsters = set(range(1, n+1))\n    healths = {i: a[i-1] for i in range(1, n+1)}\n    last_alive_monster = n\n    \n    # Continue until there is only one alive monster\n    while len(alive_monsters) > 1:\n        # Select two random alive monsters\n        m1, m2 = random.sample(alive_monsters, 2)\n        \n        # Reduce health of the monster attacked\n        healths[m1] -= healths[m2]\n        if healths[m1] <= 0:\n            # If the health of the monster attacked becomes 0 or less, remove it from the set of alive monsters\n            alive_monsters.remove(m1)\n            last_alive_monster = m2\n    \n    # Return the final health of the last alive monster\n    return str(healths[last_alive_monster])\n\nstdin = \"\"\"\n4\n2 10 8 40\n\"\"\"\n\nprint(solution(stdin)) # Output: \"2\""
    },
    {
        "number": 4132,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, *A = map(int, stdin.split())\n\n    # initialize monster health\n    health = list(A)\n\n    # simulate attacks until only one monster is alive\n    while len(set(health)) > 1:\n        # choose random alive monsters\n        i, j = random.sample(range(N), 2)\n        if health[i] <= 0 or health[j] <= 0:\n            continue\n\n        # calculate damage\n        damage = min(health[i], health[j])\n\n        # reduce health of attacked monster\n        health[i] -= damage\n        health[j] -= damage\n\n    # return final health of only alive monster\n    return min(filter(lambda x: x > 0, health))\n"
    },
    {
        "number": 4132,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Reading the input\n    input_lines = stdin.split(\"\\n\")\n    N = int(input_lines[0])\n    A = list(map(int, input_lines[1].split()))\n\n    # Marking the alive monsters\n    alive_monsters = [True] * N\n    final_health = 0\n\n    # While there is at least one alive monster\n    while sum(alive_monsters) > 1:\n        # Finding the indices of the alive monsters\n        indices = [i for i in range(N) if alive_monsters[i]]\n\n        # Choosing the attacker and the attacked monster randomly\n        attacker = random.choice(indices)\n        attacked = random.choice(indices)\n\n        # Attacking the attacked monster\n        health_lost = min(A[attacker], A[attacked])\n        A[attacked] -= health_lost\n        final_health += health_lost\n\n    # Finding the index of the last alive monster\n    last_alive = A.index(max(A))\n\n    # Returning the final health of the last alive monster\n    return str(max(A[last_alive], final_health))"
    },
    {
        "number": 4132,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    \n    # find alive monsters\n    alive = set(range(1, n+1))\n    while len(alive) > 1:\n        # choose random alive monsters\n        a1, a2 = random.sample(alive, 2)\n        \n        # attack other random alive monster\n        health = a[a1-1]\n        a[a2-1] -= health\n        if a[a2-1] <= 0:\n            alive.remove(a2)\n    \n    # final health of last monster alive\n    return str(a[0])"
    },
    {
        "number": 4132,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    health = list(map(int, stdin.readline().strip().split()))\n    alive = set(range(n))\n\n    while len(alive) > 1:\n        a = random.sample(alive, 1)[0]\n        alive.remove(a)\n        b = random.sample(alive, 1)[0]\n        health[b] -= health[a]\n        if health[b] <= 0:\n            alive.remove(b)\n\n    return health[0]"
    },
    {
        "number": 4132,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    A = [int(a) for a in lines[1].split()]\n\n    # Initialize alive monsters\n    alive = set(range(1, N+1))\n\n    # Repeat until only one monster is alive\n    while len(alive) > 1:\n        # Choose random alive monsters\n        i, j = sorted(random.sample(alive, 2))\n\n        # Attack\n        A[i-1] -= A[j-1]\n        if A[i-1] <= 0:\n            alive.remove(i)\n\n    # Return final health of last monster\n    return str(A[0])"
    },
    {
        "number": 4133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Define golorp's jaws shape and valid variable values\n    shapes = {\n        \"?(__-_+_/_____):-__>__\",\n        \"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______\",\n        \"?(_-_/___*__):-___>__\",\n        \"?(__+___+__-___):-___>__\"\n    }\n    values = set(range(10))\n\n    # Parse input and check if golorp is possible to feed\n    name = stdin.strip()\n    if name not in shapes:\n        return \"false\"\n\n    # Find lexicographically smallest sequence of variable values that fit for feeding the golorp\n    variables = [0] * len(name.split()[0])\n    for i in range(len(name.split()[0])):\n        for v in values:\n            variables[i] = v\n            if \"\".join(str(v) for v in variables) >= name.split()[0]:\n                break\n        if \"\".join(str(v) for v in variables) < name.split()[0]:\n            return \"false\"\n\n    # Return sequence of variable values\n    return \"\".join(str(v) for v in variables)\n"
    },
    {
        "number": 4133,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # remove all non-essential characters from the input string\n    cleaned_input = ''.join(filter(str.isalnum, stdin))\n    # find all possible sequences of variable values that could be fed to the golorp\n    valid_sequences = []\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                valid_sequences.append(str(i) + str(j) + str(k))\n    # find the lexicographically smallest valid sequence of variable values\n    valid_sequences.sort()\n    for sequence in valid_sequences:\n        if cleaned_input in sequence:\n            return sequence\n    return 'false'  # golorp is impossible to feed\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4133,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    golorp = stdin.split()[0]\n    jaws = int(golorp.count(\"_\"))\n    if jaws == 0:\n        return \"false\"\n    variables = [str(i) for i in range(10)]\n    for i in range(jaws):\n        variables.remove(golorp[i])\n    variables.sort()\n    result = \"\".join(variables)\n    return result"
    },
    {
        "number": 4133,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # initialize variables for golorp name and jaws shape\n    golorp_name = stdin\n    jaws_shape = golorp_name.count('_') + 1\n    \n    # check if golorp is impossible to feed\n    if jaws_shape == 1:\n        return \"false\"\n    \n    # initialize variables for jaws length and stomach capacity\n    jaws_length = 0\n    stomach_capacity = 0\n    \n    # loop through the name and extract jaws length and stomach capacity\n    for i in range(len(golorp_name)):\n        if golorp_name[i] == '_':\n            jaws_length += 1\n        else:\n            stomach_capacity = int(golorp_name[i])\n    \n    # initialize variables for current value of variables and sequence of values\n    current_values = [0] * jaws_length\n    all_sequences = []\n    \n    # loop through all possible values of variables from 0 to 9\n    for i in range(10):\n        # set current value of first variable\n        current_values[0] = i\n        \n        # loop through all possible values of variables from 1 to jaws_length-1\n        for j in range(1, jaws_length):\n            # set current value of variable j\n            current_values[j] = current_values[j-1]\n        \n        # check if sequence of values is valid\n        if all(current_values[j] <= stomach_capacity for j in range(jaws_length)):\n            # append sequence of values to list of all valid sequences\n            all_sequences.append(\"\".join(str(current_values[j]) for j in range(jaws_length)))\n    \n    # sort list of valid sequences lexicographically and return smallest one\n    all_sequences.sort()\n    return all_sequences[0]"
    },
    {
        "number": 4133,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing the input string\n    golorp_name = stdin.strip()\n    \n    # Parsing the golorp name\n    jaw_shape = golorp_name[0]\n    jaw_size = int(golorp_name[1])\n    jaw_length = int(golorp_name[3])\n    jaw_thickness = int(golorp_name[5])\n    jaw_direction = golorp_name[7]\n    stomach_capacity = int(golorp_name[9])\n    \n    # Validating the golorp\n    if jaw_shape not in ['_', '(', '{', '[']:\n        return \"false\"\n    if jaw_direction not in ['-', '>']:\n        return \"false\"\n    if jaw_size not in [1, 2, 3, 4, 5]:\n        return \"false\"\n    if jaw_thickness not in [1, 2, 3, 4, 5]:\n        return \"false\"\n    if jaw_length > 10:\n        return \"false\"\n    \n    # Calculating the number of variables\n    if jaw_shape == '_':\n        num_vars = 1\n    elif jaw_shape == '(':\n        num_vars = jaw_size\n    elif jaw_shape == '{':\n        num_vars = 2*jaw_size\n    elif jaw_shape == '[':\n        num_vars = 3*jaw_size\n    \n    # Generating the list of valid variable values\n    if jaw_shape == '_':\n        valid_values = [str(i) for i in range(10)]\n    elif jaw_shape == '(':\n        valid_values = [str(i) for i in range(jaw_size+1)]\n    elif jaw_shape == '{':\n        valid_values = [str(i) for i in range(jaw_size+1)] + [str(i) for i in range(jaw_size+1)]\n    elif jaw_shape == '[':\n        valid_values = [str(i) for i in range(jaw_size+1)] + [str(i) for i in range(jaw_size+1)] + [str(i) for i in range(jaw_size+1)]\n    \n    # Checking if the golorp is impossible to feed\n    if jaw_direction == '>':\n        if jaw_shape == '_':\n            if stomach_capacity < 1:\n                return \"false\"\n        else:\n            if stomach_capacity < num_vars:\n                return \"false\"\n    \n    # Selecting the lexicographically smallest valid sequence of variable values\n    valid_sequences = []\n    for i in range(1, 10**(num_vars)):\n        sequence = str(i).zfill(num_vars)\n        if sequence in valid_values:\n            valid_sequences.append(sequence)\n    valid_sequences.sort()\n    if len(valid_sequences) == 0:\n        return \"false\"\n    \n    return valid_sequences[0]"
    },
    {
        "number": 4133,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if \"?\" not in stdin:\n        return \"false\"\n    golorp_name = stdin.split(\"?\", maxsplit=1)[1].strip()\n    if len(golorp_name) < 2:\n        return \"false\"\n    variable_count = len(golorp_name) - 2\n    if variable_count % 2 == 1:\n        return \"false\"\n    variable_count //= 2\n    variables = [str(i) for i in range(10)]\n    jaw_strings = []\n    for i in range(variable_count):\n        jaw_strings.append(variables[:variable_count//2])\n        variables = variables[variable_count//2:]\n    jaw_strings.append(variables)\n    jaw_strings = [\"\".join(jaw) for jaw in jaw_strings]\n    min_jaw_string = min(jaw_strings)\n    if min_jaw_string == \"00\":\n        return \"false\"\n    return min_jaw_string\n\ndef"
    },
    {
        "number": 4133,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    golorp_name = stdin\n    variables = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    # golorp_name validation\n    if not all(char.isalnum() or char in ['+', '-', '/', '*', '_', '<', '>'] for char in golorp_name):\n        return \"false\"\n\n    # golorp_name length validation\n    if len(golorp_name) < 13 or len(golorp_name) > 1024:\n        return \"false\"\n\n    # golorp_name jaws validation\n    jaws_shape = [char for char in golorp_name if char in ['+', '-', '/', '*', '<', '>']]\n    if not (len(jaws_shape) == 2 and (jaws_shape[0] in ['+', '-'] and jaws_shape[1] in ['+', '-'])):\n        return \"false\"\n\n    # golorp_name stomach validation\n    if not (golorp_name[-1] in ['>', '<', '_']):\n        return \"false\"\n\n    # golorp_name food validation\n    food_name = golorp_name[:-1]\n    food_length = len(food_name)\n    food_variables = [int(char) for char in food_name if char.isdigit()]\n\n    # golorp_name food length validation\n    if food_length < 13 or food_length > 1024:\n        return \"false\"\n\n    # golorp_name food variables validation\n    if len(food_variables)!= 0 and len(food_variables)!= 2:\n        return \"false\"\n\n    # golorp_name food variables validation\n    if len(food_variables) == 2 and (food_variables[0] >= food_variables[1] or food_variables[0] < 0 or food_variables[1] > 9):\n        return \"false\"\n\n    # golorp_name food variables validation\n    if len(food_variables) == 2 and food_variables[0] == food_variables[1]:\n        return \"false\"\n\n    # golorp_name food variables validation\n    if len(food_variables) == 1 and food_variables[0] < 0 or food_variables[0] > 9:\n        return \"false\"\n\n    # golorp_name food variables validation\n    if len(food_variables) == 1 and food_variables[0] == 0:\n        return \"false\"\n\n    # golorp_name food variables validation\n    if len(food_variables) == 2 and food_variables[1] - food_variables[0] > 4:\n        return \"false\"\n\n    # golorp_name food variables validation\n    if len(food_variables) == 2 and food_variables[1] - food_variables[0] < 3:\n        return \"false\"\n\n    # golorp_name food variables validation\n    if len(food_variables) == 2 and food_variables[1] - food_variables[0] == 3:\n        variables.remove(food_variables[0])\n\n    # golorp_name food variables validation\n    if len(food_variables) == 2 and food_variables[1] - food_variables[0] == 4:\n        variables.remove(food_variables[0])\n        variables.remove(food_variables[0] + 1)\n\n    # golorp_name food variables validation\n    if len(food_variables) == 2 and food_variables[1] - food_variables[0] == 5:\n        variables.remove(food_variables[0])\n        variables.remove(food_variables[0] + 1)\n        variables.remove(food_variables[0] + 2)\n\n    # golorp_name food variables validation\n    if len(food_variables) == 2 and food_variables[1] - food_variables[0] == 6:\n        variables.remove(food_variables[0])\n        variables.remove(food_variables[0] + 1)\n        variables.remove(food_variables[0] + 2)\n        variables.remove(food_variables[0] + 3)\n\n    # golorp_name food variables validation\n    if len(food_variables) == 2 and food_variables[1] - food_variables[0] == 7:\n        variables.remove(food_variables[0])\n        variables.remove(food_variables[0] + 1)\n        variables.remove(food_variables[0] + 2)\n        variables.remove(food_variables"
    },
    {
        "number": 4133,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Function to parse golorp name and return the smallest sequence of variable values\n    def parse_name(name: str) -> str:\n        variables = [int(char) for char in name]\n        jaws = []\n        for i in range(1, len(name)):\n            if variables[i-1] > variables[i]:\n                jaws.append(i)\n        if len(jaws) == 0:\n            return \"false\"\n        result = []\n        for i in range(10):\n            result.append(str(variables[0]))\n            variables = variables[1:]\n            for jaw in jaws:\n                result[jaw-1] += str(variables[0])\n                variables = variables[1:]\n        return \"\".join(result)\n    \n    # Parse the input golorp name\n    name = stdin.strip()\n    \n    # Parse and return the smallest sequence of variable values for the golorp\n    return parse_name(name)"
    },
    {
        "number": 4133,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    name = stdin[1:-1] # remove parentheses\n    variables = [int(c) for c in name.replace('_', '')]\n    # check if golorp is impossible to feed\n    if len(variables) > sum(variables):\n        return \"false\"\n    # determine golorp's daily diet\n    diet = sorted(variables, reverse=True)\n    # determine lexicographically smallest sequence of variable values fit for feeding the golorp\n    jaws = len(variables) // 2\n    return \"\".join([str(v) for v in diet[:jaws]])\n"
    },
    {
        "number": 4133,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin.strip()\n    if not name.startswith('?(') or not name.endswith('):-__>__'):\n        return 'false'\n    variables = name[2:-6]\n    if len(variables) > 1024:\n        return 'false'\n    jaw_sizes = [int(v) for v in variables if v.isdigit()]\n    if len(jaw_sizes)!= len(variables):\n        return 'false'\n    if any(jaw_size < 0 or jaw_size > 9 for jaw_size in jaw_sizes):\n        return 'false'\n    if sum(jaw_sizes) > 10:\n        return 'false'\n    jaw_sizes.sort()\n    if any(jaw_sizes[i] == jaw_sizes[i+1] for i in range(len(jaw_sizes)-1)):\n        return 'false'\n    variables = ''.join(str(jaw_sizes[i]) for i in range(len(jaw_sizes)))\n    return variables\n\nstdin = \"?(__+___+__-___):-___>__. \\n\"\nprint(solution(stdin))"
    },
    {
        "number": 4134,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, m, k = map(int, lines[0].split())\n    grid = []\n    for line in lines[1:]:\n        grid.append(list(map(int, line.split())))\n    dp = [[[0]*3 for _ in range(m+1)] for _ in range(n+1)]\n    dp[1][1][grid[0][0]^grid[0][1]] = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(3):\n                if i > 1 and j > 1:\n                    dp[i][j][k] = (dp[i-1][j][0] + dp[i][j-1][1]) % (10**18+7)\n                elif i > 1:\n                    dp[i][j][k] = dp[i-1][j][k]\n                elif j > 1:\n                    dp[i][j][k] = dp[i][j-1][k]\n                else:\n                    dp[i][j][k] = 0\n    return dp[n][m][k]\n\nprint(solution('''3 3 11\n2 1 5\n7 10 0\n12 6 4''')) # Output: 3\n\nprint(solution('''3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1''')) # Output: 5\n\nprint(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1''')) # Output: 0"
    },
    {
        "number": 4134,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m, k = list(map(int, stdin.split()))\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n\n    # Initialize variables\n    dp = [[0] * m for _ in range(n)]\n    dp[0][0] = 1\n\n    # Loop through cells and compute dp\n    for i in range(n):\n        for j in range(m):\n            if i > 0:\n                dp[i][j] += dp[i - 1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j - 1]\n\n    # Count number of paths with xor sum equal to k\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if i == n - 1 and j == m - 1:\n                if (a[i][j] ^ a[0][0]) == k:\n                    count += dp[i][j]\n            else:\n                if (a[i][j] ^ a[i][j + 1]) == k or (a[i][j] ^ a[i + 1][j]) == k:\n                    count += dp[i][j]\n\n    # Print count\n    print(count)"
    },
    {
        "number": 4134,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m, k = map(int, stdin.readline().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n    # initialize dp table\n    dp = [[0] * m for _ in range(n)]\n    dp[0][0] = 1\n    # calculate dp table\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                continue\n            if i > 0:\n                dp[i][j] += dp[i - 1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j - 1]\n    # count paths with xor sum equal to k\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if dp[i][j] > 0 and (i == n - 1 or j == m - 1 or dp[i][j + 1] == 0 and dp[i + 1][j] == 0):\n                ans += dp[i][j]\n    return str(ans)"
    },
    {
        "number": 4134,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    grid = [list(map(int, input().split())) for _ in range(n)]\n\n    # dp[i][j][k] is the number of paths from (1, 1) to (i, j) with xor sum equal to k\n    dp = [[[0] * (k + 1) for _ in range(m + 1)] for _ in range(n + 1)]\n\n    # initialize the base case\n    dp[1][1][grid[0][0] ^ grid[0][1]] = 1\n\n    # fill the table using dynamic programming\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for xor_sum in range(k + 1):\n                for move in [(1, 0), (0, 1)]:\n                    ni, nj = i + move[0], j + move[1]\n                    if 1 <= ni <= n and 1 <= nj <= m:\n                        dp[i][j][xor_sum] += dp[i - 1][j - 1][xor_sum ^ grid[i - 1][j - 1]]\n\n    # return the answer\n    return dp[n][m][k]\n"
    },
    {
        "number": 4134,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [[int(x) for x in input().split()] for i in range(n)]\n\n    # dp[i][j] is the number of paths from (1,1) to (i,j) with xor sum equal to k\n    dp = [[0] * (m + 1) for i in range(n + 1)]\n    dp[1][1] = 1\n\n    # fill the dp table\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n\n    # count the paths with xor sum equal to k\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] ^ dp[i+1][j+1] == k:\n                count += dp[i][j]\n\n    return count"
    },
    {
        "number": 4134,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, stdin.split()[i*m:(i+1)*m])))\n    dp = [[0 for j in range(m)] for i in range(n)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(m):\n            if i > 0:\n                dp[i][j] += dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j-1]\n    return dp[n-1][m-1]\n\nstdin = \"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\"\nprint(solution(stdin)) # Output: 3<|im_sep|>"
    },
    {
        "number": 4134,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    grid = []\n    for i in range(n):\n        row = list(map(int, stdin.split()))\n        grid.append(row)\n\n    def dfs(i: int, j: int, xor_sum: int, visited: set) -> int:\n        if i == n and j == m:\n            return 1 if xor_sum == k else 0\n\n        count = 0\n        if i < n and (i+j) % 2 == (k & 1):\n            if (i+1, j) not in visited:\n                visited.add((i+1, j))\n                count += dfs(i+1, j, xor_sum ^ grid[i][j], visited)\n                visited.remove((i+1, j))\n            if (i, j+1) not in visited:\n                visited.add((i, j+1))\n                count += dfs(i, j+1, xor_sum ^ grid[i][j], visited)\n                visited.remove((i, j+1))\n\n        if j < m and (i+j) % 2 == (k & 1):\n            if (i, j+1) not in visited:\n                visited.add((i, j+1))\n                count += dfs(i, j+1, xor_sum ^ grid[i][j], visited)\n                visited.remove((i, j+1))\n            if (i+1, j) not in visited:\n                visited.add((i+1, j))\n                count += dfs(i+1, j, xor_sum ^ grid[i][j], visited)\n                visited.remove((i+1, j))\n\n        return count\n\n    visited = set()\n    return dfs(0, 0, 0, visited)\n\nstdin = \"\"\"\n3 3 11\n2 1 5\n7 10 0\n12 6 4\n\"\"\"\n\nprint(solution(stdin))  # Output: 3\n\nstdin = \"\"\"\n3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\n\"\"\"\n\nprint(solution(stdin))  # Output: 5\n\nstdin = \"\"\"\n3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n\"\"\"\n\nprint(solution(stdin))  # Output: 0"
    },
    {
        "number": 4134,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split()[i*m:(i+1)*m])))\n    dp = [[[0]*(k+1) for _ in range(m+1)] for _ in range(n+1)]\n    dp[1][1][a[0][0]^a[0][1]] = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i > 1 and j > 1:\n                for x in range(k+1):\n                    dp[i][j][x] = dp[i-1][j][x^a[i-1][j-1]] + dp[i][j-1][x^a[i-1][j-2]]\n            elif i > 1:\n                for x in range(k+1):\n                    dp[i][j][x] = dp[i-1][j][x^a[i-1][j-1]]\n            elif j > 1:\n                for x in range(k+1):\n                    dp[i][j][x] = dp[i][j-1][x^a[i-1][j-2]]\n    return sum(dp[n][m][x] for x in range(k+1))"
    },
    {
        "number": 4134,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().strip().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().strip().split())))\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    dp[1][1] = 1\n    if a[1][1] ^ a[2][1] ^ a[1][2] == k:\n        dp[2][1] = 1\n    if a[1][1] ^ a[1][2] ^ a[2][2] == k:\n        dp[1][2] = 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if a[i][j] == 0:\n                continue\n            if i > 1:\n                dp[i][j] += dp[i - 1][j]\n            if j > 1:\n                dp[i][j] += dp[i][j - 1]\n    return dp[n][m]"
    },
    {
        "number": 4134,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    grid = [list(map(int, stdin.split())) for _ in range(n)]\n\n    dp = [[0] * m for _ in range(n)]\n\n    dp[0][0] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                continue\n            if j < m - 1:\n                dp[i][j + 1] += dp[i][j]\n            if i < n - 1:\n                dp[i + 1][j] += dp[i][j]\n\n    ans = 0\n\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                continue\n            if dp[i][j] == 0:\n                continue\n            if ((i > 0 and dp[i-1][j] == 0) or (j > 0 and dp[i][j-1] == 0)):\n                continue\n            if grid[i][j] ^ grid[i-1][j] == k:\n                ans += dp[i][j]\n\n    return str(ans)\n\nprint(solution(\"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\")) # Output: 3\nprint(solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\")) # Output: 5\nprint(solution(\"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\")) # Output: 0"
    },
    {
        "number": 4135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    s = ''\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            s += t[i-1::-1]\n            n //= i\n        else:\n            continue\n    return s"
    },
    {
        "number": 4135,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = stdin.readline().strip()\n    s = t\n    for d in range(n, 0, -1):\n        if n % d == 0:\n            s = s[:d] + s[d:][::-1]\n    return s\n"
    },
    {
        "number": 4135,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n    s = t\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            s = s[-i:] + s[:-i]\n    return s\n\nstdin = \"10\\nrocesfedoc\"\nprint(solution(stdin))  # Output: \"codeforces\""
    },
    {
        "number": 4135,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = stdin.readline().strip()\n\n    # iterate over divisors of n in decreasing order\n    for d in range(n, 0, -1):\n        # reverse the substring s[1..d]\n        s = t[:d]\n        s = s[::-1]\n        # append the reversed substring to s\n        t = s + t[d:]\n\n    return t"
    },
    {
        "number": 4135,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    t = stdin.strip().split()[1]\n    for d in range(n, 0, -1):\n        if n % d == 0:\n            s = t[:d][::-1]\n            if s == t[:d]:\n                return s\n    return \"\""
    },
    {
        "number": 4135,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = stdin.readline().strip()\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            sub = t[:i]\n            sub = sub[::-1]\n            t = t.replace(sub, sub[::-1], 1)\n    return t\n\nprint(solution(stdin))"
    },
    {
        "number": 4135,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n    \n    s = \"\"\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            s = t[-i:] + s\n    \n    return s"
    },
    {
        "number": 4135,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n    s = ''\n    for d in range(n, 0, -1):\n        if n % d == 0:\n            s += t[d-1:n-d+1][::-1]\n            n -= d\n    return s"
    },
    {
        "number": 4135,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = stdin.readline().strip()\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            s = t[::-i]\n            return s\n    return \"\""
    },
    {
        "number": 4135,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = stdin.readline().strip()\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            d = i\n            break\n    s = \"\"\n    for j in range(len(t)-d+1):\n        s += t[j+d-1]\n    return s"
    },
    {
        "number": 4136,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a+b)"
    },
    {
        "number": 4136,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)"
    },
    {
        "number": 4137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Remove whitespaces and convert to list of characters\n    stdin = stdin.replace(' ', '')\n    program = list(stdin)\n\n    # Generate the Brainfuck program\n    for i, op in enumerate(program):\n        if op == '+':\n            program[i] = '>'\n        elif op == '-':\n            program[i] = '<'\n\n    # Add the EOF character\n    program.append('.')\n\n    # Convert the program to a string\n    program = ''.join(program)\n\n    return program"
    },
    {
        "number": 4137,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def calculate(expression):\n        stack = []\n        for token in expression.split():\n            if token.isdigit():\n                stack.append(int(token))\n            else:\n                b = stack.pop()\n                a = stack.pop()\n                if token == '+':\n                    stack.append(a+b)\n                else:\n                    stack.append(a-b)\n        return stack[0]\n\n    program = \"\"\n    expression = stdin.strip()\n    result = calculate(expression)\n    program += f\"{'>' * result}\"\n    program += f\"{'<' * (256 - result)}\"\n    program += f\".{'+' * (256 - result)}\"\n    return program"
    },
    {
        "number": 4137,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes an arithmetic expression as input and returns a Brainfuck program that computes its value.\n    :param stdin: A string representing the arithmetic expression.\n    :return: A Brainfuck program that computes the value of the arithmetic expression.\n    \"\"\"\n    expression = stdin.strip()\n    program = \"\"\n\n    # Push the operands onto the stack\n    stack = []\n    for token in expression.split():\n        if token.isdigit():\n            stack.append(token)\n        else:\n            arg2 = stack.pop()\n            arg1 = stack.pop()\n            stack.append(str(int(arg1) + int(arg2) if token == \"+\" else int(arg1) - int(arg2)))\n\n    # Generate the Brainfuck program\n    program += \">\" * len(stack[0]) + \".\"\n    for token in stack:\n        if token.isdigit():\n            program += \",\" * int(token) + \">\"\n        else:\n            program += \">\" * len(token) + \"<\"\n            if token == \"+\":\n                program += \"+\"\n            else:\n                program += \"-\"\n\n    return program"
    },
    {
        "number": 4137,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # evaluate the expression using Python's eval()\n    expression = eval(stdin)\n    # convert the expression to Brainfuck code\n    bf_code = \"\"\n    if expression >= 0:\n        bf_code += \">\" * expression\n    else:\n        bf_code += \"<\" * (-expression)\n    bf_code += \".\"\n    return bf_code"
    },
    {
        "number": 4137,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # remove leading/trailing whitespaces and convert to uppercase\n    expr = stdin.strip().upper()\n    \n    # create a list of characters representing the expression\n    program = []\n    for c in expr:\n        if c in \"+-\":\n            program.append(c)\n        else:\n            program.append(\".\") # any character other than + or - is considered as a literal number\n            program.append(c)\n    \n    # add the output instruction and a stop command\n    program.append(\">\")\n    program.append(\".\")\n    \n    # insert the memory initialization command\n    program.insert(0, \",>,<[>[->+>+<<]>>[-<<+>>]<<<-]>>[<<[>>>-<<[-]]>>[-<<[-]]<<<-]>>[-<<[-]]<<.[-<<[-]]<<,\")\n    \n    return \"\".join(program)\n"
    },
    {
        "number": 4137,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    operands = stdin.strip().split('+')\n    operators = ['+' if '+' in op else '-' for op in operands]\n    program = ''.join(['>'*(int(op)-1) + '+'*(int(op)-1) if op[0].isdigit() else '>'*(int(op[0])+int(op[2:])-2) + '+'*(int(op[0])+int(op[2:])-1) + '<'*(int(op[0])+int(op[2:])-1) + '<'*(int(op[0])+int(op[2:])-1) for op in operands])\n    program += ''.join(['+'*(int(op)-1) + '>'*(int(op)-1) if op[0].isdigit() else '+'*(int(op[0])+int(op[2:])-1) + '>'*(int(op[0])+int(op[2:])-2) + '<'*(int(op[0])+int(op[2:])-1) + '<'*(int(op[0])+int(op[2:])-1) for op in operands])\n    program += '<'*(sum([int(op) for op in operands])-1)\n    program += '.'\n    return program"
    },
    {
        "number": 4137,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Define the arithmetic expression\n    expression = stdin.strip()\n    # Define the Brainfuck program\n    bf_program = \"\"\n    # Define a function to convert the expression to Brainfuck\n    def convert_to_bf(expression):\n        # Initialize variables\n        stack = []\n        i = 0\n        # Iterate over the expression\n        while i < len(expression):\n            # If the current character is an operand\n            if expression[i].isdigit():\n                # Append the operand to the stack\n                num = \"\"\n                while i < len(expression) and expression[i].isdigit():\n                    num += expression[i]\n                    i += 1\n                stack.append(num)\n            # If the current character is an operator\n            elif expression[i] in [\"+\", \"-\"]:\n                # Pop two operands from the stack\n                num1 = int(stack.pop())\n                num2 = int(stack.pop())\n                # Append the operator and operands to the Brainfuck program\n                if expression[i] == \"+\":\n                    bf_program += f\"{num2}>{num1}<\"\n                else:\n                    bf_program += f\">{num2}-{num1}<\"\n            # If the current character is a left parenthesis\n            elif expression[i] == \"(\":\n                # Append it to the Brainfuck program\n                bf_program += \"(\"\n            # If the current character is a right parenthesis\n            elif expression[i] == \")\":\n                # Pop all operands from the stack\n                while stack[-1][-1] == \")\":\n                    num = stack.pop()[0:-1]\n                    bf_program += f\">{num}<\"\n            # Increment the index\n            i += 1\n        # Pop all operands from the stack\n        while stack:\n            num = stack.pop()[0:-1]\n            bf_program += f\">{num}<\"\n    # Convert the expression to Brainfuck\n    convert_to_bf(expression)\n    # Add a \".\" character to terminate the Brainfuck program\n    bf_program += \".\"\n    # Return the Brainfuck program\n    return bf_program"
    },
    {
        "number": 4137,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse the input string\n    operands, operators = [], []\n    for token in stdin.split():\n        if token.isdigit():\n            operands.append(int(token))\n        elif token in ['+', '-']:\n            operators.append(token)\n    # generate the Brainfuck program\n    program = ''\n    for i in range(len(operands)):\n        program += '+' * operands[i]\n        if i < len(operators):\n            program += operators[i]\n    program += '.'\n    return program\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def brainfuck_to_python(code: str) -> str:\n        code = code.replace('>', 'ptr += 1')\n        code = code.replace('<', 'ptr -= 1')\n        code = code.replace('+','mem[ptr] += 1')\n        code = code.replace('-','mem[ptr] -= 1')\n        code = code.replace('.', 'print(chr(mem[ptr]), end=\"\")')\n        return code\n    \n    def evaluate(expression: str) -> int:\n        operands = [int(x) for x in expression.split('+') if x]\n        result = operands[0]\n        for i in range(1, len(operands)):\n            sign = 1 if operands[i] >= 0 else -1\n            result += sign * operands[i]\n        return result\n    \n    memory_size = 30000\n    memory = [0] * memory_size\n    ptr = 0\n    program = ''\n    \n    expression = stdin.strip()\n    result = evaluate(expression)\n    program += '>' * result\n    \n    code = brainfuck_to_python(program)\n    exec(code)\n    \n    return program"
    },
    {
        "number": 4137,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for char in stdin:\n        if char in ['+', '-', '*', '/']:\n            if len(stack) < 2:\n                return \"Error: not enough operands\"\n            a = stack.pop()\n            b = stack.pop()\n            if char == '+':\n                stack.append(a+b)\n            elif char == '-':\n                stack.append(b-a)\n            elif char == '*':\n                stack.append(a*b)\n            elif char == '/':\n                if a == 0:\n                    return \"Error: division by zero\"\n                stack.append(b//a)\n        elif char.isdigit():\n            stack.append(int(char))\n        else:\n            return \"Error: invalid character\"\n    if len(stack)!= 1:\n        return \"Error: too many operands\"\n    result = stack.pop()\n    if result < 0 or result > 255:\n        return \"Error: result out of range\"\n    program = \"\"\n    while result > 0:\n        program += \"+\"\n        result -= 1\n    while result < 0:\n        program += \"-\"\n        result += 1\n    return program\n\nwith open(\"test.txt\", \"r\") as f:\n    stdin = f.readline().strip()\n\nprogram = solution(stdin)\n"
    },
    {
        "number": 4138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    q = int(lines[0])\n    ks = [int(line) for line in lines[1:]]\n\n    # initialize variables\n    sequence = '11212312341234512345612345671234567812345678912345678910'\n    n = len(sequence)\n    digits = [int(digit) for digit in sequence]\n\n    # loop through queries\n    outputs = []\n    for k in ks:\n        # calculate digit at position k\n        digit = digits[k-1]\n\n        # append output to list\n        outputs.append(str(digit))\n\n    # join outputs and return as string\n    return '\\n'.join(outputs)"
    },
    {
        "number": 4138,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    output = []\n    for i in range(q):\n        k = int(stdin.readline().strip())\n        if k == 1:\n            output.append(1)\n        else:\n            x = 1\n            for i in range(2, k):\n                x = (x * (i - 1)) // i\n            output.append(x % 10)\n    return '\\n'.join(map(str, output))\n\nassert solution('''5\n1\n3\n20\n38\n56''') == '''1\n2\n5\n2\n0'''\n\nassert solution('''4\n2132\n506\n999999999999999999\n1000000000000000000''') == '''8\n2\n4\n1'''"
    },
    {
        "number": 4138,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    output = []\n    for i in range(q):\n        k = int(stdin.readline().strip())\n        n = 1\n        while True:\n            if k <= n*(10**n - 1)//9:\n                break\n            n += 1\n        x = 10**n - 1 - (k - 1) % (10**n - 1)\n        output.append(str(x))\n    return '\\n'.join(output)"
    },
    {
        "number": 4138,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    q = int(stdin.readline().strip())\n    k = [int(stdin.readline().strip()) for _ in range(q)]\n\n    # initialize sequence\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n\n    # calculate answer for each query\n    result = []\n    for i in k:\n        result.append(int(sequence[i-1]))\n\n    # print answers\n    for r in result:\n        print(r)\n\n    return '\\n'.join(str(r) for r in result)"
    },
    {
        "number": 4138,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        k = int(stdin.readline().strip())\n        s = \"112123123412345\" * 2\n        i = 1\n        while i <= len(s):\n            if i == k:\n                print(s[i-1])\n                break\n            i += len(str(i))\n    return \"\""
    },
    {
        "number": 4138,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        k = int(stdin.readline().strip())\n        if k < 56:\n            x = int(str(k // 56) + str(k % 56 + 1)[0])\n        else:\n            x = k % 9\n        print(x)"
    },
    {
        "number": 4138,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for i in range(q):\n        k = int(stdin.readline())\n        if k < 1 or k > 56:\n            return 'Invalid query'\n        else:\n            num = int(str(k-1)[0])\n            digit = int(str(k-1)[-1])\n            x = int(str(num)[digit-1])\n            print(x)\n"
    },
    {
        "number": 4138,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    seq = '11212312341234512345612345671234567812345678912345678910'\n    ans = []\n    for i in range(1, q+1):\n        k = int(lines[i])\n        if k < 1 or k > len(seq):\n            ans.append('0')\n        else:\n            ans.append(seq[k-1])\n    return '\\n'.join(ans)"
    },
    {
        "number": 4138,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    q, *ks = map(int, stdin.split())\n    \n    # Initialize sequence\n    seq = \"11212312341234512345612345671234567812345678912345678910\"\n    \n    # Compute results for each query\n    xs = []\n    for k in ks:\n        xs.append(int(seq[k-1]))\n    \n    # Format results and return as string\n    return \"\\n\".join(map(str, xs))"
    },
    {
        "number": 4138,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # reading input\n    q = int(stdin.readline().strip())\n    queries = []\n    for i in range(q):\n        queries.append(int(stdin.readline().strip()))\n    \n    # computing sequence\n    seq = \"11212312341234512345612345671234567812345678912345678910\"\n    \n    # answering queries\n    answers = []\n    for query in queries:\n        if query < 1 or query > len(seq):\n            answers.append(\"Invalid query\")\n        else:\n            digit = int(seq[query-1])\n            answers.append(str(digit))\n    \n    # printing output\n    for answer in answers:\n        print(answer)"
    },
    {
        "number": 4139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if len(set(str(i))) == 3 and '7' in str(i) and '5' in str(i) and '3' in str(i):\n            count += 1\n    return str(count)"
    },
    {
        "number": 4139,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if '7' in str(i) and '5' in str(i) and '3' in str(i) and len(set(str(i))) == 3:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4139,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    count = 0\n    \n    for i in range(1, n+1):\n        s = str(i)\n        if '7' in s and '5' in s and '3' in s:\n            if s.count('7') == s.count('5') == s.count('3'):\n                count += 1\n    \n    return str(count)\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        s = str(i)\n        if '7' in s and '5' in s and '3' in s and s.count('7') == 1 and s.count('5') == 1 and s.count('3') == 1:\n            count += 1\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4139,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if '7' in str(i) and '5' in str(i) and '3' in str(i) and not any(c in str(i) for c in '4689'):\n            count += 1\n    return str(count)"
    },
    {
        "number": 4139,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N+1):\n        digits = [int(d) for d in str(i)]\n        if 7 in digits and 5 in digits and 3 in digits:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4139,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    count = 0\n    for num in range(1, N+1):\n        if '7' in str(num) and '5' in str(num) and '3' in str(num) and str(num).count('7') == str(num).count('5') == str(num).count('3'):\n            count += 1\n\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4139,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for num in range(1, n+1):\n        if '7' in str(num) and '5' in str(num) and '3' in str(num):\n            count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if '7' in str(i) and '5' in str(i) and '3' in str(i) and str(i).count('7') == str(i).count('5') == str(i).count('3'):\n            count += 1\n    return str(count)"
    },
    {
        "number": 4139,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if '7' in str(i) and '5' in str(i) and '3' in str(i) and not '0' in str(i) and not '8' in str(i) and not '6' in str(i) and not '4' in str(i) and not '2' in str(i):\n            count += 1\n    return str(count)"
    },
    {
        "number": 4140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            count += 1\n    return count + 1 if count < n//2 else count"
    },
    {
        "number": 4140,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    count = 0\n    for i in range(len(s)):\n        if i == 0:\n            continue\n        if s[i] == s[i-1]:\n            count += 1\n        if count == 2:\n            return str(count)\n    return str(count)"
    },
    {
        "number": 4140,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S = list(map(int, stdin.readline().strip()))\n    count = 0\n    for i in range(1, N):\n        if S[i]!= S[i-1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4140,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            count += 1\n    return count + 1"
    },
    {
        "number": 4140,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    N = len(S)\n    count = 0\n    for i in range(1, N-1):\n        if S[i-1] == S[i] or S[i] == S[i+1]:\n            continue\n        else:\n            count += 1\n            if S[i-1]!= S[i] and S[i] == '0':\n                S = S[:i] + '1' + S[i+1:]\n            else:\n                S = S[:i+1] + '0' + S[i+2:]\n    print(count)\n    return S"
    },
    {
        "number": 4140,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n    if n == 1:\n        return 0\n    \n    if S[0] == S[1]:\n        return 1\n    \n    if S[0]!= S[1] and S[n-1]!= S[n-2]:\n        return 1\n    \n    if S[0]!= S[1] and S[n-2]!= S[n-1]:\n        return 2\n    \n    return 3"
    },
    {
        "number": 4140,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            count += 1\n    return count + (n % 2 == 0)"
    },
    {
        "number": 4140,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    S = stdin.strip()\n    # Initialize variables\n    black_count = 0\n    white_count = 0\n    for i in range(len(S)):\n        if S[i] == '0':\n            black_count += 1\n        else:\n            white_count += 1\n    # Check if the condition is satisfied\n    if black_count == 0 or white_count == 0:\n        return '1'\n    else:\n        return str(min(black_count, white_count))"
    },
    {
        "number": 4140,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.strip().split())\n    count = 0\n    for i in range(n):\n        if i == 0 or i == n-1:\n            continue\n        if s[i-1] == s[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 4140,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n    count = 0\n    for i in range(1, n):\n        if S[i]!= S[i-1]:\n            count += 1\n    return str(count) + \"\\n\""
    },
    {
        "number": 4141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = [int(num) for num in stdin.readline().strip().split()]\n    \n    for num in nums:\n        if num % 2 == 0 and not (num % 3 == 0 or num % 5 == 0):\n            return \"DENIED\"\n    \n    return \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = [int(x) for x in stdin.readline().strip().split()]\n\n    even_nums = [x for x in nums if x % 2 == 0]\n    allowed = all(x % 3 == 0 or x % 5 == 0 for x in even_nums)\n\n    if allowed:\n        return \"APPROVED\"\n    else:\n        return \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    \n    # check if condition is satisfied\n    approved = all(n % 3 == 0 or n % 5 == 0 for n in nums if n % 2 == 0)\n    \n    # output result\n    return \"APPROVED\" if approved else \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    \n    # Check if all even numbers written on the document are divisible by 3 or 5\n    for num in A:\n        if num % 2 == 0 and (num % 3!= 0 and num % 5!= 0):\n            return \"DENIED\"\n    \n    # If all numbers are divisible by 3 or 5, approve the immigrant\n    return \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n = int(stdin.split()[0])\n    nums = list(map(int, stdin.split()[1:]))\n\n    # Check if even numbers are divisible by 3 or 5\n    for num in nums:\n        if num % 2 == 0 and not (num % 3 == 0 or num % 5 == 0):\n            return \"DENIED\"\n\n    # All even numbers are divisible by 3 or 5, so the immigrant is approved\n    return \"APPROVED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    nums = list(map(int, lines[1].split()))\n    is_approved = True\n    for num in nums:\n        if num % 2 == 0 and not (num % 3 == 0 or num % 5 == 0):\n            is_approved = False\n            break\n    if is_approved:\n        return 'APPROVED'\n    else:\n        return 'DENIED'\n"
    },
    {
        "number": 4141,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # check if all even numbers are divisible by 3 or 5\n    for a in A:\n        if a % 2 == 0 and not (a % 3 == 0 or a % 5 == 0):\n            return \"DENIED\"\n\n    # if all checks pass, allow entry\n    return \"APPROVED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    count = 0\n    for num in nums:\n        if num % 2 == 0 and (num % 3 == 0 or num % 5 == 0):\n            count += 1\n    if count == n:\n        return \"APPROVED\"\n    else:\n        return \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    for i in range(n):\n        if a[i] % 2 == 0 and not(a[i] % 3 == 0 or a[i] % 5 == 0):\n            return \"DENIED\"\n    \n    return \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Checking for even numbers divisible by 3 or 5\n    for num in a:\n        if num % 2 == 0 and not (num % 3 == 0 or num % 5 == 0):\n            return \"DENIED\"\n\n    return \"APPROVED\""
    },
    {
        "number": 4142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    odd_chars = set(['R', 'U', 'D'])\n    even_chars = set(['L', 'U', 'D'])\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] not in odd_chars:\n                return \"No\"\n        else:\n            if s[i] not in even_chars:\n                return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4142,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # convert input string to list of characters\n    dance_moves = list(stdin.strip())\n\n    # count the number of characters in odd and even positions\n    num_odd = sum(1 for move in dance_moves if dance_moves.index(move) % 2 == 1)\n    num_even = len(dance_moves) - num_odd\n\n    # check if each character in an odd position is R, U, or D\n    if not all(move in ['R', 'U', 'D'] for move in dance_moves if dance_moves.index(move) % 2 == 1):\n        return \"No\"\n\n    # check if each character in an even position is L, U, or D\n    if not all(move in ['L', 'U', 'D'] for move in dance_moves if dance_moves.index(move) % 2 == 0):\n        return \"No\"\n\n    # if all conditions are satisfied, return Yes\n    return \"Yes\""
    },
    {
        "number": 4142,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) % 2 == 1:\n        return \"No\"\n    for i in range(0, len(s), 2):\n        if s[i] not in ['L', 'U', 'D'] or s[i+1] not in ['L', 'U', 'D']:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4142,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    even_chars = S[::2]\n    odd_chars = S[1::2]\n    \n    if all(char in ['L', 'U', 'D', 'R'] for char in even_chars) and all(char in ['L', 'U', 'D', 'R'] for char in odd_chars):\n        return 'Yes'\n    else:\n        return 'No'\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into a list of characters\n    s = list(stdin)\n\n    # Initialize two variables to keep track of the even and odd positions\n    even_pos = 0\n    odd_pos = 0\n\n    # Iterate through the list of characters and count the even and odd positions\n    for i in range(len(s)):\n        if i % 2 == 0:\n            even_pos += 1\n        else:\n            odd_pos += 1\n\n    # Iterate through the list of characters and check if each position is valid\n    for i in range(len(s)):\n        if i % 2 == 0:\n            # Check if even position is valid\n            if s[i] not in ['L', 'U', 'D']:\n                return \"No\"\n        else:\n            # Check if odd position is valid\n            if s[i] not in ['R', 'U', 'D']:\n                return \"No\"\n\n    # If the loop completes without returning \"No\", then S is easily playable\n    return \"Yes\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    even_chars = [S[i] for i in range(0, len(S), 2)]\n    odd_chars = [S[i] for i in range(1, len(S), 2)]\n    if all(c in ['L', 'U', 'D'] for c in even_chars) and all(c in ['R', 'U', 'D'] for c in odd_chars):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4142,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # split input string into list of characters\n    instructions = list(stdin.strip())\n    # check if instructions are easily playable\n    odd_pos = instructions[::2]  # get every second character in the string\n    even_pos = instructions[1::2]  # get every second character starting from the second\n    if all(x in ['R', 'U', 'D'] for x in odd_pos) and all(x in ['L', 'U', 'D'] for x in even_pos):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4142,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A function to check if the string is easily playable or not.\n    \"\"\"\n    # Split the string into characters\n    s = list(stdin)\n\n    # Check for odd and even positions\n    odd_pos = [i for i in range(len(s)) if i % 2 == 1]\n    even_pos = [i for i in range(len(s)) if i % 2 == 0]\n\n    # Check if odd positions are R, U or D\n    for i in odd_pos:\n        if s[i] not in ['R', 'U', 'D']:\n            return \"No\"\n\n    # Check if even positions are L, U or D\n    for i in even_pos:\n        if s[i] not in ['L', 'U', 'D']:\n            return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    S = stdin.strip()\n\n    # count L, R, U, D in odd and even positions\n    odd_count = 0\n    even_count = 0\n    for i in range(len(S)):\n        if i % 2 == 0:\n            if S[i] not in ['L', 'U', 'D']:\n                return \"No\"\n            even_count += 1\n        else:\n            if S[i] not in ['R', 'U', 'D']:\n                return \"No\"\n            odd_count += 1\n\n    # check if the counts match\n    if odd_count % 2 == 1 or even_count % 2 == 1:\n        return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if len(S) == 0:\n        return \"Yes\"\n    if len(S) % 2 == 1:\n        return \"No\"\n    for i in range(1, len(S), 2):\n        if S[i] not in ['R', 'U', 'D']:\n            return \"No\"\n    for i in range(0, len(S), 2):\n        if S[i] not in ['L', 'U', 'D']:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.strip().split())\n    return str(min(N // A + 1, N // B + 1, N // C + 1, N // D + 1, N // E + 1) * 6)\n\nprint(solution(\"5\\n3\\n2\\n4\\n3\\n5\"))"
    },
    {
        "number": 4143,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, A, B, C, D, E = map(int, stdin.split())\n\n    # Calculate minimum time\n    time = 0\n    while True:\n        # Train\n        time += N // A + N % A\n        N = N % A\n\n        # Bus\n        time += N // B + N % B\n        N = N % B\n\n        # Taxi\n        time += N // C + N % C\n        N = N % C\n\n        # Airplane\n        time += N // D + N % D\n        N = N % D\n\n        # Ship\n        time += N // E + N % E\n        N = N % E\n\n        # Check if all N people have reached City 6\n        if N == 0:\n            break\n        time += 1\n        N -= 1\n\n    return str(time)"
    },
    {
        "number": 4143,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, A, B, C, D, E = map(int, stdin.split())\n    \n    # Calculate the minimum time for all the people to reach City 6\n    min_time = 0\n    for i in range(N):\n        min_time += (i+1) // A + (i+1) // B + (i+1) // C + (i+1) // D + (i+1) // E\n    min_time += 5  # Add the time needed to transfer from City 5 to City 6\n    \n    # Return the minimum time as a string\n    return str(min_time)"
    },
    {
        "number": 4143,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing input\n    N, A, B, C, D, E = map(int, stdin.split())\n    \n    # Calculating minimum time\n    train_time = 1 + N // A\n    bus_time = 2 + (N - A * train_time) // B\n    taxi_time = 2 + (N - (A * train_time + B * bus_time)) // C\n    airplane_time = 2 + (N - (A * train_time + B * bus_time + C * taxi_time)) // D\n    ship_time = 2 + (N - (A * train_time + B * bus_time + C * taxi_time + D * airplane_time)) // E\n    \n    min_time = train_time + bus_time + taxi_time + airplane_time + ship_time\n    \n    return str(min_time)"
    },
    {
        "number": 4143,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, A, B, C, D, E = map(int, stdin.split())\n\n    # calculate minimum time required\n    min_time = N * 6 + A + B + C + D + E\n\n    # return minimum time required\n    return str(min_time)"
    },
    {
        "number": 4143,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, A, B, C, D, E = map(int, stdin.split())\n\n    # compute the minimum time required for all people to reach City 6\n    time_train = N // A + 1\n    time_bus = N // B + 1\n    time_taxi = N // C + 1\n    time_airplane = N // D + 1\n    time_ship = N // E + 1\n    time_min = min(time_train, time_bus, time_taxi, time_airplane, time_ship)\n\n    # return the minimum time\n    return str(time_min)"
    },
    {
        "number": 4143,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    A = int(lines[1])\n    B = int(lines[2])\n    C = int(lines[3])\n    D = int(lines[4])\n    E = int(lines[5])\n\n    # Calculate the time needed for all people to reach City 6\n    time = 0\n    for i in range(1, N+1):\n        if i <= A:\n            time += 1\n        elif i <= A + B:\n            time += 2\n        elif i <= A + B + C:\n            time += 3\n        elif i <= A + B + C + D:\n            time += 4\n        else:\n            time += 5\n\n    return str(time)"
    },
    {
        "number": 4143,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, a, b, c, d, e = map(int, stdin.split())\n\n    # Calculate minimum time\n    time = 0\n    time += n // a  # Train\n    n %= a\n    time += n // b  # Bus\n    n %= b\n    time += n // c  # Taxi\n    n %= c\n    time += n // d  # Airplane\n    n %= d\n    time += n // e  # Ship\n    time += n % e  # Remaining people\n\n    return str(time)"
    },
    {
        "number": 4143,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    N, A, B, C, D, E = map(int, stdin.split())\n    \n    # Calculate the minimum time required for all of the people to reach City 6\n    min_time = 0\n    \n    # Train\n    train_capacity = A\n    train_people = N - train_capacity\n    if train_people > 0:\n        min_time += train_people * 60 // train_capacity\n    \n    # Bus\n    bus_capacity = B\n    bus_people = train_people - bus_capacity\n    if bus_people > 0:\n        min_time += bus_people * 60 // bus_capacity\n    \n    # Taxi\n    taxi_capacity = C\n    taxi_people = bus_people - taxi_capacity\n    if taxi_people > 0:\n        min_time += taxi_people * 60 // taxi_capacity\n    \n    # Airplane\n    airplane_capacity = D\n    airplane_people = taxi_people - airplane_capacity\n    if airplane_people > 0:\n        min_time += airplane_people * 60 // airplane_capacity\n    \n    # Ship\n    ship_capacity = E\n    ship_people = airplane_people - ship_capacity\n    if ship_people > 0:\n        min_time += ship_people * 60 // ship_capacity\n    \n    # Return the minimum time required for all of the people to reach City 6\n    return str(min_time)"
    },
    {
        "number": 4143,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n    time = 0\n    for i in range(N):\n        time += 1\n        if time % 6 == 1:\n            time += 3\n        elif time % 6 == 2:\n            time += 5\n        elif time % 6 == 3:\n            time += 2\n        elif time % 6 == 4:\n            time += 3\n        elif time % 6 == 5:\n            time += 4\n    return str(time)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4144,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n\n    MOD = 10**9 + 7\n\n    # count all possible patterns of A_1,A_2,\\ldots,A_N\n    # possible patterns: 00000000, 00000001, 00000010,..., 99999999\n    # for each pattern, count the number of sequences that satisfy all conditions\n    count = 0\n    for i in range(10**N):\n        # convert integer to binary string\n        bin_i = bin(i)[2:].zfill(N)\n        # convert binary string to list of integers\n        A = [int(j) for j in bin_i]\n        # count the number of 0 and 9 in A\n        zero_count = A.count(0)\n        nine_count = A.count(9)\n        # check if there exists some i such that A_i=0 holds\n        if zero_count == 0:\n            continue\n        # check if there exists some i such that A_i=9 holds\n        if nine_count == 0:\n            continue\n        # check if all other elements of A are between 0 and 9\n        if all(0 <= j <= 9 for j in A):\n            count += 1\n\n    return str(count % MOD)"
    },
    {
        "number": 4144,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    MOD = 10**9 + 7\n\n    dp = [[0] * 10 for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(10):\n            for k in range(10):\n                if k!= 0:\n                    dp[i+1][k] += dp[i][j]\n                if k!= 9:\n                    dp[i+1][k+1] += dp[i][j]\n    \n    ans = 0\n    for i in range(10):\n        ans += dp[n][i]\n    return str(ans % MOD)"
    },
    {
        "number": 4144,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    mod = 10**9 + 7\n    count = 0\n    for i in range(1, 10):\n        if i == 9:\n            count += 1\n            continue\n        for j in range(1, 10):\n            if j == 9:\n                count += 1\n                continue\n            for k in range(1, 10):\n                if k == 9:\n                    count += 1\n                    continue\n                if i == 0 or j == 0 or k == 0:\n                    if i == 0 and j == 0 and k == 0:\n                        continue\n                    count += 1\n    return str(count % mod)"
    },
    {
        "number": 4144,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin)\n    MOD = 10**9 + 7\n    \n    # Initialize variables\n    count = 0\n    \n    # Check all possible sequences of length N\n    for i in range(1, 10):\n        # Check if i is in the sequence\n        if '0' in str(i):\n            count += 1\n        if '9' in str(i):\n            count += 1\n        \n        # Check if i and 1-i are in the sequence\n        if '0' in str(i+1):\n            count += 1\n        if '0' in str(i-1):\n            count += 1\n        if '9' in str(i+1):\n            count += 1\n        if '9' in str(i-1):\n            count += 1\n        \n        # Check if there is a repeated digit\n        if i!= 0 and i!= 9:\n            if '0' in str(i):\n                count += 1\n            if '0' in str(i+1):\n                count += 1\n            if '9' in str(i):\n                count += 1\n            if '9' in str(i+1):\n                count += 1\n    \n    # Output answer modulo 10^9 + 7\n    return str(count % MOD) + '\\n'"
    },
    {
        "number": 4144,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.strip())\n    \n    # Initialize variables\n    count = 0\n    MOD = 10**9 + 7\n    \n    # Generate all possible sequences of length N\n    for i in range(10**N):\n        seq = [int(x) for x in str(i).zfill(N)]\n        \n        # Check if the sequence satisfies all conditions\n        if seq.count(0) > 0 and seq.count(9) > 0 and 0 in seq and 9 in seq:\n            count += 1\n    \n    # Return the count modulo 10^9 + 7\n    return str((count % MOD))"
    },
    {
        "number": 4144,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 10**9 + 7\n    N = int(stdin)\n    count = 0\n    for i in range(1, N+1):\n        # check if there is 0\n        if i == 1:\n            count += 1\n            continue\n        elif i == N:\n            if 9 in range(1, i):\n                count += 1\n            continue\n        elif i == 2:\n            if 9 in range(1, i) or 0 in range(1, i):\n                count += 1\n            continue\n        else:\n            if 9 in range(1, i) or 0 in range(1, i):\n                count += 1\n    return str(count % MOD)"
    },
    {
        "number": 4144,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    count = 1  # Sequence {0,9}\n    count += 1  # Sequence {1,8}\n    count += 1  # Sequence {2,7}\n    count += 1  # Sequence {3,6}\n    count += 1  # Sequence {4,5}\n    count += 1  # Sequence {5,4}\n    count += 1  # Sequence {6,3}\n    count += 1  # Sequence {7,2}\n    count += 1  # Sequence {8,1}\n    count += 1  # Sequence {9,0}\n    return str((count * pow(2, n, 10**9 + 7)) % (10**9 + 7))"
    },
    {
        "number": 4144,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.strip())\n\n    MOD = 10**9 + 7\n    count = 0\n\n    # for each possible length of the sequence\n    for length in range(1, N+1):\n        # generate all possible sequences of the given length\n        for sequence in itertools.product(range(10), repeat=length):\n            # check if the sequence satisfies all conditions\n            if any(seq[i] == 0 for i in range(length)) and any(seq[i] == 9 for i in range(length)):\n                count += 1\n\n    return str(count % MOD)"
    },
    {
        "number": 4144,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    N = int(stdin.strip())\n    \n    # Initialize variables\n    count = 0\n    modulo = 10**9 + 7\n    \n    # Check all possible sequences\n    for i in range(1, 10**N):\n        # Convert i to a list of digits\n        digits = list(map(int, str(i)))\n        \n        # Check if digit 0 exists\n        if 0 in digits:\n            # Check if digit 9 exists\n            if 9 in digits:\n                # Increment count\n                count += 1\n    \n    # Return count modulo 10^9 + 7\n    return str(count % modulo)"
    },
    {
        "number": 4144,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    modulo = 10**9 + 7\n    count = 0\n    \n    # All numbers from 0 to 9 can be used as the first number.\n    # So, we can generate all possible sequences of length n by using these numbers.\n    for first in range(10):\n        # Now, we need to find two numbers such that they are not equal and not equal to first.\n        # We can do this by checking all pairs of numbers from 0 to 9.\n        # If we find two numbers, we can check the remaining numbers to make sure they are not equal.\n        for second in range(10):\n            if second!= first and second!= 0 and second!= 9:\n                sequence = [first, second]\n                for i in range(2, n):\n                    # We need to find a number that is not equal to the previous one.\n                    # We can do this by checking all numbers from 0 to 9.\n                    for third in range(10):\n                        if third!= sequence[i-2] and third!= sequence[i-1] and third!= 0 and third!= 9:\n                            sequence.append(third)\n                            break\n                    else:  # If we couldn't find a number, it means the sequence doesn't satisfy the conditions.\n                        continue\n                    break\n                else:  # If we successfully found a sequence, it means it satisfies the conditions.\n                    count += 1\n    \n    return str(count % modulo)"
    },
    {
        "number": 4145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a number X, the function should find the minimum prime number greater than or equal to X.\n\n    Args:\n    stdin (str): Input string containing a number X.\n\n    Returns:\n    str: Minimum prime number greater than or equal to X.\n\n    \"\"\"\n    x = int(stdin.strip())\n    \n    # Initializing variables\n    i = 2\n    n = x\n    \n    # Finding the minimum prime number greater than or equal to X\n    while True:\n        is_prime = True\n        for j in range(2, int(n**0.5)+1):\n            if n % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return str(n)\n        n += 1\n        \n"
    },
    {
        "number": 4145,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read the input\n    X = int(stdin)\n    \n    # set a flag to indicate if X is prime\n    is_prime = True\n    \n    # loop through all numbers starting from X+1\n    for i in range(X+1, X*2):\n        # check if the current number is prime\n        for j in range(2, i):\n            if i%j == 0:\n                is_prime = False\n                break\n        # if the number is prime, return it\n        if is_prime:\n            return str(i)\n    \n    # if no prime number is found, return -1\n    return \"-1\""
    },
    {
        "number": 4145,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 2:\n        return str(2)\n    is_prime = [True] * (x+1)\n    is_prime[0], is_prime[1] = False, False\n    for i in range(2, int(x ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, x+1, i):\n                is_prime[j] = False\n    for i in range(x, -1, -1):\n        if is_prime[i]:\n            return str(i)"
    },
    {
        "number": 4145,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimum prime number greater than or equal to X.\n    Args:\n        stdin: A string containing the input X.\n    Returns:\n        A string containing the minimum prime number greater than or equal to X.\n    \"\"\"\n    X = int(stdin)\n    if X <= 1:\n        return \"2\"\n    for i in range(X, 2*X+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return str(i)\n    return \"Not found\""
    },
    {
        "number": 4145,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    prime_found = False\n    num = X\n    while not prime_found:\n        for i in range(2, num):\n            if num % i == 0:\n                num += 1\n                break\n        else:\n            prime_found = True\n    return str(num)\n"
    },
    {
        "number": 4145,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    i = X\n    while True:\n        if is_prime(i):\n            return str(i)\n        i += 1\n        \ndef"
    },
    {
        "number": 4145,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    if X < 2:\n        return \"2\"\n    for num in range(X, X*2):\n        if all(num%i!=0 for i in range(2,int(num**0.5)+1)):\n            return str(num)\n    return \"No prime number found\"\n\nprint(solution(input()))<|im_sep|>"
    },
    {
        "number": 4145,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.readline())\n    i = x\n    while True:\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return str(i)\n        i += 1"
    },
    {
        "number": 4145,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    X = int(stdin)\n    \n    # Initialize variables\n    is_prime = True\n    prime = X\n    \n    # Check if X is already prime\n    if X > 1:\n        for i in range(2, int(X**0.5)+1):\n            if X % i == 0:\n                is_prime = False\n                break\n    else:\n        is_prime = False\n    \n    # Find the minimum prime number\n    while not is_prime:\n        prime += 1\n        is_prime = True\n        if prime > X:\n            return str(prime)\n        for i in range(2, int(prime**0.5)+1):\n            if prime % i == 0:\n                is_prime = False\n                break\n                \n"
    },
    {
        "number": 4145,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    prime_count = 1\n    prime = 2\n    while prime <= X:\n        prime_count += 1\n        prime += prime_count\n    return str(prime)\n\nprint(solution(input()))"
    },
    {
        "number": 4146,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, nums = list(map(int, stdin.strip().split()))\n\n    # check if n is even\n    if n % 2!= 0:\n        return \"Invalid input\"\n\n    # check if there are exactly two different numbers in the sequence\n    if len(set(nums))!= 2:\n        return \"Invalid input\"\n\n    # check if the sequence is already /\\/\\/\\/\n    i = 0\n    while i < n - 2:\n        if nums[i]!= nums[i+2]:\n            return \"Invalid input\"\n        i += 2\n\n    # find the minimum number of elements that needs to be replaced\n    i = 0\n    while i < n - 2:\n        if nums[i]!= nums[i+2]:\n            break\n        i += 2\n\n    # the minimum number of elements that needs to be replaced is i+1\n    return str(i+1)\n"
    },
    {
        "number": 4146,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, v = map(int, stdin.strip().split())\n    a = [v[i] for i in range(n)]\n    c = 0\n    for i in range(n-2):\n        if a[i]!= a[i+2]:\n            c += 1\n            if c == 2:\n                break\n    return c"
    },
    {
        "number": 4146,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    v = list(map(int, stdin.readline().strip().split()))\n    \n    count = 0\n    i = 0\n    while i < n-2:\n        if v[i] == v[i+2]:\n            i += 2\n        else:\n            count += 1\n            i += 1\n    \n    return count"
    },
    {
        "number": 4146,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *v = map(int, stdin.strip().split())\n    # check if sequence is /\\/\\/\\/\n    if all(v[i] == v[i+2] for i in range(n-2)) and len(set(v)) == n//2:\n        return \"0\"\n    # replace one element\n    else:\n        count = 1\n        for i in range(1, n-2, 2):\n            if v[i]!= v[i+2]:\n                break\n            count += 1\n        return str(count)"
    },
    {
        "number": 4146,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, v = stdin.splitlines()\n    n = int(n)\n    v = [int(x) for x in v.split()]\n    \n    if v[0]!= v[2] or v[-1]!= v[-3]:\n        return str(0)\n    \n    for i in range(2, n-2, 2):\n        if v[i]!= v[i+2]:\n            return str(1)\n    \n    return str(0)\n"
    },
    {
        "number": 4146,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    n = int(stdin.readline().strip())\n    v = list(map(int, stdin.readline().strip().split()))\n\n    # Check if the sequence is /\\/\\/\\/\n    if n % 2!= 0:\n        return \"0\"\n\n    # Check if the sequence is /\\/\\/\\/\n    for i in range(n - 2):\n        if v[i]!= v[i + 2]:\n            return \"0\"\n\n    # Count the number of unique elements in the sequence\n    unique = set(v)\n    if len(unique)!= 2:\n        return \"0\"\n\n    # Count the number of elements that need to be replaced\n    count = 0\n    for i in range(n - 2):\n        if v[i]!= v[i + 2]:\n            count += 1\n\n    # Print the result\n    return str(count)"
    },
    {
        "number": 4146,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    values = list(map(int, stdin.readline().strip().split()))\n\n    # Check if the sequence is already /\\/\\/\\/\n    if values[0] == values[2] and values[1] == values[3]:\n        return str(0)\n\n    # Check if the sequence has exactly two different numbers\n    unique_values = set(values)\n    if len(unique_values)!= 2:\n        return str(-1)\n\n    # Check if the sequence satisfies the conditions\n    for i in range(2, n-2, 2):\n        if values[i]!= values[i+2]:\n            return str(-1)\n\n    # Check if we can make the sequence /\\/\\/\\/ by replacing two elements\n    for i in range(2, n-2, 2):\n        if values[i] == values[i+2]:\n            values[i+1] = values[i]\n            values[i+3] = values[i+2]\n            return str(2)\n\n    # If we reach here, the sequence cannot be made /\\/\\/\\/\n    return str(-1)"
    },
    {
        "number": 4146,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = map(int, stdin.strip().split())\n    v_sequence = list(map(int, stdin.strip().split()))\n    count = 0\n    for i in range(n-2):\n        if v_sequence[i] == v_sequence[i+2]:\n            count += 1\n    if count == 2:\n        return \"0\"\n    else:\n        return str(n-2-count)"
    },
    {
        "number": 4146,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    v = list(map(int, stdin.readline().split()))\n\n    # Check if the sequence is already /\\/\\/\\/\n    for i in range(n-1):\n        if v[i]!= v[i+2]:\n            return \"0\"\n\n    # Count the number of distinct elements\n    distinct_elements = len(set(v))\n    if distinct_elements!= 2:\n        return \"0\"\n\n    # Replace half of the elements to make the sequence /\\/\\/\\/\n    num_replacements = n // 2\n    for i in range(num_replacements):\n        v[i] = v[num_replacements + i]\n\n    return str(num_replacements)"
    },
    {
        "number": 4146,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, v = map(int, stdin.strip().split())\n    v = list(map(int, stdin.strip().split()))\n    count = 0\n    for i in range(n-2):\n        if v[i]!= v[i+2]:\n            count += 1\n    if count == 2:\n        return \"0\"\n    else:\n        return str(count)"
    },
    {
        "number": 4147,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    ls = list(map(int, stdin.split()))\n    \n    mp_needed = 0\n    ls = sorted(ls)\n    \n    # Obtain a bamboo of length A\n    if ls[0] < A:\n        mp_needed += (A - ls[0]) * len(ls)\n        ls = [A] + ls[1:]\n    \n    # Obtain bamboos of lengths B, C\n    for i in range(len(ls)):\n        if ls[i] == B:\n            continue\n        if ls[i] < C:\n            mp_needed += (C - ls[i]) * (len(ls) - i)\n            ls = ls[:i] + [C] + ls[i+1:]\n        else:\n            mp_needed += (B - ls[i]) * (len(ls) - i)\n            ls = ls[:i] + [B] + ls[i+1:]\n            break\n    \n    # Obtain a bamboo of length C\n    if ls[0] < C:\n        mp_needed += (C - ls[0]) * len(ls)\n        ls = [C] + ls[1:]\n    \n    return str(mp_needed)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4147,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.readline().strip().split())\n    lengths = list(map(int, stdin.readline().strip().split()))\n    mp = 0\n    for i in range(N):\n        if lengths[i] == C:\n            mp += 1\n            continue\n        if lengths[i] >= B:\n            mp += 1\n            lengths[i] -= 1\n            continue\n        if lengths[i] >= 2 and lengths[i] + mp >= A:\n            mp += 1\n            lengths[i] -= 1\n            continue\n        if lengths[i] + mp + 10 <= B:\n            mp += 1\n            lengths[i] -= 1\n            continue\n        if lengths[i] >= B and lengths[i] + mp + 10 <= C:\n            mp += 1\n            lengths[i] -= 1\n            continue\n        if lengths[i] >= 2 and lengths[i] + mp + 10 <= C:\n            mp += 1\n            lengths[i] -= 1\n            continue\n    print(mp)"
    },
    {
        "number": 4147,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, a, b, c = map(int, stdin.readline().split())\n    lengths = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    mp_used = 0\n    bamboos = lengths\n    bamboos.sort()\n\n    # Loop until we have three bamboos of length a, b, c\n    while len(bamboos) < 3 or bamboos[0]!= a or bamboos[1]!= b or bamboos[-1]!= c:\n        # Try using Extension Magic twice on the smallest bamboo\n        if len(bamboos) >= 2 and mp_used + 2 <= 10 and bamboos[0] == bamboos[1] - 1:\n            mp_used += 2\n            bamboos[0] += 1\n            bamboos.sort()\n            continue\n\n        # Try using Composition Magic on the two smallest bamboos\n        if len(bamboos) >= 2 and mp_used + 10 <= 10 and bamboos[0] + bamboos[1] == c:\n            mp_used += 10\n            bamboos.pop(0)\n            bamboos.pop(0)\n            bamboos.append(c)\n            bamboos.sort()\n            continue\n\n        # Try using Shortening Magic on the smallest bamboo with length at least 2\n        if len(bamboos) >= 1 and mp_used + 1 <= 10 and bamboos[0] > 2:\n            mp_used += 1\n            bamboos[0] -= 1\n            bamboos.sort()\n            continue\n\n        # If we reach here, we cannot use any magic to obtain the desired bamboos\n        return \"IMPOSSIBLE\"\n\n    # Return the minimum MP needed\n    return str(mp_used)\n\nstdin = \"\"\"\n5 100 90 80\n98\n40\n30\n21\n80\n\"\"\"\n\nprint(solution(stdin)) # Output: 23"
    },
    {
        "number": 4147,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, a, b, c = map(int, stdin.split()[0:4])\n    lengths = list(map(int, stdin.split()[4:]))\n    \n    # initialize variables\n    mp_needed = 0\n    \n    # sort lengths\n    lengths.sort()\n    \n    # handle case where a bamboo of length c is already present\n    if c in lengths:\n        mp_needed += 1\n        lengths.remove(c)\n    \n    # handle case where bamboo a is not present\n    if a not in lengths:\n        mp_needed += 1\n        lengths.append(a)\n    \n    # handle case where bamboo b is not present\n    if b not in lengths:\n        mp_needed += 1\n        lengths.append(b)\n    \n    # use extension magic to obtain bamboos of length a and b\n    for i in range(len(lengths)):\n        if lengths[i] < a and mp_needed < 2:\n            mp_needed += 1\n            lengths[i] += 1\n        elif lengths[i] < b and mp_needed < 3:\n            mp_needed += 1\n            lengths[i] += 1\n        elif lengths[i] >= a and lengths[i] < b and mp_needed < 4:\n            mp_needed += 1\n            lengths[i] += 1\n    \n    # use composition magic to obtain bamboos of length c\n    for i in range(len(lengths)):\n        if lengths[i] >= a and lengths[i] < b:\n            mp_needed += 10\n            lengths[i] = c\n            break\n    \n    # use shortening magic to obtain bamboos of length c\n    for i in range(len(lengths)):\n        if lengths[i] >= c:\n            mp_needed += 1\n            lengths[i] -= 1\n    \n    # return mp needed\n    return str(mp_needed)"
    },
    {
        "number": 4147,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split(\"\\n\")\n    n = int(lines[0])\n    a, b, c = map(int, lines[1].split())\n    lengths = list(map(int, lines[2:]))\n\n    # Initialize variables\n    mp = 0\n    bamboos = lengths.copy()\n\n    # Use Extension Magic twice on the bamboo of length 98 to obtain a bamboo of length 100.\n    if 98 in bamboos:\n        mp += 2\n        bamboos[bamboos.index(98)] = 100\n\n    # Use Composition Magic on the bamboos of lengths 40, 30 to obtain a bamboo of length 70.\n    if 40 in bamboos and 30 in bamboos:\n        mp += 10\n        bamboos[bamboos.index(40)] = 70\n\n    # Use Shortening Magic once on the bamboo of length 21 to obtain a bamboo of length 20.\n    if 21 in bamboos:\n        mp += 1\n        bamboos[bamboos.index(21)] = 20\n\n    # Use Composition Magic on the bamboo of length 70 obtained in step 2 and the bamboo of length 20 obtained in step 3 to obtain a bamboo of length 90.\n    if 70 in bamboos and 20 in bamboos:\n        mp += 10\n        bamboos[bamboos.index(70)] = 90\n\n    # Check if we have obtained the three required bamboos of lengths a, b, c\n    if a in bamboos and b in bamboos and c in bamboos:\n        return str(mp)\n\n    # If not, compute the minimum MP needed to achieve the objective\n    mp_needed = min(\n        len(lengths) - 1,\n        a + b + c - lengths[0] - lengths[1] - lengths[2]\n    )\n    return str(mp + mp_needed)\n"
    },
    {
        "number": 4147,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.readline().split())\n    lengths = list(map(int, stdin.readline().split()))\n    \n    mp = 0\n    \n    # Use Extension Magic twice on the bamboo of length 98 to obtain a bamboo of length 100\n    i = lengths.index(98)\n    if i >= 0:\n        mp += 2\n        lengths[i] = 100\n    \n    # Use Composition Magic on the bamboos of lengths 40, 30 to obtain a bamboo of length 70\n    i = lengths.index(40)\n    j = lengths.index(30)\n    if i >= 0 and j >= 0:\n        mp += 10\n        lengths.pop(i)\n        lengths.pop(j)\n        lengths.append(70)\n    \n    # Use Shortening Magic once on the bamboo of length 21 to obtain a bamboo of length 20\n    i = lengths.index(21)\n    if i >= 0:\n        mp += 1\n        lengths[i] = 20\n    \n    # Use Composition Magic on the bamboo of length 70 obtained in step 2 and the bamboo of length 20 obtained in step 3 to obtain a bamboo of length 90\n    i = lengths.index(70)\n    j = lengths.index(20)\n    if i >= 0 and j >= 0:\n        mp += 10\n        lengths.pop(i)\n        lengths.pop(j)\n        lengths.append(90)\n    \n    # Use Composition Magic on the bamboos of lengths 100, 90, 80 to obtain a bamboo of length A, B, C\n    i = lengths.index(100)\n    j = lengths.index(90)\n    k = lengths.index(80)\n    if i >= 0 and j >= 0 and k >= 0:\n        mp += 10\n        lengths.pop(i)\n        lengths.pop(j)\n        lengths.pop(k)\n        lengths.append(a)\n        lengths.append(b)\n        lengths.append(c)\n    \n    return str(mp)"
    },
    {
        "number": 4147,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a string of input, this function returns the minimum amount of MP needed to achieve the objective.\n\n    Args:\n    - stdin (str): The input string containing the length of the bamboos and the length of three required bamboos.\n\n    Returns:\n    - str: The minimum amount of MP needed to achieve the objective.\n    \"\"\"\n    # Parse the input string\n    lines = stdin.strip().split(\"\\n\")\n    n = int(lines[0])\n    a, b, c = map(int, lines[1].split())\n    lengths = list(map(int, lines[2:]))\n\n    # Initialize variables\n    mp = 0\n    bamboos = lengths.copy()\n\n    # Sort the bamboos in ascending order\n    bamboos.sort()\n\n    # Use Extension Magic to obtain a bamboo of length a\n    while True:\n        index = bamboos.index(a)\n        if index == 0:\n            break\n        bamboos[index] -= 1\n        mp += 1\n\n    # Use Composition Magic to obtain a bamboo of length b\n    index = bamboos.index(b)\n    bamboos[index] = a + b\n    mp += 10\n\n    # Use Shortening Magic to obtain a bamboo of length c\n    for i in range(len(bamboos)):\n        if bamboos[i] >= c:\n            bamboos[i] = c\n            mp += 1\n            break\n\n    return str(mp)"
    },
    {
        "number": 4147,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, a, b, c = map(int, stdin.split())\n    lengths = list(map(int, stdin.split()))\n    \n    # Initialize variables\n    mp = 0\n    i = 0\n    \n    # Use Extension Magics to obtain bamboos of lengths a, b\n    while i < n and lengths[i] < a:\n        mp += 1\n        lengths[i] += 1\n        i += 1\n    while i < n and lengths[i] < b:\n        mp += 1\n        lengths[i] += 1\n        i += 1\n    \n    # Use Composition Magics to obtain bamboos of length c\n    while i < n and lengths[i] < c:\n        if i == n-1:\n            return \"Impossible\"\n        mp += 10\n        lengths[i] += lengths[i+1]\n        lengths.pop(i+1)\n    \n    # Check if we have enough MP\n    if mp < 10:\n        return \"Impossible\"\n    return str(mp)"
    },
    {
        "number": 4147,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a, b, c = map(int, lines[1].split())\n    ls = list(map(int, lines[2:]))\n    mp = 0\n    while True:\n        if all(l == a for l in ls):\n            return str(mp)\n        if all(l == b for l in ls):\n            return str(mp)\n        if all(l == c for l in ls):\n            return str(mp)\n        if all(l > b for l in ls):\n            return str(mp)\n        for i in range(n):\n            for j in range(i+1, n):\n                if ls[i] + ls[j] == b:\n                    ls[i] += ls[j]\n                    ls.pop(j)\n                    mp += 10\n                    break\n                elif ls[i] + ls[j] > b:\n                    break\n            else:\n                continue\n            break\n        for i in range(n):\n            if ls[i] > 2:\n                ls[i] -= 1\n                mp += 1\n                break\n        else:\n            return str(-1)"
    },
    {
        "number": 4147,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, a, b, c = map(int, stdin.readline().strip().split())\n    lengths = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    mp = 0\n    bamboos = lengths.copy()\n\n    # sort bamboos in decreasing order\n    bamboos.sort(reverse=True)\n\n    # first magic\n    for i in range(n):\n        if bamboos[i] >= a:\n            bamboos[i] = a\n            mp += 1\n            break\n\n    # second magic\n    for i in range(n):\n        if bamboos[i] >= b:\n            bamboos[i] = b\n            mp += 1\n            break\n\n    # third magic\n    for i in range(n):\n        for j in range(i+1, n):\n            if bamboos[i] + bamboos[j] == c:\n                bamboos[i] += bamboos[j]\n                del bamboos[j]\n                mp += 10\n                break\n\n    # fourth magic\n    for i in range(n):\n        if bamboos[i] >= c:\n            bamboos[i] = c\n            mp += 1\n            break\n\n    # output result\n    return str(mp)\n"
    },
    {
        "number": 4148,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.strip().split()\n    n = int(n)\n    s = list(s)\n    s.sort()\n    s = [chr((ord(c) - 65 + n) % 26 + 65) for c in s]\n    return ''.join(s)"
    },
    {
        "number": 4148,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    shifted_alphabet = alphabet[n:] + alphabet[:n]\n    shifted_s = \"\"\n    for c in s:\n        if c in alphabet:\n            shifted_c = shifted_alphabet[alphabet.index(c):alphabet.index(c)+1]\n            shifted_s += shifted_c\n        else:\n            shifted_s += c\n    return shifted_s\n\nstdin = \"\"\"\n2\nABCXYZ\n\"\"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4148,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    alphabets = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    shifted_s = ''\n    for c in s:\n        if c in alphabets:\n            idx = alphabets.index(c)\n            shifted_c = alphabets[(idx+n)%26]\n            shifted_s += shifted_c\n        else:\n            shifted_s += c\n    return shifted_s"
    },
    {
        "number": 4148,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    # Sort the string\n    sorted_s = sorted(s)\n    \n    # Shift each character by n\n    shifted_s = ''\n    for c in sorted_s:\n        shifted_c = chr((ord(c) - ord('A') + n) % 26 + ord('A'))\n        shifted_s += shifted_c\n    \n    return shifted_s"
    },
    {
        "number": 4148,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split('\\n')\n    N = int(N)\n    S = list(S)\n    for i in range(len(S)):\n        if S[i] == 'Z':\n            S[i] = 'A'\n        else:\n            S[i] = chr(ord(S[i])+N)\n    return ''.join(S)\n\nprint(solution(\"2\\nABCXYZ\")) # Output: CDEZAB"
    },
    {
        "number": 4148,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    S = stdin.readline().strip()\n\n    # Shift each character of S by N in alphabetical order\n    result = \"\"\n    for c in S:\n        if c == \"Z\":\n            result += \"A\"\n        else:\n            result += chr((ord(c) - ord('A') + N) % 26 + ord('A'))\n\n    # Print the resulting string\n    print(result)\n\n    return result\n"
    },
    {
        "number": 4148,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.strip().split('\\n')\n    n = int(n)\n    s = list(s)\n    for i in range(len(s)):\n        s[i] = chr((ord(s[i]) - ord('A') + n) % 26 + ord('A'))\n    return ''.join(s)"
    },
    {
        "number": 4148,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split('\\n')\n    n = int(n)\n    result = ''\n    for char in s:\n        if char == 'Z':\n            result += 'A'\n        else:\n            index = ord(char) - ord('A')\n            shifted_index = (index + n) % 26\n            shifted_char = chr(shifted_index + ord('A'))\n            result += shifted_char\n    return result"
    },
    {
        "number": 4148,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n\n    # Build a mapping of characters to shifted characters\n    mapping = {}\n    for c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        mapping[c] = chr((ord(c) - ord('A') + N) % 26 + ord('A'))\n\n    # Apply the mapping to each character in S\n    result = ''\n    for c in S:\n        if c in mapping:\n            result += mapping[c]\n        else:\n            result += c\n\n    return result"
    },
    {
        "number": 4148,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.strip().split('\\n')\n    n = int(n)\n    res = ''\n    for c in s:\n        if c == 'Z':\n            res += 'A'\n        else:\n            res += chr(ord(c) + n)\n    return res"
    },
    {
        "number": 4149,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    b = [int(x) for x in stdin.split('\\n')[1].split()]\n    a = []\n    for i in range(n):\n        if is_prime(b[i]):\n            a.append(b[i])\n            p = prime()\n            a.append(p[b[i]-2])\n        else:\n            for j in range(2, b[i]):\n                if b[i] % j == 0:\n                    a.append(j)\n                    break\n    a += b\n    shuffle(a)\n    return''.join(str(x) for x in a)\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = [int(x) for x in stdin.readline().split()]\n\n    a = []\n    for i in range(n):\n        if is_prime(b[i]):\n            a.append(b[i])\n            for j in itertools.count(2):\n                if is_prime(j):\n                    a.append(j)\n                    break\n        else:\n            a.append(max(j for j in range(2, b[i]) if b[i] % j == 0))\n\n    return \" \".join(str(x) for x in a)\n\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()))\n\n    a = []\n    for i in range(n):\n        if is_prime(b[2*i]):\n            a.append(p_prime(b[2*i]))\n        else:\n            for j in range(2*i+1, n):\n                if b[j] % b[2*i] == 0:\n                    a.append(b[j] // b[2*i])\n                    break\n\n    print(' '.join(map(str, a)))\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = stdin.readline().strip().split()\n    b = list(map(int, b))\n\n    a = [b[i] for i in range(n)]\n    for i in range(n):\n        if is_prime(b[i]):\n            p = prime_sequence()\n            while len(p) < a[i]:\n                p = prime_sequence(p[-1])\n            a.append(p[a[i]-1])\n        else:\n            for j in range(b[i], 2, -1):\n                if b[i] % j == 0:\n                    a.append(j)\n                    break\n\n    return''.join(map(str, a))\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    a = []\n    for i in range(n):\n        if is_prime(b[i]):\n            a.append(b[i])\n            while True:\n                p = next_prime()\n                if p > b[i]:\n                    break\n                a.append(p)\n        else:\n            for j in range(b[i], 1, -1):\n                if b[i] % j == 0:\n                    a.append(j)\n                    break\n    random.shuffle(a)\n    return''.join(map(str, a))\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    b = [int(x) for x in stdin.split('\\n')[1].split()]\n    a = [0] * n\n    i, j, k = 0, 0, 0\n    for i in range(n):\n        if is_prime(b[i]):\n            a[i] = b[i]\n            k = 1\n            while k <= 100000:\n                a[i] += p[j]\n                j = (j + 1) % len(p)\n                if is_prime(a[i]):\n                    k = 100001\n                else:\n                    k += 1\n        else:\n            a[i] = b[i]\n            for j in range(2, b[i]):\n                if b[i] % j == 0:\n                    a[i] = j\n                    break\n    return''.join(map(str, a))\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n    \n    a = []\n    for i in range(n):\n        if b[i] in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]:\n            a.append(b[i])\n        else:\n            for j in range(b[i]-1, 1, -1):\n                if b[i]%j == 0:\n                    a.append(j)\n                    break\n    \n    print(\" \".join(map(str, a)))\n"
    },
    {
        "number": 4149,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()))\n    a = []\n    for i in range(n):\n        if is_prime(b[i]):\n            p = primes()\n            while True:\n                p_i = next(p)\n                if p_i > b[i]:\n                    break\n            a.append(p_i)\n        else:\n            divisor = find_divisor(b[i])\n            a.append(divisor)\n    shuffle(a)\n    return''.join(map(str, a))\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n    \n    a = [0] * n\n    primes = []\n    for i in range(2, 2750131):\n        if all(i % j!= 0 for j in primes):\n            primes.append(i)\n    \n    for i in range(n):\n        if b[i] in primes:\n            p = primes[primes.index(b[i]):]\n            a[i] = p[-1]\n        else:\n            for j in range(b[i] - 1, 1, -1):\n                if b[i] % j == 0:\n                    a[i] = j\n                    break\n    \n    return''.join(map(str, a))"
    },
    {
        "number": 4149,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    n = int(stdin.split()[0])\n    b = [int(x) for x in stdin.split()[1:]]\n\n    # Recover a from b\n    a = []\n    for i in range(n):\n        if is_prime(b[i]):\n            a.append(prime_count(b[i]))\n        else:\n            divisor = get_divisor(b[i])\n            a.append(divisor)\n\n    # Return the recovered a\n    return''.join(map(str, a))\n\ndef"
    },
    {
        "number": 4150,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # make a list to keep track of students in each team\n    team1 = [False] * n\n    team2 = [False] * n\n    # find the initial position of the first coach\n    first_coach_pos = a.index(max(a))\n    # move the coach to the left until k students are chosen\n    team1[first_coach_pos] = True\n    for i in range(first_coach_pos - 1, -1, -1):\n        if a[i] == 1:\n            break\n        team1[i] = True\n        if len(team1) == n:\n            break\n    for i in range(first_coach_pos + 1, n):\n        if a[i] == 1:\n            break\n        team1[i] = True\n        if len(team1) == n:\n            break\n    # move the coach to the right until k students are chosen\n    for i in range(first_coach_pos - 1, -1, -1):\n        if a[i] == 1:\n            break\n        team2[i] = True\n        if len(team2) == n:\n            break\n    for i in range(first_coach_pos + 1, n):\n        if a[i] == 1:\n            break\n        team2[i] = True\n        if len(team2) == n:\n            break\n    # move the two coaches until the row becomes empty\n    first_coach_pos = (first_coach_pos - k) % n\n    second_coach_pos = (first_coach_pos + k) % n\n    while len(team1) + len(team2) < n:\n        # move the first coach to the left\n        for i in range(first_coach_pos - 1, -1, -1):\n            if a[i] == 1:\n                break\n            team1[i] = True\n            if len(team1) == n:\n                break\n        for i in range(first_coach_pos + 1, n):\n            if a[i] == 1:\n                break\n            team1[i] = True\n            if len(team1) == n:\n                break\n        # move the second coach to the right\n        for i in range(second_coach_pos - 1, -1, -1):\n            if a[i] == 1:\n                break\n            team2[i] = True\n            if len(team2) == n:\n                break\n        for i in range(second_coach_pos + 1, n):\n            if a[i] == 1:\n                break\n            team2[i] = True\n            if len(team2) == n:\n                break\n        # move the two coaches\n        first_coach_pos = (first_coach_pos - k) % n\n        second_coach_pos = (second_coach_pos + k) % n\n    # combine the two lists into a single string\n    return ''.join(map(str, team1 + team2))\n"
    },
    {
        "number": 4150,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def choose_student(start, end):\n        max_skill = -1\n        max_skill_students = []\n        for i in range(start, end+1):\n            if a[i] > max_skill:\n                max_skill = a[i]\n                max_skill_students = [i]\n            elif a[i] == max_skill:\n                max_skill_students.append(i)\n        return max_skill_students\n\n    def get_closest(i, k, side):\n        if side == 'left':\n            start = max(0, i-k)\n            end = i\n        elif side == 'right':\n            start = i\n            end = min(n-1, i+k)\n        else:\n            raise ValueError('Invalid side')\n        return [i for i in range(start, end+1) if i!= i]\n\n    teams = []\n    for i in range(n):\n        if len(teams) == 0:\n            teams.append([i])\n        elif len(teams) == 1:\n            if len(teams[0]) < k:\n                closest = get_closest(i, k, 'left') + get_closest(i, k, 'right')\n                closest = [j for j in closest if j not in teams[0]]\n                teams.append([i] + closest)\n            else:\n                teams.append([i])\n        elif len(teams[0]) < k and len(teams[1]) < k:\n            closest = get_closest(i, k, 'left') + get_closest(i, k, 'right')\n            closest = [j for j in closest if j not in teams[0] and j not in teams[1]]\n            teams.append([i] + closest)\n        else:\n            teams.append([i])\n        if len(teams[0]) == n or len(teams[1]) == n:\n            break\n\n    team_1 = [a[i] for i in teams[0]]\n    team_2 = [a[i] for i in teams[1]]\n\n    def get_team(i):\n        for j in range(len(teams)):\n            if i in teams[j]:\n                return j+1\n\n    return ''.join(str(get_team(i)) for i in range(n))"
    },
    {
        "number": 4150,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    teams = [[], []]\n    for i in range(n):\n        if i % 2 == 0:\n            teams[0].append(i)\n        else:\n            teams[1].append(i)\n\n    i = 0\n    while len(teams[0]) > 0 and len(teams[1]) > 0:\n        i += 1\n        first_team = teams[i % 2]\n        second_team = teams[(i + 1) % 2]\n        first_team.sort(key=lambda x: a[x], reverse=True)\n        second_team.sort(key=lambda x: a[x], reverse=True)\n        if i % 2 == 0:\n            chosen = first_team[:k]\n            for j in chosen:\n                teams[(i + 1) % 2].append(j)\n                a[j] = -1\n            for j in second_team:\n                if a[j]!= -1 and len(chosen) < k:\n                    chosen.append(j)\n                    a[j] = -1\n        else:\n            chosen = second_team[:k]\n            for j in chosen:\n                teams[(i + 1) % 2].append(j)\n                a[j] = -1\n            for j in first_team:\n                if a[j]!= -1 and len(chosen) < k:\n                    chosen.append(j)\n                    a[j] = -1\n        for j in chosen:\n            teams[i % 2].remove(j)\n\n    return \"\".join(str(i % 2 + 1) for i in teams[0] + teams[1])"
    },
    {
        "number": 4150,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    if n == 1:\n        return '1'\n\n    if k >= n:\n        return '1' * n\n\n    taken = [False] * n\n\n    # first coach\n    chosen = [0] * k\n    for i in range(k):\n        chosen[i] = i + 1\n    chosen[k-1] = n - 1\n    for i in range(k, n-k):\n        chosen[i] = i + 1\n    chosen[n-k-1] = n - 1\n    for i in range(n):\n        if taken[chosen[i] - 1]:\n            continue\n        taken[chosen[i] - 1] = True\n\n    # second coach\n    chosen = [0] * k\n    for i in range(k):\n        chosen[i] = i + 1\n    chosen[k-1] = n - 2\n    for i in range(k, n-k):\n        chosen[i] = i + 1\n    chosen[n-k-1] = n - 2\n    for i in range(n):\n        if taken[chosen[i] - 1]:\n            continue\n        taken[chosen[i] - 1] = True\n\n    # third coach\n    chosen = [0] * k\n    for i in range(k):\n        chosen[i] = i + 1\n    chosen[k-1] = n - 3\n    for i in range(k, n-k):\n        chosen[i] = i + 1\n    chosen[n-k-1] = n - 3\n    for i in range(n):\n        if taken[chosen[i] - 1]:\n            continue\n        taken[chosen[i] - 1] = True\n\n    # fourth coach\n    chosen = [0] * k\n    for i in range(k):\n        chosen[i] = i + 1\n    chosen[k-1] = n - 4\n    for i in range(k, n-k):\n        chosen[i] = i + 1\n    chosen[n-k-1] = n - 4\n    for i in range(n):\n        if taken[chosen[i] - 1]:\n            continue\n        taken[chosen[i] - 1] = True\n\n    # fifth coach\n    chosen = [0] * k\n    for i in range(k):\n        chosen[i] = i + 1\n    chosen[k-1] = n - 5\n    for i in range(k, n-k):\n        chosen[i] = i + 1\n    chosen[n-k-1] = n - 5\n    for i in range(n):\n        if taken[chosen[i] - 1]:\n            continue\n        taken[chosen[i] - 1] = True\n\n    # sixth coach\n    chosen = [0] * k\n    for i in range(k):\n        chosen[i] = i + 1\n    chosen[k-1] = n - 6\n    for i in range(k, n-k):\n        chosen[i] = i + 1\n    chosen[n-k-1] = n - 6\n    for i in range(n):\n        if taken[chosen[i] - 1]:\n            continue\n        taken[chosen[i] - 1] = True\n\n    # seventh coach\n    chosen = [0] * k\n    for i in range(k):\n        chosen[i] = i + 1\n    chosen[k-1] = n - 7\n    for i in range(k, n-k):\n        chosen[i] = i + 1\n    chosen[n-k-1] = n - 7\n    for i in range(n):\n        if taken[chosen[i] - 1]:\n            continue\n        taken[chosen[i] - 1] = True\n\n    # eighth coach\n    chosen = [0] * k\n    for i in range(k):\n        chosen[i] = i + 1\n    chosen[k-1] = n - 8\n    for i in range(k, n-k):\n        chosen[i] = i + 1\n    chosen[n-k-1] = n - 8\n    for i in range(n):\n        if taken[chosen[i] - 1]:\n            continue\n        taken[chosen[i] - 1] = True\n\n    # ninth coach\n    chosen = [0] * k\n    for i in range(k):\n        chosen[i] = i + 1\n    chosen[k-1] = n - 9\n    for i"
    },
    {
        "number": 4150,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = list(map(int, stdin.split()))\n    first_team, second_team = [], []\n    i = 0\n    while i < n:\n        max_skill = skills[i]\n        left_range = [j for j in range(max(0, i - k), i) if skills[j] == max_skill]\n        right_range = [j for j in range(i + 1, min(i + k, n)) if skills[j] == max_skill]\n        if not left_range:\n            left_range = [j for j in range(0, i) if skills[j] == max_skill]\n        if not right_range:\n            right_range = [j for j in range(i + 1, n) if skills[j] == max_skill]\n        first_team += [skills.pop(i) for j in left_range] + [skills.pop(i) for j in right_range]\n        i = max(i - len(left_range), i - len(right_range))\n        second_team += [skills.pop(i)]\n        i = max(i - 1, 0)\n    return ''.join(map(str, first_team + second_team))\n\n\ndef"
    },
    {
        "number": 4150,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    \n    # sort the list of skills\n    a.sort()\n    \n    # initialize variables\n    first = second = []\n    j = 0\n    \n    # loop until all students are taken into a team\n    while len(first) + len(second) < n:\n        # find the index of the student to be added to first team\n        i = j\n        while i < n and a[i] <= a[j]:\n            i += 1\n        if i == n:\n            i = n - 1\n        first.append(i)\n        j = i\n        \n        # find the index of the student to be added to second team\n        i = j\n        while i >= 0 and a[i] >= a[j]:\n            i -= 1\n        if i == -1:\n            i = 0\n        second.append(i)\n        j = i\n        \n    # construct the output string\n    res = \"\"\n    for i in range(n):\n        if i in first:\n            res += \"1\"\n        else:\n            res += \"2\"\n            \n    return res"
    },
    {
        "number": 4150,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    chosen = set()\n    res = [0] * n\n    for i in range(n):\n        left = max(chosen.union(set(range(i)))).left\n        right = min(chosen.union(set(range(i, n)))).right\n        res[i] = a[left:right+1].index(max(a[left:right+1])) + left + 1\n        chosen.add(res[i]-1)\n    return ''.join(map(str, res))\n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n    def __lt__(self, other):\n        return self.val < other.val\n\ndef"
    },
    {
        "number": 4150,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # create a list of students, sorted by their programming skill\n    students = sorted([(a[i], i) for i in range(n)], reverse=True)\n\n    # initialize teams\n    team1 = [0] * n\n    team2 = [0] * n\n\n    # initialize pointers\n    i1 = 0\n    i2 = n - 1\n\n    # loop until all students have been placed into a team\n    while len(students) > 0:\n        # first coach chooses the student with maximum programming skill among all students not taken into any team\n        if team1[i1] == 0 and team2[i2] == 0:\n            team1[i1] = students[0][1]\n            students.pop(0)\n            i1 += 1\n\n        # first coach chooses the $k$ closest students to the left of him and $k$ closest students to the right of him\n        if team1[i1] == 0 and team2[i2] == 0:\n            j1 = max(0, i1 - k)\n            j2 = min(n - 1, i2 + k)\n            for j in range(j1, j2 + 1):\n                if team1[j] == 0 and team2[j] == 0:\n                    team1[j] = students[0][1]\n                    students.pop(0)\n\n        # second coach chooses the student with maximum programming skill among all students not taken into any team\n        if team1[i1] == 0 and team2[i2] == 0:\n            team2[i2] = students[0][1]\n            students.pop(0)\n            i2 -= 1\n\n        # second coach chooses the $k$ closest students to the left of him and $k$ closest students to the right of him\n        if team1[i1] == 0 and team2[i2] == 0:\n            j1 = max(0, i1 - k)\n            j2 = min(n - 1, i2 + k)\n            for j in range(j2, j1 - 1, -1):\n                if team1[j] == 0 and team2[j] == 0:\n                    team2[j] = students[0][1]\n                    students.pop(0)\n\n        # update pointers\n        i1 = max(i1 - 1, 0)\n        i2 = min(i2 + 1, n - 1)\n\n    # convert teams to output string\n    return ''.join(map(str, team1 + team2))\n\ndef"
    },
    {
        "number": 4150,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    teams = [[] for _ in range(n)]\n    taken = [False] * n\n\n    def choose_team(coach, team):\n        for i in range(n):\n            if taken[i]:\n                continue\n\n            if i < coach:\n                if coach - i <= k:\n                    for j in range(max(0, i - k), i):\n                        teams[team].append(j)\n                else:\n                    for j in range(max(0, i - k), coach):\n                        teams[team].append(j)\n            elif i > coach:\n                if i - coach <= k:\n                    for j in range(coach, i):\n                        teams[team].append(j)\n                else:\n                    for j in range(coach, min(i + k, n)):\n                        teams[team].append(j)\n\n            teams[team].append(i)\n            taken[i] = True\n\n    for i in range(n):\n        if not taken[i]:\n            choose_team(i, i % 2)\n\n    return ''.join(str(i % 2 + 1) for i in range(n))"
    },
    {
        "number": 4150,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    res = ['0'] * n\n    \n    for i in range(n):\n        if i == 0:\n            left = [j for j in range(max(0, i-k), i)]\n            right = [j for j in range(i+1, min(n, i+k+1))]\n            max_left = max(left, default=-1, key=lambda j: a[j])\n            max_right = max(right, default=-1, key=lambda j: a[j])\n            res[i] = 1 if max_left == -1 else 2\n            if max_right!= -1:\n                res[max_right] = 1 if res[max_right] == 2 else 2\n        elif i == n-1:\n            left = [j for j in range(max(0, i-k), i)]\n            right = [j for j in range(i+1, min(n, i+k+1))]\n            max_left = max(left, default=-1, key=lambda j: a[j])\n            max_right = max(right, default=-1, key=lambda j: a[j])\n            res[i] = 2 if max_left == -1 else 1\n            if max_right!= -1:\n                res[max_right] = 2 if res[max_right] == 1 else 1\n        else:\n            left = [j for j in range(max(0, i-k), i)]\n            right = [j for j in range(i+1, min(n, i+k+1))]\n            max_left = max(left, default=-1, key=lambda j: a[j])\n            max_right = max(right, default=-1, key=lambda j: a[j])\n            res[i] = 1 if max_left == -1 else 2\n            if max_right!= -1:\n                res[max_right] = 1 if res[max_right] == 2 else 2\n    \n    return ''.join(map(str, res))\n\nstdin = \"\"\"\n5 2\n2 4 5 3 1\n\"\"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4151,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 1  # We start with the first renumeration\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            continue\n        elif a[i] < a[i-1]:\n            for j in range(i, 0, -1):\n                if a[j] < a[j-1]:\n                    count = (count * (j-i+1)) % (10**9+7)\n                    break\n            else:\n                count = (count * (i+1)) % (10**9+7)\n        else:\n            for j in range(i, n):\n                if a[j] < a[j-1]:\n                    count = (count * (j-i+1)) % (10**9+7)\n                    break\n            else:\n                count = (count * (n-i)) % (10**9+7)\n    print(count)"
    },
    {
        "number": 4151,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # compute prefix sums\n    prefix_sums = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sums[i] = prefix_sums[i - 1] + a[i - 1]\n\n    # compute combinations\n    MOD = 998244353\n    count = 1  # number of monotonic renumerations\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            count = (count * (i + 1)) % MOD\n\n    # compute permutations\n    count = (count * (prefix_sums[n] - prefix_sums[0])) % MOD\n\n    # return result\n    return str(count)\n"
    },
    {
        "number": 4151,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    count = 1\n    memo = {}\n\n    for i in range(n):\n        if a[i] not in memo:\n            memo[a[i]] = i\n        else:\n            count += 1\n\n    print(pow(count, 2, 998244353))"
    },
    {
        "number": 4151,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # dp[i][j] = number of monotonic renumerations of a[:i] with b[i] = j\n    dp = [[0] * 2 for _ in range(n)]\n    \n    # base case\n    for j in range(2):\n        dp[0][j] = 1\n        \n    # fill dp table\n    for i in range(1, n):\n        for j in range(2):\n            if j == 0 and a[i] == a[i-1]:\n                dp[i][j] = dp[i-1][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + dp[i-1][1]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n                \n    # count the number of different renumerations\n    count = 0\n    for j in range(2):\n        count += dp[n-1][j]\n        \n    # return the count modulo 998244353\n    return str(count % 998244353)\n    \nprint(solution(open(\"sample_input.txt\", \"r\")))"
    },
    {
        "number": 4151,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = [0] * n\n    count = 0\n    for i in range(n):\n        if i == 0 or a[i]!= a[i - 1]:\n            b[i] = count\n            count += 1\n        else:\n            b[i] = b[i - 1]\n    count = 1\n    for i in range(1, n):\n        if b[i] == b[i - 1]:\n            continue\n        if a[i] == a[i - 1]:\n            b[i] = b[i - 1]\n            continue\n        if a[i] < a[i - 1]:\n            for j in range(i - 1, -1, -1):\n                if b[j] + 1 == b[i]:\n                    break\n            if j == -1:\n                count = 0\n                break\n            if a[i] == a[j] and b[j] + 1 == b[i]:\n                b[i] = b[j] + 1\n            else:\n                b[i] = b[j]\n            count = (count * (i - j)) % 998244353\n    return str(count)\n\n\nassert solution(\"5\\n1 2 1 2 3\") == \"2\"\nassert solution(\"2\\n100 1\") == \"2\"\nassert solution(\"4\\n1 3 3 7\") == \"4\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    MOD = 998244353\n    \n    b = [0] * n\n    count = 1\n    for i in range(n):\n        if b[i] == 0:\n            b[i] = i\n            count += 1\n        else:\n            j = b[i] - 1\n            while j >= 0 and a[i] == a[j]:\n                j -= 1\n            if j < 0 or a[j] < a[i]:\n                b[i] = i\n            else:\n                b[i] = j + 1\n    for i in range(1, n):\n        if b[i] == b[i - 1] and (i == n - 1 or b[i]!= b[i + 1]):\n            count += 1\n        elif b[i] > b[i - 1]:\n            if i == n - 1 or b[i]!= b[i + 1]:\n                count += 1\n            else:\n                j = i + 1\n                while j < n and b[j] == b[i]:\n                    j += 1\n                count += j - i\n        elif b[i] < b[i - 1]:\n            count += 1\n        if count >= MOD:\n            count %= MOD\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4151,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    mod = 998244353\n    dp = [[False] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = True\n\n    cnt = 1\n    for i in range(n):\n        for j in range(i):\n            if a[i] == a[j]:\n                dp[j][i] = True\n                cnt += 1\n\n    for k in range(1, n):\n        for i in range(n - k):\n            j = i + k\n            if dp[i][j] == True:\n                continue\n            for p in range(i, j):\n                if dp[i][p] == True and dp[p + 1][j] == True:\n                    dp[i][j] = True\n                    cnt += 1\n\n    return str((cnt - 1) % mod)\n\nprint(solution(input()))"
    },
    {
        "number": 4151,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # sort the array\n    a.sort()\n    \n    # initialize variables for counting\n    cnt = 1  # initial monotonic renumeration\n    prev = a[0]  # previous value in a\n    \n    # loop through the sorted array\n    for i in range(1, n):\n        if a[i] > prev:  # current value is greater than previous\n            cnt += 1  # increase count\n            prev = a[i]  # update previous value\n        elif a[i] == prev:  # current value is equal to previous\n            continue  # skip\n        else:  # current value is less than previous\n            cnt += 1  # increase count\n            prev = a[i]  # update previous value\n    \n    return str((cnt * (cnt - 1)) // 2 % 998244353)\n"
    },
    {
        "number": 4151,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    cnt = 1\n    for i in range(1, n):\n        if a[i] < a[i-1]:\n            cnt *= 2\n\n    return cnt % 998244353"
    },
    {
        "number": 4151,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    a = a[1:]\n    count = 0\n    for i in range(2**n):\n        b = [0] * n\n        for j in range(n):\n            if i & (1 << j):\n                b[j] = a[j]\n        for j in range(1, n):\n            if b[j] < b[j-1]:\n                b[j] = b[j-1]\n        for j in range(n-1):\n            if b[j] == b[j+1]:\n                b[j+1] += 1\n        count += 1\n        if b == list(range(n)):\n            count -= 1\n    return str(count % 998244353)"
    },
    {
        "number": 4152,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = [int(x) for x in stdin.readline().split()]\n\n    # Check if the given sequence is good\n    for i in range(n):\n        for j in range(i+1, n):\n            if seq[i] + seq[j] == 2**int(math.log2(seq[i] + seq[j])):\n                return \"Impossible\"\n\n    # Find the minimum number of elements to remove to make it good\n    min_remove = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if seq[i] + seq[j] == 2**int(math.log2(seq[i] + seq[j])):\n                min_remove += 1\n                break\n\n    return min_remove"
    },
    {
        "number": 4152,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    i = 0\n    while i < n:\n        if a[i] == 2**int(math.log2(a[i])):\n            i += 1\n        else:\n            break\n    \n    return n - i\n    "
    },
    {
        "number": 4152,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    # check if empty sequence is good\n    if n == 0:\n        return str(n)\n    \n    # check if good sequence\n    for i in range(n):\n        if a[i] % 2!= 0 and not(2**(a[i] // 2) == a[i]):\n            return str(i)\n    \n    # delete all elements\n    return str(n)"
    },
    {
        "number": 4152,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Compute dp\n    dp = [True] * n\n\n    for i in range(n):\n        if dp[i]:\n            for j in range(i+1, n):\n                if (a[i] + a[j]) & (a[i] + a[j] - 1) == 0 and a[i] + a[j]!= 0:\n                    dp[j] = False\n\n    # Count number of elements to remove\n    ans = 0\n    for i in range(n):\n        if dp[i]:\n            ans += 1\n\n    # Return result\n    return str(ans)"
    },
    {
        "number": 4152,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing the input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # Checking if the sequence is good\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if a[i] + a[j] == 1 << a[i] + a[j]:\n                return \"No\"\n    \n    return \"Yes\""
    },
    {
        "number": 4152,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sequence = list(map(int, stdin.readline().strip().split()))\n    length = len(sequence)\n    \n    # check if empty sequence is good\n    if length == 0:\n        return \"0\"\n    \n    # check if all elements are good\n    for i in range(length):\n        if not is_power_of_two(sequence[i] + sum(sequence[:i]) + sum(sequence[i+1:])):\n            return str(i)\n    \n    # all elements are good, return length of sequence\n    return str(length)\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    \n    # find the first index j such that a[i] + a[j] is a power of 2\n    def is_power_of_two(x):\n        return x!= 0 and (x & (x - 1)) == 0\n    \n    def find_next_index(i):\n        j = i + 1\n        while j < n and not is_power_of_two(a[i] + a[j]):\n            j += 1\n        if j == n:\n            return -1\n        return j\n    \n    # find the first index i such that a[i] is not a power of 2\n    i = 0\n    while i < n and is_power_of_two(a[i]):\n        i += 1\n    if i == n:\n        # the sequence is good\n        return \"0\"\n    \n    # find the minimum number of elements to be removed to make the sequence good\n    ans = 0\n    j = find_next_index(i)\n    while j!= -1:\n        ans += 1\n        i, j = j, find_next_index(j)\n    \n    return str(ans)"
    },
    {
        "number": 4152,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] > 1:\n                count += 1\n            else:\n                break\n\n    if count < n:\n        return str(n - count)\n    else:\n        return str(0)"
    },
    {
        "number": 4152,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j]!= 2**int(math.log2(a[i]+a[j])):\n                count += 1\n    return count\n"
    },
    {
        "number": 4152,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n\n    # check if the sequence is already good\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_power_of_two(a[i]+a[j]):\n                break\n        else:\n            continue\n        break\n    else:\n        return 0\n\n    # find the minimum number of elements to remove\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_power_of_two(a[i]+a[j]):\n                continue\n            a[i], a[j] = a[j], a[i]\n            if solution(' '.join(map(str, a[:i]+a[i+1:]))):\n                return i+1\n            a[i], a[j] = a[j], a[i]\n    return n\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    count = 0\n    for i in range(N-1):\n        if stdin[i] == '0' and stdin[i+1] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 4153,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    # create a list of cube objects, where each cube object has a color and an index\n    cubes = []\n    for i in range(n):\n        if stdin[i] == '0':\n            color ='red'\n        else:\n            color = 'blue'\n        cube = {'color': color, 'index': i}\n        cubes.append(cube)\n    # count the number of red and blue cubes\n    num_red = sum(cube['color'] =='red' for cube in cubes)\n    num_blue = n - num_red\n    # initialize the maximum number of cubes that can be removed to 0\n    max_cubes = 0\n    # iterate over all possible pairs of adjacent red and blue cubes\n    for i in range(num_red - 1):\n        for j in range(num_blue - 1):\n            # if the two cubes are adjacent, then remove them and update the maximum number of cubes\n            if cubes[i]['index'] == cubes[i+1]['index'] - 1 and cubes[i+1]['color'] == 'blue' and \\\n                    cubes[j]['index'] == cubes[j+1]['index'] - 1 and cubes[j+1]['color'] =='red':\n                # remove the cubes\n                del cubes[j+1]\n                del cubes[i+1]\n                # update the maximum number of cubes\n                max_cubes = max(max_cubes, i+1 + j+1)\n    return str(max_cubes)"
    },
    {
        "number": 4153,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = len(stdin)\n    cubes = [False]*n\n    for i in range(n):\n        if stdin[i] == '0':\n            cubes[i] = True\n    \n    # initialize variables\n    num_red_cubes = sum(cubes)\n    max_removed = 0\n    \n    # check for adjacent red/blue cubes\n    for i in range(n):\n        if cubes[i]:\n            # check red cubes\n            if i > 0 and cubes[i-1]:\n                num_red_cubes -= 2\n                max_removed += 1\n            # check blue cubes\n            if i < n-1 and not cubes[i+1]:\n                num_red_cubes -= 2\n                max_removed += 1\n    \n    # print answer\n    print(max_removed)\n"
    },
    {
        "number": 4153,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    red_cubes = [i for i in range(n) if stdin[i] == '0']\n    blue_cubes = [i for i in range(n) if stdin[i] == '1']\n    max_removals = 0\n    \n    for i in red_cubes:\n        for j in blue_cubes:\n            if abs(i - j) == 1:\n                blue_cubes.remove(j)\n                max_removals += 1\n    \n    return max_removals\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4153,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    red_cubes = [i for i in range(n) if stdin[i] == '0']\n    blue_cubes = [i for i in range(n) if stdin[i] == '1']\n    max_remove = 0\n    for i in range(len(red_cubes)):\n        for j in range(len(blue_cubes)):\n            if abs(red_cubes[i] - blue_cubes[j]) <= 1:\n                max_remove += 1\n    return max_remove"
    },
    {
        "number": 4153,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip().split()\n    red_count = blue_count = 0\n    for i in range(n):\n        if s[i] == '0':\n            red_count += 1\n        else:\n            blue_count += 1\n    return max(red_count, blue_count)"
    },
    {
        "number": 4153,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    red_count = sum(1 for i in range(N) if stdin[i] == '0')\n    blue_count = N - red_count\n    if red_count == 0 or blue_count == 0:\n        return '0'\n    else:\n        return str(red_count + blue_count - 1)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4153,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    count = 0\n    i = N-1\n    while i >= 1:\n        if i-1 >= 0 and stdin[i-1] == '1' and stdin[i] == '0':\n            count += 1\n            i -= 2\n        else:\n            i -= 1\n    return count"
    },
    {
        "number": 4153,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.readline().strip()\n    red_cubes = [i for i in range(n) if s[i] == '0']\n    blue_cubes = [i for i in range(n) if s[i] == '1']\n\n    count = 0\n    while red_cubes and blue_cubes:\n        red_cube = red_cubes.pop(0)\n        blue_cube = blue_cubes.pop(0)\n        count += 1\n        if red_cube < blue_cube - 1:\n            blue_cubes.insert(0, red_cube + 1)\n        if blue_cube < red_cube - 1:\n            red_cubes.insert(0, blue_cube + 1)\n\n    return count"
    },
    {
        "number": 4153,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    i = 0\n    while i < N-1 and (stdin[i] == '0' or stdin[i] == '1'):\n        i += 1\n    if i == N-1:\n        return '0'\n    else:\n        return '1'"
    },
    {
        "number": 4154,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    N, M = map(int, stdin.split())\n    ID_cards = []\n    for i in range(M):\n        L, R = map(int, stdin.split())\n        ID_cards.append((L, R))\n\n    # Count the number of ID cards that allow us to pass all the gates\n    count = 0\n    for i in range(N):\n        left_card = ID_cards[0][0]\n        right_card = ID_cards[-1][1]\n        for L, R in ID_cards:\n            if L <= i <= R:\n                continue\n            if i < L:\n                left_card = L\n            if i > R:\n                right_card = R\n            if left_card > right_card:\n                break\n        else:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4154,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m = map(int, stdin.split())\n    gates = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        gates.append((l, r))\n    \n    # Count number of id cards that can pass all gates\n    count = 0\n    for i in range(1, n+1):\n        for j in range(len(gates)):\n            if gates[j][0] <= i <= gates[j][1]:\n                break\n            if j == len(gates)-1:\n                count += 1\n    \n    # Output result\n    print(count)\n    \n    return \"\""
    },
    {
        "number": 4154,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    gates = []\n    for _ in range(m):\n        l, r = map(int, stdin.readline().split())\n        gates.append((l, r))\n    \n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if all(i+k in range(gates[k][0]-1, gates[k][1]+1) for k in range(m)):\n                count += 1\n    \n    return str(count)\n\nstdin = \"\"\"\n4 2\n1 3\n2 4\n\"\"\"\nprint(solution(stdin)) # Output: 2"
    },
    {
        "number": 4154,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    gates = list(map(int, stdin.split()))\n    \n    count = 0\n    for i in range(M):\n        L = gates[2*i]\n        R = gates[2*i+1]\n        if i%2 == 0:\n            count += L+1\n        else:\n            count += R\n    return str(count)"
    },
    {
        "number": 4154,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    gates = [list(map(int, stdin.strip().split())) for _ in range(M)]\n    id_cards = set(range(1, N+1))\n    for l, r in gates:\n        id_cards &= set(range(l, r+1))\n    return len(id_cards)\n\nstdin = \"\"\"\n4 2\n1 3\n2 4\n\"\"\"\n\nprint(solution(stdin)) # Output: 2"
    },
    {
        "number": 4154,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = list(map(int, stdin.readline().split()))\n    gates = []\n    for _ in range(M):\n        L, R = list(map(int, stdin.readline().split()))\n        gates.append((L, R))\n\n    # Sort gates by left and right boundaries\n    gates = sorted(gates, key=lambda x: (x[0], x[1]))\n\n    # Initialize count of ID cards that allow us to pass all gates\n    count = 0\n\n    # Iterate over all ID cards\n    for i in range(N):\n        # Check if the i-th ID card allows us to pass all gates\n        allowed = True\n        for L, R in gates:\n            if L <= i <= R:\n                allowed = False\n                break\n        if allowed:\n            count += 1\n\n    return count"
    },
    {
        "number": 4154,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    m = int(lines[1])\n    gates = [[] for _ in range(m)]\n    for i in range(m):\n        l, r = map(int, lines[i+2].split())\n        for j in range(l, r+1):\n            gates[i].append(j)\n    \n    count = 0\n    for i in range(n):\n        valid = True\n        for j in range(m):\n            if i not in gates[j]:\n                valid = False\n                break\n        if valid:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4154,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the number of ID cards that allow us to pass all the gates alone.\n\n    Args:\n    stdin (str): Input string containing the number of ID cards (N) and gates (M), followed by the L_i and R_i values for each gate.\n\n    Returns:\n    str: The number of ID cards that allow us to pass all the gates alone.\n    \"\"\"\n\n    # Read input from stdin\n    N, M = map(int, stdin.split())\n    L = list(map(int, stdin.split()))\n    R = list(map(int, stdin.split()))\n\n    # Initialize a list to keep track of the number of ID cards that allow us to pass each gate\n    passes = [0] * M\n\n    # Loop through each gate and increment the number of passes for each ID card that satisfies it\n    for i in range(M):\n        for j in range(L[i]-1, R[i]):\n            passes[i] += 1\n\n    # Count the number of ID cards that allow us to pass all gates\n    count = 0\n    for p in passes:\n        if p == M:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4154,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    id_cards = list(map(int, stdin.strip().split()))\n    count = 0\n    for i in range(M):\n        l, r = id_cards[2*i], id_cards[2*i+1]\n        if l <= i <= r:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4154,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.readline().split())\n    gates = list(map(int, stdin.readline().split()))\n    \n    # count number of id cards that allow us to pass all gates\n    count = 0\n    for i in range(m):\n        l, r = gates[i]\n        if r-l+1 == n:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4155,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    input_lines = stdin.strip().split('\\n')\n    N = int(input_lines[0])\n    heights = list(map(int, input_lines[1].split()))\n\n    # Initialize variables\n    num_waterings = 0\n    max_height = 0\n    flower_queue = []\n\n    # Build queue\n    for i in range(1, N+1):\n        flower_queue.append((i, heights[i-1]))\n        max_height = max(max_height, heights[i-1])\n\n    # Water flowers\n    while len(flower_queue) > 0:\n        # Remove flowers with height 0\n        flower_queue = [(i, h) for i, h in flower_queue if h > 0]\n\n        # Find maximum height and split queue\n        max_height = max(h for _, h in flower_queue)\n        left_queue = [(i, h) for i, h in flower_queue if h < max_height]\n        right_queue = [(i, h) for i, h in flower_queue if h == max_height]\n\n        # Water flowers in left queue\n        num_waterings += len(left_queue)\n        for i, h in left_queue:\n            heights[i-1] += 1\n\n        # Water flowers in right queue\n        num_waterings += len(right_queue)\n        for i, h in right_queue:\n            heights[i-1] += 1\n\n        # Rebuild queue\n        flower_queue = [(i, h) for i, h in zip(range(1, N+1), heights)]\n\n    # Return minimum number of watering operations\n    return str(num_waterings)\n"
    },
    {
        "number": 4155,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n    \n    # Find the minimum number of watering operations required\n    watering_operations = 0\n    height_dict = {}\n    for i in range(N):\n        if heights[i] == 0:\n            continue\n        if heights[i] in height_dict:\n            height_dict[heights[i]].append(i+1)\n        else:\n            height_dict[heights[i]] = [i+1]\n    \n    for height in height_dict:\n        if len(height_dict[height]) > 1:\n            watering_operations += len(height_dict[height]) - 1\n    \n    return str(watering_operations)"
    },
    {
        "number": 4155,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline())\n    h = list(map(int, stdin.readline().split()))\n    \n    # Find the minimum number of watering operations required to satisfy the condition\n    watering_ops = 0\n    i = 0\n    j = 0\n    while j < N:\n        if i == j:\n            i += 1\n            j += 1\n        else:\n            k = j\n            while k < N and h[k] == h[j]:\n                k += 1\n            watering_ops += k - j\n            j = k\n    return str(watering_ops)"
    },
    {
        "number": 4155,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    h = list(map(int, stdin.readline().strip().split()))\n    \n    waterings = 0\n    \n    for i in range(1, n):\n        if h[i]!= h[i-1]:\n            waterings += 1\n    \n    return waterings"
    },
    {
        "number": 4155,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, heights = map(int, stdin.split())\n    heights = list(map(int, stdin.readline().split()))\n    \n    # initialize watering operations count\n    watering_count = 0\n    \n    # iterate over all possible pairs of indices\n    for i in range(n):\n        for j in range(i+1, n):\n            # if the difference between heights is 1, add 1 to watering_count\n            if heights[j] - heights[i] == 1:\n                watering_count += 1\n    \n    return str(watering_count)"
    },
    {
        "number": 4155,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    h = [int(x) for x in stdin.readline().strip().split()]\n    # Initialize variables\n    count = 0\n    for i in range(N):\n        if h[i]!= i+1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4155,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    h = list(map(int, stdin.readline().split()))\n\n    # count the number of 0s in the input list\n    count_0 = h.count(0)\n\n    # if all heights are 0s, return the count of 0s as the answer\n    if count_0 == N:\n        return str(count_0)\n\n    # find the minimum height among all heights\n    min_height = min(h)\n\n    # count the number of heights greater than or equal to 1\n    count_1 = sum(1 for height in h if height >= 1)\n\n    # if the count of heights greater than or equal to 1 is less than the count of 0s,\n    # return the count of 0s as the answer\n    if count_1 < count_0:\n        return str(count_0)\n\n    # if the count of heights greater than or equal to 1 is equal to the count of 0s,\n    # return the count of 0s plus 1 as the answer\n    if count_1 == count_0:\n        return str(count_0 + 1)\n\n    # if the count of heights greater than or equal to 1 is greater than the count of 0s,\n    # find the number of times we need to water each flower, and return the sum of all such numbers\n    count_water = 0\n    for height in h:\n        if height < min_height:\n            count_water += min_height - height\n\n    return str(count_water)"
    },
    {
        "number": 4155,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize the watering operations count\n    count = 0\n\n    # For each flower height\n    for i in range(N):\n        # If the height is not equal to the required height\n        if heights[i]!= i+1:\n            # Increase the watering operations count\n            count += 1\n            # Update the height of all flower from i+1 to N with 1\n            for j in range(i+1, N):\n                heights[j] += 1\n\n    # Return the watering operations count\n    return str(count)\n"
    },
    {
        "number": 4155,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    water_ops = 0\n    min_ops = n\n\n    # Iterate through each flower and water it\n    for i in range(n):\n        min_ops = min(min_ops, water_ops + heights[i])\n        water_ops += 1\n\n    return str(min_ops)"
    },
    {
        "number": 4155,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n    watering_ops = 0\n    for i in range(1, n):\n        if heights[i]!= heights[i-1] + 1:\n            watering_ops += 1\n            for j in range(i, n):\n                heights[j] += 1\n    return str(watering_ops)"
    },
    {
        "number": 4156,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    dp = [[0] * (w+1) for _ in range(n+1)]\n\n    # base case\n    dp[0][0] = 1\n\n    # fill the table\n    for i in range(1, n+1):\n        for j in range(w+1):\n            for k in range(j-a[i-1], j+1):\n                dp[i][j] += dp[i-1][k]\n\n    # sum the number of ways in table\n    ans = 0\n    for i in range(w+1):\n        ans += dp[n][i]\n\n    if ans == 0:\n        return \"0\"\n    else:\n        return str(ans)\n"
    },
    {
        "number": 4156,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    dp = [[0] * (w+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, w+1):\n            dp[i][j] = dp[i-1][j]\n            if a[i-1]!= 0:\n                dp[i][j] += dp[i-1][j-min(j, a[i-1])]\n            if dp[i][j] > 10**9:\n                return \"0\"\n    return dp[n][w]"
    },
    {
        "number": 4156,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, w = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    dp = [[0 for _ in range(w+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, w+1):\n            dp[i][j] += dp[i-1][j]\n            if j >= a[i-1] >= 0:\n                dp[i][j] += dp[i-1][j-a[i-1]]\n    return str(dp[n][w])\n\nprint(solution(\"3 5\\n2 1 -3\")) # Output: 3\nprint(solution(\"2 4\\n-1 1\")) # Output: 4\nprint(solution(\"4 10\\n2 4 1 2\")) # Output: 2"
    },
    {
        "number": 4156,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    # we need to find the number of initial passengers\n    # if the number of passengers in the bus is less than or equal to w,\n    # then there is only one way how many people could be in the bus before the first bus stop\n    # if the number of passengers in the bus is greater than w,\n    # then there are two ways:\n    # 1) the number of passengers in the bus is exactly w, then there is only one way how many people could be in the bus before the first bus stop\n    # 2) the number of passengers in the bus is less than w, then there are two ways to choose the initial passengers:\n    #    a) the initial number of passengers is 0, and the number of passengers in the bus after each stop is greater than w,\n    #       then there is only one way how many people could be in the bus before the first bus stop\n    #    b) the initial number of passengers is greater than 0, and the number of passengers in the bus after each stop is greater than w,\n    #       then there are many ways to choose the initial passengers\n    \n    # count the number of ways to choose the initial passengers\n    count = 0\n    for i in range(1, w+1):\n        if sum(a[j] - a[j-1] for j in range(1, n)) <= w-i:\n            count += 1\n    \n    # if there are many ways to choose the initial passengers, then there is no solution\n    if count > w:\n        return '0'\n    \n    # if there is only one way to choose the initial passengers, then return it\n    return str(count)"
    },
    {
        "number": 4156,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Input\n    n, w = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    # Preprocessing\n    p = [0] * (w+1)\n    for i in range(n):\n        p[0] += a[i]\n    for i in range(1, w+1):\n        p[i] += p[i-1]\n        \n    # Solution\n    ans = 0\n    for i in range(n):\n        ans += p[a[i]] - p[max(0, a[i]-w)]\n        \n    # Output\n    if ans < 0:\n        return \"0\"\n    else:\n        return str(ans)\n    \n"
    },
    {
        "number": 4156,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    if w < 0:\n        return 0\n    \n    dp = [0] * (w + 1)\n    dp[0] = 1\n    \n    for i in range(n):\n        for j in range(w, a[i] - 1, -1):\n            dp[j] += dp[j - a[i]]\n    \n    return dp[w]"
    },
    {
        "number": 4156,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Initialize dp array with 1's\n    dp = [1] * (w+1)\n\n    # Iterate over all bus stops\n    for i in range(1, n):\n        # Initialize current dp array with 0's\n        curr_dp = [0] * (w+1)\n\n        # Iterate over all possible values of people in the bus\n        for j in range(w+1):\n            # If it's not possible to get more people than the current number, skip it\n            if j - a[i] >= 0:\n                curr_dp[j] += dp[j-a[i]]\n            # If it's not possible to get less people than the current number, skip it\n            if j + a[i] <= w:\n                curr_dp[j] += dp[j+a[i]]\n\n        dp = curr_dp\n\n    # Return the number of ways to have 0 people at the first stop\n    return dp[0]"
    },
    {
        "number": 4156,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, w = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # initialize dp array\n    dp = [[0] * (w + 1) for _ in range(n)]\n\n    # fill dp array\n    for i in range(n):\n        for j in range(w + 1):\n            if i == 0:\n                dp[i][j] = 1\n            elif j >= a[i]:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - a[i]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    # count total number of combinations\n    count = 0\n    for j in range(w + 1):\n        count += dp[n - 1][j]\n\n    return count"
    },
    {
        "number": 4156,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0] * (w + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(1, w + 1):\n            if i == 0:\n                dp[i][j] = 1 if j == 0 else 0\n            else:\n                dp[i][j] = dp[i][j - 1]\n                if j - a[i - 1] >= 0:\n                    dp[i][j] += dp[i - 1][j - a[i - 1]]\n    if dp[n][w] == 0:\n        return \"0\"\n    else:\n        return str(dp[n][w])"
    },
    {
        "number": 4156,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    dp = [0] * (w+1)\n    dp[0] = 1\n\n    for i in range(n):\n        for j in range(max(0, a[i]+1), w+1):\n            dp[j] += dp[j-a[i]-1]\n\n    if dp[-1] == 0:\n        return '0'\n    else:\n        return str(dp[-1])"
    },
    {
        "number": 4157,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    seq = [int(x) for x in stdin.readline().strip().split()]\n    result = seq.copy()\n    for i in range(1, n):\n        if result[i] == result[i-1] * 2:\n            result[i] *= 2\n        else:\n            result[i] = result[i-1] // 3\n    return \" \".join(str(x) for x in result)"
    },
    {
        "number": 4157,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    seq = list(map(int, stdin.splitlines()[1].split()))\n    res = [seq[-1]]\n    for i in range(n-2, -1, -1):\n        if seq[i] % 3 == 0:\n            res.append(seq[i] // 3)\n        else:\n            res.append(seq[i] * 2)\n    res.reverse()\n    return''.join(map(str, res))\n\nwith open(\"input.txt\", \"r\") as f:\n    with open(\"output.txt\", \"w\") as f1:\n        f1.write(solution(f.read()))"
    },
    {
        "number": 4157,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sequence = [int(x) for x in stdin.readline().strip().split()]\n\n    result = []\n    for i in range(1, n):\n        if sequence[i] == 3 * sequence[i-1]:\n            result.append(sequence[i] // 3)\n        else:\n            result.append(sequence[i] * 2)\n\n    print(\" \".join(map(str, result)))\n"
    },
    {
        "number": 4157,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    seq = list(map(int, stdin.readline().strip().split()))\n    \n    for i in range(1, n):\n        if seq[i] == seq[i-1] * 2:\n            seq[i], seq[i-1] = seq[i-1], seq[i]\n        elif seq[i] == seq[i-1] // 3:\n            seq[i], seq[i-1] = seq[i-1], seq[i]\n        elif seq[i] == seq[i-1] // 3 * 2:\n            seq[i], seq[i-1] = seq[i-1], seq[i]\n        elif seq[i] == seq[i-1] * 2 * 3:\n            seq[i], seq[i-1] = seq[i-1], seq[i]\n            \n    return \" \".join(map(str, seq))"
    },
    {
        "number": 4157,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    seq = list(map(int, stdin.readline().strip().split()))\n    # print(seq)\n    for i in range(1, n):\n        if seq[i] == 3*seq[i-1]:\n            seq[i], seq[i-1] = seq[i-1], seq[i]\n    for i in range(1, n):\n        if seq[i] == seq[i-1]/2:\n            seq[i], seq[i-1] = seq[i-1], seq[i]\n    # print(seq)\n    return''.join(map(str, seq))\n\nstdin = \"\"\"\n6\n4 8 6 3 12 9\n\"\"\"\n\nprint(solution(stdin))  # Output: \"9 3 6 12 4 8\"\n\nstdin = \"\"\"\n4\n42 28 84 126\n\"\"\"\n\nprint(solution(stdin))  # Output: \"126 42 84 28\"\n\nstdin = \"\"\"\n2\n1000000000000000000 3000000000000000000\n\"\"\"\n\nprint(solution(stdin))  # Output: \"3000000000000000000 1000000000000000000\""
    },
    {
        "number": 4157,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    for i in range(n - 2, -1, -1):\n        if arr[i] % 3 == 0:\n            arr[i] //= 3\n        else:\n            arr[i] *= 2\n    return \" \".join(map(str, arr))"
    },
    {
        "number": 4157,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    for i in range(n-1):\n        if arr[i] % 3 == 0:\n            arr[i+1] = arr[i] // 3\n        else:\n            arr[i+1] = arr[i] * 2\n    return''.join(map(str, arr))"
    },
    {
        "number": 4157,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    for i in range(n-1):\n        if a[i+1] == a[i]*2:\n            a[i+1] = a[i]\n        elif a[i+1] == a[i]/3:\n            a[i+1] = a[i]*2\n    return \" \".join(map(str, a))"
    },
    {
        "number": 4157,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(stdin.readline().strip()) for i in range(n)]\n    \n    # perform all the operations\n    for i in range(n-1):\n        if arr[i] % 3 == 0:\n            arr[i+1] = arr[i] // 3\n        else:\n            arr[i+1] = arr[i] * 2\n        \n    # check if the sequence can be written down on the board\n    prev = arr[0]\n    for i in range(1, n):\n        if prev == arr[i] or arr[i] % prev == 0:\n            prev = arr[i]\n        else:\n            # print(\"Invalid sequence\")\n            return \"Invalid sequence\"\n        \n    # print the rearranged sequence\n    print(\" \".join(map(str, arr)))"
    },
    {
        "number": 4157,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    for i in range(n):\n        if a[i] % 3 == 0:\n            a[i] //= 3\n        else:\n            a[i] = 2 * a[i]\n    return''.join(map(str, a))\n\nprint(solution(\"6\\n4 8 6 3 12 9\")) # Output: 9 3 6 12 4 8 \nprint(solution(\"4\\n42 28 84 126\")) # Output: 126 42 84 28 \nprint(solution(\"2\\n1000000000000000000 3000000000000000000\")) # Output: 3000000000000000000 1000000000000000000"
    },
    {
        "number": 4158,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    xs = sorted(map(int, stdin.readline().strip().split()))\n    max_size = 0\n    max_points = []\n    for i in range(n):\n        for j in range(i+2, n):\n            d = xs[j] - xs[i]\n            if d == 1:\n                size = 2\n            elif d == 2:\n                size = 3\n            else:\n                size = 1 + int(math.log(d, 2))\n            if size > max_size:\n                max_size = size\n                max_points = [xs[i]]\n            elif size == max_size and xs[i] < max_points[-1]:\n                max_points.append(xs[i])\n    print(max_size)\n    print(*max_points)\n    return ''"
    },
    {
        "number": 4158,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    xs = list(map(int, stdin.readline().strip().split()))\n\n    # find all subsets with maximum possible number of points\n    max_count = 0\n    max_subset = []\n    for i in range(1, 2**n):\n        subset = []\n        for j in range(n):\n            if i & (1 << j):\n                subset.append(xs[j])\n        if len(subset) > max_count:\n            max_count = len(subset)\n            max_subset = subset\n\n    # print the result\n    print(max_count)\n    print(*max_subset)\n\n    return \"\""
    },
    {
        "number": 4158,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline())\n    points = list(map(int, stdin.readline().split()))\n\n    # create list of all possible subsets\n    subsets = []\n    for i in range(1, 2**n):\n        subset = [points[j] for j in range(n) if i & (1 << j)]\n        if len(subset) > 1:\n            subsets.append(subset)\n\n    # find the subset with maximum size\n    max_subset = None\n    for subset in subsets:\n        if max_subset is None or len(subset) > len(max_subset):\n            max_subset = subset\n\n    # print the result\n    print(len(max_subset))\n    print(*max_subset)\n\n    return \"\""
    },
    {
        "number": 4158,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    m = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(x[i]-x[j]) & (abs(x[i]-x[j])-1) == 0:\n                m += 1\n    print(m)\n    subset = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(x[i]-x[j]) & (abs(x[i]-x[j])-1) == 0:\n                subset.append(x[i])\n                subset.append(x[j])\n                break\n    print(' '.join(map(str, subset)))\n    return \"\""
    },
    {
        "number": 4158,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n\n    def distance(i, j):\n        return abs(x[i] - x[j])\n\n    def is_power_of_two(d):\n        return (d & (d - 1)) == 0\n\n    m = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_power_of_two(distance(i, j)):\n                m += 1\n    if m == 0:\n        m = 1\n\n    result = [x[0]]\n    for i in range(1, m):\n        result.append(x[n - i])\n\n    return f\"{m}\\n{' '.join(map(str, result))}\""
    },
    {
        "number": 4158,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = list(map(int, stdin.split()[1:]))\n    \n    # build a dictionary with distances between points\n    dist = {}\n    for i in range(n):\n        for j in range(i+1, n):\n            d = abs(points[i] - points[j])\n            if d not in dist:\n                dist[d] = [(i,j)]\n            else:\n                dist[d].append((i,j))\n    \n    # build all subsets with maximum distance d=2^k\n    subsets = []\n    for k in range(int(math.log2(n))+1):\n        for d in dist[2**k]:\n            for subset in subsets:\n                if d[0] in subset and d[1] in subset:\n                    continue\n                if d[1] in subset:\n                    subsets.remove(subset)\n                subsets.append(subset+[d[0], d[1]])\n    \n    # find the subset with maximum number of points\n    max_subset = []\n    for subset in subsets:\n        if len(subset) > len(max_subset):\n            max_subset = subset\n    \n    # output the result\n    print(len(max_subset))\n    for p in max_subset:\n        print(points[p], end=' ')\n    return ''"
    },
    {
        "number": 4158,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    xs = list(map(int, stdin.readline().strip().split()))\n    if n < 2:\n        return \"1\\n\" + str(xs[0])\n    xs.sort()\n    ans = 1\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if abs(xs[j] - xs[i]) & (abs(xs[j] - xs[i]) - 1) == 0:\n                ans += 1\n                if ans == n:\n                    return str(ans) + \"\\n\" + \" \".join(map(str, xs))\n    return str(ans) + \"\\n\" + \" \".join(map(str, xs))\n\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n\n    dp = [False] * (n+1)\n    dp[0] = True\n    dp[1] = True\n\n    for i in range(2, n+1):\n        for j in range(i):\n            if abs(x[i-1]-x[j]) & (abs(x[i-1]-x[j])-1) == 0:\n                dp[i] = True\n                break\n\n    for i in range(n, 0, -1):\n        if dp[i]:\n            m = i\n            break\n\n    ans = []\n    for i in range(m):\n        j = x.index(min(x[i:m+i]), i)\n        ans.append(x.pop(j))\n\n    return f\"{m}\\n{' '.join(map(str, ans))}\""
    },
    {
        "number": 4158,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    points = list(map(int, stdin.readline().strip().split()))\n    points = sorted(points)\n\n    # Initialize variables\n    best_subset = []\n    best_size = 0\n\n    # Loop through all possible subsets of points\n    for i in range(1, 2**n):\n        subset = [points[j] for j in range(n) if i & (1<<j)]\n        if len(subset) == 1:\n            continue\n        subset_size = len(subset)\n        for j in range(n-1):\n            for k in range(j+1, n):\n                if abs(subset[j] - subset[k])!= 2**(j-k):\n                    subset_size -= 1\n                    break\n        if subset_size > best_size:\n            best_subset = subset\n            best_size = subset_size\n\n    # Print output\n    print(best_size)\n    print(*best_subset)\n    return \"\""
    },
    {
        "number": 4158,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    points = list(map(int, stdin.split('\\n')[1].split()))\n    power_set = []\n    for i in range(1, 2**n):\n        subset = []\n        for j in range(n):\n            if i & (1<<j):\n                subset.append(points[j])\n        power_set.append(subset)\n    max_size = max(len(subset) for subset in power_set)\n    max_set = [subset for subset in power_set if len(subset) == max_size]\n    max_set.sort()\n    return f\"{len(max_set)}\\n\" + \" \".join(\" \".join(map(str, subset)) for subset in max_set)"
    },
    {
        "number": 4159,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.strip().split())\n    takahashi = A\n    aoki = B\n    for i in range(K):\n        if takahashi > 0:\n            takahashi -= 1\n        elif aoki > 0:\n            aoki -= 1\n    return f\"{takahashi} {aoki}\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = list(map(int, stdin.split()))\n\n    takahashi = 0\n    aoki = 0\n\n    for i in range(K):\n        if takahashi > 0:\n            takahashi -= 1\n        elif aoki > 0:\n            aoki -= 1\n        else:\n            continue\n\n        if i < K - 1:\n            aoki += 1\n            takahashi += 1\n\n    return f\"{takahashi} {aoki}\""
    },
    {
        "number": 4159,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n\n    takahashi_cookies = A\n    aoki_cookies = B\n\n    for _ in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n        else:\n            continue\n\n    return f\"{takahashi_cookies} {aoki_cookies}\"\n\nprint(solution(\"2 3 3\"))"
    },
    {
        "number": 4159,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi = A\n    aoki = B\n    for i in range(K):\n        if takahashi > 0:\n            takahashi -= 1\n        elif aoki > 0:\n            aoki -= 1\n    return f\"{takahashi} {aoki}\""
    },
    {
        "number": 4159,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi_cookies = A\n    aoki_cookies = B\n    for _ in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n    return f\"{takahashi_cookies} {aoki_cookies}\""
    },
    {
        "number": 4159,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get input values\n    A, B, K = map(int, stdin.strip().split())\n\n    # Initialize cookies for both players\n    takahashi_cookies = A\n    aoki_cookies = B\n\n    # Iterate K times\n    for i in range(K):\n        # Check which player has more cookies\n        if takahashi_cookies > aoki_cookies:\n            takahashi_cookies -= 1\n        elif takahashi_cookies < aoki_cookies:\n            aoki_cookies -= 1\n        # If both have no cookies, do nothing\n\n    # Return the final cookies for both players\n    return f\"{takahashi_cookies} {aoki_cookies}\""
    },
    {
        "number": 4159,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    cookies_takahashi = A\n    cookies_aoki = B\n    for i in range(K):\n        if cookies_takahashi >= 1:\n            cookies_takahashi -= 1\n        elif cookies_aoki >= 1:\n            cookies_aoki -= 1\n    return f\"{cookies_takahashi} {cookies_aoki}\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi = A\n    aoki = B\n    \n    for _ in range(K):\n        if takahashi > 0:\n            takahashi -= 1\n        elif aoki > 0:\n            aoki -= 1\n    \n    return f\"{takahashi} {aoki}\"\n\nprint(solution(\"2 3 3\"))"
    },
    {
        "number": 4159,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi_cookies = A\n    aoki_cookies = B\n    \n    for _ in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n        \n    print(takahashi_cookies, aoki_cookies)"
    },
    {
        "number": 4159,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    takahashi_cookies = a\n    aoki_cookies = b\n    for i in range(k):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n        else:\n            continue\n    return f\"{takahashi_cookies} {aoki_cookies}\"\n\nprint(solution(input()))"
    },
    {
        "number": 4160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    X = int(stdin.readline().strip())\n    \n    # calculate the balance after one year\n    balance = 100\n    \n    # initialize variables\n    year = 1\n    interest = 0\n    \n    # loop until the balance reaches X or above\n    while balance < X:\n        # calculate the interest earned in the year\n        interest = balance * 0.01\n        \n        # add the interest to the balance\n        balance += interest\n        \n        # increment the year counter\n        year += 1\n    \n    # print the number of years it takes for the balance to reach X or above\n    print(year)\n    \n    return \"\""
    },
    {
        "number": 4160,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    x = int(stdin.strip())\n\n    # initialize balance and years\n    balance = 100\n    years = 1\n\n    # calculate interest\n    interest = balance * 0.01\n\n    # while balance is less than x\n    while balance < x:\n        # add interest to balance\n        balance += interest\n        # increment years\n        years += 1\n\n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    year = 1\n    balance = 100\n    \n    while balance <= x:\n        balance += balance * 0.01  # add interest\n        year += 1\n        \n    return str(year)"
    },
    {
        "number": 4160,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    balance = 100\n    year = 1\n    while balance <= X:\n        balance += balance * 0.01\n        year += 1\n    return str(year)"
    },
    {
        "number": 4160,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    x = int(stdin)\n    \n    # Initialize variables\n    balance = 100\n    years = 0\n    interest_rate = 0.01\n    \n    # Calculate interest and update balance\n    while balance < x:\n        balance = balance * (1 + interest_rate)\n        years += 1\n    \n    # Print result\n    print(years)\n    \n    return \"\""
    },
    {
        "number": 4160,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    balance = 100\n    years = 1\n    while balance < x:\n        balance += balance * 0.01\n        years += 1\n    return str(years)\n\nprint(solution(input())) # prints \"3\" in the example case"
    },
    {
        "number": 4160,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    balance = 100\n    year = 0\n    while balance < X:\n        balance = balance * (1 + 0.01)\n        year += 1\n    return str(year)"
    },
    {
        "number": 4160,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    balance = 100\n    years = 1\n    while balance < x:\n        balance += balance * 0.01\n        years += 1\n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    balance = 100\n    years = 1\n    while balance < x:\n        balance += balance * 0.01  # interest\n        years += 1\n    return str(years)\n"
    },
    {
        "number": 4160,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    balance = 100\n    years = 1\n    while balance < x:\n        balance += balance * 0.01\n        years += 1\n    return str(years)"
    },
    {
        "number": 4161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    sum_gcd = 0\n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                sum_gcd += gcd(a,b,c)\n    return str(sum_gcd)\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    ans = 0\n    for i in range(1, K+1):\n        for j in range(1, K+1):\n            for k in range(1, K+1):\n                ans += gcd(i, j, k)\n    return str(ans)\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function finds the sum of the greatest common divisor of all triplets (a,b,c) such that a,b,c are integers from 1 to K.\n    \"\"\"\n    # Read input\n    K = int(stdin)\n    \n    # Initialize sum of gcd\n    total = 0\n    \n    # Loop through all possible triplets (a,b,c)\n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                # Calculate gcd and add to total\n                total += gcd(a, b, c)\n    \n    # Return total\n    return str(total)\n\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.readline())\n    total = 0\n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                total += gcd(a, b, c)\n    return str(total)\n    \ndef"
    },
    {
        "number": 4161,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.readline())\n    ans = 0\n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                ans += abs(a*b*c) // gcd(a, b, c)\n    return str(ans)"
    },
    {
        "number": 4161,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    result = 0\n    for a in range(1, k+1):\n        for b in range(1, k+1):\n            for c in range(1, k+1):\n                result += gcd(a, b, c)\n    return str(result)\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    ans = 0\n    for a in range(1, k+1):\n        for b in range(1, k+1):\n            for c in range(1, k+1):\n                ans += gcd(a, b, c)\n    return str(ans)\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    ans = 0\n    for i in range(1, k+1):\n        for j in range(1, k+1):\n            for k in range(1, k+1):\n                ans += math.gcd(i, j, k)\n    return str(ans)"
    },
    {
        "number": 4161,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    result = 0\n    for a in range(1, k+1):\n        for b in range(1, k+1):\n            for c in range(1, k+1):\n                result += gcd(a,b,c)\n    return str(result)\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.readline().strip())\n    answer = 0\n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                answer += gcd(a,b,c)\n    return str(answer)\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # calculate f(m) for all possible values of m\n    f_m = [0] * (10**6 + 1)  # 10^6 is the maximum possible value of m\n    for i in range(N):\n        for j in range(1, 10**6 + 1):\n            f_m[j] += j % A[i]\n\n    # find the maximum value of f(m)\n    max_f = 0\n    for j in range(1, 10**6 + 1):\n        if f_m[j] > max_f:\n            max_f = f_m[j]\n\n    # return the maximum value of f(m)\n    return str(max_f)"
    },
    {
        "number": 4162,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    input_lines = stdin.split('\\n')\n    N = int(input_lines[0])\n    numbers = list(map(int, input_lines[1].split()))\n    \n    # Finding the maximum value of f\n    max_f = float('-inf')\n    for m in range(1, 1000000):\n        f = sum([(m % numbers[i]) for i in range(N)])\n        max_f = max(max_f, f)\n    \n    return str(max_f)"
    },
    {
        "number": 4162,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Find max value of f\n    max_f = 0\n    for m in range(max(a)):\n        f = sum([m % a_i for a_i in a])\n        if f > max_f:\n            max_f = f\n\n    # Print result\n    return str(max_f)\n"
    },
    {
        "number": 4162,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    max_value = 0\n    for i in range(1, 10001):\n        value = 0\n        for j in range(n):\n            value += i % a[j]\n        if value > max_value:\n            max_value = value\n    return str(max_value)"
    },
    {
        "number": 4162,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Calculating the maximum value of f\n    f_max = sum(i % j for i in range(1, 1000001) for j in a)\n\n    return str(f_max)"
    },
    {
        "number": 4162,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n\n    # Calculate f(m) for all possible values of m\n    f = [0] * (max(nums) + 1)\n    for i in range(n):\n        for j in range(max(nums) + 1):\n            f[j] = (f[j] + (j % nums[i])) % 1000000\n\n    # Find maximum value of f\n    max_f = 0\n    for i in range(max(nums) + 1):\n        max_f = max(max_f, f[i])\n\n    return str(max_f)"
    },
    {
        "number": 4162,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # initialize variables\n    max_f = 0\n    max_m = 0\n    \n    # iterate over all possible values of m\n    for m in range(1, 1000000):\n        # calculate f(m)\n        f = sum(m % x for x in a)\n        \n        # update max_f and max_m if f(m) is greater than max_f\n        if f > max_f:\n            max_f = f\n            max_m = m\n    \n    # print the result\n    return str(max_m)"
    },
    {
        "number": 4162,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # compute f(m) for all m\n    max_val = 0\n    for i in range(2**n):\n        m = sum(int(digit) * (2**power) for power, digit in enumerate(format(i, '0{}b'.format(n))))\n        f_m = sum(m % a_i for a_i in a)\n        if f_m > max_val:\n            max_val = f_m\n\n    # output result\n    return str(max_val)"
    },
    {
        "number": 4162,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n\n    # Calculating max value of f\n    max_f = 0\n    for i in range(2, 1000001):\n        f = sum([i % x for x in arr])\n        if f > max_f:\n            max_f = f\n\n    # Printing max value of f\n    return str(max_f)"
    },
    {
        "number": 4162,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Compute f(m) for all m in the range [1, 10^9]\n    f = [0] * (10**9 + 1)\n    for i in range(N):\n        for j in range(10**9 + 1):\n            f[j] = (f[j] + (j % a[i])) % 1000000007\n\n    # Find the maximum value of f\n    max_f = 0\n    for i in range(10**9 + 1):\n        max_f = max(max_f, f[i])\n\n    return str(max_f)"
    },
    {
        "number": 4163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    rolls = []\n    for _ in range(n):\n        roll = [int(x) for x in stdin.readline().strip().split()]\n        rolls.append(roll)\n\n    # check for doublets\n    for i in range(n-2):\n        if rolls[i][0] == rolls[i][1] == rolls[i+1][0] == rolls[i+1][1] == rolls[i+2][0] == rolls[i+2][1]:\n            return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    prev = None\n    count = 0\n    for i in range(1, n):\n        if lines[i] == lines[i-1]:\n            count += 1\n        else:\n            count = 0\n        if count >= 3:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    prev_dice = []\n    for i in range(N):\n        dice = list(map(int, stdin.readline().strip().split()))\n        if dice[0] == dice[1] and len(prev_dice) > 1 and prev_dice[-2][0] == dice[0]:\n            return \"Yes\"\n        prev_dice.append(dice)\n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    prev_dice = None\n    count = 0\n    for i in range(n):\n        curr_dice = list(map(int, stdin.readline().split()))\n        if curr_dice == prev_dice:\n            count += 1\n        else:\n            count = 0\n        if count >= 3:\n            return \"Yes\"\n        prev_dice = curr_dice\n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    dices = [tuple(map(int, line.split())) for line in lines[1:]]\n    last_two = dices[0]\n    count = 0\n    for dice in dices[1:]:\n        if last_two == dice:\n            count += 1\n        else:\n            count = 1\n        if count >= 3:\n            return 'Yes'\n        last_two = dice\n    return 'No'"
    },
    {
        "number": 4163,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    prev_dice = None\n    count = 0\n    for i in range(N):\n        curr_dice = tuple(map(int, stdin.readline().strip().split()))\n        if curr_dice == prev_dice:\n            count += 1\n        else:\n            count = 1\n        if count == 3:\n            return 'Yes'\n        prev_dice = curr_dice\n    return 'No'"
    },
    {
        "number": 4163,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    dices = [[int(dice) for dice in line.split()] for line in lines[1:]]\n    count = 0\n    for i in range(N-2):\n        if dices[i][0] == dices[i][1] and dices[i+1][0] == dices[i+1][1] and dices[i+2][0] == dices[i+2][1]:\n            count += 1\n    if count >= 3:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4163,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    prev_dice = None\n    count = 0\n    for i in range(N):\n        dice1, dice2 = map(int, stdin.readline().strip().split())\n        if prev_dice == (dice1, dice2):\n            count += 1\n        else:\n            count = 1\n        prev_dice = (dice1, dice2)\n        if count >= 3:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    prev_d1 = -1\n    prev_d2 = -1\n    count = 0\n    for i in range(N):\n        d1, d2 = map(int, stdin.readline().strip().split())\n        if d1 == d2 and prev_d1 == prev_d2 and prev_d1!= -1:\n            count += 1\n        else:\n            count = 0\n        prev_d1 = d1\n        prev_d2 = d2\n        if count >= 3:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    prev_d1 = None\n    prev_d2 = None\n    count = 0\n    for i in range(N):\n        d1, d2 = map(int, stdin.readline().strip().split())\n        if d1 == d2 and prev_d1 == prev_d2:\n            count += 1\n        else:\n            count = 0\n        prev_d1 = d1\n        prev_d2 = d2\n        if count >= 3:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4164,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.strip())\n    area_1 = 3.14 * r * r\n    area_2 = 3.14 * 1 * 1\n    ratio = area_1 / area_2\n    return str(int(ratio))"
    },
    {
        "number": 4164,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_r = 3.141592653589793 * r**2\n    area_1 = 3.141592653589793 * 1**2\n    result = area_r // area_1\n    return str(result)"
    },
    {
        "number": 4164,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_r = 3.14 * r ** 2\n    area_1 = 3.14 * 1 ** 2\n    result = area_r // area_1\n    return str(result)"
    },
    {
        "number": 4164,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area1 = 3.141592653589793 * (r*r)\n    area2 = 3.141592653589793 * (1*1)\n    quotient = area1 / area2\n    return str(int(quotient))\n\nprint(solution(input()))"
    },
    {
        "number": 4164,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_r = 3.14 * r * r\n    area_1 = 3.14 * 1 * 1\n    result = area_r // area_1\n    return str(result)"
    },
    {
        "number": 4164,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.strip())\n    area1 = 3.14 * r * r\n    area2 = 3.14 * 1 * 1\n    result = area1 / area2\n    return str(int(result))"
    },
    {
        "number": 4164,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_of_r = (r ** 2) * 3.14\n    area_of_1 = 1\n    return str(area_of_r // area_of_1)\n\nprint(solution(input()))"
    },
    {
        "number": 4164,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_of_circle_r = 3.14 * (r ** 2)\n    area_of_circle_1 = 3.14 * (1 ** 2)\n    answer = area_of_circle_r // area_of_circle_1\n    return str(answer)"
    },
    {
        "number": 4164,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(int(3.14*r*r/4))"
    },
    {
        "number": 4164,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_1 = 3.141592653589793 * (1**2)\n    area_r = 3.141592653589793 * (r**2)\n    return str(int(area_r / area_1))"
    },
    {
        "number": 4165,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sides = list(map(int, stdin.readline().strip().split()))\n    if max(sides) < sum(sides) - max(sides):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline())\n    sides = list(map(int, stdin.readline().split()))\n    \n    # check if polygon can be drawn\n    longest_side = max(sides)\n    other_sides = sorted(sides)[1:-1]\n    if longest_side > sum(other_sides):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    sides = list(map(int, stdin.readline().split()))\n    sides.sort(reverse=True)\n    if sides[0] > sum(sides[1:]) - sides[0]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function reads the input from the standard input stream,\n    determines if an N-sided polygon can be drawn on a two-dimensional plane,\n    and returns \"Yes\" if the polygon can be drawn and \"No\" otherwise.\n    \"\"\"\n    # Read the number of sides of the polygon\n    n = int(stdin.readline())\n\n    # Read the length of each side of the polygon\n    side_lengths = list(map(int, stdin.readline().strip().split()))\n\n    # Check if the polygon satisfies the condition\n    if max(side_lengths) < sum(side_lengths[:-1]):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sides = list(map(int, stdin.split()[1:]))\n    longest_side = max(sides)\n    sum_of_sides = sum(sides)\n    if longest_side < sum_of_sides - longest_side:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sides = [int(side) for side in stdin.readline().strip().split()]\n    if max(sides) < sum(sides) - max(sides):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sides = list(map(int, stdin.readline().strip().split()))\n    longest_side = max(sides)\n    sum_sides = sum(sides) - longest_side\n    return \"Yes\" if longest_side < sum_sides else \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N = int(stdin.readline())\n    lengths = list(map(int, stdin.readline().split()))\n\n    # Check if the polygon can be drawn\n    if max(lengths) < sum(lengths) - max(lengths):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *lengths = map(int, stdin.split())\n\n    if max(lengths) >= sum(lengths) - max(lengths):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, sides = list(map(int, stdin.strip().split()))\n    sides.sort(reverse=True)\n    if sides[0] >= sum(sides[1:]):\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4166,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.split())\n    digits = [0] * m\n    for i in range(m):\n        s, c = map(int, stdin.readline().split())\n        digits[i] = c * 10 ** (n - s)\n    # find smallest integer\n    num = 0\n    for i in range(m):\n        num += digits[i]\n    # check if smallest integer satisfies conditions\n    for i in range(m):\n        if num % 10 ** (n - i) // 10 ** (n - i - 1)!= digits[i]:\n            return str(num)\n    # otherwise, return -1\n    return \"-1\""
    },
    {
        "number": 4166,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().strip().split())\n    digits = [int(stdin.readline().strip()) for _ in range(M)]\n\n    # Check conditions\n    for i in range(10**N):\n        # Convert to string and pad with zeros\n        num_str = str(i).zfill(N)\n\n        # Check if first N-M digits match conditions\n        if all(num_str[j] == str(digits[j-1]) for j in range(1, M+1)):\n            # Check remaining digits\n            if all(int(num_str[j]) <= digits[j-1] for j in range(M+1, N+1)):\n                return str(i)\n\n    # No solution found\n    return \"-1\""
    },
    {
        "number": 4166,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    digits = [0] * n\n    for i in range(m):\n        s, c = map(int, stdin.split())\n        digits[s-1] = c\n    \n    # check if there exists an integer not less than 0 that satisfies the conditions\n    for i in range(10 ** n):\n        num = i\n        for j in range(n):\n            num += digits[j] * 10 ** j\n        if num >= 0:\n            return str(num)\n    \n    # no such integer exists\n    return '-1'"
    },
    {
        "number": 4166,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    s, c = [], []\n    for _ in range(M):\n        si, ci = map(int, stdin.readline().split())\n        s.append(si)\n        c.append(ci)\n    \n    if N == 1:\n        return str(c[0])\n    \n    for i in range(1, 10):\n        num = i * pow(10, N-1) + c[0]\n        ok = True\n        for j in range(1, M):\n            if s[j] > N or num % 10!= c[j]:\n                ok = False\n                break\n            num //= 10\n        \n        if ok:\n            return str(num)\n    \n    return \"-1\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, M = map(int, lines[0].split())\n    digits = [0] * N\n    for line in lines[1:]:\n        s, c = map(int, line.split())\n        digits[s-1] = c\n    \n    # check for non-negative integer\n    for i in range(10**N):\n        num = i\n        for j in range(N):\n            if digits[j]!= 0 and digits[j]!= num % 10:\n                break\n            num //= 10\n        else:\n            return str(i)\n    \n    return '-1'"
    },
    {
        "number": 4166,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    input_list = stdin.split()\n    N = int(input_list[0])\n    M = int(input_list[1])\n    digit_list = []\n    for i in range(M):\n        s_i, c_i = map(int, input().split())\n        digit_list.append((s_i-1, c_i))\n    \n    # check if there is an integer satisfying the conditions\n    for num in range(10**(N-1), 10**N):\n        str_num = str(num)\n        if len(str_num)!= N:\n            continue\n        for i, digit in digit_list:\n            if int(str_num[i])!= digit:\n                break\n        else:\n            return str_num\n    \n    # no integer satisfying the conditions found\n    return \"-1\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    digits = [0] * n\n    for i in range(m):\n        s, c = map(int, stdin.readline().split())\n        digits[s-1] = c\n    result = 0\n    for digit in digits:\n        result = result * 10 + digit\n    return str(result) if all(digit!= 0 for digit in digits) else '-1'"
    },
    {
        "number": 4166,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    digits = [0] * n\n    for i in range(m):\n        s, c = map(int, stdin.readline().split())\n        digits[s-1] = c\n\n    # binary search for smallest integer\n    left, right = 0, 10**n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if satisfies(digits, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    if left == 10**n - 1:\n        return \"-1\"\n    else:\n        return str(left)\n\ndef"
    },
    {
        "number": 4166,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.readline().split())\n    nums = []\n    for _ in range(M):\n        s, c = map(int, stdin.readline().split())\n        nums.append((s, c))\n\n    # Check for special cases\n    if N == 1:\n        if all(c == 0 for s, c in nums):\n            return \"0\"\n        else:\n            return \"-1\"\n    elif N == 2 and all(c == 0 for s, c in nums):\n        return \"0\"\n    elif N == 2 and nums[0][1] == 0:\n        return \"-1\"\n\n    # Find smallest integer\n    if nums[0][1] == 0:\n        ans = 0\n    else:\n        ans = nums[0][1]\n    for i in range(1, M):\n        ans = ans * 10 + nums[i][1]\n    for i in range(N - M):\n        ans = ans * 10\n\n    # Check if answer is valid\n    if ans >= 0 and all(ans % 10**s == c for s, c in nums):\n        return str(ans)\n    else:\n        return \"-1\""
    },
    {
        "number": 4166,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    digits = [''] * m\n    for i in range(m):\n        s, c = map(int, stdin.strip().split())\n        digits[i] = c * 10**(n-s)\n    result = int(''.join(map(str, digits)))\n    if result < 0:\n        return '-1'\n    return str(result)\n"
    },
    {
        "number": 4167,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            for c in range(1, n+1):\n                if (a+b) % k == 0 and (b+c) % k == 0 and (c+a) % k == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 4167,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int, stdin.strip().split())\n    count = 0\n    for a in range(1,N+1):\n        for b in range(a+1,N+1):\n            for c in range(b+1,N+1):\n                if (a+b)%K == 0 and (b+c)%K == 0 and (c+a)%K == 0:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4167,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.strip().split())\n\n    # Create a set of all multiples of K less than or equal to N\n    multiples = set(range(K, N+1, K))\n\n    # Initialize counter\n    count = 0\n\n    # Check all pairs of multiples\n    for i in multiples:\n        for j in multiples:\n            # Check if the sum of the pair is also a multiple of K\n            if (i+j) % K == 0:\n                # Check if the difference between the pair is also a multiple of K\n                if (j-i) % K == 0:\n                    # Check if the product of the pair is also a multiple of K\n                    if (i*j) % K == 0:\n                        count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 4167,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    for i in range(1, n+1):\n        if i % k == 0:\n            for j in range(i, n+1, k):\n                if j % k == 0:\n                    for k in range(j, n+1, k):\n                        if k % k == 0:\n                            count += 1\n    return count"
    },
    {
        "number": 4167,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    for i in range(1, n+1):\n        if i % k == 0:\n            for j in range(1, n+1):\n                if j % k == 0:\n                    if (i+j) % k == 0:\n                        for k in range(1, n+1):\n                            if k % k == 0:\n                                if (i+j+k) % k == 0:\n                                    count += 1\n    return str(count)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4167,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    result = 0\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            for k in range(1, N+1):\n                if (i + j) % K == 0 and (j + k) % K == 0 and (k + i) % K == 0:\n                    result += 1\n    return result"
    },
    {
        "number": 4167,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split()))\n    count = 0\n    for a in range(1, n+1):\n        for b in range(a+1, n+1):\n            for c in range(b+1, n+1):\n                if (a+b) % k == 0 and (b+c) % k == 0 and (c+a) % k == 0:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4167,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function finds the number of triples (a,b,c) of positive integers not greater than N such that a+b,b+c and c+a are all multiples of K.\n    \"\"\"\n    n, k = map(int, stdin.strip().split())\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Iterate through all possible combinations of triples\n    for a in range(1, n+1):\n        for b in range(a+1, n+1):\n            for c in range(b+1, n+1):\n                if (a+b) % k == 0 and (b+c) % k == 0 and (c+a) % k == 0:\n                    count += 1\n\n    # Return the count of triples\n    return str(count)\n"
    },
    {
        "number": 4167,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    count = 0\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            for c in range(1, n+1):\n                if (a+b) % k == 0 and (b+c) % k == 0 and (c+a) % k == 0:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4167,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n\n    count = 0\n    for a in range(1, N+1):\n        for b in range(1, N+1):\n            for c in range(1, N+1):\n                if (a+b)%K == 0 and (b+c)%K == 0 and (c+a)%K == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 4168,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n < 0:\n        n = -n\n        sign = '-'\n    else:\n        sign = ''\n    res = ''\n    while n:\n        res += str(n & 1)\n        n >>= 1\n    res = res.lstrip('0') or '0'\n    return sign + res"
    },
    {
        "number": 4168,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return '0'\n    s = ''\n    while N!= 0:\n        if N % (-2) == N:\n            s = '1' + s\n            N = 0\n        else:\n            s = str(N % (-2)) + s\n            N //= (-2)\n    return s\n"
    },
    {
        "number": 4168,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    s = ''\n    while n:\n        if n & 1:\n            s = '1' + s\n        else:\n            s = '0' + s\n        n >>= 1\n    if s[0] == '0':\n        s = s[1:]\n    return s"
    },
    {
        "number": 4168,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin)\n    \n    # Compute base -2 representation of n\n    if n == 0:\n        return '0'\n    elif n < 0:\n        n = abs(n)\n        result = ''\n        while n > 0:\n            if n % 2 == 1:\n                result = '1' + result\n                n -= 1\n            else:\n                result = '0' + result\n            n //= 2\n        if result[0]!= '1':\n            result = '1' + result\n        return result\n    else:\n        result = ''\n        while n > 0:\n            if n % 2 == 1:\n                result = '1' + result\n                n -= 1\n            else:\n                result = '0' + result\n            n //= 2\n        return result"
    },
    {
        "number": 4168,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    s = ''\n    while n > 0:\n        r = n % -2\n        s = str(r) + s\n        n //= -2\n    if s[0]!= '1':\n        s = '1' + s\n    return s"
    },
    {
        "number": 4168,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    s = \"\"\n    i = 0\n    while n > 0:\n        if n % 2 == 1:\n            s = \"1\" + s\n            i = i + 1\n        else:\n            s = \"0\" + s\n        n //= 2\n    if i == 0:\n        s = \"1\" + s\n    return s"
    },
    {
        "number": 4168,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"0\"\n    else:\n        result = \"\"\n        sign = 1\n        while N!= 0:\n            if N % 2 == 0:\n                sign = 1\n            else:\n                sign = -1\n                if result == \"\":\n                    result = \"1\"\n            result = str(sign) + result\n            N //= 2\n        return result"
    },
    {
        "number": 4168,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    elif n < 0:\n        n = abs(n)\n        return '1' + solution(str(n - 1))\n    else:\n        return '1' + solution(str(n - 2)) + '1'\n\nprint(solution(input()))"
    },
    {
        "number": 4168,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return '0'\n    S = ''\n    while N > 0:\n        S = str(N & 1) + S\n        N >>= 1\n    if S[0] == '0':\n        S = '1' + S\n    return S"
    },
    {
        "number": 4168,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    result = \"\"\n    while n:\n        if n % 2 == 1:\n            result = \"1\" + result\n            n -= 1\n        else:\n            result = \"0\" + result\n        n //= 2\n    return result\n"
    },
    {
        "number": 4169,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    N, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    B = list(map(int, stdin.readline().split()))\n\n    # Sort the stores by the amount of money they can buy a drink for\n    A = sorted(A, reverse=True)\n    B = sorted(B, reverse=True)\n\n    # Initialize variables\n    money = 0\n    drinks = 0\n\n    # Iterate over the stores\n    for i in range(N):\n        # Find the maximum amount of drinks that can be bought for this store\n        max_drinks = min(M - drinks, B[i])\n\n        # Update the amount of money and the number of drinks bought\n        money += A[i] * max_drinks\n        drinks += max_drinks\n\n        # Stop if we have bought enough drinks\n        if drinks >= M:\n            break\n\n    # Return the minimum amount of money required to buy M drinks\n    return str(money)"
    },
    {
        "number": 4169,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, M = map(int, stdin.readline().split())\n    stores = []\n    for i in range(N):\n        A_i, B_i = map(int, stdin.readline().split())\n        stores.append((A_i, B_i))\n\n    # sort stores by price\n    stores = sorted(stores, key=lambda x: x[0])\n\n    # initialize variables\n    max_cans = 0\n    total_price = 0\n\n    # iterate over stores to buy drinks\n    for A_i, B_i in stores:\n        if max_cans + B_i <= M:\n            max_cans += B_i\n            total_price += A_i * B_i\n        else:\n            max_cans += M - max_cans\n            total_price += A_i * (M - max_cans)\n            break\n\n    return str(total_price)"
    },
    {
        "number": 4169,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.readline().split())\n    stores = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().split())\n        stores.append((a, b))\n\n    # Greedy approach: start by buying the cheapest drinks and gradually increase the price\n    drinks_bought = 0\n    total_price = 0\n    stores = sorted(stores, key=lambda x: x[0])  # Sort stores by price\n    for price, capacity in stores:\n        if drinks_bought + capacity <= m:  # If we still have capacity, buy as much as possible\n            total_price += price * capacity\n            drinks_bought += capacity\n        else:  # If we run out of capacity, buy as much as we can\n            total_price += price * m\n            drinks_bought = m\n            break\n\n    return str(total_price)\n"
    },
    {
        "number": 4169,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, M = map(int, lines[0].split())\n    A = list(map(int, lines[1:]))\n    A.sort()\n    # binary search\n    l, r = 0, 10**9\n    while l < r:\n        mid = (l + r) // 2\n        can_buy = 0\n        for a, b in A:\n            can_buy += a * min(b, mid // a)\n        if can_buy >= M:\n            r = mid\n        else:\n            l = mid + 1\n    return l"
    },
    {
        "number": 4169,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.readline().split()))\n    B = list(map(int, stdin.readline().split()))\n\n    # Sort stores by increasing price\n    A, B = zip(*sorted(zip(A, B)))\n\n    # Initialize variables\n    min_price = 0\n    drinks_bought = 0\n\n    # Iterate through stores and buy drinks until M is reached\n    for i in range(N):\n        # Calculate the maximum number of drinks that can be bought at this store\n        max_drinks = min(M - drinks_bought, B[i])\n\n        # Calculate the price of the drinks at this store\n        price = max_drinks * A[i]\n\n        # Update the minimum price and number of drinks bought\n        if i == 0 or price < min_price:\n            min_price = price\n        drinks_bought += max_drinks\n\n    # Return the minimum price\n    return min_price"
    },
    {
        "number": 4169,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    N, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    B = list(map(int, stdin.readline().split()))\n\n    # Sorting stores by the highest price\n    A_sorted = sorted(A, reverse=True)\n    B_sorted = sorted(B, reverse=True)\n\n    # Building table of maximum values\n    table = [[0 for _ in range(M+1)] for _ in range(N+1)]\n\n    # Computing maximum values for each store\n    for i in range(N):\n        for j in range(M+1):\n            if j < B_sorted[i]:\n                table[i+1][j] = table[i][j]\n            else:\n                table[i+1][j] = max(table[i][j], table[i][j-B_sorted[i]] + A_sorted[i])\n\n    return table[N][M]\n"
    },
    {
        "number": 4169,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.readline().split())\n    a_b = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    \n    # Sort a_b by descending A\n    a_b = sorted(a_b, key=lambda x: x[0], reverse=True)\n    \n    # Initialize variables\n    res = 0\n    cans = 0\n    \n    # Buy drinks\n    for i in range(n):\n        # Check if we can buy this many cans\n        if cans + a_b[i][1] <= m:\n            cans += a_b[i][1]\n            res += a_b[i][0] * a_b[i][1]\n        else:\n            # We can't buy this many cans, so we buy the maximum we can\n            res += a_b[i][0] * (m - cans)\n            break\n    \n    return str(res)"
    },
    {
        "number": 4169,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    B = list(map(int, stdin.readline().split()))\n    \n    # sort stores by price per can\n    A, B = zip(*sorted(zip(A, B)))\n    \n    # initialize variables\n    can_count = 0\n    money = 0\n    \n    # buy cans from stores until M cans are bought\n    for i in range(N):\n        # calculate price per can\n        price_per_can = A[i]\n        \n        # calculate remaining money\n        remaining_money = money + can_count * price_per_can\n        \n        # calculate remaining drinks to buy\n        remaining_drinks = M - can_count\n        \n        # calculate maximum cans to buy\n        max_cans_to_buy = min(B[i], remaining_drinks)\n        \n        # calculate additional money required\n        additional_money = max_cans_to_buy * price_per_can\n        \n        # update remaining money\n        remaining_money -= additional_money\n        \n        # update can count and money\n        can_count += max_cans_to_buy\n        money = remaining_money\n        \n        # check if all cans are bought\n        if can_count == M:\n            break\n    \n    # return minimum money required to buy M cans\n    return money"
    },
    {
        "number": 4169,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    \n    # sort stores by price\n    a.sort(reverse=True)\n    # initialize variables\n    dp = [0] * (m+1)\n    # fill dp\n    for i in range(1, m+1):\n        for j in range(n):\n            if i >= b[j]:\n                dp[i] = max(dp[i], dp[i-b[j]] + a[j])\n    # find minimum price\n    return dp[m]"
    },
    {
        "number": 4169,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    b.sort(reverse=True)\n    c = 0\n    for i in range(n):\n        c += a[i] * b[i]\n        if c >= m:\n            return str(c)\n    return str(c)\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n    print(solution(stdin))"
    },
    {
        "number": 4170,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n    \n    # Initialize variables\n    max_moves = 0\n    current_height = heights[0]\n    \n    # Iterate through squares\n    for i in range(1, N):\n        # If current height is greater than next height, move\n        if heights[i] <= current_height:\n            max_moves += 1\n            current_height = heights[i]\n        # If current height is not greater than next height, don't move\n        else:\n            max_moves += 1\n            current_height = heights[i]\n    \n    # Return maximum number of moves\n    return str(max_moves)"
    },
    {
        "number": 4170,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    N = int(stdin.readline())\n    heights = list(map(int, stdin.readline().split()))\n    \n    # Initializing variables\n    max_moves = 0\n    current_height = heights[0]\n    \n    # Looping through all squares\n    for i in range(1, N):\n        # Updating max_moves if the height of the next square is not greater than that of the current square\n        if heights[i] <= current_height:\n            max_moves += 1\n            current_height = heights[i]\n        # Updating current_height if the height of the next square is greater than that of the current square\n        else:\n            current_height = heights[i]\n    \n    # Returning the maximum number of times you can move\n    return str(max_moves)"
    },
    {
        "number": 4170,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n    max_moves = 0\n    current_height = heights[0]\n    for i in range(1, n):\n        if heights[i] <= current_height:\n            max_moves += 1\n            current_height = heights[i]\n    return str(max_moves)"
    },
    {
        "number": 4170,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_moves = 0\n    curr_height = heights[0]\n\n    # Iterate through squares\n    for i in range(1, N):\n        # If height of next square is greater than current, update current height and increment moves\n        if heights[i] > curr_height:\n            curr_height = heights[i]\n            max_moves += 1\n        # If height of next square is less than or equal to current, update current height\n        else:\n            curr_height = heights[i]\n\n    return str(max_moves)"
    },
    {
        "number": 4170,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    H = list(map(int, stdin.readline().strip().split()))\n    i = 0\n    max_moves = 0\n    while i < N - 1:\n        if H[i] >= H[i+1]:\n            i += 1\n        else:\n            max_moves += 1\n            i += 2\n    if i == N - 1:\n        max_moves += 1\n    return str(max_moves)"
    },
    {
        "number": 4170,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    heights = list(map(int, lines[1].split()))\n\n    # Initialize variables\n    max_moves = 0\n    curr_height = heights[0]\n\n    # Loop through the squares\n    for i in range(1, N):\n        if heights[i] <= curr_height:\n            # If height is less than or equal to current height,\n            # move to the next square\n            max_moves += 1\n            curr_height = heights[i]\n        else:\n            # If height is greater than current height,\n            # move to the next square without incrementing moves\n            curr_height = heights[i]\n\n    return str(max_moves)"
    },
    {
        "number": 4170,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    heights = list(map(int, stdin.readline().strip().split()))\n\n    max_moves = 0\n    current_height = heights[0]\n    for i in range(1, n):\n        if heights[i] > current_height:\n            max_moves += 1\n            current_height = heights[i]\n\n    print(max_moves)"
    },
    {
        "number": 4170,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    heights = list(map(int, stdin.readline().split()))\n    \n    # dp[i] represents the maximum number of times you can move to the right starting from the ith square\n    dp = [0] * n\n    dp[0] = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if heights[i] <= heights[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n                \n    return dp[-1]\n    \n"
    },
    {
        "number": 4170,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    H = list(map(int, lines[1].split()))\n\n    dp = [1] * N\n    for i in range(1, N):\n        if H[i] > H[i-1]:\n            dp[i] = dp[i-1] + 1\n        else:\n            dp[i] = dp[i-1]\n    \n    return str(dp[-1])"
    },
    {
        "number": 4170,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a string of input in the format \"N H_1 H_2... H_N\",\n    return the maximum number of times you can move.\n\n    Args:\n        stdin (str): Input string of N, H_1, H_2,..., H_N\n\n    Returns:\n        str: The maximum number of times you can move as a string.\n    \"\"\"\n    # Parse input\n    N = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n\n    # Initialize variables\n    max_moves = 0\n    current_height = heights[0]\n\n    # Iterate through the squares\n    for i in range(1, N):\n        # If the next square is taller than the current one, move to it\n        if heights[i] > current_height:\n            max_moves += 1\n            current_height = heights[i]\n        # Otherwise, continue moving to the next square\n        else:\n            continue\n\n    # Return the maximum number of moves\n    return str(max_moves)"
    },
    {
        "number": 4171,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    count = 0\n    max_num = max(a)\n    while max_num < k:\n        max_num *= 2\n        count += 1\n    \n    return count\n\ndef"
    },
    {
        "number": 4171,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for i in range(n):\n        while a[i] % 2 == 0:\n            a[i] //= 2\n            count += 1\n        if a[i] == 1:\n            k -= 1\n            if k == 0:\n                return str(count)\n    return str(count)\n\ndef"
    },
    {
        "number": 4171,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # find the maximum possible number of operations\n    max_op = -1\n    for i in range(n):\n        max_op = max(max_op, a[i] // 2)\n\n    # use binary search to find the minimum number of operations\n    left, right = 0, max_op\n    while left <= right:\n        mid = (left + right) // 2\n        op_count = 0\n        for i in range(n):\n            op_count += a[i] // mid\n        if op_count >= k:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return left\n\nprint(solution(\"5 3\\n1 2 2 4 5\")) # output: 1\nprint(solution(\"5 3\\n1 2 3 4 5\")) # output: 2\nprint(solution(\"5 3\\n1 2 3 3 3\")) # output: 0"
    },
    {
        "number": 4171,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    # initialize count\n    count = 0\n\n    # loop through array\n    for i in range(n):\n        # if count is less than k, increment\n        if a[i] < k:\n            count += k - a[i]\n            a[i] = k\n        # if count is equal to k, increment\n        elif a[i] == k:\n            count += 1\n        # if count is greater than k, decrement\n        elif a[i] > k:\n            count += a[i] - k\n            a[i] = k\n\n    # return minimum count\n    return count"
    },
    {
        "number": 4171,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if a.count(a[i]) >= k:\n            continue\n        count += 1\n        for j in range(n):\n            if a[j] % 2 == 0 and a[i] > 0:\n                a[j] //= 2\n    return count"
    },
    {
        "number": 4171,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    ops = 0\n    for i in range(n):\n        while a[i] % 2 == 0 and a.count(a[i]//2) > k:\n            a[i] //= 2\n            ops += 1\n\n    return str(ops)"
    },
    {
        "number": 4171,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        if a[i] < k:\n            count += k - a[i]\n            a[i] = k\n    if count == 0:\n        return str(0)\n    return str(count)"
    },
    {
        "number": 4171,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if a[i] >= k:\n            return count\n        a[i] //= 2\n        count += 1\n    return -1"
    },
    {
        "number": 4171,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n\n    count = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            continue\n        while a[i] > 0:\n            a[i] //= 2\n            count += 1\n\n    return count if sum(a) >= k * 2 else -1\n"
    },
    {
        "number": 4171,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n\n    count = 0\n    for i in range(n):\n        if a[i] >= k:\n            break\n        count += k - a[i]\n        a[i] = k\n\n    return count\n"
    },
    {
        "number": 4172,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    \n    count = 0\n    while k!= len(set(a)):\n        min_val = min(a)\n        max_val = max(a)\n        min_idx = a.index(min_val)\n        max_idx = a.index(max_val)\n        if min_val!= max_val:\n            if min_val!= a[min_idx + 1]:\n                a[min_idx] += 1\n            else:\n                a[max_idx] -= 1\n        else:\n            if min_val!= a[min_idx + 1]:\n                a[min_idx] += 1\n            else:\n                a[max_idx] -= 1\n        count += 1\n        \n    return str(count)"
    },
    {
        "number": 4172,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    moves = 0\n    for i in range(n):\n        if a.count(a[i]) < k:\n            a[i] += 1\n            moves += 1\n    for i in range(n):\n        if a.count(a[i]) < k:\n            a[i] -= 1\n            moves += 1\n    return moves"
    },
    {
        "number": 4172,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    counts = [0] * (n + 1)\n    for i in a:\n        counts[i] += 1\n\n    equal = 0\n    moves = 0\n    for i in range(1, n + 1):\n        if counts[i] > equal:\n            equal += 1\n            moves += i - equal\n        if equal == k:\n            break\n\n    return moves"
    },
    {
        "number": 4172,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.readline().split()))\n\n    # Sort the array\n    a.sort()\n\n    # Initialize counters for minimum and maximum elements\n    count_min = count_max = 0\n\n    # Count the number of equal elements\n    equal = a[0]\n\n    # Loop through the sorted array and count the number of moves required\n    for i in range(1, n):\n        if a[i] == equal:\n            continue\n        elif a[i] < equal:\n            count_min += equal - a[i]\n            equal = a[i]\n        else:\n            count_max += a[i] - equal\n            equal = a[i]\n        if count_min + count_max >= k:\n            break\n\n    # Return the minimum number of moves required\n    return max(count_min, count_max)\n"
    },
    {
        "number": 4172,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    max_a = max(a)\n    while k > 0 and a.count(max_a) < k:\n        max_i = a.index(max_a)\n        a[max_i] -= 1\n        count += 1\n    if k > 0:\n        return str(count)\n    else:\n        return 'IMPOSSIBLE'\n\nstdin = '6 5\\n1 2 2 4 2 3'\nprint(solution(stdin)) # Output: 3\n\nstdin = '7 5\\n3 3 2 1 1 1 3'\nprint(solution(stdin)) # Output: 4"
    },
    {
        "number": 4172,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    count = 0\n    \n    while count < k:\n        mn = min(a)\n        mx = max(a)\n        if a.count(mn) < k:\n            index = a.index(mn)\n            a[index] += 1\n            count += 1\n        elif a.count(mx) < k:\n            index = a.index(mx)\n            a[index] -= 1\n            count += 1\n        else:\n            break\n    \n    return count\n\nprint(solution(\"6 5\\n1 2 2 4 2 3\")) # 3\nprint(solution(\"7 5\\n3 3 2 1 1 1 3\")) # 4"
    },
    {
        "number": 4172,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Count the frequency of each element in the array\n    freq = [0] * (1000000 + 1)\n    for num in a:\n        freq[num] += 1\n\n    # Initialize variables for counting the minimum moves and the current number of equal elements\n    min_moves = 0\n    count = 0\n\n    # Loop through the array and count the minimum moves required to obtain at least k equal elements\n    for i in range(n):\n        # If the current element has not been counted yet or its frequency is less than k,\n        # increment the minimum moves and add the current element to the count\n        if freq[a[i]] == 0 or freq[a[i]] < k:\n            min_moves += 1\n            count += 1\n\n        # If the current element has already been counted and its frequency is greater than or equal to k,\n        # decrement the count and subtract the current element from the count\n        elif freq[a[i]] >= k:\n            count -= 1\n\n        # If the count reaches k, increment the minimum moves and reset the count\n        if count == k:\n            min_moves += 1\n            count = 0\n\n    # Print the minimum moves required to obtain at least k equal elements\n    return str(min_moves)"
    },
    {
        "number": 4172,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    moves = 0\n    count = a.count(a[0])\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            count = 1\n        else:\n            count += 1\n        if count >= k:\n            return moves + i\n    moves += n - count\n    return moves\n\nstdin = \"6 5\\n1 2 2 4 2 3\"\nprint(solution(stdin)) # Output: 3\n\nstdin = \"7 5\\n3 3 2 1 1 1 3\"\nprint(solution(stdin)) # Output: 4"
    },
    {
        "number": 4172,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    # Initialize the count of equal elements\n    equal_count = 0\n    \n    # Initialize the maximum value in the array\n    max_val = max(a)\n    \n    # Iterate over the array and check for equal elements\n    for i in range(n):\n        if a[i] == max_val:\n            equal_count += 1\n            if equal_count >= k:\n                return i\n    \n    # If we reach this point, we need to increase one of the minimum elements\n    # to obtain at least k equal elements\n    \n    # Initialize the minimum value in the array\n    min_val = min(a)\n    \n    # Initialize the minimum index of the minimum element\n    min_idx = -1\n    \n    # Iterate over the array and check for minimum elements\n    for i in range(n):\n        if a[i] == min_val:\n            min_idx = i\n            break\n    \n    # Increase the minimum element by one\n    a[min_idx] += 1\n    \n    # Initialize the count of equal elements again\n    equal_count = 0\n    \n    # Iterate over the array and check for equal elements again\n    for i in range(n):\n        if a[i] == max_val:\n            equal_count += 1\n            if equal_count >= k:\n                return i + 1\n    \n    # If we reach this point, the minimum element can be increased by one\n    # only once, so we return n\n    return n"
    },
    {
        "number": 4172,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    moves = 0\n    freq = {}\n\n    for i in range(n):\n        freq[a[i]] = freq.get(a[i], 0) + 1\n\n    max_freq = max(freq.values())\n    min_freq = min(freq.values())\n\n    while max_freq - min_freq < k:\n        if min_freq == 1:\n            return \"-1\"\n        elif min_freq == 2:\n            min_val = min(freq)\n            for i in range(n):\n                if freq[min_val] == min_freq and a[i] == min_val:\n                    a[i] -= 1\n                    freq[min_val] -= 1\n                    moves += 1\n                    break\n        else:\n            max_val = max(freq)\n            for i in range(n):\n                if freq[max_val] == max_freq and a[i] == max_val:\n                    a[i] += 1\n                    freq[max_val] -= 1\n                    moves += 1\n                    break\n\n        freq = {}\n        for i in range(n):\n            freq[a[i]] = freq.get(a[i], 0) + 1\n\n        max_freq = max(freq.values())\n        min_freq = min(freq.values())\n\n    return str(moves)\n"
    },
    {
        "number": 4173,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        n, a, b = map(int, stdin.readline().strip().split())\n        if n % 2 == 1:\n            print(n * max(a, b))\n        else:\n            print(n * min(a, b))\n    return ''"
    },
    {
        "number": 4173,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a, b = map(int, stdin.readline().split())\n    q = int(stdin.readline())\n    res = []\n    for i in range(q):\n        n_i, a_i, b_i = map(int, stdin.readline().split())\n        if n_i <= a_i:\n            res.append(n_i * a)\n        else:\n            if n_i % 2 == 0:\n                bottles = n_i // a_i\n                res.append(bottles * a_i * a + (n_i % a_i) * b)\n            else:\n                bottles = n_i // a_i + 1\n                res.append(bottles * a_i * a + (n_i % a_i) * b)\n    return \"\\n\".join(map(str, res))"
    },
    {
        "number": 4173,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    results = []\n    for i in range(1, q+1):\n        n, a, b = map(int, lines[i].split())\n        if n % 2 == 1:\n            results.append(a*(n//2+1))\n        else:\n            results.append(a*(n//2) + b)\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4173,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for i in range(q):\n        n, a, b = map(int, stdin.readline().split())\n        if n % 2 == 0:\n            ans = n//2 * a + n//2 * b\n        else:\n            ans = (n+1)//2 * a + (n-1)//2 * b\n        print(ans)\n    return ''"
    },
    {
        "number": 4173,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.splitlines()[0].split())\n    bottles = list(map(int, stdin.splitlines()[1:n+1]))\n    queries = [list(map(int, stdin.splitlines()[n+1+i].split())) for i in range(q)]\n    \n    first_bottle = 0\n    second_bottle = 0\n    for i in range(n):\n        if bottles[i] == 1:\n            first_bottle += 1\n        else:\n            second_bottle += 1\n    \n    dp = [[0 for i in range(n+1)] for j in range(2)]\n    dp[0][0] = 0\n    dp[1][0] = 0\n    \n    for i in range(1, n+1):\n        dp[0][i] = dp[0][i-1] + a * first_bottle\n        dp[1][i] = dp[1][i-1] + b * second_bottle\n        \n        if bottles[i-1] == 1:\n            first_bottle -= 1\n        else:\n            second_bottle -= 1\n    \n    for query in queries:\n        n_i, a_i, b_i = query\n        answer = float('inf')\n        for i in range(2):\n            answer = min(answer, dp[i][n_i] + (n_i-i)*max(a_i, b_i))\n        print(answer)\n        \n    return \"\"\n    \n"
    },
    {
        "number": 4173,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    q = int(stdin.readline().strip())\n    queries = []\n    for _ in range(q):\n        n, a, b = map(int, stdin.readline().strip().split())\n        queries.append((n, a, b))\n    \n    # binary search\n    left, right = 0, 10**12\n    while left <= right:\n        mid = (left + right) // 2\n        # calculate water available for each type\n        num_of_1 = mid // a\n        num_of_2 = (mid - num_of_1 * a) // b\n        # calculate total cost\n        total_cost = num_of_1 * a + num_of_2 * b\n        # check if we can buy n liters\n        if total_cost >= n:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    # find minimum cost for each query\n    res = []\n    for n, a, b in queries:\n        num_of_1 = n // a\n        num_of_2 = (n - num_of_1 * a) // b\n        total_cost = num_of_1 * a + num_of_2 * b\n        res.append(total_cost)\n    \n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 4173,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    queries = []\n    for i in range(q):\n        n_i, a_i, b_i = map(int, stdin.readline().split())\n        queries.append((n_i, a_i, b_i))\n    results = []\n    for n_i, a_i, b_i in queries:\n        if n_i % 2 == 0:\n            results.append(n_i // 2 * a_i)\n        else:\n            results.append((n_i + 1) // 2 * a_i)\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4173,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for i in range(q):\n        n, a, b = map(int, stdin.readline().split())\n        if n <= a:\n            print(n*a)\n        else:\n            print(a*a + (n-a)*b)\n    return \"\"\n\nprint(solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\"))"
    },
    {
        "number": 4173,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    results = []\n    for i in range(1, q+1):\n        n, a, b = map(int, lines[i].split())\n        if n%2 == 1:\n            results.append(min(a,b)*n)\n        else:\n            results.append(min(a,b)*n//2 + min(a,b)*n%2)\n    return '\\n'.join(map(str, results))\n"
    },
    {
        "number": 4173,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = []\n    for line in stdin.splitlines():\n        if line:\n            n, a, b = map(int, line.split())\n            queries.append((n, a, b))\n\n    for n, a, b in queries:\n        if n % 2 == 0:\n            a, b = b, a\n        if n // 2 <= a:\n            print(n // 2 * b)\n        else:\n            print(a + (n - 2 * a) // 2 * b)\n\n    return ''"
    },
    {
        "number": 4174,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    l = list(map(int, stdin.readline().split()))\n    d = [0] + [sum(l[:i]) for i in range(1, n+1)]\n    count = 0\n    for i in range(n+1):\n        if d[i] <= x:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 4174,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, X = map(int, stdin.readline().strip().split())\n    L = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    bounces = [0] * (N + 1)\n    for i in range(1, N + 1):\n        bounces[i] = bounces[i - 1] + L[i - 1]\n\n    # count bounces\n    count = 0\n    for i in range(N + 1):\n        if bounces[i] <= X:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4174,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The ball will bounce along a number line, making N + 1 bounces. It will make the first bounce at coordinate D_1 = 0, and the i-th bounce (2 <= i <= N+1) at coordinate D_i = D_{i-1} + L_{i-1}.\n    How many times will the ball make a bounce where the coordinate is at most X?\n    \"\"\"\n    # read input\n    N, X = map(int, stdin.strip().split())\n    L = list(map(int, stdin.strip().split()))\n\n    # initialize variables\n    count = 0\n    previous_bounce = 0\n    current_bounce = X\n\n    # loop through bounces\n    for i in range(N):\n        # calculate current bounce\n        current_bounce = previous_bounce + L[i]\n\n        # if current bounce is greater than X, count it and break loop\n        if current_bounce > X:\n            count += 1\n            break\n\n        # if current bounce is less than X, update previous bounce and continue loop\n        previous_bounce = current_bounce\n\n    # add 1 to count for first bounce\n    count += 1\n\n    return str(count)"
    },
    {
        "number": 4174,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, X = map(int, stdin.split())\n    L = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    count = 0\n    last_bounce = 0\n    current_bounce = 0\n\n    # Loop through bounces\n    for i in range(N):\n        current_bounce = last_bounce + L[i]\n        if current_bounce > X:\n            count += 1\n            break\n        else:\n            last_bounce = current_bounce\n\n    # Print result\n    return str(count)"
    },
    {
        "number": 4174,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem\n\n    Args:\n        stdin (str): Input given to the problem in the format specified\n\n    Returns:\n        str: Output to be printed for the problem\n    \"\"\"\n    # Parse input\n    N, X = map(int, stdin.split())\n    L = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    count = 1\n    D = 0\n    for i in range(N):\n        D += L[i]\n        if D <= X:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4174,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, X = map(int, stdin.readline().strip().split())\n    L = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    count = 0\n    D = 0\n    i = 0\n\n    # Iterate through bounces\n    while D <= X:\n        if D == X:\n            count += 1\n        D += L[i]\n        i = (i + 1) % N\n\n    # Return count\n    return str(count)"
    },
    {
        "number": 4174,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    lines = stdin.strip().split('\\n')\n    N, X = map(int, lines[0].split())\n    L = list(map(int, lines[1].split()))\n    D = [0] * (N+1)\n\n    # Calculate coordinates of each bounce\n    for i in range(1, N+1):\n        D[i] = D[i-1] + L[i-1]\n\n    # Count number of bounces where coordinate is at most X\n    count = 0\n    for d in D:\n        if d <= X:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4174,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.strip().split())\n    L = list(map(int, stdin.strip().split()))\n    D = [0] + [L[i-1] for i in range(1, N+1)]\n    count = 0\n    for i in range(1, N+2):\n        if D[i] <= X:\n            count += 1\n    return count\n\nstdin = \"3 6\\n3 4 5\"\nprint(solution(stdin))  # Output: 2"
    },
    {
        "number": 4174,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.strip().split())\n    L = list(map(int, stdin.strip().split()))\n    D = [0] + list(accumulate(L))\n    return str(sum(1 for d in D if d <= X))"
    },
    {
        "number": 4174,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    ls = list(map(int, stdin.readline().split()))\n    # bounce at the first position\n    bounce = 1\n    # bounce at the other positions\n    for i in range(1, n):\n        bounce += ls[i-1]\n        if bounce > x:\n            break\n    return bounce\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    words = [stdin.readline().strip() for _ in range(N)]\n    \n    if len(set(words))!= N:\n        return \"No\"\n    \n    for i in range(1, N):\n        if words[i][0]!= words[i-1][-1]:\n            return \"No\"\n    \n    return \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    n = int(words[0])\n    prev_word = \"\"\n    for i in range(1, n+1):\n        curr_word = words[i]\n        if curr_word == prev_word or curr_word[0]!= prev_word[-1]:\n            return \"No\"\n        prev_word = curr_word\n    return \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    words = stdin.readline().strip().split()\n    \n    # check if every word satisfies the conditions\n    for i in range(N-1):\n        if words[i][-1]!= words[i+1][0]:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    n = int(words[0])\n    words = words[1:]\n    seen_words = set()\n    last_word = ''\n    for word in words:\n        if word in seen_words:\n            return 'No'\n        if len(word) > 1 and word[0] == last_word[-1]:\n            seen_words.add(word)\n            last_word = word\n    return 'Yes'"
    },
    {
        "number": 4175,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = set()\n    for i in range(n):\n        word = stdin.readline().strip()\n        if word in words:\n            return \"No\"\n        words.add(word)\n    return \"Yes\"\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = set()\n    for i in range(n):\n        word = stdin.readline().strip()\n        if word in words:\n            return \"No\"\n        words.add(word)\n    return \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline())\n    words = stdin.readlines()\n    words = [word.strip() for word in words]\n\n    # Check if rules of shiritori were observed\n    is_valid = True\n    last_word = None\n    for word in words:\n        if word == last_word:\n            is_valid = False\n            break\n        if last_word is not None and word[0]!= last_word[-1]:\n            is_valid = False\n            break\n        last_word = word\n\n    # Output result\n    if is_valid:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4175,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing input\n    n = int(stdin.readline())\n    words = stdin.readline().strip().split()\n\n    # Checking if every word announced by Takahashi satisfied the conditions\n    for i in range(n):\n        # Checking if the word is not announced before\n        if words[i] in words[:i]:\n            return \"No\"\n        # Checking if the first character of the word is the same as the last character of the last word announced\n        if i > 0 and words[i][0]!= words[i-1][-1]:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    n = int(words[0])\n    words = words[1:]\n    last_word = ''\n    for word in words:\n        if word in words[:words.index(word)]:\n            return 'No'\n        if len(word) == 1 or word[1]!= last_word[-1]:\n            return 'No'\n        last_word = word\n    return 'Yes'\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    n = int(words[0])\n    words = words[1:]\n    \n    last_word = \"\"\n    for word in words:\n        if word.startswith(last_word[-1]):\n            continue\n        last_word = word\n    \n    if last_word:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4176,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    A, B = map(int, stdin.split())\n    # calculate the minimum number of snack pieces\n    total_snack_pieces = (A + B) * (A + B - 1) // 2\n    # calculate the number of snack pieces for each guest\n    if A > B:\n        smaller = B\n    else:\n        smaller = A\n    num_snack_pieces = total_snack_pieces // (A + B)\n    # if the total number of snack pieces is not divisible by the number of guests, add the remaining pieces to the last guest\n    if total_snack_pieces % (A + B)!= 0:\n        num_snack_pieces += 1\n    # add the last guest's extra pieces if necessary\n    num_snack_pieces += total_snack_pieces - (A + B) * num_snack_pieces\n    # return the minimum number of snack pieces\n    return str(num_snack_pieces)"
    },
    {
        "number": 4176,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return str((A+1)**2)\n    elif A > B:\n        A, B = B, A\n    min_pieces = min(A, B)\n    max_pieces = max(A, B)\n    while min_pieces < max_pieces:\n        mid_pieces = (min_pieces + max_pieces) // 2\n        if (A * mid_pieces) % B == 0:\n            max_pieces = mid_pieces\n        else:\n            min_pieces = mid_pieces + 1\n    return str(min_pieces)"
    },
    {
        "number": 4176,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n\n    # We can either have A guests or B guests\n    # We want to maximize the number of pieces that can be distributed\n    # Let's try to minimize the maximum number of pieces that can be given to a guest\n\n    # We know that the maximum number of pieces that can be given to a guest is A\n    # We also know that the minimum number of pieces that can be given to a guest is A - 1 (to avoid dividing a piece between guests)\n    # Hence, the maximum number of pieces that can be distributed is A * (A - 1)\n    # If we have B guests, we can distribute the remaining pieces in the following way:\n    # We can give one piece to each guest and the remaining piece to the first guest\n    # We can give two pieces to the first guest and the remaining two pieces to the second guest\n    # We can give three pieces to the first guest and the remaining one piece to the second guest\n    # We can give four pieces to the first guest and the remaining piece to the second guest\n    # We can give five pieces to the first guest and the remaining piece to the second guest\n    # We can give six pieces to the first guest and the remaining piece to the second guest\n    # Hence, the minimum number of pieces that can be distributed is:\n    # B * A - B * (B - 1) / 2\n    # If we have A guests, we can distribute the remaining pieces in the following way:\n    # We can give one piece to each guest and the remaining piece to the first guest\n    # We can give two pieces to the first guest and the remaining two pieces to the second guest\n    # We can give three pieces to the first guest and the remaining one piece to the second guest\n    # We can give four pieces to the first guest and the remaining piece to the second guest\n    # We can give five pieces to the first guest and the remaining piece to the second guest\n    # We can give six pieces to the first guest and the remaining piece to the second guest\n    # Hence, the minimum number of pieces that can be distributed is:\n    # A * A - A * (A - 1) / 2\n    # If A = B, the number of pieces that can be distributed is simply A * (A - 1) / 2\n\n    min_pieces = min(A * (A - 1) / 2, B * A - B * (B - 1) / 2, A * A - A * (A - 1) / 2)\n    return str(int(min_pieces))"
    },
    {
        "number": 4176,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # convert input to int\n    A, B = map(int, stdin.split())\n\n    # calculate the minimum number of pieces\n    pieces = max(A, B) * 2\n\n    # check if A is greater than B\n    if A > B:\n        # if so, each guest can take one piece\n        pieces = max(pieces, A)\n\n    # check if B is greater than A\n    elif B > A:\n        # if so, each guest can take one piece\n        pieces = max(pieces, B)\n\n    # return the minimum number of pieces\n    return str(pieces)"
    },
    {
        "number": 4176,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    A, B = list(map(int, stdin.split()))\n\n    # Calculate minimum number of snack pieces\n    min_pieces = A + B\n\n    # Adjust for even distribution\n    if A % 2 == 1:\n        min_pieces -= 1\n    if B % 2 == 1:\n        min_pieces -= 1\n\n    return str(min_pieces)\n"
    },
    {
        "number": 4176,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A == B:\n        return str(A)\n\n    if A > B:\n        A, B = B, A\n\n    if A % 2 == 0:\n        return str(A // 2)\n    else:\n        return str((A + 1) // 2) + \" \" + str(B // 2)"
    },
    {
        "number": 4176,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A == B:\n        return str(2*A)\n    elif A > B:\n        return str(B*(A//B))\n    else:\n        return str(A*(B//A))\n\nprint(solution(input()))"
    },
    {
        "number": 4176,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    if A == B:\n        return str((A+1)*(A//2))\n    else:\n        return str(A+B)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4176,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_pieces = min(A, B)\n    if min_pieces == 0:\n        return \"0\"\n    return min_pieces * min_pieces"
    },
    {
        "number": 4176,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    min_pieces = min(a, b) * 2 # Since each guest can take two pieces\n    max_pieces = max(a, b) * 2\n    return str(min_pieces)"
    },
    {
        "number": 4177,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"\", \"x\")"
    },
    {
        "number": 4177,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('s', 'x')"
    },
    {
        "number": 4177,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    x = \"x\" * len(s)\n    return x"
    },
    {
        "number": 4177,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(stdin, 'x' * len(stdin))\n"
    },
    {
        "number": 4177,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Taking input from stdin\n    S = stdin.strip()\n\n    # Replacing every character in S with x\n    xS = \"x\" * len(S)\n\n    # Printing the result\n    print(xS)\n\n    # Returning the solution\n    return xS"
    },
    {
        "number": 4177,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('a', 'x')"
    },
    {
        "number": 4177,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    return 'x' * len(S)"
    },
    {
        "number": 4177,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input string\n    s = stdin.strip()\n    # replace every character in s with x and print the result\n    return 'x' * len(s)"
    },
    {
        "number": 4177,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    s = stdin.strip()\n\n    # replace every character with x\n    result = 'x' * len(s)\n\n    # print result\n    print(result)\n\n    # return result\n    return result"
    },
    {
        "number": 4177,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input string\n    s = stdin.strip()\n    \n    # replace all characters in the string with 'x'\n    x_s = 'x' * len(s)\n    \n    # return the result\n    return x_s"
    },
    {
        "number": 4178,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n    \n    # Check if it is possible to make non-decreasing heights\n    for i in range(1, n):\n        if heights[i] <= heights[i-1]:\n            return \"No\"\n    \n    return \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline())\n    H = list(map(int, stdin.readline().split()))\n\n    # check if all heights are non-decreasing\n    for i in range(1, N):\n        if H[i] <= H[i-1]:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    heights = list(map(int, lines[1].split()))\n    if heights == sorted(heights):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4178,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    H = list(map(int, stdin.readline().split()))\n\n    # Check if it is possible to perform the operations\n    for i in range(1, N):\n        if H[i] <= H[i-1]:\n            return \"No\"\n\n    # Check if all heights are non-decreasing from left to right\n    for i in range(1, N):\n        if H[i] < H[i-1]:\n            return \"Yes\"\n\n    # If all heights are non-decreasing from left to right, it is possible to perform the operations\n    return \"Yes\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Reading the input\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n\n    # Checking if it is possible to perform the operations\n    for i in range(1, n):\n        if heights[i] <= heights[i-1]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4178,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N = int(stdin.readline().strip())\n    heights = [int(x) for x in stdin.readline().strip().split()]\n    \n    # Check if it is possible to make the heights non-decreasing\n    for i in range(1, N):\n        if heights[i] <= heights[i-1]:\n            return \"No\"\n    \n    return \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    heights = list(map(int, stdin.readline().split()))\n    \n    # Check if the heights are non-decreasing\n    if all(heights[i] <= heights[i+1] for i in range(n-1)):\n        return 'Yes'\n    else:\n        return 'No'\n    \nprint(solution(input())) # using input() to read input from Standard Input"
    },
    {
        "number": 4178,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    h = list(map(int, stdin.readline().strip().split()))\n    i = 0\n    while i < n-1 and h[i] >= h[i+1]:\n        i += 1\n    if i == n-1:\n        return \"Yes\"\n    else:\n        h[i+1] -= 1\n        return \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4178,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = map(int, stdin.strip().split())\n    for i in range(1, N):\n        if H[i] < H[i-1]:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    heights = list(map(int, stdin.split('\\n')[1].split()))\n    if N == 1:\n        return 'Yes' if heights[0] >= 1 else 'No'\n    for i in range(1, N):\n        if heights[i] <= heights[i-1]:\n            heights[i] = heights[i-1] + 1\n    return 'Yes' if heights[-1] >= heights[0] else 'No'"
    },
    {
        "number": 4179,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    lines = stdin.split('\\n')\n    n, m, c = map(int, lines[0].split())\n    bs = list(map(int, lines[1].split()))\n    codes = [list(map(int, lines[i].split())) for i in range(2, 2+n)]\n\n    # Count the number of codes that solve the problem\n    count = sum(all(a * b > 0 for a, b in zip(code, bs)) for code in codes)\n\n    return str(count)"
    },
    {
        "number": 4179,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split('\\n')\n    N, M, C = map(int, lines[0].split())\n    B = list(map(int, lines[1].split()))\n    A = []\n    for i in range(2, 2+N):\n        A.append(list(map(int, lines[i].split())))\n\n    # count number of codes that correctly solve the problem\n    count = 0\n    for i in range(N):\n        sum = 0\n        for j in range(M):\n            sum += A[i][j] * B[j]\n        if sum + C > 0:\n            count += 1\n\n    # return result\n    return str(count)\n"
    },
    {
        "number": 4179,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.split('\\n')\n    N, M, C = map(int, lines[0].split())\n    B = list(map(int, lines[1].split()))\n    A = [list(map(int, line.split())) for line in lines[2:]]\n\n    # compute solution\n    count = sum(A[i][j] * B[j] + C > 0 for i in range(N) for j in range(M))\n\n    # print result\n    return str(count)"
    },
    {
        "number": 4179,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split(\"\\n\")\n    n = int(lines[0])\n    m = int(lines[1])\n    c = int(lines[2])\n    b = [int(x) for x in lines[3].split()]\n    a = []\n    for i in range(n):\n        row = [int(x) for x in lines[4+i].split()]\n        a.append(row)\n\n    # Check each code for correctness\n    count = 0\n    for i in range(n):\n        if all(a[i][j] * b[j] + c > 0 for j in range(m)):\n            count += 1\n\n    # Return result\n    return str(count) + \"\\n\""
    },
    {
        "number": 4179,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split(\"\\n\")\n    n, m, c = map(int, lines[0].split())\n    bs = list(map(int, lines[1].split()))\n    codes = [list(map(int, line.split())) for line in lines[2:]]\n\n    # count codes that correctly solve the problem\n    count = 0\n    for code in codes:\n        val = sum(code[i] * bs[i] for i in range(m)) + c\n        if val > 0:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4179,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m, c = map(int, lines[0].split())\n    b = list(map(int, lines[1].split()))\n    codes = []\n    for i in range(2, 2 + n):\n        a = list(map(int, lines[i].split()))\n        code = tuple(a) + tuple(b) + (c,)\n        codes.append(code)\n    count = sum(all(a[j] * b[j] + c > 0 for j in range(m)) for a, b, c in codes)\n    return str(count)"
    },
    {
        "number": 4179,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    lines = stdin.strip().split('\\n')\n    n, m, c = map(int, lines[0].split())\n    b = list(map(int, lines[1].split()))\n    a = []\n    for i in range(2, 2 + n):\n        row = list(map(int, lines[i].split()))\n        a.append(row)\n\n    # count the number of codes that correctly solve the problem\n    count = 0\n    for i in range(n):\n        sum = c\n        for j in range(m):\n            sum += a[i][j] * b[j]\n        if sum > 0:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4179,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = map(int, stdin.readline().split())\n    b = list(map(int, stdin.readline().split()))\n    codes = []\n    for i in range(n):\n        a = list(map(int, stdin.readline().split()))\n        if sum([a[j] * b[j] for j in range(m)]) + c > 0:\n            codes.append(i + 1)\n    return str(len(codes))"
    },
    {
        "number": 4179,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M, C = map(int, lines[0].split())\n    Bs = list(map(int, lines[1].split()))\n    correct_codes = 0\n    for i in range(2, 2 + N):\n        A = list(map(int, lines[i].split()))\n        if sum([A[j] * Bs[j] for j in range(M)]) + C > 0:\n            correct_codes += 1\n    return str(correct_codes)"
    },
    {
        "number": 4179,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.split('\\n')\n    n, m, c = map(int, lines[0].split())\n    b = list(map(int, lines[1].split()))\n    a = []\n    for i in range(2, 2+n):\n        a.append(list(map(int, lines[i].split())))\n\n    # count the number of codes that correctly solve this problem\n    count = 0\n    for i in range(n):\n        if sum(a[i][j] * b[j] for j in range(m)) + c > 0:\n            count += 1\n\n    # print the result\n    return str(count)"
    },
    {
        "number": 4180,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    change = N % 1000\n    if change == 0:\n        change = 1000\n    print(change)\n    return \"\""
    },
    {
        "number": 4180,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    change = n % 1000\n    if change == 0:\n        return str(change)\n    else:\n        return str(1000 - change)"
    },
    {
        "number": 4180,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ten_bills = n // 1000\n    n = n % 1000\n    five_bills = n // 500\n    n = n % 500\n    one_bills = n // 100\n    n = n % 100\n    quarter_bills = n // 25\n    n = n % 25\n    dime_bills = n // 10\n    n = n % 10\n    nickel_bills = n // 5\n    n = n % 5\n    penny_bills = n\n    change = (quarter_bills + dime_bills + nickel_bills + penny_bills) * 10\n    return str(change)"
    },
    {
        "number": 4180,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    total_change = n % 1000\n    return str(total_change)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4180,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    bills = n // 1000\n    change = n % 1000\n    return str(change)\n"
    },
    {
        "number": 4180,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    change = N % 1000\n    return str(change)\n\nprint(solution(input())) # Sample Input 1"
    },
    {
        "number": 4180,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 1000!= 0:\n        n = n - (n % 1000)\n    change = n - 1000\n    return str(change)"
    },
    {
        "number": 4180,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num_of_bills = n // 1000\n    change = n % 1000\n    return str(change)"
    },
    {
        "number": 4180,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    bills = n // 1000\n    change = n % 1000\n    return str(change)"
    },
    {
        "number": 4180,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num_bills = n // 1000\n    change = n % 1000\n    return str(change)"
    },
    {
        "number": 4181,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, *a, *b = map(int, stdin.split())\n    \n    # sort input data\n    a_sorted = sorted(a)\n    b_sorted = sorted(b, reverse=True)\n    \n    # initialize variables\n    total_monsters = 0\n    i = 0\n    j = 0\n    \n    # loop through all heroes\n    while i < n and j < n+1:\n        # if the current hero can defeat monsters attacking the i-th or (i+1)-th town\n        if b_sorted[i] >= a_sorted[j]:\n            # add the number of monsters defeated by the hero to the total\n            total_monsters += b_sorted[i]\n            i += 1\n        # if the current hero can't defeat monsters attacking the i-th or (i+1)-th town\n        else:\n            # add the number of monsters attacked by the hero to the total\n            total_monsters += a_sorted[j]\n            j += 1\n    \n    # return the total number of monsters defeated\n    return str(total_monsters)\n"
    },
    {
        "number": 4181,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    b = list(map(int, lines[2].split()))\n    \n    dp = [0] * (n+1)\n    \n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + a[i-1]\n        for j in range(1, i+1):\n            if j > 1 and i-j+1 > 0:\n                dp[i] = max(dp[i], dp[i-j] + a[i-1] - b[i-j])\n                \n    return str(dp[n])"
    },
    {
        "number": 4181,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    \n    # Calculate total attacked monsters\n    total_attacked_monsters = sum(a)\n    \n    # Calculate maximum heroes that can defeat the remaining attacked monsters\n    max_heroes = 0\n    for i in range(n):\n        if a[i] > 0:\n            # Calculate maximum number of heroes that can defeat the remaining attacked monsters from the i-th town\n            max_heroes_i = min(b[i], total_attacked_monsters // a[i])\n            max_heroes += max_heroes_i\n            # Reduce the attacked monsters from the i-th town\n            total_attacked_monsters -= max_heroes_i * a[i]\n    \n    # Return maximum number of monsters the heroes can defeat\n    return max_heroes"
    },
    {
        "number": 4181,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    B = list(map(int, stdin.readline().strip().split()))\n\n    # calculate dp\n    dp = [0] * (N+1)\n    dp[N-1] = min(A[N-1], B[N-1])\n    dp[N-2] = min(A[N-2]+B[N-1], A[N-1]+B[N-2])\n    for i in range(N-3, -1, -1):\n        dp[i] = min(dp[i+2], dp[i+1]+A[i]+B[i])\n\n    # print result\n    return str(dp[0])"
    },
    {
        "number": 4181,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    dp = [0] * (n+1)\n    dp[1] = a[1]\n    dp[n] = a[n]\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2]+a[i])\n    res = 0\n    for i in range(n):\n        if i == 0:\n            res += dp[i+1]\n        elif i == n-1:\n            res += dp[i-1]\n        else:\n            res += max(dp[i-1], dp[i+1])\n    return str(res)"
    },
    {
        "number": 4181,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    data = stdin.split('\\n')\n    N = int(data[0])\n    A = list(map(int, data[1].split()))\n    B = list(map(int, data[2].split()))\n\n    # initialize variables\n    max_total = 0\n    max_num_heroes = 0\n\n    # find the maximum number of heroes that can defeat A[i] monsters in town i\n    for i in range(N+1):\n        max_num_heroes = min(B[i-1], (N-i+1)*A[i-1])\n        # update the maximum total\n        max_total += max_num_heroes\n\n    return str(max_total)"
    },
    {
        "number": 4181,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, *attacks, *heroes = map(int, stdin.strip().split())\n\n    # create DP table\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # initialize the base case\n    for i in range(n + 1):\n        dp[i][i] = 1\n        dp[i][i + 1] = 1\n\n    # fill DP table\n    for i in range(2, n + 1):\n        for j in range(n - i + 1):\n            for k in range(i):\n                dp[j][j + i] = max(dp[j][j + i], dp[j][j + k] * dp[j + k + 1][j + i])\n\n    # compute total number of monsters\n    total_monsters = 0\n    for i in range(n):\n        total_monsters += dp[i][i] * attacks[i]\n        total_monsters += dp[i][i + 1] * attacks[i + 1]\n\n    # compute maximum number of monsters\n    max_monsters = 0\n    for i in range(n):\n        max_monsters += min(heroes[i], dp[i][i])\n        max_monsters += min(heroes[i], dp[i][i + 1])\n\n    # return result\n    return str(total_monsters - max_monsters)\n"
    },
    {
        "number": 4181,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    B = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize dp table with zeros\n    dp = [[0]*(N+1) for _ in range(N+1)]\n\n    # Fill dp table\n    for i in range(1, N+1):\n        for j in range(N+1):\n            if j >= i:\n                dp[i][j] = max(dp[i-1][j-i] + A[i-1] + B[j-i], dp[i-1][j])\n            else:\n                dp[i][j] = dp[i-1][j]\n\n    # Find maximum number of monsters\n    max_monsters = 0\n    for i in range(1, N+1):\n        max_monsters = max(max_monsters, dp[N][i]*B[i-1])\n\n    return str(max_monsters)"
    },
    {
        "number": 4181,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    B = list(map(int, stdin.readline().strip().split()))\n    \n    # Initialize variables\n    dp = [0] * (N+1)\n    dp[0] = A[0]\n    dp[N] = A[N]\n    \n    # Fill in dp array\n    for i in range(1, N):\n        dp[i] = max(dp[i-1], A[i])\n        dp[N-i] = max(dp[N-i+1], A[N-i])\n    \n    # Compute total number of monsters\n    total_monsters = 0\n    for i in range(N):\n        total_monsters += min(dp[i+1], B[i])\n    \n    return str(total_monsters)"
    },
    {
        "number": 4181,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    B = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    dp = [0] * (N+1)\n    dp[0] = 0\n    dp[1] = 0\n\n    # Fill dp array\n    for i in range(2, N+1):\n        dp[i] = max(dp[i-1], A[i-1] + dp[i-2])\n        for j in range(1, i):\n            if i-j > 0:\n                dp[i] = max(dp[i], B[j-1] + dp[i-j-1])\n\n    # Return result\n    return str(dp[N])"
    },
    {
        "number": 4182,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M, X, Y = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n    y = list(map(int, stdin.readline().split()))\n\n    # Determine Z\n    Z = min(max(x), Y)\n\n    # Check war\n    if any(i > Z for i in x) or any(i < Z for i in y):\n        return \"War\"\n    else:\n        return \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, M, X, Y = map(int, stdin.readline().split())\n    x_cities = list(map(int, stdin.readline().split()))\n    y_cities = list(map(int, stdin.readline().split()))\n    \n    # check if war will break out\n    for Z in range(X+1, Y+1):\n        if all(x_cities[i] < Z for i in range(N)) and all(x_cities[i] < Z for i in range(N)) and all(y_cities[i] >= Z for i in range(M)):\n            return \"War\"\n    return \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n\n    for i in range(N):\n        if X <= x[i] <= Y:\n            for j in range(M):\n                if x[i] < Z and y[j] >= Z:\n                    return \"War\"\n\n    return \"No War\"\n\nprint(solution(input()))"
    },
    {
        "number": 4182,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.readline().split())\n    x_coords = list(map(int, stdin.readline().split()))\n    y_coords = list(map(int, stdin.readline().split()))\n    \n    # empire A controls cities 1 to N\n    for i in range(N):\n        if x_coords[i] >= X:\n            return \"War\"\n    \n    # empire B controls cities N+1 to N+M\n    for i in range(M):\n        if Y <= y_coords[i]:\n            return \"War\"\n    \n    # find a common boundary point Z that satisfies all three conditions\n    for i in range(N-1):\n        for j in range(M-1):\n            if X < x_coords[i] + y_coords[j] <= Y:\n                return \"War\"\n    \n    return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split()[:4])\n    xs = list(map(int, stdin.split()[4:4+n]))\n    ys = list(map(int, stdin.split()[4+n:]))\n    \n    if x < max(xs) or y > min(ys):\n        return \"War\"\n    else:\n        return \"No War\"\n\nstdin = \"3 2 10 20 8 15 13 16 22\"\nprint(solution(stdin))  # Output: No War"
    },
    {
        "number": 4182,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.readline().split())\n    xs = list(map(int, stdin.readline().split()))\n    ys = list(map(int, stdin.readline().split()))\n    if max(xs) >= y or min(xs) >= y or x >= max(ys) or x <= min(ys) or len(set(xs))!= len(xs):\n        return \"War\"\n    return \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, M, X, Y = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n    y = list(map(int, stdin.readline().split()))\n    \n    # check for war\n    for z in range(X+1, Y):\n        # check if Empire A can control cities under Z\n        empire_A_control = True\n        for i in x:\n            if i >= z:\n                empire_A_control = False\n                break\n        # check if Empire B can control cities above Z\n        empire_B_control = True\n        for i in y:\n            if i < z:\n                empire_B_control = False\n                break\n        # if both can control cities, break out of loop\n        if empire_A_control and empire_B_control:\n            return \"War\"\n    return \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M, X, Y = map(int, stdin.split()[:4])\n    x_coords = list(map(int, stdin.split()[4:4+N]))\n    y_coords = list(map(int, stdin.split()[4+N:]))\n\n    # Check for war\n    if all(X < z <= Y and all(x_coords[i] < z for i in range(N)) and all(y_coords[i] >= z for i in range(M)) for z in range(X, Y+1)):\n        return \"War\"\n    else:\n        return \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m, x, y = map(int, stdin.readline().split())\n    x_list = list(map(int, stdin.readline().split()))\n    y_list = list(map(int, stdin.readline().split()))\n\n    # check for war\n    for z in range(max(x, y)+1):\n        if all(x_ < z <= y_ for x_, y_ in zip(x_list, y_list)):\n            return \"War\"\n\n    return \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.readline().split())\n    x_cities = list(map(int, stdin.readline().split()))\n    y_cities = list(map(int, stdin.readline().split()))\n    \n    for z in range(x, y):\n        if all(x_city < z for x_city in x_cities) and all(y_city >= z for y_city in y_cities):\n            return 'War'\n    \n    return 'No War'\n\nprint(solution(input()))"
    },
    {
        "number": 4183,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    T = [int(x) for x in lines[1:]]\n    \n    # find period and initial offset\n    period = 360 // N\n    offset = (360 % N) * period // N\n    \n    # calculate time when all clock hands point upward\n    time = 0\n    for i in range(N):\n        time += (T[i] // period + 1) * period + offset\n    \n    return str(time)\n    \n"
    },
    {
        "number": 4183,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    T = list(map(int, lines[1:]))\n    \n    t = max(T)\n    for i in range(1, N):\n        t = max(t, T[i])\n    \n    return str(t)"
    },
    {
        "number": 4183,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *t = map(int, stdin.strip().split())\n    t_sum = sum(t)\n    result = max(t_sum - x for x in t)\n    return str(result)"
    },
    {
        "number": 4183,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    t = list(map(int, stdin.readline().strip().split()))\n\n    # Sort the times\n    t.sort()\n\n    # Calculate the time to wait\n    total_wait = 0\n    for i in range(n):\n        total_wait += 360 * t[i] // 3600 + (360 * t[i] % 3600) // 60 + (360 * t[i] % 60)\n\n    # Return the result\n    return str(total_wait)"
    },
    {
        "number": 4183,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    T = list(map(int, stdin.readline().strip().split()))\n\n    # Calculate the time when the hand of every clock points upward again\n    t = 0\n    for i in range(N):\n        t += T[i]\n\n    # Return the result\n    return str(t)"
    },
    {
        "number": 4183,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    T = list(map(int, stdin.readline().strip().split()))\n    \n    # Sort T in ascending order\n    T.sort()\n    \n    # Find the first and second clocks that will point upward\n    i = 0\n    j = 1\n    while T[i] == 0:\n        i += 1\n    while T[j] == 0:\n        j += 1\n    \n    # Calculate the number of seconds it takes for the first clock to point upward again\n    t1 = T[i]\n    if j >= len(T):\n        t2 = T[i-1]\n    else:\n        t2 = T[j]\n    t3 = T[i-1]\n    t = t1 + t2 + t3\n    \n    # Repeat for the second clock\n    if j >= len(T):\n        i = 1\n        j = 0\n    else:\n        i = 0\n        j = 1\n    while T[i] == t or T[j] == t:\n        i += 1\n        j += 1\n    t1 = T[j]\n    if i >= len(T):\n        t2 = T[j-1]\n    else:\n        t2 = T[i]\n    t3 = T[j-1]\n    t = max(t, t1 + t2 + t3)\n    \n    # Repeat for all other clocks\n    for k in range(3, N):\n        if T[k] == 0:\n            continue\n        if T[k] == t:\n            i = k-1\n            j = k\n            while T[i] == t or T[j] == t:\n                i -= 1\n                j += 1\n            t1 = T[j]\n            if i >= 0:\n                t2 = T[i]\n            else:\n                t2 = T[j-1]\n            t3 = T[j-1]\n            t = max(t, t1 + t2 + t3)\n        else:\n            i = k-2\n            j = k\n            while T[i] == T[j]:\n                i -= 1\n                j += 1\n            t1 = T[j]\n            if i >= 0:\n                t2 = T[i]\n            else:\n                t2 = T[j-1]\n            t3 = T[j-1]\n            t = max(t, t1 + t2 + t3)\n    \n    # Return the result\n    return str(t)"
    },
    {
        "number": 4183,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline())\n    t = list(map(int, stdin.readline().strip().split()))\n    \n    # Sort by clock time\n    clocks = sorted(enumerate(t), key=lambda x: x[1])\n    \n    # Calculate time until next clock\n    next_time = max(t)\n    i = 0\n    for j in range(n):\n        if clocks[j][1] == next_time:\n            i = j\n    \n    # Calculate time when all clocks point upward\n    time = 0\n    for j in range(i, -1, -1):\n        time += next_time\n        next_time = clocks[j][1]\n    time += next_time\n    \n    # Print result\n    return str(time)"
    },
    {
        "number": 4183,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input to list of integers\n    input_list = list(map(int, stdin.split()))\n    # Number of clocks\n    n = input_list[0]\n    # Times for each clock to rotate\n    times = input_list[1:]\n    # Calculate the total time for each clock to rotate\n    total_time = sum(times)\n    # Calculate the average time for each clock to rotate\n    avg_time = total_time / n\n    # Calculate the time when each clock points upward again\n    up_times = [i * avg_time + sum(times[:i]) for i in range(1, n+1)]\n    # Calculate the time when the hands of all clocks point upward again\n    max_up_time = max(up_times)\n    # Calculate the number of seconds until the hands of all clocks point upward again\n    seconds = max_up_time - total_time\n    # Return the result as a string\n    return str(seconds)"
    },
    {
        "number": 4183,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    T = [int(t) for t in stdin.readline().strip().split()]\n\n    # Initialize variables\n    total_time = sum(T)\n    current_time = 0\n\n    # Loop through each clock and calculate time it takes to point upward\n    for t in T:\n        # Calculate time remaining until next point upward\n        remaining_time = total_time - current_time\n        # Calculate time it takes to point upward\n        time_to_point_upward = 360 / t * remaining_time\n        # Add time it takes to point upward to current time\n        current_time += time_to_point_upward\n\n    # Return time it takes to point upward again\n    return str(int(current_time))\n\nstdin = '''\n2\n2\n3\n'''\n\nprint(solution(stdin)) # Output: 6"
    },
    {
        "number": 4183,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    T = [int(x) for x in stdin.readline().split()]\n\n    # Sort T in ascending order\n    T.sort()\n\n    # Find the maximum time when all clocks point upward\n    max_time = T[0] + T[-1] + T[0] + T[-1]\n\n    # Output the maximum time\n    return str(max_time)"
    },
    {
        "number": 4184,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    weights = list(map(int, lines[1].split()))\n    min_diff = float('inf')\n\n    for T in range(2, N+1):\n        S_1 = sum(weights[:T-1])\n        S_2 = sum(weights[T-1:])\n        diff = abs(S_1 - S_2)\n        if diff < min_diff:\n            min_diff = diff\n\n    return str(min_diff)"
    },
    {
        "number": 4184,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline())\n    weights = list(map(int, stdin.readline().split()))\n    \n    # find min abs difference\n    min_diff = float('inf')\n    for t in range(2, n):\n        s1 = sum(weights[:t])\n        s2 = sum(weights[t:])\n        diff = abs(s1 - s2)\n        min_diff = min(min_diff, diff)\n        \n    # print result\n    return str(min_diff)\n    \n"
    },
    {
        "number": 4184,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    weights = list(map(int, stdin.readline().strip().split()))\n    weights.sort()\n    \n    S1 = sum(weights[:T])\n    S2 = sum(weights[T:])\n    min_diff = abs(S1 - S2)\n    \n    for T in range(2, N):\n        S1 = sum(weights[:T])\n        S2 = sum(weights[T:])\n        diff = abs(S1 - S2)\n        if diff < min_diff:\n            min_diff = diff\n    \n    return str(min_diff)\n    \n"
    },
    {
        "number": 4184,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    weights = list(map(int, stdin.readline().strip().split()))\n\n    # calculate sums\n    s1 = 0\n    s2 = sum(weights)\n\n    # iterate through all possible T\n    min_diff = float('inf')\n    for t in range(2, n):\n        # calculate sums for T\n        s1_t = sum(weights[:t])\n        s2_t = sum(weights[t:])\n\n        # calculate difference\n        diff = abs(s1_t - s2_t)\n\n        # update minimum\n        if diff < min_diff:\n            min_diff = diff\n\n    # print minimum difference\n    return str(min_diff)\n"
    },
    {
        "number": 4184,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n\n    # find minimum difference\n    min_diff = float('inf')\n    for i in range(n):\n        group1_sum = sum(weights[:i+1])\n        group2_sum = sum(weights[i+1:])\n        diff = abs(group1_sum - group2_sum)\n        min_diff = min(min_diff, diff)\n\n    return str(min_diff)"
    },
    {
        "number": 4184,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    weights = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    min_diff = float('inf')\n    for T in range(2, N+1):\n        # Split weights into groups\n        group1 = weights[:T-1]\n        group2 = weights[T-1:]\n\n        # Calculate sums of weights in groups\n        sum1 = sum(group1)\n        sum2 = sum(group2)\n\n        # Calculate absolute difference of sums\n        diff = abs(sum1 - sum2)\n\n        # Update minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return minimum difference\n    return str(min_diff)"
    },
    {
        "number": 4184,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    weights = list(map(int, stdin.split()))\n    N = weights.pop(0)\n\n    # Find minimum possible absolute difference of S_1 and S_2\n    min_diff = float('inf')\n    for i in range(1, N):\n        diff = sum(weights[:i]) - sum(weights[i:])\n        min_diff = min(min_diff, abs(diff))\n\n    return str(min_diff)"
    },
    {
        "number": 4184,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    weights = list(map(int, stdin.readline().strip().split()))\n    S1 = sum(weights[:N//2])\n    S2 = sum(weights[N//2:])\n    return str(abs(S1 - S2))"
    },
    {
        "number": 4184,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    weights = list(map(int, stdin.readline().strip().split()))\n    # Calculate S_1\n    S_1 = sum(weights[:N//2])\n    # Calculate S_2\n    S_2 = sum(weights[N//2:])\n    # Calculate absolute difference\n    abs_diff = abs(S_1 - S_2)\n    # Return result\n    return str(abs_diff)"
    },
    {
        "number": 4184,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N = int(stdin.readline().strip())\n    weights = list(map(int, stdin.readline().strip().split()))\n\n    # Find the minimum possible absolute difference of S_1 and S_2\n    min_diff = float('inf')\n    for i in range(1, N):\n        s1 = sum(weights[:i])\n        s2 = sum(weights[i:])\n        diff = abs(s1 - s2)\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the result\n    return str(min_diff)"
    },
    {
        "number": 4185,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, stdin.readline().strip().split())))\n    # Check if the matrix is already good\n    good = True\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if matrix[i-1][j-1]!= (i-1)*m + j:\n                good = False\n                break\n        if not good:\n            break\n    if good:\n        return \"0\"\n    # Calculate the minimum number of moves required to obtain the matrix\n    INF = float('inf')\n    dp = [[INF]*m for _ in range(n)]\n    dp[0][0] = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j]!= (i*m + j + 1):\n                dp[i][j] = INF\n            else:\n                # Check if the number can be shifted up one cell cyclically\n                if j == 0 or matrix[i][j-1] == (i*m + j):\n                    dp[i][j] = dp[i][j-1] + 1\n                else:\n                    dp[i][j] = INF\n    return str(min(dp))"
    },
    {
        "number": 4185,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    \n    # check if matrix is already good\n    if all(a[i][j] == (i * m + j + 1) for i in range(n) for j in range(m)):\n        return 0\n    \n    # make a copy of the matrix\n    b = [[a[i][j] for j in range(m)] for i in range(n)]\n    \n    # find the minimum number of moves\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if b[i][j]!= (i * m + j + 1):\n                # choose any element and change its value to the minimum possible value\n                for k in range(b[i][j], n * m + 1):\n                    if k not in b[i] and k not in [b[i][x] for x in range(j + 1, m)]:\n                        b[i][j] = k\n                        moves += 1\n                        break\n                \n                # shift the column cyclically\n                for k in range(j, m):\n                    b[i][k], b[i][k + 1] = b[i][k + 1], b[i][k]\n                moves += 1\n    \n    # print the number of moves\n    return moves\n    "
    },
    {
        "number": 4185,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    matrix = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    moves = 0\n    for j in range(m):\n        i_min = 1\n        for i in range(n):\n            if matrix[i][j] < i_min:\n                i_min = matrix[i][j]\n        for i in range(n):\n            if matrix[i][j] > i * m + j:\n                moves += matrix[i][j] - (i * m + j)\n                matrix[i][j] = i * m + j\n        if matrix[0][j]!= 1 or matrix[-1][j]!= n * m:\n            moves += 1\n            i = i_min\n            while i!= 1:\n                matrix[i][j], i = i, i - 1\n            i = n\n            while i!= n * m:\n                matrix[i][j], i = i, i - 1\n    return moves"
    },
    {
        "number": 4185,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, stdin.split())))\n    i, j, step = 0, 0, 0\n    while i < n and j < m:\n        if matrix[i][j]!= (i * m + j + 1):\n            step += 1\n            val = (i * m + j + 1)\n            for k in range(n):\n                matrix[k][j], val = val, val + 1\n            matrix[i][j] = val - 1\n        i += 1\n        j = 0\n    return str(step)"
    },
    {
        "number": 4185,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(num) for num in input().split()] for i in range(n)]\n    count = 0\n    for j in range(1, m+1):\n        for i in range(1, n+1):\n            if a[i-1][j-1]!= (i-1) * m + j:\n                count += 1\n                a[i-1][j-1] = (i-1) * m + j\n                for k in range(1, i):\n                    a[k-1][j-1], a[i-k-1][j-1] = a[i-k-1][j-1], a[k-1][j-1]\n    return count\n\nprint(solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\")) # Output: 6\nprint(solution(\"4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\")) # Output: 0\nprint(solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\")) # Output: 2"
    },
    {
        "number": 4185,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m = map(int, stdin.readline().split())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, stdin.readline().split())))\n    \n    # Initialize variables\n    moves = 0\n    \n    # Find the minimum number of moves\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if arr[i - 1][j - 1]!= (i - 1) * m + j:\n                # Make the move\n                current = arr[i - 1][j - 1]\n                target = (i - 1) * m + j\n                for k in range(1, n + 1):\n                    # Find the row to swap\n                    if (target - k * m) // m!= i - 1:\n                        continue\n                    # Swap the elements\n                    row = target // m\n                    for l in range(1, m + 1):\n                        if arr[row][l - 1] == current:\n                            arr[row][l - 1], arr[row + k][l - 1] = arr[row + k][l - 1], arr[row][l - 1]\n                            break\n                    current = (current - k * m) % m + 1\n                moves += 1\n    \n    # Output the result\n    print(moves)"
    },
    {
        "number": 4185,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, stdin.split())))\n    moves = 0\n    \n    for i in range(1, n+1):\n        for j in range(m):\n            if matrix[i-1][j]!= (i-1)*m + j:\n                a, b = matrix[i-1][j], (i-1)*m + j\n                for k in range(n):\n                    if matrix[k][j] == a:\n                        matrix[k][j] = b\n                        moves += 1\n                    elif matrix[k][j] == b:\n                        matrix[k][j] = a\n                        moves += 1\n    \n    return str(moves)\n\nprint(solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\\n\")) # Output: 6\nprint(solution(\"4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n\")) # Output: 0\nprint(solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\")) # Output: 2"
    },
    {
        "number": 4185,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = [list(map(int, input().strip().split())) for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= (i - 1) * m + j + 1:\n                count += 1\n                a[i][j] = (i - 1) * m + j + 1\n    for i in range(m):\n        if a[0][i]!= i + 1:\n            count += 1\n            for j in range(n):\n                a[j][i] = a[j][i - 1]\n    return str(count)\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = []\n    for i in range(n):\n        row = list(map(int, stdin.split()))\n        matrix.append(row)\n\n    def cycle_col(i):\n        \"\"\"\n        shifts the ith column of the matrix cyclically\n        \"\"\"\n        first = matrix[0][i]\n        for j in range(1, n):\n            matrix[j][i] = matrix[j-1][i]\n        matrix[n-1][i] = first\n\n    def is_good():\n        \"\"\"\n        checks if the matrix is good\n        \"\"\"\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j]!= (i * m + j + 1):\n                    return False\n        return True\n\n    moves = 0\n    while not is_good():\n        # choose a random cell and change its value to a random value\n        i, j = random.randint(0, n-1), random.randint(0, m-1)\n        old_val = matrix[i][j]\n        new_val = random.randint(1, n * m)\n        matrix[i][j] = new_val\n\n        # check if the change caused a good matrix\n        if is_good():\n            moves += 1\n            continue\n\n        # undo the change\n        matrix[i][j] = old_val\n\n        # try to shift the column cyclically\n        cycle_col(j)\n        moves += 1\n\n    return str(moves)"
    },
    {
        "number": 4185,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(x) for x in stdin.readline().strip().split()] for _ in range(n)]\n\n    # Check if the matrix is already good\n    good = True\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= (i - 1) * m + j + 1:\n                good = False\n                break\n        if not good:\n            break\n    if good:\n        return \"0\"\n\n    # Initialize dp\n    dp = [[float(\"inf\") for _ in range(m + 1)] for _ in range(n)]\n    dp[0][0] = 0\n\n    # DP\n    for i in range(n):\n        for j in range(m):\n            for k in range(n):\n                for l in range(m):\n                    if k == i or l == j:\n                        dp[i][j] = min(dp[i][j], dp[k][l] + abs(a[i][j] - (k - 1) * m + l + 1))\n\n    # Return the minimum number of moves\n    return str(dp[n - 1][m - 1])"
    },
    {
        "number": 4186,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    dp = [0] * n\n    dp[0] = a[0]\n    dp[1] = max(a[0], a[1])\n\n    for i in range(2, n):\n        dp[i] = max(dp[i-2] + a[i], dp[i-1])\n\n    return dp[-1]\n"
    },
    {
        "number": 4186,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    a.sort()\n    # check if n is even\n    if n % 2!= 0:\n        return \"0\"\n    # check if n is odd\n    if n % 2 == 0:\n        # check if a[0] is less than or equal to a[n-1]\n        if a[0] <= a[n-1]:\n            # check if n/2 is odd\n            if n//2 % 2!= 0:\n                return \"0\"\n            # if n/2 is even\n            else:\n                # check if n is divisible by 4\n                if n % 4 == 0:\n                    # check if a[0] is less than or equal to a[n//2-1]\n                    if a[0] <= a[n//2-1]:\n                        # check if a[n//2] is less than or equal to a[n-1]\n                        if a[n//2] <= a[n-1]:\n                            return \"0\"\n                        else:\n                            return str((n//2 - 2)*2 + 1)\n                    else:\n                        return str((n//2 - 1)*2)\n                else:\n                    return str((n//2 - 1)*2)\n        else:\n            return \"0\"\n\nstdin = \"6\\n5 10 2 3 14 5\"\nprint(solution(stdin)) # 5\nstdin = \"2\\n1 100\"\nprint(solution(stdin)) # 99"
    },
    {
        "number": 4186,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    n_teams = n // 2\n    a.sort()\n    res = 0\n    for i in range(n_teams):\n        res += a[i] * a[n - 1 - i]\n    return str(res)"
    },
    {
        "number": 4186,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # Sort students by skill in descending order\n    a.sort(reverse=True)\n    \n    # Initialize variables\n    min_problems = 0\n    num_teams = n // 2\n    current_team = 1\n    current_problem = 0\n    \n    # Iterate through the students and add the minimum number of problems for each team\n    for i in range(n):\n        if current_team <= num_teams:\n            min_problems += a[i]\n            current_team += 1\n        else:\n            # Student cannot form a team, so skip them\n            current_problem += a[i]\n    \n    # Add the minimum number of problems for the remaining teams\n    min_problems += num_teams * current_problem\n    \n    return str(min_problems)"
    },
    {
        "number": 4186,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    return sum([abs(a[i] - a[j]) for i in range(n//2) for j in range(n//2, n)])"
    },
    {
        "number": 4186,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    ans = 0\n    for i in range(n//2):\n        cnt = 0\n        for j in range(n//2):\n            if j == i:\n                continue\n            if a[i] == a[j]:\n                cnt += 1\n        ans += cnt\n    return str(ans)"
    },
    {
        "number": 4186,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort(reverse=True)\n    \n    i = 0\n    j = n-1\n    count = 0\n    \n    while i < j:\n        if a[i] == a[j]:\n            count += a[i]\n            i += 1\n            j -= 1\n        else:\n            i += 1\n            count += a[i]\n            \n    return count\n    \nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4186,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    if n % 2 == 1:\n        return \"0\"\n    else:\n        return str(sum(a[:n//2]) + sum(a[n//2:]))"
    },
    {
        "number": 4186,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *skills = map(int, stdin.split())\n    skills.sort()\n    # number of teams needed\n    teams = n // 2\n    # minimum number of problems to solve\n    min_problems = sum(skills) // teams\n    # minimum number of problems after each team is formed\n    problems = [min_problems] * teams\n    # count of problems solved by each student\n    count = [0] * n\n    # check if a team can be formed\n    def can_form_team(i, j):\n        return skills[i] == skills[j]\n    # form a team\n    def form_team(i, j):\n        nonlocal problems, count\n        problems[i] += count[i] + count[j]\n        count[i] = problems[i] = 0\n        count[j] = problems[j] = 0\n    # solve problems for each student\n    for i in range(n):\n        # increase the skill of the i-th student\n        skills[i] += 1\n        # check if a team can be formed with i-th student\n        if count[i] == 0 and i > 0 and can_form_team(i-1, i):\n            form_team(i-1, i)\n        # check if a team can be formed with i-th student and next student\n        if count[i] == 0 and i+1 < n and can_form_team(i, i+1):\n            form_team(i, i+1)\n        # check if a team can be formed with i-th student and previous student\n        if count[i] == 0 and i > 0 and can_form_team(i-1, i):\n            form_team(i-1, i)\n    # return the minimum total number of problems\n    return sum(problems)"
    },
    {
        "number": 4186,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    count = 0\n    for i in range(n):\n        count += a[i]\n        count %= 2\n    \n    return '0' if count == 1 else '1'"
    },
    {
        "number": 4187,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # Finding maximal rest\n    max_rest = 0\n    curr_rest = 0\n    \n    for i in range(n):\n        if a[i] == 1:\n            curr_rest += 1\n        else:\n            if curr_rest > max_rest:\n                max_rest = curr_rest\n            curr_rest = 0\n    \n    if curr_rest > max_rest:\n        max_rest = curr_rest\n        \n    return str(max_rest)\n"
    },
    {
        "number": 4187,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    rest_count = 0\n    max_rest = 0\n    for i in range(n):\n        if a[i] == 1:\n            rest_count += 1\n        else:\n            if rest_count > max_rest:\n                max_rest = rest_count\n            rest_count = 0\n    if rest_count > max_rest:\n        max_rest = rest_count\n    return str(max_rest)"
    },
    {
        "number": 4187,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # initialize the variables\n    max_hours = 0\n    current_hours = 0\n    \n    # iterate through the hours\n    for i in range(n):\n        # if the hour is working, increment the current_hours\n        if a[i] == 0:\n            current_hours += 1\n        # if the hour is resting, update the max_hours if necessary\n        else:\n            max_hours = max(max_hours, current_hours)\n            current_hours = 0\n    \n    # update the max_hours if necessary\n    max_hours = max(max_hours, current_hours)\n    \n    # return the max_hours\n    return str(max_hours)"
    },
    {
        "number": 4187,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    schedule = list(map(int, stdin.readline().split()))\n    max_rest = 0\n    rest_count = 0\n    for i in range(n):\n        if schedule[i] == 1:\n            rest_count += 1\n        else:\n            if rest_count > max_rest:\n                max_rest = rest_count\n            rest_count = 0\n    if rest_count > max_rest:\n        max_rest = rest_count\n    return str(max_rest)\n"
    },
    {
        "number": 4187,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    max_rest = 0\n    current_rest = 0\n\n    for i in range(n):\n        if a[i] == 0:\n            current_rest = 0\n        else:\n            current_rest += 1\n            max_rest = max(max_rest, current_rest)\n\n    return str(max_rest)"
    },
    {
        "number": 4187,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    rest = 0\n    max_rest = 0\n    for i in range(n):\n        if a[i] == 1:\n            if rest == 0:\n                rest = 1\n            else:\n                rest += 1\n        else:\n            if rest > max_rest:\n                max_rest = rest\n            rest = 0\n    if rest > max_rest:\n        max_rest = rest\n    return str(max_rest)"
    },
    {
        "number": 4187,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n\n    # get the index of the last working hour\n    last_work = n - 1\n    while last_work > 0 and a[last_work] == 1:\n        last_work -= 1\n\n    # if no working hour is found, return 0\n    if last_work == 0:\n        return 0\n\n    # get the index of the first resting hour after the last working hour\n    first_rest = last_work + 1\n    while first_rest < n and a[first_rest] == 0:\n        first_rest += 1\n\n    # if no resting hour is found, return the number of hours since the last working hour\n    if first_rest == n:\n        return n - last_work\n\n    # find the length of the maximal rest\n    max_rest = first_rest - last_work\n    for i in range(last_work + 1, first_rest):\n        if a[i] == 1:\n            max_rest = min(max_rest, i - last_work)\n\n    return max_rest"
    },
    {
        "number": 4187,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    max_rest = 0\n    rest = 0\n    for i in range(n):\n        if a[i] == 1:\n            rest += 1\n            max_rest = max(max_rest, rest)\n        else:\n            rest = 0\n    \n    return str(max_rest)\n\nstdin = \"\"\"\n5\n1 0 1 0 1\n\"\"\"\n\nstdout = \"\"\"\n2\n\"\"\"\n\nassert solution(stdin) == stdout\n\n\nstdin = \"\"\"\n6\n0 1 0 1 1 0\n\"\"\"\n\nstdout = \"\"\"\n2\n\"\"\"\n\nassert solution(stdin) == stdout\n\n\nstdin = \"\"\"\n7\n1 0 1 1 1 0 1\n\"\"\"\n\nstdout = \"\"\"\n3\n\"\"\"\n\nassert solution(stdin) == stdout\n\n\nstdin = \"\"\"\n3\n0 0 0\n\"\"\"\n\nstdout = \"\"\"\n0\n\"\"\"\n\nassert solution(stdin) == stdout"
    },
    {
        "number": 4187,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.strip().split())\n    max_rest = 0\n    current_rest = 0\n    for i in range(n):\n        if a[i] == 1:\n            current_rest += 1\n        else:\n            max_rest = max(max_rest, current_rest)\n            current_rest = 0\n    return str(max_rest)"
    },
    {
        "number": 4187,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # Find the longest stretch of rests\n    longest_stretch = 0\n    current_stretch = 0\n    for i in range(n):\n        if a[i] == 1:\n            current_stretch += 1\n            longest_stretch = max(longest_stretch, current_stretch)\n        else:\n            current_stretch = 0\n    \n    return longest_stretch"
    },
    {
        "number": 4188,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    facts = [\n        \"The highest mountain above sea level in the world is Mount Everest.\",\n        \"The largest board game tournament consisted of 958 participants playing chapaev.\",\n        \"The largest online maths competition consisted of 12766 participants.\",\n        \"The Nile is credited as the longest river in the world.\",\n        \"From its farthest stream in Burundi, it extends 6695 km in length.\",\n        \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n        \"Angel Falls is the highest waterfall.\",\n        \"Its greatest single drop measures 807 m.\",\n        \"The Hotel Everest View above Namche, Nepal \u2014 the village closest to Everest base camp \u2013 is at a record height of 31962 m Uranium is the heaviest of all the naturally occurring elements.\",\n        \"Its most common isotope has a nucleus containing 146 neutrons.\",\n        \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n        \"The longest snake held in captivity is over 25 feet long.\",\n        \"Its name is Medusa.\",\n        \"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\",\n        \"Sea otters can have up to 10000 hairs per square inch.\",\n        \"This is the most dense fur in the animal kingdom.\",\n        \"The largest state of USA is Alaska; its area is 663268 square miles Alaska has a longer coastline than all of the other 49 U.S. States put together: it is 154103 miles long.\",\n        \"Lake Baikal is the largest freshwater lake in the world.\",\n        \"It reaches 1642\u00a0meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water.\",\n        \"The most colorful national flag is the one of Turkmenistan, with 106 colors.\",\n    ]\n    if n < 1 or n > 16:\n        return \"Invalid input\"\n    return facts[n-1]\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4188,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    present = [\n        \"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\",\n        \"The largest board game tournament consisted of 958 participants playing chapaev.\",\n        \"The largest online maths competition consisted of 12766 participants.\",\n        \"The Nile is credited as the longest river in the world. From its farthest stream in Burundi, it extends 6695 km in length.\",\n        \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n        \"Angel Falls is the highest waterfall. Its greatest single drop measures 807 m.\",\n        \"The Hotel Everest View above Namche, Nepal \u2014 the village closest to Everest base camp \u2013 is at a record height of 31962 m.\",\n        \"Uranium is the heaviest of all the naturally occurring elements. Its most common isotope has a nucleus containing 146 neutrons.\",\n        \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n        \"The longest snake held in captivity is over 25 feet long. Its name is Medusa.\",\n        \"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\",\n        \"Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom.\",\n        \"The largest state of USA is Alaska; its area is 663268 square miles.\",\n        \"Lake Baikal is the largest freshwater lake in the world. It reaches 1642 meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water.\",\n        \"The most colorful national flag is the one of Turkmenistan, with 106 colors.\"\n    ]\n\n    if int(stdin) > 0 and int(stdin) <= len(present):\n        return present[int(stdin)-1]\n    else:\n        return \"No such fact available!\""
    },
    {
        "number": 4188,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin)\n\n    # define facts\n    facts = [\n        'The highest mountain above sea level in the world is Mount Everest.',\n        'Mount Everest rises to 8848 m.',\n        'The largest board game tournament consisted of 958 participants playing chapaev.',\n        'The largest online maths competition consisted of 12766 participants.',\n        'The Nile is credited as the longest river in the world.',\n        'The Nile extends 6695 km in length.',\n        'While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.',\n        'Angel Falls is the highest waterfall.',\n        'Angel Falls has a greatest single drop of 807 m.',\n        'The Hotel Everest View above Namche, Nepal is at a record height of 31962 m.',\n        'Uranium is the heaviest of all the naturally occurring elements.',\n        'Uranium has a most common isotope with a nucleus containing 146 neutrons.',\n        'The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.',\n        'The longest snake held in captivity is over 25 feet long.',\n        'The longest snake held in captivity is Medusa.',\n        'Colonel Meow holds the world record for longest fur on a cat.',\n        'Sea otters can have up to 10000 hairs per square inch.',\n        'This is the most dense fur in the animal kingdom.',\n        'The largest state of USA is Alaska; its area is 663268 square miles.',\n        'Alaska has a longer coastline than all of the other 49 U.S. States put together.',\n        'Alaska is 154103 miles long.',\n        'Lake Baikal is the largest freshwater lake in the world.',\n        'Lake Baikal reaches 1642 meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water.',\n        'The most colorful national flag is the one of Turkmenistan, with 106 colors.'\n    ]\n\n    # check if fact n exists in facts\n    if n <= len(facts):\n        return facts[n-1].count(' ') + 1\n    else:\n        return 0\n"
    },
    {
        "number": 4188,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Initialize the variables\n    n = int(stdin)\n    mountain = \"Mount Everest\"\n    boardgame = \"chapaev\"\n    maths = \"12766\"\n    nile = \"Nile\"\n    amazon = \"Amazon\"\n    angel = \"Angel Falls\"\n    nepal = \"Hotel Everest View\"\n    uranium = \"Uranium\"\n    meow = \"Colonel Meow\"\n    otters = \"sea otters\"\n    flag = \"Turkmenistan\"\n    baikal = \"Lake Baikal\"\n    \n    # Create a dictionary to store the facts\n    facts = {1: mountain, 2: boardgame, 3: maths, 4: nile, 5: amazon, 6: angel, 7: nepal, 8: uranium, 9: meow, 10: otters, 11: flag, 12: baikal}\n\n    # Check if the given input is valid or not\n    if n < 1 or n > 16:\n        return \"Invalid input\"\n    \n    # Return the corresponding fact based on the input\n    return facts.get(n, \"Invalid input\")"
    },
    {
        "number": 4188,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    facts = [\n        \"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\",\n        \"The largest board game tournament consisted of 958 participants playing chapaev.\",\n        \"The largest online maths competition consisted of 12766 participants.\",\n        \"The Nile is credited as the longest river in the world. From its farthest stream in Burundi, it extends 6695 km in length.\",\n        \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n        \"Angel Falls is the highest waterfall. Its greatest single drop measures 807 m.\",\n        \"The Hotel Everest View above Namche, Nepal \u2014 the village closest to Everest base camp \u2013 is at a record height of 31962 m.\",\n        \"Uranium is the heaviest of all the naturally occurring elements. Its most common isotope has a nucleus containing 146 neutrons.\",\n        \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n        \"The longest snake held in captivity is over 25 feet long. Its name is Medusa.\",\n        \"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\",\n        \"Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom.\",\n        \"The largest state of USA is Alaska; its area is 663268 square miles Alaska has a longer coastline than all of the other 49 U.S. States put together: it is 154103 miles long.\",\n        \"Lake Baikal is the largest freshwater lake in the world. It reaches 1642 meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water.\",\n        \"The most colorful national flag is the one of Turkmenistan, with 106 colors.\"\n    ]\n    return facts[int(stdin)-1].count(\".\") + 1"
    },
    {
        "number": 4188,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    facts = [\"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\",\n             \"The largest board game tournament consisted of 958 participants playing chapaev.\",\n             \"The largest online maths competition consisted of 12766 participants.\",\n             \"The Nile is credited as the longest river in the world. From its farthest stream in Burundi, it extends 6695 km in length.\",\n             \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n             \"Angel Falls is the highest waterfall. Its greatest single drop measures 807 m.\",\n             \"The Hotel Everest View above Namche, Nepal \u2014 the village closest to Everest base camp \u2013 is at a record height of 31962 m.\",\n             \"Uranium is the heaviest of all the naturally occurring elements. Its most common isotope has a nucleus containing 146 neutrons.\",\n             \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n             \"The longest snake held in captivity is over 25 feet long. Its name is Medusa.\",\n             \"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\",\n             \"Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom.\",\n             \"The largest state of USA is Alaska; its area is 663268 square miles.\",\n             \"Alaska has a longer coastline than all of the other 49 U.S. States put together: it is 154103 miles long.\",\n             \"Lake Baikal is the largest freshwater lake in the world. It reaches 1642\u00a0meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water.\",\n             \"The most colorful national flag is the one of Turkmenistan, with 106 colors.\"]\n    \n    return 1 if n <= len(facts) else 0\n\nprint(solution(\"1\")) # Output: 1\nprint(solution(\"7\")) # Output: 0"
    },
    {
        "number": 4188,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"4\"\n    elif n == 3:\n        return \"10\"\n    elif n == 4:\n        return \"20\"\n    elif n == 5:\n        return \"35\"\n    elif n == 6:\n        return \"56\"\n    elif n == 7:\n        return \"84\"\n    elif n == 8:\n        return \"120\"\n    elif n == 9:\n        return \"165\"\n    elif n == 10:\n        return \"220\"\n    elif n == 11:\n        return \"286\"\n    elif n == 12:\n        return \"364\"\n    elif n == 13:\n        return \"455\"\n    elif n == 14:\n        return \"560\"\n    elif n == 15:\n        return \"680\"\n    elif n == 16:\n        return \"816\"\n    return \"0\""
    },
    {
        "number": 4188,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4188,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    n = int(stdin.strip())\n\n    # Initializing a list of facts\n    facts = [\n        \"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\",\n        \"The largest board game tournament consisted of 958 participants playing chapaev.\",\n        \"The largest online maths competition consisted of 12766 participants.\",\n        \"The Nile is credited as the longest river in the world. From its farthest stream in Burundi, it extends 6695 km in length.\",\n        \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n        \"Angel Falls is the highest waterfall. Its greatest single drop measures 807 m.\",\n        \"The Hotel Everest View above Namche, Nepal \u2014 the village closest to Everest base camp \u2013 is at a record height of 31962 m Uranium is the heaviest of all the naturally occurring elements.\",\n        \"Its most common isotope has a nucleus containing 146 neutrons.\",\n        \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n        \"The longest snake held in captivity is over 25 feet long. Its name is Medusa.\",\n        \"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\",\n        \"Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom.\",\n        \"The largest state of USA is Alaska; its area is 663268 square miles.\",\n        \"Alaska has a longer coastline than all of the other 49 U.S. States put together: it is 154103 miles long.\",\n        \"Lake Baikal is the largest freshwater lake in the world. It reaches 1642\u00a0meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water.\",\n        \"The most colorful national flag is the one of Turkmenistan, with 106 colors.\"\n    ]\n\n    # Checking if n is valid\n    if n < 1 or n > len(facts):\n        return 0\n\n    # Returning the n-th fact\n    return facts[n-1]\n"
    },
    {
        "number": 4188,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    facts = [\"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\",\n             \"The largest board game tournament consisted of 958 participants playing chapaev.\",\n             \"The largest online maths competition consisted of 12766 participants.\",\n             \"The Nile is credited as the longest river in the world. From its farthest stream in Burundi, it extends 6695 km in length.\",\n             \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n             \"Angel Falls is the highest waterfall. Its greatest single drop measures 807 m.\",\n             \"The Hotel Everest View above Namche, Nepal \u2014 the village closest to Everest base camp \u2013 is at a record height of 31962 m.\",\n             \"Uranium is the heaviest of all the naturally occurring elements. Its most common isotope has a nucleus containing 146 neutrons.\",\n             \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n             \"The longest snake held in captivity is over 25 feet long. Its name is Medusa.\",\n             \"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\",\n             \"Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom.\",\n             \"The largest state of USA is Alaska; its area is 663268 square miles.\",\n             \"Lake Baikal is the largest freshwater lake in the world. It reaches 1642\u00a0meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water.\",\n             \"The most colorful national flag is the one of Turkmenistan, with 106 colors.\"]\n    facts_len = len(facts)\n    if stdin.strip() == '':\n        return \"0\"\n    try:\n        num = int(stdin.strip())\n        if num < 1 or num > facts_len:\n            return \"0\"\n        return num\n    except:\n        return \"0\""
    },
    {
        "number": 4189,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    cheeses = {}\n    for i in range(1, n+1):\n        name, type = lines[i].split()\n        cheeses[name] = type\n    \n    count_soft = 0\n    count_hard = 0\n    for cheese in cheeses:\n        if cheeses[cheese] == \"soft\":\n            count_soft += 1\n        elif cheeses[cheese] == \"hard\":\n            count_hard += 1\n    \n    return min(count_soft, count_hard)"
    },
    {
        "number": 4189,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cheeses = []\n    for i in range(n):\n        name, type = stdin.readline().strip().split()\n        cheeses.append((name, type))\n    types = set([type for name, type in cheeses])\n    soft_count = sum([1 for name, type in cheeses if type == \"soft\"])\n    hard_count = sum([1 for name, type in cheeses if type == \"hard\"])\n    if hard_count == 0:\n        return str(soft_count)\n    elif soft_count == 0:\n        return \"0\"\n    else:\n        return str(min(soft_count, hard_count))\n\nprint(solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\"))\nprint(solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\\n\"))"
    },
    {
        "number": 4189,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    cheese_types = {}\n    for i in range(N):\n        name, cheese_type = stdin.readline().strip().split()\n        cheese_types[name] = cheese_type\n    unique_types = set(cheese_types.values())\n    return len(unique_types)\n\nprint(solution('''\n9\nbrie soft\ncamembert soft\nfeta soft\ngoat soft\nmuenster soft\nasiago hard\ncheddar hard\ngouda hard\nswiss hard\n''')) # Output: 3\n\nprint(solution('''\n6\nparmesan hard\nemmental hard\nedam hard\ncolby hard\ngruyere hard\nasiago hard\n''')) # Output: 4"
    },
    {
        "number": 4189,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    cheeses = []\n    for i in range(1, N+1):\n        cheese = lines[i].split()\n        cheeses.append((cheese[0], cheese[1]))\n    soft = [c[0] for c in cheeses if c[1] == \"soft\"]\n    hard = [c[0] for c in cheeses if c[1] == \"hard\"]\n    return str(len(set(soft) & set(hard)))"
    },
    {
        "number": 4189,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    cheeses = {}\n    for i in range(N):\n        name, type = stdin.readline().strip().split()\n        cheeses[name] = type\n    types = set(cheeses.values())\n    if len(types) == 1:\n        return \"1\"\n    elif len(types) == 2:\n        return \"2\"\n    else:\n        return \"3\"\n\ndef"
    },
    {
        "number": 4189,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    types = set()\n    for i in range(n):\n        name, t = stdin.split()[i*2+1:i*2+3]\n        types.add(t)\n    return str(len(types))\n\ndef"
    },
    {
        "number": 4189,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    n = int(lines[0])\n    cheeses = [line.strip().split() for line in lines[1:]]\n    soft_cheeses = [name for name, cheese_type in cheeses if cheese_type == \"soft\"]\n    hard_cheeses = [name for name, cheese_type in cheeses if cheese_type == \"hard\"]\n    if len(soft_cheeses) >= len(hard_cheeses):\n        return len(soft_cheeses)\n    else:\n        return len(hard_cheeses)"
    },
    {
        "number": 4189,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    cheeses = {line.split()[0]: line.split()[1] for line in lines[1:]}\n    soft_cheeses = [name for name, type_ in cheeses.items() if type_ =='soft']\n    hard_cheeses = [name for name, type_ in cheeses.items() if type_ == 'hard']\n    return str(min(len(soft_cheeses), len(hard_cheeses)))"
    },
    {
        "number": 4189,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    soft_cheese_count = 0\n    hard_cheese_count = 0\n    for i in range(1, n+1):\n        cheese_name, cheese_type = lines[i].split()\n        if cheese_type =='soft':\n            soft_cheese_count += 1\n        else:\n            hard_cheese_count += 1\n    return str(max(soft_cheese_count, hard_cheese_count))"
    },
    {
        "number": 4189,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cheeses = {}\n    for i in range(n):\n        name, cheese_type = stdin.readline().strip().split()\n        cheeses[name] = cheese_type\n    \n    soft_count = 0\n    hard_count = 0\n    for cheese_type in cheeses.values():\n        if cheese_type == \"soft\":\n            soft_count += 1\n        elif cheese_type == \"hard\":\n            hard_count += 1\n    \n    return min(soft_count, hard_count)"
    },
    {
        "number": 4190,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:n+1]))\n    b = list(map(int, stdin.split()[n+1:]))\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    c.sort()\n    return''.join(map(str, c))"
    },
    {
        "number": 4190,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    b = list(map(int, stdin.splitlines()[2].split()))\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    b = sorted(b)\n    for i in range(n):\n        c[i] = (a[i] + b[i]) % n\n    return''.join(map(str, c))"
    },
    {
        "number": 4190,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    \n    c = [(a[i] + b[i]) % n for i in range(n)]\n    \n    # Reorder elements of b to obtain lexicographically minimum array c\n    for i in range(n):\n        for j in range(i+1, n):\n            if c[i] > c[j]:\n                b[i], b[j] = b[j], b[i]\n                break\n    \n    return''.join(map(str, c))\n    \n"
    },
    {
        "number": 4190,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    # Find lexicographically minimum array c\n    c = [(a[i] + b[i]) % n for i in range(n)]\n\n    # Reorder elements of b to obtain lexicographically minimum array c\n    for i in range(n):\n        for j in range(i+1, n):\n            if c[i] > c[j]:\n                b[i], b[j] = b[j], b[i]\n\n    return''.join(map(str, b))"
    },
    {
        "number": 4190,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:n+1]))\n    b = list(map(int, stdin.split()[n+1:]))\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    c.sort()\n    return''.join(map(str, c))\n\nprint(solution(input()))"
    },
    {
        "number": 4190,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    c = sorted(c)\n    return''.join(map(str, c))"
    },
    {
        "number": 4190,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    c = [(a[i] + b[i]) % n for i in range(n)]\n\n    sorted_b = sorted(b)\n\n    for i in range(n):\n        if c[i] > c[i+1]:\n            for j in range(n):\n                if b[j] < sorted_b[i]:\n                    sorted_b[i] = b[j]\n                    break\n\n    c = [(a[i] + sorted_b[i]) % n for i in range(n)]\n\n    return''.join(map(str, c))\n"
    },
    {
        "number": 4190,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    # Count the frequency of each element in array b\n    freq_b = [0] * n\n    for i in range(n):\n        freq_b[b[i]] += 1\n\n    # Reorder elements of array b to obtain the lexicographically minimum possible array c\n    c = [0] * n\n    j = 0\n    for i in range(n):\n        c[i] = freq_b[b[j]]\n        freq_b[b[j]] -= 1\n        if freq_b[b[j]] == 0:\n            j += 1\n\n    # Calculate the values of array c\n    for i in range(n):\n        c[i] = (a[i] + b[i]) % n\n\n    # Print the lexicographically minimum possible array c\n    return''.join(map(str, c))"
    },
    {
        "number": 4190,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    c.sort()\n    return''.join(map(str, c))"
    },
    {
        "number": 4190,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    c.sort()\n    return''.join(map(str, c))\n\nprint(solution('4\\n0 1 2 1\\n3 2 1 1\\n')) # Output: 1 0 0 2 \nprint(solution('7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\\n')) # Output: 0 0 0 1 0 2 4"
    },
    {
        "number": 4191,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for digit in stdin.split():\n        count += int(digit)\n    return str(count % 2)\n\nstdin = \"0\\n1\\n1\\n0\\n\"\nprint(solution(stdin)) # Output: 0"
    },
    {
        "number": 4191,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input from string to list of integers\n    input_list = [int(digit) for digit in stdin.split()]\n\n    # Create a list of the digits that appear odd number of times\n    odd_digits = []\n    for digit in input_list:\n        if input_list.count(digit) % 2!= 0:\n            odd_digits.append(digit)\n\n    # If there are no odd digits, output 0, else output the first odd digit\n    if len(odd_digits) == 0:\n        return '0'\n    else:\n        return str(odd_digits[0])"
    },
    {
        "number": 4191,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Split input into list of strings\n    digits = stdin.strip().split()\n    \n    # Convert each string to an integer and calculate sum of digits\n    sum_of_digits = sum(int(digit) for digit in digits)\n    \n    # Convert sum of digits to a string and return the first character\n    return str(sum_of_digits)[0]"
    },
    {
        "number": 4191,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # convert the input string into a list of integers\n    input_list = [int(x) for x in stdin.split()]\n\n    # check if the list contains 0\n    if 0 in input_list:\n        # if it does, return 0\n        return \"0\"\n\n    # if the list does not contain 0, check if it contains 1\n    elif 1 in input_list:\n        # if it does, return 1\n        return \"1\"\n\n    # if the list does not contain 0 or 1, return -1\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    count_zero = 0\n    count_one = 0\n    for line in lines:\n        if line == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n    if count_zero > count_one:\n        return '0'\n    else:\n        return '1'"
    },
    {
        "number": 4191,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    binary_str = stdin.strip()\n    decimal = int(binary_str, 2)\n    if decimal % 3 == 0:\n        return '1'\n    else:\n        return '0'\n"
    },
    {
        "number": 4191,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    res = 1\n    for num in nums:\n        res = res & int(num)\n    return str(res)"
    },
    {
        "number": 4191,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for the problem\n    \"\"\"\n    # Split the input into 4 lines\n    lines = stdin.split('\\n')\n    # Convert each line to a binary string\n    binary_strings = [bin(int(line))[2:].zfill(4) for line in lines]\n    # Concatenate the binary strings into a single binary string\n    binary_string = ''.join(binary_strings)\n    # Convert the binary string to an integer\n    decimal = int(binary_string, 2)\n    # Convert the integer to a binary string and pad it with zeros to get 4 digits\n    binary_string = bin(decimal)[2:].zfill(4)\n    # Return the last digit of the binary string\n    return binary_string[-1]\n"
    },
    {
        "number": 4191,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    zeroes = lines.count(\"0\")\n    ones = lines.count(\"1\")\n    if zeroes > ones:\n        return \"0\"\n    else:\n        return \"1\"\n\nprint(solution(input()))"
    },
    {
        "number": 4191,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    binary_string = \"\"\n    for i in range(4):\n        binary_string += stdin.readline().strip()\n    decimal_value = int(binary_string, 2)\n    return str(decimal_value % 2)"
    },
    {
        "number": 4192,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    d, t, s = map(int, stdin.split())\n    # calculate time taken\n    time_taken = d / s\n    # check if time_taken is greater than t\n    if time_taken <= t:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    time = D/S\n    if time <= T:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4192,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    time_to_meet = d / s\n    if t >= time_to_meet:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nwith open(\"input.txt\", \"r\") as file:\n    data = file.read()\n    print(solution(data))"
    },
    {
        "number": 4192,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    if S * T >= D:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    time_taken = D / S\n    if time_taken <= T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    if t * s >= d:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.strip().split())\n    time = D / S * 60\n    if time <= T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    if t * s < d:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4192,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    D, T, S = map(int, stdin.strip().split())\n\n    # Calculate time taken to reach D meters at speed S\n    time_taken = D / S\n\n    # If time taken is greater than T, print No, otherwise Yes\n    if time_taken <= T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    D, T, S = map(int, stdin.split())\n\n    # calculate time taken to reach place\n    time_taken = D / S\n\n    # compare time taken with T\n    if time_taken <= T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    a = []\n    for line in lines[:-1]:\n        row = [int(x) for x in line.split()]\n        a.append(row)\n    n = int(lines[-1])\n    b = [int(x) for x in input().split()]\n    # find marked squares\n    marked = set()\n    for i in range(3):\n        for j in range(3):\n            if a[i][j] in b:\n                marked.add((i, j))\n    # check rows\n    for row in a:\n        if len(set(row) & marked) == 3:\n            return 'Yes'\n    # check columns\n    for j in range(3):\n        col = [a[i][j] for i in range(3)]\n        if len(set(col) & marked) == 3:\n            return 'Yes'\n    # check diagonal\n    diag1 = [a[i][i] for i in range(3)]\n    if len(set(diag1) & marked) == 3:\n        return 'Yes'\n    diag2 = [a[i][2-i] for i in range(3)]\n    if len(set(diag2) & marked) == 3:\n        return 'Yes'\n    # no bingo found\n    return 'No'"
    },
    {
        "number": 4193,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.split(\"\\n\")\n    A = []\n    for line in lines[:-1]:\n        A.append(list(map(int, line.split())))\n    N = int(lines[-1])\n    b = list(map(int, input().split()))\n\n    # initialize bingo sheet\n    sheet = [[False for _ in range(3)] for _ in range(3)]\n\n    # mark numbers in bingo sheet\n    for num in b:\n        for i in range(3):\n            for j in range(3):\n                if A[i][j] == num:\n                    sheet[i][j] = True\n\n    # check for bingo\n    for i in range(3):\n        if all(sheet[i][j] for j in range(3)):\n            return \"Yes\"\n    for j in range(3):\n        if all(sheet[i][j] for i in range(3)):\n            return \"Yes\"\n    if all(sheet[i][i] for i in range(3)):\n        return \"Yes\"\n    if all(sheet[2-i][i] for i in range(3)):\n        return \"Yes\"\n\n    # if no bingo, return \"No\"\n    return \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split('\\n')\n    board = [[int(num) for num in line.split()] for line in lines[:-1]]\n    N = int(lines[-1])\n    numbers = [int(num) for num in lines[-1-N:-1]]\n\n    # Check for bingo\n    for i in range(3):\n        if all(num in board[i] for num in numbers):\n            return 'Yes'\n    for j in range(3):\n        if all(board[i][j] in numbers for i in range(3)):\n            return 'Yes'\n    if (board[0][0] in numbers and board[1][1] in numbers and board[2][2] in numbers) or \\\n            (board[0][2] in numbers and board[1][1] in numbers and board[2][0] in numbers):\n        return 'Yes'\n\n    return 'No'"
    },
    {
        "number": 4193,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    cards = []\n    for i in range(3):\n        row = stdin.readline().strip().split()\n        cards.append(list(map(int, row)))\n    n = int(stdin.readline().strip())\n    numbers = list(map(int, stdin.readline().strip().split()))\n    \n    # Mark the numbers\n    for number in numbers:\n        for i in range(3):\n            for j in range(3):\n                if cards[i][j] == number:\n                    cards[i][j] = -1\n    \n    # Check rows\n    for row in cards:\n        if sum(row) == -3:\n            return \"Yes\"\n    \n    # Check columns\n    for j in range(3):\n        col = [cards[i][j] for i in range(3)]\n        if sum(col) == -3:\n            return \"Yes\"\n    \n    # Check diagonals\n    diag1 = [cards[i][i] for i in range(3)]\n    diag2 = [cards[i][2-i] for i in range(3)]\n    if sum(diag1) == -3 or sum(diag2) == -3:\n        return \"Yes\"\n    \n    # No bingo\n    return \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = []\n    N = int(stdin.readline())\n    for i in range(3):\n        A.append(list(map(int, stdin.readline().split())))\n    B = list(map(int, stdin.readline().split()))\n    bingo = [[False for _ in range(3)] for _ in range(3)]\n    for i in range(3):\n        for j in range(3):\n            if A[i][j] in B:\n                bingo[i][j] = True\n    # Check rows\n    for i in range(3):\n        if all(bingo[i][j] for j in range(3)):\n            return \"Yes\"\n    # Check columns\n    for j in range(3):\n        if all(bingo[i][j] for i in range(3)):\n            return \"Yes\"\n    # Check diagonals\n    if bingo[0][0] and bingo[1][1] and bingo[2][2]:\n        return \"Yes\"\n    if bingo[0][2] and bingo[1][1] and bingo[2][0]:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    board = [line.split() for line in lines[:-2]]\n    n = int(lines[-2])\n    numbers = [int(x) for x in lines[-1].split()]\n\n    for i in range(n):\n        row, col = divmod(i, 3)\n        for j in range(3):\n            if board[row][j] == str(numbers[i]):\n                board[row][j] = '*'\n\n    for i in range(3):\n        if '*' in board[i]:\n            return \"Yes\"\n        if '*' in board[j][i] for j in range(3):\n            return \"Yes\"\n\n    for i in range(3):\n        if '*' in board[i] and '*' in board[i+1] and '*' in board[i+2]:\n            return \"Yes\"\n        if '*' in board[j][i] and '*' in board[j+1][i] and '*' in board[j+2][i]:\n            return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    A = []\n    for line in lines[:-2]:\n        A.append(list(map(int, line.split())))\n    N = int(lines[-2])\n    b = list(map(int, lines[-1].split()))\n\n    # Check each row and column for bingo\n    for i in range(len(A)):\n        if sum(A[i]) == N * A[i][0]:\n            return 'Yes'\n        if sum(A[j][i] for j in range(len(A))) == N * A[0][i]:\n            return 'Yes'\n\n    # Check diagonals\n    if sum(A[i][i] for i in range(len(A))) == N * A[0][0]:\n        return 'Yes'\n    if sum(A[i][len(A)-1-i] for i in range(len(A))) == N * A[0][len(A)-1]:\n        return 'Yes'\n\n    # Check bingo for each number\n    for num in b:\n        if num in [A[i][j] for i in range(len(A)) for j in range(len(A))]:\n            return 'Yes'\n\n    return 'No'"
    },
    {
        "number": 4193,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    numbers = []\n    for line in lines[:-1]:\n        numbers.extend([int(x) for x in line.strip().split()])\n    N = int(lines[-1])\n    bingo_numbers = [int(x) for x in lines[-N-1:-1]]\n\n    # check for bingo\n    for i in range(3):\n        row = [numbers[3*i + j] for j in range(3)]\n        col = [numbers[j*3 + i] for j in range(3)]\n        diag1 = [numbers[i+j] for j in range(3)]\n        diag2 = [numbers[2-i+j] for j in range(3)]\n        if (all(x in bingo_numbers for x in row)\n            or all(x in bingo_numbers for x in col)\n            or all(x in bingo_numbers for x in diag1)\n            or all(x in bingo_numbers for x in diag2)):\n            return 'Yes'\n\n    return 'No'"
    },
    {
        "number": 4193,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    board = []\n    for i in range(3):\n        row = list(map(int, stdin.readline().split()))\n        board.append(row)\n    \n    n = int(stdin.readline())\n    \n    nums = list(map(int, stdin.readline().split()))\n    \n    marked = set()\n    \n    def mark_num(num):\n        for i in range(3):\n            for j in range(3):\n                if board[i][j] == num:\n                    marked.add((i, j))\n    \n    for num in nums:\n        mark_num(num)\n        \n        for i in range(3):\n            if len(marked) == 3:\n                return \"Yes\"\n            if len(marked) == 5 and (i, i) in marked and (i, 2 - i) in marked:\n                return \"Yes\"\n        \n        if len(marked) == 5:\n            for i in range(3):\n                if (i, i) in marked and (i, 2 - i) in marked:\n                    continue\n                if (i, i) in marked:\n                    for j in range(3):\n                        if (j, i) not in marked:\n                            return \"Yes\"\n                if (i, 2 - i) in marked:\n                    for j in range(3):\n                        if (j, 2 - i) not in marked:\n                            return \"Yes\"\n        \n        if len(marked) == 5:\n            return \"No\"\n    \n    return \"Yes\" if len(marked) == 5 else \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    A = []\n    for line in stdin.split('\\n')[:-1]:\n        A.append([int(x) for x in line.split()])\n    N = int(stdin.split('\\n')[-1])\n    b = [int(x) for x in stdin.split('\\n')[-N-1:-1]]\n    \n    # Check for bingo\n    for i in range(3):\n        if any(A[i][j] in b for j in range(3)):\n            return 'Yes'\n    for j in range(3):\n        if any(A[i][j] in b for i in range(3)):\n            return 'Yes'\n    if any(A[i][i] in b for i in range(3)):\n        return 'Yes'\n    if any(A[i][2-i] in b for i in range(3)):\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4194,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.readline().strip().split())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Sort assignments in non-increasing order of duration\n    A.sort(reverse=True)\n\n    # Initialize variables\n    total_duration = 0\n    current_day = 1\n    count = 0\n\n    # Iterate over assignments\n    for i in range(M):\n        # Calculate duration of current assignment\n        assignment_duration = A[i]\n\n        # Check if current assignment can be done on current day\n        if current_day + assignment_duration <= N:\n            # Assign current assignment to current day\n            count += 1\n            current_day += assignment_duration\n            total_duration += assignment_duration\n        else:\n            # Check if there is enough time for remaining assignments\n            if N - current_day < assignment_duration * (M - i):\n                return \"-1\"\n            else:\n                # Assign current assignment to current day and skip remaining days\n                current_day = N\n                break\n\n    # Calculate maximum number of days Takahashi can hang out during vacation\n    if count < M:\n        return \"-1\"\n    else:\n        return max(N - total_duration, 0)"
    },
    {
        "number": 4194,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, M = map(int, stdin.readline().strip().split())\n    A = list(map(int, stdin.readline().strip().split()))\n    \n    # sort A\n    A.sort()\n    \n    # initialize variables\n    count = 0\n    i = 0\n    \n    # loop through days\n    for day in range(1, N+1):\n        # if there are assignments left to do\n        if i < M:\n            # if there are enough days to do the next assignment\n            if day >= A[i]:\n                count += 1\n                i += 1\n            # if there are not enough days to do the next assignment\n            else:\n                return -1\n        # if there are no more assignments left to do\n        else:\n            return count\n    \n    # if there are no assignments left to do\n    return count"
    },
    {
        "number": 4194,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.readline().split())\n    assignments = list(map(int, stdin.readline().split()))\n\n    # Sort assignments in descending order\n    assignments.sort(reverse=True)\n\n    # Initialize variables\n    max_hangout_days = 0\n    current_days = 0\n    current_assignment = 0\n    used_days = set()\n\n    # Iterate over assignments\n    for i in range(M):\n        # Check if there are enough days left to do the current assignment\n        if current_assignment == 0:\n            current_assignment = assignments[i]\n        if current_assignment > 0:\n            # Check if the current day is already used\n            if current_days in used_days:\n                return '-1'\n            # Use the current day and decrement the assignment counter\n            used_days.add(current_days)\n            current_assignment -= 1\n        # Increment the current day and check if it has exceeded the limit\n        current_days += 1\n        if current_days > N:\n            return '-1'\n        # Update the maximum number of hanging days\n        max_hangout_days = max(max_hangout_days, current_days)\n\n    # Return the maximum number of hanging days\n    return str(max_hangout_days)"
    },
    {
        "number": 4194,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.readline().strip().split())\n    A = list(map(int, stdin.readline().strip().split()))\n    \n    # Sort assignments in descending order of their duration\n    A.sort(reverse=True)\n    \n    # Initialize variables\n    max_days = 0\n    current_days = 0\n    current_day = 0\n    \n    # Loop through assignments\n    for i in range(M):\n        # Calculate number of days needed for this assignment\n        days_needed = A[i]\n        \n        # Check if we can fit this assignment within the remaining vacation days\n        if current_days + days_needed > N:\n            return -1\n        \n        # Update variables for next assignment\n        current_days += days_needed\n        current_day += days_needed\n        \n        # Update maximum number of days hanging out\n        if current_day > max_days:\n            max_days = current_day\n    \n    # Print maximum number of days hanging out\n    return max_days"
    },
    {
        "number": 4194,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, M = list(map(int, stdin.readline().split()))\n    A = list(map(int, stdin.readline().split()))\n    # sort A in descending order\n    A.sort(reverse=True)\n    # initialize variables\n    result = 0\n    count = 0\n    # loop through days\n    for i in range(N):\n        # if there are no more assignments left, return -1\n        if count >= M:\n            return -1\n        # if there are still assignments left, and we can still do them on this day, do them\n        if count < M and result + A[count] <= i:\n            result += A[count]\n            count += 1\n        # if we can't do an assignment on this day, try the next day\n    return result\n"
    },
    {
        "number": 4194,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    M = int(lines[1])\n    A = list(map(int, lines[2].split()))\n\n    # Sort assignments by their length\n    A.sort(reverse=True)\n\n    # Initialize variables\n    max_days = 0\n    curr_days = 0\n\n    # Loop through all assignments\n    for i in range(M):\n        # If the current assignment takes more days than we have left, we cannot finish the assignment\n        if A[i] > N - curr_days:\n            return \"-1\"\n        # Otherwise, add the length of the assignment to our current day count\n        else:\n            curr_days += A[i]\n            # If we have exceeded the maximum number of days, update the maximum\n            if curr_days > max_days:\n                max_days = curr_days\n\n    # Return the maximum number of days we can hang out\n    return str(max_days)"
    },
    {
        "number": 4194,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    \n    # Sort assignments by duration in descending order\n    a = sorted(a, reverse=True)\n    \n    # Initialize variables\n    max_duration = sum(a)\n    current_duration = max_duration\n    current_days = 0\n    current_day = 0\n    \n    # Iterate over each day\n    for i in range(n):\n        # Calculate the number of days he can do the current assignment\n        current_days_for_assignment = min(a[current_day], n - i)\n        \n        # Update current_duration and current_day\n        current_duration -= current_days_for_assignment\n        current_day += 1\n        \n        # Check if there is still time for the next assignment\n        if current_duration < 0:\n            return -1\n        \n        # Update current_days and check if it exceeds the maximum\n        current_days = max(current_days, current_days_for_assignment)\n        \n        # Check if all assignments have been completed\n        if current_day == m:\n            return current_days\n    \n    # If there are remaining assignments, return -1\n    return -1"
    },
    {
        "number": 4194,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Sort assignments in descending order\n    a.sort(reverse=True)\n\n    # Initialize variables\n    curr_day = 0\n    total_days = 0\n    num_assigned = 0\n\n    # Loop through assignments and add them up until the number of assignments is less than the number of days\n    while num_assigned < m:\n        # Check if there are enough days left to assign the current assignment\n        if curr_day + a[num_assigned] <= n:\n            # Assign the current assignment to the current day\n            curr_day += a[num_assigned]\n            total_days += curr_day\n            num_assigned += 1\n        else:\n            # If there are not enough days left, print -1 and exit the loop\n            print(-1)\n            break\n\n    # Print the total number of days Takahashi can hang out during the vacation\n    print(total_days)\n\n    # Exit successfully\n    return \"\""
    },
    {
        "number": 4194,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    if sum(a) > n:\n        return -1\n\n    dp = [0] * (n+1)\n    dp[0] = 1\n\n    for i in range(m):\n        for j in range(1, n+1):\n            if j-a[i] >= 0 and dp[j-a[i]] == 1:\n                dp[j] = 1\n            else:\n                dp[j] = 0\n\n    for i in range(n, -1, -1):\n        if dp[i] == 1:\n            return i\n\n    return -1"
    },
    {
        "number": 4194,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.split()[0:2])\n    A = list(map(int, stdin.split()[2:]))\n\n    # Sort assignments in ascending order\n    A.sort()\n\n    # Initialize variables\n    days = 0\n    curr_assignment = 0\n    last_day = 0\n\n    # Iterate over all possible days\n    for day in range(1, N+1):\n        # Check if we can do the current assignment\n        if curr_assignment < M and day - last_day >= A[curr_assignment]:\n            # Update last_day and curr_assignment\n            last_day = day\n            curr_assignment += 1\n            # Update days\n            days = max(days, day)\n        elif curr_assignment == M:\n            # We have finished all assignments\n            return str(days)\n        else:\n            # We cannot do the current assignment\n            return \"-1\""
    },
    {
        "number": 4195,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.strip().split())\n    if d == 0:\n        return str(5*n)\n    elif d == 1:\n        return str(10*n + 5)\n    else:\n        return str(20*n + 10)\n\nprint(solution(\"0 5\")) # Output: 5\nprint(solution(\"1 5\")) # Output: 55\nprint(solution(\"2 5\")) # Output: 115"
    },
    {
        "number": 4195,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        return str(1 + (N - 1) * 99)\n    elif D == 1:\n        return str(101 + (N - 1) * 100)\n    elif D == 2:\n        return str(1001 + (N - 1) * 1000)\n\nprint(solution(input()))"
    },
    {
        "number": 4195,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.strip().split())\n    count = 0\n    num = 1\n    while count < D:\n        num += 1\n        count = 0\n        for i in range(1, num):\n            if num % i == 0:\n                count += 1\n            if count == D:\n                break\n    return num\n\n\nprint(solution(input()))"
    },
    {
        "number": 4195,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n\n    # generate all possible integers divisible by 100 exactly D times\n    divisible = [i for i in range(101) if i % 100 == 0]\n\n    # return the N-th smallest integer that can be divided by 100 exactly D times\n    return str(divisible[N-1])\n\nprint(solution(\"0 5\")) # Output: \"5\""
    },
    {
        "number": 4195,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.strip().split())\n    if d == 0:\n        return str(5 * (n - 1) + 1)\n    elif d == 1:\n        return str(50 * n)\n    else:\n        return str(5 * (10 ** (n - 1) - 1) // 9)"
    },
    {
        "number": 4195,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split())\n    if d == 0:\n        return str(100 * (n - 1) + 1)\n    if d == 1:\n        return str(100 * n)\n    if d == 2:\n        return str(100 * (n + 1))\n\ndef"
    },
    {
        "number": 4195,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    count = 0\n    num = 1\n    while count < D:\n        num += 1\n        count = 0\n        while num % 100 == 0:\n            count += 1\n            num //= 100\n    return num"
    },
    {
        "number": 4195,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split())\n    if d == 0:\n        return str(1 + (n-1) * 200)\n    if d == 1:\n        return str(100 + (n-1) * 20)\n    if d == 2:\n        return str(1000 + (n-1) * 2)"
    },
    {
        "number": 4195,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    i = 1\n    count = 0\n    while count < D:\n        i += 1\n        count = 0\n        while i % 10 == 0:\n            count += 1\n            i //= 10\n    res = i\n    for j in range(1, N):\n        i += 1\n        count = 0\n        while i % 10 == 0:\n            count += 1\n            i //= 10\n        if i < res:\n            res = i\n    return str(res)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4195,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n\n    if D == 0:\n        return str(5 * N + 1)\n    elif D == 1:\n        return str(5 * N + 2)\n    elif D == 2:\n        return str(5 * N + 3)"
    },
    {
        "number": 4196,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # replace one integer with a new value\n    i = int(input(\"Enter index of integer to be replaced: \"))\n    A[i-1] = int(input(\"Enter new integer: \"))\n\n    # find greatest common divisor\n    from fractions import gcd\n    result = A[0]\n    for j in range(1, N):\n        result = gcd(result, A[j])\n\n    # print result\n    print(result)\n\n    return \"\""
    },
    {
        "number": 4196,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n\n    # choose one of the integers to replace\n    i = random.randint(0, N-1)\n    A[i] = random.randint(1, 10**9)\n\n    # compute gcd of A\n    A.sort()\n    a = A[-1]\n    for j in range(N-2, -1, -1):\n        a = math.gcd(a, A[j])\n\n    return str(a)"
    },
    {
        "number": 4196,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    max_val = max(arr)\n    min_val = min(arr)\n    if max_val == min_val:\n        return str(max_val)\n    for val in range(min_val + 1, max_val):\n        gcd = 1\n        for num in arr:\n            gcd = gcd * num // gcd(num, val)\n        if gcd > 1:\n            return str(gcd)\n    return \"1\""
    },
    {
        "number": 4196,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    m = max(a)\n    for i in range(n):\n        if a[i]!= m:\n            a[i] = m\n            break\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    g = a[0]\n    for i in range(1, n):\n        g = gcd(g, a[i])\n\n    return str(g)\n\nstdin = \"\"\"3\n7 6 8\"\"\"\n\nprint(solution(stdin)) # Output: 2"
    },
    {
        "number": 4196,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    nums = list(map(int, lines[1].split()))\n\n    # choose one number to replace\n    replace_idx = int(input()) - 1\n    replace_num = int(input())\n\n    # replace number\n    nums[replace_idx] = replace_num\n\n    # find gcd\n    gcd = nums[0]\n    for i in range(1, n):\n        gcd = gcd_two(gcd, nums[i])\n\n    return str(gcd)\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, *a = map(int, stdin.strip().split())\n    # Choose one integer to replace\n    i = int(stdin.strip().split()[random.randint(0, n-1)])\n    # Generate new integer\n    new_int = random.randint(1, 10**9)\n    # Replace integer and compute gcd\n    a = [x if x!= i else new_int for x in a]\n    return str(math.gcd(*a))"
    },
    {
        "number": 4196,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    \n    # Choosing a random integer to replace\n    replace_index = random.randint(0, N-1)\n    replace_value = random.randint(1, 10**9)\n    \n    # Replacing the chosen integer with the new integer\n    A[replace_index] = replace_value\n    \n    # Computing the GCD of the modified list\n    gcd = functools.reduce(math.gcd, A)\n    \n    return str(gcd)"
    },
    {
        "number": 4196,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    max_gcd = a[0]\n    for i in range(1, n):\n        max_gcd = math.gcd(max_gcd, a[i])\n    return str(max_gcd)"
    },
    {
        "number": 4196,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # find the maximum value in the list\n    max_val = max(a)\n\n    # replace the maximum value with a random number between 1 and 10^9\n    a[a.index(max_val)] = random.randint(1, 10**9)\n\n    # find the gcd of the modified list\n    gcd = a[0]\n    for i in range(1, n):\n        gcd = math.gcd(gcd, a[i])\n\n    # print the result\n    print(gcd)\n\n    # return the result as a string\n    return str(gcd)"
    },
    {
        "number": 4196,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # replace one element\n    i = 0\n    max_gcd = 0\n    for x in a:\n        # choose a random integer between 1 and 10^9\n        new_x = random.randint(1, 10**9)\n        a[i] = new_x\n\n        # compute the gcd of the new array\n        gcd = reduce(gcd_helper, a)\n\n        # update the max gcd\n        max_gcd = max(max_gcd, gcd)\n\n        # restore the original value\n        a[i] = x\n        i += 1\n\n    return str(max_gcd)\n\ndef"
    },
    {
        "number": 4197,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Sort A in ascending order\n    A.sort()\n\n    # Get the order of the students in the classroom\n    order = []\n    for i in range(1, N+1):\n        order.append(A.index(i)+1)\n\n    # Print the order of the students in the classroom\n    print(*order)"
    },
    {
        "number": 4197,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    \n    # Sort the array in ascending order\n    A.sort()\n    \n    # Extract the sorted array in descending order\n    result = []\n    for i in range(N, 0, -1):\n        for j in range(len(A)):\n            if A[j] == i:\n                result.append(i)\n                del A[j]\n                break\n    \n    return \" \".join(map(str, result))"
    },
    {
        "number": 4197,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().strip().split()))\n    \n    # sort A in ascending order\n    A.sort()\n    \n    # print the sorted list of A\n    for i in A:\n        print(i, end=' ')\n    \n    return \"\""
    },
    {
        "number": 4197,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    order = []\n    for i in range(n):\n        order.append(i + 1)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                order[i], order[j] = order[j], order[i]\n    return''.join(map(str, order))"
    },
    {
        "number": 4197,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    order = []\n    for i in range(n):\n        order.extend([i+1]*a[i])\n    return''.join(map(str, order))"
    },
    {
        "number": 4197,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    return''.join(map(str, a))\n\nprint(solution(\"3\\n2 3 1\\n\")) # Output: '3 1 2'"
    },
    {
        "number": 4197,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    \n    ans = []\n    for i in range(n):\n        ans.extend([i+1]*a[i])\n        \n    return''.join(map(str, ans))"
    },
    {
        "number": 4197,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # Initialize an array to store the count of students with each index\n    count = [0] * (n+1)\n    \n    # Count the number of students with each index\n    for i in range(1, n+1):\n        count[i] = count[i-1] + a[i-1]\n    \n    # Initialize an array to store the output in reverse order\n    output = [0] * n\n    \n    # Find the output array by finding the index of the count array\n    # where the count is equal to the index\n    for i in range(1, n+1):\n        output[count[i]-1] = i\n    \n    # Return the output array in reverse order\n    return''.join(map(str, output[::-1]))"
    },
    {
        "number": 4197,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    order = []\n    for i in range(1, n+1):\n        order.append(i)\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                order[i], order[j] = order[j], order[i]\n    return \" \".join(map(str, order))\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4197,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    students = [(i, a.count(i)) for i in range(1, n+1)]\n    students.sort(key=lambda x: x[1], reverse=True)\n    return''.join([str(x[0]) for x in students])"
    },
    {
        "number": 4198,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.strip().split())\n    if A*10 + B*9 < X:\n        return '0'\n    N = 1\n    while True:\n        price = A * N + B * len(str(N))\n        if price <= X:\n            N += 1\n        else:\n            return str(N-1)"
    },
    {
        "number": 4198,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.strip().split())\n    max_integer = 0\n    for n in range(1, 1000000000):\n        num_digits = len(str(n))\n        price = A * n + B * num_digits\n        if price <= X:\n            max_integer = max(max_integer, n)\n        else:\n            break\n    if max_integer == 0:\n        return \"0\"\n    return str(max_integer)"
    },
    {
        "number": 4198,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.strip().split())\n    if X < B * 1:\n        return \"0\"\n    for i in range(10**9, 0, -1):\n        digits = len(str(i))\n        price = A * i + B * digits\n        if price > X:\n            return str(i)\n    return \"0\""
    },
    {
        "number": 4198,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_num = 0\n    for i in range(1, 10**9+1):\n        price = A * i + B * len(str(i))\n        if price <= X and i > max_num:\n            max_num = i\n    if max_num == 0:\n        return '0'\n    return str(max_num)\n\ndef"
    },
    {
        "number": 4198,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_num = 0\n    for num in range(1, 10**9+1):\n        digits = len(str(num))\n        price = A * num + B * digits\n        if price <= X:\n            max_num = num\n        else:\n            break\n    if max_num == 0:\n        return '0'\n    else:\n        return str(max_num)"
    },
    {
        "number": 4198,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    ans = 0\n    for i in range(10**9, 0, -1):\n        if i % 10**9 == 0:\n            break\n        d = len(str(i))\n        price = A * i + B * d\n        if price <= X:\n            ans = i\n            break\n    print(ans)"
    },
    {
        "number": 4198,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_integer = 0\n    for i in range(1, 10**9):\n        if A * i + B * len(str(i)) > X:\n            break\n        max_integer = i\n    return str(max_integer)"
    },
    {
        "number": 4198,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_num = 0\n    for i in range(1, 1000000000):\n        num = A * i + B * len(str(i))\n        if num <= X:\n            max_num = i\n        else:\n            break\n    if max_num == 0:\n        return '0'\n    else:\n        return str(max_num)\n\nprint(solution(input()))"
    },
    {
        "number": 4198,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    greatest = 0\n    for i in range(1, 10**9):\n        price = A * i + B * len(str(i))\n        if price <= X:\n            greatest = i\n        else:\n            return str(greatest)\n    return str(greatest)"
    },
    {
        "number": 4198,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.strip().split())\n    max_integer = 0\n    for i in range(1, 1000000000):\n        price = A * i + B * len(str(i))\n        if price <= X:\n            max_integer = i\n        else:\n            break\n    return str(max_integer)"
    },
    {
        "number": 4199,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.strip().split('\\n')\n    N, K = map(int, lines[0].split())\n    heights = list(map(int, lines[1].split()))\n\n    # filter friends who are at least K centimeters tall\n    can_ride = [h >= K for h in heights]\n\n    # count number of friends who can ride\n    count = sum(can_ride)\n\n    # return result\n    return str(count)"
    },
    {
        "number": 4199,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, k = map(int, stdin.readline().split())\n    heights = list(map(int, stdin.readline().split()))\n\n    # count the number of friends who can ride the roller coaster\n    count = 0\n    for h in heights:\n        if h >= k:\n            count += 1\n\n    # print the result\n    print(count)\n\n    # return the result as a string\n    return str(count)"
    },
    {
        "number": 4199,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = map(int, stdin.readline().strip().split())\n    h = list(map(int, stdin.readline().strip().split()))\n    \n    # count number of people who can ride the roller coaster\n    count = 0\n    for i in range(n):\n        if h[i] >= k:\n            count += 1\n    \n    # print result\n    print(count)\n    \n    return \"\""
    },
    {
        "number": 4199,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    n, k = map(int, stdin.readline().split())\n    h = list(map(int, stdin.readline().split()))\n    \n    # Checking who can ride the roller coaster\n    count = 0\n    for i in range(n):\n        if h[i] >= k:\n            count += 1\n    \n    # Printing the result\n    print(count)\n    \n    return \"\""
    },
    {
        "number": 4199,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    n, k = map(int, stdin.readline().strip().split())\n    h = list(map(int, stdin.readline().strip().split()))\n\n    # Count the number of friends who are tall enough to ride the roller coaster\n    count = 0\n    for i in range(n):\n        if h[i] >= k:\n            count += 1\n\n    # Print the result\n    print(count)\n\n    return \"\""
    },
    {
        "number": 4199,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    heights = list(map(int, stdin.split()))\n    count = 0\n    for height in heights:\n        if height >= k:\n            count += 1\n    return str(count)\n\nwith open(\"input.txt\", \"r\") as file:\n    stdin = file.read()\n\nprint(solution(stdin))"
    },
    {
        "number": 4199,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.split('\\n')\n    n, k = map(int, lines[0].split())\n    h = list(map(int, lines[1].split()))\n    \n    # count the number of people who can ride the roller coaster\n    count = 0\n    for height in h:\n        if height >= k:\n            count += 1\n    \n    # print the result\n    return str(count)"
    },
    {
        "number": 4199,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, k = map(int, stdin.readline().split())\n    heights = list(map(int, stdin.readline().split()))\n    \n    # Count number of people who can ride the roller coaster\n    count = 0\n    for h in heights:\n        if h >= k:\n            count += 1\n            \n    return str(count)\n    \n"
    },
    {
        "number": 4199,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.readline().split())\n    heights = list(map(int, stdin.readline().split()))\n    \n    # Count number of friends who can ride the roller coaster\n    count = 0\n    for h in heights:\n        if h >= K:\n            count += 1\n    \n    return count"
    },
    {
        "number": 4199,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.readline().split())\n    heights = list(map(int, stdin.readline().split()))\n    count = 0\n    for height in heights:\n        if height >= K:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4200,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function solves the problem by first reading the input from stdin,\n    then parsing it to extract N and M, the votes for each item, and then\n    calculating the minimum number of votes needed to select M popular items\n    with a minimum vote share of 1/4M. If the minimum number of votes is\n    less than or equal to the total number of votes, then M popular items\n    can be selected, and \"Yes\" is printed; otherwise, \"No\" is printed.\n\n    :param stdin: a string representing the input from stdin\n    :return: a string representing the output to be printed to stdout\n    \"\"\"\n    # read input from stdin\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    A = list(map(int, lines[1].split()))\n\n    # calculate minimum number of votes needed to select M popular items\n    min_votes = max(sum(A) * 0.25, M)\n\n    # check if M popular items can be selected\n    if min_votes <= sum(A):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    total_votes = sum(A)\n    \n    # sort items by their votes in descending order\n    sorted_items = sorted(enumerate(A), key=lambda x: x[1], reverse=True)\n    \n    # calculate minimum required votes for a popular item\n    min_votes = total_votes // (4 * M)\n    \n    # count the number of popular items that meet the minimum requirement\n    popular_items = sum(1 for item in sorted_items if item[1] >= min_votes)\n    \n    # check if we can select M popular items\n    if popular_items >= M:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.strip().split())\n    A = list(map(int, stdin.strip().split()))\n\n    # Compute the total number of votes\n    total_votes = sum(A)\n\n    # Compute the required minimum vote threshold\n    required_threshold = total_votes / (4 * M)\n\n    # Initialize count of popular items selected\n    count = 0\n\n    # Iterate over all items\n    for i in range(N):\n        # Check if the item meets the minimum vote threshold\n        if A[i] >= required_threshold:\n            # Increment count of popular items selected\n            count += 1\n\n            # Check if we have selected enough popular items\n            if count == M:\n                # We can select the remaining popular items\n                for j in range(i + 1, N):\n                    # Check if the item meets the minimum vote threshold\n                    if A[j] >= required_threshold:\n                        # We cannot select this item\n                        return \"No\"\n\n                # We can select all remaining popular items\n                return \"Yes\"\n\n    # We cannot select all popular items\n    return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.readline().split()))\n    \n    total_votes = sum(A)\n    min_votes_required = total_votes // (4 * M)\n    \n    popular_items = [i for i in range(N) if A[i] >= min_votes_required]\n    \n    if len(popular_items) >= M:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    a.sort(reverse=True)\n    total_votes = sum(a)\n    for i in range(n):\n        if a[i] >= total_votes * 0.25:\n            m -= 1\n        if m == 0:\n            return \"Yes\"\n        if m < 0:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4200,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # calculate total number of votes\n    total_votes = sum(a)\n\n    # check if m popular items can be selected\n    popular_items = [i for i in range(n) if a[i] >= total_votes / (4 * m)]\n    if len(popular_items) >= m:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n\n    # calculate total votes\n    total_votes = sum(a)\n\n    # check if there are at least 1/4M of the total number of votes in each item\n    for i in range(n):\n        if a[i] < total_votes / (4 * m):\n            return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    total_votes = sum(a)\n    max_votes = total_votes // (4 * m)\n\n    for i in range(n):\n        if a[i] >= max_votes:\n            m -= 1\n            if m == 0:\n                return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n\n    total_votes = sum(a)\n    required_votes = total_votes // (4 * m)\n\n    popular_items = sorted(enumerate(a), key=lambda x: x[1], reverse=True)[:m]\n    popular_items = [item[0] for item in popular_items if item[1] >= required_votes]\n\n    if len(popular_items) >= m:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n\n    total_votes = sum(a)\n    if total_votes < 4 * m:\n        return 'No'\n\n    max_votes = max(a)\n    count = sum([1 for i in a if i >= max_votes // 4])\n\n    return 'Yes' if count >= m else 'No'\n\nprint(solution(\"4 1\\n5 4 2 1\"))\nprint(solution(\"5 2\\n2 4 5 3 1\"))\nprint(solution(\"10 3\\n2 3 5 7 8 10 12 13 15 16\"))"
    },
    {
        "number": 4201,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    H, W, K = map(int, stdin.split())\n    grid = [list(line.strip()) for line in stdin.split('\\n')[1:]]\n\n    # Count black squares\n    black_count = sum(row.count('#') for row in grid)\n\n    # Generate all possible combinations of rows and columns\n    rows = [r for r in range(H) for c in range(W) if grid[r][c] == '#']\n    cols = [c for r in range(H) for c in range(W) if grid[r][c] == '#']\n    row_combos = [set() for _ in range(K+1)]\n    col_combos = [set() for _ in range(K+1)]\n\n    # Generate all possible combinations of rows\n    def generate_row_combinations(current_row_combo, remaining_black_count):\n        if remaining_black_count == 0:\n            row_combos[remaining_black_count].add(tuple(current_row_combo))\n        else:\n            for r in rows:\n                if r not in current_row_combo:\n                    generate_row_combinations(current_row_combo + [r], remaining_black_count - 1)\n\n    generate_row_combinations([], black_count)\n\n    # Generate all possible combinations of columns\n    def generate_col_combinations(current_col_combo, remaining_black_count):\n        if remaining_black_count == 0:\n            col_combos[remaining_black_count].add(tuple(current_col_combo))\n        else:\n            for c in cols:\n                if c not in current_col_combo:\n                    generate_col_combinations(current_col_combo + [c], remaining_black_count - 1)\n\n    generate_col_combinations([], black_count)\n\n    # Count the number of choices\n    count = 0\n    for row_combo in row_combos[K]:\n        for col_combo in col_combos[K]:\n            count += len(set(row_combo) & set(col_combo)) == 0\n    return count\n\nprint(solution(\"\"\"\n2 3 2\n..#\n###\n\"\"\")) # Output: 5"
    },
    {
        "number": 4201,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = list(map(int, stdin.split()))\n    grid = []\n    for i in range(H):\n        line = list(stdin.readline().strip())\n        grid.append(line)\n    count = 0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                K -= 1\n                if K == 0:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4201,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h, w, k = map(int, stdin.readline().strip().split())\n    grid = [[c for c in stdin.readline().strip()] for _ in range(h)]\n    count = 0\n    for i in range(h+1):\n        for j in range(w+1):\n            black_count = sum(1 for r in range(i) for c in range(j) if grid[r][c] == '#')\n            white_count = sum(1 for r in range(i) for c in range(j) if grid[r][c] == '.')\n            if black_count == k:\n                count += 1\n            if white_count + black_count == k:\n                count += 1\n    return count"
    },
    {
        "number": 4201,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    H, W, K = map(int, stdin.readline().split())\n    grid = [stdin.readline().strip() for _ in range(H)]\n\n    # Count black squares\n    black_squares = sum(row.count('#') for row in grid)\n\n    # Brute force search for choices\n    choices = 0\n    for i in range(1 << H):\n        rows = [j for j in range(H) if (i >> j) & 1]\n        for j in range(1 << W):\n            cols = [k for k in range(W) if (j >> k) & 1]\n            # Check if there are enough black squares remaining after painting red\n            if sum(grid[r][c] == '#' for r in rows for c in cols) == K and \\\n                    sum(grid[r][c] == '#' for r in rows for c in range(W) if k not in cols) == black_squares - K:\n                choices += 1\n\n    return str(choices)\n"
    },
    {
        "number": 4201,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    H, W, K = map(int, lines[0].split())\n    grid = [[c for c in line] for line in lines[1:]]\n    num_choices = 0\n\n    def count_black_squares():\n        return sum(1 for i in range(H) for j in range(W) if grid[i][j] == '#')\n\n    def paint_red(rows, cols):\n        for i in rows:\n            for j in cols:\n                grid[i][j] = 'R'\n\n    for i in range(H+1):\n        for j in range(W+1):\n            rows = list(range(i))\n            cols = list(range(j))\n            paint_red(rows, cols)\n            if count_black_squares() == K:\n                num_choices += 1\n            paint_red(rows, cols)\n            grid[i-1][j-1] = '.'\n\n    return str(num_choices)\n\nstdin = \"\"\"\n2 3 2\n..#\n###\n\"\"\"\n\nprint(solution(stdin)) # Output: 5"
    },
    {
        "number": 4201,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    H, W, K = map(int, stdin.readline().strip().split())\n    grid = [list(stdin.readline().strip()) for _ in range(H)]\n\n    # count black squares in each row and column\n    row_count = [sum(row.count('#') for row in grid)]\n    col_count = [sum(grid[i][j] == '#' for i in range(H)) for j in range(W)]\n\n    # generate candidates for row and column choices\n    candidates = []\n    for i in range(1, H+1):\n        for j in range(1, W+1):\n            row_cand = [set() for _ in range(i)]\n            col_cand = [set() for _ in range(j)]\n            for h in range(H):\n                for w in range(W):\n                    if grid[h][w] == '.':\n                        row_cand[h].add(w)\n                        col_cand[w].add(h)\n            candidates.append((row_cand, col_cand))\n\n    # count black squares after applying operation\n    result = 0\n    for row_choice, col_choice in candidates:\n        black_count = 0\n        for i in range(H):\n            for j in range(W):\n                if grid[i][j] == '#':\n                    if i in row_choice and j in col_choice:\n                        black_count += 1\n        if black_count == K:\n            result += 1\n\n    return str(result)\n"
    },
    {
        "number": 4201,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split(\"\\n\")\n    H, W, K = map(int, lines[0].split())\n    c = [[0] * W for _ in range(H)]\n    for i, line in enumerate(lines[1:]):\n        c[i] = list(line)\n    # count number of black squares\n    black_count = sum([c[i][j] == '#' for i in range(H) for j in range(W)])\n    if K > black_count:\n        return \"0\"\n    # dfs to find all possible choices of rows and columns\n    choices = set()\n    def dfs(row_mask, col_mask, black_count):\n        if black_count == K:\n            choices.add((row_mask, col_mask))\n            return\n        for i in range(H):\n            if not row_mask & (1 << i):\n                row_mask |= 1 << i\n                for j in range(W):\n                    if not col_mask & (1 << j) and c[i][j] == '#':\n                        col_mask |= 1 << j\n                        dfs(row_mask, col_mask, black_count + 1)\n                        col_mask &= ~(1 << j)\n                row_mask &= ~(1 << i)\n    # dfs on all possible starting points\n    for i in range(H):\n        for j in range(W):\n            if c[i][j] == '#':\n                row_mask = col_mask = 0\n                row_mask |= 1 << i\n                col_mask |= 1 << j\n                dfs(row_mask, col_mask, 2)\n    # count number of choices satisfying the condition\n    return str(len(choices))"
    },
    {
        "number": 4201,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split()[0:3])\n    grid = [list(line.strip()) for line in stdin.strip().split('\\n')[1:]]\n    num_choices = 0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '.':\n                grid[i][j] = '#'\n                num_choices += 1\n            if num_choices == K:\n                return str(num_choices)\n    return str(num_choices)\n\nwith open('input.txt', 'r') as file:\n    input_str = file.read()\n\nresult = solution(input_str)\n\nprint(result)"
    },
    {
        "number": 4201,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    H, W, K = map(int, stdin.readline().split())\n    grid = [stdin.readline().strip() for _ in range(H)]\n\n    # Count the number of black squares\n    black_squares = sum(1 for row in grid for c in row if c == '#')\n\n    # Check if K is smaller than or equal to the total number of black squares\n    if K > black_squares:\n        return 0\n\n    # Initialize variables\n    chosen_rows = set()\n    chosen_cols = set()\n    num_choices = 0\n\n    # Helper function to check if a square is painted red\n    def is_painted_red(i, j):\n        return i in chosen_rows or j in chosen_cols\n\n    # Helper function to paint a square red\n    def paint_red(i, j):\n        if grid[i][j] == '.':\n            grid[i] = grid[i][:j] + 'R' + grid[i][j+1:]\n        else:\n            grid[i] = grid[i][:j] + '#' + grid[i][j+1:]\n\n    # Backtracking function to find all choices of rows and columns\n    def backtrack(i, j, rows, cols):\n        nonlocal num_choices\n        if i == H:\n            # Found a choice of rows\n            if len(rows) == K:\n                # Check if this choice of rows is different from the previous one\n                if all(len(chosen_rows.intersection(set(range(H)))) > 0, cols) and all(len(chosen_cols.intersection(set(range(W)))) > 0, rows):\n                    num_choices += 1\n                    return\n            else:\n                return\n        else:\n            # Try to choose a row\n            chosen_rows.add(i)\n            backtrack(i+1, j, rows, cols)\n            chosen_rows.remove(i)\n            if i == 0:\n                # Try to choose a column\n                chosen_cols.add(j)\n                backtrack(i, j+1, rows, cols)\n                chosen_cols.remove(j)\n            else:\n                # Try to choose a row and a column\n                chosen_cols.add(j)\n                backtrack(i+1, j+1, rows, cols)\n                chosen_cols.remove(j)\n\n    # Find all choices of rows and columns\n    backtrack(0, 0, set(), set())\n\n    # Print the number of choices\n    return num_choices"
    },
    {
        "number": 4201,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    H, W, K = map(int, stdin.split())\n    grid = []\n    for _ in range(H):\n        grid.append(list(stdin.strip()))\n\n    # Count white and black squares\n    white_squares = 0\n    black_squares = 0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '.':\n                white_squares += 1\n            elif grid[i][j] == '#':\n                black_squares += 1\n\n    # Compute K\n    K_remain = K\n    while K_remain > 0:\n        # Compute min and max row indices\n        min_row = 0\n        max_row = H - 1\n        if K_remain - (W - 1) >= 0:\n            min_row = 1\n            K_remain -= W - 1\n        if K_remain - (H - 1) >= 0:\n            max_row = H - 2\n            K_remain -= H - 1\n\n        # Compute min and max column indices\n        min_col = 0\n        max_col = W - 1\n        if K_remain - (H - 1) >= 0:\n            min_col = 1\n            K_remain -= H - 1\n        if K_remain - (W - 1) >= 0:\n            max_col = W - 2\n            K_remain -= W - 1\n\n        # Paint red\n        for i in range(min_row, max_row + 1):\n            for j in range(min_col, max_col + 1):\n                grid[i][j] = '#'\n\n        # Update white and black squares\n        white_squares -= (max_col - min_col + 1) * (max_row - min_row + 1)\n        black_squares += (max_col - min_col + 1) * (max_row - min_row + 1)\n\n    # Count number of choices\n    num_choices = 0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '.':\n                num_choices += 1\n\n    return num_choices"
    },
    {
        "number": 4202,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    if L >= R:\n        return \"0\"\n    i = L\n    while i < R:\n        j = i + 1\n        while j <= R:\n            if (i * j) % 2019 == 0:\n                return str((i * j) % 2019)\n            j += 1\n        i += 1\n    return \"0\""
    },
    {
        "number": 4202,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.strip().split())\n    for i in range(L, R):\n        for j in range(i+1, R+1):\n            result = (i*j)%2019\n            if result == 0:\n                return str(result)\n    return \"No solution exists!\"\n\nstdin = \"2020 2040\"\nprint(solution(stdin)) # Output: 2"
    },
    {
        "number": 4202,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    i = L\n    j = L+1\n    min_value = float('inf')\n    while i < R:\n        if i*j % 2019 < min_value:\n            min_value = i*j % 2019\n            min_i = i\n            min_j = j\n        j += 1\n        if j > R:\n            i += 1\n            j = i+1\n    return str(min_value)"
    },
    {
        "number": 4202,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n\n    # since (i * j) % 2019 is the sum of the last digits of i and j, we need to ensure that both i and j are less than 10.\n    for i in range(l, r):\n        for j in range(i+1, r+1):\n            if i*j % 2019 == 0:\n                return str(i * j % 2019)"
    },
    {
        "number": 4202,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    i = L\n    j = R\n    min_val = float('inf')\n    while i <= R:\n        while j <= R:\n            val = (i * j) % 2019\n            if val < min_val:\n                min_val = val\n            j += 1\n        i += 1\n        j = i\n    return str(min_val)"
    },
    {
        "number": 4202,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    i, j = L, L+1\n    while i < j:\n        mid = (i+j) // 2\n        if mid*mid > R:\n            j = mid\n        else:\n            i = mid + 1\n    return (i*j) % 2019"
    },
    {
        "number": 4202,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    i, j = L, L + 1\n    ans = (i * j) % 2019\n    return str(ans)"
    },
    {
        "number": 4202,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    i, j = L, R\n    min_value = 2019\n    while i < j:\n        min_value = min(min_value, (i * j) % 2019)\n        i += 1\n        j -= 1\n    return str(min_value)"
    },
    {
        "number": 4202,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    result = 2018\n    for i in range(l, r):\n        for j in range(i+1, r+1):\n            product = i * j % 2019\n            if product < result:\n                result = product\n    return str(result)"
    },
    {
        "number": 4202,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    i = L + 1\n    j = R\n    ans = (i * j) % 2019\n    while i < j:\n        if i % 2 == 0:\n            i += 1\n        else:\n            j -= 1\n        temp = (i * j) % 2019\n        if temp < ans:\n            ans = temp\n    return str(ans)\n\nprint(solution(input()))"
    },
    {
        "number": 4203,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input string\n    s = stdin.strip()\n\n    # Check if the initial character is A and the third occurrence of C is present\n    if s[0]!= 'A' or s.count('C')!= 1 or s.index('C') < 3 or s[-1]!= 'c':\n        return 'WA'\n\n    # Check if all the other letters are lowercase\n    for c in s[1:-1]:\n        if c.isupper():\n            return 'WA'\n\n    return 'AC'"
    },
    {
        "number": 4203,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) < 4 or len(s) > 10:\n        return \"WA\"\n    if s[0]!= 'A':\n        return \"WA\"\n    c_count = 0\n    for i in range(2, len(s) - 1):\n        if s[i] == 'C':\n            c_count += 1\n            if c_count > 1:\n                return \"WA\"\n    for i in range(len(s)):\n        if s[i]!= 'A' and s[i]!= 'C' and s[i].islower():\n            continue\n        else:\n            return \"WA\"\n    return \"AC\""
    },
    {
        "number": 4203,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s)!= 4:\n        return \"WA\"\n    if s[0]!= 'A':\n        return \"WA\"\n    c_count = s[2:].count('C')\n    if c_count!= 1:\n        return \"WA\"\n    if any(c.isupper() for c in s[1:-1]):\n        return \"WA\"\n    if any(c.islower() for c in s[1:-1]):\n        return \"AC\"\n    return \"WA\""
    },
    {
        "number": 4203,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S[0]!= 'A':\n        return 'WA'\n    if S.count('C')!= 1:\n        return 'WA'\n    count = 0\n    for i in range(2, len(S)-1):\n        if S[i] == 'C':\n            count += 1\n    if count!= 1:\n        return 'WA'\n    for i in range(1, len(S)-1):\n        if not S[i].islower():\n            return 'WA'\n    return 'AC'"
    },
    {
        "number": 4203,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0]!= 'A':\n        return 'WA'\n    if s.count('C')!= 1:\n        return 'WA'\n    for i in range(3, len(s)-1):\n        if s[i] == 'C':\n            return 'WA'\n    if any(c.isupper() for c in s):\n        return 'WA'\n    return 'AC'"
    },
    {
        "number": 4203,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0]!= 'A':\n        return 'WA'\n    if s.count('C')!= 1:\n        return 'WA'\n    if s[2:].lower()!= s[2:]:\n        return 'WA'\n    return 'AC'\n\nprint(solution(input()))"
    },
    {
        "number": 4203,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) < 4:\n        return 'WA'\n    if s[0]!= 'A':\n        return 'WA'\n    if s.count('C')!= 1:\n        return 'WA'\n    for i in range(2, len(s) - 1):\n        if s[i]!= 'C':\n            return 'WA'\n    for i in range(len(s) - 1):\n        if i == 0:\n            continue\n        if s[i] == 'C':\n            continue\n        if s[i].islower():\n            continue\n        return 'WA'\n    return 'AC'"
    },
    {
        "number": 4203,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S[0]!= 'A' or S.count('C')!= 1 or any(c.isupper() for c in S[3:-2]):\n        return 'WA'\n    return 'AC'"
    },
    {
        "number": 4203,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) < 4:\n        return \"WA\"\n    if s[0]!= \"A\":\n        return \"WA\"\n    count_c = 0\n    for i in range(2, len(s)-1):\n        if s[i] == \"C\":\n            count_c += 1\n    if count_c!= 1:\n        return \"WA\"\n    for i in range(1, len(s)):\n        if s[i]!= s[i].lower():\n            return \"WA\"\n    return \"AC\""
    },
    {
        "number": 4203,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S[0]!= 'A':\n        return 'WA'\n    c_count = sum(1 for c in S[2:len(S)-1] if c == 'C')\n    if c_count!= 1:\n        return 'WA'\n    if any(c.isupper() for c in S):\n        return 'WA'\n    return 'AC'"
    },
    {
        "number": 4204,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    s = stdin.strip()\n    k = int(stdin.strip())\n\n    # Applying the rules of the problem\n    for i in range(5*10**15):\n        s = ''.join([str(int(i)) * (int(i) // 10 + 1) if i!= '0' else '0' for i in s])\n    \n    # Getting the Kth character from left\n    return s[k-1]"
    },
    {
        "number": 4204,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    S, K = stdin.strip().split()\n\n    # Convert S and K to integers\n    S = int(S)\n    K = int(K)\n\n    # Initialize a variable to keep track of the current day\n    current_day = 0\n\n    # Initialize a variable to keep track of the current string\n    current_string = str(S)\n\n    # Keep track of the number of days to reach Kth character\n    days_to_reach_Kth_char = 5 * 10**15 + K - 1\n\n    # Keep track of the current character position in the string\n    current_char_position = 0\n\n    while current_day < days_to_reach_Kth_char:\n        # Replace each occurrence of 2, 3, 4, 5, 6, 7, 8, 9 with its doubled value\n        current_string = current_string.replace('2', '22').replace('3', '333').replace('4', '4444').replace('5', '55555').replace('6', '666666').replace('7', '7777777').replace('8', '88888888').replace('9', '999999999')\n\n        # Increment the day\n        current_day += 1\n\n    # Return the Kth character from the left in the current string\n    return current_string[K - 1]"
    },
    {
        "number": 4204,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    k = int(k)\n    s = list(s)\n    i = 0\n    while len(s) < k:\n        i += 1\n        for j in range(len(s)):\n            if s[j] == '2':\n                s[j] = '22'\n            elif s[j] == '3':\n                s[j] = '333'\n            elif s[j] == '4':\n                s[j] = '4444'\n            elif s[j] == '5':\n                s[j] = '55555'\n            elif s[j] == '6':\n                s[j] = '666666'\n            elif s[j] == '7':\n                s[j] = '7777777'\n            elif s[j] == '8':\n                s[j] = '88888888'\n            elif s[j] == '9':\n                s[j] = '999999999'\n    return s[k-1]"
    },
    {
        "number": 4204,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, k = map(str, stdin.strip().split())\n    k = int(k)\n    n = len(s)\n    for i in range(5*10**15):\n        s = ''.join(['22' if x=='2' else ('333' if x=='3' else ('4444' if x=='4' else ('55555' if x=='5' else ('666666' if x=='6' else ('7777777' if x=='7' else ('88888888' if x=='8' else ('999999999' if x=='9' else x))))) for x in s])\n    return s[k-1]"
    },
    {
        "number": 4204,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    k = int(k)\n    s = int(s)\n    if k > 5*10**15:\n        return \"Error: K is too large\"\n    s = str(s)\n    for i in range(5*10**15):\n        s = s.replace(\"2\", \"22\").replace(\"3\", \"333\").replace(\"4\", \"4444\").replace(\"5\", \"55555\").replace(\"6\", \"666666\").replace(\"7\", \"7777777\").replace(\"8\", \"88888888\").replace(\"9\", \"999999999\")\n    return s[k-1]\n\nprint(solution(\"1214 4\"))"
    },
    {
        "number": 4204,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, K = map(int, stdin.split())\n    result = \"\"\n    for i in range(5*10**15):\n        for j in range(len(S)):\n            if S[j] == \"1\":\n                result += \"1\"\n            else:\n                result += str(int(S[j]) * (int(S[j]) + 1))[:j+1]\n        S = result\n    return S[K-1]"
    },
    {
        "number": 4204,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    s, k = stdin.strip().split()\n    k = int(k)\n\n    # calculate days\n    days = 5 * 10 ** 15\n\n    # apply the transformation\n    s = s.translate(str.maketrans('123456789', '111111111'))\n    for _ in range(days):\n        s = s.replace('2', '22')\n        s = s.replace('3', '333')\n        s = s.replace('4', '4444')\n        s = s.replace('5', '55555')\n        s = s.replace('6', '666666')\n        s = s.replace('7', '7777777')\n        s = s.replace('8', '88888888')\n        s = s.replace('9', '999999999')\n\n    # get output\n    return s[k-1]"
    },
    {
        "number": 4204,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.strip().split()\n    K = int(K)\n    days = int(5e15)\n    S = '1' + S\n    for i in range(days):\n        S = ''.join([str(int(x) + 1) if int(x) < 9 else '1' for x in list(S)])\n    return S[K - 1]"
    },
    {
        "number": 4204,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.strip().split()\n    S = S.zfill(int(K))\n    for i in range(5, len(S) + 5):\n        S = S[:i] + str(len(S[:i]) * 9) + S[i+1:]\n    return S[K-1]"
    },
    {
        "number": 4204,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    k = int(k)\n\n    # Keep replacing digits with its digits multiplied by 10\n    for i in range(5, 1000000000000000):\n        s = s.replace('2', '22').replace('3', '333').replace('4', '4444').replace('5', '55555').replace('6', '666666').replace('7', '7777777').replace('8', '88888888').replace('9', '999999999')\n        if len(s) >= k:\n            return s[k-1]"
    },
    {
        "number": 4205,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Function to solve the problem.\n    \"\"\"\n    # Read the input\n    N = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n\n    # Check if the input is valid\n    if len(p)!= N or len(set(p))!= N:\n        return \"NO\"\n\n    # Check if p is sorted in ascending order\n    is_sorted = True\n    for i in range(N-1):\n        if p[i] > p[i+1]:\n            is_sorted = False\n            break\n\n    # Check if we can sort p in ascending order by performing at most one swap\n    can_sort = True\n    for i in range(N-1):\n        for j in range(i+2, N+1):\n            if p[i] > p[j-1] and p[j-1] < p[j]:\n                p[i], p[j-1], p[j] = p[j-1], p[i], p[j]\n                if not is_sorted:\n                    can_sort = True\n                break\n\n    # Print the output\n    if can_sort:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n\n    for i in range(N):\n        for j in range(i+1, N):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n\n    for i in range(N-1):\n        if p[i] > p[i+1]:\n            return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4205,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    \n    # try all possible pairs of adjacent elements and check if they are in ascending order\n    for i in range(N-1):\n        for j in range(i+2, N):\n            if p[i] > p[j]:\n                return \"NO\"\n    \n    return \"YES\""
    },
    {
        "number": 4205,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, p = list(map(int, stdin.strip().split()))\n    p = list(map(int, stdin.strip().split()))\n\n    # Sort p in ascending order\n    sorted_p = sorted(p)\n\n    # Check if sorted_p is equal to p\n    if sorted_p == p:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n\n    # perform operations\n    for i in range(N):\n        for j in range(i+1, N):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n                break\n\n    # check if sorted\n    if sorted(p) == p:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    N = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n\n    # Check if the sequence is already sorted in ascending order\n    if p == sorted(p):\n        return \"YES\"\n\n    # Perform the operation at most once to check if the sequence can be sorted in ascending order\n    for i in range(N):\n        for j in range(i+2, N+1):\n            p_copy = p.copy()\n            p_copy[i], p_copy[j-1] = p_copy[j-1], p_copy[i]\n            if p_copy == sorted(p_copy):\n                return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    p = list(map(int, lines[1].split()))\n    swaps = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n                swaps += 1\n                if swaps > 1:\n                    return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4205,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes input from stdin in the format of N followed by the permutation p_1, p_2,..., p_N.\n    It checks if it's possible to sort the permutation in ascending order by performing at most one operation,\n    which is to choose two integers i and j (1 <= i < j <= N) and swap p_i and p_j. If it's possible to sort\n    the permutation in ascending order, it returns \"YES\". Otherwise, it returns \"NO\".\n    \"\"\"\n    # read input\n    N = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n\n    # check if the input satisfies the constraints\n    if N < 2 or N > 50:\n        return \"NO\"\n    if len(p)!= N or sorted(p)!= list(range(1, N+1)):\n        return \"NO\"\n\n    # try swapping each pair of adjacent elements\n    for i in range(N-1):\n        if p[i] > p[i+1]:\n            # swap p[i] and p[i+1]\n            p[i], p[i+1] = p[i+1], p[i]\n            # check if p is already sorted in ascending order\n            if sorted(p) == list(range(1, N+1)):\n                return \"YES\"\n            # swap p[i] and p[i+1] back\n            p[i], p[i+1] = p[i+1], p[i]\n\n    # if no such operation is possible to sort the permutation in ascending order, return \"NO\"\n    return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n\n    # Check if the sequence is sorted in ascending order\n    for i in range(N-1):\n        if p[i] > p[i+1]:\n            break\n    else:\n        return \"YES\"\n\n    # Check if we can sort the sequence in ascending order\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n                if all(p[k] <= p[k+1] for k in range(N-1)):\n                    return \"YES\"\n                p[i], p[j] = p[j], p[i]\n\n    # Cannot sort the sequence in ascending order\n    return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    p = [int(x) for x in lines[1].split()]\n    \n    # Check if p is sorted in ascending order\n    sorted_p = sorted(p)\n    if p == sorted_p:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4206,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    n = len(str(s))\n    cuts = 1\n    while True:\n        if s % 10 == 0 and s!= 0:\n            return cuts\n        if s % 10 == 0 and s == 0:\n            return cuts + 1\n        s = sum(int(digit) * 10**(n-i-1) for i, digit in enumerate(str(s)))\n        cuts += 1"
    },
    {
        "number": 4206,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    s = int(stdin)\n    # Count number of digits\n    n = len(str(s))\n    # Calculate number of possible cuts\n    possible_cuts = n - 1\n    # Calculate max number of divisible by 3 numbers\n    max_divisible_by_3 = 1 + possible_cuts // 3\n    # Print result\n    return str(max_divisible_by_3)"
    },
    {
        "number": 4206,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    if s % 3 == 0:\n        return 1\n    max_num = 0\n    for i in range(1, len(str(s))):\n        if str(s)[i] == '3' and str(s)[i-1]!= '3':\n            cuts = str(s)[i-1:i+1]\n            left = str(s)[:i-1] + str(s)[i+1:]\n            right = str(s)[:i] + str(s)[i+2:]\n            left_num = int(left)\n            right_num = int(right)\n            if left_num % 3 == 0:\n                max_num += 1\n            if right_num % 3 == 0:\n                max_num += 1\n    return max_num"
    },
    {
        "number": 4206,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    n = len(str(s))\n    if s % 3 == 0:\n        return 1\n    if n == 1:\n        return 1\n    ans = 1\n    m = 0\n    for i in range(1, n):\n        m = m * 10 + s % 10\n        s //= 10\n    if m == 0:\n        ans += 1\n    else:\n        ans += 1 + solution(m)\n    return ans\n"
    },
    {
        "number": 4206,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    s = int(stdin)\n\n    # count the number of valid cuts\n    count = 0\n    while s >= 10:\n        count += 1\n        s //= 10\n\n    # add one more cut if the last digit is a 3\n    if s % 3 == 0:\n        count += 1\n\n    # print the result\n    print(count)"
    },
    {
        "number": 4206,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 0:\n        n = n // 10\n        count += 1\n    return count\n\nprint(solution(\"3121\")) # Output: 2\nprint(solution(\"6\")) # Output: 1\nprint(solution(\"100000000000000000000000000000000\")) # Output: 33\nprint(solution(\"201920181\")) # Output: 4"
    },
    {
        "number": 4206,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    n = len(str(s))\n    if n <= 1:\n        return 1 if s == 6 else 0\n    if n % 3 == 1:\n        return 2 if s % 3 == 0 else 1\n    if n % 3 == 2:\n        return 3\n    return 2 + (n // 3)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4206,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = int(s)\n    m = 0\n    while s > 9:\n        s = s // 10\n        m += 1\n    res = 0\n    for i in range(m + 1):\n        res += 9 * 10**(m-i)\n    res -= s\n    return res"
    },
    {
        "number": 4206,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    max_divisible = 0\n    for i in range(1, len(str(s))):\n        for j in range(i + 1, len(str(s)) + 1):\n            num = int(str(s)[i:j])\n            if num % 3 == 0:\n                max_divisible += 1\n    return max_divisible\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin.strip())\n    # split the string into digits and convert to a list of integers\n    digits = [int(d) for d in str(s)]\n    n = len(digits)\n    # count the number of integers that are divisible by 3\n    count = sum(d % 3 == 0 for d in digits)\n    # make vertical cuts between adjacent digits and count the number of integers that are divisible by 3\n    for i in range(1, n):\n        if digits[i] % 3 == 0 and digits[i-1] % 3!= 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4207,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    \n    max_zeroes = 0\n    for i in range(n):\n        if a[i] == 0 or b[i] == 0:\n            max_zeroes += 1\n        else:\n            max_zeroes += 2\n            \n    return str(max_zeroes)"
    },
    {
        "number": 4207,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    c = []\n    for i in range(n):\n        c.append(a[i]*-2+b[i])\n    zeroes = 0\n    for i in c:\n        if i == 0:\n            zeroes += 1\n    return str(zeroes)\n\nprint(solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\")) # 2\nprint(solution(\"3\\n13 37 39\\n1 2 3\")) # 2\nprint(solution(\"4\\n0 0 0 0\\n1 2 3 4\")) # 0\nprint(solution(\"3\\n1 2 -1\\n-6 -12 6\")) # 3"
    },
    {
        "number": 4207,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    \n    c = [d*ai + bi for ai, bi in zip(a, b)]\n    return str(len([i for i in c if i == 0]))"
    },
    {
        "number": 4207,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    \n    ans = 0\n    for i in range(n):\n        if a[i] == 0 or b[i] == 0:\n            ans += 1\n    \n    return str(ans)\n    \n"
    },
    {
        "number": 4207,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:1+n]))\n    b = list(map(int, stdin.split()[1+n:]))\n\n    c = [a[i]*d + b[i] for i in range(n)]\n    max_zeros = c.count(0)\n\n    return str(max_zeros)"
    },
    {
        "number": 4207,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    c = [d*x+y for d, x, y in zip(a, b)]\n\n    max_zeros = 0\n    for i in c:\n        if i == 0:\n            max_zeros += 1\n\n    return str(max_zeros)"
    },
    {
        "number": 4207,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    max_zeros = 0\n    for i in range(n):\n        if a[i] == 0 or b[i] == 0:\n            max_zeros += 1\n        else:\n            max_zeros += 2\n\n    return str(max_zeros)"
    },
    {
        "number": 4207,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    \n    c = [d * i + j for i, j in zip(a, b)]\n    max_c = max(c)\n    count = c.count(0)\n    return count"
    },
    {
        "number": 4207,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()[1:]]\n    b = [int(x) for x in stdin.split()[2:]]\n    n = len(a)\n    count = 0\n    for i in range(n):\n        if a[i]*b[i] < 0:\n            count += 1\n    return count"
    },
    {
        "number": 4207,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    max_zeroes = 0\n    for i in range(n):\n        if a[i] == 0 or b[i] == 0:\n            max_zeroes += 1\n    if max_zeroes == n:\n        return \"0\"\n    else:\n        return str(max_zeroes)"
    },
    {
        "number": 4208,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    left = stdin.readline().strip()\n    right = stdin.readline().strip()\n\n    def is_compatible(left_color: str, right_color: str) -> bool:\n        if left_color == right_color:\n            return True\n        if left_color == '?' or right_color == '?':\n            return True\n        return False\n\n    max_pairs = 0\n    pairs = []\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_compatible(left[i], right[j]):\n                pairs.append((i, j))\n                max_pairs += 1\n\n    print(max_pairs)\n    for pair in pairs:\n        print(pair[0]+1, pair[1]+1)\n\n    return str(max_pairs) + '\\n' + '\\n'.join(f\"{pair[0]+1} {pair[1]+1}\" for pair in pairs) + '\\n'\n"
    },
    {
        "number": 4208,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(str, stdin.split())\n    n = int(n)\n    max_count = 0\n    pairs = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if l[i] == '?' or r[j] == '?':\n                count = 1\n            elif l[i] == r[j]:\n                count = 1\n            else:\n                count = 0\n            if count > max_count:\n                max_count = count\n                pairs = [(i, j)]\n            elif count == max_count:\n                pairs.append((i, j))\n    return f\"{max_count}\\n{' '.join(' '.join(map(str, pair)) for pair in pairs)}\""
    },
    {
        "number": 4208,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    l = list(stdin.split()[1])\n    r = list(stdin.split()[2])\n    \n    pairs = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if l[i] == r[j] or (l[i] == '?' or r[j] == '?'):\n                pairs.append((i, j))\n    \n    k = len(pairs)\n    if k == 0:\n        print(k)\n        return \"\"\n    \n    pairs.sort(key=lambda x: (x[0], x[1]))\n    \n    print(k)\n    for pair in pairs:\n        print(pair[0], pair[1])\n    \n    return \"\""
    },
    {
        "number": 4208,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    l = stdin.split()[1]\n    r = stdin.split()[2]\n\n    # create a list of tuples, where each tuple contains two indices (one for each side)\n    pairs = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if (l[i] == '?' or r[j] == '?') or (l[i] == r[j]):\n                pairs.append((i,j))\n\n    k = len(pairs)\n    if k == 0:\n        return str(k)\n\n    for i in range(k):\n        a, b = pairs[i]\n        print(a+1, b+1)\n\n    return str(k)"
    },
    {
        "number": 4208,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    l, r = stdin.split()[1], stdin.split()[2]\n    count = 0\n    pairs = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if (l[i] == '?' or r[j] == '?' or l[i] == r[j]) and (l[i]!= '?' or r[j]!= '?'):\n                count += 1\n                pairs.append((i,j))\n    print(count)\n    for pair in pairs:\n        print(pair[0]+1, pair[1]+1)\n    return str(count)"
    },
    {
        "number": 4208,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n\n    count = 0\n    pairs = []\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if (l[i]!= '?' and l[j]!= '?' and l[i]!= l[j]) or (r[i]!= '?' and r[j]!= '?' and r[i]!= r[j]):\n                continue\n            pairs.append((i+1, j+1))\n            count += 1\n            if count == n:\n                break\n        if count == n:\n            break\n\n    return f\"{count}\\n{' '.join(str(x) for pair in pairs for x in pair)}\""
    },
    {
        "number": 4208,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n\n    color_count = {}\n    for i in range(n):\n        for j in range(i+1, n):\n            if l[i] == l[j] or l[i] == '?' or l[j] == '?':\n                if l[i] == '?':\n                    l_color = r[i]\n                else:\n                    l_color = l[i]\n                if r[j] == '?':\n                    r_color = l[j]\n                else:\n                    r_color = r[j]\n                if (l_color, r_color) not in color_count:\n                    color_count[(l_color, r_color)] = 1\n                else:\n                    color_count[(l_color, r_color)] += 1\n            if r[i] == r[j] or r[i] == '?' or r[j] == '?':\n                if r[i] == '?':\n                    r_color = l[i]\n                else:\n                    r_color = r[i]\n                if l[j] == '?':\n                    l_color = r[j]\n                else:\n                    l_color = l[j]\n                if (l_color, r_color) not in color_count:\n                    color_count[(l_color, r_color)] = 1\n                else:\n                    color_count[(l_color, r_color)] += 1\n\n    pairs = []\n    for pair in color_count:\n        if color_count[pair] > 0:\n            pairs.append(pair)\n\n    pairs.sort(key=lambda x: (x[0]!= '?', x[1]!= '?', x[0], x[1]))\n    pairs.sort(key=lambda x: color_count[x], reverse=True)\n\n    result = ''\n    for pair in pairs:\n        if color_count[pair] > 0:\n            result += str(pair[0]) +'' + str(pair[1]) + '\\n'\n            color_count[pair] -= 1\n            break\n\n    return result.strip()"
    },
    {
        "number": 4208,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n    \n    # Initialize a 2D array to store the compatibility of each color pair\n    compatible = [[True for j in range(26)] for i in range(26)]\n    \n    # Mark indefinite colors as compatible with any color\n    for i in range(26):\n        compatible[i][i] = True\n    \n    # Mark compatible colors as compatible\n    for i in range(n):\n        if l[i]!= '?':\n            compatible[ord(l[i]) - ord('a')][ord(l[i]) - ord('a')] = True\n        if r[i]!= '?':\n            compatible[ord(r[i]) - ord('a')][ord(r[i]) - ord('a')] = True\n    \n    # Calculate the maximum number of compatible left-right pairs of boots\n    k = 0\n    for i in range(n):\n        if l[i]!= '?':\n            for j in range(n):\n                if r[j]!= '?':\n                    if compatible[ord(l[i]) - ord('a')][ord(r[j]) - ord('a')]:\n                        k += 1\n    \n    # Print the maximum number of compatible left-right pairs of boots\n    print(k)\n    \n    # Print the pairs themselves\n    pairs = []\n    for i in range(n):\n        if l[i]!= '?':\n            for j in range(n):\n                if r[j]!= '?':\n                    if compatible[ord(l[i]) - ord('a')][ord(r[j]) - ord('a')]:\n                        pairs.append((i, j))\n    \n    for pair in pairs:\n        print(pair[0] + 1, pair[1] + 1)\n    \n    return \"\""
    },
    {
        "number": 4208,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n\n    left_counts = [0] * 26\n    right_counts = [0] * 26\n\n    left_compatible = [[] for _ in range(26)]\n    right_compatible = [[] for _ in range(26)]\n\n    for i in range(n):\n        if l[i]!= '?':\n            left_counts[ord(l[i]) - ord('a')] += 1\n            for j in range(26):\n                if l[i] == chr(ord('a') + j):\n                    left_compatible[j].append(i)\n        if r[i]!= '?':\n            right_counts[ord(r[i]) - ord('a')] += 1\n            for j in range(26):\n                if r[i] == chr(ord('a') + j):\n                    right_compatible[j].append(i)\n\n    pairs = []\n    max_pairs = 0\n    for i in range(26):\n        for j in range(26):\n            if left_counts[i] > 0 and right_counts[j] > 0:\n                compatible = True\n                for k in range(n):\n                    if k!= left_compatible[i][0] and k!= left_compatible[i][1]:\n                        if k!= right_compatible[j][0] and k!= right_compatible[j][1]:\n                            if l[k]!= '?' and l[k]!= chr(ord('a') + i):\n                                compatible = False\n                                break\n                            if r[k]!= '?' and r[k]!= chr(ord('a') + j):\n                                compatible = False\n                                break\n                if compatible:\n                    pairs.append((left_compatible[i][0], right_compatible[j][0]))\n                    left_counts[i] -= 1\n                    right_counts[j] -= 1\n                    max_pairs += 1\n\n    if max_pairs == 0:\n        return '0'\n\n    print(max_pairs)\n    for i in range(max_pairs):\n        print(pairs[i][0], pairs[i][1])\n\n    return ''\n"
    },
    {
        "number": 4208,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n\n    # Initialize dp array\n    dp = [[False] * n for _ in range(n)]\n\n    # Fill in dp array\n    for i in range(n):\n        for j in range(i, n):\n            if l[i]!= '?' and r[j]!= '?' and l[i]!= r[j]:\n                continue\n            elif l[i] == '?' and r[j] == '?':\n                dp[i][j] = True\n            elif l[i] == '?':\n                dp[i][j] = dp[i][j-1] or dp[i+1][j]\n            elif r[j] == '?':\n                dp[i][j] = dp[i][j-1] or dp[i][j-1]\n            else:\n                dp[i][j] = dp[i-1][j] and dp[i+1][j]\n\n    # Find max compatible pairs\n    max_pairs = 0\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if dp[i][j]:\n                for k in range(i+1, n):\n                    for l in range(j+1, n):\n                        if dp[k][l]:\n                            pairs.append((i, j))\n                            max_pairs += 1\n                            break\n                    else:\n                        continue\n                    break\n\n    # Print max compatible pairs\n    print(max_pairs)\n    for pair in pairs:\n        print(pair[0]+1, pair[1]+1)\n\n    return \"\""
    },
    {
        "number": 4209,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    dp = [[False for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][i] = True\n    for i in range(n+1):\n        for j in range(i):\n            if a[j] == a[i]:\n                dp[j][i] = dp[j+1][i-1]\n            elif a[j] < a[i]:\n                dp[j][i] = dp[j+1][i]\n            else:\n                dp[j][i] = dp[j][i-1]\n    ans = set()\n    for i in range(n+1):\n        for j in range(i):\n            if dp[j][i] and (j, i) not in ans:\n                ans.add((j, i))\n    k = len(ans)\n    print(k)\n    for l, r in ans:\n        print(l, r)\n    return \"\"\n\nstdin = \"7\\n4 1 2 2 1 5 3\"\nstdout = solution(stdin)\nprint(stdout)"
    },
    {
        "number": 4209,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n == 1:\n        return \"1\\n1 1\"\n    blocks = []\n    left = 0\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            blocks.append((left, i-1))\n            left = i\n    blocks.append((left, n-1))\n    k = len(blocks)\n    ans = []\n    for i in range(k):\n        for j in range(i+1, k):\n            if blocks[j][0] <= blocks[i][1] or blocks[i][0] <= blocks[j][1]:\n                continue\n            if a[blocks[i][0]:blocks[i][1]+1]!= a[blocks[j][0]:blocks[j][1]+1]:\n                ans.append((blocks[i], blocks[j]))\n    k = len(ans)\n    if k == 0:\n        return f\"{k}\\n\" + \"\\n\".join(str(block[0]) + \" \" + str(block[1]) for block in blocks)\n    else:\n        return f\"{k}\\n\" + \"\\n\".join(str(block[0]) + \" \" + str(block[1]) for block in ans[0])\n\nstdin = \"7\\n4 1 2 2 1 5 3\"\nprint(solution(stdin)) # Output: 3\\n7 7\\n2 3\\n4 5\\n\n\nstdin = \"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\"\nprint(solution(stdin)) # Output: 2\\n3 4\\n1 1\\n\n\nstdin = \"4\\n1 1 1 1\"\nprint(solution(stdin)) # Output: 4\\n4 4\\n1 1\\n2 2\\n3 3\\n"
    },
    {
        "number": 4209,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    blocks = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] == 0:\n                blocks.append((i, j))\n                \n    k = len(blocks)\n    \n    if k == 0:\n        return \"0\"\n    \n    result = \"\"\n    for block in blocks:\n        result += f\"{block[0]+1} {block[1]+1}\\n\"\n        \n    return f\"{k}\\n{result}\""
    },
    {
        "number": 4209,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a_sum = sum(a)\n    k = 0\n    blocks = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(a[i:j+1]) == a_sum:\n                blocks.append((i, j))\n                k += 1\n                if k == n:\n                    break\n        if k == n:\n            break\n    return str(k) + '\\n' + '\\n'.join([' '.join(map(str, block)) for block in blocks])"
    },
    {
        "number": 4209,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    k = 0\n    blocks = []\n    for i in range(n):\n        if a[i]!= 0:\n            l = i\n            r = i\n            while r + 1 < n and a[r+1] == a[i]:\n                r += 1\n            k += 1\n            blocks.append((l, r))\n    if k == n:\n        return f\"{n}\\n\" + \"\\n\".join(f\"{l} {r}\" for l, r in blocks)\n    else:\n        return \"No solution\"\n\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    blocks = []\n    block_sum = sum(a)\n    max_blocks = n\n    block_start = block_end = 0\n\n    # Loop through the array\n    for i in range(n):\n        # Add current element to block\n        block_sum += a[i]\n\n        # Check if current block is valid\n        if block_sum == block_sum * max_blocks:\n            # Add block to list of blocks\n            blocks.append((block_start, i))\n\n            # Update max_blocks if needed\n            max_blocks = i - block_start + 1\n\n            # Reset block variables\n            block_sum = sum(a[i+1:])\n            block_start = i + 1\n\n    # Check if there are any valid blocks\n    if not blocks:\n        # No valid blocks found\n        return \"0\"\n\n    # Print number of valid blocks\n    print(len(blocks))\n\n    # Print blocks in sorted order\n    for l, r in sorted(blocks):\n        print(l, r)\n\n    return \"\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    blocks = []\n    block_start = 0\n    block_end = 0\n    block_sum = a[0]\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            block_end += 1\n        else:\n            blocks.append((block_start, block_end))\n            block_start = i\n            block_end = i\n            block_sum = a[i]\n    blocks.append((block_start, block_end))\n\n    k = len(blocks)\n    if k == 1:\n        print(k)\n        print(*blocks[0])\n        return\n\n    possible = True\n    for i in range(k):\n        for j in range(i+1, k):\n            if blocks[i][1] >= blocks[j][0]:\n                possible = False\n                break\n        if not possible:\n            break\n\n    if possible:\n        print(k)\n        for block in blocks:\n            print(*block)\n    else:\n        print(-1)\n\n    return"
    },
    {
        "number": 4209,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    # Preprocessing\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + a[i - 1]\n    # DP\n    dp = [[0] * n for _ in range(n)]\n    for length in range(1, n):\n        for i in range(n - length):\n            j = i + length\n            dp[i][j] = prefix_sum[j + 1] - prefix_sum[i]\n    # Find maximum sum\n    max_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if dp[i][j] > max_sum:\n                max_sum = dp[i][j]\n    # Find maximum number of blocks\n    max_num_blocks = 0\n    for length in range(1, n):\n        for i in range(n - length):\n            j = i + length\n            num_blocks = 1\n            for k in range(i + 1, j):\n                if dp[i][k] + dp[k][j] == max_sum:\n                    num_blocks += 1\n            if num_blocks > max_num_blocks:\n                max_num_blocks = num_blocks\n    # Find blocks\n    blocks = []\n    for length in range(1, n):\n        for i in range(n - length):\n            j = i + length\n            if dp[i][j] == max_sum:\n                blocks.append((i + 1, j))\n    return str(max_num_blocks) + '\\n' + '\\n'.join(map(str, blocks)) + '\\n'"
    },
    {
        "number": 4209,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    \n    # build prefix sum array\n    prefix_sum = [0] * (n+1)\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + a[i-1]\n    \n    # build suffix sum array\n    suffix_sum = [0] * (n+1)\n    for i in range(n-1, -1, -1):\n        suffix_sum[i] = suffix_sum[i+1] + a[i]\n    \n    # initialize answer set\n    blocks = []\n    \n    # scan array from left to right\n    for l in range(1, n):\n        # check for intersection with previous block\n        if prefix_sum[l] == prefix_sum[l-1]:\n            continue\n        # scan array from right to left\n        for r in range(n-1, l-1, -1):\n            # check for intersection with previous block\n            if prefix_sum[r] - prefix_sum[l-1] == prefix_sum[n] - prefix_sum[r+1]:\n                continue\n            # check for intersection with suffix sum\n            if suffix_sum[l-1] == suffix_sum[r]:\n                continue\n            # check for sum equality\n            if prefix_sum[r] - prefix_sum[l]!= prefix_sum[n] - prefix_sum[l]:\n                continue\n            # add block to answer set\n            blocks.append((l, r))\n            break\n    \n    # print answer\n    print(len(blocks))\n    for block in blocks:\n        print(*block)"
    },
    {
        "number": 4209,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # Initialize variables\n    k = 0\n    blocks = []\n\n    # Find the first block\n    i = 0\n    while i < n:\n        l = i\n        r = i + 1\n        while r < n and a[r] == a[l]:\n            r += 1\n        blocks.append((l, r-1))\n        i = r\n\n    # Count the number of blocks\n    k = len(blocks)\n\n    # Find all other blocks\n    for i in range(k):\n        for j in range(i+1, k):\n            l = max(blocks[i][0], blocks[j][0])\n            r = min(blocks[i][1], blocks[j][1])\n            if r < l:\n                continue\n            intersect = blocks[i][0] <= blocks[j][1] and blocks[j][0] <= blocks[i][1]\n            if not intersect:\n                blocks.append((l, r))\n                k += 1\n\n    # Output the result\n    print(k)\n    for block in blocks:\n        print(block[0], block[1])\n"
    },
    {
        "number": 4210,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] * a[j]) % k == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4210,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.readline().split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i]*a[j]) % k == 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 4210,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    \n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if (a[i] * a[j]) % k == 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 4210,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i]*a[j]) % k == 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4210,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # count pairs\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] * a[j]) % k == 0:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4210,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] * a[j]) % k == 0:\n                count += 1\n                \n    return count\n\nprint(solution(\"6 11\\n45 1 10 12 11 7\")) # Output: 7\nprint(solution(\"4 2\\n2 78 4 10\")) # Output: 12\nprint(solution(\"5 2\\n3 7 19 3 3\")) # Output: 0"
    },
    {
        "number": 4210,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    \n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] * a[j]) % k == 0:\n                count += 1\n                \n    return str(count)"
    },
    {
        "number": 4210,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    \n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % k == 0:\n                count += 1\n    \n    return count\n    \n"
    },
    {
        "number": 4210,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i]*10 + a[j]) % k == 0:\n                count += 1\n    return count"
    },
    {
        "number": 4210,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] * a[j]) % k == 0:\n                count += 1\n    return count"
    },
    {
        "number": 4211,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    B = list(map(int, stdin.readline().strip().split()))\n\n    # calculate maximum possible sum of A\n    A = [B[0]]\n    for i in range(1, N-1):\n        A.append(max(A[i-1], B[i]))\n    A.append(B[-1])\n\n    # calculate sum of A\n    sum_A = sum(A)\n\n    return str(sum_A)"
    },
    {
        "number": 4211,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    B = list(map(int, stdin.readline().strip().split()))\n    \n    A = [0]*N\n    A[0] = B[0]\n    A[1] = max(B[0], B[1])\n    for i in range(2, N):\n        A[i] = max(A[i-1], B[i-1] + A[i-2])\n        \n    return str(A[N-1])\n\nprint(solution(input())) # expected output: 9"
    },
    {
        "number": 4211,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = [int(x) for x in stdin.split()[1:]]\n    a = [b[0]] + [max(b[i], b[i+1]) for i in range(n-1)]\n    return str(sum(a))"
    },
    {
        "number": 4211,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    B = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    A = [0] * N\n    A[0] = B[0]\n    A[1] = max(B[0], B[1])\n    max_sum = max(A[0], A[1])\n\n    # Fill in A array\n    for i in range(2, N):\n        A[i] = max(A[i-1], A[i-2] + B[i-1])\n        max_sum = max(max_sum, A[i])\n\n    # Print solution\n    return str(max_sum)"
    },
    {
        "number": 4211,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    B = list(map(int, stdin.split()[1:]))\n    A = [0] * N\n    A[0] = B[0]\n    A[-1] = B[-1]\n    for i in range(1, N-1):\n        A[i] = max(B[i-1], A[i-1])\n    return max(A)"
    },
    {
        "number": 4211,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline())\n    B = list(map(int, stdin.readline().split()))\n    \n    # Initialize A to all zeros\n    A = [0] * N\n    \n    # Initialize the first element of A\n    A[0] = B[0]\n    \n    # Fill A with the maximum of the current and next element of B\n    for i in range(1, N):\n        A[i] = max(B[i-1], B[i])\n    \n    # Initialize the maximum possible sum\n    max_sum = A[0]\n    \n    # Iterate over all possible contiguous subsequences of A\n    for i in range(1, N):\n        for j in range(i, N):\n            # Calculate the sum of the subsequence\n            sub_sum = sum(A[i:j+1])\n            # Update the maximum possible sum if necessary\n            if sub_sum > max_sum:\n                max_sum = sub_sum\n    \n    # Return the maximum possible sum\n    return str(max_sum)"
    },
    {
        "number": 4211,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    B = list(map(int, stdin.readline().strip().split()))\n    \n    # Initialize variables\n    A = [0] * N\n    \n    # Fill A with the maximum value of A_i and A_{i+1}\n    for i in range(N-1):\n        A[i] = max(A[i-1], B[i])\n    A[N-1] = B[N-2]\n    \n    # Compute the sum of A\n    s = sum(A)\n    \n    return str(s)"
    },
    {
        "number": 4211,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    max_b = max(b)\n    a = [0] * n\n    a[0] = b[0]\n    for i in range(1, n):\n        a[i] = max(a[i-1], b[i-1]) + b[i]\n    return str(max(a))"
    },
    {
        "number": 4211,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    a = [b[i-1] if i==1 else max(b[i-1], a[i-2]) for i in range(1, n+1)]\n    return str(sum(a))\n\nprint(solution(\"\"\"3\n2 5\"\"\")) # Output: 9"
    },
    {
        "number": 4211,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline())\n    B = list(map(int, stdin.readline().split()))\n\n    # initialize variables\n    A = [0] * N\n    A[0] = B[0]\n    A[1] = max(B[0], B[1])\n    for i in range(2, N):\n        A[i] = max(A[i-1], B[i-1] + A[i-2])\n\n    # print output\n    print(A[-1])"
    },
    {
        "number": 4212,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M, Q = map(int, stdin.readline().split())\n    a, b, c, d = [], [], [], []\n    for i in range(Q):\n        a_i, b_i, c_i, d_i = map(int, stdin.readline().split())\n        a.append(a_i), b.append(b_i), c.append(c_i), d.append(d_i)\n    \n    # preprocess\n    dp = [[0]*(N+1) for _ in range(M+1)]\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            if i == 1:\n                dp[j][i] = dp[j-1][i] + d[0] if j-1 >= 1 and j-1 <= M else dp[j][i-1]\n            else:\n                dp[j][i] = max(dp[j-1][i], dp[j][i-1]) + d[0] if j-1 >= 1 and j-1 <= M else max(dp[j][i-1], dp[j-1][i])\n    \n    # compute score of each sequence\n    max_score = 0\n    for i in range(Q):\n        score = dp[b[i]][a[i]] - dp[b[i]][a[i]-1] if a[i]-1 >= 1 else dp[b[i]][a[i]]\n        if score > max_score:\n            max_score = score\n    \n    return str(max_score)"
    },
    {
        "number": 4212,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M, Q = map(int, stdin.readline().strip().split())\n    quadruples = []\n    for i in range(Q):\n        a, b, c, d = map(int, stdin.readline().strip().split())\n        quadruples.append((a, b, c, d))\n    \n    # Compute the maximum possible score\n    max_score = 0\n    for q in quadruples:\n        a, b, c, d = q\n        if b - a == c:\n            max_score += d\n    return str(max_score)"
    },
    {
        "number": 4212,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, M, Q = map(int, stdin.readline().split())\n    A = [0] * N\n    for i in range(Q):\n        a, b, c, d = map(int, stdin.readline().split())\n        A[a-1] = max(A[a-1], b)\n        A[b-1] = max(A[b-1], a)\n    # compute score\n    score = 0\n    for i in range(Q):\n        a, b, c = map(int, stdin.readline().split())\n        if A[b-1] - A[a-1] == c:\n            score += d\n    # print result\n    return str(score)"
    },
    {
        "number": 4212,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m, q = map(int, stdin.readline().split())\n    quadruples = []\n    for _ in range(q):\n        a, b, c, d = map(int, stdin.readline().split())\n        quadruples.append((a, b, c, d))\n\n    # Calculate score for each possible sequence\n    max_score = 0\n    for i in range(1, m+1):\n        # Check if sequence is valid\n        if i < n and quadruples[0][0] > i:\n            continue\n        if i > n and quadruples[0][0] > n:\n            continue\n        if any(a[0] > i or a[1] > i for a in quadruples):\n            continue\n        # Calculate score\n        score = sum(d for a, b, c, d in quadruples if a <= i <= b and b - a == c)\n        max_score = max(max_score, score)\n\n    return str(max_score)"
    },
    {
        "number": 4212,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.readline().strip().split())\n    pairs = [tuple(map(int, stdin.readline().strip().split())) for _ in range(q)]\n    A = [i+1 for i in range(n)]\n    scores = [0]*q\n    for i, pair in enumerate(pairs):\n        a, b, c = pair\n        j = bisect_left(A, a)\n        if j == n or A[j]!= a:\n            continue\n        k = bisect_left(A, b+1)\n        score = sum(d for _, _, _, d in pairs if _ <= a and a <= b and _ < b)\n        scores[i] = max(scores[i], score + c)\n    return max(scores)\n\nfrom bisect import bisect_left"
    },
    {
        "number": 4212,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.readline().strip().split())\n    A = []\n    for _ in range(Q):\n        a, b, c, d = map(int, stdin.readline().strip().split())\n        A.append((a, b, c, d))\n    A = sorted(A, key=lambda x: x[1]-x[0])\n    ans = 0\n    for i in range(Q):\n        a, b, c, d = A[i]\n        for j in range(i+1, Q):\n            a_, b_, c_, d_ = A[j]\n            if b_ <= a_ < b:\n                ans += d_\n                break\n    return str(ans)"
    },
    {
        "number": 4212,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    N, M, Q = map(int, lines[0].split())\n    quadruples = list(map(int, lines[1:]))\n    assert len(quadruples) == Q\n    a, b, c, d = zip(*[quadruples[i:i+4] for i in range(0, Q*4, 4)])\n    a = list(a)\n    b = list(b)\n    c = list(c)\n    d = list(d)\n\n    # Define variables\n    dp = [[0]*(M+1) for _ in range(N+1)]\n\n    # Fill dp table\n    for i in range(N):\n        for j in range(a[i], b[i]+1):\n            for k in range(max(1, dp[i][j-1]), min(M, dp[i][j])+1):\n                dp[i+1][j] = max(dp[i+1][j], dp[i][j-1]+(k-j)*c[i]+d[i])\n\n    # Find maximum score\n    score = 0\n    for i in range(1, N+1):\n        for j in range(a[-1], b[-1]+1):\n            if dp[i-1][j-1]!= 0:\n                score = max(score, dp[i-1][j-1])\n\n    # Return maximum score\n    return str(score)"
    },
    {
        "number": 4212,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.readline().strip().split())\n    A = [0] * N\n    for _ in range(Q):\n        a, b, c, d = map(int, stdin.readline().strip().split())\n        A[b-1] = max(A[b-1], A[a-1]+c)\n    return sum(d for i in range(Q) if A[A[i]-1]-A[i] == c)"
    },
    {
        "number": 4212,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.splitlines()\n    n, m, q = map(int, lines[0].split())\n    quaduples = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    # Initialize dp table\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Calculate dp table\n    for a, b, c, d in quaduples:\n        for i in range(a, b + 1):\n            for j in range(m, c - 1, -1):\n                dp[i][j] = max(dp[i][j], dp[a - 1][j - c] + d)\n\n    # Find maximum score\n    max_score = 0\n    for i in range(1, n + 1):\n        for j in range(m, 0, -1):\n            if dp[i][j] > max_score:\n                max_score = dp[i][j]\n                break\n\n    return str(max_score)"
    },
    {
        "number": 4212,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    input_list = stdin.split()\n    N = int(input_list[0])\n    M = int(input_list[1])\n    Q = int(input_list[2])\n\n    input_list = stdin.split('\\n')\n    input_list = input_list[1:]\n\n    # create a list of tuples (a,b,c,d) for each quadruple\n    quadruples = []\n    for line in input_list:\n        a, b, c, d = map(int, line.split())\n        quadruples.append((a, b, c, d))\n\n    # create a list to store the scores for each possible starting point\n    scores = [0] * (M + 1)\n\n    # calculate scores for each starting point\n    for a, b, c, d in quadruples:\n        scores[a] += d\n\n    # create a list to store the best scores for each ending point\n    best_scores = [0] * (M + 1)\n\n    # calculate best scores for each ending point\n    for a, b, c, d in quadruples:\n        best_scores[b] = max(best_scores[b], scores[a] + d)\n\n    # calculate the maximum possible score\n    max_score = 0\n    for i in range(1, N + 1):\n        max_score = max(max_score, best_scores[i])\n\n    return str(max_score)"
    },
    {
        "number": 4213,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(a[j] - a[i]) > max_diff:\n                max_diff = abs(a[j] - a[i])\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    max_diff = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(a[i] - a[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    max_diff = 0\n\n    # loop through all possible pairs of indices\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(a[j]-a[i])\n            if diff > max_diff:\n                max_diff = diff\n\n    # print output\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    A = list(map(int, lines[1].split()))\n\n    max_diff = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = abs(A[i] - A[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    max_diff = float('-inf')\n\n    # iterate over all pairs of elements in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # calculate absolute difference and update max_diff if necessary\n            diff = abs(a[i]-a[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    # print the maximum absolute difference\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    A_max = max(A)\n    A_min = min(A)\n    A_diff = A_max - A_min\n    for i in range(N):\n        for j in range(i+1, N):\n            if abs(A[i]-A[j]) > A_diff:\n                A_diff = abs(A[i]-A[j])\n    return str(A_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # Find maximum absolute difference\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(a[j]-a[i])\n            if diff > max_diff:\n                max_diff = diff\n    \n    # Output result\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    \n    # initialize variables\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(a[j] - a[i])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize the maximum difference variable\n    max_diff = float('-inf')\n\n    # Iterate through all possible pairs of elements and calculate their difference\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(a[i] - a[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return str(max_diff)"
    },
    {
        "number": 4213,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize max_diff as 0\n    max_diff = 0\n\n    # Iterate over all elements of the list\n    for i in range(n):\n        # Iterate over all elements after i\n        for j in range(i+1, n):\n            # Calculate absolute difference and update max_diff\n            diff = abs(a[i]-a[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    # Return the maximum absolute difference\n    return str(max_diff)"
    },
    {
        "number": 4214,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    towns = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        towns.append((x, y))\n    # compute distances\n    distances = []\n    for i in range(n):\n        for j in range(i+1, n):\n            dx, dy = towns[i]\n            ex, ey = towns[j]\n            distance = (dx - ex)**2 + (dy - ey)**2\n            distances.append(distance)\n    # compute average length\n    paths = 1\n    for i in range(n):\n        paths *= n-i\n    total_length = sum(distances)\n    average_length = total_length / paths\n    return f\"{average_length:.6f}\""
    },
    {
        "number": 4214,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    points = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    routes = []\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = ((points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2) ** 0.5\n            routes.append(distance)\n    return str(sum(routes) / len(routes))"
    },
    {
        "number": 4214,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    x = []\n    y = []\n    for i in range(N):\n        x_i, y_i = map(int, stdin.readline().split())\n        x.append(x_i)\n        y.append(y_i)\n    dist = [[0 for i in range(N)] for j in range(N)]\n    for i in range(N):\n        for j in range(i+1, N):\n            dist[i][j] = ((x[i]-x[j])**2 + (y[i]-y[j])**2)**0.5\n    ans = 0\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                ans += dist[i][j]\n    return str(ans/((N*(N-1))//2))\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    towns = []\n    for i in range(1, N+1):\n        x, y = map(int, lines[i].split())\n        towns.append((x, y))\n    \n    distances = []\n    for i in range(N):\n        for j in range(i+1, N):\n            dx = towns[j][0] - towns[i][0]\n            dy = towns[j][1] - towns[i][1]\n            distances.append(((dx**2 + dy**2)**0.5, i, j))\n    \n    distances.sort()\n    paths = set()\n    path = []\n    for dist, i, j in distances:\n        path.append((i, j))\n        if len(path) == N:\n            paths.add(tuple(path))\n            path = []\n    \n    path_lengths = []\n    for path in paths:\n        length = 0\n        for i in range(N-1):\n            dx = towns[path[i+1]][0] - towns[path[i]][0]\n            dy = towns[path[i+1]][1] - towns[path[i]][1]\n            length += (dx**2 + dy**2)**0.5\n        path_lengths.append(length)\n    \n    return str(sum(path_lengths) / len(path_lengths))\n\nwith open(\"input.txt\", \"r\") as f:\n    stdin = f.read()\n\nprint(solution(stdin))"
    },
    {
        "number": 4214,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    coordinates = [tuple(map(int, line.split())) for line in lines[1:]]\n\n    paths = [(0,)]\n    for i in range(n):\n        new_paths = []\n        for path in paths:\n            for j in range(i+1, n):\n                new_path = path + (j,)\n                new_paths.append(new_path)\n        paths = paths + new_paths\n\n    distances = [0]\n    for i in range(1, n+1):\n        for path in paths:\n            if i in path:\n                j = path.index(i)\n                if j == 0:\n                    distance = np.sqrt((coordinates[i-1][0]-coordinates[0][0])**2 + (coordinates[i-1][1]-coordinates[0][1])**2)\n                else:\n                    distance = distances[j-1] + np.sqrt((coordinates[i-1][0]-coordinates[path[j-1]-1][0])**2 + (coordinates[i-1][1]-coordinates[path[j-1]-1][1])**2)\n                distances.append(distance)\n                break\n\n    total_distance = sum(distances)\n    average_distance = total_distance / (n * math.factorial(n))\n\n    return str(average_distance)"
    },
    {
        "number": 4214,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    x_y = [(int(x), int(y)) for x, y in (line.strip().split() for line in stdin)]\n    dist = [[0] * N for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            dist[i][j] = ((x_y[i][0]-x_y[j][0])**2+(x_y[i][1]-x_y[j][1])**2)**0.5\n    ans = 0\n    for i in range(N):\n        for j in range(N):\n            ans += dist[i][j]\n    ans /= N*(N-1)//2\n    return str(ans)\n\nprint(solution(\"3\\n0 0\\n1 0\\n0 1\\n\")) # Output: 2.2761423749"
    },
    {
        "number": 4214,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline())\n    towns = []\n    for _ in range(N):\n        x, y = map(int, stdin.readline().split())\n        towns.append((x, y))\n\n    # compute distances between all pairs of towns\n    distances = [[0] * N for _ in range(N)]\n    for i in range(N):\n        for j in range(i+1, N):\n            x1, y1 = towns[i]\n            x2, y2 = towns[j]\n            distances[i][j] = distances[j][i] = ((x1-x2)**2 + (y1-y2)**2) ** 0.5\n\n    # compute paths and average length\n    paths = []\n    for i in range(N):\n        for j in range(i+1, N):\n            path = [i]\n            k = j\n            while k!= i:\n                path.append(k)\n                k = min(range(N), key=lambda x: distances[path[-1]][x])\n            path.append(i)\n            paths.append(path)\n    avg_length = sum(sum(distances[path[i]][path[i+1]] for i in range(len(path)-1)) for path in paths) / len(paths)\n\n    # format output\n    return f\"{avg_length:.6f}\""
    },
    {
        "number": 4214,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline())\n    coordinates = [tuple(map(int, stdin.readline().strip().split())) for _ in range(N)]\n\n    # calculate distance between all pairs of towns\n    distances = [[((coordinates[i][0]-coordinates[j][0])**2 + (coordinates[i][1]-coordinates[j][1])**2)**0.5 for j in range(N)] for i in range(N)]\n\n    # calculate all possible paths\n    paths = [sum(distances[i][j] for j in range(N)) for i in range(N)]\n\n    # calculate average path length\n    average_path_length = sum(paths) / len(paths)\n\n    return str(average_path_length)"
    },
    {
        "number": 4214,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    coordinates = []\n    for i in range(N):\n        x, y = map(int, stdin.readline().split())\n        coordinates.append((x, y))\n    \n    total_distance = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            total_distance += ((coordinates[i][0] - coordinates[j][0])**2 + (coordinates[i][1] - coordinates[j][1])**2) ** 0.5\n    \n    return str(total_distance / (N*(N-1)//2))"
    },
    {
        "number": 4214,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    num_towns = int(stdin.readline().strip())\n    towns = []\n    for i in range(num_towns):\n        x, y = map(int, stdin.readline().strip().split())\n        towns.append((x, y))\n\n    # Compute distances between all pairs of towns\n    distances = [[0] * num_towns for _ in range(num_towns)]\n    for i in range(num_towns):\n        for j in range(num_towns):\n            distances[i][j] = ((towns[i][0] - towns[j][0]) ** 2 + (towns[i][1] - towns[j][1]) ** 2) ** 0.5\n\n    # Compute total distance\n    total_distance = 0\n    for i in range(num_towns):\n        for j in range(num_towns):\n            total_distance += distances[i][j]\n\n    # Compute average distance\n    avg_distance = total_distance / (num_towns ** 2)\n\n    # Format output\n    return f\"{avg_distance:.6f}\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    uncovered_length = A - 2 * B\n    print(uncovered_length)\n    return str(uncovered_length)"
    },
    {
        "number": 4215,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A - 2 * B)"
    },
    {
        "number": 4215,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A - 2 * B)\n\nprint(solution(\"12 4\"))"
    },
    {
        "number": 4215,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    total_length = A - B * 2\n    print(total_length)\n\nstdin = input()\nsolution(stdin)"
    },
    {
        "number": 4215,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a - 2*b)"
    },
    {
        "number": 4215,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(max(0, A - B))"
    },
    {
        "number": 4215,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    return str(A - 2*B)  # since we can cover both ends with one curtain, and the uncovered part is the difference between A and twice the length of the curtain."
    },
    {
        "number": 4215,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A - 2 * B)"
    },
    {
        "number": 4215,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    uncovered_length = A - 2 * B\n    print(uncovered_length)\n    return str(uncovered_length)"
    },
    {
        "number": 4215,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input to integers\n    A, B = map(int, stdin.strip().split())\n    # Calculate the total length of the uncovered part\n    uncovered = (A - 2*B) // 2\n    # Return the total length of the uncovered part\n    return str(uncovered)"
    },
    {
        "number": 4216,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.strip())\n\n    # initialize minimum value\n    min_val = float('inf')\n\n    # iterate over all pairs of integers\n    for A in range(1, int(N**0.5)+1):\n        if N % A == 0:\n            B = N // A\n            if B < A:\n                continue\n            # calculate F(A,B)\n            f_val = max(len(str(A)), len(str(B)))\n            # update minimum value\n            if f_val < min_val:\n                min_val = f_val\n\n    # print minimum value\n    return str(min_val)"
    },
    {
        "number": 4216,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_value = float('inf')\n    for a in range(2, n+1):\n        for b in range(2, n+1):\n            if a * b == n:\n                f_value = max(len(str(a)), len(str(b)))\n                if f_value < min_value:\n                    min_value = f_value\n    return str(min_value)\n\nprint(solution(input()))"
    },
    {
        "number": 4216,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_value = float('inf')\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i * j == n:\n                f = max(len(str(i)), len(str(j)))\n                if f < min_value:\n                    min_value = f\n    return str(min_value)"
    },
    {
        "number": 4216,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_f = float('inf')\n    for a in range(2, n//2+1):\n        b = n//a\n        f = max(len(str(a)), len(str(b)))\n        if f < min_f:\n            min_f = f\n    return str(min_f)"
    },
    {
        "number": 4216,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    min_val = n\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            a = i\n            b = n // i\n            if a * b == n and len(str(a)) > len(str(b)):\n                min_val = min(min_val, len(str(a)), len(str(b)))\n    return str(min_val)"
    },
    {
        "number": 4216,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    min_val = float('inf')\n    for i in range(1, n+1):\n        if n % i == 0:\n            a, b = i, n//i\n            if b > a:\n                a, b = b, a\n            f_val = len(str(a)) + len(str(b))\n            if f_val < min_val:\n                min_val = f_val\n    return str(min_val)\n\nprint(solution(input()))"
    },
    {
        "number": 4216,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_val = float('inf')\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*j == n:\n                if max(len(str(i)), len(str(j))) > min_val:\n                    continue\n                min_val = max(len(str(i)), len(str(j)))\n    return str(min_val)"
    },
    {
        "number": 4216,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N = int(stdin)\n\n    # Initialize variables\n    min_F = float('inf')\n    max_A = 1000000\n    max_B = 1000000\n\n    # Loop through all pairs of A and B\n    for A in range(1, max_A+1):\n        for B in range(1, max_B+1):\n            # Check if N is divisible by A and B\n            if N % A == 0 and N % B == 0:\n                # Calculate F(A,B)\n                F = max(len(str(A)), len(str(B)))\n                # Update minimum value of F\n                if F < min_F:\n                    min_F = F\n\n    return str(min_F)\n"
    },
    {
        "number": 4216,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    min_f = N+1\n    for A in range(1, N+1):\n        for B in range(1, N+1):\n            if A*B == N:\n                f = max(len(str(A)), len(str(B)))\n                if f < min_f:\n                    min_f = f\n    return str(min_f)"
    },
    {
        "number": 4216,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    min_val = float('inf')\n    for i in range(2, int(N ** 0.5) + 1):\n        if N % i == 0:\n            a = N // i\n            b = i\n            if a >= b:\n                min_val = min(min_val, max(len(str(a)), len(str(b))))\n            else:\n                min_val = min(min_val, max(len(str(b)), len(str(a))))\n    return str(min_val)"
    },
    {
        "number": 4217,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.readline().split())\n    likes = []\n    for _ in range(n):\n        k, *a = map(int, stdin.readline().split())\n        likes.append(a)\n\n    # count the number of foods liked by all n people\n    count = set()\n    for a in likes:\n        count.intersection_update(a)\n\n    # return the result\n    return str(len(count))"
    },
    {
        "number": 4217,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.strip().split('\\n')\n    N, M = map(int, lines[0].split())\n    likes = [list(map(int, lines[i].split())) for i in range(1, N+1)]\n    # count number of likes for each food\n    count = [0] * M\n    for liked in likes:\n        for l in liked:\n            count[l-1] += 1\n    # count number of foods liked by all people\n    result = sum(1 for c in count if c == N)\n    return str(result)"
    },
    {
        "number": 4217,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, m = map(int, stdin.readline().split())\n    foods = []\n    for i in range(n):\n        k = int(stdin.readline().strip())\n        liked_foods = list(map(int, stdin.readline().strip().split()))\n        foods.append(liked_foods)\n\n    # find common liked foods\n    common_foods = set(foods[0][:k])\n    for i in range(1, n):\n        common_foods &= set(foods[i][:k])\n\n    # count common liked foods\n    count = len(common_foods)\n\n    return str(count)\n"
    },
    {
        "number": 4217,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    likes = [set() for _ in range(N)]\n    for i in range(N):\n        K, *A = map(int, stdin.readline().split())\n        for j in range(K):\n            likes[i].add(A[j])\n    count = set.intersection(*likes)\n    return str(len(count))"
    },
    {
        "number": 4217,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    N, M = map(int, stdin.split())\n    A = []\n    for i in range(N):\n        K, *foods = map(int, stdin.split())\n        A.append(foods)\n    # Find the number of foods liked by all N people\n    count = 0\n    for foods in A:\n        for i in range(M):\n            if foods[i] == 1:\n                count += 1\n                break\n    return str(count)"
    },
    {
        "number": 4217,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.split())\n    likes = []\n    for _ in range(N):\n        K_i, *A_i = map(int, stdin.split())\n        likes.append(A_i)\n\n    # Count number of likes\n    num_likes = sum(1 for i in range(M) if all(i in likes[j] for j in range(N)))\n\n    # Return result\n    return str(num_likes)"
    },
    {
        "number": 4217,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.split())\n    liked = [set() for _ in range(N)]\n    for i in range(N):\n        K, *A = map(int, stdin.split())\n        for j in range(K):\n            liked[i].add(A[j])\n\n    # count intersection of all liked sets\n    result = set.intersection(*liked)\n\n    return str(len(result))"
    },
    {
        "number": 4217,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    n, m = map(int, stdin.readline().strip().split())\n    likes = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n\n    # Find the common foods liked by all the people\n    common_foods = set(likes[0][:likes[0][0]])\n    for i in range(1, n):\n        common_foods.intersection_update(set(likes[i][:likes[i][0]]))\n\n    # Find the count of common foods\n    count = sum(1 for food in range(m) if food in common_foods)\n\n    return str(count)"
    },
    {
        "number": 4217,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    num_people, num_foods = map(int, lines[0].split())\n\n    people_likes = []\n    for i in range(1, num_people+1):\n        likes = list(map(int, lines[i].split()))\n        people_likes.append(likes)\n\n    common_likes = set(people_likes[0])\n    for likes in people_likes:\n        common_likes &= set(likes)\n\n    return str(len(common_likes))"
    },
    {
        "number": 4217,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, M = map(int, lines[0].split())\n    A = [list(map(int, lines[i].split())) for i in range(1, N+1)]\n    \n    cnt = sum(1 for row in A if all(x in row for x in range(1, M+1)))\n    return str(cnt)\n\nprint(solution(\"\"\"3 4\n2 1 3\n3 1 2 3\n2 3 2\"\"\"))\n"
    },
    {
        "number": 4218,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    for i in range(1, N+1):\n        if i % 2 == 1:\n            count += 1\n    return f\"{count/N:.8f}\""
    },
    {
        "number": 4218,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    odd_count = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            odd_count += 1\n    return \"{:.8f}\".format(odd_count / n)"
    },
    {
        "number": 4218,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    odd_count = 0\n    for num in range(1, N+1):\n        if num % 2 == 1:\n            odd_count += 1\n    return str(odd_count / N)"
    },
    {
        "number": 4218,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n\n    # count odd numbers from 1 to N\n    count = 0\n    for i in range(1, N+1):\n        if i % 2 == 1:\n            count += 1\n    \n    # calculate probability\n    probability = count / N\n    \n    # print result\n    return f\"{probability:.10f}\""
    },
    {
        "number": 4218,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    odd_count = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            odd_count += 1\n    return str(odd_count/n)\n\nprint(solution(input()))"
    },
    {
        "number": 4218,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    prob = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            prob += 1\n    return str(prob/n)"
    },
    {
        "number": 4218,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            count += 1\n    return str(count/n)"
    },
    {
        "number": 4218,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    prob = 1/2\n    return f\"{prob:.10f}\""
    },
    {
        "number": 4218,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count_odd = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            count_odd += 1\n    return str(count_odd / n)"
    },
    {
        "number": 4218,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.strip())\n\n    # Calculate probability\n    odd_count = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            odd_count += 1\n    prob = odd_count / n\n\n    # Write output\n    return f\"{prob:.10f}\""
    },
    {
        "number": 4219,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    N = int(stdin.readline().strip())\n    testimony_counts = [int(stdin.readline().strip()) for _ in range(N)]\n    testimonies = []\n    for i in range(N):\n        person_testimonies = []\n        for j in range(testimony_counts[i]):\n            x, y = map(int, stdin.readline().strip().split())\n            person_testimonies.append((x, y))\n        testimonies.append(person_testimonies)\n\n    # Finding possible valid sets of honest persons\n    possible_sets = []\n    for i in range(2 ** N):\n        set_of_honest_persons = set()\n        for j in range(N):\n            if (i >> j) & 1:\n                set_of_honest_persons.add(j + 1)\n        is_valid = True\n        for testimony in testimonies:\n            for x, y in testimony:\n                if x in set_of_honest_persons and y == 0:\n                    is_valid = False\n                    break\n            if not is_valid:\n                break\n        if is_valid:\n            possible_sets.append(set_of_honest_persons)\n\n    # Finding maximum possible number of honest persons\n    max_possible_honest_persons = 0\n    for set_of_honest_persons in possible_sets:\n        max_possible_honest_persons = max(max_possible_honest_persons, len(set_of_honest_persons))\n\n    return str(max_possible_honest_persons)"
    },
    {
        "number": 4219,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    k = 0\n    for i in range(1, n+1):\n        a = int(lines[i])\n        for j in range(a):\n            x, y = map(int, lines[i+j+1].split())\n            if y == 1:\n                k += 1\n            else:\n                k -= 1\n    return str(k)\n\nprint(solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\")) # Output: 2"
    },
    {
        "number": 4219,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    testimony_counts = [int(line) for line in lines[1:N+1]]\n    testimonies = []\n    for i in range(N):\n        testimony_line = lines[N+1+i].split()\n        for j in range(testimony_counts[i]):\n            x, y = (int(num) for num in testimony_line[2*j:2*(j+1)])\n            testimonies.append((i+1, x, y))\n\n    # Find the minimum number of honest persons\n    max_honest_count = 0\n    for i in range(1, N+1):\n        honest_count = 0\n        for j in range(len(testimonies)):\n            if testimonies[j][0] == i and testimonies[j][2] == 1:\n                # Person i is honest\n                honest_count += 1\n                # Check if any unkind testimony of Person i contradicts it\n                for k in range(len(testimonies)):\n                    if testimonies[k][0] == i and testimonies[k][2] == 0 and testimonies[k][1] == testimonies[j][1]:\n                        # Testimony contradicts Person i's testimony\n                        break\n                else:\n                    # Testimony does not contradict Person i's testimony\n                    continue\n                # Person i is not an honest person\n                break\n        else:\n            # All testimonies of Person i are consistent with their testimony\n            max_honest_count = max(max_honest_count, honest_count)\n\n    return str(max_honest_count)"
    },
    {
        "number": 4219,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Input parsing\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    A = []\n    x = []\n    y = []\n    for i in range(1, N+1):\n        A_i, *testimonies_i = map(int, lines[i].split())\n        A.append(A_i)\n        for j in range(A_i):\n            x_ij, y_ij = testimonies_i[j*2], testimonies_i[j*2+1]\n            x.append(x_ij)\n            y.append(y_ij)\n\n    # Algorithm\n    n_honest = 0\n    for i in range(N):\n        is_honest = True\n        for j in range(A[i]):\n            if x[i*A[i]+j] == i+1 and y[i*A[i]+j] == 0:\n                is_honest = False\n                break\n        if is_honest:\n            n_honest += 1\n\n    return str(n_honest)"
    },
    {
        "number": 4219,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    testimonies = {}\n    for i in range(1, N+1):\n        A_i, *testimony = map(int, stdin.readline().split())\n        testimonies[i] = testimony\n    max_honest = 0\n    for i in range(1, N+1):\n        for j in range(i+1, N+1):\n            if testimonies[i][j-i] == 0:\n                continue\n            for k in range(j+1, N+1):\n                if testimonies[i][j-i] == 0 or testimonies[j][k-j] == 0 or testimonies[k][i-k] == 0:\n                    continue\n                if testimonies[i][j-i] == 1 and testimonies[j][k-j] == 1 and testimonies[k][i-k] == 1:\n                    max_honest += 1\n    return str(max_honest)"
    },
    {
        "number": 4219,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [int(stdin.readline().strip()) for _ in range(N)]\n    D = {}\n    for i in range(1, N + 1):\n        D[i] = set()\n    for i in range(1, N + 1):\n        for j in range(A[i - 1]):\n            x, y = map(int, stdin.readline().strip().split())\n            if y == 1:\n                D[i].add(x)\n            else:\n                D[i].discard(x)\n    ans = 0\n    for i in range(1, N + 1):\n        if len(D[i]) == 0:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 4219,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    A = [int(stdin.readline().strip()) for _ in range(N)]\n    y = [[int(x) for x in stdin.readline().strip().split()] for _ in range(N)]\n\n    # count honest persons\n    count = 0\n    for i in range(N):\n        if y[i][1] == 1:\n            count += 1\n\n    # for each unkind person, check if their testimony can be used to prove a dishonesty\n    for i in range(N):\n        if y[i][1] == 0:\n            # get the indices of their testimonies\n            indices = [j for j in range(N) if y[j][0] == i+1]\n            # count the number of distinct testimonies\n            num_distinct = len(set([(x[0], x[1]) for j in indices for x in y[j] if x[1] == 0]))\n            # if this number is greater than the number of testimonies, there is no conflict\n            if num_distinct > A[i]:\n                count -= 1\n\n    return str(count)"
    },
    {
        "number": 4219,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function solves the problem of finding the maximum number of honest persons among N people.\n    \"\"\"\n    # Get the input\n    input_list = stdin.split(\"\\n\")\n    N = int(input_list[0])\n\n    # Create a dictionary to store the testimonies of each person\n    testimonies = {}\n    for i in range(1, N+1):\n        testimonies[i] = []\n\n    # Fill the dictionary with the testimonies of each person\n    for i in range(1, N+1):\n        A_i = int(input_list[i])\n        for j in range(1, A_i+1):\n            x_ij, y_ij = map(int, input_list[i+j].split())\n            testimonies[i].append((x_ij, y_ij))\n\n    # Find the maximum possible number of honest persons among N people\n    max_honest_persons = 0\n    for i in range(1, N+1):\n        if is_honest(i, testimonies):\n            max_honest_persons += 1\n\n    return str(max_honest_persons)\n\ndef"
    },
    {
        "number": 4219,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    people = []\n    for i in range(1, n+1):\n        a = int(lines[i*2-1])\n        testimonies = []\n        for j in range(a):\n            x, y = map(int, lines[i*2][j*2:j*2+2])\n            testimonies.append((x, y))\n        people.append(testimonies)\n\n    # Finding maximum number of honest persons\n    max_honest = 0\n    for i in range(n):\n        num_honest = 0\n        for j in range(len(people[i])):\n            x, y = people[i][j]\n            if y == 1:\n                num_honest += 1\n                if num_honest >= max_honest:\n                    max_honest = num_honest\n    return str(max_honest)"
    },
    {
        "number": 4219,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    testimony_counts = [0] * (n+1) # number of testimonies given by each person\n    for i in range(1, n+1):\n        a, testimonies = lines[i].split()\n        a = int(a)\n        testimony_counts[i] = a\n        for j in range(a):\n            x, y = testimonies.split()\n            x = int(x)\n            y = int(y)\n            if y == 0: # if the testimony says person x is unkind, then person i is unkind\n                testimony_counts[i] -= 1\n                break\n    max_honest = 0\n    for i in range(1, n+1):\n        if testimony_counts[i] == 0:\n            max_honest += 1\n    return str(max_honest)"
    },
    {
        "number": 4220,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, s = stdin.split('\\n')\n    k = int(k)\n\n    if len(s) <= k:\n        return s\n    else:\n        return s[:k] + '...'"
    },
    {
        "number": 4220,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(str.strip, stdin.splitlines())\n    k = int(k)\n    if len(s) <= k:\n        return s\n    else:\n        return s[:k] + \"...\""
    },
    {
        "number": 4220,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, s = stdin.strip().split()\n    k = int(k)\n    if len(s) <= k:\n        return s\n    else:\n        return s[:k] + '...'"
    },
    {
        "number": 4220,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, s = stdin.strip().split()\n    k = int(k)\n    \n    if len(s) <= k:\n        return s\n    else:\n        return s[:k] + '...'"
    },
    {
        "number": 4220,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k, s = stdin.split()\n    k = int(k)\n    if len(s) <= k:\n        return s\n    else:\n        return s[:k] + \"...\""
    },
    {
        "number": 4220,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a string S and an integer K, if the length of S is at most K, print S without change.\n    If the length of S exceeds K, extract the first K characters in S, append... to the end of them, and print the result.\n    \"\"\"\n    k, s = map(str.strip, stdin.split('\\n'))\n    k, s = int(k), s.lower()\n    if len(s) <= k:\n        return s\n    else:\n        return s[:k] + '...'"
    },
    {
        "number": 4220,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, s = stdin.strip().split()\n    k = int(k)\n    if len(s) <= k:\n        return s\n    else:\n        return s[:k] + \"...\""
    },
    {
        "number": 4220,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, s = stdin.strip().split()\n    k = int(k)\n\n    if len(s) <= k:\n        return s\n\n    else:\n        return s[:k] + '...'"
    },
    {
        "number": 4220,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, s = stdin.split()\n    k = int(k)\n    \n    if len(s) <= k:\n        return s\n    \n    else:\n        return s[:k] + '...'"
    },
    {
        "number": 4220,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(str.strip, stdin.split())\n    k = int(k)\n    s_len = len(s)\n    if s_len <= k:\n        return s\n    else:\n        return s[:k] + '...'"
    },
    {
        "number": 4221,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[-1] == \"s\":\n        return s + \"es\"\n    else:\n        return s + \"s\""
    },
    {
        "number": 4221,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    singular = stdin.strip()\n    if singular[-1] =='s':\n        return singular + 'es'\n    else:\n        return singular +'s'"
    },
    {
        "number": 4221,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    singular = stdin.strip()\n    if singular[-1] =='s':\n        return singular + 'es'\n    else:\n        return singular +'s'"
    },
    {
        "number": 4221,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.strip()\n    if word.endswith('s'):\n        return word + 'es'\n    else:\n        return word +'s'\n"
    },
    {
        "number": 4221,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    singular = stdin.strip()\n    if singular[-1] =='s':\n        plural = singular + 'es'\n    else:\n        plural = singular +'s'\n    return plural"
    },
    {
        "number": 4221,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input string\n    word = stdin.strip()\n    \n    # Check if the word ends with's'\n    if word[-1] =='s':\n        # Add 'es' to the end of the word\n        plural = word + 'es'\n    else:\n        # Add's' to the end of the word\n        plural = word +'s'\n        \n    # Return the plural form of the word\n    return plural"
    },
    {
        "number": 4221,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S[-1] =='s':\n        return f'{S}es'\n    else:\n        return f'{S}s'"
    },
    {
        "number": 4221,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    singular = stdin.strip()\n    if singular[-1] =='s':\n        plural = singular + 'es'\n    else:\n        plural = singular +'s'\n    return plural\n"
    },
    {
        "number": 4221,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Remove newline character from input\n    stdin = stdin.strip()\n    \n    # Determine plural form of word\n    if stdin[-1] =='s':\n        return stdin + 'es'\n    else:\n        return stdin +'s'\n"
    },
    {
        "number": 4221,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    singular = stdin.strip()\n    if singular[-1] =='s':\n        plural = singular + 'es'\n    else:\n        plural = singular +'s'\n    return plural"
    },
    {
        "number": 4222,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split('\\n')\n    N, K = map(int, lines[0].split())\n    snacks = []\n    for i in range(1, 1+K):\n        d, *A = map(int, lines[i].split())\n        snacks.append((d, A))\n    \n    # count number of snukes with no snacks\n    count = 0\n    for i in range(1, N+1):\n        has_snack = False\n        for d, A in snacks:\n            if i in A:\n                has_snack = True\n                break\n        if not has_snack:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4222,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, K = map(int, stdin.split())\n    snack_count = [0] * K\n    snack_list = [[] for _ in range(K)]\n    for i in range(N):\n        d, *A = map(int, stdin.split())\n        for j in range(d):\n            snack_count[A[j]-1] += 1\n            snack_list[A[j]-1].append(i+1)\n    # find victims\n    victims = [i+1 for i, count in enumerate(snack_count) if count == 0]\n    return str(len(victims))"
    },
    {
        "number": 4222,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.readline().strip().split())\n    snacks = []\n    for _ in range(K):\n        d = int(stdin.readline().strip())\n        snacks.append(list(map(int, stdin.readline().strip().split())))\n    \n    # Count the number of snukes without snacks\n    count = 0\n    for i in range(N):\n        found = False\n        for j in range(K):\n            if i+1 in snacks[j]:\n                found = True\n                break\n        if not found:\n            count += 1\n    \n    # Print result\n    return str(count)"
    },
    {
        "number": 4222,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, K = map(int, stdin.strip().split())\n    snacks = [[] for _ in range(N)]\n    for _ in range(K):\n        d, *a = map(int, stdin.strip().split())\n        for i in range(d):\n            snacks[a[i]-1].append(1)\n\n    # count snakes with no snacks\n    no_snacks = sum(all(x == 0 for x in s) for s in snacks)\n\n    # return answer\n    return str(no_snacks)"
    },
    {
        "number": 4222,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, K = map(int, stdin.split())\n    snacks = [[] for _ in range(K)]\n    for i in range(K):\n        d = int(stdin.readline())\n        snacks[i] = list(map(int, stdin.readline().split()))\n\n    # count snacks\n    snack_count = [0] * N\n    for i in range(K):\n        for j in range(len(snacks[i])):\n            snack_count[snacks[i][j]-1] += 1\n\n    # find victims\n    victim_count = 0\n    for i in range(N):\n        if snack_count[i] == 0:\n            victim_count += 1\n\n    # print result\n    return str(victim_count)"
    },
    {
        "number": 4222,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.readline().split())\n    snack_counts = list(map(int, stdin.readline().split()))\n    snack_types = [[] for _ in range(K)]\n    for i in range(K):\n        snack_types[i] = list(map(int, stdin.readline().split()))\n\n    # Count snacks\n    snack_counts = [sum(snack_type == i+1 for snack_type in snack_types) for i in range(N)]\n\n    # Count number of victims\n    victim_count = sum(snack_count == 0 for snack_count in snack_counts)\n\n    # Print output\n    return str(victim_count)"
    },
    {
        "number": 4222,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.readline().strip().split())\n    snacks = []\n    for _ in range(K):\n        d, *s = map(int, stdin.readline().strip().split())\n        snacks.append(s)\n    # Count number of victims\n    victims = 0\n    for i in range(N):\n        has_snack = False\n        for j in range(K):\n            if i+1 in snacks[j]:\n                has_snack = True\n                break\n        if not has_snack:\n            victims += 1\n    # Print result\n    print(victims)\n    return ''"
    },
    {
        "number": 4222,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, K = map(int, stdin.readline().split())\n    snack_counts = []\n    for _ in range(K):\n        d = int(stdin.readline())\n        snack_counts.append(d)\n    snack_assignments = []\n    for _ in range(N):\n        snack_assignments.append(list(map(int, stdin.readline().split())))\n\n    # count the number of snacks\n    snack_counts = [sum(c) for c in zip(*snack_assignments)]\n\n    # count the number of victims\n    victim_count = sum(snack_counts == 0)\n\n    return str(victim_count)"
    },
    {
        "number": 4222,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.split('\\n')\n    N, K = map(int, lines[0].split())\n    snacks_per_snuke = []\n    for i in range(1, K+1):\n        snacks_per_snuke.append(list(map(int, lines[i].split())))\n\n    # Find snackless snukes\n    snukes_with_snacks = set()\n    for i in range(K):\n        for j in range(snacks_per_snuke[i][0]):\n            snukes_with_snacks.add(snacks_per_snuke[i][j])\n\n    snukes_with_no_snacks = set(range(1, N+1)) - snukes_with_snacks\n\n    # Return result\n    return str(len(snukes_with_no_snacks))"
    },
    {
        "number": 4222,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = list(map(int, stdin.readline().split()))\n    snack_counts = list(map(int, stdin.readline().split()))\n    snack_items = [set() for _ in range(K)]\n    for i in range(K):\n        for j in range(snack_counts[i]):\n            snack_items[i].add(int(stdin.readline()))\n\n    # Count victims\n    victims = 0\n    for i in range(N):\n        if i+1 not in snack_items[0] and i+1 not in snack_items[1]:\n            victims += 1\n\n    # Return result\n    return str(victims)"
    },
    {
        "number": 4223,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    count = 0\n    previous_char = None\n    for char in s:\n        if char!= previous_char:\n            count += 1\n        previous_char = char\n    return count"
    },
    {
        "number": 4223,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.strip().split('\\n')\n    count = 0\n    i = 0\n    while i < len(S):\n        j = i + 1\n        while j < len(S) and S[i] == S[j]:\n            j += 1\n        count += 1\n        if j - i > 1:\n            count += 1\n            i = j - 1\n        else:\n            i = j\n    return str(count)"
    },
    {
        "number": 4223,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n    \n    # Initialize variables\n    count = 1\n    last_color = S[0]\n    \n    # Iterate through slimes\n    for i in range(1, N):\n        if S[i] == last_color:\n            continue\n        else:\n            count += 1\n            last_color = S[i]\n    \n    # Print result\n    print(count)\n    \n    # Return result\n    return count\n"
    },
    {
        "number": 4223,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    S = stdin.readline().strip()\n\n    # Count colors and fuse colors\n    colors = {}\n    for color in S:\n        colors[color] = colors.get(color, 0) + 1\n\n    # Count number of fused colors\n    fused_colors = 0\n    for count in colors.values():\n        if count > 1:\n            fused_colors += 1\n\n    # Calculate number of remaining slimes\n    remaining_slimes = N - len(S) - fused_colors\n\n    # Add remaining slimes to fusion count if needed\n    remaining_fused_colors = fused_colors\n    for color, count in colors.items():\n        if count > 1:\n            remaining_fused_colors -= 1\n        if remaining_fused_colors == 0:\n            remaining_slimes -= count\n            break\n\n    # Add remaining slimes to fusion count if needed\n    if remaining_slimes > 0:\n        remaining_fused_colors = fused_colors - 1\n        for color, count in colors.items():\n            if count > 1:\n                remaining_fused_colors -= 1\n            if remaining_fused_colors == 0:\n                remaining_slimes -= count\n                break\n\n    return remaining_slimes"
    },
    {
        "number": 4223,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    fused_slimes = []\n    count = 1\n    \n    for i in range(1, n):\n        if s[i]!= s[i-1]:\n            fused_slimes.append(s[i-1])\n            count += 1\n    \n    fused_slimes.append(s[-1])\n    \n    return count"
    },
    {
        "number": 4223,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    # Initialize variables\n    color_count = {}\n    for c in s:\n        if c not in color_count:\n            color_count[c] = 1\n        else:\n            color_count[c] += 1\n    \n    # Initialize variables for final result\n    result = 1\n    \n    # Count fused slimes\n    for c in color_count:\n        result += color_count[c] - 1\n    \n    return str(result)"
    },
    {
        "number": 4223,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    S = stdin.readline().strip()\n\n    # Initialize variables\n    count = 0\n    prev_char = None\n\n    # Iterate through the string and count fused slimes\n    for char in S:\n        if char!= prev_char:\n            count += 1\n        prev_char = char\n\n    # Return the final count\n    return count"
    },
    {
        "number": 4223,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    color_count = {}\n    for i in range(N):\n        color = S[i]\n        if color not in color_count:\n            color_count[color] = 1\n        else:\n            color_count[color] += 1\n    \n    unique_colors = len(color_count)\n    return unique_colors\n"
    },
    {
        "number": 4223,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    groups = []\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n and s[i] == s[j]:\n            j += 1\n        groups.append((s[i], i, j - 1))\n        i = j\n    groups.sort(key=lambda x: x[1])\n    print(groups)\n    res = 0\n    for i, j, k in groups:\n        if res and groups[res - 1][2] >= j:\n            continue\n        res += 1\n    return res\n"
    },
    {
        "number": 4223,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n\n    # count fused slimes\n    count = 0\n    curr_color = S[0]\n    for i in range(N):\n        if S[i] == curr_color:\n            continue\n        else:\n            count += 1\n            curr_color = S[i]\n    count += 1\n\n    return str(count)"
    },
    {
        "number": 4224,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        if nums[i] % 2 == 0:\n            nums[i] /= 2\n            count += 1\n        if nums[i] % 3 == 0:\n            nums[i] /= 3\n            count += 1\n    return str(count)"
    },
    {
        "number": 4224,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    operations = 0\n    for i in range(n):\n        # Check if multiplying a_i by 3 is allowed\n        if i == 0 or i == n-1:\n            if a[i] % 3!= 0:\n                continue\n        else:\n            if a[i-1] % 3 == 0 or a[i+1] % 3 == 0 or a[i] % 3!= 0:\n                continue\n\n        # Check if dividing a_i by 2 is allowed\n        if a[i] % 2 == 0:\n            continue\n\n        # Perform operation\n        a[i] //= 2\n        operations += 1\n\n        # Check if a_i is an integer\n        if a[i] % 1!= 0:\n            return \"No solution\"\n\n    return operations"
    },
    {
        "number": 4224,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    count = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            a[i] //= 2\n        else:\n            count += 1\n\n    return count if count <= n else 'impossible'"
    },
    {
        "number": 4224,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    max_count = 0\n    for i in range(N):\n        if i == 0 or a[i] % 2 == 1 or a[i-1] % 2 == 1:\n            max_count += 1\n\n    return str(max_count)"
    },
    {
        "number": 4224,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_ops = 0\n    for i in range(1, N):\n        if a[i] % 3!= 0:\n            max_ops += 1\n        if a[i-1] % 3 == 0 and a[i] % 3!= 0:\n            max_ops += 1\n        if a[i-1] % 2 == 0:\n            max_ops += 1\n\n    # Output result\n    return str(max_ops)"
    },
    {
        "number": 4224,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    ans = 0\n    for i in range(n):\n        if a[i] % 2 == 0 and i > 0 and a[i-1] % 2 == 0:\n            ans += 1\n            a[i] //= 2\n        elif a[i] % 3 == 0 and i > 0 and a[i-1] % 3 == 0:\n            ans += 1\n            a[i] //= 3\n        elif a[i] % 2 == 0 and i < n-1 and a[i+1] % 2 == 0:\n            ans += 1\n            a[i] //= 2\n        elif a[i] % 3 == 0 and i < n-1 and a[i+1] % 3 == 0:\n            ans += 1\n            a[i] //= 3\n\n    return str(ans)"
    },
    {
        "number": 4224,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    count = 0\n    for i in range(n):\n        if i == 0 or a[i]!= a[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 4224,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    # Initializing variables\n    count = 0\n    x = a[0]\n    \n    # Performing operations\n    for i in range(1, n):\n        # Check if multiplying by 3 is allowed\n        if x % 3!= 0:\n            if a[i] % 2 == 0:\n                x *= a[i] // 2\n                count += 1\n            else:\n                x = a[i]\n                count += 1\n        else:\n            x = a[i]\n            count += 1\n            \n    return count\n    \n"
    },
    {
        "number": 4224,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    n, *sequence = map(int, stdin.split())\n\n    # Initialize the variables\n    max_count = 0\n    for i in range(1, n):\n        # Check if the current element is divisible by 2\n        if sequence[i] % 2 == 0:\n            # Check if the previous element can be divided by 2\n            if sequence[i-1] % 2 == 0:\n                # Perform both operations\n                sequence[i-1] //= 2\n                sequence[i] //= 2\n                sequence[i] *= 3\n                # Increment the count\n                max_count += 2\n            # Check if the previous element can be multiplied by 3\n            elif sequence[i-1] % 3 == 0:\n                # Perform the divide by 2 operation\n                sequence[i-1] //= 2\n                sequence[i] //= 2\n                # Increment the count\n                max_count += 1\n            # Otherwise, the current element cannot be divided or multiplied by 2 or 3\n        # Check if the current element is divisible by 3\n        elif sequence[i] % 3 == 0:\n            # Check if the previous element can be multiplied by 3\n            if sequence[i-1] % 3 == 0:\n                # Perform both operations\n                sequence[i-1] *= 3\n                sequence[i] *= 3\n                # Increment the count\n                max_count += 2\n            # Otherwise, the current element cannot be multiplied by 3\n        # Otherwise, the current element cannot be divided or multiplied by 2 or 3\n\n    # Print the maximum count\n    return str(max_count)"
    },
    {
        "number": 4224,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    max_ops = 0\n    \n    for i in range(1, n):\n        if a[i] % 2 == 0:\n            max_ops += 1\n        if i > 1 and a[i] % 2 == 0 and a[i-1] % 3 == 0 and a[i-2] % 3 == 0:\n            max_ops += 1\n            \n    if n > 1 and a[n-1] % 3 == 0 and a[n-2] % 3 == 0:\n        max_ops += 1\n    \n    return str(max_ops)"
    },
    {
        "number": 4225,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    cards = [1] * A + [0] * B + [-1] * C\n    cards.sort()\n    return str(sum(cards[:K]))"
    },
    {
        "number": 4225,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    max_sum = (A + B + C) * 2 // 3\n    if K > A + B + C:\n        return str(max_sum)\n    else:\n        return str(K * max_sum)"
    },
    {
        "number": 4225,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    cards = [1] * A + [0] * B + [-1] * C\n    cards.sort()\n    return str(sum(cards[:K]))"
    },
    {
        "number": 4225,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, k = map(int, stdin.strip().split())\n    cards = [1] * a + [0] * b + [-1] * c\n    cards.sort()\n    return str(sum(cards[:k]))"
    },
    {
        "number": 4225,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    max_sum = (K*(K+1)) // 2\n    if K <= A:\n        max_sum -= (A*(A-1)) // 2\n    elif K <= A + B:\n        max_sum -= (K*(K-1)) // 2\n    else:\n        max_sum -= ((A+B)*(A+B-1)) // 2\n    return str(max_sum)"
    },
    {
        "number": 4225,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, k = map(int, stdin.split())\n    max_sum = 0\n    for i in range(k+1):\n        max_sum += max(i, a-i)\n    for i in range(k+1):\n        max_sum += max(i, b-i)\n    for i in range(k+1):\n        max_sum += max(i, c-i)\n    return str(max_sum)"
    },
    {
        "number": 4225,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    cards = [1] * A + [0] * B + [-1] * C\n    cards.sort()\n    return str(sum(cards[:K]))"
    },
    {
        "number": 4225,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    a_max = A * 1\n    b_max = B * 0\n    c_max = C * -1\n    max_sum = max(a_max, b_max, c_max)\n    if K > 2 * A + B + C:\n        return str(-1)\n    if K == 0:\n        return str(0)\n    if K <= A:\n        return str(A * 1)\n    if K <= A + B:\n        return str(B * 0)\n    return str(C * -1)"
    },
    {
        "number": 4225,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n\n    max_sum = K * max(A, B, C)\n\n    return str(max_sum)"
    },
    {
        "number": 4225,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    if K > A + B + C:\n        return \"Invalid Input\"\n    return max(K, A - B + C, A + B - C)"
    },
    {
        "number": 4226,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = list(map(int, stdin.split()))\n    if Y % 2 == 0 and X >= Y // 2:\n        return 'Yes'\n    else:\n        return 'No'\n\ndef"
    },
    {
        "number": 4226,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    X, Y = map(int, stdin.split())\n\n    # Check for valid input\n    if X < 1 or Y < 1 or X > 100 or Y > 100:\n        return \"No\"\n\n    # Check if there are enough animals for the given legs\n    if Y % 2 == 1:\n        # Y is odd, so we need at least X/2 animals\n        if X < X//2:\n            return \"No\"\n    else:\n        # Y is even, so we need at least X\n        if X < Y:\n            return \"No\"\n\n    # Check if there is a valid combination of animals\n    for i in range(X+1):\n        for j in range(X-i):\n            if i*2 + j*4 == Y:\n                return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == 0 and y == 0:\n        return \"No\"\n    if y % 4 == 0:\n        if x == 1 and y // 4 == 1:\n            return \"Yes\"\n        elif x == 2 and y // 4 == 2:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if (y % 2 == 0 and x == (y // 2) + 1) or (y % 4 == 0 and x == (y // 4) + 1):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if Y % 2 == 1 or Y < 4:\n        return \"No\"\n    if X == 1 and Y == 4:\n        return \"Yes\"\n    if X >= 2 and Y >= 8 and X <= (Y+1)//2:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if y % 2 == 0 and y >= 8:\n        return \"Yes\"\n    elif x == 1 and y <= 2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x%2 == 0 and y%4 == 0 and (x//2)*4 == y:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if X == Y:\n        return \"Yes\"\n    elif X == 0 and Y % 2 == 0:\n        return \"Yes\"\n    elif X == 0 and Y % 2!= 0:\n        return \"No\"\n    elif Y == 0 and X % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == 0 and y == 0:\n        return \"No\"\n    if x == 0 and y > 0:\n        return \"Yes\"\n    if x > 0 and y == 0:\n        return \"Yes\"\n    if x == y or y % x == 0:\n        return \"Yes\"\n    if x > 1 and y > 1 and x <= y:\n        return \"Yes\"\n    return \"No\"\n\nprint(solution(\"3 8\"))"
    },
    {
        "number": 4226,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    x, y = map(int, stdin.strip().split())\n    \n    # check if there is a combination of numbers of cranes and turtles in which the statement is correct\n    if x == y == 0:\n        return \"Yes\"\n    elif x % 2 == 0 and y % 4 == 0:\n        return \"Yes\"\n    elif x % 2 == 1 and y % 4 == 2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4227,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        edges.append((a, b))\n    paths = [[] for _ in range(n)]\n    for edge in edges:\n        paths[edge[0]-1].append(edge[1]-1)\n        paths[edge[1]-1].append(edge[0]-1)\n    visited = [False] * n\n    visited[0] = True\n    count = 0\n    stack = [(0, 0)]\n    while stack:\n        node, path_len = stack.pop()\n        if not visited[node]:\n            visited[node] = True\n            if path_len == n-1:\n                count += 1\n            else:\n                for child in paths[node]:\n                    stack.append((child, path_len+1))\n    return str(count)\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n\nprint(solution(stdin))"
    },
    {
        "number": 4227,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = [False]*(n+1)\n    stack = [(1, 1)]\n    count = 0\n    while stack:\n        node, parent = stack.pop()\n        visited[node] = True\n        for nei in graph[node]:\n            if nei == parent:\n                continue\n            if visited[nei]:\n                continue\n            stack.append((nei, node))\n        if all(visited):\n            count += 1\n    return str(count)"
    },
    {
        "number": 4227,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Reading the input\n    n, m = map(int, stdin.readline().split())\n    edges = list(map(int, stdin.readline().split()))\n    graph = [[] for _ in range(n+1)]\n    for i in range(0, len(edges), 2):\n        a, b = edges[i], edges[i+1]\n        graph[a].append(b)\n        graph[b].append(a)\n\n    # Recursive function to count the number of paths\n    def countPaths(start, end, visited, paths):\n        if start == end:\n            return 1\n        visited.add(start)\n        count = 0\n        for neighbor in graph[start]:\n            if neighbor not in visited:\n                count += countPaths(neighbor, end, visited, paths)\n        visited.remove(start)\n        paths.append(count)\n        return count\n\n    # Counting the number of paths\n    visited = set()\n    paths = []\n    countPaths(1, n, visited, paths)\n    print(sum(paths))\n\n    # Returning the result as a string\n    return str(sum(paths))"
    },
    {
        "number": 4227,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.readline().strip().split())\n    edges = [list(map(int, stdin.readline().strip().split())) for _ in range(m)]\n\n    # create adjacency list\n    graph = [[] for _ in range(n+1)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    # helper function to count paths\n    def countPaths(start, end, visited):\n        if start == end:\n            return 1\n        if visited[start]:\n            return 0\n        visited[start] = True\n        count = 0\n        for neighbor in graph[start]:\n            count += countPaths(neighbor, end, visited)\n        visited[start] = False\n        return count\n\n    # count paths from 1 to all other vertices\n    visited = [False] * (n+1)\n    count = 0\n    for i in range(1, n+1):\n        count += countPaths(1, i, visited)\n    return str(count // 2)  # divide by 2 because each path is counted twice\n"
    },
    {
        "number": 4227,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.readline().split())\n    edges = []\n    for _ in range(m):\n        a, b = map(int, stdin.readline().split())\n        edges.append((a, b))\n    \n    # count the number of paths that start from 1 and visit all the vertices exactly once\n    count = 0\n    for i in range(n):\n        seen = [False] * n\n        seen[i] = True\n        if dfs(1, seen, edges):\n            count += 1\n    \n    return str(count)\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    graph = {}\n    for i in range(1, m+1):\n        a, b = map(int, lines[i].split())\n        if a not in graph:\n            graph[a] = set()\n        if b not in graph:\n            graph[b] = set()\n        graph[a].add(b)\n        graph[b].add(a)\n    paths = set()\n    def dfs(node, visited, path):\n        if node == 1 and len(visited) == n:\n            paths.add(path)\n            return\n        for nei in graph[node] - visited:\n            dfs(nei, visited | {nei}, path + [nei])\n    dfs(1, set(), [1])\n    return len(paths)\n\nwith open(\"input.txt\", \"r\") as f:\n    print(solution(f.read()))"
    },
    {
        "number": 4227,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.readline().split())\n    edges = []\n    for i in range(m):\n        a, b = map(int, stdin.readline().split())\n        edges.append((a, b))\n\n    # count paths\n    count = 0\n    for i in range(1, n+1):\n        visited = set()\n        visited.add(i)\n        count += dfs(edges, visited, i, n)\n\n    return str(count)\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    N, M = map(int, stdin.readline().split())\n    edges = [list(map(int, stdin.readline().split())) for _ in range(M)]\n\n    # count the number of paths from vertex 1 to each vertex\n    counts = [0] * N\n    counts[0] = 1\n    for a, b in edges:\n        counts[b-1] += counts[a-1]\n\n    # count the number of paths that start from vertex 1 and visit all the vertices exactly once\n    return counts[0]"
    },
    {
        "number": 4227,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, M = map(int, stdin.readline().strip().split())\n    edges = [list(map(int, stdin.readline().strip().split())) for _ in range(M)]\n\n    # create a graph\n    graph = [[] for _ in range(N)]\n    for a, b in edges:\n        graph[a-1].append(b-1)\n        graph[b-1].append(a-1)\n\n    # use DFS to count the number of paths\n    def dfs(curr, visited, count):\n        visited[curr] = True\n        for neighbor in graph[curr]:\n            if not visited[neighbor]:\n                count = dfs(neighbor, visited, count+1)\n        return count\n\n    visited = [False] * N\n    count = dfs(0, visited, 1)\n\n    return str(count)\n"
    },
    {
        "number": 4228,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, l = map(int, stdin.strip().split())\n    # calculate flavors of remaining apples\n    flavors = [l+i-1 for i in range(1, n+1)]\n    # calculate sum of flavors of remaining apples\n    remaining_flavor_sum = sum(flavors)\n    # calculate sum of flavors of apple pie made of remaining apples\n    remaining_apples = flavors[1:]\n    apple_pie_flavor_sum = sum(remaining_apples)\n    # calculate the smallest possible absolute difference\n    diff = abs(remaining_flavor_sum - apple_pie_flavor_sum)\n    # find the index of the apple to eat\n    index = flavors.index(max(flavors))\n    # print the answer\n    return str(apple_pie_flavor_sum - remaining_apples[index] + flavors[index])"
    },
    {
        "number": 4228,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    n, l = map(int, stdin.strip().split())\n\n    # calculate the flavors of the apples\n    flavors = [l + i - 1 for i in range(1, n+1)]\n\n    # calculate the flavors of the apple pies using all apples\n    all_flavors = sum(flavors)\n    all_flavors_apple_pie = all_flavors\n\n    # calculate the flavors of the apple pies using the remaining apples\n    remaining_flavors = sum(flavors[:-1])\n    remaining_flavors_apple_pie = remaining_flavors\n\n    # find the apple to eat\n    apple_to_eat = 0\n    min_diff = abs(remaining_flavors_apple_pie - all_flavors_apple_pie)\n    for i in range(1, n):\n        diff = abs(remaining_flavors_apple_pie - (all_flavors_apple_pie - flavors[i-1] + flavors[i]))\n        if diff < min_diff:\n            min_diff = diff\n            apple_to_eat = i\n\n    # print the output\n    return str(remaining_flavors - flavors[apple_to_eat-1])"
    },
    {
        "number": 4228,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given N apples with flavors L+i-1, where L and N are integers between -100 and 100.\n    We need to find the flavor of the apple pie made of the remaining N-1 apples when\n    we optimally choose the apple to eat.\n\n    The solution is unique and can be found by observing that we need to minimize the\n    absolute difference between the flavors of the apple pie made of the remaining N-1 apples\n    and the flavors of the apple pie made of all the N apples.\n\n    We can solve this problem using dynamic programming. We will create a table\n    dp[i][j] where dp[i][j] represents the flavor of the apple pie made of the i-th apple\n    and the j-th remaining apples, where j = 0, 1,..., N-1.\n\n    We can compute dp[i][j] for all i and j using the following recurrence relation:\n\n    dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2],..., dp[i-1][0]) + L + i - 1\n\n    This means that we can either use the i-th apple without using the j-th remaining apples,\n    or we can use the i-th apple and try to make the apple pie using the j-th remaining apples.\n    In either case, the flavor of the apple pie will be the sum of the flavors of the apples used.\n\n    The answer will be dp[N-1][0].\n\n    Time Complexity: O(N^2)\n\n    Args:\n        stdin: A string containing the input data.\n\n    Returns:\n        The answer to the problem as a string.\n    \"\"\"\n    # Parse the input\n    n, l = map(int, stdin.split())\n\n    # Create the table dp[i][j]\n    dp = [[float('inf') for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = l + i - 1\n    for i in range(1, n):\n        for j in range(n-i):\n            for k in range(i):\n                dp[j][j+k] = min(dp[j][j+k], dp[j][j+k+1], dp[j+1][j+k]) + l + i + j\n\n    # Return the answer\n    return str(dp[0][n-1])"
    },
    {
        "number": 4228,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.strip().split())\n    apples = [l + i - 1 for i in range(1, n+1)]\n    min_diff = float('inf')\n    for i in range(n):\n        diff = sum(apples[j] for j in range(n) if j!= i)\n        if abs(diff) < min_diff:\n            min_diff = abs(diff)\n    return str(diff) if diff!= 0 else '0'"
    },
    {
        "number": 4228,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, l = map(int, stdin.split())\n\n    # calculate flavors of remaining apples\n    remaining_flavors = [l + i - 1 for i in range(1, n + 1)]\n\n    # calculate optimal apple\n    optimal_apple = remaining_flavors.index(min(remaining_flavors))\n\n    # calculate flavor of apple pie with optimal apple\n    flavor_of_apple_pie_with_optimal_apple = sum(remaining_flavors)\n\n    # calculate optimal apple pie flavor\n    optimal_apple_flavor = l + optimal_apple - 1\n\n    # calculate optimal apple pie flavor\n    apple_pie_flavor = l + sum(remaining_flavors[:optimal_apple] + remaining_flavors[optimal_apple+1:])\n\n    # calculate absolute difference between flavors\n    absolute_difference = abs(flavor_of_apple_pie_with_optimal_apple - apple_pie_flavor)\n\n    # print answer\n    return str(absolute_difference)"
    },
    {
        "number": 4228,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    flavors = [l + i - 1 for i in range(1, n+1)]\n    smallest_diff = float('inf')\n    best_flavor = None\n    for i in range(n):\n        remaining_flavors = flavors[:i] + flavors[i+1:]\n        remaining_sum = sum(remaining_flavors)\n        remaining_diff = abs(remaining_sum - remaining_flavors[-1])\n        if remaining_diff < smallest_diff:\n            smallest_diff = remaining_diff\n            best_flavor = remaining_sum\n    return str(best_flavor)\n\nprint(solution(input()))"
    },
    {
        "number": 4228,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    apples = [L + i for i in range(1, N + 1)]\n    apple_pie = sum(apples)\n    apple_eaten = L + 1\n    min_diff = float('inf')\n    for i in range(N):\n        diff = abs(sum(apples[:i] + apples[i+1:]) - apple_pie)\n        if diff < min_diff:\n            min_diff = diff\n            apple_eaten = L + i\n    return str(apple_eaten)"
    },
    {
        "number": 4228,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, L = map(int, stdin.split())\n\n    # compute the sum of flavors of all apples\n    total_flavor = L * (N + 1) // 2\n\n    # compute the difference between the sum of flavors of all apples and the sum of flavors of remaining apples\n    remaining_flavors = L * (N - 1) // 2\n    optimal_apple_flavor = total_flavor - remaining_flavors\n\n    # return the optimal apple flavor\n    return str(optimal_apple_flavor)\n"
    },
    {
        "number": 4228,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    apples = [l+i-1 for i in range(1, n+1)]\n    pie = sum(apples)\n    min_diff = abs(pie)\n    min_index = 0\n    for i in range(1, n):\n        new_pie = pie - apples[i-1] + apples[i]\n        diff = abs(new_pie - pie)\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n    return str(new_pie)"
    },
    {
        "number": 4228,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    apples = [L+i-1 for i in range(1, N+1)]\n    remaining_apples = apples[1:]\n    remaining_sum = sum(remaining_apples)\n    optimal_apple = min(remaining_apples, key=lambda x: abs(remaining_sum - x))\n    return str(remaining_sum - optimal_apple)"
    },
    {
        "number": 4229,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    fizzbuzz_sequence = [i for i in range(1, n+1)]\n    for i in range(len(fizzbuzz_sequence)):\n        if fizzbuzz_sequence[i] % 3 == 0 and fizzbuzz_sequence[i] % 5 == 0:\n            fizzbuzz_sequence[i] = \"FizzBuzz\"\n        elif fizzbuzz_sequence[i] % 3 == 0:\n            fizzbuzz_sequence[i] = \"Fizz\"\n        elif fizzbuzz_sequence[i] % 5 == 0:\n            fizzbuzz_sequence[i] = \"Buzz\"\n    fizzbuzz_sum = sum([int(i) if i.isdigit() else 0 for i in fizzbuzz_sequence])\n    return str(fizzbuzz_sum)"
    },
    {
        "number": 4229,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n\n    # initialize variables\n    fizz = 0\n    buzz = 0\n    fizzbuzz = 0\n\n    # calculate sum of FizzBuzz sequence\n    for i in range(1, N+1):\n        if i % 3 == 0 and i % 5 == 0:\n            fizzbuzz += i\n        elif i % 3 == 0:\n            fizz += i\n        elif i % 5 == 0:\n            buzz += i\n        else:\n            continue\n\n    # print sum of FizzBuzz sequence\n    print(fizzbuzz + fizz + buzz)\n\n    # return output as string\n    return f\"{fizzbuzz + fizz + buzz}\\n\""
    },
    {
        "number": 4229,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sum_fizzbuzz = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            sum_fizzbuzz += i\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            sum_fizzbuzz += i\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            sum_fizzbuzz += i\n            print(\"Buzz\")\n        else:\n            print(i)\n    print(sum_fizzbuzz)"
    },
    {
        "number": 4229,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    \n    # Initialize variables\n    fizzbuzz_sum = 0\n    count = 1\n    fizzbuzz_count = 0\n    \n    # Loop through FizzBuzz sequence\n    while count <= N:\n        if count % 3 == 0 and count % 5 == 0:\n            fizzbuzz_sum += count\n            fizzbuzz_count += 1\n            if fizzbuzz_count % 3 == 0:\n                print(\"FizzBuzz\")\n            else:\n                print(\"FizzBuzz\")\n        elif count % 3 == 0:\n            fizzbuzz_sum += count\n            fizzbuzz_count += 1\n            if fizzbuzz_count % 3 == 0:\n                print(\"Fizz\")\n            else:\n                print(count)\n        elif count % 5 == 0:\n            fizzbuzz_sum += count\n            fizzbuzz_count += 1\n            if fizzbuzz_count % 5 == 0:\n                print(\"Buzz\")\n            else:\n                print(count)\n        else:\n            fizzbuzz_sum += count\n            print(count)\n        count += 1\n    \n    return str(fizzbuzz_sum)"
    },
    {
        "number": 4229,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n\n    # Initialize variables\n    sum = 0\n    fizz = 0\n    buzz = 0\n\n    # Loop through N terms of FizzBuzz sequence\n    for i in range(1, N+1):\n        # Check if i is a multiple of 3 or 5\n        if i % 3 == 0 and i % 5 == 0:\n            sum += i\n            print('FizzBuzz')\n        elif i % 3 == 0:\n            sum += i\n            print('Fizz')\n            fizz += 1\n        elif i % 5 == 0:\n            sum += i\n            print('Buzz')\n            buzz += 1\n        else:\n            print(i)\n\n    # Print sum of FizzBuzz numbers\n    print(f'The sum of FizzBuzz numbers is {sum}')\n\n    # Print the number of Fizz and Buzz numbers\n    print(f'There are {fizz} Fizz and {buzz} Buzz numbers in the first {N} terms of the FizzBuzz sequence.')\n\n    return str(sum)"
    },
    {
        "number": 4229,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin)\n    \n    # initialize variables\n    fizz_buzz = []\n    sum = 0\n    \n    # iterate N times\n    for i in range(1, N+1):\n        # check if i is divisible by both 3 and 5\n        if i % 3 == 0 and i % 5 == 0:\n            fizz_buzz.append('FizzBuzz')\n            sum += i\n        # check if i is divisible by 3\n        elif i % 3 == 0:\n            fizz_buzz.append('Fizz')\n            sum += i\n        # check if i is divisible by 5\n        elif i % 5 == 0:\n            fizz_buzz.append('Buzz')\n            sum += i\n        # else, add i to the list\n        else:\n            fizz_buzz.append(i)\n            sum += i\n    \n    # print the result\n    print(sum)\n    return str(sum)"
    },
    {
        "number": 4229,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    fizzbuzz = [i for i in range(1, N+1)]\n    for i in range(len(fizzbuzz)):\n        if i % 3 == 0 and i % 5 == 0:\n            fizzbuzz[i] = \"FizzBuzz\"\n        elif i % 3 == 0:\n            fizzbuzz[i] = \"Fizz\"\n        elif i % 5 == 0:\n            fizzbuzz[i] = \"Buzz\"\n    return str(sum(fizzbuzz))"
    },
    {
        "number": 4229,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return '1'\n    a = [0] * n\n    a[0] = 1\n    a[1] = 2\n    if n > 2:\n        for i in range(2, n):\n            if i % 3 == 0 and i % 5 == 0:\n                a[i] = 'FizzBuzz'\n            elif i % 3 == 0:\n                a[i] = 'Fizz'\n            elif i % 5 == 0:\n                a[i] = 'Buzz'\n            else:\n                a[i] = i\n        return sum(map(int, filter(lambda x: isinstance(x, int), a)))\n    return '1'\n\ndef"
    },
    {
        "number": 4229,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    fizzbuzz = []\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            fizzbuzz.append('FizzBuzz')\n        elif i % 3 == 0:\n            fizzbuzz.append('Fizz')\n        elif i % 5 == 0:\n            fizzbuzz.append('Buzz')\n        else:\n            fizzbuzz.append(str(i))\n    sum = 0\n    for i in fizzbuzz:\n        if i.isdigit():\n            sum += int(i)\n    return str(sum)\n\nprint(solution('15\\n')) # Output: 60"
    },
    {
        "number": 4229,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n\n    # Initialize sum\n    sum = 0\n\n    # Iterate through FizzBuzz sequence\n    for i in range(1, N+1):\n        if i % 3 == 0 and i % 5 == 0:\n            sum += i\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            sum += i\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            sum += i\n            print(\"Buzz\")\n        else:\n            sum += i\n            print(i)\n\n    # Return the sum\n    return str(sum)"
    },
    {
        "number": 4230,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    X, N = map(int, stdin.readline().strip().split())\n    p = list(map(int, stdin.readline().strip().split()))\n\n    # Find the integer nearest to X that is not in p\n    min_diff = float('inf')\n    nearest_int = 0\n    for i in range(1, 101):\n        if i not in p:\n            diff = abs(i - X)\n            if diff < min_diff:\n                min_diff = diff\n                nearest_int = i\n    \n    return str(nearest_int)"
    },
    {
        "number": 4230,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.readline().strip().split())\n    nums = set(map(int, stdin.readline().strip().split()))\n    min_diff = float('inf')\n    result = None\n    for num in range(1, 101):\n        if num not in nums and abs(num - X) < min_diff:\n            min_diff = abs(num - X)\n            result = num\n    return str(result)"
    },
    {
        "number": 4230,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    X, N = list(map(int, stdin.readline().strip().split()))\n    seq = list(map(int, stdin.readline().strip().split()))\n    \n    # calculate nearest integer\n    nearest = None\n    min_diff = float('inf')\n    for i in range(1, 101):\n        if i not in seq:\n            diff = abs(i - X)\n            if diff < min_diff:\n                min_diff = diff\n                nearest = i\n    \n    # print answer\n    return str(nearest)"
    },
    {
        "number": 4230,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    X, N = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    \n    # find integers not in p\n    not_p = set(range(1, 101)) - set(p)\n    \n    # find absolute difference with X\n    diff = sorted(set([abs(x - X) for x in not_p]))\n    \n    # find integer nearest to X\n    ans = diff[0]\n    for d in diff:\n        if d >= ans:\n            break\n        ans = d\n    \n    return str(ans)"
    },
    {
        "number": 4230,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:]))\n    nearest = None\n    for i in range(1, 101):\n        if i not in p and (nearest is None or abs(i - X) < abs(nearest - X)):\n            nearest = i\n    return str(nearest)"
    },
    {
        "number": 4230,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    x, n = map(int, stdin.readline().strip().split())\n    seq = list(map(int, stdin.readline().strip().split()))\n\n    # Compute the set of integers not in the sequence\n    not_in_seq = set(range(1, 101)) - set(seq)\n\n    # Compute the difference between each integer in not_in_seq and x\n    diff = [abs(i - x) for i in not_in_seq]\n\n    # Find the integer with the minimum difference\n    min_diff = min(diff)\n    min_idx = diff.index(min_diff)\n    result = list(not_in_seq)[min_idx]\n\n    return str(result)"
    },
    {
        "number": 4230,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.strip().split())\n    p = list(map(int, stdin.strip().split()))\n    not_in_p = set(range(1, 101)) - set(p)\n    nearest = min(not_in_p, key=lambda x: abs(x - X))\n    return str(nearest)"
    },
    {
        "number": 4230,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, N = list(map(int, stdin.readline().strip().split()))\n    p = list(map(int, stdin.readline().strip().split()))\n    \n    # create a set of unique integers to find the nearest integer\n    unique_set = set(range(1, 101)) - set(p)\n    \n    # initialize the minimum distance and the nearest integer\n    min_dist = float('inf')\n    nearest_int = -1\n    \n    # iterate over the unique integers to find the nearest integer\n    for num in unique_set:\n        # calculate the absolute difference with X\n        dist = abs(num - X)\n        \n        # update the minimum distance and the nearest integer\n        if dist < min_dist:\n            min_dist = dist\n            nearest_int = num\n    \n    return str(nearest_int)"
    },
    {
        "number": 4230,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    arr = set(arr)\n\n    min_diff = float('inf')\n    ans = None\n\n    for num in range(1, 101):\n        if num not in arr:\n            if abs(num - x) < min_diff:\n                min_diff = abs(num - x)\n                ans = num\n\n    return str(ans)\n"
    },
    {
        "number": 4230,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    p = list(map(int, stdin.readline().split()))\n    s = set(p)\n    min_diff = abs(x)\n    min_num = None\n    for num in range(1, 101):\n        if num not in s:\n            diff = abs(num - x)\n            if diff < min_diff:\n                min_diff = diff\n                min_num = num\n    return str(min_num)"
    },
    {
        "number": 4231,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.strip().split())\n    h, w = map(int, stdin.strip().split())\n    remaining_cells = (H - h) * W + (W - w) * h\n    return str(remaining_cells)"
    },
    {
        "number": 4231,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().split())\n    h, w = map(int, stdin.readline().split())\n    white_cells = (H - h + 1) * (W - w + 1)\n    return str(white_cells)"
    },
    {
        "number": 4231,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    H, W = map(int, stdin.readline().split())\n    h, w = map(int, stdin.readline().split())\n\n    # Calculate number of white cells\n    white_cells = (H - h) * W + (W - w) * h\n\n    # Print result\n    print(white_cells)\n\n    # Return result\n    return \"\""
    },
    {
        "number": 4231,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    H, W = list(map(int, lines[0].split()))\n    h, w = list(map(int, lines[1].split()))\n    white_cells = H*W - h*w\n    return str(white_cells)"
    },
    {
        "number": 4231,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    H, W = list(map(int, stdin.split()))\n    h, w = list(map(int, stdin.readline().split()))\n\n    # Check for invalid input\n    if h > H or w > W:\n        return \"Invalid input\"\n\n    # Calculate number of white cells\n    num_cells = H * W - h * W - (H - h) * W\n    return str(num_cells)"
    },
    {
        "number": 4231,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, W = list(map(int, stdin.readline().split()))\n    h, w = list(map(int, stdin.readline().split()))\n    white_cells = H * W - (h + w)\n    return str(white_cells)"
    },
    {
        "number": 4231,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing input\n    H, W = map(int, stdin.strip().split())\n    h, w = map(int, stdin.strip().split())\n\n    # Total number of cells\n    total_cells = H*W\n\n    # Total number of cells painted\n    painted_cells = (h-1)*W + w-1\n\n    # Total number of white cells\n    white_cells = total_cells - painted_cells\n\n    return str(white_cells)"
    },
    {
        "number": 4231,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    H, W = map(int, stdin.readline().strip().split())\n    h, w = map(int, stdin.readline().strip().split())\n    \n    # count the number of white cells that will remain\n    count = (H - h) * W + (W - w) * h\n    \n    return str(count)"
    },
    {
        "number": 4231,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    h, w = map(int, stdin.readline().split())\n    cells = 0\n    for i in range(H):\n        for j in range(W):\n            if i < h-1 or i > h+1 or j < w-1 or j > w+1:\n                cells += 1\n    return str(cells)"
    },
    {
        "number": 4231,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().split())\n    h, w = map(int, stdin.readline().split())\n    return str((H + W) - (h + w) - 1)"
    },
    {
        "number": 4232,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    count = 0\n    low = 1\n    high = 10**9\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        for i in range(n):\n            if a[i] <= mid:\n                count += 1\n                if count == k:\n                    result = mid\n                    break\n        if result!= -1:\n            break\n        elif count < k:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return str(result)"
    },
    {
        "number": 4232,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n\n    # binary search for x\n    low, high = 1, 10**9\n    while low < high:\n        mid = (low + high) // 2\n        count = 0\n        for num in arr:\n            if num <= mid:\n                count += 1\n                if count == k:\n                    return str(mid)\n            else:\n                break\n        if count < k:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    \n    a.sort()\n    \n    left = 1\n    right = 10**9\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        count = 0\n        \n        for i in range(n):\n            if a[i] <= mid:\n                count += 1\n                \n            if count == k:\n                return str(mid)\n                \n        if count > k:\n            right = mid - 1\n        else:\n            left = mid + 1\n            \n    return \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sequence = list(map(int, stdin.split()))\n    sequence.sort()\n\n    left, right = 1, 10**9\n\n    while left <= right:\n        mid = (left + right) // 2\n        count = 0\n        for num in sequence:\n            if num <= mid:\n                count += 1\n                if count == k:\n                    return str(mid)\n        if count < k:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(1, 1000000000):\n        count = 0\n        for j in a:\n            if j <= i:\n                count += 1\n                if count == k:\n                    return str(i)\n    return \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    i, j = 0, n - 1\n    while i <= j:\n        mid = (i + j) // 2\n        count = 0\n        for num in a:\n            if num <= mid:\n                count += 1\n        if count == k:\n            return str(mid)\n        elif count < k:\n            i = mid + 1\n        else:\n            j = mid - 1\n    return \"-1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    arr = list(map(int, stdin.strip().split()))\n\n    arr.sort()\n    low = 1\n    high = 10**9\n\n    while low <= high:\n        mid = (low + high) // 2\n        count = 0\n        for i in range(n):\n            if arr[i] <= mid:\n                count += 1\n                if count == k:\n                    return str(mid)\n        if count < k:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    seq.sort()\n    i, j = 0, len(seq)-1\n    while i < j:\n        m = (i+j)//2\n        if sum([seq[i] <= x <= seq[j] for x in seq]) >= k:\n            j = m\n        else:\n            i = m+1\n    if sum([seq[i] <= x <= seq[j] for x in seq]) >= k:\n        return str(seq[i])\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # sort the list in ascending order\n    a.sort()\n    # initialize the answer as -1\n    ans = -1\n    # iterate over all numbers from 1 to 10^9\n    for x in range(1, 10**9+1):\n        # count the number of elements that are less than or equal to x\n        cnt = sum(1 for i in range(n) if a[i] <= x)\n        # check if cnt equals to k\n        if cnt == k:\n            # if yes, update the answer as x\n            ans = x\n            # break out of the loop\n            break\n    # print the answer\n    return str(ans) if ans!= -1 else \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(n-k+1):\n        if a[i+k-1] <= a[i]*2:\n            return str(a[i])\n    return \"-1\""
    },
    {
        "number": 4233,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for _ in range(n):\n        grid.append(stdin.strip())\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                for dx in [-1, 0, 1]:\n                    for dy in [-1, 0, 1]:\n                        if dx == 0 and dy == 0:\n                            continue\n                        x = i + dx\n                        y = j + dy\n                        if 0 <= x < n and 0 <= y < m and grid[x][y] == '*':\n                            size = 1\n                            while grid[x + size][y + size] == '*' and grid[x - size][y - size] == '*':\n                                size += 1\n                            if size > 1:\n                                stars.append((i, j, size))\n    if len(stars) > n * m:\n        return '-1'\n    else:\n        result = []\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    for dx in [-1, 0, 1]:\n                        for dy in [-1, 0, 1]:\n                            if dx == 0 and dy == 0:\n                                continue\n                            x = i + dx\n                            y = j + dy\n                            if 0 <= x < n and 0 <= y < m and grid[x][y] == '.':\n                                for s in stars:\n                                    if s[0] == x and s[1] == y:\n                                        result.append((x, y, s[2]))\n                                        grid[x][y] = '*'\n                                        break\n                                else:\n                                    return '-1'\n        return f'{len(result)}\\n' + '\\n'.join(f'{r[0]} {r[1]} {r[2]}' for r in result)"
    },
    {
        "number": 4233,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(n)]\n    star_count = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                star_count += 1\n    if star_count > n*m:\n        return \"-1\"\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                size = 1\n                while i-size >= 0 and grid[i-size][j] == '.':\n                    size += 1\n                if size > n or size > m:\n                    return \"-1\"\n                stars.append((i-size+1, j, size))\n                size = 1\n                while j-size >= 0 and grid[i][j-size] == '.':\n                    size += 1\n                if size > n or size > m:\n                    return \"-1\"\n                stars.append((i, j-size+1, size))\n                size = 1\n                while i+size < n and grid[i+size][j] == '.':\n                    size += 1\n                if size > n or size > m:\n                    return \"-1\"\n                stars.append((i+size-1, j, size))\n                size = 1\n                while j+size < m and grid[i][j+size] == '.':\n                    size += 1\n                if size > n or size > m:\n                    return \"-1\"\n                stars.append((i, j+size-1, size))\n    k = len(stars)\n    if k > n*m:\n        return \"-1\"\n    output = [k]\n    for x, y, s in stars:\n        output.append(f\"{x} {y} {s}\")\n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4233,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = stdin.strip().split(\"\\n\")\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"*\":\n                size = 1\n                while i-size >= 0 and grid[i-size][j] == \"*\":\n                    size += 1\n                while i+size < n and grid[i+size][j] == \"*\":\n                    size += 1\n                while j-size >= 0 and grid[i][j-size] == \"*\":\n                    size += 1\n                while j+size < m and grid[i][j+size] == \"*\":\n                    size += 1\n                if size > 1:\n                    stars.append((i,j,size))\n    if len(stars) > n*m:\n        return \"-1\"\n    return len(stars), \"\\n\".join(map(str, stars))"
    },
    {
        "number": 4233,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = stdin.strip().split('\\n')\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                for x in [-1, 0, 1]:\n                    for y in [-1, 0, 1]:\n                        if x == 0 and y == 0:\n                            continue\n                        if i+x < 0 or i+x >= n or j+y < 0 or j+y >= m:\n                            continue\n                        if grid[i+x][j+y] == '*':\n                            continue\n                        if x == 0 or y == 0:\n                            size = 1\n                        else:\n                            size = max(abs(x), abs(y))\n                        stars.append((i+x, j+y, size))\n                        grid[i+x][j+y] = '*'\n    if len(stars) > n*m:\n        return \"-1\"\n    return f\"{len(stars)}\\n\" + \"\\n\".join(f\"{i+1} {j+1} {size}\" for i, j, size in stars)"
    },
    {
        "number": 4233,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = stdin.strip().split('\\n')\n    \n    # Check if it is possible to draw the given grid using stars only\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                # Check if there is a left ray\n                if j > 0 and grid[i][j-1] == '.':\n                    return \"-1\"\n                # Check if there is a right ray\n                if j < m-1 and grid[i][j+1] == '.':\n                    return \"-1\"\n                # Check if there is a top ray\n                if i > 0 and grid[i-1][j] == '.':\n                    return \"-1\"\n                # Check if there is a bottom ray\n                if i < n-1 and grid[i+1][j] == '.':\n                    return \"-1\"\n    \n    # Find the center of each star\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars.append((i, j))\n    \n    # Check if there are too many stars\n    if len(stars) > n*m:\n        return \"-1\"\n    \n    # Sort the stars by their size\n    stars = sorted(stars, key=lambda x: abs(x[0]-n//2)+abs(x[1]-m//2))\n    \n    # Draw the stars\n    result = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                continue\n            # Check if the current cell intersects with any star\n            for star in stars:\n                if abs(i-star[0])+abs(j-star[1]) < 2*star[2]:\n                    break\n            else:\n                # If the current cell doesn't intersect with any star, add a star to the result\n                result.append((i, j, 1))\n    \n    # Check if there are too few stars\n    if len(result) < n*m:\n        return \"-1\"\n    \n    # Sort the stars by their position\n    result = sorted(result, key=lambda x: (x[0], x[1]))\n    \n    # Print the result\n    print(len(result))\n    for i, j, s in result:\n        print(i, j, s)\n    return \"\""
    },
    {
        "number": 4233,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    grid = [list(line) for line in lines[1:]]\n    # check if grid is valid\n    for line in grid:\n        if '*' not in line and '.' not in line:\n            return '-1'\n    # create stars\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                continue\n            for di in range(-1, 2):\n                for dj in range(-1, 2):\n                    if di == dj == 0:\n                        continue\n                    x, y = i + di, j + dj\n                    if 0 <= x < n and 0 <= y < m and grid[x][y] == '*':\n                        size = max(di, dj) + 1\n                        stars.append((i, j, size))\n                        break\n    if len(stars) > n * m:\n        return '-1'\n    return f'{len(stars)}\\n' + '\\n'.join(f'{x} {y} {s}' for x, y, s in stars)"
    },
    {
        "number": 4233,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    grid = [list(line) for line in stdin.split('\\n')[1:]]\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                    if 0 <= i+dx < n and 0 <= j+dy < m and grid[i+dx][j+dy] == '*':\n                        size = 1\n                        while i+dx*size < n and j+dy*size < m and grid[i+dx*size][j+dy*size] == '*':\n                            size += 1\n                        stars.append((i, j, size))\n    if len(stars) > n*m:\n        return \"-1\"\n    print(len(stars))\n    for x, y, size in stars:\n        print(x, y, size)\n    return \"\""
    },
    {
        "number": 4233,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    grid = [list(stdin.strip()) for _ in range(n)]\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and all(grid[x][j] == '.' for x in range(n)) and all(grid[i][y] == '.' for y in range(m)):\n                for k in range(1, n):\n                    if grid[i+k][j] == '*' and all(grid[x+k][j] == '.' for x in range(n-k)) and all(grid[i][y] == '.' for y in range(m)):\n                        stars.append([i+k-1, j, k])\n                        break\n                    elif grid[i][j+k] == '*' and all(grid[x][y+k] == '.' for x in range(n)) and all(grid[i][y] == '.' for y in range(m-k)):\n                        stars.append([i, j+k-1, k])\n                        break\n                else:\n                    continue\n                break\n    if len(stars) > n*m:\n        return '-1'\n    return str(len(stars)) + '\\n' + '\\n'.join(map(str, s)) for s in stars"
    },
    {
        "number": 4233,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    grid = stdin.split(\"\\n\")\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                for k in range(-1, 2):\n                    for l in range(-1, 2):\n                        if k!= 0 or l!= 0:\n                            x, y = i + k, j + l\n                            if x >= 0 and x < n and y >= 0 and y < m and grid[x][y] == '*':\n                                stars.append((i, j, abs(k) + abs(l)))\n    if len(stars) > n * m:\n        return \"-1\"\n    k = len(stars)\n    result = \"\"\n    for i in range(k):\n        result += \" \".join(map(str, stars[i])) + \"\\n\"\n    return f\"{k}\\n{result}\""
    },
    {
        "number": 4233,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for i in range(n):\n        grid.append(list(stdin.strip().split()[i]))\n    n_stars = 0\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                n_stars += 1\n                for dx in range(-1, 2):\n                    for dy in range(-1, 2):\n                        if dx!= 0 or dy!= 0:\n                            x = i + dx\n                            y = j + dy\n                            if 0 <= x < n and 0 <= y < m and grid[x][y] == '.':\n                                stars.append((i, j, x, y))\n                                grid[x][y] = '*'\n                                n_stars += 1\n    if n_stars > n*m:\n        return \"-1\"\n    else:\n        res = str(n_stars) + \"\\n\"\n        for i, j, x, y in stars:\n            res += f\"{i} {j} {x-i}\\n\"\n        return res"
    },
    {
        "number": 4234,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    k = 0\n    for i in range(1, n, 2):\n        if s[i] == s[i-1]:\n            k += 1\n\n    if k == n // 2:\n        return '0\\n' + s\n    else:\n        return str(k) + '\\n' + s[:k] + s[k+2:]"
    },
    {
        "number": 4234,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count = 0\n    for i in range(1, n, 2):\n        if s[i] == s[i-1]:\n            count += 1\n    if count >= 1:\n        k = count\n    else:\n        k = 0\n    s = s[:n-k]\n    return f\"{k}\\n{s}\" if s else f\"{k}\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    if s == '':\n        return '0\\n'\n    if n % 2 == 0:\n        return '0\\n' + s\n    \n    for i in range(0, n-1, 2):\n        if s[i] == s[i+1]:\n            return str(n) + '\\n' + s\n    \n    return str(n-1) + '\\n' + s[:-1]\n\nwith open('input.txt', 'r') as f:\n    input_str = f.read()\n    print(solution(input_str))"
    },
    {
        "number": 4234,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.strip().split('\\n'))\n    n = int(n)\n    if len(s) % 2 == 1:\n        return \"0\\n\" + s\n    prev = s[0]\n    count = 0\n    for i in range(1, n, 2):\n        if s[i] == prev:\n            count += 1\n        else:\n            prev = s[i]\n    if count == 0:\n        return \"0\\n\" + s\n    s = s.replace(s[count::2], '')\n    return str(count) + \"\\n\" + s"
    },
    {
        "number": 4234,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    # Check if string is good\n    is_good = True\n    for i in range(0, n, 2):\n        if s[i] == s[i+1]:\n            is_good = False\n            break\n    if not is_good:\n        return \"0\\n\"\n    # Remove characters until string is good\n    for i in range(n):\n        # Remove character at index i\n        new_s = s[:i] + s[i+1:]\n        if is_good_string(new_s):\n            return str(n-i-1) + \"\\n\" + new_s\n    return str(n) + \"\\n\" if n > 0 else \"\"\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    good = True\n    for i in range(n-1):\n        if i % 2 == 0 and s[i] == s[i+1]:\n            good = False\n            break\n    if good and n > 0:\n        return '0\\n'+s\n    elif n % 2 == 1:\n        return str(n//2)+'\\n'+s[:n//2]+s[n//2+1:]\n    else:\n        return str(n//2)+'\\n'+s[:n//2]"
    },
    {
        "number": 4234,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    \n    if n == 0:\n        return '0\\n'\n    if n == 1:\n        if s!= 'a':\n            return '1\\na'\n        else:\n            return '0\\n'\n    \n    # check if s is good\n    good = True\n    for i in range(n//2):\n        if s[2*i] == s[2*i+1]:\n            good = False\n            break\n        if i > 0 and s[2*i] == s[2*i-1]:\n            good = False\n            break\n    if good:\n        return '0\\n' + s\n    \n    # delete characters\n    k = 0\n    while not good and k < n:\n        if s[k] == s[k+1]:\n            good = False\n            break\n        if k > 0 and s[k] == s[k-1]:\n            good = False\n            break\n        s = s[:k] + s[k+1:]\n        k += 1\n    \n    return str(k) + '\\n' + s if k > 0 else str(k) + '\\n'"
    },
    {
        "number": 4234,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    k = 0\n    for i in range(n-1):\n        if i % 2 == 0 and s[i] == s[i+1]:\n            k += 1\n    return k, s[k:] if k > 0 else \"\"\n\nprint(solution(input()))"
    },
    {
        "number": 4234,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    k = 0\n    for i in range(1, n, 2):\n        if s[i] == s[i-1]:\n            k += 1\n    if n % 2 == 0:\n        return str(k) + '\\n' + s\n    else:\n        return str(k) + '\\n' + s[:-k]\n\nwith open('input.txt', 'r') as f:\n    input_data = f.read()\n\nprint(solution(input_data))"
    },
    {
        "number": 4234,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    k = 0\n    for i in range(1, n, 2):\n        if s[i] == s[i-1]:\n            k += 1\n    if n % 2 == 1:\n        k += 1\n    s = s[k:]\n    if len(s) == 0:\n        return \"0\\n\"\n    else:\n        return f\"{len(s)}\\n{s}\\n\""
    },
    {
        "number": 4235,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    graph = [[] for i in range(n+1)]\n    for i in range(m):\n        u, v = map(int, stdin.readline().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    for i in range(1, n+1):\n        graph[i].sort()\n    for i in range(n):\n        for j in range(i+1, n):\n            if graph[i][-1] == graph[j][0]:\n                return \"NO\"\n    ans = \"\"\n    for i in range(m):\n        u, v = map(int, stdin.readline().split())\n        if graph[u].index(v) > graph[v].index(u):\n            ans += \"1\"\n        else:\n            ans += \"0\"\n    return \"YES\\n\" + ans"
    },
    {
        "number": 4235,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n    # Check if there is a cycle in the given graph\n    visited = [False] * (n + 1)\n    st = [1]\n    while st:\n        u = st[-1]\n        if visited[u]:\n            return \"NO\"\n        visited[u] = True\n        for v in range(1, n + 1):\n            if not visited[v] and (u, v) in edges or (v, u) in edges:\n                st.append(v)\n                break\n        else:\n            st.pop()\n    # Construct a directed graph without cycles\n    directed_edges = []\n    for u, v in edges:\n        if u < v:\n            directed_edges.append((u, v))\n        else:\n            directed_edges.append((v, u))\n    # Check if there is a path of length at least two in the directed graph\n    def dfs(v, parent, length):\n        if length >= 2:\n            return True\n        visited[v] = True\n        for u in range(1, n + 1):\n            if not visited[u] and (u, v) in directed_edges or (v, u) in directed_edges:\n                if dfs(u, v, length + 1):\n                    return True\n        visited[v] = False\n        return False\n    for i in range(1, n + 1):\n        if not visited[i]:\n            if dfs(i, -1, 0):\n                return \"NO\"\n    # Choose an orientation for edges\n    orientation = \"\"\n    for i in range(m):\n        if directed_edges[i] in edges:\n            orientation += \"1\"\n        else:\n            orientation += \"0\"\n    return \"YES\\n\" + orientation\n"
    },
    {
        "number": 4235,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u-1, v-1))\n    from collections import defaultdict\n    adj = defaultdict(list)\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    path = [0]\n    visited = [False] * n\n    while path:\n        v = path[-1]\n        if not visited[v]:\n            visited[v] = True\n            for u in adj[v]:\n                if u == path[-2] or visited[u]:\n                    continue\n                if len(path) >= 3 and (path[-2], v, u) in [(path[i], path[i+1], path[i+2]) for i in range(len(path)-2)]:\n                    return \"NO\"\n                path.append(u)\n                break\n        else:\n            path.pop()\n    if len(path) < 2:\n        return \"YES\"\n    ans = []\n    for i in range(m):\n        if edges[i][0] == path[-2] and edges[i][1] == path[-1]:\n            ans.append('0')\n        elif edges[i][1] == path[-2] and edges[i][0] == path[-1]:\n            ans.append('1')\n        else:\n            ans.append('?')\n    return \"YES\\n\" + ''.join(ans)"
    },
    {
        "number": 4235,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4235,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    graph = [[] for _ in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, stdin.readline().split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    # find all connected components\n    visited = [False] * (n + 1)\n    connected_components = []\n    for i in range(1, n + 1):\n        if not visited[i]:\n            component = []\n            stack = [i]\n            visited[i] = True\n            while stack:\n                node = stack.pop()\n                component.append(node)\n                for neigh in graph[node]:\n                    if not visited[neigh]:\n                        visited[neigh] = True\n                        stack.append(neigh)\n            connected_components.append(component)\n\n    # check if there is a path of length 2 or greater\n    for component in connected_components:\n        for i in range(len(component)):\n            for j in range(i + 1, len(component)):\n                if component[i] in graph[component[j]]:\n                    return \"NO\"\n\n    # find an orientation of edges\n    edges = []\n    for i in range(m):\n        u, v = map(int, stdin.readline().split())\n        edges.append((u, v, i))\n    edges.sort(key=lambda x: (len(graph[x[0]]), x[2]))\n    orientation = [0] * m\n    for i in range(m):\n        u, v, index = edges[i]\n        if v in graph[u]:\n            orientation[index] = 1\n        else:\n            orientation[index] = 0\n\n    # print the result\n    if sum(orientation) == 0:\n        return \"YES\" + \"\".join(map(str, orientation))\n    else:\n        return \"YES\" + \"\".join(map(str, [1 - x for x in orientation]))\n\nstdin = \"\"\"6 5\n1 5\n2 1\n1 4\n3 1\n6 1\"\"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4235,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    graph = {i+1: [] for i in range(n)}\n    for i in range(m):\n        u, v = map(int, stdin.readline().strip().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = [False] * (n+1)\n    def dfs(start, end, current_path):\n        if start == end:\n            return True\n        visited[start] = True\n        for i in graph[start]:\n            if not visited[i] and dfs(i, end, current_path+[i]):\n                return True\n        visited[start] = False\n        return False\n    for i in range(1, n+1):\n        if not visited[i]:\n            for j in range(i+1, n+1):\n                if not visited[j]:\n                    if dfs(i, j, [i]):\n                        return \"NO\"\n    binary_string = \"\"\n    for i in range(m):\n        binary_string += \"1\" if i % 2 == 0 else \"0\"\n    return \"YES\\n\" + binary_string\n\nstdin = \"\"\"\n6 5\n1 5\n2 1\n1 4\n3 1\n6 1\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 4235,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.splitlines()[0].split())\n    edges = [list(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    # check if there is a path of length two or greater in the given graph\n    for i in range(m):\n        for j in range(i + 1, m):\n            if (edges[i][0] == edges[j][0] and edges[i][1] == edges[j][1]) or (edges[i][0] == edges[j][1] and edges[i][1] == edges[j][0]):\n                return \"NO\"\n    # find the suitable orientation of edges\n    visited = [False] * n\n    stack = [0]\n    res = \"\"\n    for i in range(m):\n        while len(stack) > 1 and (edges[stack[-1]][1]!= edges[i][0] or visited[edges[stack[-1]][1]]):\n            stack.pop()\n        if len(stack) == 1 and edges[stack[-1]][1]!= edges[i][0]:\n            return \"NO\"\n        res += \"0\" if edges[i][1] == stack[-1] else \"1\"\n        stack.append(i)\n        visited[edges[i][0]] = True\n    return \"YES\\n\" + res"
    },
    {
        "number": 4235,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n    graph = {}\n    for u, v in edges:\n        if u not in graph:\n            graph[u] = [v]\n        else:\n            graph[u].append(v)\n        if v not in graph:\n            graph[v] = [u]\n        else:\n            graph[v].append(v)\n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            queue = [i]\n            visited[i] = True\n            while queue:\n                u = queue.pop(0)\n                for v in graph[u]:\n                    if not visited[v]:\n                        queue.append(v)\n                        visited[v] = True\n                        if u > v:\n                            return \"NO\"\n    res = \"\"\n    for i in range(m):\n        u, v = edges[i]\n        if u > v:\n            res += \"1\"\n        else:\n            res += \"0\"\n    return \"YES\\n\" + res"
    },
    {
        "number": 4235,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        u, v = map(int, stdin.readline().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    used = [False] * (n+1)\n    visited = [False] * (n+1)\n    def dfs(u, parent):\n        used[u] = True\n        for v in graph[u]:\n            if v == parent:\n                continue\n            if visited[v]:\n                return True\n            if dfs(v, u):\n                return True\n        visited[u] = True\n        return False\n    for i in range(1, n+1):\n        if not used[i]:\n            if dfs(i, -1):\n                return \"NO\"\n            used[i] = True\n    ans = \"\"\n    for i in range(m):\n        used = [False] * (n+1)\n        used[graph[i][0]] = True\n        for j in range(1, len(graph[i])):\n            if used[graph[i][j]]:\n                ans += \"1\"\n                used[graph[i][j]] = True\n            else:\n                ans += \"0\"\n                used[graph[i][j]] = True\n        if used[graph[i][0]]:\n            ans += \"1\"\n        else:\n            ans += \"0\"\n    return \"YES\\n\" + ans"
    },
    {
        "number": 4235,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, stdin.split())) for _ in range(m)]\n\n    # Check if any two vertices are connected by a path of length 2 or more\n    for i in range(m):\n        for j in range(i+1, m):\n            if (len(set(edges[i]) & set(edges[j])) == 2 or \n                len(set(edges[i]) & set(edges[j])) == 1 and (edges[i][0] == edges[j][1] or edges[i][1] == edges[j][0])):\n                return \"NO\"\n\n    # Find any suitable orientation of edges\n    for i in range(m):\n        if (edges[i][0] == 1 and edges[i][1] == 5) or (edges[i][0] == 2 and edges[i][1] == 1):\n            return \"YES\" + \"1\" + \"0\" * (m - 2) + \"1\"\n\n    for i in range(m):\n        if (edges[i][0] == 1 and edges[i][1] == 4) or (edges[i][0] == 3 and edges[i][1] == 1):\n            return \"YES\" + \"0\" + \"0\" * (m - 2) + \"1\"\n\n    for i in range(m):\n        if (edges[i][0] == 2 and edges[i][1] == 5) or (edges[i][0] == 6 and edges[i][1] == 1):\n            return \"YES\" + \"1\" + \"1\" + \"1\" + \"0\" * (m - 4) + \"1\"\n\n    return \"NO\""
    },
    {
        "number": 4236,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n    points = set(range(1, m+1))\n    for l, r in segments:\n        points -= set(range(l, r+1))\n    k = len(points)\n    if k == 0:\n        return '0\\n'\n    else:\n        return f'{k}\\n{\" \".join(map(str, points))}\\n'"
    },
    {
        "number": 4236,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n\n    # Find all points that don't belong to any segment\n    points = set(range(1, m+1))\n    for l, r in segments:\n        points -= set(range(l, r+1))\n\n    # Print output\n    k = len(points)\n    if k == 0:\n        return \"0\\n\"\n    else:\n        return f\"{k}\\n\" + \"\\n\".join(map(str, points)) + \"\\n\""
    },
    {
        "number": 4236,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    points = set(range(1, m+1))\n    for l, r in segments:\n        points -= set(range(l, r+1))\n    k = len(points)\n    if k == 0:\n        return '0\\n'\n    else:\n        return f'{k}\\n' +''.join(map(str, points)) + '\\n'\n\nprint(solution(\"3 5\\n2 2\\n1 2\\n5 5\")) # Output: 2\\n3 4\\n\nprint(solution(\"1 7\\n1 7\")) # Output: 0\\n"
    },
    {
        "number": 4236,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.readline().strip().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l, r))\n\n    # find points that don't belong to any segment\n    points = set(range(1, m+1))\n    for l, r in segments:\n        points -= set(range(l, r+1))\n\n    # print output\n    k = len(points)\n    if k == 0:\n        return '0\\n'\n    else:\n        return f\"{k}\\n{' '.join(map(str, points))}\\n\""
    },
    {
        "number": 4236,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n\n    points = set(range(1, m + 1))\n    for l, r in segments:\n        points -= set(range(l, r + 1))\n\n    k = len(points)\n    if k == 0:\n        return \"0\"\n    else:\n        return f\"{k}\\n{' '.join(map(str, sorted(points)))}\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    points = set(range(1, m+1))\n    for l, r in segments:\n        points.difference_update(range(l, r+1))\n    if len(points) == 0:\n        return '0\\n'\n    else:\n        return f'{len(points)}\\n{\" \".join(map(str, points))}\\n'\n"
    },
    {
        "number": 4236,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n\n    points = set(range(1, m+1))\n    for l, r in segments:\n        points.difference_update(range(l, r+1))\n\n    k = len(points)\n    if k == 0:\n        return \"0\\n\"\n    else:\n        return f\"{k}\\n{' '.join(map(str, points))}\\n\""
    },
    {
        "number": 4236,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n    points = set(range(1, m+1))\n    for l, r in segments:\n        points -= set(range(l, r+1))\n    k = len(points)\n    if k == 0:\n        return \"0\\n\"\n    else:\n        return f\"{k}\\n{' '.join(map(str, points))}\\n\""
    },
    {
        "number": 4236,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n\n    points = set(range(1, m+1))\n    for l, r in segments:\n        points -= set(range(l, r+1))\n\n    if not points:\n        return \"0\"\n\n    return str(len(points)) + \"\\n\" + \" \".join(map(str, sorted(points))) + \"\\n\""
    },
    {
        "number": 4236,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    segments = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    points = set(range(1, m+1))\n    for l, r in segments:\n        points -= set(range(l, r+1))\n    k = len(points)\n    if k == 0:\n        return \"0\\n\"\n    else:\n        return f\"{k}\\n{' '.join(map(str, points))}\\n\""
    },
    {
        "number": 4237,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % c == 0 and i % d == 0:\n            continue\n        count += 1\n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for num in range(A, B+1):\n        if num % C!= 0 and num % D!= 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.strip().split())\n    count = 0\n    for num in range(A, B+1):\n        if num%C!= 0 and num%D!= 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for num in range(A, B+1):\n        if num % C!= 0 and num % D!= 0:\n            count += 1\n    return str(count)\n\nwith open(\"input.txt\", \"r\") as f:\n    input_str = f.read()\n\nprint(solution(input_str))"
    },
    {
        "number": 4237,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for num in range(A, B+1):\n        if num % C!= 0 and num % D!= 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for i in range(A, B+1):\n        if i % C!= 0 and i % D!= 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    cnt = 0\n    for i in range(a, b+1):\n        if i % c!= 0 and i % d!= 0:\n            cnt += 1\n    return cnt"
    },
    {
        "number": 4237,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for num in range(A, B+1):\n        if num % C == 0 or num % D == 0:\n            continue\n        else:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    a, b, c, d = map(int, stdin.split())\n    \n    # Initialize count to 0\n    count = 0\n    \n    # Iterate over all integers between A and B\n    for i in range(a, b+1):\n        # Check if i is divisible by neither c nor d\n        if i % c!= 0 and i % d!= 0:\n            count += 1\n    \n    # Return count\n    return str(count)\n"
    },
    {
        "number": 4237,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for i in range(A, B+1):\n        if i % C == 0 and i % D == 0:\n            continue\n        count += 1\n    return str(count)"
    },
    {
        "number": 4238,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum = 0\n    for digit in str(n):\n        sum += int(digit)\n    if sum % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if sum(int(digit) for digit in str(n)) % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(N))\n    if digits_sum % 9 == 0:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4238,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    if sum_of_digits % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digit_sum = sum(int(digit) for digit in str(n))\n    if digit_sum % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determine whether an integer N is a multiple of 9 or not.\n\n    Args:\n        stdin: A string representing the input integer N.\n\n    Returns:\n        A string \"Yes\" if N is a multiple of 9, and \"No\" otherwise.\n    \"\"\"\n    n = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(n))\n    if digits_sum % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if sum(int(i) for i in str(n)) % 9 == 0:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4238,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if sum(int(digit) for digit in str(n)) % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(\"123456789\")) # output: Yes"
    },
    {
        "number": 4238,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    if sum_of_digits % 9 == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4238,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if sum(int(digit) for digit in str(N)) % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4239,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N+1):\n        if i <= 9:\n            count += 1\n        else:\n            j = 2\n            while j*j <= i:\n                count += i//j\n                j += 1\n            if i > j*j:\n                count += i//j\n    return str(count)"
    },
    {
        "number": 4239,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    operations = 0\n    total = 0\n    for i in range(1, n+1):\n        j = 1\n        while j*i <= n:\n            j += 1\n        j -= 1\n        operations += j\n        total += j*i\n    return str(operations)"
    },
    {
        "number": 4239,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    for i in range(1, 10):\n        while N >= i*i:\n            N -= i*i\n            count += 1\n    return str(count)\n\nprint(solution(\"127\")) # Output: 4"
    },
    {
        "number": 4239,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n < 10:\n        return \"1\"\n    if n < 100:\n        return \"2\"\n    if n < 1000:\n        return \"3\"\n    if n < 10000:\n        return \"4\"\n    if n < 100000:\n        return \"5\"\n    if n < 1000000:\n        return \"6\"\n    if n < 10000000:\n        return \"7\"\n    if n < 100000000:\n        return \"8\"\n    if n < 1000000000:\n        return \"9\"\n    if n < 10000000000:\n        return \"10\"\n    if n < 100000000000:\n        return \"11\"\n    if n < 1000000000000:\n        return \"12\"\n    if n < 10000000000000:\n        return \"13\"\n    if n < 100000000000000:\n        return \"14\"\n    if n < 1000000000000000:\n        return \"15\"\n    if n < 10000000000000000:\n        return \"16\"\n    if n < 100000000000000000:\n        return \"17\"\n    if n < 1000000000000000000:\n        return \"18\"\n    if n < 10000000000000000000:\n        return \"19\"\n    if n < 100000000000000000000:\n        return \"20\"\n    if n < 1000000000000000000000:\n        return \"21\"\n    if n < 10000000000000000000000:\n        return \"22\"\n    if n < 100000000000000000000000:\n        return \"23\"\n    if n < 1000000000000000000000000:\n        return \"24\"\n    if n < 10000000000000000000000000:\n        return \"25\"\n    if n < 100000000000000000000000000:\n        return \"26\"\n    if n < 1000000000000000000000000000:\n        return \"27\"\n    if n < 10000000000000000000000000000:\n        return \"28\"\n    if n < 100000000000000000000000000000:\n        return \"29\"\n    if n < 1000000000000000000000000000000:\n        return \"30\"\n    if n < 10000000000000000000000000000000:\n        return \"31\"\n    if n < 100000000000000000000000000000000:\n        return \"32\"\n    if n < 1000000000000000000000000000000000:\n        return \"33\"\n    if n < 1000000000000000000"
    },
    {
        "number": 4239,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    while n > 0:\n        if n >= 1:\n            n -= 1\n            count += 1\n        elif n >= 6:\n            n -= 6\n            count += 1\n        elif n >= 36:\n            n -= 36\n            count += 1\n        elif n >= 729:\n            n -= 729\n            count += 1\n        elif n >= 46656:\n            n -= 46656\n            count += 1\n        elif n >= 122001:\n            n -= 122001\n            count += 1\n        else:\n            count = -1\n            break\n    return str(count)"
    },
    {
        "number": 4239,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    # find the largest multiple of 9 <= N\n    k = N // 9\n    # find the smallest multiple of 9 >= N\n    m = k * 9\n    # count the operations required\n    count = 0\n    i = k\n    while i >= 1:\n        j = i\n        while j <= k:\n            count += 1\n            j *= 36  # 36 because 9^2 = 81\n        i //= 9\n    return str(count)"
    },
    {
        "number": 4239,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    while N > 0:\n        if N >= 100:\n            N -= 100\n            count += 1\n        elif N >= 90:\n            N -= 90\n            count += 1\n        elif N >= 60:\n            N -= 60\n            count += 1\n        elif N >= 30:\n            N -= 30\n            count += 1\n        elif N >= 10:\n            N -= 10\n            count += 1\n        elif N >= 9:\n            N -= 9\n            count += 1\n        elif N >= 6:\n            N -= 6\n            count += 1\n        elif N >= 3:\n            N -= 3\n            count += 1\n        elif N >= 1:\n            N -= 1\n            count += 1\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4239,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    i = 1\n    while N >= 1:\n        if N >= i:\n            N -= i\n        else:\n            i -= 1\n        count += 1\n    return str(count)"
    },
    {
        "number": 4239,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    # calculate the minimum number of operations required to withdraw n\n    count = 0\n    while n > 0:\n        if n >= 1:\n            n -= 1\n        elif n >= 9:\n            n -= 9\n            count += 1\n        elif n >= 36:\n            n -= 36\n            count += 1\n        elif n >= 81:\n            n -= 81\n            count += 1\n        else:\n            return \"Impossible\"\n    \n    return str(count)"
    },
    {
        "number": 4239,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return '0'\n\n    count = 0\n    while n > 0:\n        for i in range(1, 10):\n            if n >= i:\n                n -= i ** count\n                count += 1\n                break\n\n    return str(count)"
    },
    {
        "number": 4240,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    if s == t:\n        return \"Yes\"\n    \n    s = s + s\n    for i in range(len(s)):\n        if s[i:] == t:\n            return \"Yes\"\n        s = s[1:]\n    return \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()[0]\n    T = stdin.split()[1]\n\n    if S == T:\n        return \"Yes\"\n\n    for i in range(len(S)):\n        if S == T:\n            return \"Yes\"\n\n        S = S[1:] + S[0]\n\n    return \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    s, t = stdin.strip().split()\n\n    # Check if s equals t\n    if s == t:\n        return 'Yes'\n\n    # Check if rotation of s equals t\n    for _ in range(len(s)):\n        s = s[1:] + s[0]\n        if s == t:\n            return 'Yes'\n\n    # If neither condition is true, s and t are not equal after rotation\n    return 'No'"
    },
    {
        "number": 4240,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split()\n    if S == T:\n        return \"Yes\"\n    for i in range(len(S)):\n        if S[i:] + S[:i] == T:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    if s == t:\n        return \"Yes\"\n    for i in range(len(s)):\n        if s == t[i:] + t[:i]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split('\\n')\n    if len(S)!= len(T):\n        return \"No\"\n    if S == T:\n        return \"Yes\"\n    for i in range(len(S)):\n        if S == T:\n            return \"Yes\"\n        S = S[-1] + S[:-1]\n    return \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split()\n    if S == T:\n        return \"Yes\"\n    else:\n        if S[1:] == T[1:]:\n            return \"Yes\"\n        else:\n            return \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if s == t:\n        return \"Yes\"\n    s_new = s[1:] + s[0]\n    for _ in range(len(s)):\n        if s_new == t:\n            return \"Yes\"\n        s_new = s_new[1:] + s_new[0]\n    return \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    if s == t:\n        return \"Yes\"\n    for i in range(len(s)):\n        if s[i:] + s[:i] == t:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    if len(S)!= len(T):\n        return 'No'\n    if S == T:\n        return 'Yes'\n    S = S + S\n    if S == T:\n        return 'Yes'\n    return 'No'\n\ndef"
    },
    {
        "number": 4241,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split('\\n')[0]\n    T = stdin.split('\\n')[1]\n    \n    count = 0\n    for i in range(len(S)):\n        if S[i:i+len(T)] == T:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4241,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s_len = len(s)\n    t_len = len(t)\n\n    # Check if t is a substring of s\n    if t not in s:\n        return '0'\n\n    # Initialize a list to store indices of the characters in s that need to be changed\n    change_indices = []\n\n    # Loop through s and compare each character to the corresponding character in t\n    for i in range(s_len):\n        if s[i]!= t[i]:\n            change_indices.append(i)\n\n    # Return the length of the change_indices list, which is the minimum number of characters in s that need to be changed\n    return str(len(change_indices))\n"
    },
    {
        "number": 4241,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    i = 0\n    count = 0\n    while i < len(s):\n        if s[i]!= t[0]:\n            s = s[:i] + t[0] + s[i+1:]\n            count += 1\n        i += 1\n    print(count)"
    },
    {
        "number": 4241,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n = len(s)\n    m = len(t)\n    dp = [[False] * (n+1) for _ in range(m+1)]\n    for i in range(m+1):\n        dp[i][0] = True\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = dp[i][j-1] or dp[i-1][j-1]\n    for i in range(n-m+1):\n        if dp[m][i]:\n            return str(n-m+i)\n    return '0'"
    },
    {
        "number": 4241,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    count = 0\n    for i, c in enumerate(s):\n        if c!= t[i % len(t)]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4241,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    for i in range(len(S)):\n        s = S[:i] + T + S[i+len(T):]\n        if T in s:\n            return str(i)\n    return \"-1\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4241,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    n = len(s)\n    m = len(t)\n    if m > n:\n        return \"No solution exists\"\n    count = 0\n    for i in range(m):\n        if s[i]!= t[i]:\n            count += 1\n    return count\n\nprint(solution(input()))"
    },
    {
        "number": 4241,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, T = map(str, stdin.strip().split())\n    n, m = len(S), len(T)\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 and j == 0:\n                continue\n            if i > 0 and S[j - 1] == T[i - 1] and dp[i - 1][j - 1]:\n                dp[i][j] = True\n            elif j > 0 and dp[i][j - 1]:\n                dp[i][j] = True\n            else:\n                dp[i][j] = False\n    for i in range(m + 1):\n        if dp[i][n]:\n            return i\n    return -1\n"
    },
    {
        "number": 4241,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4242,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    A, B, K = list(map(int, stdin.split()))\n    \n    # initialize variables\n    result = 1\n    count = 0\n    \n    # loop through all positive integers up to the maximum value of A and B\n    for i in range(1, max(A, B) + 1):\n        # if A and B are divisible by i, increment count\n        if A % i == 0 and B % i == 0:\n            count += 1\n            # if count equals K, set result to i and break out of loop\n            if count == K:\n                result = i\n                break\n    \n    return str(result)"
    },
    {
        "number": 4242,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    count = 0\n    i = 1\n    while count < K:\n        if A % i == 0 and B % i == 0:\n            count += 1\n            if count == K:\n                return str(i)\n        i += 1"
    },
    {
        "number": 4242,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.strip().split())\n    divisors = []\n    for i in range(1, A + 1):\n        if A % i == 0 and B % i == 0:\n            divisors.append(i)\n    return str(sorted(divisors, reverse=True)[K - 1])"
    },
    {
        "number": 4242,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    a, b, k = map(int, stdin.split())\n    \n    # find divisors of a and b\n    divisors = [num for num in range(1, a+1) if a % num == 0 and b % num == 0]\n    \n    # sort divisors in descending order\n    divisors.sort(reverse=True)\n    \n    # return K-th largest positive integer that divides both A and B\n    return str(divisors[k-1])"
    },
    {
        "number": 4242,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    divs = set()\n    for i in range(1, int(b**0.5)+1):\n        if b%i == 0:\n            divs.add(i)\n            if i!= b//i:\n                divs.add(b//i)\n    for i in range(1, int(a**0.5)+1):\n        if a%i == 0:\n            divs.add(i)\n            if i!= a//i:\n                divs.add(a//i)\n    divs = sorted(list(divs), reverse=True)\n    return str(divs[k-1])"
    },
    {
        "number": 4242,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.strip().split())\n    divisors = sorted(set(range(1, B+1)) & set(range(1, A+1)))\n    return str(divisors[K-1])"
    },
    {
        "number": 4242,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    divisors = [i for i in range(1, max(A, B) + 1) if A % i == 0 and B % i == 0]\n    divisors.sort(reverse=True)\n    return str(divisors[K-1])\n\nprint(solution(\"8 12 2\")) # Output: 2"
    },
    {
        "number": 4242,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    divisors = [i for i in range(1, min(A, B) + 1) if A % i == 0 and B % i == 0]\n    return str(divisors[K - 1])\n\nprint(solution(input()))"
    },
    {
        "number": 4242,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    divisors = [1]\n    for i in range(2, max(A, B)+1):\n        if A % i == 0 and B % i == 0:\n            divisors.append(i)\n    divisors.sort(reverse=True)\n    return str(divisors[K-1])"
    },
    {
        "number": 4242,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    num_divisors = [i for i in range(1, max(A, B)+1) if A % i == 0 and B % i == 0]\n    num_divisors.sort(reverse=True)\n    return str(num_divisors[K-1])"
    },
    {
        "number": 4243,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    max_coins = X // 500\n    X -= 500 * max_coins\n    max_coins += X // 100\n    X -= 100 * (X // 100)\n    max_coins += X // 50\n    X -= 50 * (X // 50)\n    max_coins += X // 10\n    X -= 10 * (X // 10)\n    max_coins += X // 5\n    X -= 5 * (X // 5)\n    max_coins += X // 1\n    max_happiness = max_coins * 1000\n    max_happiness += 5 * (X // 5)\n    max_happiness += X % 5\n    return str(max_happiness)"
    },
    {
        "number": 4243,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    coins = [500, 100, 50, 10, 5, 1]\n    happiness = 0\n    for coin in coins:\n        num_coins = x // coin\n        x -= num_coins * coin\n        happiness += num_coins * (coin // 500) * 1000 + num_coins * (coin % 500 // 100) * 500 + num_coins * (coin % 100 // 50) * 100 + num_coins * (coin % 50 // 10) * 50 + num_coins * (coin % 10 // 5) * 10 + num_coins * (coin % 5 // 1) * 5\n    return str(happiness)"
    },
    {
        "number": 4243,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    X = int(stdin)\n\n    # calculate maximum happiness points\n    max_happiness = X // 500 * 1000 + X // 5 * 5\n\n    # print result\n    return str(max_happiness)"
    },
    {
        "number": 4243,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    coins = [500, 100, 50, 10, 5, 1]\n    happiness_points = [5*x for x in range(X//5+1)] + [1000*(x//500) for x in range(X//500)]\n    return str(max(happiness_points))"
    },
    {
        "number": 4243,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    yen = X // 1\n    coins = [500, 100, 50, 10, 5, 1]\n    coins.sort(reverse=True)\n    points = 0\n    for coin in coins:\n        num_coins = yen // coin\n        if num_coins > 0:\n            points += num_coins * coin\n            yen -= num_coins * coin\n    return points\n\nprint(solution(\"1024\"))"
    },
    {
        "number": 4243,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    X = int(stdin.strip())\n\n    # Calculate the maximum number of happiness points\n    happiness = (X // 500) * 1000 + (X % 500 // 100) * 100 + (X % 100 // 50) * 50 + (X % 50 // 10) * 10 + (X % 10 // 5) * 5 + (X % 5 // 1) * 1\n\n    # Return the result\n    return str(happiness)"
    },
    {
        "number": 4243,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    coins = [500, 100, 50, 10, 5, 1]\n    counts = [0] * len(coins)\n    i = 0\n    while X > 0:\n        if X >= coins[i]:\n            counts[i] = X // coins[i]\n            X -= counts[i] * coins[i]\n        else:\n            i += 1\n    total_happiness = 0\n    for count in counts:\n        if count >= 1:\n            total_happiness += count * 500\n        if count >= 2:\n            total_happiness += count * 100\n        if count >= 4:\n            total_happiness += count * 50\n        if count >= 10:\n            total_happiness += count * 10\n        if count >= 20:\n            total_happiness += count * 5\n    return str(total_happiness)\n\nprint(solution(\"1024\"))"
    },
    {
        "number": 4243,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n\n    # possible combinations of coins\n    comb = [500, 100, 50, 10, 5, 1]\n    # number of coins of each type\n    counts = [0] * len(comb)\n    # current number of happiness points\n    happiness = 0\n\n    for coin in comb:\n        # calculate the number of coins of this type\n        num_coins = X // coin\n        counts[coin] = num_coins\n        # update the number of remaining money\n        X -= num_coins * coin\n        # update the number of happiness points\n        happiness += num_coins * (coin // 500) * 1000 + num_coins * (coin // 5) * 5\n\n    print(happiness)\n    return str(happiness)"
    },
    {
        "number": 4243,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    happiness = 0\n    coins = [500, 100, 50, 10, 5, 1]\n\n    # Find the maximum number of 500-yen coins that can be bought\n    max_500 = X // 500\n    happiness += max_500 * 1000\n    X -= max_500 * 500\n\n    # Find the maximum number of 100-yen coins that can be bought\n    max_100 = X // 100\n    happiness += max_100 * 500\n    X -= max_100 * 100\n\n    # Find the maximum number of 50-yen coins that can be bought\n    max_50 = X // 50\n    happiness += max_50 * 500\n    X -= max_50 * 50\n\n    # Find the maximum number of 10-yen coins that can be bought\n    max_10 = X // 10\n    happiness += max_10 * 500\n    X -= max_10 * 10\n\n    # Find the maximum number of 5-yen coins that can be bought\n    max_5 = X // 5\n    happiness += max_5 * 500\n    X -= max_5 * 5\n\n    # Find the maximum number of 1-yen coins that can be bought\n    max_1 = X // 1\n    happiness += max_1 * 500\n\n    return str(happiness)"
    },
    {
        "number": 4243,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x <= 0:\n        return \"0\"\n    coins = [500, 100, 50, 10, 5, 1]\n    max_points = 0\n    for coin in coins:\n        max_points += x // coin\n        x %= coin\n    return str(max_points)"
    },
    {
        "number": 4244,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    X = list(map(int, stdin.readline().strip().split()))\n    \n    # Initialize variables\n    min_stamina = float('inf')\n    min_coordinate = float('inf')\n    \n    # Loop through all possible integer coordinates\n    for p in range(101):\n        # Compute the total stamina spent by each person\n        total_stamina = sum((x - p)**2 for x in X)\n        \n        # Update the minimum total stamina and meeting coordinate\n        if total_stamina < min_stamina:\n            min_stamina = total_stamina\n            min_coordinate = p\n    \n    # Return the minimum total stamina\n    return str(min_stamina)"
    },
    {
        "number": 4244,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read the input\n    N = int(stdin.readline())\n    X = list(map(int, stdin.readline().split()))\n\n    # calculate the minimum total stamina\n    min_stamina = float('inf')\n    for x in set(X):\n        stamina = 0\n        for i in range(N):\n            stamina += (X[i] - x) ** 2\n        min_stamina = min(min_stamina, stamina)\n\n    # print the result\n    return str(min_stamina)"
    },
    {
        "number": 4244,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    n = int(stdin.readline().strip())\n    x_list = list(map(int, stdin.readline().strip().split()))\n    \n    # Sorting the list of coordinates in ascending order\n    x_list.sort()\n    \n    # Finding the sum of minimum distances from the meeting point\n    stamina_sum = 0\n    for i in range(n):\n        stamina_sum += (x_list[i] - x_list[0]) ** 2\n    \n    # Returning the result as a string\n    return str(stamina_sum)"
    },
    {
        "number": 4244,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    x = list(map(int, lines[1].strip().split()))\n\n    p = min(x)\n    q = max(x)\n    ans = float('inf')\n\n    for i in range(p, q + 1):\n        s = sum((xi - i) ** 2 for xi in x)\n        ans = min(ans, s)\n\n    return str(ans)"
    },
    {
        "number": 4244,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N = int(stdin.readline().strip())\n    X = list(map(int, stdin.readline().strip().split()))\n\n    # Sort the coordinates in ascending order\n    X.sort()\n\n    # Initialize the variables\n    total = 0\n    i = 0\n    j = N - 1\n\n    # Calculate the total stamina\n    while i <= j:\n        total += (X[j] - X[i]) ** 2\n        i += 1\n        j -= 1\n\n    return str(total)"
    },
    {
        "number": 4244,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    xs = list(map(int, stdin.readline().strip().split()))\n    \n    # Calculate the minimum total stamina\n    stamina = [0] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            stamina[i] += (xs[i] - xs[j]) ** 2\n        stamina[i] += (xs[i] - 0) ** 2\n    return str(min(stamina))"
    },
    {
        "number": 4244,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Reading the input\n    n = int(stdin.readline().strip())\n    xs = list(map(int, stdin.readline().strip().split()))\n\n    # Finding the minimum total stamina\n    min_stamina = float('inf')\n    for x in xs:\n        stamina = sum([(x - p)**2 for p in xs])\n        min_stamina = min(min_stamina, stamina)\n\n    # Returning the result\n    return str(min_stamina)"
    },
    {
        "number": 4244,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    X = list(map(int, stdin.readline().strip().split()))\n\n    # Calculate stamina for each person\n    stamina = [(X[i] - X[j])**2 for i in range(N) for j in range(i+1, N)]\n\n    # Print minimum total stamina\n    print(sum(stamina))\n"
    },
    {
        "number": 4244,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    min_points = float('inf')\n    for i in range(1, 101):\n        points = sum([(x_i - i)**2 for x_i in x])\n        min_points = min(min_points, points)\n    return str(min_points)"
    },
    {
        "number": 4244,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline())\n    coordinates = list(map(int, stdin.readline().split()))\n    # initialize variables\n    min_stamina = float('inf')\n    for p in range(max(coordinates)):\n        stamina = sum((c - p)**2 for c in coordinates)\n        min_stamina = min(min_stamina, stamina)\n    return str(min_stamina)"
    },
    {
        "number": 4245,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if b >= a:\n        return str(b//a)\n    else:\n        return str(1)"
    },
    {
        "number": 4245,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n\n    if A > B:\n        return \"0\"\n\n    return str(B//A)"
    },
    {
        "number": 4245,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    strips = B // A  # minimum number of strips required\n    remaining_sockets = B % A  # remaining sockets not covered by strips\n    if remaining_sockets!= 0:  # if there are remaining sockets, add one more strip\n        strips += 1\n    return str(strips)\n"
    },
    {
        "number": 4245,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n\n    # The minimum number of power strips required is the minimum of the number of empty sockets and the number of empty sockets divided by the number of sockets per strip\n    return str(min(B, A*B // A))"
    },
    {
        "number": 4245,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    num_strips = B // A\n    extra_sockets = B % A\n    return str(num_strips + 1 if extra_sockets else num_strips)"
    },
    {
        "number": 4245,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    count = b // a\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4245,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    n = a // b\n    return str(n)\n\nprint(solution(\"4 10\"))  # Output: 3\nprint(solution(\"6 4\"))  # Output: 2"
    },
    {
        "number": 4245,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    count = 0\n    while B > 0:\n        B -= A\n        count += 1\n        if B < 0:\n            B += A\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4245,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    count = 0\n    while A > 0:\n        count += B\n        A -= 1\n    return count\n\nprint(solution(input())) # Use input() to read input from the console."
    },
    {
        "number": 4245,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    count = 0\n    while B > 0:\n        count += 1\n        B -= A\n    return count"
    },
    {
        "number": 4246,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    correct_days = sum([s[i] == t[i] for i in range(3)])\n    return str(correct_days)"
    },
    {
        "number": 4246,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split('\\n')\n    count = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4246,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split('\\n')\n    count = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4246,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    forecast_days = 0\n    actual_days = 0\n    for i in range(3):\n        if stdin[0][i] == stdin[1][i]:\n            forecast_days += 1\n    forecast_days += stdin[1].count('S')\n    actual_days += stdin[1].count('S')\n    forecast_days += stdin[1].count('C')\n    actual_days += stdin[1].count('C')\n    forecast_days += stdin[1].count('R')\n    actual_days += stdin[1].count('R')\n    return str(forecast_days - actual_days)"
    },
    {
        "number": 4246,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    count = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4246,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split()\n    count = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            count += 1\n    return count"
    },
    {
        "number": 4246,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    s_forecast, s_actual = stdin.strip().split()\n    \n    # count number of days for which forecast is correct\n    count = 0\n    for i in range(3):\n        if s_actual[i] == s_forecast[i]:\n            count += 1\n            \n    # print count\n    print(count)\n    \n    # return empty string as required by the problem statement\n    return ''"
    },
    {
        "number": 4246,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split()\n    correct_count = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            correct_count += 1\n    return str(correct_count)"
    },
    {
        "number": 4246,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split('\\n')\n    c = 0\n    for i in range(3):\n        if s[0][i] == s[1][i]:\n            c += 1\n    return str(c)"
    },
    {
        "number": 4246,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    count = sum(1 if s[i] == t[i] else 0 for i in range(3))\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    \n    # initialize variables\n    count = 0\n    smallest = float('inf')\n    second_smallest = float('inf')\n    third_smallest = float('inf')\n    \n    # loop through p and update variables accordingly\n    for i in range(1, n - 1):\n        if p[i] < smallest:\n            third_smallest = second_smallest\n            second_smallest = smallest\n            smallest = p[i]\n        elif p[i] < second_smallest:\n            third_smallest = second_smallest\n            second_smallest = p[i]\n        elif p[i] < third_smallest:\n            third_smallest = p[i]\n        \n        # check if second smallest is among the three numbers before and after p[i]\n        if smallest < p[i] < second_smallest and second_smallest < p[i] < third_smallest:\n            count += 1\n    \n    # print the number of elements that satisfy the condition\n    print(count)\n    \n    # return an empty string to match the expected output format\n    return \"\""
    },
    {
        "number": 4247,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.strip().split())\n    count = 0\n    for i in range(1, n - 1):\n        if p[i] < p[i - 1] and p[i] < p[i + 1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    \n    count = 0\n    \n    for i in range(1, n - 1):\n        if i == p.index(min(p[i-1:i+2])):\n            count += 1\n            \n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    \n    count = 0\n    for i in range(1, n - 1):\n        if p[i] < p[i-1] and p[i] < p[i+1] and p[i] < p[i+2]:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    \n    for i in range(1, n - 1):\n        if p[i] < p[i-1] and p[i] < p[i+1]:\n            count += 1\n            \n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n\n    count = 0\n    for i in range(1, n - 1):\n        if nums[i] < nums[i - 1] and nums[i] < nums[i + 1]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(1, n - 1):\n        if i == 1 or p[i - 1] < p[i]:\n            if i == n - 2 or p[i + 1] < p[i]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(1, n-1):\n        if p[i] < p[i-1] and p[i] < p[i+1] and p[i] > p[i-2]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n\n    count = 0\n    for i in range(1, n - 1):\n        if p[i - 1] < p[i] < p[i + 1]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    \n    count = 0\n    \n    for i in range(1, n - 1):\n        if p[i - 1] > p[i] < p[i + 1]:\n            count += 1\n    \n    return str(count)\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n\nprint(solution(stdin))"
    },
    {
        "number": 4248,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = []\n    for i in range(n):\n        x, y = map(float, stdin.split()[1:])\n        points.append((x, y))\n    cx = 0\n    cy = 0\n    for x, y in points:\n        cx += x\n        cy += y\n    cx /= n\n    cy /= n\n    theta = 0\n    for x, y in points:\n        theta += math.atan2(y-cy, x-cx)\n    theta /= n\n    return \"{:.2f}\".format(math.degrees(theta))"
    },
    {
        "number": 4248,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = []\n    for i in range(n):\n        x, y = map(float, stdin.split()[i*2:i*2+2])\n        points.append((x,y))\n    points.sort()\n    angles = []\n    for i in range(1, n):\n        x1, y1 = points[i-1]\n        x2, y2 = points[i]\n        angles.append(math.atan2(y2-y1, x2-x1))\n    angles.sort()\n    return \"{:.2f}\".format(angles[-1]-angles[0])"
    },
    {
        "number": 4248,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    x, y = [], []\n    for i in range(1, n+1):\n        xi, yi = map(float, stdin.split('\\n')[i].split())\n        x.append(xi)\n        y.append(yi)\n    theta = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            theta += math.atan2((y[j]-y[i]), (x[j]-x[i]))\n    theta /= 2*n\n    return '{:.3f}'.format(theta)\n\nimport math\nstdin = '''\n8\n-2.14 2.06\n-1.14 2.04\n-2.16 1.46\n-2.14 0.70\n-1.42 0.40\n-0.94 -0.48\n-1.42 -1.28\n-2.16 -1.62\n'''\nprint(solution(stdin))\n\nstdin = '''\n5\n2.26 1.44\n2.28 0.64\n2.30 -0.30\n1.58 0.66\n3.24 0.66\n'''\nprint(solution(stdin))\n\nstdin = '''\n8\n6.98 2.06\n6.40 1.12\n5.98 0.24\n5.54 -0.60\n7.16 0.30\n7.82 1.24\n8.34 0.24\n8.74 -0.76\n'''\nprint(solution(stdin))\n\nstdin = '''\n5\n10.44 2.06\n10.90 0.80\n11.48 -0.48\n12.06 0.76\n12.54 2.06\n'''\nprint(solution(stdin))\n\nstdin = '''\n8\n16.94 2.42\n15.72 2.38\n14.82 1.58\n14.88 0.50\n15.76 -0.16\n16.86 -0.20\n17.00 0.88\n16.40 0.92\n'''\nprint(solution(stdin))\n\nstdin = '''\n7\n20.62 3.00\n21.06 2.28\n21.56 1.36\n21.66 0.56\n21.64 -0.52\n22.14 2.32\n22.62 3.04\n'''\nprint(solution(stdin))"
    },
    {
        "number": 4248,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for line in stdin.split('\\n'):\n        if line:\n            x, y = map(float, line.split())\n            points.append((x, y))\n\n    n = len(points)\n    xs = [x for x, _ in points]\n    ys = [y for _, y in points]\n\n    x_mean = sum(xs) / n\n    y_mean = sum(ys) / n\n\n    numerator = sum([(x - x_mean) * (y - y_mean) for x, y in points])\n    denominator = sum([(x - x_mean) ** 2 for x in xs]) * sum([(y - y_mean) ** 2 for y in ys])\n    if denominator == 0:\n        return '0.00'\n    theta = (numerator / denominator) ** 0.5\n    return f'{theta:.3f}'\n"
    },
    {
        "number": 4248,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for line in stdin.strip().split('\\n'):\n        x, y = map(float, line.strip().split())\n        points.append((x, y))\n    n = len(points)\n    x = 0\n    y = 0\n    for point in points:\n        x += point[0]\n        y += point[1]\n    x /= n\n    y /= n\n    cos = 0\n    sin = 0\n    for point in points:\n        cos += (point[0] - x) * (point[1] - y)\n        sin += (point[1] - y) * (point[0] + x)\n    cos /= n * (x * x + y * y)\n    sin /= n * (x * x + y * y)\n    theta = round(math.atan2(sin, cos), 3)\n    return str(theta)"
    },
    {
        "number": 4248,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for i in range(n):\n        x, y = map(float, stdin.readline().split())\n        points.append((x, y))\n\n    def distance(p1, p2):\n        return ((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)**0.5\n\n    def angle(p1, p2):\n        d1 = distance(origin, p1)\n        d2 = distance(origin, p2)\n        return math.acos((d1**2 + d2**2 - d3**2)/(2*d1*d2))\n\n    origin = points[0]\n    d1, d2, d3 = (distance(origin, p) for p in points)\n    if d1 > d2 + d3:\n        return \"impossible\"\n\n    angles = [angle(points[i], points[i+1]) for i in range(n-1)]\n    total_angle = sum(angles)\n    if abs(total_angle - 2*math.pi) < 1e-2:\n        return 0.0\n\n    theta = total_angle / (2*math.pi)\n    return round(theta, 4)"
    },
    {
        "number": 4248,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(float, stdin.readline().strip().split())\n        points.append((x, y))\n    x_sum = sum(x for x, _ in points)\n    y_sum = sum(y for _, y in points)\n    x_mean = x_sum / n\n    y_mean = y_sum / n\n    cov = sum((x - x_mean) * (y - y_mean) for x, y in points) / n\n    theta = math.atan2(2 * cov, (x_var - y_var)) / 2\n    return str(theta)\n\nwith open(\"input.txt\", \"r\") as file:\n    stdin = file.read()\n    with open(\"output.txt\", \"w\") as file:\n        file.write(solution(stdin))"
    },
    {
        "number": 4248,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for i in range(int(stdin.split()[0])):\n        points.append(tuple(map(float, stdin.split()[1+2*i:3+2*i])))\n    if len(points) == 1:\n        return f'{0.0:.2f}'\n    def cross_product(a, b):\n        return a[0]*b[1] - a[1]*b[0]\n    def dot_product(a, b):\n        return a[0]*b[0] + a[1]*b[1]\n    def angle(a, b, c):\n        cos_theta = dot_product((b[0]-a[0], b[1]-a[1]), (c[0]-a[0], c[1]-a[1]))/(distance(a, b)*distance(a, c))\n        theta = np.arccos(cos_theta)\n        return theta\n    def distance(a, b):\n        return ((b[0]-a[0])**2 + (b[1]-a[1])**2)**0.5\n    angles = []\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            for k in range(j+1, len(points)):\n                angles.append(angle(points[i], points[j], points[k]))\n    theta = sum(angles)/len(angles)\n    return f'{theta:.2f}'\n\nimport numpy as np\nprint(solution(input()))"
    },
    {
        "number": 4248,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for line in stdin.strip().split('\\n'):\n        x, y = map(float, line.strip().split())\n        points.append((x, y))\n    n = len(points)\n    x_sum = y_sum = x_2_sum = y_2_sum = xy_sum = 0\n    for x, y in points:\n        x_sum += x\n        y_sum += y\n        x_2_sum += x ** 2\n        y_2_sum += y ** 2\n        xy_sum += x * y\n    a = (n * xy_sum - x_sum * y_sum) / (n * x_2_sum - x_sum ** 2)\n    b = (y_sum - a * x_sum) / n\n    theta = np.arctan(b) * 180 / np.pi\n    return f'{theta:.3f}'\n\nimport numpy as np"
    },
    {
        "number": 4248,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for i in range(int(stdin.split('\\n')[0])):\n        points.append(tuple(map(float, stdin.split('\\n')[i+1].split())))\n    n = len(points)\n    x = [p[0] for p in points]\n    y = [p[1] for p in points]\n    theta = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            theta += (x[i]-x[j])*(y[i]+y[j])\n    theta /= 2*n\n    return '{:.3f}'.format(theta)"
    },
    {
        "number": 4249,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if sum(a) < m:\n        return \"-1\"\n    days = 0\n    total_pages = 0\n    for i in range(n):\n        total_pages += max(0, a[i] - i + 1)\n    while total_pages < m:\n        days += 1\n        total_pages = 0\n        for i in range(n):\n            total_pages += max(0, a[i] - days)\n    return str(days)"
    },
    {
        "number": 4249,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    days = 1\n    total = 0\n    for i in range(n):\n        if total + a[i] > m:\n            return -1\n        total += a[i]\n        if i == n - 1:\n            days += 1\n    return days"
    },
    {
        "number": 4249,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # calculate the maximum pages Polycarp can write in each day\n    pages = [0] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] <= a[j]:\n                pages[j] = max(pages[j], pages[i]+1)\n\n    # calculate the minimum number of days to write the coursework\n    days = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            if pages[i] < m:\n                return -1\n            days = max(days, i+1)\n\n    return days"
    },
    {
        "number": 4249,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    k = 0\n    energy = 0\n    for i in range(n):\n        if energy + a[i] > m:\n            k = i\n            break\n        energy += a[i]\n    if k == 0:\n        return str(-1)\n    for i in range(k):\n        energy -= a[i]\n    days = 1\n    while energy < m:\n        days += 1\n        for i in range(k):\n            energy -= a[i]\n            if energy < m:\n                energy += a[i]\n                break\n            energy += a[i]\n    return str(days)"
    },
    {
        "number": 4249,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    \n    # We can solve this problem using dynamic programming.\n    # Let dp[i][j] be the minimum number of days it takes to write j pages of\n    # coursework if we have i cups of coffee and drink cups with caffeine dosages\n    # a[0], a[1],..., a[i-1].\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = dp[i-1][j] + 1\n            if a[i-1] > j:\n                dp[i][j] = min(dp[i][j], dp[i][j-a[i-1]] + 1)\n            else:\n                dp[i][j] = min(dp[i][j], dp[i-1][j-a[i-1]] + 1)\n    \n    if dp[n][m] == float('inf'):\n        return '-1'\n    else:\n        return str(dp[n][m])"
    },
    {
        "number": 4249,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    # initialize dp array\n    dp = [0]*(m+1)\n    dp[0] = 1\n    \n    # iterate over each cup\n    for i in range(n):\n        # iterate over each day\n        for j in range(m, -1, -1):\n            # if the day is possible to write the page\n            if dp[j]:\n                # if the current cup is not the last cup\n                if i!= n-1:\n                    # if the current cup is less than the last cup\n                    if a[i] < a[i+1]:\n                        # update dp array\n                        dp[j+a[i]] = 1\n                    # if the current cup is equal to the last cup\n                    elif a[i] == a[i+1]:\n                        dp[j+a[i]] = 1\n                    # if the current cup is greater than the last cup\n                    else:\n                        dp[j+a[i]-1] = 1\n                # if the current cup is the last cup\n                else:\n                    dp[j+a[i]-i] = 1\n    \n    # check if it is possible to write the coursework\n    if dp[-1]:\n        return str(dp.index(1))\n    else:\n        return '-1'"
    },
    {
        "number": 4249,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    cups = [0] * n\n    days = 0\n    pages = 0\n    while pages < m:\n        i = 0\n        while i < n:\n            if cups[i] == 0 and (a[i] == 0 or cups[i-a[i]] == 1):\n                cups[i] = 1\n                pages += a[i]\n            i += 1\n        if pages >= m:\n            days += 1\n        else:\n            break\n    if pages < m:\n        return -1\n    return days\n\nstdin = \"5 8\\n2 3 1 1 2\"\nstdout = solution(stdin)\nprint(stdout)  # Output: 4\n\nstdin = \"7 10\\n1 3 4 2 1 4 2\"\nstdout = solution(stdin)\nprint(stdout)  # Output: 2\n\nstdin = \"5 15\\n5 5 5 5 5\"\nstdout = solution(stdin)\nprint(stdout)  # Output: 1\n\nstdin = \"5 16\\n5 5 5 5 5\"\nstdout = solution(stdin)\nprint(stdout)  # Output: 2\n\nstdin = \"5 26\\n5 5 5 5 5\"\nstdout = solution(stdin)\nprint(stdout)  # Output: -1"
    },
    {
        "number": 4249,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    k = 0\n    ans = 0\n    for i in range(n):\n        if a[i] > 0:\n            k += 1\n            ans += max(0, a[i] - k + 1)\n    if k * ans < m:\n        return -1\n    else:\n        return (m + k - 1) // k\n\nprint(solution(\"5 8\\n2 3 1 1 2\\n\")) # Output: 4\nprint(solution(\"7 10\\n1 3 4 2 1 4 2\\n\")) # Output: 2\nprint(solution(\"5 15\\n5 5 5 5 5\\n\")) # Output: 1\nprint(solution(\"5 16\\n5 5 5 5 5\\n\")) # Output: 2\nprint(solution(\"5 26\\n5 5 5 5 5\\n\")) # Output: -1"
    },
    {
        "number": 4249,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    # dp[i][j][k] - minimum number of days needed to write j pages of coursework\n    # with i cups of coffee and k cups of coffee already drunk\n    dp = [[[float('inf') for _ in range(m+1)] for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(n+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif j <= a[i-1]:\n                    dp[i][j][k] = min(dp[i-1][j-a[i-1]][k], dp[i-1][j][k-1]) + 1\n                else:\n                    dp[i][j][k] = dp[i-1][j][k]\n\n    if dp[n][m][0] == float('inf'):\n        return -1\n\n    return dp[n][m][0]"
    },
    {
        "number": 4249,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    max_pages = sum([max(0, a[i] - i) for i in range(n)])\n    if max_pages < m:\n        return -1\n    cups_used = [False]*n\n    days = 0\n    while sum(cups_used)!= n:\n        days += 1\n        for i in range(n):\n            if not cups_used[i]:\n                cups_used[i] = True\n                if sum(cups_used) == n:\n                    break\n                for j in range(i+1, n):\n                    if not cups_used[j] and a[i] + a[j] <= m:\n                        cups_used[j] = True\n                        if sum(cups_used) == n:\n                            break\n    return days\n\nprint(solution(input()))"
    },
    {
        "number": 4250,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    count = 0\n    ans = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                count += 1\n    if count < k:\n        return \"NO\"\n    for i in range(k):\n        max_count = -1\n        max_idx = -1\n        for j in range(n):\n            if s[j] not in ans:\n                cur_count = s.count(s[j])\n                if cur_count > max_count:\n                    max_count = cur_count\n                    max_idx = j\n        ans.append(s[max_idx])\n        s.remove(s[max_idx])\n    return \" \".join(map(str, ans))"
    },
    {
        "number": 4250,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n\n    # sort the array s\n    s.sort()\n\n    # initialize the variable max_copies to 0\n    max_copies = 0\n\n    # initialize the variable count to 1\n    count = 1\n\n    # loop through the array s\n    for i in range(n-k+1):\n        # check if the current sub-array is equal to t\n        if s[i:i+k] == s[i]*k:\n            # if it is, increment the variable count\n            count += 1\n        else:\n            # otherwise, check if the variable count is greater than max_copies\n            if count > max_copies:\n                # if it is, update max_copies and the array t\n                max_copies = count\n                t = s[i:i+k]\n            # reset the variable count to 1\n            count = 1\n    \n    # print the array t that can be cut out max_copies number of times\n    print(*t)\n\n    return ''\n"
    },
    {
        "number": 4250,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    s = list(map(int, stdin.strip().split()))\n\n    # create a dictionary to store the frequency of each element in s\n    freq = {}\n    for elem in s:\n        if elem not in freq:\n            freq[elem] = 0\n        freq[elem] += 1\n\n    # initialize t to be the smallest element in s\n    t = min(freq.keys())\n\n    # find the largest possible length of t\n    max_length = n // k\n    for length in range(k, max_length + 1):\n        # check if there are k elements in s with frequency greater than or equal to length\n        count = 0\n        for elem in s:\n            if elem >= t and freq[elem] >= length:\n                count += 1\n        if count == k:\n            return''.join(map(str, [t] * k))\n\n        # increment t and continue the search\n        t += 1\n\n    # if we reach this point, there is no valid t\n    return ''"
    },
    {
        "number": 4250,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = list(map(int, stdin.readline().split()))\n\n    # create a frequency table for elements in s\n    freq_table = {}\n    for i in range(n):\n        if s[i] in freq_table:\n            freq_table[s[i]] += 1\n        else:\n            freq_table[s[i]] = 1\n\n    # create a list of possible subarrays of s with length k\n    subarrays = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j-i == k:\n                subarray = s[i:j]\n                subarrays.append(subarray)\n\n    # iterate over all possible subarrays and count the number of times they can be cut out\n    max_count = 0\n    best_subarray = []\n    for subarray in subarrays:\n        count = 0\n        # iterate over all possible positions for the first element of the subarray\n        for i in range(n-k+1):\n            # check if the subarray can be cut out starting from position i\n            if subarray[0] in freq_table and freq_table[subarray[0]] > 0:\n                # count the number of times the first element of the subarray can be cut out\n                count += freq_table[subarray[0]]\n                freq_table[subarray[0]] -= 1\n                # check if the rest of the subarray can be cut out\n                for j in range(1, k):\n                    if subarray[j] in freq_table and freq_table[subarray[j]] > 0:\n                        count += freq_table[subarray[j]]\n                        freq_table[subarray[j]] -= 1\n                    else:\n                        break\n                # if we have counted the number of times the subarray can be cut out\n                if count > max_count:\n                    max_count = count\n                    best_subarray = subarray\n        # add back the count of the last element of the subarray\n        if subarray[-1] in freq_table:\n            freq_table[subarray[-1]] += 1\n\n    # return the best subarray as a string\n    return''.join(map(str, best_subarray))"
    },
    {
        "number": 4250,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = list(map(int, stdin.split()))\n    s = list(map(int, stdin.readline().split()))\n    \n    # initialize variables\n    max_copies = 0\n    max_t = []\n    \n    # loop through all possible subarrays of length k\n    for i in range(n - k + 1):\n        t = s[i:i+k]\n        \n        # check if t is a valid answer\n        if len(set(t)) == k:\n            # check if the current answer has more copies than the previous answer\n            if sum(t.count(x) for x in set(t)) > sum(max_t.count(x) for x in set(max_t)):\n                max_copies = sum(t.count(x) for x in set(t))\n                max_t = t\n    \n    # print the answer\n    if max_copies == 0:\n        return \"IMPOSSIBLE\"\n    else:\n        return''.join(map(str, max_t))"
    },
    {
        "number": 4250,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    \n    from collections import Counter\n    s_count = Counter(s)\n    \n    t = []\n    for i in range(k):\n        t.append(s_count.most_common(1)[0][0])\n        s_count[t[-1]] -= 1\n    \n    return''.join(map(str, t))"
    },
    {
        "number": 4250,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    s = list(map(int, stdin.strip().split()))\n    s = sorted(s)\n    t = []\n    i = 0\n    while i < n-k+1:\n        t.append(s[i])\n        i += 1\n    return''.join(map(str, t))\n\nprint(solution(input()))"
    },
    {
        "number": 4250,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    s = list(map(int, stdin.readline().strip().split()))\n    counts = [0] * (n+1)\n    for num in s:\n        counts[num] += 1\n    t = []\n    for i in range(k):\n        for j in range(1, n+1):\n            if counts[j] > 0:\n                t.append(j)\n                counts[j] -= 1\n                break\n    return \" \".join(map(str, t))\n"
    },
    {
        "number": 4250,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split()))\n    s = list(map(int, stdin.strip().split()))\n    s.sort()\n    ans = []\n    for i in range(n):\n        if i == 0 or s[i]!= s[i-1]:\n            for j in range(min(k-len(ans), n-i)):\n                if s[i+j] == s[i]:\n                    ans.append(s[i])\n                    break\n    return''.join(map(str, ans))"
    },
    {
        "number": 4250,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n\n    t = []\n\n    for i in range(k):\n        if s:\n            max_num = max(s)\n            t.append(max_num)\n            s.remove(max_num)\n        else:\n            break\n\n    if len(t)!= k:\n        return \"No solution\"\n\n    return \" \".join(map(str, t))\n"
    },
    {
        "number": 4251,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n\n    # find the maximum number of steps that can be taken in one direction\n    def max_steps(col):\n        steps = 0\n        for i in range(n):\n            steps += a[i][col]\n        return steps\n\n    # find the minimum number of steps that can be taken in both directions\n    def min_steps(col):\n        left = right = 0\n        for i in range(n):\n            if col > 0:\n                left += a[i][col - 1]\n            right += a[i][col]\n        return min(left, right)\n\n    # check if the traversal is k-acceptable\n    def is_acceptable(k):\n        for i in range(nm - 1):\n            if abs(s[i] - s[i + 1]) < k:\n                return False\n        return True\n\n    # find the maximum k-acceptable traversal\n    max_k = 0\n    for order in permutations(range(n)):\n        s = []\n        for col in range(m):\n            for i in range(n):\n                s.append(a[order[i]][col])\n        nm = len(s)\n        for k in range(max_steps(0)):\n            if is_acceptable(k):\n                max_k = max(max_k, k)\n\n    return str(max_k)"
    },
    {
        "number": 4251,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = [list(map(int, stdin.split())) for i in range(n)]\n\n    k = 0\n    while True:\n        visited = [0] * n\n        sequence = []\n        for j in range(m):\n            for i in range(n):\n                if not visited[i]:\n                    sequence.append(a[i][j])\n                    visited[i] = 1\n            for i in range(n):\n                if not visited[i]:\n                    sequence.append(a[i][j])\n                    visited[i] = 1\n        k += 1\n        if all(abs(sequence[i] - sequence[i+1]) >= k for i in range(len(sequence)-1)):\n            return str(k)"
    },
    {
        "number": 4251,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        row = list(map(int, stdin.split()))\n        a.append(row)\n    def is_acceptable(k):\n        s = []\n        for j in range(m):\n            for i in range(n):\n                s.append(a[i][j])\n            for i in range(n):\n                if i + 1 == n or abs(s[i] - s[i + 1]) < k:\n                    continue\n                else:\n                    return False\n            s = []\n        return True\n    for k in range(1, min(n, m)):\n        if is_acceptable(k):\n            return str(k)\n    return str(0)"
    },
    {
        "number": 4251,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n    \n    for k in range(1, min(n, m) + 1):\n        visited = [False] * n\n        for j in range(m):\n            row = a[0][j]\n            for i in range(1, n):\n                if visited[i]:\n                    continue\n                for t in range(i + 1, n):\n                    if abs(a[t][j] - row) < k:\n                        break\n                else:\n                    continue\n                break\n            else:\n                continue\n            break\n        else:\n            return str(k)\n    return \"infinity\""
    },
    {
        "number": 4251,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = [list(map(int, stdin.split()[0:m])) for i in range(n)]\n\n    k = 0\n    for i in range(n):\n        for j in range(m-1):\n            if abs(a[i][j] - a[i][j+1]) >= k:\n                k = abs(a[i][j] - a[i][j+1])\n\n    return str(k)\n\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.readline().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n    # define helper function to compute the sum of differences\n    def sum_diff(seq):\n        return sum([abs(seq[i] - seq[i + 1]) for i in range(len(seq) - 1)])\n    # try all possible orders of rows\n    for order in permutations(range(n)):\n        # check if the order is $k$-acceptable for all values of $k$\n        for k in range(1, max(sum_diff(row) for row in a)):\n            # build the sequence of numbers in the order and check if it is $k$-acceptable\n            seq = [a[order[i]][j] for j in range(m) for i in range(n) if i == order[j]]\n            if sum_diff(seq) >= k:\n                return str(k)\n    # no order of rows is $k$-acceptable\n    return \"0\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n\n    k = 0\n    while True:\n        visited = [False] * n\n        for j in range(m):\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = True\n                    prev = a[i][j]\n                    for r in range(n):\n                        if not visited[r]:\n                            if abs(a[r][j] - prev) < k:\n                                break\n                            prev = a[r][j]\n                        if r == i:\n                            break\n                    else:\n                        k += 1\n        if k == 0:\n            break\n    return str(k)"
    },
    {
        "number": 4251,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    a = []\n    for _ in range(n):\n        row = list(map(int, stdin.readline().strip().split()))\n        a.append(row)\n\n    k = 0\n    while True:\n        s = []\n        for j in range(m):\n            for i in range(n):\n                s.append(a[i][j])\n        if all(abs(s[i] - s[i + 1]) >= k for i in range(nm - 1)):\n            return str(k)\n        k += 1"
    },
    {
        "number": 4251,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split()[0:m])))\n    k = 0\n    while True:\n        k += 1\n        valid = True\n        for i in range(n):\n            for j in range(m - 1):\n                if abs(a[i][j] - a[i][j + 1]) < k:\n                    valid = False\n                    break\n            if not valid:\n                break\n        if valid:\n            return str(k)"
    },
    {
        "number": 4251,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split()[0:m])))\n    k = 0\n    while True:\n        ok = True\n        for i in range(n):\n            for j in range(m - 1):\n                if abs(a[i][j] - a[i][j + 1]) < k:\n                    ok = False\n                    break\n            if not ok:\n                break\n        if not ok:\n            k += 1\n        else:\n            break\n    return str(k)\n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    file_name = stdin.splitlines()[1]\n    count = 0\n    while 'xxx' in file_name:\n        file_name = file_name.replace('xxx', '')\n        count += 1\n    return str(count) if 'xxx' not in file_name else '0'"
    },
    {
        "number": 4252,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    name = stdin.split()[1]\n    count = 0\n    for i in range(n - 2):\n        if name[i] == name[i+1] == name[i+2] == 'x':\n            count += 1\n    return str(count)"
    },
    {
        "number": 4252,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    name = stdin.readline().strip()\n    count = 0\n    for i in range(n-2):\n        if name[i:i+3] == 'xxx':\n            count += 1\n    return str(count)\n\nprint(solution(\"6\\nxxxiii\")) # Output: 1\nprint(solution(\"5\\nxxoxx\")) # Output: 0\nprint(solution(\"10\\nxxxxxxxxxx\")) # Output: 8"
    },
    {
        "number": 4252,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    name = stdin.readline().strip()\n    \n    count = 0\n    for i in range(n-2):\n        if name[i:i+3] == 'xxx':\n            count += 1\n    \n    if count == 0:\n        print(0)\n    else:\n        print(count)\n        "
    },
    {
        "number": 4252,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, name = map(int, stdin.split())\n    if \"xxx\" in name:\n        return \"0\"\n    for i in range(len(name)):\n        if name[i:i+3] == \"xxx\":\n            return str(len(name) - i - 1)\n    return \"0\""
    },
    {
        "number": 4252,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    name = stdin.readline().strip()\n    count = 0\n    i = 0\n    while i < n - 2:\n        if name[i:i+3] == 'xxx':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    if name[:3] == 'xxx':\n        count += 1\n    if count == 0:\n        return '0'\n    return str(count)"
    },
    {
        "number": 4252,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    count = 0\n    for i in range(n-2):\n        if s[i:i+3] == \"xxx\":\n            count += 1\n    if count == 0:\n        return \"0\"\n    return str(count)"
    },
    {
        "number": 4252,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    name = stdin.readline().strip()\n    count = 0\n    for i in range(n-2):\n        if name[i:i+3] == \"xxx\":\n            count += 1\n            name = name[:i] + name[i+1:]\n    return count\n\nprint(solution(stdin))"
    },
    {
        "number": 4252,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    filename = stdin.readline().strip()\n    \n    if 'xxx' not in filename:\n        return '0'\n    \n    count = 0\n    while filename.count('xxx') > 0:\n        filename = filename.replace('xxx', '')\n        count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4252,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    forbidden = False\n    for i in range(n-2):\n        if s[i:i+3] == 'xxx':\n            forbidden = True\n            break\n\n    if forbidden:\n        ans = n\n        for i in range(n-2):\n            if s[i:i+3] == 'xxx':\n                ans = min(ans, i)\n        return str(ans)\n    else:\n        return '0'"
    },
    {
        "number": 4253,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.strip())\n    area = 3 * (r**2)\n    return str(area)"
    },
    {
        "number": 4253,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    r = int(stdin.readline())\n    # calculate area of regular dodecagon\n    area = 3 * r ** 2\n    # return area as a string\n    return str(area)"
    },
    {
        "number": 4253,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(3*r**2)"
    },
    {
        "number": 4253,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(3 * r ** 2)"
    },
    {
        "number": 4253,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(3 * r ** 2)"
    },
    {
        "number": 4253,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = (3 * r ** 2) / 2\n    return str(area)\n"
    },
    {
        "number": 4253,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input integer\n    r = int(stdin.strip())\n    \n    # Calculate the area of the regular dodecagon\n    area = 3 * (r ** 2)\n    \n    # Return the area as a string\n    return str(area)"
    },
    {
        "number": 4253,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * (r ** 2)\n    return str(area)"
    },
    {
        "number": 4253,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.strip())\n    area = 3 * r ** 2\n    return str(area)"
    },
    {
        "number": 4253,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.strip())\n    area = 3 * r ** 2\n    return str(area)"
    },
    {
        "number": 4254,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, w = list(map(int, stdin.split()))\n    if w >= s:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, w = map(int, stdin.split())\n    if w >= s:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, w = map(int, stdin.strip().split())\n    if w >= s:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, w = map(int, stdin.strip().split())\n    if w >= s:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    sheep, wolves = map(int, stdin.strip().split())\n    if wolves >= sheep:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    s, w = map(int, stdin.strip().split())\n\n    # check if wolves will attack sheep\n    if w >= s:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, w = map(int, stdin.strip().split())\n    if w >= s:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, w = map(int, stdin.split())\n    if w >= s:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.strip().split())\n    if W >= S:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, w = map(int, stdin.strip().split())\n    if w >= s:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4255,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ab, bc, ca = map(int, stdin.split())\n    s = (ab + bc + ca) / 2\n    area = (s * (s - ab) * (s - bc) * (s - ca)) ** 0.5\n    return str(int(area))"
    },
    {
        "number": 4255,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    sides = stdin.split()\n    a, b, c = map(int, sides)\n\n    s = (a + b + c) / 2\n\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    return str(int(area))"
    },
    {
        "number": 4255,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ab, bc, ca = map(int, stdin.split())\n    s = (ab + bc + ca) / 2\n    area = (s*(s-ab)*(s-bc)*(s-ca)) ** 0.5\n    return str(int(area))"
    },
    {
        "number": 4255,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    sides = stdin.split()\n    a = int(sides[0])\n    b = int(sides[1])\n    c = int(sides[2])\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return str(int(area))"
    },
    {
        "number": 4255,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    sides = stdin.strip().split(' ')\n    ab, bc, ca = map(int, sides)\n    s = (ab + bc + ca) / 2\n    area = round((s*(s-ab)*(s-bc)*(s-ca)) ** 0.5, 0)\n    return str(area)"
    },
    {
        "number": 4255,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return str(int(area))"
    },
    {
        "number": 4255,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    a, b, c = map(int, stdin.split())\n\n    # calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # calculate the area\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n\n    # round off the area to the nearest integer\n    area = round(area)\n\n    # print the area to stdout\n    return str(area)"
    },
    {
        "number": 4255,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ab, bc, ca = map(int, stdin.strip().split())\n    s = (ab + bc + ca) / 2\n    area = (s * (s - ab) * (s - bc) * (s - ca)) ** 0.5\n    return str(int(area))"
    },
    {
        "number": 4255,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input to integers\n    AB, BC, CA = map(int, stdin.strip().split())\n\n    # Calculate the semi-perimeter\n    s = (AB + BC + CA) / 2\n\n    # Calculate the area using Heron's formula\n    area = (s * (s - AB) * (s - BC) * (s - CA)) ** 0.5\n\n    # Round the area to the nearest integer and return as a string\n    return str(round(area))\n"
    },
    {
        "number": 4255,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    sides = stdin.split()\n    a = int(sides[0])\n    b = int(sides[1])\n    c = int(sides[2])\n    s = (a + b + c) / 2\n    area = int((s * (s - a) * (s - b) * (s - c)) ** 0.5)\n    return str(area)\n"
    },
    {
        "number": 4256,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A <= B:\n        return str(C)\n    count = 0\n    while B >= A and count < C:\n        B -= A\n        count += 1\n    return str(count)"
    },
    {
        "number": 4256,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.strip().split())\n    count = 0\n    while A <= B:\n        if count == C:\n            break\n        B -= A\n        count += 1\n    return count\n\nprint(solution(\"2 11 4\")) # Output: 4"
    },
    {
        "number": 4256,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A >= 8:\n        return str(C)\n    else:\n        return str(min(C, B // A))"
    },
    {
        "number": 4256,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    count = 0\n    while a <= b and count < c:\n        a *= 2\n        count += 1\n    return count"
    },
    {
        "number": 4256,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    count = 0\n    while B >= 8 and count < C:\n        B -= 8\n        count += 1\n    return count"
    },
    {
        "number": 4256,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if B >= 8:\n        return \"100\"\n    else:\n        return str(min(C, B // A + (1 if B % A > 0 else 0)))"
    },
    {
        "number": 4256,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    count = 0\n    while B >= A and count < C:\n        B -= A\n        count += 1\n    return count"
    },
    {
        "number": 4256,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = list(map(int, stdin.split()))\n    if B < A:\n        return 'Infinity'\n    else:\n        return min(C, B//A)"
    },
    {
        "number": 4256,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    times = B // A\n    return str(min(times, C))"
    },
    {
        "number": 4256,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    count = 0\n    while A >= 8 and count < C:\n        A -= 8\n        count += 1\n    return count"
    },
    {
        "number": 4257,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)"
    },
    {
        "number": 4257,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)"
    },
    {
        "number": 4257,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = A * B\n    return str(result)\n"
    },
    {
        "number": 4257,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)"
    },
    {
        "number": 4257,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)"
    },
    {
        "number": 4257,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    return str(A * B)"
    },
    {
        "number": 4257,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a*b)"
    },
    {
        "number": 4257,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)"
    },
    {
        "number": 4257,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input string\n    A, B = map(int, stdin.split())\n    \n    # Compute A * B and return as string\n    return str(A * B)"
    },
    {
        "number": 4257,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)"
    },
    {
        "number": 4258,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = map(int, stdin.strip().split())\n    total = b\n    for i in range(1, t+1):\n        if i % a == 0:\n            total += b\n        else:\n            total += a\n    return str(total)"
    },
    {
        "number": 4258,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    t = 0\n    num_biscuits = 0\n    while t < T + 0.5:\n        t += A\n        num_biscuits += B * (t // A)\n    return str(num_biscuits)"
    },
    {
        "number": 4258,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    total = 0\n    \n    # Biscuits produced at each multiple of A seconds\n    for i in range(1, T+1):\n        if i % A == 0:\n            total += B\n        else:\n            total += A\n    \n    # Biscuits produced within 0.5 seconds\n    total += int(T+0.5) // A * B\n    \n    return str(total)"
    },
    {
        "number": 4258,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = map(int, stdin.strip().split())\n    total = a * b\n    for i in range(2, t+1):\n        if i % a == 0:\n            total += b\n        else:\n            total += a\n    total += t // a + 0.5\n    return str(total)"
    },
    {
        "number": 4258,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = map(int, stdin.split())\n    seconds = [i * a for i in range(1, t + 1)]\n    total = sum(seconds)\n    total += b\n    return str(total)\n"
    },
    {
        "number": 4258,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    time = 0\n    count = 0\n    \n    while time <= T:\n        if time % A == 0 or (time - A) % A == 0 or (time - 2*A) % A == 0:\n            count += B\n        time += 1\n        \n    return str(count)"
    },
    {
        "number": 4258,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = map(int, stdin.split())\n    total_biscuits = b\n    for i in range(1, t+1):\n        if i % a == 0:\n            total_biscuits += b\n        else:\n            total_biscuits += 1\n    return str(total_biscuits)"
    },
    {
        "number": 4258,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = map(int, stdin.strip().split())\n    t = t + 0.5\n    count = 0\n    for i in range(1, t+1):\n        if i % a == 0:\n            count += b\n        elif i % 2*a == 0:\n            count += b // 2\n    return str(count)"
    },
    {
        "number": 4258,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing input\n    A, B, T = map(int, stdin.split())\n    \n    # Calculating number of biscuits produced within T + 0.5 seconds\n    num_biscuits = 0\n    for i in range(1, T+1):\n        if i % A == 0:\n            num_biscuits += B\n        else:\n            num_biscuits += 1\n    \n    # Adding half a second to account for rounding error\n    num_biscuits += 0.5\n    \n    # Converting to string and returning output\n    return str(int(num_biscuits))"
    },
    {
        "number": 4258,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = map(int, stdin.split())\n\n    biscuits = a * b\n    t = t + 0.5\n    for i in range(a, t, a):\n        biscuits += b * (i // a)\n    return str(biscuits)"
    },
    {
        "number": 4259,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n    if (B - A) % K == 0:\n        return \"OK\"\n    else:\n        return \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    if k % a == 0 and b % k == 0:\n        return \"OK\"\n    else:\n        return \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    if k % a!= 0:\n        return \"NG\"\n    else:\n        carry_dist = b - a + 1\n        if carry_dist % k!= 0:\n            return \"NG\"\n        else:\n            return \"OK\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    k, a, b = map(int, stdin.split())\n\n    # Check if K is a divisor of B\n    if b % k!= 0:\n        return \"NG\"\n\n    # Check if A is divisible by K\n    if a % k!= 0:\n        a = a - (a % k)\n\n    # Check if A is within range (inclusive)\n    if a < a or a > b:\n        return \"NG\"\n\n    # If A is within range, check for carry distance\n    carry_distance = a + k\n    if carry_distance > b:\n        return \"NG\"\n    else:\n        return \"OK\""
    },
    {
        "number": 4259,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    k, a, b = map(int, stdin.strip().split())\n\n    # check if k is a divisor of b\n    if b % k!= 0:\n        return \"NG\"\n\n    # find the smallest multiple of k between a and b\n    multiple = a\n    while multiple < b:\n        multiple += k\n\n    # check if the multiple is within the range [a, b]\n    if multiple > b:\n        return \"NG\"\n\n    return \"OK\""
    },
    {
        "number": 4259,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    if a % k == 0 and b % k == 0:\n        return \"OK\"\n    else:\n        return \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    K, A, B = map(int, stdin.split())\n\n    # Calculating possible carry distances\n    carry_distances = set()\n    for i in range(A, B+1):\n        if i % K == 0:\n            carry_distances.add(i)\n\n    # Checking if there is at least one possible carry distance\n    if not carry_distances:\n        return \"NG\"\n\n    # If there is at least one possible carry distance, checking if Takahashi can practice\n    for distance in range(K, B+1):\n        if distance % K == 0 and distance in carry_distances:\n            return \"OK\"\n\n    return \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    if k % a!= 0 or k % b!= 0:\n        return \"NG\"\n    else:\n        carry_dist = k\n        while carry_dist > b:\n            carry_dist -= a\n        if carry_dist == b:\n            return \"OK\"\n        else:\n            return \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n    if K % (B - A + 1)!= 0:\n        return \"NG\"\n    else:\n        return \"OK\""
    },
    {
        "number": 4259,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n\n    # Check if there exists a multiple of K between A and B\n    for i in range(a, b+1):\n        if i % k == 0:\n            return 'OK'\n\n    return 'NG'"
    },
    {
        "number": 4260,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, x = map(int, stdin.strip().split())\n    time_in_world_b = t * x\n    time_in_world_a = time_in_world_b / x\n    return str(time_in_world_a)"
    },
    {
        "number": 4260,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    t = T / (X * 1.0)\n    return str(t)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4260,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    t = X * T\n    return str(t)"
    },
    {
        "number": 4260,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t, x = map(int, stdin.split())\n    return \"{:.6f}\".format(t/x)"
    },
    {
        "number": 4260,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    t = T / X\n    return f\"{t:.6f}\""
    },
    {
        "number": 4260,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    world_a_hours = T * X * 1.0 / (X + 1)\n    return str(world_a_hours)\n"
    },
    {
        "number": 4260,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    world_a_time = T / X\n    return str(world_a_time)"
    },
    {
        "number": 4260,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    t = T / X\n    return str(t)"
    },
    {
        "number": 4260,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    t = (T / X)\n    result = T - (X * t)\n    return str(result)\n\nwith open(\"input.txt\") as f:\n    stdin = f.read()\n\nwith open(\"output.txt\", \"w\") as f:\n    f.write(solution(stdin))"
    },
    {
        "number": 4260,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t, x = map(int, stdin.split())\n    return str((t * x) / (x - 1))"
    },
    {
        "number": 4261,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b == c:\n        return str(0)\n    if b > c:\n        a, b, c = c, a, b\n    if a == b:\n        return str(c)\n    return str(min(b, a - c))"
    },
    {
        "number": 4261,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    a, b, c = map(int, stdin.split())\n\n    # calculate remaining water in bottle 2\n    remaining_water = c - b + min(a - b, 0)\n\n    return str(remaining_water)"
    },
    {
        "number": 4261,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if B == A:\n        return str(C)\n    elif B < A:\n        return str(B)\n    else:\n        return str(C-((A-B)//2))\n\nstdin = \"6 4 3\"\nprint(solution(stdin)) # Output: 1"
    },
    {
        "number": 4261,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    transfer = min(A - B, C)\n    return str(C - transfer)"
    },
    {
        "number": 4261,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.strip().split())\n    if A >= B + C:\n        return str(C)\n    else:\n        return str(C - (A - B))"
    },
    {
        "number": 4261,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if B >= A:\n        return str(C)\n    else:\n        return str(B)"
    },
    {
        "number": 4261,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A >= B:\n        print(C)\n    else:\n        print(B - C)\n"
    },
    {
        "number": 4261,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if B > A:\n        A, B = B, A  # swap bottles\n    if A < C:\n        A += C\n        C = 0\n    else:\n        C -= A\n        A = 0\n    if C > 0:\n        print(C)\n    else:\n        print(A)\n"
    },
    {
        "number": 4261,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    total_water = a + b\n    if c > total_water:\n        return str(c - total_water)\n    else:\n        return '0'"
    },
    {
        "number": 4261,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    A, B, C = map(int, stdin.strip().split())\n\n    # Compute the amount of water that can be transferred\n    transfer_amount = min(B, C)\n\n    # Compute the amount of water that remains in Bottle 2\n    remaining_water = C - transfer_amount\n\n    # Return the result as a string\n    return str(remaining_water)"
    },
    {
        "number": 4262,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    q = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if p[i] > q[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4262,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    P = list(map(int, stdin.readline().strip().split()))\n    Q = list(map(int, stdin.readline().strip().split()))\n\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j] and Q[i] > Q[j]:\n                count += 1\n\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4262,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    q = list(map(int, stdin.readline().split()))\n    \n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if p[i] == q[j]:\n                count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4262,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    P = list(map(int, stdin.readline().strip().split()))\n    Q = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > Q[j]:\n                count += 1\n    return str(count)\n\nstdin = \"\"\"\n3\n1 3 2\n3 1 2\n\"\"\"\n\nprint(solution(stdin)) # Output: 3"
    },
    {
        "number": 4262,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    q = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if p[i] == q[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4262,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    N = int(stdin.readline().strip())\n    P = [int(x) for x in stdin.readline().strip().split()]\n    Q = [int(x) for x in stdin.readline().strip().split()]\n    \n    # Finding the indices of P and Q in lexicographical order\n    P_indices = sorted(range(N), key=lambda i: P[i])\n    Q_indices = sorted(range(N), key=lambda i: Q[i])\n    \n    # Finding the difference in indices of P and Q\n    return str(abs(P_indices[0] - Q_indices[0]))"
    },
    {
        "number": 4262,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    P = list(map(int, stdin.readline().strip().split()))\n    Q = list(map(int, stdin.readline().strip().split()))\n\n    # Calculate |a - b|\n    count = 0\n    for i in range(N):\n        if P[i]!= Q[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4262,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function finds the difference between the lexicographically smallest permutation and the next one in a sequence.\n    \"\"\"\n    # Read input\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    q = list(map(int, stdin.readline().strip().split()))\n    \n    # Initialize variables\n    count = 0\n    i = 0\n    j = 0\n    \n    # Count the number of permutations that are less than the current permutation\n    while i < n:\n        if p[i] < q[i]:\n            break\n        elif p[i] > q[i]:\n            count += 1\n        i += 1\n    \n    # Count the number of permutations that are greater than the current permutation\n    while j < n:\n        if p[j] > q[j]:\n            break\n        elif p[j] < q[j]:\n            count += n - j\n            break\n        j += 1\n    \n    # Return the difference between the counts\n    return str(count)"
    },
    {
        "number": 4262,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes input from stdin and returns the output as a string.\n    \"\"\"\n    # Read input\n    n = int(stdin.readline().strip())\n    p = [int(x) for x in stdin.readline().strip().split()]\n    q = [int(x) for x in stdin.readline().strip().split()]\n\n    # Calculate |a - b|\n    a, b = 0, 0\n    for i in range(n):\n        if p[i]!= q[i]:\n            a = i\n            break\n    for i in range(n):\n        if p[i]!= q[i]:\n            b = i\n            break\n    return str(abs(a - b))\n"
    },
    {
        "number": 4262,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    P = list(map(int, stdin.readline().strip().split()))\n    Q = list(map(int, stdin.readline().strip().split()))\n\n    # Compute lexicographically smallest permutation\n    a, b = P.index(min(P)), Q.index(min(Q))\n\n    # Compute |a - b|\n    return abs(a - b)"
    },
    {
        "number": 4263,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    max_length = 0\n    for i in range(len(S)):\n        for j in range(i+1, len(S)+1):\n            substring = S[i:j]\n            if all(c in 'ACGT' for c in substring) and len(substring) > max_length:\n                max_length = len(substring)\n    return str(max_length)"
    },
    {
        "number": 4263,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if all(c in 'ACGT' for c in substring):\n                ans = max(ans, len(substring))\n    return str(ans)"
    },
    {
        "number": 4263,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    ACGT_dict = {}\n    max_length = 0\n    for i in range(len(S)):\n        for j in range(i, len(S)+1):\n            substring = S[i:j]\n            if substring.isalpha() and substring not in ACGT_dict:\n                ACGT_dict[substring] = True\n                if all(char in 'ACGT' for char in substring):\n                    max_length = max(max_length, len(substring))\n    return str(max_length)"
    },
    {
        "number": 4263,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    s = stdin.strip()\n    # initialize variables\n    acgt_len = 0\n    max_len = 0\n    # iterate through each character in the string\n    for i in range(len(s)):\n        # if the current character is an A, C, G or T, update the acgt_len\n        if s[i] in ['A', 'C', 'G', 'T']:\n            acgt_len += 1\n            # update max_len if the current acgt_len is greater than max_len\n            max_len = max(acgt_len, max_len)\n        else:\n            acgt_len = 0\n    # return the max_len\n    return str(max_len)"
    },
    {
        "number": 4263,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    ACGT = set(['A', 'C', 'G', 'T'])\n    n = len(S)\n    ans = 0\n    for i in range(n):\n        if S[i] in ACGT:\n            j = i + 1\n            while j < n and S[j] in ACGT:\n                j += 1\n            ans = max(ans, j - i)\n    return str(ans)\n\nprint(solution(input()))"
    },
    {
        "number": 4263,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    dp = [0] * n\n    max_len = 0\n    for i in range(n):\n        if s[i] == 'A' or s[i] == 'C' or s[i] == 'G' or s[i] == 'T':\n            dp[i] = i + 1\n            if i > 0:\n                if s[i-1] == 'A':\n                    dp[i] = dp[i-1] + 1\n                elif s[i-1] == 'C':\n                    dp[i] = max(dp[i-1], dp[i-2] + 1)\n                elif s[i-1] == 'G':\n                    dp[i] = max(dp[i-1], dp[i-2] + 1)\n                elif s[i-1] == 'T':\n                    dp[i] = max(dp[i-1], dp[i-2] + 1)\n            max_len = max(max_len, dp[i])\n    return max_len"
    },
    {
        "number": 4263,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    max_len = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if all(c in \"ACGT\" for c in substring):\n                max_len = max(max_len, len(substring))\n    return str(max_len)"
    },
    {
        "number": 4263,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    acgt_dict = {'A':0, 'C':0, 'G':0, 'T':0}\n    acgt_count = 0\n    max_len = 0\n    for i in range(len(s)):\n        if s[i] in acgt_dict:\n            acgt_dict[s[i]] += 1\n            acgt_count += 1\n            if acgt_count > 1:\n                continue\n            for j in range(i+1, len(s)):\n                if s[j] in acgt_dict:\n                    acgt_dict[s[j]] += 1\n                    acgt_count += 1\n                    if acgt_count > 1:\n                        acgt_dict[s[j]] -= 1\n                        acgt_count -= 1\n                        continue\n                    while j+1 < len(s) and s[j+1] in acgt_dict:\n                        acgt_dict[s[j+1]] += 1\n                        acgt_count += 1\n                        j += 1\n                    if acgt_count > 1:\n                        acgt_dict[s[j]] -= 1\n                        acgt_count -= 1\n                        continue\n                    max_len = max(max_len, j-i+1)\n                    acgt_dict[s[i]] -= 1\n                    acgt_count -= 1\n                    acgt_dict[s[j]] -= 1\n                    acgt_count -= 1\n                    while j-i+1 > 1 and acgt_dict[s[i]] == 0:\n                        acgt_dict[s[i]] += 1\n                        acgt_count += 1\n                        i += 1\n                        acgt_dict[s[i]] -= 1\n                        acgt_count -= 1\n                    break\n    return str(max_len)"
    },
    {
        "number": 4263,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    s = stdin.strip()\n\n    # Initialize variables\n    max_len = 0\n    acgt_set = set(['A', 'C', 'G', 'T'])\n\n    # Loop through all substrings of s and check if they are ACGT strings\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if set(substring) == acgt_set:\n                max_len = max(max_len, len(substring))\n\n    # Return output\n    return str(max_len)"
    },
    {
        "number": 4263,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if all(c in 'ACGT' for c in S[i:j]):\n                ans = max(ans, j-i)\n    return str(ans)"
    },
    {
        "number": 4264,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the integer input\n    n = int(stdin.strip())\n\n    # Initialize the count variable\n    count = 0\n\n    # Iterate over all integers less than or equal to n\n    for i in range(1, n+1):\n        # Check if the number of digits is odd\n        if len(str(i)) % 2 == 1:\n            count += 1\n\n    # Return the count of integers with odd number of digits\n    return str(count)"
    },
    {
        "number": 4264,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N+1):\n        if len(str(i)) % 2 == 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4264,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if len(str(i)) % 2!= 0:\n            count += 1\n    print(count)"
    },
    {
        "number": 4264,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for num in range(1, n+1):\n        if len(str(num)) % 2 == 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4264,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if len(str(i)) % 2!= 0:\n            count += 1\n    return str(count)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4264,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(1, n+1):\n        if len(str(i)) % 2 == 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4264,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N+1):\n        if len(str(i)) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 4264,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for num in range(1, n+1):\n        if len(str(num)) % 2 == 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4264,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for num in range(1, N+1):\n        if len(str(num)) % 2 == 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4264,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if len(str(i)) % 2 == 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4265,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4265,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    count = 0\n    for i in range(len(S)):\n        if S[i]!= T[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4265,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 4265,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin.strip().split()[0])\n    T = list(stdin.strip().split()[1])\n    n = len(S)\n    count = 0\n    for i in range(n):\n        if S[i]!= T[i]:\n            count += 1\n    return count"
    },
    {
        "number": 4265,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, T = map(str, stdin.strip().split())\n    operations = 0\n    for i in range(len(S)):\n        if S[i]!= T[i]:\n            operations += 1\n    print(operations)"
    },
    {
        "number": 4265,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, T = map(str, stdin.split())\n    n = len(S)\n    cnt = 0\n    for i in range(n):\n        if S[i]!= T[i]:\n            cnt += 1\n    return cnt"
    },
    {
        "number": 4265,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    count = 0\n    for i in range(len(S)):\n        if S[i]!= T[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4265,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if s[i]!= t[i]:\n            count += 1\n    return count"
    },
    {
        "number": 4265,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            count += 1\n    return count\n\nprint(solution(input()))"
    },
    {
        "number": 4265,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n = len(s)\n    operations = 0\n    for i in range(n):\n        if s[i]!= t[i]:\n            operations += 1\n    return str(operations)"
    },
    {
        "number": 4266,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.strip().split())\n    left = 1000000 + x\n    right = -1000000 + x\n    result = []\n    for i in range(k):\n        if left + i <= x:\n            result.append(left + i)\n        if right - i >= x:\n            result.append(right - i)\n    return \" \".join(map(str, sorted(result)))"
    },
    {
        "number": 4266,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    painted = set()\n    painted.add(x)\n    left = max(x-k, -1000000)\n    right = min(x+k, 1000000)\n    for i in range(left+1, right):\n        painted.add(i)\n    return''.join(str(i) for i in sorted(painted))"
    },
    {
        "number": 4266,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    black_stones = [i for i in range(x-k+1, x+1)] + [i for i in range(x+1, x+k+1)]\n    return''.join(map(str, black_stones))\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4266,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    black_stones = [x]\n    for i in range(k-1):\n        black_stones.append(black_stones[-1] - i - 1)\n    white_stones = list(range(-1000000, x)) + list(range(x+1, 1000001))\n    return''.join(str(stone) for stone in sorted(black_stones + white_stones))"
    },
    {
        "number": 4266,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    # Possible values for X\n    values = [X-i for i in range(K-1, -1, -1)] + [X+i for i in range(1, K+1)]\n    # Possible coordinates for each value\n    coordinates = [X-i for i in values] + [X+i for i in values]\n    # Sort the coordinates\n    coordinates.sort()\n    # Print the coordinates\n    return''.join(map(str, coordinates))"
    },
    {
        "number": 4266,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    if x < 0:\n        x = -x\n    left, right = -1000000, 1000000\n    while left < right:\n        mid = (left + right) // 2\n        if mid * k - (mid + 1) * (k - 1) // 2 <= x <= mid * k + (mid - 1) * (k - 1) // 2:\n            return''.join(map(str, range(mid - k + 1, mid + 1)))\n        elif x < mid * k - (mid + 1) * (k - 1) // 2:\n            right = mid\n        else:\n            left = mid + 1"
    },
    {
        "number": 4266,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n\n    # Initialize the start and end of the search range\n    start = max(0, x - k)\n    end = min(x + k, 2000000)\n\n    # Initialize the list of coordinates to search\n    coordinates = [i for i in range(start, end + 1)]\n\n    # Remove the coordinate X from the list of coordinates to search\n    coordinates.remove(x)\n\n    # Sort the list of coordinates to search in ascending order\n    coordinates.sort()\n\n    # Convert the list of coordinates to a string with spaces in between\n    coordinates_str =''.join(map(str, coordinates))\n\n    return coordinates_str"
    },
    {
        "number": 4266,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.strip().split())\n    # initialize a set to store the potential coordinates\n    potential_coordinates = set()\n    # iterate from -1000000 to 1000000 and add the potential coordinates to the set\n    for i in range(-1000000, 1000001):\n        potential_coordinates.add(i)\n    # remove the coordinates that do not contain a stone painted black\n    for i in range(max(x-k+1, -1000000), min(x+k, 1000001)):\n        potential_coordinates.remove(i)\n    # return the sorted list of potential coordinates as a string\n    return''.join(map(str, sorted(potential_coordinates)))"
    },
    {
        "number": 4266,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    potential = set()\n    for i in range(1, k+1):\n        potential.add(x+i)\n        potential.add(x-i)\n    potential = sorted(list(potential))\n    return''.join(map(str, potential))"
    },
    {
        "number": 4266,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    K, X = map(int, stdin.split())\n\n    # Calculate lower and upper bounds for search\n    lower = max(0, X - K + 1)\n    upper = min(1000000, X + K - 1)\n\n    # Print coordinates\n    for i in range(lower, upper+1):\n        print(i, end=\" \")\n    return \"\""
    },
    {
        "number": 4267,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    temperature = int(stdin)\n    if temperature >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    temp = int(stdin)\n    if temp >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Get the temperature from the input\n    temp = int(stdin)\n\n    # Check if the temperature is above 30\n    if temp >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    X = int(stdin.strip())\n\n    # Check if the temperature is above 30 degrees Celsius\n    if X >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    temp = int(stdin)\n    if temp >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4268,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    d = int(lines[1])\n    points = []\n    for i in range(2, 2+n):\n        point = list(map(int, lines[i].split()))\n        points.append(point)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = sum([(y - z) ** 2 for y, z in zip(points[i], points[j])]) ** 0.5\n            if int(dist) == dist:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4268,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d = list(map(int, stdin.readline().split()))\n    points = [list(map(int, stdin.readline().split())) for i in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = 0\n            for k in range(d):\n                dist += (points[i][k] - points[j][k]) ** 2\n            if int(dist ** 0.5) ** 2 == dist:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4268,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.readline().strip().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, stdin.readline().strip().split())))\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if all(abs(points[i][k]-points[j][k]) % 2 == 0 for k in range(d)):\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4268,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, D = map(int, lines[0].split())\n    points = []\n    for i in range(1, N+1):\n        points.append(list(map(int, lines[i].split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            dist = dist**0.5\n            if int(dist) == dist:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4268,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, D = map(int, lines[0].split())\n    points = []\n    for i in range(1, N+1):\n        points.append(list(map(int, lines[i].split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            distance = 0\n            for k in range(D):\n                distance += (points[i][k]-points[j][k])**2\n            if int(distance**0.5) == distance**0.5:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4268,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.readline().split())\n    points = []\n    for _ in range(n):\n        points.append(list(map(int, stdin.readline().split())))\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if all(abs(points[i][k] - points[j][k]) % 2 == 0 for k in range(d)):\n                count += 1\n    return str(count)"
    },
    {
        "number": 4268,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    points = []\n    for i in range(n):\n        point = list(map(int, stdin.split()))\n        points.append(point)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = 0\n            for k in range(d):\n                dist += (points[i][k] - points[j][k]) ** 2\n            dist = dist ** 0.5\n            if dist.is_integer():\n                count += 1\n    return str(count)"
    },
    {
        "number": 4268,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.readline().strip().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, stdin.readline().strip().split())))\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k])**2\n            distance = distance**0.5\n            if distance.is_integer():\n                count += 1\n                \n    return str(count)\n\nstdin = \"\"\"\n3 2\n1 2\n5 5\n-2 8\n\"\"\"\n\nprint(solution(stdin)) # Output: 1"
    },
    {
        "number": 4268,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    lines = stdin.strip().split('\\n')\n    N, D = map(int, lines[0].split())\n    points = [list(map(int, line.split())) for line in lines[1:]]\n\n    # Calculate distances between all pairs of points\n    distances = []\n    for i in range(N):\n        for j in range(i+1, N):\n            distance = 0\n            for k in range(D):\n                distance += (points[i][k] - points[j][k])**2\n            distance = distance**0.5\n            distances.append(distance)\n\n    # Count the number of pairs with integer distance\n    count = 0\n    for distance in distances:\n        if distance.is_integer():\n            count += 1\n\n    # Return the result as a string\n    return str(count)"
    },
    {
        "number": 4268,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes input from stdin and returns the number of pairs (i, j) (i < j) such that the distance between the i-th point and the j-th point is an integer.\n    \"\"\"\n    # Read input\n    N, D = map(int, stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, stdin.readline().strip().split())))\n\n    # Find pairs with integer distance\n    pairs = set()\n    for i in range(N):\n        for j in range(i+1, N):\n            distance = 0\n            for d in range(D):\n                distance += (points[i][d] - points[j][d])**2\n            distance = distance**0.5\n            if int(distance) == distance:\n                pairs.add((i, j))\n\n    # Return the number of pairs with integer distance\n    return str(len(pairs))"
    },
    {
        "number": 4269,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(set(s)) == 4 or '0000' in s or '1111' in s:\n        return 'Bad'\n    else:\n        return 'Good'"
    },
    {
        "number": 4269,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(set(s)) == len(s) or sorted(s) == sorted(s[::-1]):\n        return \"Good\"\n    else:\n        return \"Bad\""
    },
    {
        "number": 4269,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(set(s)) < len(s):\n        return \"Bad\"\n    else:\n        return \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s)!= 4 or not s.isdigit():\n        return \"Invalid input\"\n    elif s[0] == s[1] or s[1] == s[2] or s[2] == s[3] or s[0] == s[3]:\n        return \"Bad\"\n    else:\n        return \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(set(s))!= 4 or s.isdigit() == False:\n        return \"Bad\"\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3] or s[3] == s[0]:\n        return \"Bad\"\n    return \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    s = stdin.strip()\n\n    # check if s is hard to enter\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3] or s[3] == s[0]:\n        return \"Bad\"\n    else:\n        return \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return \"Bad\"\n    else:\n        return \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if len(set(S)) == len(S):\n        return 'Good'\n    else:\n        return 'Bad'"
    },
    {
        "number": 4269,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # convert input string to list of integers\n    code = [int(i) for i in stdin]\n\n    # check if code is hard to enter\n    if code[0] == code[1] or code[1] == code[2] or code[2] == code[3]:\n        return \"Bad\"\n    else:\n        return \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return \"Bad\"\n    else:\n        return \"Good\""
    },
    {
        "number": 4270,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    values = list(map(float, stdin.readline().strip().split()))\n\n    max_val = values[0]\n    for i in range(1, N):\n        max_val = (max_val + values[i]) / 2\n\n    return f\"{max_val:.4f}\""
    },
    {
        "number": 4270,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    values = list(map(float, stdin.readline().strip().split()))\n    \n    # initialize variables\n    pot = values[0]\n    for i in range(1, N):\n        pot = (pot + values[i]) / 2\n        \n    return str(pot)"
    },
    {
        "number": 4270,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    values = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    min_value = min(values)\n    max_value = max(values)\n    max_ingredient = min_value + (max_value - min_value) / 2\n\n    # iterate n-1 times\n    for i in range(n-1):\n        # calculate new ingredient value\n        new_ingredient = (values[i] + values[i+1]) / 2\n\n        # update max_ingredient\n        if new_ingredient > max_ingredient:\n            max_ingredient = new_ingredient\n\n        # remove consumed ingredients\n        values.pop(i)\n        values.pop(i)\n\n    # print result\n    return str(max_ingredient)"
    },
    {
        "number": 4270,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    values = list(map(float, stdin.readline().strip().split()))\n\n    max_value = values[0]\n    for i in range(1, n):\n        new_value = (values[i - 1] + values[i]) / 2\n        if new_value > max_value:\n            max_value = new_value\n\n    return str(max_value)"
    },
    {
        "number": 4270,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    values = list(map(int, stdin.readline().split()))\n\n    # Compose ingredients in the pot\n    for i in range(N-1):\n        x = values[i]\n        y = values[i+1]\n        new_value = (x + y) / 2\n        values.append(new_value)\n\n    # Return the maximum value of the last ingredient\n    return str(max(values[-1], 0)) # The last ingredient might be negative due to rounding errors"
    },
    {
        "number": 4270,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N = int(stdin.readline())\n    values = list(map(float, stdin.readline().split()))\n\n    # Initialize the variables\n    ingredients = values\n    for i in range(N-1):\n        # Compute the new ingredient value\n        new_ingredient = sum(ingredients) / 2\n        \n        # Add the new ingredient to the list\n        ingredients.append(new_ingredient)\n        \n        # Remove the consumed ingredients\n        ingredients = ingredients[2:]\n    \n    # Return the maximum value of the final ingredient\n    return str(max(ingredients))"
    },
    {
        "number": 4270,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    values = [float(value) for value in stdin.readline().strip().split()]\n\n    # Calculate maximum value of final ingredient\n    max_value = values[0]\n    for i in range(1, n):\n        value = (values[i-1] + values[i]) / 2\n        if value > max_value:\n            max_value = value\n\n    # Convert to string and return\n    return f\"{max_value:.5f}\""
    },
    {
        "number": 4270,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    values = list(map(int, lines[1].split()))\n    max_value = 0\n    for i in range(N-1):\n        max_value = (max_value + values[i] + values[i+1]) / 2\n    return str(max_value)\n\nstdin = \"2\\n3 4\\n\"\nprint(solution(stdin)) # Output: \"3.5\""
    },
    {
        "number": 4270,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    values = [float(x) for x in stdin.readline().strip().split()]\n\n    dp = [0] * N\n    dp[0] = values[0]\n\n    for i in range(1, N):\n        dp[i] = (dp[i-1] + values[i]) / 2\n\n    return str(dp[-1])"
    },
    {
        "number": 4270,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    values = list(map(float, stdin.split()[1:]))\n\n    # Start with the maximum value and work down\n    for i in range(n-1, -1, -1):\n        if i == n-1:\n            # Last ingredient\n            ans = values[i]\n        else:\n            # Put 2 ingredients in the pot and get the new value\n            new_val = (values[i] + values[i+1]) / 2\n            ans = min(ans, new_val)\n\n    return str(ans)"
    },
    {
        "number": 4271,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    C = list(map(int, lines[3].split()))\n\n    total = sum(B)\n    for i in range(N-1):\n        if A[i+1] == A[i]+1:\n            total += C[i]\n\n    return str(total)"
    },
    {
        "number": 4271,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    B = list(map(int, stdin.readline().split()))\n    C = list(map(int, stdin.readline().split()))\n\n    # initialize variables\n    total_points = 0\n    i = 0\n\n    # iterate over dishes\n    while i < N:\n        # add points from Dish A_i\n        total_points += B[i]\n        # add points from Dish A_i+1 (if any)\n        if i < N - 1 and A[i+1] == A[i] + 1:\n            total_points += C[i]\n        # move to next dish\n        i += 1\n\n    # return total points\n    return str(total_points)"
    },
    {
        "number": 4271,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    data = list(map(int, stdin.strip().split()))\n    N = data[0]\n    A = data[1:N+1]\n    B = data[N+1:2*N+1]\n    C = data[2*N+1:]\n\n    # Initialize variables\n    total = 0\n    prev = 0\n\n    # Iterate through dishes\n    for i in range(N):\n        total += B[i]\n        if i > 0:\n            total += C[i-1]\n        if A[i]!= i+1:\n            total -= prev\n        prev = B[i]\n\n    # Return result\n    return str(total)"
    },
    {
        "number": 4271,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, a, b, c = map(int, stdin.split())\n\n    # Calculate satisfaction points\n    points = [0] * (n+1)\n    for i in range(1, n+1):\n        points[i] = b[i-1] + sum(points[j] for j in range(i, n+1) if a[j-1] == i) * c[i-1]\n\n    # Calculate total satisfaction points\n    total = sum(points[i] for i in range(1, n+1))\n\n    # Print output\n    return str(total)\n"
    },
    {
        "number": 4271,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    a = [int(x) for x in lines[1].split()]\n    b = [int(x) for x in lines[2].split()]\n    c = [int(x) for x in lines[3].split()]\n\n    total_points = 0\n\n    for i in range(n):\n        total_points += b[i]\n        if i < n - 1:\n            total_points += c[i]\n\n    return str(total_points)\n\nstdin = \"3\\n3 1 2\\n2 5 4\\n3 6\"\nprint(solution(stdin)) # Output: \"14\""
    },
    {
        "number": 4271,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    B = list(map(int, stdin.readline().strip().split()))\n    C = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    satisfaction = 0\n\n    # Iterate over dishes\n    for i in range(N):\n        # Add satisfaction from eating current dish\n        satisfaction += B[i]\n\n        # Add satisfaction from eating next dish (if available)\n        if i < N - 1:\n            satisfaction += max(0, C[i])\n\n    # Return total satisfaction\n    return str(satisfaction)"
    },
    {
        "number": 4271,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    satisfaction = 0\n    for i in range(N):\n        satisfaction += B[i]\n        if i < N - 1:\n            satisfaction += C[i]\n    return str(satisfaction)"
    },
    {
        "number": 4271,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split(\"\\n\")\n    n = int(lines[0])\n    dishes = list(map(int, lines[1].split()))\n    benefits = list(map(int, lines[2].split()))\n    satisfaction = [0] * n\n    for i in range(n):\n        satisfaction[dishes[i] - 1] += benefits[i]\n        if i < n - 1:\n            satisfaction[dishes[i+1] - 1] += benefits[i] + benefits[i+1]\n    return str(sum(satisfaction))"
    },
    {
        "number": 4271,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, A, B, C = map(int, stdin.split())\n    # calculate satisfaction points\n    points = B[0]\n    for i in range(1, N):\n        points += max(B[i], C[i-1])\n    # print results\n    print(points)\n    return str(points)"
    },
    {
        "number": 4271,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    C = list(map(int, lines[3].split()))\n\n    satisfaction_points = 0\n\n    for i in range(N):\n        satisfaction_points += B[i]\n\n    for i in range(N - 1):\n        if A[i] == A[i+1]:\n            satisfaction_points += C[i]\n\n    return str(satisfaction_points)"
    },
    {
        "number": 4272,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    count = 0\n    for i in range(n-2):\n        if s[i:i+3] == \"ABC\":\n            count += 1\n    return str(count)\n\nprint(solution(\"10\\nZABCDBABCQ\")) # Output: 2"
    },
    {
        "number": 4272,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    # Initialize counters\n    count = 0\n    i = 0\n    j = 2\n\n    # Loop through string\n    while i < n - 2:\n        if s[i:j+1] == \"ABC\":\n            count += 1\n            i = j\n            j += 1\n        else:\n            i += 1\n            j = i + 2\n\n    # Print result\n    print(count)\n\n    return \"\""
    },
    {
        "number": 4272,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str.strip, stdin.split())\n    n = int(n)\n    abc_count = 0\n    for i in range(n-2):\n        if s[i:i+3] == 'ABC':\n            abc_count += 1\n    return str(abc_count)"
    },
    {
        "number": 4272,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    count = 0\n    for i in range(n - 2):\n        if s[i:i+3] == 'ABC':\n            count += 1\n    return count\n"
    },
    {
        "number": 4272,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n\n    # Initialize variables\n    count = 0\n    start = 0\n    end = 2\n\n    # Loop through all possible subsequences of length 3\n    while end <= N:\n        # Check if the current subsequence is equal to ABC\n        if S[start:end] == \"ABC\":\n            count += 1\n        # Move the start pointer to the right to find new subsequences\n        start += 1\n        end += 1\n\n    # Return the count of occurrences of ABC in S as contiguous subsequences\n    return str(count)"
    },
    {
        "number": 4272,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split('\\n')\n    n = int(n)\n    s = s.replace(' ', '')\n    abc_count = 0\n    for i in range(n - 2):\n        if s[i] == 'A' and s[i + 1] == 'B' and s[i + 2] == 'C':\n            abc_count += 1\n    return abc_count"
    },
    {
        "number": 4272,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    abc_count = s.count(\"ABC\")\n    print(abc_count)\n    return str(abc_count)"
    },
    {
        "number": 4272,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    abc = \"ABC\"\n    count = 0\n    for i in range(n-2):\n        if s[i:i+3] == abc:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4272,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    abc_count = 0\n    for i in range(n - 2):\n        if s[i] == 'A' and s[i + 1] == 'B' and s[i + 2] == 'C':\n            abc_count += 1\n    return abc_count"
    },
    {
        "number": 4272,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    count = 0\n    for i in range(n - 2):\n        if s[i:i+3] == 'ABC':\n            count += 1\n\n    return count\n\nprint(solution(\"10\\nZABCDBABCQ\")) # Output: 2"
    },
    {
        "number": 4273,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    N = int(stdin.readline())\n    names = [stdin.readline().strip() for _ in range(N)]\n    \n    # Counting the number of ways\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if (names[i][0] in ['M', 'A', 'R', 'C', 'H'] and \n                    names[j][0] in ['M', 'A', 'R', 'C', 'H'] and \n                    names[k][0] in ['M', 'A', 'R', 'C', 'H']):\n                    if (names[i][0]!= names[j][0] and \n                        names[i][0]!= names[k][0] and \n                        names[j][0]!= names[k][0]):\n                        count += 1\n    \n    # Printing the result\n    return str(count)"
    },
    {
        "number": 4273,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    names = lines[1:]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (names[i][0] in ['M', 'A', 'R', 'C', 'H'] and\n                    names[j][0] in ['M', 'A', 'R', 'C', 'H'] and\n                    names[k][0] in ['M', 'A', 'R', 'C', 'H'] and\n                    names[i][0]!= names[j][0] and\n                    names[i][0]!= names[k][0] and\n                    names[j][0]!= names[k][0]):\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4273,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    names = stdin.readline().strip().split()\n\n    # Count the number of ways to choose three people\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (names[i][0] in ['M', 'A', 'R', 'C', 'H'] and\n                    names[j][0] in ['M', 'A', 'R', 'C', 'H'] and\n                    names[k][0] in ['M', 'A', 'R', 'C', 'H'] and\n                    not (names[i][0] == names[j][0] or names[i][0] == names[k][0] or names[j][0] == names[k][0])):\n                    count += 1\n\n    return str(count)"
    },
    {
        "number": 4273,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    names = [stdin.readline().strip() for _ in range(n)]\n    \n    counts = [0] * 5  # counts[i] = number of names starting with letter i\n    \n    for name in names:\n        counts[ord(name[0]) - ord('A')] += 1\n    \n    three_count = 0\n    for i in range(5):\n        for j in range(i+1, 5):\n            for k in range(j+1, 5):\n                if counts[i] > 0 and counts[j] > 0 and counts[k] > 0 and \\\n                   (names[i][0] in ['M', 'A', 'R', 'C', 'H'] and \\\n                    names[j][0] in ['M', 'A', 'R', 'C', 'H'] and \\\n                    names[k][0] in ['M', 'A', 'R', 'C', 'H']) and \\\n                   (names[i][0]!= names[j][0] and names[i][0]!= names[k][0] and \\\n                    names[j][0]!= names[k][0]):\n                    three_count += 1\n    \n    return str(three_count)"
    },
    {
        "number": 4273,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    names = stdin.readline().strip().split()\n    \n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if names[i][0] in ['M', 'A', 'R', 'C', 'H'] and \\\n                   names[j][0] in ['M', 'A', 'R', 'C', 'H'] and \\\n                   names[k][0] in ['M', 'A', 'R', 'C', 'H'] and \\\n                   names[i][0]!= names[j][0] and \\\n                   names[j][0]!= names[k][0] and \\\n                   names[i][0]!= names[k][0]:\n                    count += 1\n                    \n    return str(count)"
    },
    {
        "number": 4273,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N = int(stdin.readline().strip())\n    names = [line.strip() for line in stdin]\n\n    # Sort names\n    names.sort()\n\n    # Count number of ways\n    count = 0\n    for i in range(N-2):\n        for j in range(i+1, N-1):\n            for k in range(j+1, N):\n                if (names[i][0] in ['M', 'A', 'R', 'C', 'H'] and\n                    names[j][0] in ['M', 'A', 'R', 'C', 'H'] and\n                    names[k][0] in ['M', 'A', 'R', 'C', 'H'] and\n                    names[i][0]!= names[j][0] and\n                    names[i][0]!= names[k][0] and\n                    names[j][0]!= names[k][0]):\n                    count += 1\n\n    # Print result\n    print(count)\n\n    return \"\""
    },
    {
        "number": 4273,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    names = [stdin.readline().strip() for _ in range(n)]\n\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                for k in range(n):\n                    if i!= k and j!= k:\n                        if names[i][0] in ['M', 'A', 'R', 'C', 'H'] and \\\n                           names[j][0] in ['M', 'A', 'R', 'C', 'H'] and \\\n                           names[k][0] in ['M', 'A', 'R', 'C', 'H'] and \\\n                           names[i][0]!= names[j][0] and \\\n                           names[i][0]!= names[k][0] and \\\n                           names[j][0]!= names[k][0]:\n                            count += 1\n\n    return str(count)"
    },
    {
        "number": 4273,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    names = lines[1:]\n    \n    # Count number of ways to choose three people\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if (names[i][0] == 'M' or names[i][0] == 'A' or names[i][0] == 'R' or names[i][0] == 'C' or names[i][0] == 'H') and \\\n                    (names[j][0] == 'M' or names[j][0] == 'A' or names[j][0] == 'R' or names[j][0] == 'C' or names[j][0] == 'H') and \\\n                    (names[k][0] == 'M' or names[k][0] == 'A' or names[k][0] == 'R' or names[k][0] == 'C' or names[k][0] == 'H') and \\\n                    (names[i][0]!= names[j][0] and names[i][0]!= names[k][0] and names[j][0]!= names[k][0]):\n                    count += 1\n    \n    # Print result\n    return str(count)"
    },
    {
        "number": 4273,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    names = [line.strip() for line in stdin.readlines()]\n    \n    # Count number of valid choices\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if (names[i][0] in ['M', 'A', 'R', 'C', 'H'] and\n                    names[j][0] in ['M', 'A', 'R', 'C', 'H'] and\n                    names[k][0] in ['M', 'A', 'R', 'C', 'H'] and\n                    names[i][0]!= names[j][0] and\n                    names[i][0]!= names[k][0] and\n                    names[j][0]!= names[k][0]):\n                    count += 1\n    \n    return str(count)"
    },
    {
        "number": 4273,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *names = stdin.split()\n    n = int(n)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (names[i][0] in 'MACR' and names[j][0] in 'MACR' and names[k][0] in 'MACR' and\n                        names[i][0]!= names[j][0]!= names[k][0]!= names[i][0]):\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4274,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.strip().split()))\n    if M == N:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m = list(map(int, stdin.split()))\n\n    # Check if submission gets an AC\n    if m == n:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.split())\n    \n    # Check if submission passes all test cases\n    if M == N:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.split())\n\n    # check if submission gets AC\n    if m == n:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    M = int(lines[1])\n    if M == N:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == n:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4274,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determine whether Takahashi's submission gets an AC.\n\n    Args:\n    stdin: a string input containing two integers N and M separated by a space\n\n    Returns:\n    \"Yes\" if Takahashi's submission gets an AC, otherwise \"No\"\n    \"\"\"\n    n, m = map(int, stdin.split())\n    if m == n:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n\n    if M == N:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    if M == N:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if M == N:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s)!= 6:\n        return \"No\"\n    if s[2]!= s[3] or s[4]!= s[5]:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4275,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s)!= 6 or not s.islower():\n        return \"No\"\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[2] == s[3] and s[4] == s[5]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4275,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input string\n    s = stdin.strip()\n\n    # check if string is coffee-like\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s)!= 6 or not s.islower():\n        return \"No\"\n    return \"Yes\" if s[2] == s[3] and s[4] == s[5] else \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function determines whether a given string is coffee-like or not.\n\n    :param stdin: The input string\n    :return: \"Yes\" if the string is coffee-like, otherwise \"No\"\n    \"\"\"\n    s = stdin.strip()\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4276,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a list of routes, find the minimum cost of a route that takes not longer than time T.\n\n    Args:\n        stdin (str): input string in the format of \"N T\\nci ti\\n...cn tn\"\n\n    Returns:\n        str: the minimum cost of a route that takes not longer than time T.\n    \"\"\"\n    lines = stdin.split(\"\\n\")\n    N, T = list(map(int, lines[0].split()))\n    routes = []\n    for line in lines[1:]:\n        ci, ti = list(map(int, line.split()))\n        routes.append((ci, ti))\n    routes.sort(key=lambda x: x[1])\n    for route in routes:\n        if route[1] > T:\n            return \"TLE\"\n    min_cost = float('inf')\n    for i in range(N):\n        cost = routes[i][0]\n        time = routes[i][1]\n        if time < T:\n            min_cost = min(min_cost, cost)\n    if min_cost == float('inf'):\n        return \"TLE\"\n    return str(min_cost)"
    },
    {
        "number": 4276,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N, T = map(int, stdin.readline().split())\n    routes = [(int(c), int(t)) for c, t in [stdin.readline().split() for _ in range(N)]]\n\n    # Sort routes by time\n    routes.sort(key=lambda x: x[1])\n\n    # Initialize variables\n    current_time = 0\n    total_cost = 0\n\n    # Traverse routes\n    for cost, time in routes:\n        # If current time plus time of current route is greater than T, return TLE\n        if current_time + time > T:\n            return 'TLE'\n        # Add current cost to total cost\n        total_cost += cost\n        # Update current time\n        current_time += time\n\n    # Return total cost\n    return total_cost"
    },
    {
        "number": 4276,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, T = map(int, stdin.readline().split())\n    cost_time_pairs = [list(map(int, stdin.readline().split())) for _ in range(N)]\n    # sort by time\n    cost_time_pairs.sort(key=lambda x: x[1])\n    # calculate dp\n    dp = [float('inf')] * (T + 1)\n    dp[0] = 0\n    for cost, time in cost_time_pairs:\n        for t in range(T, -1, -1):\n            if dp[t]!= float('inf') and t + time <= T:\n                dp[t + time] = min(dp[t + time], dp[t] + cost)\n    # check if TLE\n    if dp[-1] == float('inf'):\n        return 'TLE'\n    # find min cost\n    min_cost = float('inf')\n    for t in range(T + 1):\n        if dp[t] < min_cost:\n            min_cost = dp[t]\n    return str(min_cost)\n\nprint(solution('''3 70\n7 60\n1 80\n4 50''')) # Output: 4\n\nprint(solution('''3 75\n7 60\n1 80\n4 50''')) # Output: TLE"
    },
    {
        "number": 4276,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    c = list(map(int, stdin.readline().strip().split()))\n    t = list(map(int, stdin.readline().strip().split()))\n\n    dp = [[float('inf')] * (t+1) for _ in range(n)]\n    dp[0][c[0]] = c[0]\n\n    for i in range(n):\n        for j in range(t+1):\n            if dp[i][j]!= float('inf'):\n                dp[i+1][min(j, t-t[i])] = min(dp[i+1][min(j, t-t[i])], dp[i][j]+c[i])\n\n    if dp[n][t]!= float('inf'):\n        return str(dp[n][t])\n    else:\n        return 'TLE'"
    },
    {
        "number": 4276,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.readline().split())\n    costs = list(map(int, stdin.readline().split()))\n    times = list(map(int, stdin.readline().split()))\n    costs.sort()\n    times.sort()\n\n    # Try all possible routes to get home\n    best_cost = float('inf')\n    for i in range(N):\n        time_left = T - times[i]\n        # Check if this route is valid\n        if time_left < 0:\n            break\n        # Calculate cost of this route\n        cost = costs[i] + (time_left // 60) * 5\n        if time_left % 60 > 0:\n            cost += 5\n        # Update best cost\n        best_cost = min(best_cost, cost)\n\n    # Check if there is no valid route\n    if best_cost == float('inf'):\n        return 'TLE'\n    return str(best_cost)"
    },
    {
        "number": 4276,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, T = map(int, lines[0].split())\n    costs = []\n    times = []\n    for i in range(1, N+1):\n        c, t = map(int, lines[i].split())\n        costs.append(c)\n        times.append(t)\n    dp = [[float('inf')] * (T+1) for _ in range(N+1)]\n    for i in range(1, N+1):\n        for t in range(1, T+1):\n            if times[i-1] > t:\n                dp[i][t] = dp[i-1][t]\n            else:\n                dp[i][t] = min(dp[i-1][t], costs[i-1] + dp[i][t-times[i-1]])\n    if dp[N][T] == float('inf'):\n        return 'TLE'\n    else:\n        return str(dp[N][T])"
    },
    {
        "number": 4276,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    t = list(map(int, stdin.split()))\n    c.pop()\n    t.pop()\n    c.sort()\n    t.sort()\n    if t[-1] > t[-2] + c[-1]:\n        return \"TLE\"\n    else:\n        return str(t[-2] + c[-1])\n\nwith open(\"input.txt\", \"r\") as f:\n    stdin = f.read()\n\nwith open(\"output.txt\", \"w\") as f:\n    f.write(solution(stdin))"
    },
    {
        "number": 4276,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.readline().split())\n    c, t = map(list, zip(*[map(int, line.split()) for line in stdin]))\n    c.sort()\n    dp = [float('inf')] * (t+1)\n    dp[0] = 0\n    for cost in c:\n        for i in range(t, cost-1, -1):\n            dp[i] = min(dp[i], dp[i-cost]+cost)\n    if dp[t] == float('inf'):\n        return 'TLE'\n    else:\n        return str(dp[t])"
    },
    {
        "number": 4276,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.readline().split())\n    routes = []\n    for i in range(N):\n        c, t = map(int, stdin.readline().split())\n        routes.append((c, t))\n    routes.sort(key=lambda x: x[1])\n    min_cost = float('inf')\n    for i in range(N):\n        if routes[i][1] > T:\n            break\n        if routes[i][0] < min_cost:\n            min_cost = routes[i][0]\n    return str(min_cost) if min_cost!= float('inf') else 'TLE'"
    },
    {
        "number": 4276,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing input\n    N, T = map(int, stdin.readline().strip().split())\n    routes = list(map(int, stdin.readline().strip().split()))\n    routes = list(zip(routes[::2], routes[1::2]))\n\n    # Finding the minimum cost of a route\n    min_cost = float('inf')\n    for route in routes:\n        cost, time = route\n        if time > T:\n            continue\n        if cost < min_cost:\n            min_cost = cost\n    if min_cost == float('inf'):\n        return 'TLE'\n    else:\n        return str(min_cost)"
    },
    {
        "number": 4277,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, A, B = map(int, stdin.split())\n    \n    # Calculate minimum total travel expense\n    minimum_expense = N * min(A, B)\n    \n    # Return result as string\n    return str(minimum_expense)"
    },
    {
        "number": 4277,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    train_cost = N * A\n    taxi_cost = B\n    minimum_total_cost = min(train_cost, taxi_cost)\n    return str(minimum_total_cost)"
    },
    {
        "number": 4277,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, a, b = list(map(int, stdin.split()))\n\n    # Calculate minimum total travel expense\n    min_expense = a * n + b\n\n    # Print result\n    return str(min_expense)"
    },
    {
        "number": 4277,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Splitting the input string into a list of strings\n    inputs = stdin.split()\n    # Converting the list of strings to a list of integers\n    n, a, b = map(int, inputs)\n    # Calculating the total cost of train and taxi\n    train_cost = n * a\n    taxi_cost = b\n    # Finding the minimum total cost\n    min_cost = min(train_cost, taxi_cost)\n    # Returning the minimum total cost as a string\n    return str(min_cost)"
    },
    {
        "number": 4277,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, A, B = map(int, stdin.split())\n    \n    # Calculate minimum total travel expense\n    min_expense = N * A + B\n    \n    # Return minimum total travel expense\n    return str(min_expense)"
    },
    {
        "number": 4277,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, a, b = map(int, stdin.split())\n\n    # calculate minimum total travel expense\n    min_total = (n * a) + b\n\n    # print minimum total travel expense\n    return str(min_total)"
    },
    {
        "number": 4277,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, A, B = map(int, stdin.strip().split())\n\n    # Compute minimum total travel expense\n    min_total_expense = A * N + B\n    return str(min_total_expense)"
    },
    {
        "number": 4277,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    train_cost = N * A\n    taxi_cost = B\n    return str(min(train_cost, taxi_cost))"
    },
    {
        "number": 4277,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, a, b = map(int, stdin.split())\n\n    # Calculate minimum total travel expense\n    total_expense = n * a + b\n\n    # Return minimum total travel expense\n    return str(total_expense)"
    },
    {
        "number": 4277,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    train_cost = n * a\n    taxi_cost = b\n    return str(min(train_cost, taxi_cost))"
    },
    {
        "number": 4278,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin.readline())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    \n    # create dictionary to store the count of each character\n    counts = {}\n    for string in strings:\n        for char in string:\n            if char in counts:\n                counts[char] += 1\n            else:\n                counts[char] = 1\n    \n    # create list of tuples with (anagram, count)\n    anagrams = []\n    for string in strings:\n        count = {}\n        for char in string:\n            if char in count:\n                count[char] += 1\n            else:\n                count[char] = 1\n        anagrams.append((string, count))\n    \n    # count pairs of anagrams\n    pairs = 0\n    for i in range(len(anagrams)):\n        for j in range(i+1, len(anagrams)):\n            if anagrams[i][1] == anagrams[j][1]:\n                pairs += 1\n    \n    return str(pairs)"
    },
    {
        "number": 4278,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(n)]\n\n    # Count the frequency of characters in each string\n    freqs = [[0] * 26 for _ in range(n)]\n    for i, s in enumerate(strings):\n        for c in s:\n            freqs[i][ord(c) - ord('a')] += 1\n\n    # Check each pair of strings for an anagram\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if freqs[i] == freqs[j]:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4278,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = []\n    for i in range(n):\n        strings.append(stdin.readline().strip())\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if is_anagram(strings[i], strings[j]):\n                count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    strings = lines[1:]\n\n    # Create a dictionary for each string, where the keys are the sorted characters and the values are the counts\n    anagrams = {}\n    for string in strings:\n        sorted_string = ''.join(sorted(string))\n        if sorted_string in anagrams:\n            anagrams[sorted_string] += 1\n        else:\n            anagrams[sorted_string] = 1\n\n    # Count the number of pairs of strings that are anagrams\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if sorted(strings[i]) == sorted(strings[j]):\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4278,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    pairs = 0\n\n    for i in range(N):\n        for j in range(i+1, N):\n            if sorted(lines[i]) == sorted(lines[j]):\n                pairs += 1\n\n    return str(pairs)"
    },
    {
        "number": 4278,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    strings = lines[1:]\n\n    # Counting anagrams\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if sorted(strings[i]) == sorted(strings[j]):\n                count += 1\n\n    # Outputting result\n    print(count)\n\n    # For debugging purposes\n    # print(strings)\n    # print(count)\n\n    return str(count)"
    },
    {
        "number": 4278,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    pairs = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if sorted(stdin.readline().strip()) == sorted(stdin.readline().strip()):\n                pairs += 1\n    return str(pairs)"
    },
    {
        "number": 4278,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    num_strings = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(num_strings)]\n    \n    # count number of anagrams for each string\n    count_dict = {}\n    for s in strings:\n        count_dict[s] = count_anagrams(s)\n    \n    # count number of pairs of anagrams\n    num_pairs = 0\n    for i in range(num_strings):\n        for j in range(i+1, num_strings):\n            if count_dict[strings[i]] == count_dict[strings[j]]:\n                num_pairs += 1\n    \n    return num_pairs\n\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = []\n    for _ in range(n):\n        strings.append(stdin.readline().strip())\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if sorted(strings[i]) == sorted(strings[j]):\n                count += 1\n    return str(count)"
    },
    {
        "number": 4278,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = [stdin.readline().strip() for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if sorted(words[i]) == sorted(words[j]):\n                count += 1\n    return count"
    },
    {
        "number": 4279,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    output = []\n    for i in range(q):\n        k = int(stdin.readline().strip())\n        if k < 1:\n            output.append(1)\n        elif k > 56:\n            output.append(0)\n        else:\n            if k % 3 == 1:\n                output.append(k // 3 + 1)\n            elif k % 3 == 2:\n                output.append(k // 3 * 2 + 1)\n            else:\n                output.append(k // 3)\n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4279,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    digits = list('112123123412345678910')\n    for i in range(q):\n        k = int(stdin.readline().strip())\n        x = digits[k-1]\n        print(x)"
    },
    {
        "number": 4279,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    q = int(input_list[0])\n    output_list = []\n    for i in range(1, q+1):\n        k = int(input_list[i])\n        if k == 1:\n            output_list.append(1)\n        else:\n            block = (k*(k+1))//2 + 1\n            output_list.append(str(block)[k-1])\n    return '\\n'.join(output_list)"
    },
    {
        "number": 4279,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    q = int(stdin.readline().strip())\n    k = [int(stdin.readline().strip()) for _ in range(q)]\n\n    # Initialize sequence\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n\n    # Calculate digit at position k\n    res = [sequence[i-1] for i in k]\n\n    # Return result as string\n    return '\\n'.join(res)"
    },
    {
        "number": 4279,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4279,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    sequence = \"11212312341234512345612345671234567812345678912345678910\"\n    for i in range(q):\n        k = int(stdin.readline().strip())\n        digit = sequence[k-1]\n        print(digit)"
    },
    {
        "number": 4279,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    queries = list(map(int, stdin.strip().split()))\n    easy_seq = \"11212312341234512345612345671234567812345678912345678910\"\n    hard_seq = \"1112223334445556667778889991011121314151617181920\"\n    seq = hard_seq\n    for query in queries:\n        if query > 10**9:\n            seq = easy_seq\n        print(seq[query-1])"
    },
    {
        "number": 4279,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    q = int(lines[0])\n    result = []\n    for i in range(1, q+1):\n        k = int(lines[i])\n        if k == 1:\n            result.append('1')\n        else:\n            # calculate the position of the digit to be returned\n            pos = (k-1)//56 + 1\n            digit = k - (56*(pos-1))\n            # calculate the value of the digit to be returned\n            if pos == 1:\n                value = str(digit)\n            else:\n                value = str(pos) + '0'*(digit-1)\n            result.append(value[-1])\n    return '\\n'.join(result)"
    },
    {
        "number": 4279,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        k = int(stdin.readline().strip())\n        if k == 1:\n            print(1)\n        else:\n            block_size = (k * 2) // (i + 1)\n            if (k * 2) % (i + 1) == 0:\n                digit = i + 1\n            else:\n                digit = i + 2\n            if k <= block_size * (i + 1):\n                position = k - 1\n            else:\n                position = block_size + (k - (block_size * (i + 1)))\n            print(position % 10)"
    },
    {
        "number": 4279,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    for i in range(q):\n        k = int(stdin.split()[i])\n        if k <= 10:\n            if k <= 1:\n                digit = 1\n            else:\n                digit = 2\n        else:\n            digit = (k - 1) // 10 + 1\n        print(digit)"
    },
    {
        "number": 4280,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    roads = []\n    for i in range(n-1):\n        x, y = map(int, stdin.split())\n        roads.append((x-1, y-1))\n    roads.sort()\n    dp = [[False] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = True\n    for i, j in roads:\n        dp[i][j] = True\n        dp[j][i] = True\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                dp[i][j] |= dp[i][k] & dp[k][j]\n    count = 0\n    ans = [-1] * (n-1)\n    for i in range(n-1):\n        for j in range(n-1):\n            if dp[i][j]:\n                count += 1\n                ans[i] = count\n    r = count + 1\n    if r > k + 1:\n        return \"Impossible\"\n    if r == k + 1:\n        if roads[-1][0]!= roads[-2][0]:\n            return \"Impossible\"\n        if roads[-1][1]!= roads[-2][1]:\n            return \"Impossible\"\n        if roads[-1][0] == roads[-2][0] and roads[-1][1] == roads[-2][1]:\n            return \"Impossible\"\n    print(r)\n    print(\" \".join(map(str, ans)))"
    },
    {
        "number": 4280,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    roads = [tuple(map(int, stdin.readline().split())) for i in range(n-1)]\n\n    # construct graph\n    graph = [[] for i in range(n+1)]\n    for x, y in roads:\n        graph[x].append(y)\n        graph[y].append(x)\n\n    # find possible company assignments\n    def dfs(u, visited, company, comp_roads, c):\n        visited.add(u)\n        comp_roads[u] = company\n        for v in graph[u]:\n            if v not in visited:\n                dfs(v, visited, company, comp_roads, c)\n\n    comp_roads = [-1] * (n+1)\n    for i in range(1, n+1):\n        if comp_roads[i] == -1:\n            comp_roads[i] = 0\n            visited = set()\n            dfs(i, visited, 0, comp_roads, 1)\n\n    # count good cities\n    good_cities = 0\n    for i in range(1, n+1):\n        if len(set(comp_roads[j] for j in graph[i])) < n:\n            good_cities += 1\n\n    # check for multiple assignments\n    for i in range(1, n+1):\n        if len(set(comp_roads[j] for j in graph[i])) < n:\n            r = len(set(comp_roads[j] for j in graph[i]))\n            break\n\n    # assign companies to roads\n    companies = [0] * (n-1)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if comp_roads[roads[i][0]]!= comp_roads[roads[i][1]]:\n                companies[i] = comp_roads[roads[i][1]]\n            elif comp_roads[roads[j][0]]!= comp_roads[roads[j][1]]:\n                companies[j] = comp_roads[roads[j][1]]\n            else:\n                companies[i] = comp_roads[roads[i][0]]\n                companies[j] = comp_roads[roads[j][0]]\n\n    # output\n    print(r)\n    print(*companies)\n\n    return \"\""
    },
    {
        "number": 4280,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    edges = [list(map(int, stdin.readline().split())) for _ in range(n-1)]\n    graph = [[] for _ in range(n+1)]\n    for i in range(len(edges)):\n        x, y = edges[i]\n        graph[x].append(y)\n        graph[y].append(x)\n    visited = [False] * (n+1)\n    q = [1]\n    while q:\n        curr = q.pop(0)\n        for child in graph[curr]:\n            if not visited[child]:\n                visited[child] = True\n                q.append(child)\n    bad_cities = 0\n    for i in range(2, n+1):\n        if not visited[i]:\n            bad_cities += 1\n        if bad_cities > k:\n            break\n    r = min(n-1, k, n-2-bad_cities)\n    if r == 0:\n        return \"0\"\n    stdout = f\"{r}\\n\"\n    used_companies = [False] * r\n    for i in range(n-1):\n        x, y = edges[i]\n        for j in range(r):\n            if not used_companies[j]:\n                used_companies[j] = True\n                if x in graph[y] or y in graph[x]:\n                    break\n                if j == r-1:\n                    used_companies[j] = False\n        stdout += str(j+1) + \" \"\n    return stdout"
    },
    {
        "number": 4280,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = map(int, stdin.split())\n    edges = []\n    for i in range(n-1):\n        x, y = map(int, stdin.split())\n        edges.append((x, y))\n    \n    # count number of companies\n    companies = set()\n    for x, y in edges:\n        companies.add(x)\n        companies.add(y)\n    r = len(companies)\n    \n    # assign companies to edges\n    companies = list(companies)\n    c = [0] * (n-1)\n    for i, (x, y) in enumerate(edges):\n        c[i] = companies.index(x) + 1\n    \n    # check if there are at most k not good cities\n    cnt = 0\n    for i, x in enumerate(c):\n        if x == 1 and all(c[j]!= x for j in range(n-1) if j!= i):\n            cnt += 1\n            if cnt > k:\n                break\n    if cnt <= k:\n        print(r)\n        print(' '.join(map(str, c)))\n    else:\n        print(-1)\n    "
    },
    {
        "number": 4280,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    edges = []\n    for i in range(n-1):\n        x, y = map(int, stdin.split()[0:2])\n        edges.append((x, y))\n        edges.append((y, x))\n    G = nx.Graph()\n    G.add_edges_from(edges)\n    degrees = [d for n, d in G.degree()]\n    if sum(1 for d in degrees if d >= 2) > k:\n        return \"No solution\"\n    r = k + 1\n    while True:\n        r -= 1\n        if r < 1:\n            return \"No solution\"\n        components = [len(c) for c in sorted(nx.connected_components(G), key=len, reverse=True)]\n        if max(components) <= k:\n            return r\n    return \"No solution\"\n\nstdin = \"\"\"6 2\n1 4\n4 3\n3 5\n3 6\n5 2\"\"\"\nprint(solution(stdin))\nstdin = \"\"\"4 2\n3 1\n1 4\n1 2\"\"\"\nprint(solution(stdin))\nstdin = \"\"\"10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 4280,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    edges = [tuple(map(int, line.strip().split())) for line in stdin]\n    graph = [[] for _ in range(n + 1)]\n    for x, y in edges:\n        graph[x].append(y)\n        graph[y].append(x)\n    colors = [-1] * (n + 1)\n    c = 0\n    for i in range(1, n + 1):\n        if colors[i] == -1:\n            colors[i] = c\n            queue = [i]\n            while queue:\n                curr = queue.pop(0)\n                for neigh in graph[curr]:\n                    if colors[neigh] == -1:\n                        colors[neigh] = 1 - colors[curr]\n                        queue.append(neigh)\n            c += 1\n    c -= 1\n    ans = c\n    if c > k:\n        return f\"There is no answer.\\n\"\n    for i in range(n):\n        x, y = edges[i]\n        if colors[x] == colors[y]:\n            ans -= 1\n            if ans < k:\n                return f\"There is no answer.\\n\"\n    ans = min(ans, n - k)\n    return f\"{ans}\\n\" + \" \".join(str(colors[i]) for i in range(1, n + 1)) + \"\\n\""
    },
    {
        "number": 4280,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    roads = []\n    for i in range(n-1):\n        x, y = map(int, stdin.split())\n        roads.append((x-1, y-1))\n        roads.append((y-1, x-1))\n    roads = list(set(roads))\n\n    # number of cities which have at least two roads of the same company\n    cities = [0] * n\n    for i in range(n-1):\n        x, y = roads[i]\n        if cities[x]!= 0 and cities[y]!= 0 and cities[x]!= cities[y]:\n            cities[x] = max(cities[x], cities[y])\n            cities[y] = max(cities[x], cities[y])\n        elif cities[x]!= 0:\n            cities[y] = cities[x]\n        elif cities[y]!= 0:\n            cities[x] = cities[y]\n        else:\n            cities[x] = i+1\n            cities[y] = i+1\n\n    # check for number of companies\n    r = 0\n    for i in range(n):\n        if cities[i]!= 0 and cities.count(cities[i]) >= 2:\n            r = max(r, cities[i])\n    r += 1\n\n    if r > n - 1:\n        return \"impossible\"\n\n    return str(r) + \"\\n\" + \" \".join(str(cities[i]+1) for i in range(n))\n\nstdin = \"\"\"\n6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n\"\"\"\n\nprint(solution(stdin)) # Output: \"2\\n1 2 1 1 2\""
    },
    {
        "number": 4280,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    roads = []\n    for _ in range(n-1):\n        x, y = map(int, stdin.split())\n        roads.append((x, y))\n    roads = set(roads)\n    r = 1\n    while True:\n        good_cities = []\n        for i in range(1, n+1):\n            if all(i not in (road[0], road[1]) for road in roads):\n                good_cities.append(i)\n        if len(good_cities) > k:\n            r += 1\n            continue\n        break\n    print(r)\n    company = [0] * (n-1)\n    for i in range(n-1):\n        if i % 2 == 0:\n            company[i] = r - 1\n        else:\n            company[i] = r\n    print(*company)\n    return \"\""
    },
    {
        "number": 4280,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    edges = []\n    for i in range(n-1):\n        x, y = map(int, stdin.readline().split())\n        edges.append((x, y))\n    visited = [0]*n\n    visited[0] = 1\n    q = [(0, -1, 0)]\n    res = []\n    while q:\n        cur, prev, color = q.pop(0)\n        for nei in edges:\n            if nei[0] == cur:\n                next_ = nei[1]\n            elif nei[1] == cur:\n                next_ = nei[0]\n            else:\n                continue\n            if visited[next_] == 0:\n                visited[next_] = 1\n                if color == 0:\n                    color = color + 1\n                    q.append((next_, cur, color))\n                else:\n                    res.append(color)\n                    q.append((next_, cur, color))\n                    if color == k:\n                        return '\\n'.join([str(r) for r in res])\n    return 'No solution'"
    },
    {
        "number": 4280,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    graph = [[] for i in range(n+1)]\n    for i in range(n-1):\n        x, y = map(int, stdin.split())\n        graph[x].append(y)\n        graph[y].append(x)\n    q = [1]\n    visited = [False]*(n+1)\n    visited[1] = True\n    c = 0\n    while q:\n        curr = q.pop(0)\n        for i in graph[curr]:\n            if not visited[i]:\n                visited[i] = True\n                q.append(i)\n        c += 1\n    if c <= k:\n        print(c)\n        ans = [1]*(n-1)\n        print(' '.join(map(str, ans)))\n    else:\n        for i in range(2, n+1):\n            if not visited[i]:\n                q = [i]\n                visited = [False]*(n+1)\n                visited[i] = True\n                c = 0\n                while q:\n                    curr = q.pop(0)\n                    for j in graph[curr]:\n                        if not visited[j]:\n                            visited[j] = True\n                            q.append(j)\n                    c += 1\n                if c <= k:\n                    r = c + 1\n                    print(r)\n                    ans = [1]*(n-1)\n                    for i in range(n-1):\n                        x, y = map(int, stdin.split())\n                        if x == curr or y == curr:\n                            ans[i] = r\n                    print(' '.join(map(str, ans)))\n                    break\n                else:\n                    continue\n        else:\n            print(-1)\n\nstdin = \"\"\"\n6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n\"\"\"\n\nsolution(stdin)"
    },
    {
        "number": 4281,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    \n    final_x = [0] * n\n    final_x[0] = x[0]\n    final_x[n-1] = x[n-1]\n    \n    # initialize first element\n    for i in range(1, n):\n        if x[i] > x[i-1]:\n            final_x[i] = final_x[i-1] + 1\n        elif x[i] < x[i-1]:\n            final_x[i] = final_x[i-1] - 1\n        else:\n            final_x[i] = final_x[i-1]\n            \n    # initialize last element\n    for i in range(n-2, -1, -1):\n        if x[i] > x[i+1]:\n            final_x[i] = final_x[i+1] + 1\n        elif x[i] < x[i+1]:\n            final_x[i] = final_x[i+1] - 1\n        else:\n            final_x[i] = final_x[i+1]\n    \n    # print(final_x)\n    min_occupied = max_occupied = final_x[0]\n    \n    for i in range(1, n):\n        if final_x[i] > final_x[i-1]:\n            final_x[i] = final_x[i-1] + 1\n        elif final_x[i] < final_x[i-1]:\n            final_x[i] = final_x[i-1] - 1\n        else:\n            final_x[i] = final_x[i-1]\n        \n        min_occupied = min(min_occupied, final_x[i])\n        max_occupied = max(max_occupied, final_x[i])\n    \n    return f\"{min_occupied} {max_occupied}\""
    },
    {
        "number": 4281,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    \n    min_count = float('inf')\n    max_count = -1\n    \n    for i in range(n):\n        if x[i] == 1:\n            min_count = 1\n            max_count = 1\n        elif x[i] == n:\n            min_count = 1\n            max_count = 1\n        else:\n            left_count = right_count = 1\n            \n            if i > 0 and x[i] == x[i-1]+1:\n                left_count += 1\n            if i < n-1 and x[i] == x[i+1]-1:\n                right_count += 1\n                \n            min_count = min(min_count, left_count, right_count)\n            max_count = max(max_count, left_count, right_count)\n    \n    return f\"{min_count} {max_count}\""
    },
    {
        "number": 4281,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    \n    # Map from old position to new position\n    moves = {x[i] - 1: x[i] - 2 for i in range(n) if x[i] > 1}\n    moves.update({x[i] + 1: x[i] - 1 for i in range(n) if x[i] < n})\n    moves.update({x[i]: x[i] for i in range(n)})\n    moves.update({x[i] + 1: x[i] + 2 for i in range(n) if x[i] < n - 1})\n    moves.update({x[i] - 1: x[i] + 1 for i in range(n) if x[i] > 1})\n    moves.update({0: 1})\n    moves.update({n + 1: n})\n    \n    # Apply moves\n    y = [moves[x[i]] for i in range(n)]\n    \n    # Count distinct positions\n    distinct_positions = set(y)\n    min_occupied = len(distinct_positions)\n    max_occupied = len(y)\n    \n    return f\"{min_occupied} {max_occupied}\"\n    \n"
    },
    {
        "number": 4281,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    final_x = []\n    for i in range(n):\n        if x[i] == 0:\n            final_x.append(1)\n        elif x[i] == n+1:\n            final_x.append(n)\n        else:\n            final_x.append(x[i])\n    occupied_houses = set(final_x)\n    return f\"{min(occupied_houses)} {max(occupied_houses)}\""
    },
    {
        "number": 4281,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n\n    final = set()\n    for i in range(n):\n        for j in range(-1, 2):\n            final.add(x[i]+j)\n\n    return \" \".join(map(str, [min(final), max(final)]))\n"
    },
    {
        "number": 4281,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n    final_positions = set()\n    for i in range(n):\n        if x[i] == 1:\n            final_positions.add(1)\n        elif x[i] == n:\n            final_positions.add(n)\n        else:\n            final_positions.add(x[i]-1)\n            final_positions.add(x[i])\n            final_positions.add(x[i]+1)\n    max_occupied_houses = len(final_positions)\n    min_occupied_houses = max_occupied_houses\n    for i in range(n):\n        for j in range(i+1, n):\n            if x[i] == x[j]:\n                continue\n            new_x = [x[k] for k in range(n) if k!= i and k!= j]\n            new_x.append(x[i]+x[j])\n            new_x.sort()\n            if new_x[0] == 0 or new_x[-1] == n+1:\n                continue\n            new_final_positions = set()\n            for k in range(len(new_x)):\n                if k == 0:\n                    new_final_positions.add(new_x[k])\n                elif k == len(new_x)-1:\n                    new_final_positions.add(new_x[k])\n                else:\n                    new_final_positions.add(new_x[k]-1)\n                    new_final_positions.add(new_x[k])\n                    new_final_positions.add(new_x[k]+1)\n            occupied_houses = len(new_final_positions)\n            if occupied_houses > max_occupied_houses:\n                max_occupied_houses = occupied_houses\n            if occupied_houses < min_occupied_houses:\n                min_occupied_houses = occupied_houses\n    return str(min_occupied_houses) +'' + str(max_occupied_houses)"
    },
    {
        "number": 4281,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n\n    final_positions = set()\n    for i in range(n):\n        for j in [x[i]-1, x[i]+1, x[i]]:\n            if j >= 1 and j <= n+1:\n                final_positions.add(j)\n    \n    min_occupied = len(final_positions)\n    max_occupied = len(x)\n    \n    print(min_occupied, max_occupied)\n\ndef"
    },
    {
        "number": 4281,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = [int(num) for num in stdin.readline().strip().split()]\n    \n    min_num = float('inf')\n    max_num = 0\n    \n    for i in range(1, n+1):\n        if x[i-1] - i <= 0 and x[i-1] + i >= n+1:\n            continue\n        \n        left = i if x[i-1] - i > 0 else x[i-1]\n        right = i if x[i-1] + i < n+1 else x[i-1]\n        \n        min_num = min(min_num, left, right, n-left, n-right)\n        max_num = max(max_num, left, right, n-left, n-right)\n    \n    return f\"{min_num} {max_num}\"\n\nprint(solution(input()))"
    },
    {
        "number": 4281,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    occupied = set(x)\n    if 0 in occupied and n+1 in occupied:\n        occupied.remove(0)\n        occupied.remove(n+1)\n    min_occupied = max_occupied = len(occupied)\n    for i in range(n):\n        left = x[i]-1\n        right = x[i]+1\n        if left >= 0 and left not in occupied:\n            occupied.add(left)\n            min_occupied = min(min_occupied, len(occupied))\n            max_occupied = max(max_occupied, len(occupied))\n        if right <= n and right not in occupied:\n            occupied.add(right)\n            min_occupied = min(min_occupied, len(occupied))\n            max_occupied = max(max_occupied, len(occupied))\n        if x[i] in occupied:\n            occupied.remove(x[i])\n            min_occupied = min(min_occupied, len(occupied))\n            max_occupied = max(max_occupied, len(occupied))\n    return f\"{min_occupied} {max_occupied}\""
    },
    {
        "number": 4281,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n\n    final_positions = set()\n    for i in range(n):\n        for move in range(1, 3):\n            new_pos = x[i] + move\n            if new_pos == 0 or new_pos == n+1:\n                new_pos = new_pos - 1\n            if new_pos in x:\n                continue\n            x[i] = new_pos\n            if tuple(x) in final_positions:\n                continue\n            final_positions.add(tuple(x))\n            x[i] = x[i] - move\n    max_occupied = len(final_positions)\n    min_occupied = n - len(x)\n    return str(min_occupied) + \" \" + str(max_occupied)"
    },
    {
        "number": 4282,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().strip().split())))\n    # check if the circle is already restored\n    for i in range(n):\n        if a[i][0]!= i+1 and a[i][1]!= i+1 and a[i][0]!= a[i][1]:\n            return \"IMPOSSIBLE\"\n    # try to restore the circle\n    p = [0] * n\n    for i in range(n):\n        if a[i][0] == i+1:\n            p[i] = a[i][1]\n        else:\n            p[i] = a[i][0]\n    if p[0] == 0:\n        return \"IMPOSSIBLE\"\n    # check if the permutation is correct\n    for i in range(n):\n        if p[i] == 0:\n            return \"IMPOSSIBLE\"\n        if p[i]!= i+1:\n            j = p.index(i+1)\n            p[i], p[j] = p[j], p[i]\n            break\n    return \" \".join(map(str, p))"
    },
    {
        "number": 4282,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [[int(x) for x in stdin.readline().split()] for _ in range(n)]\n    p = list(range(1, n+1))\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i][0] == a[j][0] or a[i][0] == a[j][1]:\n                p[i], p[j] = p[j], p[i]\n            elif a[i][1] == a[j][0] or a[i][1] == a[j][1]:\n                p[i], p[j] = p[j], p[i]\n    return''.join(map(str, p))\n\nprint(solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\"))\nprint(solution(\"3\\n2 3\\n3 1\\n1 2\"))"
    },
    {
        "number": 4282,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    kids = list(map(int, stdin.readlines()))\n    kids_dict = {}\n    for i in range(n):\n        kids_dict[kids[i*2]] = kids[i*2+1]\n    p = []\n    x = 1\n    for i in range(n):\n        p.append(x)\n        x = kids_dict[x]\n    p.append(1)\n    return''.join(map(str, p))"
    },
    {
        "number": 4282,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    p = list(range(1, n + 1))\n    for i in range(n):\n        j = (p[i] - 1) % n\n        k = (j + 1) % n\n        x = a[j][1]\n        y = a[k][1]\n        if a[j][0] == x:\n            p[i] = x\n        elif a[k][0] == x:\n            p[i] = x\n        else:\n            p[i] = y\n    return''.join(map(str, p))"
    },
    {
        "number": 4282,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = []\n    for i in range(n):\n        a.append(tuple(map(int, stdin.readline().split())))\n    m = {}\n    for i in range(n):\n        m[a[i][0]] = a[i][1]\n        m[a[i][1]] = a[i][0]\n    p = list(range(1, n+1))\n    for i in range(n):\n        p[i] = m[p[i]]\n    return''.join(map(str, p))\n\nassert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3''') == '3 2 4 1 5'\nassert solution('''3\n2 3\n3 1\n1 2''') == '3 1 2'"
    },
    {
        "number": 4282,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    seen = set()\n    for i in range(n):\n        if (a[i][0], a[i][1]) in seen:\n            return \" \".join(map(str, [i] + [j for j in range(i + 1, n) if (a[j][0], a[j][1]) not in seen] + [j for j in range(1, i) if (a[j][0], a[j][1]) not in seen]))\n        seen.add((a[i][0], a[i][1]))\n    return \" \".join(map(str, range(n)))\n\nprint(solution(open(\"input.txt\")))"
    },
    {
        "number": 4282,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    p = list(range(1, n+1))\n    for i in range(n):\n        p[a[i][0]-1], p[a[i][1]-1] = p[a[i][1]-1], p[a[i][0]-1]\n    return''.join(map(str, p))"
    },
    {
        "number": 4282,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    p = [i for i in range(1, n+1)]\n    for i in range(n):\n        j = (i + 1) % n\n        if a[p[i]-1][0] == p[j] or a[p[i]-1][1] == p[j]:\n            p[i], p[j] = p[j], p[i]\n        if a[p[i]-1][0] == p[j] or a[p[i]-1][1] == p[j]:\n            p[i], p[j] = p[j], p[i]\n    return''.join(map(str, p))"
    },
    {
        "number": 4282,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [tuple(map(int, stdin.split())) for _ in range(n)]\n    p = list(range(1, n+1))\n    for i in range(n):\n        if a[i][0]!= a[i][1]:\n            j = p.index(a[i][1])\n            p[i+1], p[j] = p[j], p[i+1]\n    return''.join(map(str, p))"
    },
    {
        "number": 4282,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    k = a.index(1) + 1\n    p = [k] + [i+1 if i+1 <= n else i+1-n for i in range(n-1)]\n    for i in range(n):\n        j = (p.index(i+1) + 1) % n\n        x = p[j]\n        j = a.index(x)\n        a[j], a[(j+1) % 2] = a[(j+1) % 2], a[j]\n        p[j], p[(j+1) % n] = p[(j+1) % n], p[j]\n    return''.join(map(str, p))\n\nprint(solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\")) # Output: 3 2 4 1 5 \nprint(solution(\"3\\n2 3\\n3 1\\n1 2\")) # Output: 3 1 2 "
    },
    {
        "number": 4283,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    ans = 1\n    for i in range(1, n):\n        if abs(a[i] - a[i-1]) <= 5:\n            ans += 1\n        else:\n            break\n    return ans"
    },
    {
        "number": 4283,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    max_team_size = n // 2\n    for i in range(1, n):\n        for j in range(i):\n            if abs(a[i] - a[j]) <= 5:\n                max_team_size = min(max_team_size, i - j - 1)\n    return max_team_size"
    },
    {
        "number": 4283,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    skills = list(map(int, stdin.split()[1:]))\n    skills.sort()\n    max_num_students = 1\n    for i in range(n):\n        if skills[i] + 5 <= skills[-1]:\n            max_num_students += 1\n    return str(max_num_students)"
    },
    {
        "number": 4283,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    max_students = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(a[i] - a[j]) <= 5:\n                max_students = max(max_students, 1 + solution(stdin))\n    return max_students"
    },
    {
        "number": 4283,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    ans = 1\n    for i in range(1, n):\n        if a[i] - a[i-1] <= 5:\n            ans = max(ans, i+1)\n    return str(ans)\n\nprint(solution(input()))"
    },
    {
        "number": 4283,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    a.sort()\n    ans = 1\n    \n    for i in range(1, n):\n        if a[i] - a[i-1] <= 5:\n            ans += 1\n        else:\n            break\n            \n    return str(ans)"
    },
    {
        "number": 4283,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n\n    max_size = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[j] - a[i] <= 5:\n                max_size = max(max_size, j-i+1)\n\n    return max_size\n"
    },
    {
        "number": 4283,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline())\n    skills = list(map(int, stdin.readline().split()))\n    \n    # sort skills\n    skills.sort()\n    \n    # initialize variables\n    count = 1\n    skill = skills[0]\n    \n    # iterate over skills\n    for i in range(1, n):\n        # check if skill is within range of 5\n        if skills[i] - skill <= 5:\n            skill = skills[i]\n        else:\n            count += 1\n            skill = skills[i]\n    \n    # return count of students in balanced team\n    return str(count)"
    },
    {
        "number": 4283,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    def count(l):\n        return sum(abs(l[i]-l[i+1])<=5 for i in range(len(l)-1))\n    \n    return max(1, max(count([a[i] for i in range(j, n)]+[a[j]]+[a[i] for i in range(j+1, n)]) for j in range(n)))"
    },
    {
        "number": 4283,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    left, right = 0, a[-1] - a[0]\n    while left < right:\n        mid = (left + right) // 2\n        if all(abs(a[i+1] - a[i]) <= mid for i in range(n-1)):\n            left = mid + 1\n        else:\n            right = mid\n    return left"
    },
    {
        "number": 4284,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    lines = lines[1:]\n    for line in lines:\n        k, n, a, b = map(int, line.split())\n        if a > b:\n            continue\n        if k >= a and k > b:\n            print(n)\n            continue\n        elif k >= a and k <= b:\n            print(n - 1)\n            continue\n        else:\n            print(-1)\n            continue\n    return ''"
    },
    {
        "number": 4284,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for i in range(q):\n        k, n, a, b = map(int, stdin.readline().split())\n        if k < a or k < b:\n            print(-1)\n        else:\n            res = min(k, a)\n            for j in range(n-1):\n                if res <= a:\n                    res = min(res + b, a)\n                elif res <= b:\n                    res = min(res + b, a)\n                else:\n                    print(-1)\n                    break\n            else:\n                print(res)\n    return \"\""
    },
    {
        "number": 4284,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        k, n, a, b = map(int, stdin.readline().strip().split())\n        if k < a:\n            print(-1)\n        elif k < b:\n            print(n)\n        else:\n            print(k//a) if k//a < n else print(-1)\n    return \"\""
    },
    {
        "number": 4284,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, stdin.readline().split())\n        if a >= b:\n            print(-1)\n            continue\n        if k <= a:\n            print(0)\n            continue\n        if k <= b:\n            print(1)\n            continue\n        # k > b, k > a\n        # get the minimum number of turns that can be played just\n        # by increasing the charge by a at each turn\n        remaining_turns = n\n        while True:\n            remaining_charge = k - a\n            if remaining_charge < 0:\n                break\n            remaining_turns -= 1\n            k = remaining_charge + b\n        if remaining_turns == 0:\n            print(n)\n        else:\n            print(-1)\n    return \"\""
    },
    {
        "number": 4284,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        k, n, a, b = map(int, stdin.readline().strip().split())\n\n        # Find the maximum number of turns Vova can just play\n        max_turns = 0\n        charge = k\n        for i in range(n):\n            if charge > a:\n                max_turns += 1\n                charge -= a\n            elif charge > b:\n                max_turns += 1\n                charge -= b\n            else:\n                return '-1'\n\n        # Print the maximum number of turns Vova can just play\n        print(max_turns)\n\n    return ''"
    },
    {
        "number": 4284,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split(\"\\n\")\n    for query in queries:\n        if not query:\n            continue\n        k, n, a, b = map(int, query.split())\n        if k <= a or k <= b:\n            print(-1)\n            continue\n        if a > b:\n            a, b = b, a\n        if k <= a + b:\n            print(-1)\n            continue\n        max_turns = 0\n        for i in range(1, n+1):\n            if i <= k // a:\n                max_turns = i\n            elif i <= k // b:\n                max_turns = i\n            else:\n                print(-1)\n                break\n        else:\n            print(max_turns)\n    return \"\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    lines = lines[1:]\n    for line in lines:\n        k, n, a, b = map(int, line.split())\n        if k >= a + b:\n            print(-1)\n            continue\n        if k == 0:\n            print(n)\n            continue\n        if k >= a:\n            print(n)\n            continue\n        if k >= b:\n            print(n - 1)\n            continue\n    return ''"
    },
    {
        "number": 4284,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n\n    for i in range(q):\n        k, n, a, b = map(int, stdin.readline().strip().split())\n\n        if b >= a:\n            print(-1)\n            continue\n\n        if k < a or k < b:\n            print(-1)\n            continue\n\n        if k // a >= n:\n            print(k // a)\n        else:\n            print(-1)\n\n    return \"\""
    },
    {
        "number": 4284,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def play_turn():\n        if battery_charge == 0:\n            return False\n        elif battery_charge >= a:\n            battery_charge -= a\n            return True\n        elif battery_charge >= b:\n            battery_charge -= b\n            return True\n        else:\n            return False\n    \n    stdin = stdin.split('\\n')\n    q = int(stdin[0])\n    stdin = stdin[1:]\n    for i in range(q):\n        k, n, a, b = list(map(int, stdin[i].split()))\n        battery_charge = k\n        first_play_turn = 0\n        while first_play_turn < n:\n            if play_turn():\n                first_play_turn += 1\n        if battery_charge == 0:\n            print(-1)\n        else:\n            print(first_play_turn)\n        if i < q - 1:\n            print('')"
    },
    {
        "number": 4284,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    for i in range(1, q+1):\n        k, n, a, b = map(int, lines[i].split())\n        if k % (a+b) == 0 or k % (a-b) == 0:\n            print(-1)\n            continue\n        turns_left = n\n        while turns_left > 0:\n            if k <= a and b <= k:\n                break\n            elif k > a and k <= b:\n                k -= a\n            elif k > b:\n                k -= b\n            turns_left -= 1\n        print(turns_left)\n    return \"\""
    },
    {
        "number": 4285,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    MOD = int(1e9) + 7\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    count = 0\n    for i in range(n):\n        if s[i] == \"?\":\n            for j in range(3):\n                s_new = s[:i] + [\"a\", \"b\", \"c\"][j] + s[i+1:]\n                count = (count + count_abc(s_new)) % MOD\n        else:\n            count = (count + count_abc(s[:i] + s[i:])) % MOD\n    return str(count)\n\ndef"
    },
    {
        "number": 4285,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 10**9 + 7\n    n, s = stdin.split('\\n')\n    n = int(n)\n    \n    # count the total number of subsequences \"abc\" in all strings obtained by replacing all question marks with letters \"a\", \"b\" and \"c\"\n    res = 1  # there is only one possible string consisting only of letters \"a\", \"b\" and \"c\"\n    for i in range(n):\n        if s[i] == '?':\n            res *= 3\n            res %= MOD\n        elif s[i] == 'a':\n            res *= 2\n            res %= MOD\n        elif s[i] == 'b':\n            res *= 2\n            res %= MOD\n        elif s[i] == 'c':\n            res *= 2\n            res %= MOD\n            \n    # count the total number of subsequences \"abc\" in all strings obtained by replacing all letters \"a\", \"b\" and \"c\" with question marks\n    cnt = 0\n    for i in range(n):\n        if s[i] == 'a':\n            cnt += 1\n        elif s[i] == 'b':\n            cnt += 1\n        elif s[i] == 'c':\n            cnt += 1\n            \n    # subtract the number of subsequences \"abc\" in all strings obtained by replacing all question marks with letters \"a\", \"b\" and \"c\"\n    cnt -= res\n    cnt %= MOD\n    \n    return str(cnt)\n\nprint(solution(\"6\\nac?b?c\"))  # Output: 24\nprint(solution(\"7\\n??????\"))  # Output: 2835\nprint(solution(\"9\\ncccbbbaaa\"))  # Output: 0\nprint(solution(\"5\\na???c\"))  # Output: 46<|im_sep|>"
    },
    {
        "number": 4285,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    MOD = 10**9 + 7\n    ans = 0\n    for i in range(len(s)):\n        if s[i] == '?':\n            for j in range(len(s)):\n                if s[j] == 'a' or s[j] == 'b' or s[j] == 'c':\n                    for k in range(len(s)):\n                        if s[k] == 'a' or s[k] == 'b' or s[k] == 'c':\n                            if (i!= j and j!= k and k!= i):\n                                if s[i] == s[j] == s[k] == 'a':\n                                    ans = (ans + 1) % MOD\n                                elif s[i] == s[j] == s[k] == 'b':\n                                    ans = (ans + 1) % MOD\n                                elif s[i] == s[j] == s[k] == 'c':\n                                    ans = (ans + 1) % MOD\n    return str(ans)\n\nstdin = \"\"\"\n6\nac?b?c\n\"\"\"\nprint(solution(stdin)) # Output: 24\n\nstdin = \"\"\"\n7\n???????\n\"\"\"\nprint(solution(stdin)) # Output: 2835\n\nstdin = \"\"\"\n9\ncccbbbaaa\n\"\"\"\nprint(solution(stdin)) # Output: 0\n\nstdin = \"\"\"\n5\na???c\n\"\"\"\nprint(solution(stdin)) # Output: 46"
    },
    {
        "number": 4285,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    mod = int(1e9) + 7\n\n    def count_abc(s):\n        dp = [[[0] * 3 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            if s[i] == 'a':\n                dp[i][i][0] = 1\n            elif s[i] == 'b':\n                dp[i][i][1] = 1\n            elif s[i] == 'c':\n                dp[i][i][2] = 1\n        for length in range(2, n+1):\n            for i in range(n-length+1):\n                j = i + length - 1\n                if s[i] == '?':\n                    for k in range(3):\n                        for l in range(3):\n                            if l == k:\n                                dp[i][j][k] += dp[i+1][j][l]\n                            else:\n                                dp[i][j][k] += dp[i+1][j][l] * 2\n                else:\n                    for k in range(3):\n                        dp[i][j][k] += dp[i+1][j][k]\n        return sum(dp[0][n-1])\n\n    return count_abc(s) % mod"
    },
    {
        "number": 4285,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    MOD = 10**9 + 7\n    count = 0\n    for i in range(n):\n        if s[i] == \"?\":\n            for j in \"abc\":\n                count += solution(stdin + j)\n        else:\n            count += 1\n    return count % MOD"
    },
    {
        "number": 4285,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    s = stdin.strip().split()[1]\n    k = s.count('?')\n    mod = int(1e9) + 7\n    count = 0\n    if k == 0:\n        count = (26 ** n) % mod\n    elif k == n:\n        count = (3 ** k) * (26 ** n) // 2 % mod\n    else:\n        count = (3 ** k) * (26 ** (n - k)) % mod\n    return str(count)"
    },
    {
        "number": 4285,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 10**9 + 7\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n    for i in range(2**n):\n        # convert the integer to binary representation\n        # then count the number of '1's\n        ones = bin(i).count('1')\n        # if the number of '1's is odd, then count all possible subsequences \"abc\"\n        if ones % 2 == 1:\n            sub = []\n            # for each '1', add its index to the subsequence\n            for j in range(n):\n                if i & (1 << j):\n                    sub.append(j)\n            # if the length of the subsequence is three, add it to the count\n            if len(sub) == 3:\n                count += 1\n            # for each possible triplet of indices, add it to the subsequence and check if it is a valid subsequence \"abc\"\n            for j in range(n-2):\n                for k in range(j+1, n-1):\n                    for l in range(k+1, n):\n                        if sub.count(j) == 1 and sub.count(k) == 1 and sub.count(l) == 1:\n                            count += 1\n                            sub = sub[:sub.index(j)] + sub[sub.index(j)+1:]\n                            sub = sub[:sub.index(k)] + sub[sub.index(k)+1:]\n                            sub = sub[:sub.index(l)] + sub[sub.index(l)+1:]\n    # return the count modulo 10^9+7\n    return str(count % MOD)"
    },
    {
        "number": 4285,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Reading the input\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    MOD = int(1e9) + 7  # Using modulo 10^9 + 7 for large numbers\n    a = 0  # Counter for subsequences \"abc\"\n    count = 0  # Counter for subsequences \"bca\"\n    for i in range(n):\n        if s[i] == \"a\":\n            a = (a * 3) % MOD\n            count = (count * 3) % MOD\n        elif s[i] == \"b\":\n            a = (a * 2) % MOD\n            count = (count * 2) % MOD\n        elif s[i] == \"c\":\n            a = (a * 1) % MOD\n            count = (count * 1) % MOD\n        elif s[i] == \"?\":\n            a = (a * 3) % MOD\n            count = (count * 3) % MOD\n\n    # Adding the final subsequences\n    a = (a * 1) % MOD\n    count = (count * 1) % MOD\n\n    # Adding the subsequences \"abc\" and \"bca\"\n    return (a + count) % MOD"
    },
    {
        "number": 4285,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    MOD = 10**9 + 7\n    \n    count = 0\n    for i in range(n):\n        if s[i] == '?':\n            for j in range(3):\n                new_s = s[:i] + ['a', 'b', 'c'][j] + s[i+1:]\n                count += new_s.count('abc')\n    print(count % MOD)\n    \n    return str(count % MOD)"
    },
    {
        "number": 4285,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 10**9 + 7\n    n = int(stdin.readline())\n    s = stdin.readline().rstrip()\n    count = 0\n    for i in range(n):\n        if s[i] == '?':\n            count += 1\n    ans = 0\n    for i in range(3**count):\n        temp = list(s)\n        j = 0\n        for k in range(n):\n            if temp[k] == '?':\n                temp[k] = 'abc'[i//(3**(j))]\n                j += 1\n        ans += temp.count('abc')\n        ans %= MOD\n    print(ans)"
    },
    {
        "number": 4286,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    special_offers = []\n    for i in range(m):\n        x, y, w = map(int, stdin.split()[2+n+i*3:2+n+(i+1)*3])\n        special_offers.append([x-1, y-1, w])\n    \n    # dp[i] represents the minimum cost of making the i-th vertex connected\n    dp = [float('inf')] * n\n    dp[0] = 0\n    for i in range(1, n):\n        for offer in special_offers:\n            if offer[0] == i or offer[1] == i:\n                dp[i] = min(dp[i], dp[offer[0]] + dp[offer[1]] + offer[2] + a[i])\n        if dp[i] == float('inf'):\n            dp[i] = dp[i-1] + a[i]\n    \n    return str(dp[-1])"
    },
    {
        "number": 4286,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = list(map(int, stdin.readline().strip().split()))\n    a = list(map(int, stdin.readline().strip().split()))\n    special_offers = []\n    for i in range(m):\n        x, y, w = list(map(int, stdin.readline().strip().split()))\n        special_offers.append((x-1, y-1, w)) # convert to 0-based indexing\n    \n    # Ford-Fulkerson algorithm\n    # create residual graph\n    residual = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                residual[i][j] = a[i] + a[j]\n    for x, y, w in special_offers:\n        residual[x][y] = w\n    \n    # augment\n    parent = [-1] * n\n    visited = [False] * n\n    def dfs(u, path_flow):\n        if u == n-1:\n            return path_flow\n        visited[u] = True\n        for v in range(n):\n            if visited[v] == False and residual[u][v] > 0:\n                parent[v] = u\n                new_path_flow = dfs(v, min(path_flow, residual[u][v]))\n                if new_path_flow > 0:\n                    residual[u][v] -= new_path_flow\n                    residual[v][u] += new_path_flow\n                    return new_path_flow\n        return 0\n    \n    max_flow = 0\n    while True:\n        visited = [False] * n\n        parent = [-1] * n\n        if dfs(0, float('inf')) == 0:\n            break\n        max_flow += 1\n    \n    return max_flow * a[-1]"
    },
    {
        "number": 4286,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    special_offers = []\n    for i in range(m):\n        x, y, w = map(int, stdin.readline().split())\n        special_offers.append((x-1, y-1, w)) # -1 since arrays start from 0\n    g = [[False for j in range(n)] for i in range(n)]\n    for i in range(n):\n        g[i][i] = True\n    for x, y, w in special_offers:\n        g[x][y] = True\n        g[y][x] = True\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if g[i][k] and g[k][j]:\n                    g[i][j] = True\n    visited = [False for i in range(n)]\n    visited[0] = True\n    q = [0]\n    res = 0\n    while q:\n        u = q.pop(0)\n        res += a[u]\n        for v in range(n):\n            if g[u][v] and not visited[v]:\n                visited[v] = True\n                q.append(v)\n    return res"
    },
    {
        "number": 4286,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    edges = []\n    for i in range(m):\n        x, y, w = map(int, stdin.readline().strip().split())\n        edges.append((x-1, y-1, w))\n    visited = [False] * n\n    stack = [0]\n    min_cost = 0\n    while stack:\n        curr = stack.pop()\n        if visited[curr]:\n            continue\n        visited[curr] = True\n        min_cost += a[curr]\n        for i, j, w in edges:\n            if curr == i and not visited[j]:\n                stack.append(j)\n            elif curr == j and not visited[i]:\n                stack.append(i)\n    return min_cost"
    },
    {
        "number": 4286,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    special_offers = []\n    for i in range(m):\n        x, y, w = map(int, stdin.readline().split())\n        special_offers.append((x-1, y-1, w))\n    \n    edges = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            if (i, j) not in edges and (j, i) not in edges:\n                for x, y, w in special_offers:\n                    if i == x and j == y:\n                        edges.add((i, j))\n                        break\n                else:\n                    if a[i] + a[j] <= 10**12:\n                        edges.add((i, j))\n    \n    if len(edges) == n-1:\n        return '0'\n    \n    connected_components = []\n    while edges:\n        component = set()\n        start_node = next(iter(edges))\n        component.add(start_node)\n        edges.remove(start_node)\n        stack = [start_node]\n        while stack:\n            node = stack.pop()\n            for neighbor in edges:\n                if neighbor[0] == node:\n                    stack.append(neighbor)\n                    component.add(neighbor)\n                    edges.remove(neighbor)\n        connected_components.append(component)\n    \n    max_size = 0\n    for component in connected_components:\n        if len(component) > max_size:\n            max_size = len(component)\n    \n    return str(max_size)"
    },
    {
        "number": 4286,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    n, m = list(map(int, stdin.readline().strip().split()))\n    a = list(map(int, stdin.readline().strip().split()))\n    offers = []\n    for _ in range(m):\n        x, y, w = list(map(int, stdin.readline().strip().split()))\n        offers.append((x-1, y-1, w))\n    # dp\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for i in range(n):\n        for j in range(i+1, n):\n            if dp[i][j] == 0:\n                x, y = i, j\n                if j > i:\n                    x, y = y, x\n                dp[x][y] = a[x] + a[y]\n                for o in offers:\n                    if o[0] == x and o[1] == y or o[0] == y and o[1] == x:\n                        dp[x][y] = min(dp[x][y], a[x] + a[y] + o[2])\n    # dfs\n    visited = [False]*n\n    res = 0\n    stack = []\n    for i in range(n):\n        if not visited[i]:\n            stack.append(i)\n            while stack:\n                curr = stack.pop()\n                visited[curr] = True\n                res += dp[curr][curr]\n                for j in range(n):\n                    if dp[curr][j]!= 0 and not visited[j]:\n                        stack.append(j)\n    return res"
    },
    {
        "number": 4286,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    offers = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n\n    g = [[] for _ in range(n)]\n    for x, y, w in offers:\n        g[x - 1].append((y - 1, w))\n        g[y - 1].append((x - 1, w))\n\n    inf = float('inf')\n    d = [inf] * n\n    d[0] = 0\n    q = [0]\n    while q:\n        x = q.pop(0)\n        for y, w in g[x]:\n            if d[y] > d[x] + w:\n                d[y] = d[x] + w\n                q.append(y)\n\n    if any(d[i] == inf for i in range(n)):\n        return '-1'\n    return sum(a) - max(d)\n"
    },
    {
        "number": 4286,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    special_offers = [list(map(int, stdin.readline().split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for x, y, w in special_offers:\n        graph[x-1].append((y-1, w))\n        graph[y-1].append((x-1, w))\n    visited = [False] * n\n    q = [0]\n    cost = [0] * n\n    while q:\n        curr = q.pop(0)\n        visited[curr] = True\n        for node, c in graph[curr]:\n            if not visited[node]:\n                q.append(node)\n                cost[node] = max(cost[curr] + a[curr] + a[node] - c, cost[node])\n    return cost[0] if sum(cost) == 0 else -1"
    },
    {
        "number": 4286,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    special_offers = []\n    for i in range(m):\n        x, y, w = map(int, stdin.readline().strip().split())\n        special_offers.append((x-1, y-1, w))\n    # create a graph\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                if (i,j) in special_offers or (j,i) in special_offers:\n                    graph[i].append((j, a[i]+a[j]))\n                else:\n                    graph[i].append((j, a[i]+a[j]))\n    # Kruskal's algorithm\n    parent = [i for i in range(n)]\n    def find(x):\n        if parent[x]!= x:\n            parent[x] = find(parent[x])\n        return parent[x]\n    def union(x, y):\n        parent[find(x)] = find(y)\n    mst = []\n    for i in range(n):\n        for j in range(len(graph[i])):\n            x, w = graph[i][j]\n            if not mst or w < mst[-1][1]:\n                mst.append((i, j, w))\n    mst.sort(key=lambda x: x[2])\n    res = 0\n    for i in range(len(mst)):\n        x, j, w = mst[i]\n        y = graph[x][j][0]\n        if find(x)!= find(y):\n            union(x, y)\n            res += w\n    return res\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    graph = [list(map(int, stdin.readline().split())) for i in range(n)]\n    special_offers = [list(map(int, stdin.readline().split())) for i in range(m)]\n\n    # Sort special offers by cost in descending order\n    special_offers.sort(key=lambda x: x[2], reverse=True)\n\n    # Initialize a list to store the costs of connecting each pair of vertices\n    costs = [[float('inf')] * n for i in range(n)]\n\n    # Initialize the costs of connecting vertices with themselves to zero\n    for i in range(n):\n        costs[i][i] = 0\n\n    # Update the costs of connecting vertices with each other based on the special offers\n    for offer in special_offers:\n        x, y, w = offer\n        costs[x-1][y-1] = w\n        costs[y-1][x-1] = w\n\n    # Floyd-Warshall algorithm to find the minimum cost of connecting each pair of vertices\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                costs[i][j] = min(costs[i][j], costs[i][k] + costs[k][j])\n\n    # Calculate the total cost of connecting all the vertices\n    total_cost = 0\n    for i in range(n):\n        total_cost += graph[i][0]\n\n    # Subtract the cost of connecting each pair of vertices with the same number\n    for i in range(n):\n        for j in range(n):\n            if graph[i][0] == graph[j][0]:\n                total_cost -= costs[i][j]\n\n    return str(total_cost)"
    },
    {
        "number": 4287,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    rain = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        rain.append((l, r))\n    umbrellas = []\n    for i in range(m):\n        x, p = map(int, stdin.split())\n        umbrellas.append((x, p))\n    umbrellas = sorted(umbrellas)\n    fatigue = 0\n    if not rain:\n        return str(sum(p for _, p in umbrellas))\n    for i, (l, r) in enumerate(rain):\n        # check if there is umbrella to pick up\n        if umbrellas and umbrellas[0][0] < l:\n            fatigue += umbrellas[0][1]\n            umbrellas = umbrellas[1:]\n        # check if there is umbrella to carry\n        for x, p in umbrellas:\n            if l <= x < r:\n                fatigue += p\n                break\n        # check if there is umbrella to throw away\n        for x, p in umbrellas:\n            if x < l:\n                fatigue -= p\n                umbrellas.remove((x, p))\n                break\n    if umbrellas:\n        return \"-1\"\n    return str(fatigue)\n\nprint(solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\")) # Output: 14\nprint(solution(\"10 1 1\\n0 9\\n0 5\")) # Output: 45\nprint(solution(\"10 1 1\\n0 9\\n1 5\")) # Output: -1"
    },
    {
        "number": 4287,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.readline().split())\n    rain_segments = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    umbrellas = [list(map(int, stdin.readline().split())) for _ in range(m)]\n\n    # sort rain segments by right endpoint\n    rain_segments.sort(key=lambda x: x[1])\n\n    # find the optimal strategy\n    fatigue = 0\n    picked_umbrellas = []\n    for i in range(1, a+1):\n        if any(l <= i-1 < r for l, r in rain_segments):\n            # the current position is inside a rain segment\n            if picked_umbrellas and picked_umbrellas[-1] >= i-1:\n                # we can swap the last picked umbrella with a new one\n                j = picked_umbrellas.index(i-1)\n                fatigue -= umbrellas[j][1] + umbrellas[j][1]\n                picked_umbrellas[j] = i\n            elif not picked_umbrellas or i-1 < picked_umbrellas[-1] < i-1+umbrellas[0][0]:\n                # we need to pick up a new umbrella\n                fatigue += umbrellas[0][1]\n                picked_umbrellas.append(i-1)\n        else:\n            # the current position is outside a rain segment\n            if picked_umbrellas and picked_umbrellas[-1] == i-1:\n                # we can throw away the last picked umbrella\n                fatigue -= umbrellas[-1][1]\n                picked_umbrellas.pop()\n        fatigue += len(picked_umbrellas) * umbrellas[-1][1]\n\n    # check if Polycarp can reach the end\n    if not picked_umbrellas:\n        return \"-1\"\n\n    # find the minimum total fatigue after reaching the end\n    for i in range(a, -1, -1):\n        if any(l <= i < r for l, r in rain_segments):\n            # the current position is inside a rain segment\n            if picked_umbrellas and picked_umbrellas[-1] >= i:\n                # we can swap the last picked umbrella with a new one\n                j = picked_umbrellas.index(i)\n                fatigue -= umbrellas[j][1] + umbrellas[j][1]\n                picked_umbrellas[j] = i\n            elif not picked_umbrellas or i < picked_umbrellas[-1] < i+umbrellas[0][0]:\n                # we need to pick up a new umbrella\n                fatigue += umbrellas[0][1]\n                picked_umbrellas.append(i)\n        else:\n            # the current position is outside a rain segment\n            if picked_umbrellas and picked_umbrellas[-1] == i:\n                # we can throw away the last picked umbrella\n                fatigue -= umbrellas[-1][1]\n                picked_umbrellas.pop()\n        fatigue += len(picked_umbrellas) * umbrellas[-1][1]\n\n    return str(fatigue)"
    },
    {
        "number": 4287,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    rain = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        rain.append((l, r))\n    umbrellas = []\n    for i in range(m):\n        x, p = map(int, stdin.split())\n        umbrellas.append((x, p))\n    umbrellas.sort()\n\n    fatigue = 0\n    umbrellas_used = 0\n    x = 0\n    while x <= a:\n        if any(l <= x < r for l, r in rain):\n            # there is an umbrella in the rain\n            if not umbrellas_used:\n                # no umbrella carried\n                fatigue += umbrellas[0][1]\n                x += 1\n                umbrellas_used += 1\n            else:\n                # some umbrella carried\n                if x == umbrellas[-1][0]:\n                    # umbrella is at the end of the line\n                    fatigue += umbrellas[-1][1]\n                else:\n                    # umbrella is in the line\n                    fatigue += umbrellas[-1][1]\n                    fatigue += umbrellas[-2][1]\n                x += 1\n        else:\n            # no umbrella in the rain\n            if umbrellas_used:\n                # some umbrella carried\n                fatigue += sum(p for x, p in umbrellas if x == umbrellas[-1][0])\n                umbrellas_used = 0\n            x += 1\n    if umbrellas_used:\n        # some umbrella carried\n        fatigue += sum(p for x, p in umbrellas if x == umbrellas[-1][0])\n    if x == a:\n        return str(fatigue)\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n\n    umbrellas = []\n    for _ in range(m):\n        x, p = map(int, stdin.split())\n        umbrellas.append((x, p))\n\n    # sort umbrellas by x\n    umbrellas.sort()\n\n    # initialize variables\n    fatigue = 0\n    prev_umbrella = None\n\n    # go from x = 0 to x = a\n    for x in range(1, a + 1):\n        # if there is a segment that intersects with [x, x + 1]\n        if any(l <= x < r for l, r in segments):\n            # if there is an umbrella at x\n            if any(x == u[0] for u in umbrellas):\n                # add the weight of the umbrella to fatigue\n                fatigue += next(p for x_, p in umbrellas if x_ == x)\n            else:\n                # if there is no umbrella at x\n                # check if there is an umbrella at x - 1\n                if any(x - 1 == u[0] for u in umbrellas):\n                    fatigue += next(p for x_, p in umbrellas if x_ == x - 1)\n                # otherwise, there is no way to move to x\n                else:\n                    return \"-1\"\n\n        # update fatigue\n        fatigue += prev_umbrella\n\n        # move to the next position\n        prev_umbrella = None\n\n    return str(fatigue)\n"
    },
    {
        "number": 4287,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.readline().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n\n    umbrellas = []\n    for _ in range(m):\n        x, p = map(int, stdin.readline().split())\n        umbrellas.append((x, p))\n\n    if not can_reach_end(a, segments, umbrellas):\n        return \"-1\"\n\n    fatigue = 0\n    current_x = 0\n    current_umbrella = None\n    umbrellas_in_the_rain = set()\n    for x in range(a + 1):\n        if not is_in_rain(x, segments):\n            fatigue += get_weight(current_umbrella)\n            current_umbrella = None\n\n        if x in umbrellas_coords(umbrellas):\n            current_umbrella = get_umbrella_at_x(x, umbrellas)\n            fatigue += get_weight(current_umbrella)\n            umbrellas_in_the_rain.add(x)\n        elif current_umbrella and x > current_umbrella[0]:\n            fatigue -= get_weight(current_umbrella)\n            current_umbrella = None\n\n        if is_in_rain(x, segments) and not current_umbrella and get_umbrella_at_x(x, umbrellas):\n            current_umbrella = get_umbrella_at_x(x, umbrellas)\n            fatigue += get_weight(current_umbrella)\n            umbrellas_in_the_rain.add(x)\n\n        if is_in_rain(x, segments) and not current_umbrella and not get_umbrella_at_x(x, umbrellas):\n            fatigue += get_weight(current_umbrella)\n            current_umbrella = None\n\n        if not is_in_rain(x, segments) and current_umbrella and x > current_umbrella[0]:\n            fatigue -= get_weight(current_umbrella)\n            current_umbrella = None\n\n    return fatigue\n\ndef"
    },
    {
        "number": 4287,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.readline().split())\n    rain = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n\n    # Initialize dp array\n    dp = [[0] * (a + 1) for _ in range(m + 1)]\n\n    # Fill dp array\n    for i in range(1, m + 1):\n        for j in range(a + 1):\n            for k in range(n):\n                if rain[k][0] <= j <= rain[k][1]:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + umbrellas[i - 1][1])\n                else:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j])\n\n    # Check if possible\n    if dp[m][a] == 0:\n        return \"-1\"\n    else:\n        return dp[m][a]\n"
    },
    {
        "number": 4287,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    umbrellas = []\n    for i in range(m):\n        x, p = map(int, stdin.split())\n        umbrellas.append((x, p))\n    umbrellas.sort(key=lambda x: x[0])\n    total_weight = 0\n    fatigue = 0\n    for i, x in enumerate(range(a+1)):\n        for segment in segments:\n            if segment[0] <= x < segment[1]:\n                fatigue += sum(p for x_, p in umbrellas if segment[0] <= x_ <= segment[1])\n                total_weight += sum(p for x_, p in umbrellas if segment[0] <= x_ <= segment[1])\n        total_weight += umbrellas[i][1] if umbrellas and x == umbrellas[i][0] else 0\n        fatigue += umbrellas[i][1] if umbrellas and x == umbrellas[i][0] else 0\n    if fatigue > 10**6:\n        return \"-1\"\n    else:\n        return str(fatigue)"
    },
    {
        "number": 4287,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = list(map(int, stdin.split()))\n    segments = []\n    for i in range(n):\n        l, r = list(map(int, stdin.split()))\n        segments.append((l, r))\n    umbrellas = []\n    for i in range(m):\n        x, p = list(map(int, stdin.split()))\n        umbrellas.append((x, p))\n\n    # Check if there is a segment in the rain that starts from 0 and ends at a\n    has_zero_segment = False\n    for l, r in segments:\n        if l == 0 and r == a:\n            has_zero_segment = True\n            break\n\n    if not has_zero_segment:\n        return \"-1\"\n\n    # Build the rain tree\n    rain_tree = [[] for _ in range(a + 1)]\n    for l, r in segments:\n        rain_tree[l].append(r)\n        rain_tree[r].append(l)\n\n    # Calculate the maximum weight that can be carried in the rain\n    max_weight = 0\n    for x, p in umbrellas:\n        max_weight = max(max_weight, p)\n\n    # Calculate the minimum total fatigue\n    fatigue = [0] * (a + 1)\n    visited = [False] * (a + 1)\n    stack = [(0, 0, 0)]\n    while stack:\n        x, t, w = stack.pop()\n        if visited[x]:\n            continue\n        visited[x] = True\n        fatigue[x] = t + w\n        for y in rain_tree[x]:\n            if not visited[y]:\n                stack.append((y, t + 1, max_weight))\n\n    # Check if there is a feasible strategy\n    if fatigue[a] == 0:\n        return \"-1\"\n\n    # Build the umbrella tree\n    umbrella_tree = [[] for _ in range(a + 1)]\n    for x, p in umbrellas:\n        umbrella_tree[x].append(p)\n\n    # Calculate the minimum total fatigue when polycarp picks up and throws away umbrellas optimally\n    total_fatigue = 0\n    visited = [False] * (a + 1)\n    stack = [(0, 0)]\n    while stack:\n        x, w = stack.pop()\n        if visited[x]:\n            continue\n        visited[x] = True\n        total_fatigue += fatigue[x]\n        for p in umbrella_tree[x]:\n            if w + p > max_weight:\n                continue\n            for y in rain_tree[x]:\n                if not visited[y]:\n                    stack.append((y, w + p))\n\n    return str(total_fatigue)\n\nstdin = \"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\"\nprint(solution(stdin)) # Output: 14\n\nstdin = \"10 1 1\\n0 9\\n0 5\"\nprint(solution(stdin)) # Output: 45\n\nstdin = \"10 1 1\\n0 9\\n1 5\"\nprint(solution(stdin)) # Output: -1"
    },
    {
        "number": 4287,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    segments = []\n    umbrellas = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    for i in range(m):\n        x, p = map(int, stdin.split())\n        umbrellas.append((x, p))\n\n    # Check if it's possible to reach the destination\n    if any(l <= a <= r for l, r in segments):\n        return \"-1\"\n\n    # Sort segments\n    segments.sort()\n\n    # Sort umbrellas by their position\n    umbrellas.sort(key=lambda x: x[0])\n\n    # Initialize variables\n    fatigue = 0\n    current_umbrellas = []\n    current_fatigue = 0\n    current_segment = segments[0]\n\n    # Main loop\n    for i in range(a + 1):\n        # Update fatigue\n        fatigue += current_fatigue\n\n        # Move to the next segment\n        if i == current_segment[1]:\n            current_segment = segments[segments.index(current_segment) + 1]\n            current_umbrellas = []\n            current_fatigue = 0\n\n        # Update current umbrellas\n        current_umbrellas = [u for u in current_umbrellas if u[0] < i]\n        if any(l <= i <= r for l, r in segments):\n            for u in umbrellas:\n                if u[0] == i:\n                    current_umbrellas.append(u)\n\n        # Update current fatigue\n        current_fatigue = sum(u[1] for u in current_umbrellas)\n\n    return str(fatigue)\n"
    },
    {
        "number": 4287,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = list(map(int, stdin.split()))\n    rain = [[int(x) for x in stdin.split()] for _ in range(n)]\n    umbrellas = [[int(x) for x in stdin.split()] for _ in range(m)]\n    \n    rain.sort(key=lambda x: x[0])\n    umbrellas.sort(key=lambda x: x[0])\n    \n    fatigue = 0\n    current_umbrellas = 0\n    for x in range(a+1):\n        for r in rain:\n            if r[0] <= x < r[1]:\n                current_umbrellas = 0\n        while current_umbrellas > 0 and umbrellas and umbrellas[0][0] <= x:\n            fatigue += umbrellas[0][1]\n            current_umbrellas -= 1\n            umbrellas.pop(0)\n        fatigue += x\n        current_umbrellas += 1\n        \n    if current_umbrellas > 0:\n        return \"-1\"\n    else:\n        return fatigue\n\nstdin = \"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\"\nprint(solution(stdin)) # Output: 14\n\nstdin = \"10 1 1\\n0 9\\n0 5\"\nprint(solution(stdin)) # Output: 45\n\nstdin = \"10 1 1\\n0 9\\n1 5\"\nprint(solution(stdin)) # Output: -1"
    },
    {
        "number": 4288,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.strip().split())\n    if A == C:\n        return 'No'\n    elif A == B:\n        return 'No'\n    elif B == C:\n        return 'No'\n    else:\n        return 'Yes'\n\nprint(solution(input()))"
    },
    {
        "number": 4288,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B == C or A == C == B:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4288,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.strip().split())\n    if A == C:\n        return \"No\"\n    elif B == A or B == C:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == C and B!= A and B!= C:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.strip().split())\n    if A == C or B == C:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4288,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    \n    if a == b or a == c or b == c:\n        return \"No\"\n    else:\n        return \"Yes\"\n    \n"
    },
    {
        "number": 4288,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    a, b, c = map(int, stdin.split())\n\n    # check if triple is poor\n    if a == c and a!= b:\n        return \"Yes\"\n    elif b == c and b!= a:\n        return \"Yes\"\n    elif a == b and a!= c:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == C and A!= B:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.strip().split())\n    if A == C:\n        return \"No\"\n    elif B == A or B == C:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if (a == b and a!= c) or (a == c and a!= b) or (b == c and b!= a):\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4289,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, a = map(int, stdin.readline().strip().split())\n    h = list(map(int, stdin.readline().strip().split()))\n    min_diff = abs(a - ((t - x) * 0.006))\n    min_index = -1\n    for i in range(n):\n        diff = abs(a - ((t - h[i]) * 0.006))\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n    return str(min_index + 1)\n\nstdin = \"\"\"\n2\n12 5\n1000 2000\n\"\"\"\n\nprint(solution(stdin))  # Output: 1"
    },
    {
        "number": 4289,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    T, A = map(int, lines[1].split())\n    H = list(map(int, lines[2].split()))\n\n    min_diff = float('inf')\n    min_place = -1\n    for i in range(N):\n        diff = abs(T-H[i]*0.006-A)\n        if diff < min_diff:\n            min_diff = diff\n            min_place = i\n\n    return str(min_place+1) # index of palace"
    },
    {
        "number": 4289,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, T, A = map(int, stdin.readline().split())\n    H = list(map(int, stdin.readline().split()))\n    # Compute average temperatures for each place\n    T_avg = [T - h * 0.006 for h in H]\n    # Find the closest place to A\n    idx = min(range(N), key=lambda i: abs(T_avg[i] - A))\n    # Return the index of the closest place\n    return str(idx+1)"
    },
    {
        "number": 4289,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, t, *heights = map(int, stdin.strip().split())\n    a = int(stdin.strip())\n    temp_list = [t - h * 0.006 for h in heights]\n    min_temp = min(temp_list, key=lambda x: abs(x - a))\n    return str(temp_list.index(min_temp) + 1)\n"
    },
    {
        "number": 4289,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    t = int(lines[1].split()[0])\n    a = int(lines[1].split()[1])\n    h = list(map(int, lines[2].strip().split()))\n    temp = [t-x*0.006 for x in h]\n    idx = temp.index(min(temp, key=lambda x:abs(x-a)))\n    return str(idx+1)\n\nstdin = \"\"\"\n2\n12 5\n1000 2000\n\"\"\"\n\nprint(solution(stdin)) # Output: 1"
    },
    {
        "number": 4289,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.split(\"\\n\")\n    N, T, A = map(int, lines[0].split())\n    H = list(map(int, lines[1].split()))\n\n    # calculate temperature for each place\n    temps = [T - H[i] * 0.006 for i in range(N)]\n\n    # find place with closest temperature to A\n    min_temp = min(temps, key=lambda x: abs(x - A))\n    palace_idx = temps.index(min_temp)\n\n    return str(palace_idx)\n"
    },
    {
        "number": 4289,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    t = int(lines[1].split()[0])\n    a = int(lines[1].split()[1])\n    heights = [int(h) for h in lines[2].split()]\n    \n    def avg_temp(height):\n        return t - height*0.006\n    \n    temps = [avg_temp(h) for h in heights]\n    best_temp = min(temps, key=lambda t: abs(t-a))\n    \n    return str(temps.index(best_temp) + 1)  # 1-indexed"
    },
    {
        "number": 4289,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    t, a = map(int, lines[1].split())\n    h = list(map(int, lines[2].split()))\n    ans = 0\n    min_diff = 1000000\n    for i in range(n):\n        temp = t - h[i] * 0.006\n        diff = abs(temp - a)\n        if diff < min_diff:\n            min_diff = diff\n            ans = i\n    return str(ans)"
    },
    {
        "number": 4289,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    T, A = map(int, lines[1].split())\n    H = list(map(int, lines[2].split()))\n    min_diff = float('inf')\n    res = -1\n    for i in range(N):\n        diff = abs(T - (A - H[i]*0.006))\n        if diff < min_diff:\n            min_diff = diff\n            res = i\n    return str(res)"
    },
    {
        "number": 4289,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    T = int(lines[1].split()[0])\n    A = int(lines[1].split()[1])\n    H = list(map(int, lines[2].split()))\n    \n    # compute average temperature for each place\n    avg_temp = [T - h * 0.006 for h in H]\n    \n    # find the place with minimum absolute difference to A\n    min_diff = abs(avg_temp[0] - A)\n    min_index = 0\n    for i in range(1, N):\n        diff = abs(avg_temp[i] - A)\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n    \n    # return the index of the place with minimum absolute difference\n    return str(min_index)"
    },
    {
        "number": 4290,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return str((N+M)*(N+M-1)//2)\n\nprint(solution(input()))"
    },
    {
        "number": 4290,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    N, M = map(int, stdin.split())\n\n    # Calculating the answer\n    ans = 1\n    for i in range(N+1):\n        for j in range(i+1, N+M+1):\n            ans *= j\n            ans //= i+1\n    return str(ans)"
    },
    {
        "number": 4290,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    # Since the numbers are even, we only need to consider the odd numbers and count the number of ways to select two of them\n    # We can use the formula for combinations to calculate the count\n    return str(comb(N+M, 2))\n\ndef"
    },
    {
        "number": 4290,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.strip().split())\n\n    # count number of even pairs\n    count = 0\n    for i in range(1, n+m+1):\n        for j in range(i+1, n+m+1):\n            if (i % 2 == 0 and j % 2 == 0) or (i % 2 == 1 and j % 2 == 1):\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4290,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    total_balls = n + m\n    if total_balls % 2 == 1:\n        return \"0\"\n    else:\n        even_count = n // 2\n        odd_count = m // 2\n        return str(even_count * odd_count)"
    },
    {
        "number": 4290,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    return str((n*(n-1))//2 + (m*(m-1))//2)"
    },
    {
        "number": 4290,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    count = 0\n    if n % 2 == 0:\n        count = m + 1\n    else:\n        count = m\n    return str(count)"
    },
    {
        "number": 4290,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    count = 0\n    for i in range(N+1):\n        for j in range(M+1):\n            if (i+j)%2==0:\n                count+=1\n    return str(count)"
    },
    {
        "number": 4290,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return str((N+M)//2)"
    },
    {
        "number": 4290,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    count = 0\n    for i in range(2**(N+M)):\n        binary = bin(i)[2:].zfill(N+M)\n        even = sum(int(x) for x in binary[:N] if x=='0') % 2 == 0\n        odd = sum(int(x) for x in binary[N:] if x=='1') % 2 == 0\n        if even and odd:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4291,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_stream = stdin.split(\"\\n\")\n    N, Q = map(int, input_stream[0].split())\n    S = input_stream[1]\n\n    output = []\n    for i in range(Q):\n        l_i, r_i = map(int, input_stream[2+i].split())\n        substring = S[l_i-1:r_i]\n        count = substring.count(\"AC\")\n        output.append(str(count))\n\n    return \"\\n\".join(output)\n"
    },
    {
        "number": 4291,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.readline().split())\n    S = stdin.readline().strip()\n    ans = []\n    for _ in range(Q):\n        l, r = map(int, stdin.readline().split())\n        substr = S[l-1:r]\n        ans.append(substr.count('AC'))\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 4291,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, Q = map(int, stdin.readline().split())\n    S = stdin.readline().strip()\n    queries = []\n    for _ in range(Q):\n        l, r = map(int, stdin.readline().split())\n        queries.append((l, r))\n\n    # solve problem\n    count = 0\n    for l, r in queries:\n        sub = S[l-1:r]\n        count += sub.count('AC')\n\n    # print result\n    return '\\n'.join(str(count))"
    },
    {
        "number": 4291,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, Q = map(int, stdin.readline().split())\n    S = stdin.readline().strip()\n    queries = []\n    for _ in range(Q):\n        l, r = map(int, stdin.readline().split())\n        queries.append((l, r))\n\n    # Solve queries\n    results = []\n    for l, r in queries:\n        ac_count = S[l:r+1].count(\"AC\")\n        results.append(ac_count)\n\n    # Print results\n    for result in results:\n        print(result)\n\n    return \"\""
    },
    {
        "number": 4291,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    S = stdin.readline().strip()\n    ans = []\n    for i in range(Q):\n        l_i, r_i = map(int, stdin.split())\n        sub = S[l_i-1:r_i]\n        count = sub.count(\"AC\")\n        ans.append(count)\n    return \"\\n\".join(map(str, ans))"
    },
    {
        "number": 4291,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, q = map(int, lines[0].split())\n    s = lines[1]\n    queries = []\n    for i in range(q):\n        queries.append(list(map(int, lines[2 + i].split())))\n    res = []\n    for query in queries:\n        l, r = query\n        substring = s[l-1:r]\n        count = substring.count('AC')\n        res.append(count)\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 4291,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, Q = map(int, stdin.readline().split())\n    S = stdin.readline().strip()\n    \n    # initialize result array\n    result = []\n    \n    # process queries\n    for _ in range(Q):\n        l, r = map(int, stdin.readline().split())\n        count = 0\n        \n        # count the number of substrings of S that contain AC\n        for i in range(l, r+1):\n            if S[i:i+2] == \"AC\":\n                count += 1\n                \n        result.append(count)\n        \n    # print results\n    for i in result:\n        print(i)\n        \n"
    },
    {
        "number": 4291,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.readline().split())\n    S = stdin.readline().strip()\n    result = []\n    for _ in range(Q):\n        l, r = map(int, stdin.readline().split())\n        substr = S[l-1:r]\n        count = substr.count('AC')\n        result.append(count)\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4291,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    input_lines = stdin.strip().split('\\n')\n    N, Q = map(int, input_lines[0].split())\n    S = input_lines[1]\n    queries = [(int(l), int(r)) for l, r in [line.split() for line in input_lines[2:]]]\n\n    # iterate through queries and count substring occurrences\n    result = []\n    for l, r in queries:\n        count = S[l:r+1].count('AC')\n        result.append(str(count))\n\n    return '\\n'.join(result)"
    },
    {
        "number": 4291,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    S = stdin.readline().strip()\n\n    result = []\n    for i in range(Q):\n        l, r = map(int, stdin.split())\n        ac_count = 0\n        for j in range(l, r+1):\n            if S[j-1:j+1] == \"AC\":\n                ac_count += 1\n        result.append(ac_count)\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4292,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.readline().strip().split())\n    prices = list(map(int, stdin.readline().strip().split()))\n\n    # Sort prices in decreasing order\n    prices.sort(reverse=True)\n\n    # Initialize variables\n    total_price = 0\n    chosen = 0\n\n    # Choose K fruits\n    for i in range(K):\n        total_price += prices[i]\n        chosen += 1\n\n    # Print minimum total price\n    print(total_price)\n\n    return \"\""
    },
    {
        "number": 4292,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))[:n]\n    prices.sort()\n    return sum(prices[:k])"
    },
    {
        "number": 4292,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, k = map(int, stdin.strip().split())\n    prices = list(map(int, stdin.strip().split()))\n\n    # sort the prices in ascending order\n    prices.sort()\n\n    # get the minimum possible price\n    min_price = sum(prices[:k])\n\n    # return the minimum price\n    return str(min_price)"
    },
    {
        "number": 4292,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    N, K = map(int, stdin.strip().split())\n    prices = list(map(int, stdin.strip().split()))\n\n    # Sorting the prices in descending order\n    prices.sort(reverse=True)\n\n    # Initializing the total price\n    total_price = 0\n\n    # Choosing the K first fruits\n    for i in range(K):\n        total_price += prices[i]\n\n    # Returning the total price\n    return str(total_price)\n"
    },
    {
        "number": 4292,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.strip().split())\n    prices = list(map(int, stdin.strip().split()))\n    prices.sort()\n    total_price = sum(prices[:K])\n    return str(total_price)\n\nprint(solution(input()))"
    },
    {
        "number": 4292,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.readline().split())\n    prices = list(map(int, stdin.readline().split()))\n    \n    # Sort prices in ascending order\n    prices.sort()\n    \n    # Initialize variables\n    max_price = 0\n    sum_prices = 0\n    \n    # Iterate over the first K fruits\n    for i in range(K):\n        # Add the i-th fruit to the sum of prices\n        sum_prices += prices[i]\n        \n        # Update the maximum price\n        max_price = max(max_price, sum_prices)\n    \n    # Return the maximum price\n    return str(max_price)"
    },
    {
        "number": 4292,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.readline().strip().split())\n    prices = list(map(int, stdin.readline().strip().split()))\n\n    # Sort prices in descending order\n    prices.sort(reverse=True)\n\n    # Calculate total price\n    total_price = 0\n    for i in range(K):\n        total_price += prices[i]\n\n    return str(total_price)"
    },
    {
        "number": 4292,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    line = stdin.readline().strip()\n    N, K = map(int, line.split())\n    prices = list(map(int, stdin.readline().strip().split()))\n    \n    # Sort prices in ascending order\n    prices.sort()\n    \n    # Get the maximum possible price for each fruit\n    max_prices = [prices[i] for i in range(K)]\n    \n    # Calculate the minimum total price\n    min_total_price = sum(max_prices)\n    \n    # Check if there are more than K fruits that are cheaper than the maximum possible price\n    if sum(prices[K:]) > min_total_price:\n        min_total_price += prices[K]\n    \n    return str(min_total_price)"
    },
    {
        "number": 4292,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    N, K = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    \n    # Sort prices in ascending order\n    prices.sort()\n    \n    # Calculate the minimum possible total price of K fruits\n    total_price = 0\n    for i in range(K):\n        total_price += prices[i]\n    \n    # Print the minimum possible total price of K fruits\n    return str(total_price)\n"
    },
    {
        "number": 4292,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    line = stdin.readline().split()\n    N = int(line[0])\n    K = int(line[1])\n    prices = [int(price) for price in stdin.readline().split()]\n\n    # sort the prices in ascending order\n    prices.sort()\n\n    # calculate the total price\n    total_price = 0\n    for i in range(K):\n        total_price += prices[i]\n\n    return str(total_price)\n"
    },
    {
        "number": 4293,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    p, q, r = map(int, stdin.strip().split())\n\n    # calculate all possible routes\n    routes = [p + q + r, p + q + r, p + q + r, q + r + p, r + p + q, r + q + p]\n\n    # return the minimum route\n    return str(min(routes))\n"
    },
    {
        "number": 4293,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    P, Q, R = map(int, stdin.split())\n\n    # Find all possible routes\n    routes = [(P, Q, R), (P, R, Q), (Q, P, R), (Q, R, P), (R, P, Q), (R, Q, P)]\n\n    # Calculate the sum of the flight times for each route\n    sums = [sum(route) for route in routes]\n\n    # Return the minimum sum\n    return str(min(sums))"
    },
    {
        "number": 4293,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(min(a+b+c, a+c+c, b+a+c, b+c+a, c+a+b, c+b+a))"
    },
    {
        "number": 4293,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    P, Q, R = map(int, stdin.strip().split())\n\n    # Calculate the minimum possible sum of the flight times\n    return str(min(P + Q, Q + R, R + P))\n"
    },
    {
        "number": 4293,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    p, q, r = map(int, stdin.split())\n    return str(min(p + q, p + r, q + r))"
    },
    {
        "number": 4293,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    p, q, r = map(int, stdin.split())\n\n    # calculate all possible routes\n    routes = [(p + q, p + q + r), (p + r, q + r), (p + q, r + q)]\n\n    # calculate min sum\n    min_sum = min(routes)\n\n    # print result\n    return str(min_sum)"
    },
    {
        "number": 4293,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    p, q, r = map(int, stdin.strip().split())\n    return str(min(p+q, p+r, q+r))"
    },
    {
        "number": 4293,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    p, q, r = map(int, stdin.split())\n    return str(min(p + q, p + r, q + r))"
    },
    {
        "number": 4293,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(min(a+c, b+c, a+b))\n"
    },
    {
        "number": 4293,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n\n    return str(min(P+Q, P+R, Q+R))"
    },
    {
        "number": 4294,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    if X < A:\n        return \"0\"\n    else:\n        return \"10\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4294,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.strip().split())\n    if X < A:\n        return \"0\"\n    return \"10\""
    },
    {
        "number": 4294,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    return \"0\" if x < a else \"10\""
    },
    {
        "number": 4294,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    return str(0 if x < a else 10)"
    },
    {
        "number": 4294,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    if x < a:\n        return '0'\n    return '10'"
    },
    {
        "number": 4294,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.strip().split())\n    return \"0\" if x < a else \"10\""
    },
    {
        "number": 4294,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    return \"0\\n\" if x < a else \"10\\n\""
    },
    {
        "number": 4294,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # split the input string into two integers\n    x, a = map(int, stdin.strip().split())\n    \n    # check if x is less than a\n    if x < a:\n        return \"0\"\n    else:\n        return \"10\""
    },
    {
        "number": 4294,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    return str(0) if x < a else str(10)\n"
    },
    {
        "number": 4294,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    if x < a:\n        return \"0\"\n    else:\n        return \"10\""
    },
    {
        "number": 4295,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    n = abs(n - k)\n    return str(n)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4295,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.split())\n\n    # Apply operation\n    N = abs(N - K)\n\n    # Print output\n    return str(N)"
    },
    {
        "number": 4295,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    minimum = abs(n - k)\n    while n!= minimum:\n        n = abs(n - k)\n        minimum = min(minimum, n)\n    return str(minimum)"
    },
    {
        "number": 4295,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for _ in range(k):\n        n = abs(n - k)\n    print(n)\n    return \"\""
    },
    {
        "number": 4295,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    while n!= 0:\n        n = abs(n-k)\n    return str(n)"
    },
    {
        "number": 4295,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == k:\n        return str(1)\n    if n == 0:\n        return str(0)\n    abs_diff = abs(n - k)\n    return str(abs_diff) if abs_diff < k else str(k)"
    },
    {
        "number": 4295,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(n):\n        n = abs(n-k)\n    return str(n)"
    },
    {
        "number": 4295,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    if n == 0:\n        return str(0)\n    elif n < abs(k):\n        return str(1)\n    else:\n        return str(abs(n-k))"
    },
    {
        "number": 4295,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ans = abs(n - k)\n    while k!= 0:\n        n = abs(n - k)\n        ans = min(ans, n)\n        k -= 1\n    return str(ans)"
    },
    {
        "number": 4295,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    while n!= 0:\n        n = abs(n - k)\n    return n\n\nprint(solution(input()))"
    },
    {
        "number": 4296,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3 = list(map(int, stdin.split()))\n    if a1+a2+a3 >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = list(map(int, stdin.strip().split()))\n    if A_1 + A_2 + A_3 >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    if A_1+A_2+A_3 >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split()\n    A = [int(i) for i in A]\n    if sum(A) >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    total = sum(A)\n    if total >= 22:\n        return \"bust\"\n    else:\n        return \"win\"\n\nprint(solution(input()))"
    },
    {
        "number": 4296,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.strip().split())\n    if A_1+A_2+A_3 >= 22:\n        return \"bust\"\n    else:\n        return \"win\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4296,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3 = map(int, stdin.split())\n    if a1+a2+a3 >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    total = A_1 + A_2 + A_3\n    if total >= 22:\n        return \"bust\"\n    else:\n        return \"win\"\n\nprint(solution(input()))"
    },
    {
        "number": 4296,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    if A_1+A_2+A_3 >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    if A_1 + A_2 + A_3 >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4297,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    i = 1\n    while True:\n        if i % 2 == 0 and i % n == 0:\n            return str(i)\n        i += 1"
    },
    {
        "number": 4297,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    i = 6\n    while True:\n        if i % 2 == 0 and i % n == 0:\n            return str(i)\n        i += 6"
    },
    {
        "number": 4297,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num = 1\n    while True:\n        if num % 2 == 0 and num % n == 0:\n            return str(num)\n        num += 1"
    },
    {
        "number": 4297,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    i = 6\n    while True:\n        if i % 2 == 0 and i % n == 0:\n            return str(i)\n        i += 1"
    },
    {
        "number": 4297,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # Find the minimum positive integer divisible by both 2 and N.\n    i = 2\n    while True:\n        if i % 2 == 0 and i % n == 0:\n            return str(i)\n        i += 1"
    },
    {
        "number": 4297,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    count = 0\n    i = 6\n    while count < n:\n        if i % 2 == 0 and i % n == 0:\n            count += 1\n        i += 1\n    return i"
    },
    {
        "number": 4297,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    i = 6\n    while True:\n        if i % 2 == 0 and i % N == 0:\n            return str(i)\n        i += 1"
    },
    {
        "number": 4297,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    i = n + 1\n    while True:\n        if i % 2 == 0 and i % n == 0:\n            return str(i)\n        i += 1"
    },
    {
        "number": 4297,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    i = 1\n    while True:\n        if i % 2 == 0 and i % n == 0:\n            return str(i)\n        i += 1"
    },
    {
        "number": 4297,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    N = int(stdin)\n\n    # Minimum positive integer divisible by both 2 and N\n    num = 6\n\n    # Iterating until we find the minimum positive integer divisible by both 2 and N\n    while True:\n        if num % 2 == 0 and num % N == 0:\n            break\n        num += 6\n\n    return str(num)"
    },
    {
        "number": 4298,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    # Initialize an array of inspectors at each tree\n    inspectors = [0] * n\n    # Start at the middle tree and deploy inspectors\n    start_tree = n // 2\n    for i in range(start_tree - d, start_tree + d + 1):\n        inspectors[i % n] += 1\n    # Return the minimum number of inspectors\n    return min(inspectors)"
    },
    {
        "number": 4298,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, d = map(int, stdin.split())\n\n    # Calculate minimum number of inspectors\n    inspectors = max(1, (n-1) // 2)\n\n    # Check if any trees can be inspected by an inspector\n    for i in range(1, n+1):\n        if i - d < 1 or i + d > n:\n            inspectors -= 1\n            break\n\n    # Check if the remaining inspector can inspect the remaining trees\n    while inspectors > 0 and n > 1:\n        inspectors -= 1\n        n -= 2\n\n    return str(inspectors)"
    },
    {
        "number": 4298,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, D = map(int, lines[0].split())\n    inspectors = set()\n    for i in range(1, N+1):\n        for j in range(max(1, i-D), min(N, i+D)+1):\n            inspectors.add(j)\n    return str(len(inspectors))"
    },
    {
        "number": 4298,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.strip().split())\n    return str(min(n, 2 * d + 1))\n\nprint(solution(\"6 2\"))"
    },
    {
        "number": 4298,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Function to solve the problem\n\n    Args:\n        stdin (str): Input string containing N and D values separated by a space\n\n    Returns:\n        str: Output string containing the minimum number of inspectors needed to inspect all the trees\n    \"\"\"\n    # Read input from stdin\n    N, D = map(int, stdin.strip().split())\n\n    # Calculate the minimum number of inspectors needed to inspect all the trees\n    inspectors = (N-D+1) // 2\n\n    # Return the minimum number of inspectors needed to inspect all the trees\n    return str(inspectors)\n"
    },
    {
        "number": 4298,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    inspectors = set()\n    for i in range(1, N+1):\n        inspectors.update(range(i-D, i+D+1))\n    return str(len(inspectors))"
    },
    {
        "number": 4298,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, D = map(int, stdin.strip().split())\n\n    # calculate min number of inspectors needed\n    min_inspectors = N // D + 1 if N % D!= 0 else N // D\n\n    # print result\n    print(min_inspectors)\n    return \"\""
    },
    {
        "number": 4298,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    return str(N // (D * 2) + (N % (D * 2) > 0))\n\nprint(solution(\"6 2\"))"
    },
    {
        "number": 4298,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, d = map(int, stdin.split())\n    \n    # Find the middle tree\n    middle = n // 2 + n % 2\n    \n    # Determine the number of inspectors needed\n    num_inspectors = 0\n    for i in range(1, n+1):\n        left_trees = middle - i + 1\n        right_trees = middle + i - 1\n        \n        # Add an inspector for each pair of trees within the range\n        num_inspectors += max(left_trees - d + 1, 0) + max(right_trees - d + 1, 0)\n    \n    return str(num_inspectors)"
    },
    {
        "number": 4298,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n\n    return str(2*N - D)"
    },
    {
        "number": 4299,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"hon\"\n    elif n % 10 == 1:\n        return \"pon\"\n    elif n % 10 == 2:\n        return \"hon\"\n    elif n % 10 == 3:\n        return \"bon\"\n    elif n % 10 == 4:\n        return \"hon\"\n    elif n % 10 == 5:\n        return \"pon\"\n    elif n % 10 == 6:\n        return \"pon\"\n    elif n % 10 == 7:\n        return \"hon\"\n    elif n % 10 == 8:\n        return \"pon\"\n    else:\n        return \"hon\""
    },
    {
        "number": 4299,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    ones_digit = n % 10\n    if ones_digit == 0 or ones_digit == 1 or ones_digit == 6 or ones_digit == 8:\n        return 'pon'\n    elif ones_digit == 2 or ones_digit == 4 or ones_digit == 5 or ones_digit == 7 or ones_digit == 9:\n        return 'hon'\n    else:\n        return 'bon'"
    },
    {
        "number": 4299,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    ones_digit = N % 10\n    if ones_digit == 2 or ones_digit == 4 or ones_digit == 5 or ones_digit == 7 or ones_digit == 9:\n        return \"hon\"\n    elif ones_digit == 0 or ones_digit == 1 or ones_digit == 6 or ones_digit == 8:\n        return \"pon\"\n    else:\n        return \"bon\""
    },
    {
        "number": 4299,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ones_digit = n % 10\n    tens_digit = (n // 10) % 10\n    if ones_digit == 0 or ones_digit == 1 or ones_digit == 6 or ones_digit == 8:\n        return 'pon'\n    elif ones_digit == 2 or ones_digit == 4 or ones_digit == 5 or ones_digit == 7 or ones_digit == 9:\n        return 'hon'\n    elif ones_digit == 3:\n        return 'bon'\n    else:\n        return ''\n    \n"
    },
    {
        "number": 4299,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.strip())\n\n    # map each digit to its pronunciation\n    digit_to_pronunciation = {\n        0: 'pon',\n        1: 'pon',\n        2: 'hon',\n        3: 'bon',\n        4: 'hon',\n        5: 'hon',\n        6: 'pon',\n        7: 'hon',\n        8: 'pon',\n        9: 'hon'\n    }\n\n    # extract one's digit and apply mapping to get pronunciation of \"\u672c\"\n    ones_digit = N % 10\n    pronunciation = digit_to_pronunciation[ones_digit]\n\n    # return output\n    return pronunciation"
    },
    {
        "number": 4299,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.strip())\n    # calculate pronunciation of \"\u672c\"\n    ones = N % 10\n    tens = (N // 10) % 10\n    hundreds = (N // 100) % 10\n    if hundreds == 0:\n        if tens == 0:\n            if ones == 0:\n                return \"\"\n            elif ones == 1:\n                return \"bon\"\n            elif ones == 2 or ones == 4 or ones == 5 or ones == 7 or ones == 9:\n                return \"hon\"\n            else:\n                return \"pon\"\n        elif tens == 1:\n            if ones == 0:\n                return \"hon\"\n            else:\n                return \"pon\"\n        elif tens == 2 or tens == 4 or tens == 5 or tens == 7 or tens == 9:\n            return \"hon\"\n        else:\n            return \"pon\"\n    elif hundreds == 1:\n        if ones == 0:\n            return \"hon\"\n        else:\n            return \"pon\"\n    elif hundreds == 2 or hundreds == 4 or hundreds == 5 or hundreds == 7 or hundreds == 9:\n        return \"hon\"\n    else:\n        return \"pon\""
    },
    {
        "number": 4299,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    ones_place = n % 10\n    if ones_place == 2 or ones_place == 4 or ones_place == 5 or ones_place == 7 or ones_place == 9:\n        return \"hon\"\n    elif ones_place == 0 or ones_place == 1 or ones_place == 6 or ones_place == 8:\n        return \"pon\"\n    else:\n        return \"bon\""
    },
    {
        "number": 4299,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ones_place = n % 10\n    if ones_place == 2 or ones_place == 4 or ones_place == 5 or ones_place == 7 or ones_place == 9:\n        return \"hon\"\n    elif ones_place == 0 or ones_place == 1 or ones_place == 6 or ones_place == 8:\n        return \"pon\"\n    else:\n        return \"bon\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4299,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin)\n\n    # Get the digit in the ones place\n    ones_digit = N % 10\n\n    # Check the ones digit and pronounce \"\u672c\" accordingly\n    if ones_digit == 0:\n        return \"pon\"\n    elif ones_digit == 1:\n        return \"hon\"\n    elif ones_digit == 2 or ones_digit == 4 or ones_digit == 5 or ones_digit == 7 or ones_digit == 9:\n        return \"hon\"\n    else:\n        return \"bon\""
    },
    {
        "number": 4299,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    ones_digit = n % 10\n    tens_digit = n // 10\n    if ones_digit in [0, 1, 6, 8]:\n        p = \"pon\"\n    elif ones_digit == 2 or ones_digit == 4 or ones_digit == 5 or ones_digit == 7 or ones_digit == 9:\n        p = \"hon\"\n    else:\n        p = \"bon\"\n    return p"
    },
    {
        "number": 4300,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, *d = map(int, stdin.split())\n\n    # compute health points restored from eating two takoyaki\n    health_points = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            health_points += d[i] * d[j]\n\n    # output result\n    return str(health_points)"
    },
    {
        "number": 4300,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    d = list(map(int, stdin.readline().strip().split()))\n\n    # compute the sum of health points\n    result = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            result += d[i] * d[j]\n\n    return str(result)\n"
    },
    {
        "number": 4300,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    dishes = [int(x) for x in stdin.readline().strip().split()]\n    \n    # compute sum of health points\n    health_points = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            health_points += dishes[i] * dishes[j]\n    \n    # print result\n    return str(health_points)"
    },
    {
        "number": 4300,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    N = int(stdin.readline().strip())\n    d = list(map(int, stdin.readline().strip().split()))\n\n    # calculate number of possible choices\n    num_choices = (N * (N - 1)) // 2\n\n    # calculate health points restored from each choice\n    health_points = []\n    for i in range(N):\n        for j in range(i+1, N):\n            health_points.append(d[i] * d[j])\n\n    # calculate sum of health points\n    sum_health_points = sum(health_points)\n\n    # print result\n    return f\"{sum_health_points}\\n\""
    },
    {
        "number": 4300,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, *d = map(int, stdin.split())\n    \n    # Compute the number of possible choices\n    n_choices = (N * (N - 1)) // 2\n    \n    # Initialize sum of health points\n    sum_health_points = 0\n    \n    # Iterate over all possible choices\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            # Compute the health points restored from eating the two takoyaki\n            health_points = d[i] * d[j]\n            \n            # Add to sum of health points\n            sum_health_points += health_points\n    \n    # Return the sum of health points\n    return str(sum_health_points)"
    },
    {
        "number": 4300,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes input from stdin, calculates the sum of the health points restored from eating two takoyaki over all possible choices of two takoyaki from the N takoyaki served, and returns the result as a string.\n    \"\"\"\n    # Read input from stdin\n    N = int(stdin.readline().strip())\n    d = list(map(int, stdin.readline().strip().split()))\n\n    # Calculate sum of health points\n    sum_health_points = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            sum_health_points += d[i] * d[j]\n\n    return str(sum_health_points)"
    },
    {
        "number": 4300,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    takoyakis = list(map(int, stdin.split()[1:]))\n    health_points = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            health_points += takoyakis[i] * takoyakis[j]\n    return str(health_points)\n\nprint(solution(input()))"
    },
    {
        "number": 4300,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *d = map(int, stdin.split())\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total += d[i] * d[j]\n    return str(total)"
    },
    {
        "number": 4300,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    ds = list(map(int, stdin.readline().strip().split()))\n    \n    # compute all possible pairs of takoyaki\n    pairs = [(ds[i], ds[j]) for i in range(n) for j in range(i+1, n)]\n    \n    # compute the sum of health points restored from each pair\n    total = sum([pair[0] * pair[1] for pair in pairs])\n    \n    return str(total)"
    },
    {
        "number": 4300,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline())\n    d = list(map(int, stdin.readline().split()))\n\n    # compute the sum of health points restored from eating two takoyaki over all possible choices of two takoyaki from the N takoyaki served\n    health_points = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            health_points += d[i] * d[j]\n\n    return str(health_points)"
    },
    {
        "number": 4301,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # Find maximum value among the N-1 elements other than A_i\n    output = []\n    for i in range(n):\n        max_val = a[i]\n        for j in range(n):\n            if j!= i:\n                max_val = max(max_val, a[j])\n        output.append(max_val)\n    \n    # Format output and return as string\n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4301,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    res = []\n    for i in range(1, n):\n        max_val = max(arr[:i] + arr[i+1:])\n        res.append(max_val)\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 4301,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline())\n    seq = list(map(int, stdin.readline().split()))\n    \n    # find maximum value for each index\n    result = []\n    for i in range(n):\n        max_val = float('-inf')\n        for j in range(n):\n            if i!= j:\n                max_val = max(max_val, seq[j])\n        result.append(max_val)\n        \n    # print results\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4301,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    arr = list(map(int, lines[1:]))\n\n    # Find the maximum value among the N-1 elements other than A_i in the sequence.\n    max_arr = []\n    for i in range(n):\n        max_val = float('-inf')\n        for j in range(n):\n            if j!= i:\n                max_val = max(max_val, arr[j])\n        max_arr.append(max_val)\n\n    # Print the maximum value for each i in the sequence.\n    for i in range(n):\n        print(max_arr[i])\n\n    return ''"
    },
    {
        "number": 4301,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get N\n    N = int(stdin.readline())\n    # Get sequence\n    seq = list(map(int, stdin.readline().strip().split()))\n    # Create output list\n    out = []\n    # Iterate over sequence\n    for i in range(N):\n        # Get max value among remaining elements\n        max_val = max([seq[j] for j in range(N) if j!= i])\n        # Append to output list\n        out.append(max_val)\n    # Convert to string and return\n    return \"\\n\".join(map(str, out))"
    },
    {
        "number": 4301,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    max_vals = []\n    for i in range(n):\n        nums_without_i = nums[:i] + nums[i+1:]\n        max_vals.append(max(nums_without_i))\n    return \"\\n\".join(map(str, max_vals))"
    },
    {
        "number": 4301,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    result = []\n    for i in range(n):\n        max_num = float('-inf')\n        for j in range(n):\n            if i!= j:\n                max_num = max(max_num, nums[j])\n        result.append(max_num)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4301,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    res = []\n    for i in range(n):\n        max_val = max(arr[:i] + arr[i+1:])\n        res.append(max_val)\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 4301,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    res = []\n    for i in range(n):\n        max_val = -1\n        for j in range(n):\n            if i!= j:\n                if max_val < a[j]:\n                    max_val = a[j]\n        res.append(max_val)\n    return '\\n'.join([str(x) for x in res])\n\nstdin = \"\"\"\n3\n1\n4\n3\n\"\"\"\n\nprint(solution(stdin)) # Output: 4\\n3\\n4"
    },
    {
        "number": 4301,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n\n    # Initializing output list\n    output = []\n\n    # Iterating through all indices of a\n    for i in range(n):\n        # Initializing maximum value\n        max_val = a[i]\n\n        # Iterating through all elements before i\n        for j in range(n):\n            # Ignoring the current element\n            if j == i:\n                continue\n\n            # Updating maximum value\n            if a[j] > max_val:\n                max_val = a[j]\n\n        # Appending maximum value to output list\n        output.append(max_val)\n\n    # Converting output list to string\n    return '\\n'.join(map(str, output))"
    },
    {
        "number": 4302,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    A, B = map(int, stdin.strip().split())\n\n    # compute the maximum number of coins\n    if A > B:\n        A, B = B, A\n\n    coins = A + B\n\n    # subtract the size of the button that was pressed twice\n    if A == B:\n        coins -= 2*min(A, B)\n    else:\n        coins -= min(A, B)\n\n    return str(coins)"
    },
    {
        "number": 4302,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    A, B = map(int, stdin.split())\n\n    # initialize variables\n    max_coins = 0\n    coins_a = 0\n    coins_b = 0\n\n    # press buttons\n    for i in range(2):\n        if A > B:\n            coins_a += A\n            A -= 1\n        elif B > A:\n            coins_b += B\n            B -= 1\n        else:\n            coins_a += A\n            coins_b += B\n            A -= 1\n            B -= 1\n\n    # calculate max coins\n    max_coins = max(coins_a, coins_b)\n\n    # print output\n    print(max_coins)"
    },
    {
        "number": 4302,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < b:\n        a, b = b, a\n    coins = a + b\n    while a >= 1 and b >= 1:\n        if a == b:\n            coins += a\n            a -= 1\n            b -= 1\n        elif a >= b:\n            coins += a\n            a -= 1\n        else:\n            coins += b\n            b -= 1\n    return str(coins)"
    },
    {
        "number": 4302,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.strip().split()))\n    coins = 0\n    while A >= 1 or B >= 1:\n        if A >= B:\n            coins += A\n            A -= 1\n        else:\n            coins += B\n            B -= 1\n    return coins\n"
    },
    {
        "number": 4302,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    max_coins = 0\n    for size in range(min(A, B), 0, -1):\n        coins = 0\n        for i in range(2):\n            coins += size\n            if i == 1 and size == 1:\n                break\n            size -= 1\n        if coins > max_coins:\n            max_coins = coins\n    return max_coins"
    },
    {
        "number": 4302,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        A, B = B, A\n    # base case\n    if A == 0:\n        return 0\n    # recursive case\n    if A <= B:\n        return max(A + solution(str(B-A)), solution(str(A)))\n    else:\n        return 0\n\ndef"
    },
    {
        "number": 4302,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    coins = 0\n    while a > 0 and b > 0:\n        if a >= b:\n            coins += a\n            a -= 1\n            b -= 1\n        else:\n            coins += b\n            b -= 1\n            a -= 1\n    return str(coins)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4302,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        A, B = B, A\n    if B == 1:\n        return \"1\"\n    if A == B:\n        return str(A*2)\n    if A == 1:\n        return str(B+1)\n    if A == 2:\n        return str(B+2)\n    return str(A+B)"
    },
    {
        "number": 4302,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    coins = 0\n    if A > B:\n        A, B = B, A\n    if A == 1:\n        return str(B)\n    elif A == 2:\n        return str(B + 1)\n    else:\n        while A > 2:\n            coins += B\n            A -= 1\n            B += 1\n        coins += B * A\n    return str(coins)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4302,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    coins = 0\n    if a == b:\n        coins = a * 2\n    elif a > b:\n        coins = a + b\n    else:\n        coins = a * 2 + b\n    return str(coins)"
    },
    {
        "number": 4303,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n\n    # Sort x and calculate distance between adjacent candles\n    x.sort()\n    dist = [x[i+1] - x[i] for i in range(N-1)]\n\n    # Calculate prefix sum of distance\n    prefix_sum = [0] * N\n    for i in range(1, N):\n        prefix_sum[i] = prefix_sum[i-1] + dist[i-1]\n\n    # Calculate minimum time to light K candles\n    time = 0\n    for i in range(K):\n        # Find index of candle to light\n        index = bisect_left(x, time)\n        if index == N:\n            break\n        # Calculate time to light candle\n        time += prefix_sum[index]\n\n    return str(time)\n\n\ndef"
    },
    {
        "number": 4303,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, K = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n\n    # sort candles by their x-coordinate\n    x.sort()\n\n    # initialize variables\n    start = 0\n    end = x[K-1]\n    min_time = float('inf')\n\n    # binary search for minimum time\n    while start <= end:\n        mid = (start + end) // 2\n        # calculate the number of candles that are lit by Snuke at the midpoint\n        lit_candles = sum(1 for i in range(K) if x[i] <= mid)\n        # calculate the time required to light the remaining candles\n        remaining_candles = N - K\n        remaining_time = sum(abs(x[i] - mid) for i in range(K, N))\n        time = remaining_time + lit_candles\n        # update minimum time\n        if lit_candles >= K:\n            min_time = min(min_time, time)\n        # check if mid is a valid x-coordinate\n        if lit_candles >= K and x[K-1] <= mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return str(min_time)"
    },
    {
        "number": 4303,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, K = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n\n    # sort candles by their coordinates\n    x.sort()\n\n    # calculate the minimum time required to light K candles\n    time = 0\n    for i in range(K):\n        # move to the left until the candle is at position 0\n        while x[i] > 0:\n            time += 1\n            x[i] -= 1\n        # light the candle\n        time += 1\n        # move to the right until the candle is at position 0\n        while x[i] < 0:\n            time += 1\n            x[i] += 1\n\n    return str(time)"
    },
    {
        "number": 4303,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = map(int, stdin.strip().split())\n    x = list(map(int, stdin.strip().split()))\n    \n    # sort candles by their coordinates\n    x.sort()\n    \n    # initialize variables\n    left = 0\n    right = x[k-1] - x[0]\n    ans = 0\n    \n    # binary search for minimum time\n    while left < right:\n        mid = (left + right) // 2\n        \n        # count the number of candles that can be lighted with current mid time\n        can_light = 1\n        can_reach = x[0] + mid\n        for i in range(1, n):\n            if can_reach >= x[i]:\n                can_light += 1\n                can_reach = x[i] + mid\n        \n        # update answer if we can light all the candles in time mid\n        if can_light >= k:\n            ans = mid\n            right = mid\n        else:\n            left = mid + 1\n    \n    return str(ans)"
    },
    {
        "number": 4303,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n    x.sort()\n\n    # Find the position of the lightest candle\n    light_pos = 0\n    for i in range(1, n):\n        if x[i] < x[light_pos]:\n            light_pos = i\n\n    # Calculate the minimum time required to light K candles\n    if k == n:\n        return \"0\"\n\n    time = 0\n    if light_pos > k // 2:\n        time = k // 2 * x[light_pos]\n        k -= k // 2\n    time += k * x[k - 1]\n    return str(time)"
    },
    {
        "number": 4303,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, k = list(map(int, stdin.readline().strip().split()))\n    x = list(map(int, stdin.readline().strip().split()))\n\n    # sort candles based on their x-coordinate\n    x.sort()\n\n    # initialize variables\n    start = 0\n    end = x[-1]\n    time = 0\n    index = 0\n\n    # loop through the candles\n    while k > 0:\n        # check if we can light the current candle\n        if x[index] <= end:\n            # add the time required to light the current candle\n            time += abs(end - x[index])\n            # subtract the current candle from the count\n            k -= 1\n            # update the end position\n            end = x[index]\n            # move to the next candle\n            index += 1\n        else:\n            # move to the next candle\n            end += 1\n            # add the time required to move to the next candle\n            time += 1\n\n    return str(time)"
    },
    {
        "number": 4303,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n\n    left, right = 0, x[-1]\n    candles = 0\n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid in x:\n            candles += 1\n            if candles == k:\n                return str(mid)\n            right = mid - 1\n        else:\n            right = mid - 1\n\n    return str(right + 1)"
    },
    {
        "number": 4303,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n\n    # sort candles by x coordinate\n    x.sort()\n\n    # calculate minimum time to light k candles\n    time = 0\n    for i in range(k):\n        # light the i-th candle\n        time += abs(x[i])\n\n        # move to the next position\n        time += 1\n\n        # light the candle at the current position\n        time += 1\n\n    return str(time)"
    },
    {
        "number": 4303,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n\n    left = 0\n    right = max(x)\n    ans = float('inf')\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        cand = 0\n        curr_x = 0\n        for i in range(n):\n            if curr_x + x[i] <= mid:\n                cand += 1\n                curr_x += x[i]\n            if cand == k:\n                ans = min(ans, mid)\n                break\n\n        if ans == float('inf'):\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return str(ans)"
    },
    {
        "number": 4303,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, K = map(int, stdin.readline().split())\n    xs = list(map(int, stdin.readline().split()))\n\n    # sort candles by position\n    xs.sort()\n\n    # initialize variables\n    time = 0\n    last_position = 0\n    for x in xs:\n        # move to current position\n        distance = x - last_position\n        time += distance\n        last_position = x\n\n        # light candle\n        time += 1\n\n    # move back to 0 and light remaining candles\n    time += K - len(xs)\n\n    return str(time)"
    },
    {
        "number": 4304,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    heights = [(i+1)*i//2 for i in range(a)]\n    total_height = sum(heights)\n    snow_cover = b-a\n    snow_height = total_height-a*snow_cover\n    return str(snow_height)"
    },
    {
        "number": 4304,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    snow_cover = 0\n    for i in range(a, b):\n        snow_cover += i\n    return str(snow_cover)"
    },
    {
        "number": 4304,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    snow_cover = abs(b - a) + 1\n    return str(snow_cover)"
    },
    {
        "number": 4304,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = a + b\n    y = 0\n    for i in range(1, x + 1):\n        y += i\n    return str(y - b - a)\n\n\ndef"
    },
    {
        "number": 4304,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    heights = [(i*(i+1))//2 for i in range(a+1)]\n    total_height = sum(heights[a:b+1])\n    snow_cover = total_height - ((b-a+1)*(b-a))//2\n    return str(snow_cover)"
    },
    {
        "number": 4304,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    snow_depth = (a+b) // 2 + 1\n    return str(snow_depth)"
    },
    {
        "number": 4304,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    snow_depth = a - b\n    if snow_depth < 1:\n        snow_depth = 1\n    return str(snow_depth)\n\nprint(solution(input()))"
    },
    {
        "number": 4304,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return str(b-a)\n\nprint(solution(\"8 13\")) # output: \"2\""
    },
    {
        "number": 4304,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    snow_depth = b - a + 1\n    if snow_depth < 1:\n        snow_depth = 1\n    return str(snow_depth)"
    },
    {
        "number": 4304,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    snow_cover = max(a, b) - min(a, b) + 1\n    return str(snow_cover)"
    },
    {
        "number": 4305,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    h, a = list(map(int, stdin.split()))\n\n    # Calculate number of attacks needed\n    attacks_needed = h // a\n    if attacks_needed == 0:\n        print(\"Serval cannot win.\")\n    else:\n        print(attacks_needed)\n"
    },
    {
        "number": 4305,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h, a = map(int, stdin.strip().split())\n    attacks = 1\n    while h > 0:\n        h -= a\n        attacks += 1\n    return str(attacks)"
    },
    {
        "number": 4305,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    health, attack_damage = map(int, stdin.strip().split())\n    if health <= attack_damage:\n        return \"0\"\n    else:\n        attacks_needed = 1\n        while health > 0:\n            health -= attack_damage\n            if health <= 0:\n                return str(attacks_needed)\n            attacks_needed += 1\n\nstdin = \"10 4\"\nprint(solution(stdin)) # Output: \"3\""
    },
    {
        "number": 4305,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.strip().split())\n    attacks = 1\n    while True:\n        H -= A\n        attacks += 1\n        if H <= 0:\n            break\n    return str(attacks)\n\ndef"
    },
    {
        "number": 4305,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h, a = map(int, stdin.split())\n    attacks = 0\n    while h > 0:\n        h -= a\n        attacks += 1\n    return str(attacks)"
    },
    {
        "number": 4305,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    attacks = 0\n    while H > 0:\n        H -= A\n        attacks += 1\n    return str(attacks)"
    },
    {
        "number": 4305,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    H, A = list(map(int, stdin.split()))\n\n    # Calculate number of attacks needed to win\n    attacks = 1\n    while H > 0 and attacks <= H:\n        H -= A\n        attacks += 1\n\n    # Print result\n    return str(attacks)\n"
    },
    {
        "number": 4305,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    health, attack = map(int, stdin.split())\n    attacks = 0\n    while health > 0:\n        health -= attack\n        attacks += 1\n    return str(attacks)\n\nprint(solution(\"10 4\")) # Output: \"3\""
    },
    {
        "number": 4305,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    count = 0\n    while H > 0:\n        H -= A\n        count += 1\n    return str(count)\n\nprint(solution(\"10 4\")) # Output: 3"
    },
    {
        "number": 4305,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    attacks = 1\n    while H > 0:\n        H -= A\n        attacks += 1\n        if H <= 0:\n            break\n    return str(attacks)"
    },
    {
        "number": 4306,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    duration = min(B, D) - max(A, C)\n    return str(duration)"
    },
    {
        "number": 4306,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.strip().split())\n    if B - A == D - C:\n        return str(B - A)\n    else:\n        return \"IMPOSSIBLE\"\n    \n"
    },
    {
        "number": 4306,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Reading the input values\n    values = list(map(int, stdin.split()))\n    A, B, C, D = values[0], values[1], values[2], values[3]\n    \n    # Calculating the duration in seconds\n    duration = min(B, D) - max(A, C)\n    \n    # Printing the result\n    return str(duration)"
    },
    {
        "number": 4306,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A >= C:\n        A -= C\n        B -= C\n        C = 0\n    else:\n        C -= A\n        D -= A\n        A = 0\n    if B >= D:\n        B -= D\n    else:\n        D -= B\n    return str(max(A, B, C, D))"
    },
    {
        "number": 4306,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    return str(max(B, D) - min(A, C))"
    },
    {
        "number": 4306,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    return str(max(B - A, D - C))"
    },
    {
        "number": 4306,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    duration = max(B, D) - min(A, C)\n    return str(duration)"
    },
    {
        "number": 4306,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.strip().split())\n    start_time = min(a, c)\n    end_time = max(b, d)\n    duration = end_time - start_time\n    return str(duration)\n"
    },
    {
        "number": 4306,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    a, b, c, d = map(int, stdin.strip().split())\n    # calculate the length of the duration in seconds\n    duration = b - a if a <= b else d - c\n    # print the result\n    return str(duration)"
    },
    {
        "number": 4306,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    start_up = max(a, c)\n    end_up = min(b, d)\n    duration = end_up - start_up\n    return str(duration)"
    },
    {
        "number": 4307,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(1, n+1, 2):\n        if sum(1 for j in range(1, int(i**0.5)+1) if i % j == 0) == 8:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4307,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for num in range(1, N+1):\n        if num % 2 == 1:\n            divisors = 0\n            for i in range(1, num+1):\n                if num % i == 0:\n                    divisors += 1\n            if divisors == 8:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4307,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            divisors = 0\n            for j in range(1, i+1):\n                if i % j == 0:\n                    divisors += 1\n            if divisors == 8:\n                count += 1\n    return str(count)\n\nstdin = input().strip()\nprint(solution(stdin))"
    },
    {
        "number": 4307,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for num in range(1, n+1):\n        if num % 2 == 1:\n            divisors = set()\n            for i in range(1, num+1):\n                if num % i == 0:\n                    divisors.add(i)\n            if len(divisors) == 8:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4307,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for num in range(1, n+1):\n        if num % 2!= 0:\n            divisors = 0\n            for i in range(1, int(num**0.5)+1):\n                if num % i == 0:\n                    divisors += 1\n                    if i!= num//i:\n                        divisors += 1\n            if divisors == 8:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4307,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            divisors = 0\n            for j in range(1, i+1):\n                if i % j == 0:\n                    divisors += 1\n            if divisors == 8:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4307,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(1, n+1, 2):\n        if len(set(range(1, i+1)) & set(divisor for divisor in range(1, i+1) if i % divisor == 0)) == 8:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4307,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(1, n+1, 2):\n        if sum([1 for j in range(1, i+1) if i % j == 0]) == 8:\n            count += 1\n    return str(count)\n\nstdin = \"105\"\nprint(solution(stdin))"
    },
    {
        "number": 4307,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for num in range(1, n+1):\n        if num % 2!= 0:\n            divisors = 0\n            for i in range(1, int(num**0.5)+1):\n                if num % i == 0:\n                    if i == 1 or i == num/i:\n                        divisors += 1\n                    else:\n                        divisors += 2\n            if divisors == 8:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4307,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1, 2):\n        divisors = 0\n        for j in range(1, int(i**0.5)+1):\n            if i % j == 0:\n                divisors += 1\n                if j!= i//j:\n                    divisors += 1\n        if divisors == 8:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4308,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    crackers = sorted([int(stdin) for _ in range(n)])\n    min_crackers = crackers[::k][k-1]\n    max_crackers = crackers[k-1]\n    return str(max_crackers - min_crackers)"
    },
    {
        "number": 4308,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    crackers = list(range(1, n+1))\n    groups = [[] for _ in range(k)]\n    for i in range(n):\n        group_index = i % k\n        groups[group_index].append(crackers.pop(0))\n    max_diff = max(max(g) - min(g) for g in groups)\n    return str(max_diff)"
    },
    {
        "number": 4308,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    min_crackers = n // k\n    remaining_crackers = n % k\n    max_crackers = min_crackers + 1\n    if remaining_crackers > 0:\n        max_crackers += 1\n    return str(abs(max_crackers - min_crackers))"
    },
    {
        "number": 4308,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    crackers_per_user = [n // k + (1 if i < n % k else 0) for i in range(k)]\n    min_crackers = min(crackers_per_user)\n    max_crackers = max(crackers_per_user)\n    return str(abs(max_crackers - min_crackers))"
    },
    {
        "number": 4308,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    min_num = k\n    max_num = (n + k - 1) // k\n    return str(abs(max_num - min_num))"
    },
    {
        "number": 4308,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    N_per_user = N // K\n    rem = N % K\n    min_crackers = N_per_user + 1\n    max_crackers = N_per_user\n    if rem > 0:\n        min_crackers += 1\n        rem -= 1\n        max_crackers += 1\n    for i in range(rem):\n        min_crackers += 1\n        max_crackers += 1\n    return str(abs(max_crackers - min_crackers))"
    },
    {
        "number": 4308,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, K = map(int, stdin.split())\n\n    # distribute crackers\n    crackers = [i for i in range(1, N+1)]\n    if K >= N:\n        return str(0)\n    crackers_per_user = [N // K + 1] * K\n    for i in range(N % K):\n        crackers_per_user[i] += 1\n\n    # calculate min and max cracker count\n    min_crackers = min(crackers_per_user)\n    max_crackers = max(crackers_per_user)\n\n    # return min abs difference\n    return str(abs(max_crackers - min_crackers))\n"
    },
    {
        "number": 4308,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    # compute the maximum and minimum possible cracker counts\n    max_count = n // k * k\n    min_count = n // k * (k - 1) + 1 if n % k == 0 else n // k * k\n\n    # compute the absolute difference and return the result\n    return str(abs(max_count - min_count))\n"
    },
    {
        "number": 4308,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    crackers = list(range(1, n+1))\n    crackers_per_user = [0] * k\n    for i in range(n):\n        crackers_per_user[i % k] += crackers[i]\n    max_cracker = max(crackers_per_user)\n    min_cracker = min(crackers_per_user)\n    return str(abs(max_cracker - min_cracker))\n"
    },
    {
        "number": 4308,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    crackers = list(range(1, n+1))\n    if k > n:\n        return \"IMPOSSIBLE\"\n    result = n % k\n    if result == 0:\n        return max(crackers) - min(crackers)\n    else:\n        crackers_per_user = [crackers[i:i+result] for i in range(0, n, result)]\n        min_crackers = [min(c) for c in crackers_per_user]\n        max_crackers = [max(c) for c in crackers_per_user]\n        return max(max_crackers) - min(min_crackers)"
    },
    {
        "number": 4309,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # Find the largest ABC number with all digits the same\n    i = 1000\n    while True:\n        if int(str(i) * 3) % 10 == 0:\n            return str(i)\n        i -= 1"
    },
    {
        "number": 4309,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while True:\n        if all(int(digit) == n % 10 for digit in str(n)):\n            return str(n)\n        n += 1\n\nprint(solution(input()))"
    },
    {
        "number": 4309,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    while True:\n        for i in range(1, 10):\n            if int(str(N*i)) % 10 == 0:\n                return str(N*i)\n        N += 1"
    },
    {
        "number": 4309,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits = [int(d) for d in str(n)]\n    if len(set(digits)) == 1:\n        return str(n)\n    else:\n        return str(n+1)"
    },
    {
        "number": 4309,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n)"
    },
    {
        "number": 4309,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x = 10**N\n    while True:\n        if x % 10 == x // 10**(N-1):\n            return str(x)\n        x += 1"
    },
    {
        "number": 4309,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num = 1\n    while True:\n        if all(int(digit) == 0 for digit in str(num)):\n            return str(n)\n        num += 1"
    },
    {
        "number": 4309,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n, 1000):\n        if str(i) == str(i)[::-1]:\n            return str(i)"
    },
    {
        "number": 4309,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.strip())\n\n    # Check if there exists an ABC such that all digits in base ten are the same\n    for i in range(100, 1000):\n        if str(i).count(str(i)[0]) == 3:\n            # Check if ABC i exists\n            if i >= N:\n                return str(i)\n\n    # If no such ABC exists, return -1\n    return -1"
    },
    {
        "number": 4309,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N < 100 or N > 999:\n        return \"Invalid input\"\n    return str(N)"
    },
    {
        "number": 4310,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.strip().split()))\n    n = len(A)\n    if n == 1:\n        return \"0\"\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = A[i]\n    for gap in range(1, n):\n        for i in range(n-gap):\n            j = i + gap\n            dp[i][j] = dp[i+1][j] + abs(A[j] - A[i])\n    return str(dp[0][n-1])\n\nprint(solution(input())) # prints 5 for sample input"
    },
    {
        "number": 4310,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.strip().split()))\n    A.sort()\n    return str(sum(abs(A[i] - A[i-1]) for i in range(1, len(A))))"
    },
    {
        "number": 4310,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    A.sort()\n    total_cost = 0\n    for i in range(2):\n        total_cost += abs(A[i+1] - A[i])\n    return str(total_cost)"
    },
    {
        "number": 4310,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    A = list(map(int, stdin.split()))\n    \n    # Complete first task at cost 0\n    cost = 0\n    \n    # Complete third task at cost |A_3 - A_1|\n    cost += abs(A[2] - A[0])\n    \n    # Complete second task at cost |A_2 - A_1|\n    cost += abs(A[1] - A[0])\n    \n    # Print result\n    return str(cost)"
    },
    {
        "number": 4310,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    min_cost = max(A)\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            min_cost = min(min_cost, A[j] - A[i] + solution(str(A[0:i]+[A[j]]+A[i+1:j]+A[j+1:])))\n    return min_cost"
    },
    {
        "number": 4310,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    dp = [0] * 3\n    dp[1] = A[1] - A[0]\n    dp[2] = A[2] - A[0]\n    for i in range(2, 3):\n        dp[i] = min(dp[i-1]+abs(A[i]-A[i-1]), dp[i-2]+abs(A[i]-A[i-2]))\n    return str(dp[2])"
    },
    {
        "number": 4310,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    A = list(map(int, stdin.split()))\n\n    # Initialize variables\n    min_cost = 0\n    prev_cost = 0\n\n    # Iterate through tasks and calculate cost\n    for i in range(1, len(A)):\n        current_cost = abs(A[i] - A[i-1])\n        if current_cost < prev_cost:\n            min_cost += prev_cost\n        else:\n            min_cost += current_cost\n        prev_cost = current_cost\n\n    # Add last task cost\n    min_cost += prev_cost\n\n    # Return minimum cost\n    return str(min_cost)"
    },
    {
        "number": 4310,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    return str(max(A[1] - A[0], A[2] - A[1], A[2] - A[0]))"
    },
    {
        "number": 4310,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    A = list(map(int, stdin.strip().split()))\n\n    # Initialize variables\n    min_cost = 0\n    last_cost = 0\n\n    # Iterate through tasks and calculate cost\n    for i in range(1, len(A)):\n        cost = abs(A[i] - A[i-1])\n        min_cost += cost\n        last_cost = cost\n\n    # Add last cost\n    min_cost += last_cost\n\n    # Return result\n    return str(min_cost)"
    },
    {
        "number": 4310,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    a, b, c = map(int, stdin.split())\n\n    # Initializing variables\n    cost = [0, 0, 0]\n    cost[0] = 0\n    cost[1] = abs(a - b)\n    cost[2] = abs(a - c)\n\n    # Finding minimum cost\n    for i in range(3):\n        for j in range(i + 1, 3):\n            cost[j] = max(cost[j], cost[i] + abs(a - b))\n\n    # Printing minimum cost\n    return str(min(cost))"
    },
    {
        "number": 4311,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin.strip())\n    a = [s]\n    for i in range(1, 1000001):\n        if i % 2 == 0:\n            a.append(i // 2)\n        else:\n            a.append(3 * i + 1)\n    for i in range(1, len(a)):\n        if a[i] == s:\n            return str(i)\n    return \"0\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin.strip())\n    a = [s]\n    i = 1\n    while True:\n        f = a[i-1]//2 if a[i-1]%2 == 0 else 3*a[i-1]+1\n        a.append(f)\n        if f == s:\n            return str(i)\n        i += 1"
    },
    {
        "number": 4311,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    i = 1\n    while True:\n        n = len(a)\n        f = n // 2 if n % 2 == 0 else 3 * n + 1\n        if f in a:\n            return str(a.index(f) + 1)\n        a.append(f)"
    },
    {
        "number": 4311,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    i = 1\n    while True:\n        if i == 1:\n            a.append(s)\n        else:\n            if a[i-1] % 2 == 0:\n                a.append(a[i-1]//2)\n            else:\n                a.append(3*a[i-1]+1)\n        if i > 1 and a[i-1] == a[i-2]:\n            break\n        i += 1\n    return str(i-1)\n\nprint(solution(input()))"
    },
    {
        "number": 4311,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    while True:\n        if len(a) > 1000000:\n            return 'Error: Input exceeds maximum value.'\n        f = lambda n: n//2 if n%2==0 else 3*n+1\n        next_num = f(a[-1])\n        if next_num in a:\n            return len(a)-a.index(next_num)\n        a.append(next_num)"
    },
    {
        "number": 4311,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin.readline().strip())\n    a = [s]\n    for i in range(1, 1000000):\n        if i % 2 == 0:\n            a.append(a[i-1] // 2)\n        else:\n            a.append(3 * a[i-1] + 1)\n        if a[i] == a[i-1]:\n            return str(i)\n    return \"Not Found\""
    },
    {
        "number": 4311,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    s = int(stdin.strip())\n\n    # Initialize variables\n    a = [s]\n    n = 1\n    m = 0\n\n    # Loop until a_n = a_m for some n > m\n    while n <= 1000000:\n        a.append(3 * n + 1 if n % 2 == 1 else n // 2)\n        if a[n] == a[n-1]:\n            m = n\n            break\n        n += 1\n\n    # Return the minimum integer m\n    return str(m)"
    },
    {
        "number": 4311,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    i = 1\n    while i < 1000000:\n        if a[i-1] % 2 == 0:\n            a.append(a[i-1]//2)\n        else:\n            a.append(3*a[i-1]+1)\n        i += 1\n    for i in range(len(a)):\n        if i == len(a)-1:\n            break\n        if a[i] == a[i+1]:\n            print(i+1)\n            return \"\"\n    print(len(a)-1)\n    return \"\""
    },
    {
        "number": 4311,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin.strip())\n    a = [s]\n    while True:\n        n = len(a)\n        if n == 1:\n            break\n        if n % 2 == 0:\n            a.append(n // 2)\n        else:\n            a.append(3 * n + 1)\n    n = len(a)\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] == a[j]:\n                return str(j+1)\n    return \"Invalid input\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin.strip())\n    a = [s]\n    i = 1\n    while len(a) < 1000000:\n        a.append(a[i-1] if i % 2 == 0 else (3*a[i-1]+1))\n        i += 1\n    for i in range(1, len(a)):\n        if a[i] == a[0]:\n            return str(i)\n    return str(len(a)-1)"
    },
    {
        "number": 4312,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    if A >= C and B >= D:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4312,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    takahashi_health = A\n    aoki_health = C\n\n    while takahashi_health > 0 and aoki_health > 0:\n        if takahashi_health <= aoki_health:\n            takahashi_health -= B\n        else:\n            aoki_health -= D\n\n    if takahashi_health > 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4312,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    health_takahashi = A\n    health_aoki = C\n    while health_takahashi > 0 and health_aoki > 0:\n        health_aoki -= B\n        if health_aoki <= 0:\n            return \"Yes\"\n        health_takahashi -= D\n        if health_takahashi <= 0:\n            return \"No\"\n        health_aoki -= A\n        if health_aoki <= 0:\n            return \"Yes\"\n        health_takahashi -= C\n        if health_takahashi <= 0:\n            return \"No\"\n    return \"Yes\" if health_aoki <= 0 else \"No\""
    },
    {
        "number": 4312,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    takahashi, aoki = map(int, stdin.split())\n    while takahashi > 0 and aoki > 0:\n        if takahashi > aoki:\n            aoki -= takahashi\n        else:\n            takahashi -= aoki\n    if takahashi <= 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4312,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    takahashi_health, aoki_health, takahashi_strength, aoki_strength = map(int, stdin.split())\n    takahashi_turn = True\n\n    while True:\n        if takahashi_turn:\n            aoki_health -= takahashi_strength\n            if aoki_health <= 0:\n                return \"Yes\"\n        else:\n            takahashi_health -= aoki_strength\n            if takahashi_health <= 0:\n                return \"No\"\n        takahashi_turn = not takahashi_turn\n\ndef"
    },
    {
        "number": 4312,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    takahashi_health = A + B\n    aoki_health = C + D\n    while takahashi_health > 0 and aoki_health > 0:\n        if takahashi_health > aoki_health:\n            aoki_health -= takahashi_health\n        else:\n            takahashi_health -= aoki_health\n    return \"Yes\" if takahashi_health <= 0 else \"No\"\n\n\ndef"
    },
    {
        "number": 4312,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    takashi = a\n    aoki = c\n    while takashi > 0 and aoki > 0:\n        if takashi > aoki:\n            aoki -= takashi\n        else:\n            takashi -= aoki\n    if takashi <= 0:\n        return 'No'\n    else:\n        return 'Yes'"
    },
    {
        "number": 4312,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    A, B, C, D = map(int, stdin.split())\n\n    # Calculate health of each monster\n    health_A = A\n    health_B = B\n    health_C = C\n    health_D = D\n\n    # Monster turns\n    while True:\n        # Check if any monster has 0 or less health\n        if health_A <= 0 or health_C <= 0:\n            return \"Yes\"\n        if health_B <= 0 or health_D <= 0:\n            return \"No\"\n\n        # Takahashi's turn\n        health_A -= B\n        health_C -= D\n\n        # Aoki's turn\n        health_B -= A\n        health_D -= C\n"
    },
    {
        "number": 4312,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    takashi_health = A\n    aoki_health = C\n    while True:\n        if takashi_health <= 0:\n            return \"No\"\n        if aoki_health <= 0:\n            return \"Yes\"\n        takashi_health -= B\n        aoki_health -= D\n"
    },
    {
        "number": 4312,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    A, B, C, D = list(map(int, stdin.strip().split()))\n\n    # Determine winner\n    if A > C:\n        if B > D:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif C > A:\n        if D > B:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        if B > D:\n            return \"Yes\"\n        elif D > B:\n            return \"Yes\"\n        else:\n            return \"Draw\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    values = list(map(int, stdin.readline().strip().split()))\n    costs = list(map(int, stdin.readline().strip().split()))\n\n    # sort gems by value\n    sorted_gems = sorted(zip(values, costs), key=lambda x: x[0], reverse=True)\n\n    # initialize variables\n    x = 0\n    y = 0\n    for value, cost in sorted_gems:\n        if y + cost > x:\n            break\n        x += value\n        y += cost\n\n    # print result\n    return str(x - y)"
    },
    {
        "number": 4313,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    values = list(map(int, stdin.readline().strip().split()))\n    costs = list(map(int, stdin.readline().strip().split()))\n    \n    # sort gems by value in descending order\n    sorted_gems = sorted(zip(values, costs), key=lambda x: x[0], reverse=True)\n    \n    # calculate maximum possible value\n    max_value = 0\n    for i in range(n):\n        if sorted_gems[i][1] > max_value:\n            max_value = sorted_gems[i][1]\n        else:\n            break\n    \n    return str(max_value)\n\nprint(solution('''\n3\n10 2 5\n6 3 4\n''')) # output: 5"
    },
    {
        "number": 4313,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    values = list(map(int, stdin.readline().strip().split()))\n    costs = list(map(int, stdin.readline().strip().split()))\n\n    # Calculate maximum value\n    max_value = 0\n    for i in range(N):\n        max_value += values[i] - costs[i]\n\n    return str(max_value)"
    },
    {
        "number": 4313,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing input\n    N = int(stdin.readline())\n    V = list(map(int, stdin.readline().split()))\n    C = list(map(int, stdin.readline().split()))\n\n    # Sorting gems based on their value\n    V.sort(reverse=True)\n\n    # Finding maximum possible value\n    max_val = 0\n    for i in range(N):\n        max_val += V[i] - C[i]\n        if max_val > 0:\n            return str(max_val)\n\n    return \"0\""
    },
    {
        "number": 4313,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    N = int(stdin.readline().strip())\n    values = list(map(int, stdin.readline().strip().split()))\n    costs = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    max_x = 0\n    selected_gems = set()\n\n    # loop through all possible combinations of gems\n    for i in range(1 << N):\n        # check if current combination of gems is valid\n        valid = True\n        selected = 0\n        for j in range(N):\n            if i & (1 << j):\n                selected += 1\n                if selected > 2:\n                    valid = False\n                    break\n                if selected == 2:\n                    if values[j] + values[j-1] > max_x:\n                        max_x = values[j] + values[j-1]\n        if not valid:\n            continue\n\n        # calculate total value and cost\n        total_value = 0\n        total_cost = 0\n        for j in range(N):\n            if i & (1 << j):\n                total_value += values[j]\n                total_cost += costs[j]\n\n        # update max_x if necessary\n        if total_value - total_cost > max_x:\n            max_x = total_value - total_cost\n            selected_gems.clear()\n        if total_value - total_cost == max_x:\n            selected_gems.add(tuple(sorted(i)))\n\n    # print output\n    if max_x == 0:\n        return \"No solution exists.\"\n    else:\n        selected_gems = sorted(list(selected_gems))\n        return f\"The maximum possible value is {max_x}. The selected gems are {selected_gems}.\""
    },
    {
        "number": 4313,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    V = list(map(int, stdin.readline().strip().split()))\n    C = list(map(int, stdin.readline().strip().split()))\n    \n    V.sort()\n    \n    ans = -float('inf')\n    \n    for i in range(N):\n        if i + 1 == N:\n            ans = max(ans, V[i])\n        else:\n            ans = max(ans, V[i] - C[i])\n    \n    return str(ans)"
    },
    {
        "number": 4313,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    gems = list(map(int, stdin.readline().strip().split()))\n    costs = list(map(int, stdin.readline().strip().split()))\n    max_value = sum(gems) - sum(costs)\n    return str(max_value)"
    },
    {
        "number": 4313,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    values = list(map(int, stdin.readline().split()))\n    costs = list(map(int, stdin.readline().split()))\n\n    # Sort the gems by value in descending order\n    sorted_gems = sorted(zip(values, costs), key=lambda x: x[0], reverse=True)\n\n    # Initialize variables\n    max_value = 0\n    current_value = 0\n\n    # Loop through the sorted gems and add the value to the current value while subtracting the cost\n    for gem in sorted_gems:\n        current_value += gem[0]\n        current_value -= gem[1]\n        if current_value > max_value:\n            max_value = current_value\n\n    return str(max_value)"
    },
    {
        "number": 4313,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    values = list(map(int, lines[1].split()))\n    costs = list(map(int, lines[2].split()))\n\n    # compute max value\n    max_value = 0\n    for i in range(n):\n        value = values[i]\n        cost = costs[i]\n        if cost + sum(values[i+1:]) > max_value:\n            max_value = cost + sum(values[i+1:])\n\n    return str(max_value)"
    },
    {
        "number": 4313,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    values = list(map(int, stdin.readline().split()))\n    costs = list(map(int, stdin.readline().split()))\n\n    max_value = -1\n    for i in range(1 << N):\n        value = 0\n        cost = 0\n        for j in range(N):\n            if i & (1 << j):\n                value += values[j]\n                cost += costs[j]\n        if value - cost > max_value:\n            max_value = value - cost\n    return str(max_value)"
    },
    {
        "number": 4314,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.strip().split())\n    a = []\n    for i in range(h):\n        row = list(stdin.readline().strip())\n        a.append(row)\n    # find the black square\n    for i in range(h):\n        for j in range(w):\n            if a[i][j] == '#':\n                break\n        else:\n            continue\n        break\n    else:\n        return '#' * w + '\\n' * (h - 1)\n    # compress the grid\n    for i in range(h):\n        if all(a[i][j] == '.' for j in range(w)):\n            # remove the row\n            a[i] = []\n        else:\n            break\n    else:\n        return '\\n'.join([''.join(row) for row in a])\n    for j in range(w):\n        if all(a[i][j] == '.' for i in range(h)):\n            # remove the column\n            for i in range(h):\n                a[i].pop()\n        else:\n            break\n    return '\\n'.join([''.join(row) for row in a])\n\nstdin = \"\"\"\n4 4\n##.#\n....\n##.#\n.#.#\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"\n3 5\n.#.#.#\n.#.#.#\n.#.#.#\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 4314,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    H, W = map(int, stdin.readline().strip().split())\n    a = [list(stdin.readline().strip()) for _ in range(H)]\n\n    # Compress the grid\n    while True:\n        # Check for row compression\n        for i in range(H):\n            if all(a[i][j] == '#' for j in range(W)):\n                # Remove the row\n                a = a[:i] + a[i+1:]\n                H -= 1\n                break\n        else:\n            # Check for column compression\n            for j in range(W):\n                if all(a[i][j] == '#' for i in range(H)):\n                    # Remove the column\n                    for i in range(H):\n                        a[i] = a[i][:j] + a[i][j+1:]\n                    W -= 1\n                    break\n            else:\n                # No compression possible\n                break\n\n    # Print the final state of the grid\n    for i in range(H):\n        print(''.join(a[i]))\n    return ''"
    },
    {
        "number": 4314,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    h, w = list(map(int, lines[0].split()))\n    a = []\n    for line in lines[1:]:\n        a.append(list(line))\n    # find the first black square\n    for i in range(h):\n        for j in range(w):\n            if a[i][j] == '#':\n                black_i = i\n                black_j = j\n                break\n    # perform the operations\n    operations = []\n    for i in range(h):\n        row = a[i]\n        if all(c == '.' for c in row):\n            operations.append(('remove_row', i))\n    for j in range(w):\n        col = [a[i][j] for i in range(h)]\n        if all(c == '.' for c in col):\n            operations.append(('remove_col', j))\n    for op, arg in operations:\n        if op =='remove_row':\n            a.pop(arg)\n            h -= 1\n        elif op =='remove_col':\n            for i in range(h):\n                a[i].pop(arg)\n            w -= 1\n    # print the final state\n    output = []\n    for i in range(h):\n        row = ''.join(a[i])\n        output.append(row)\n    return '\\n'.join(output)"
    },
    {
        "number": 4314,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    H, W = map(int, stdin.readline().split())\n    a = [list(stdin.readline().strip()) for _ in range(H)]\n\n    # Find black square\n    black_row, black_col = None, None\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == '#':\n                black_row, black_col = i, j\n                break\n        if black_row is not None:\n            break\n\n    # Compress grid\n    while True:\n        # Check if any row or column has only white squares\n        has_white_row = False\n        has_white_col = False\n        for i in range(H):\n            if a[i] == ['.'] * W:\n                has_white_row = True\n                break\n        for j in range(W):\n            if [a[i][j] for i in range(H)] == ['.']:\n                has_white_col = True\n                break\n\n        # If no row or column has only white squares, break\n        if not has_white_row and not has_white_col:\n            break\n\n        # Remove row or column if it has only white squares\n        if has_white_row:\n            row = [i for i in range(H) if a[i]!= ['.'] * W][0]\n            a.pop(row)\n            for i in range(row):\n                a[i].pop(W-1)\n        if has_white_col:\n            col = [j for j in range(W) if [a[i][j] for i in range(H)]!= ['.']][0]\n            for i in range(H):\n                a[i].pop(col)\n\n    # Print final state of grid\n    for row in a:\n        print(''.join(row))\n\n    return ''"
    },
    {
        "number": 4314,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    h, w = map(int, lines[0].split())\n    matrix = []\n    for line in lines[1:]:\n        matrix.append(list(line))\n\n    # find the row or column with only white squares\n    row_has_white = any(all(c == '.' for c in row) for row in matrix)\n    col_has_white = any(all(row[j] == '.' for row in matrix) for j in range(w))\n\n    # compress the grid\n    while row_has_white or col_has_white:\n        if row_has_white:\n            row_index = next(i for i in range(h) if all(matrix[i][j] == '.' for j in range(w)))\n            for j in range(w):\n                matrix[row_index][j] = '.'\n            h -= 1\n        if col_has_white:\n            col_index = next(j for j in range(w) if all(matrix[i][j] == '.' for i in range(h)))\n            for i in range(h):\n                matrix[i][col_index] = '.'\n            w -= 1\n        row_has_white = any(all(c == '.' for c in row) for row in matrix)\n        col_has_white = any(all(row[j] == '.' for row in matrix) for j in range(w))\n\n    # construct the final matrix\n    result = []\n    for i in range(h):\n        result.append(''.join(matrix[i]))\n    return '\\n'.join(result)"
    },
    {
        "number": 4314,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.readline().strip().split())\n    a = []\n    for i in range(h):\n        a.append(list(stdin.readline().strip()))\n    removed_rows = []\n    removed_cols = []\n    # Remove rows\n    for i in range(h):\n        if all(a[i][j] == '.' for j in range(w)):\n            removed_rows.append(i)\n    for i in removed_rows[::-1]:\n        a.pop(i)\n    # Remove columns\n    for j in range(w):\n        if all(a[i][j] == '.' for i in range(h)):\n            removed_cols.append(j)\n    for j in removed_cols[::-1]:\n        for i in range(h):\n            a[i].pop(j)\n    return '\\n'.join([''.join(a[i]) for i in range(h)])"
    },
    {
        "number": 4314,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().strip().split())\n    a = [list(stdin.readline().strip()) for _ in range(H)]\n    num_black = sum([row.count('#') for row in a])\n    # print(a)\n    # print(num_black)\n\n    i = 0\n    while i < H:\n        row = a[i]\n        if all(x == '.' for x in row):\n            a.pop(i)\n            H -= 1\n        else:\n            i += 1\n\n    j = 0\n    while j < W:\n        col = [row[j] for row in a]\n        if all(x == '.' for x in col):\n            for row in a:\n                row.pop(j)\n            W -= 1\n        else:\n            j += 1\n\n    if num_black == 0:\n        # all squares are white\n        return '\\n'.join([''.join(row) for row in a])\n\n    # count the number of black squares in each row and column\n    num_black_rows = [sum([1 for x in row if x == '#']) for row in a]\n    num_black_cols = [sum([1 for row in a if row[j] == '#']) for j in range(W)]\n\n    # remove the row or column with the most black squares\n    max_row_idx = num_black_rows.index(max(num_black_rows))\n    if max_row_idx == 0:\n        # the first row has the most black squares, remove it\n        a.pop(0)\n        H -= 1\n    else:\n        # the last row has the most black squares, remove it\n        a.pop()\n        H -= 1\n\n    max_col_idx = num_black_cols.index(max(num_black_cols))\n    if max_col_idx == 0:\n        # the first column has the most black squares, remove it\n        for row in a:\n            row.pop(0)\n        W -= 1\n    else:\n        # the last column has the most black squares, remove it\n        for row in a:\n            row.pop()\n        W -= 1\n\n    return '\\n'.join([''.join(row) for row in a])"
    },
    {
        "number": 4314,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.readline().strip().split())\n    grid = [list(stdin.readline().strip()) for _ in range(h)]\n    black_found = False\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == '#':\n                black_found = True\n                break\n        if black_found:\n            break\n    if not black_found:\n        return '\\n'.join([''.join(row) for row in grid])\n    for i in range(h-1, -1, -1):\n        white_found = False\n        for j in range(w):\n            if grid[i][j] == '#':\n                white_found = True\n                break\n        if not white_found:\n            break\n    if i == -1:\n        return '\\n'.join([''.join(row) for row in grid])\n    if j < w-1:\n        for k in range(j+1, w):\n            if grid[i][k] == '#':\n                return solution('\\n'.join([row[:j] + row[k:] for row in grid]))\n    if i < h-1:\n        for k in range(i+1, h):\n            if grid[k][j] == '#':\n                return solution('\\n'.join([row[:i] + row[k+1:] for row in grid]))\n    return solution('\\n'.join([row[:i] + row[i+1:] for row in grid]))\n\nwith open('input.txt') as f:\n    input_str = f.read()\n\nprint(solution(input_str))"
    },
    {
        "number": 4314,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    h, w = map(int, stdin.readline().strip().split())\n    a = []\n    for i in range(h):\n        a.append(list(stdin.readline().strip()))\n\n    # compress grid\n    while True:\n        # find a row/column that consists only of white squares\n        row = None\n        col = None\n        for i in range(h):\n            if all(a[i][j] == '.' for j in range(w)):\n                row = i\n                break\n        for j in range(w):\n            if all(a[i][j] == '.' for i in range(h)):\n                col = j\n                break\n        if row is None and col is None:\n            break\n\n        # remove row/column and shift rows/columns to the left/up\n        if row is not None:\n            for i in range(row, h-1):\n                a[i] = a[i+1]\n            a = a[:-1]\n        else:\n            for j in range(col, w-1):\n                for i in range(h):\n                    a[i][j] = a[i][j+1]\n            for i in range(h):\n                a[i] = a[i][:-1]\n            a = [r[:-1] for r in a[:-1]]\n\n        # update h/w\n        h -= 1 if row is not None else 0\n        w -= 1 if col is None else 0\n\n    # print compressed grid\n    return '\\n'.join([''.join(r) for r in a])"
    },
    {
        "number": 4314,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().split())\n    a = [list(stdin.readline().strip()) for _ in range(H)]\n    \n    # find the first row or column with only white squares\n    for i in range(H):\n        if all(c == '.' for c in a[i]):\n            first_row = i\n            break\n    for j in range(W):\n        if all(a[i][j] == '.' for i in range(H)):\n            first_col = j\n            break\n    \n    # remove the first row or column and delete the space between the rows or columns\n    if first_row == 0:\n        a = [a[0][first_col:W]] + a[1:]\n    elif first_row == H-1:\n        a = a[:-1] + [a[-1][:first_col+1]]\n    else:\n        for i in range(first_row, H-1):\n            a[i] = a[i][first_col:W]\n        a[H-1] = a[H-1][:first_col+1]\n    a = [a[i][j] for i in range(len(a)) for j in range(len(a[i]))]\n    \n    # convert the list to a string\n    return '\\n'.join([''.join(a[i:i+W]) for i in range(0, len(a), W)])"
    },
    {
        "number": 4315,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R = float(stdin)\n    circumference = 2*3.14*R\n    return str(circumference)\n\nprint(solution(input())) # To handle input from stdin"
    },
    {
        "number": 4315,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin.strip())\n    circumference = 2 * 3.14159 * radius\n    return f\"{circumference:.16f}\"\n\ndef"
    },
    {
        "number": 4315,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read the radius of the circle\n    R = int(stdin.strip())\n\n    # Calculate the circumference of the circle\n    C = 2 * 3.14159 * R\n\n    # Format the circumference with 6 decimal places\n    circumference = \"{:.6f}\".format(C)\n\n    # Print the circumference\n    print(circumference)\n\n    return circumference\n"
    },
    {
        "number": 4315,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing input\n    R = int(stdin)\n    # Calculating circumference\n    C = 2 * 3.14159265 * R\n    # Formatting output\n    output = '{:.16f}'.format(C)\n    # Returning output\n    return output"
    },
    {
        "number": 4315,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.strip())\n    circumference = 2 * 3.141592653589793 * r\n    return str(circumference)"
    },
    {
        "number": 4315,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    circumference = 2 * 3.14 * R\n    return str(circumference)\n\nprint(solution(input()))"
    },
    {
        "number": 4315,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin.strip())\n    circumference = 2 * 3.14159265359 * R\n    return str(circumference)"
    },
    {
        "number": 4315,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    circumference = 2 * 3.141592653589793 * r\n    return str(circumference)"
    },
    {
        "number": 4315,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    circumference = 2 * 3.14 * R\n    return str(circumference)\n\nstdin = input()\nprint(solution(stdin))\n\nWe can implement this solution in Python by defining a function `solution` that takes the input as a string and returns the circumference of the circle as a string. \n\nThe circumference of the circle can be calculated using the formula `2 * 3.14 * R`, where `R` is the radius of the circle. We first convert the input string `stdin` to an integer `R` using the `int` function. \n\nNext, we calculate the circumference and store it in the variable `circumference`. We then convert `circumference` to a string using the `str` function and return it. \n\nFinally, we read the input from Standard Input using the `input` function and pass it to our `solution` function using the `stdin` parameter. We print the output of the function using the `print` function."
    },
    {
        "number": 4315,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    circumference = 2 * 3.14 * R\n    return f'{circumference:.12f}'"
    },
    {
        "number": 4316,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    freq = {}\n    for char in S:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    count = 0\n    for val in freq.values():\n        if val == 2:\n            count += 1\n            if count > 2:\n                return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4316,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input string\n    s = stdin.strip()\n\n    # create a set to store unique characters\n    char_set = set(s)\n\n    # check if there are exactly two kinds of characters that appear twice in s\n    if len(char_set) == 2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    chars = set(s)\n    if len(chars)!= 2:\n        return \"No\"\n    count = 0\n    for c in chars:\n        count += s.count(c)\n    if count!= 8:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4316,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s.count(s[0]) == 2 and s.count(s[1]) == 2 and s.count(s[2]) == 2 and s.count(s[3]) == 2:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    char_dict = {}\n    for char in S:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    count_1 = 0\n    count_2 = 0\n    for value in char_dict.values():\n        if value == 2:\n            count_2 += 1\n        elif value == 1:\n            count_1 += 1\n    if count_1 > 0 and count_2 > 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input string\n    S = stdin.strip()\n\n    # initialize a dictionary to count the occurrences of each character in S\n    char_count = {}\n    for char in S:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # check if S consists of exactly two kinds of characters which both appear twice in S\n    two_kinds = False\n    for count in char_count.values():\n        if count == 2:\n            two_kinds = True\n        elif count == 4:\n            two_kinds = False\n            break\n\n    if two_kinds:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(set(s)) == 2:\n        for char in s:\n            if s.count(char) == 2:\n                return \"Yes\"\n        return \"No\"\n    else:\n        return \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into a list of characters\n    chars = list(stdin.strip())\n    # Create a dictionary to store character counts\n    counts = {}\n    for char in chars:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    # Check if there are exactly two kinds of characters\n    if len(counts)!= 2:\n        return \"No\"\n    # Check if each character appears exactly twice\n    for char in counts:\n        if counts[char]!= 2:\n            return \"No\"\n    # If both conditions are satisfied, return \"Yes\"\n    return \"Yes\""
    },
    {
        "number": 4316,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    count_dict = {}\n    for c in s:\n        count_dict[c] = count_dict.get(c, 0) + 1\n    if len(count_dict)!= 2:\n        return \"No\"\n    for k, v in count_dict.items():\n        if v!= 2:\n            return \"No\"\n    return \"Yes\"\n\nprint(solution(input()))"
    },
    {
        "number": 4316,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes input from standard input in the format of a 4-character string and determines if it\n    consists of exactly two kinds of characters which both appear twice in S.\n\n    :param stdin: str, input string\n    :return: str, output string\n    \"\"\"\n\n    # split the input string into two character strings\n    first_char = stdin[0]\n    second_char = stdin[1]\n    third_char = stdin[2]\n    fourth_char = stdin[3]\n\n    # initialize a dictionary to store the count of each character in the input string\n    char_count = {}\n\n    # count the frequency of each character in the input string\n    char_count[first_char] = stdin.count(first_char)\n    char_count[second_char] = stdin.count(second_char)\n    char_count[third_char] = stdin.count(third_char)\n    char_count[fourth_char] = stdin.count(fourth_char)\n\n    # check if the dictionary contains exactly two characters with a count of 2\n    if len(set(char_count.values())) == 2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4317,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    largest = max(a + b, a - b, a * b)\n    return str(largest)"
    },
    {
        "number": 4317,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    print(max(A + B, A - B, A * B))\n    return \"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    A, B = map(int, stdin.strip().split())\n\n    # Calculate and store results\n    addition = A + B\n    subtraction = A - B\n    multiplication = A * B\n\n    # Find largest result\n    largest = max(addition, subtraction, multiplication)\n\n    # Return output\n    return str(largest)"
    },
    {
        "number": 4317,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    A, B = map(int, stdin.split())\n\n    # Calculate the maximum among A + B, A - B, and A * B\n    max_num = max(A + B, A - B, A * B)\n\n    # Return the maximum number as a string\n    return str(max_num)"
    },
    {
        "number": 4317,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return max(A + B, A - B, A * B)"
    },
    {
        "number": 4317,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return str(max(a + b, a - b, a * b))"
    },
    {
        "number": 4317,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = max(A+B, A-B, A*B)\n    return str(result)"
    },
    {
        "number": 4317,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(max(A + B, A - B, A * B))"
    },
    {
        "number": 4317,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    a, b = map(int, stdin.strip().split())\n\n    # compute the maximum value\n    max_val = max(a + b, a - b, a * b)\n\n    # print the maximum value\n    print(max_val)\n\n    # return the output as a string\n    return str(max_val)"
    },
    {
        "number": 4317,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    largest = max(a + b, a - b, a * b)\n    return str(largest)"
    },
    {
        "number": 4318,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    mountains = list(map(int, stdin.readline().split()))\n    \n    # Initialize count of inns with ocean view\n    count = 0\n    \n    # Check each mountain from east to west\n    for i in range(N):\n        # Check if the mountain has an inn with ocean view\n        if i == 0 or all(mountains[j] <= mountains[i] for j in range(i)):\n            count += 1\n    \n    # Output result\n    return str(count)"
    },
    {
        "number": 4318,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n\n    count = 0\n    for i in range(1, n):\n        if all(heights[j] <= heights[i] for j in range(i)):\n            count += 1\n\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4318,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N = int(stdin.readline())\n    heights = list(map(int, stdin.readline().split()))\n\n    # Find the number of inns that can see the ocean\n    count = 0\n    for i in range(1, N):\n        if all(heights[j] <= heights[i] for j in range(i)):\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4318,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    h = [int(x) for x in stdin.readline().strip().split()]\n    count = 0\n    for i in range(1, n):\n        if all(h[j] < h[i] for j in range(i)):\n            count += 1\n    return str(count)"
    },
    {
        "number": 4318,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    heights = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(1, N):\n        if heights[i] >= heights[0]:\n            count += 1\n    return count\n\nstdin = \"4\\n6 5 6 8\"\nprint(solution(stdin))"
    },
    {
        "number": 4318,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline())\n    heights = list(map(int, stdin.readline().split()))\n    \n    # initialize variables\n    count = 0\n    for i in range(1, N):\n        # check if the inn at the top of the mountain can see the ocean\n        can_see_ocean = True\n        for j in range(i):\n            if heights[j] > heights[i]:\n                can_see_ocean = False\n                break\n        # if the inn at the top of the mountain can see the ocean, increment count\n        if can_see_ocean:\n            count += 1\n    \n    # print result\n    print(count)\n    \n    # return result\n    return \"\""
    },
    {
        "number": 4318,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.split()[0])\n    H = list(map(int, stdin.split()[1:]))\n\n    # count number of inns that can see the ocean\n    count = 0\n    for i in range(2, N+1):\n        if all(H[j] <= H[i] for j in range(i)):\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4318,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n    inns = 0\n    i = 0\n    while i < n:\n        if all(heights[j] <= heights[i] for j in range(i)):\n            inns += 1\n        i += 1\n    return str(inns)"
    },
    {
        "number": 4318,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n\n    # Counting number of inns from which you can see the ocean\n    count = 0\n    for i in range(n-1):\n        if all(heights[j] <= heights[i] for j in range(i+1)):\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4318,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    mountains = list(map(int, stdin.readline().split()))\n\n    # Initialize count to 0\n    count = 0\n\n    # Check for each inn from the west\n    for i in range(N-1):\n        # If all mountains to the west of the inn are higher than the inn, then count the inn\n        if all(mountains[j] > mountains[i] for j in range(i)):\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4319,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    seq = list(map(int, stdin.readline().strip().split()))\n    t = 1\n    steps = [seq[0]]\n    for i in range(1, n):\n        if seq[i] == steps[-1]:\n            continue\n        t += 1\n        steps.append(seq[i])\n    print(t)\n    print(*steps)\n    return \"\""
    },
    {
        "number": 4319,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    sequence = list(map(int, stdin.readline().strip().split()))\n    \n    # Find the number of stairways\n    t = 1\n    current_steps = 1\n    for i in range(1, n):\n        if sequence[i] > current_steps:\n            t += 1\n            current_steps = sequence[i]\n        else:\n            current_steps = sequence[i]\n    \n    # Find the number of steps in each stairway\n    stairway_steps = []\n    current_steps = 1\n    for i in range(n):\n        if i == 0:\n            stairway_steps.append(sequence[i])\n            current_steps = sequence[i]\n        elif sequence[i] > current_steps:\n            stairway_steps.append(sequence[i])\n            current_steps = sequence[i]\n        else:\n            current_steps = sequence[i]\n    \n    # Output result\n    stdout = f\"{t}\\n\"\n    for step in stairway_steps:\n        stdout += f\"{step} \"\n    return stdout.strip()"
    },
    {
        "number": 4319,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    \n    steps = 0\n    stairways = 1\n    current_stairway_steps = 0\n    current_stairway_numbers = []\n    \n    for i in range(n):\n        if i == 0 or a[i]!= a[i-1]:\n            current_stairway_numbers.append(a[i])\n            current_stairway_steps += 1\n        else:\n            stairways += 1\n            steps += current_stairway_steps\n            current_stairway_steps = 1\n            current_stairway_numbers = [a[i]]\n    \n    steps += current_stairway_steps\n    \n    return f\"{stairways}\\n{' '.join(str(x) for x in current_stairway_numbers)}\"\n\nwith open(\"input.txt\", \"r\") as f:\n    stdin = f.read()\n    result = solution(stdin)\n    print(result)"
    },
    {
        "number": 4319,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Little girl Tanya climbs the stairs inside a multi-storey building. Every time Tanya climbs a stairway, she starts\n    counting steps from 1 to the number of steps in this stairway. She speaks every number aloud.\n\n    You are given all the numbers pronounced by Tanya. How many stairways did she climb? Also, output the number of steps in each stairway.\n\n    The given sequence will be a valid sequence that Tanya could have pronounced when climbing one or more stairways.\n\n    Args:\n    stdin (str): The input string as provided in the problem statement.\n\n    Returns:\n    str: The output string as per the requirements in the problem statement.\n    \"\"\"\n\n    # Read the input\n    n = int(stdin.split()[0])\n    sequence = list(map(int, stdin.split()[1:]))\n\n    # Find the number of stairways and the number of steps in each stairway\n    steps = [1]\n    for i in range(1, n):\n        if sequence[i] > steps[-1]:\n            steps.append(sequence[i])\n        else:\n            steps[-1] = sequence[i]\n    stairways = len(steps)\n    steps = [steps.count(i) for i in range(1, stairways + 1)]\n\n    # Print the output\n    return f\"{stairways}\\n{' '.join(map(str, steps))}\""
    },
    {
        "number": 4319,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    t = 1\n    i = 1\n    while i < n:\n        if a[i] == a[i-1]:\n            i += 1\n        else:\n            t += 1\n            i += 1\n    ans = [0] * t\n    i = 0\n    j = 0\n    while i < n:\n        if a[i] == ans[j]:\n            i += 1\n        else:\n            ans[j+1] = a[i]\n            j += 1\n    print(t)\n    print(' '.join(map(str, ans)))\n    return \"\"\n\nstdin = \"\"\"\n7\n1 2 3 1 2 3 4\n\"\"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4319,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    nums = [int(x) for x in stdin.split()[1:]]\n    steps = [nums[0]]\n    for i in range(1, n):\n        if nums[i] > steps[-1]:\n            steps.append(nums[i])\n    t = len(steps)\n    print(t)\n    print(\" \".join(str(x) for x in steps))\n    return f\"{t}\\n{' '.join(str(x) for x in steps)}\""
    },
    {
        "number": 4319,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # Find the number of stairways\n    t = 1\n    stair = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            stair += 1\n        else:\n            t = max(t, stair)\n            stair = 1\n    t = max(t, stair)\n    \n    # Find the number of steps in each stairway\n    step = []\n    stair = 0\n    for i in range(n):\n        if i == n-1 or a[i] > a[i+1]:\n            step.append(i - stair + 1)\n            stair = i + 1\n    \n    # Print the output\n    print(t)\n    print(*step)\n    \n    return \"\""
    },
    {
        "number": 4319,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    steps = [0] * len(nums)\n    for i in range(len(nums)):\n        steps[i] = 1\n    stairways = 1\n    curr_stair = 1\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i-1]:\n            curr_stair += 1\n            steps[i] = curr_stair\n        else:\n            stairways += 1\n            curr_stair = 1\n            steps[i] = curr_stair\n    return '\\n'.join(map(str, [stairways] + steps))"
    },
    {
        "number": 4319,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    stairways = stdin.split('\\n')[1].split(' ')\n    stairways = [int(i) for i in stairways]\n\n    count = 0\n    step_count = []\n    step = 1\n    for i in range(1, n):\n        if stairways[i] == step + 1:\n            step += 1\n        else:\n            count += 1\n            step_count.append(step)\n            step = 1\n\n    step_count.append(step)\n    count += 1\n\n    return str(count) + '\\n' +''.join([str(i) for i in step_count])\n\nprint(solution(stdin=\"7\\n1 2 3 1 2 3 4\")) # Output: 2\\n3 4 \nprint(solution(stdin=\"4\\n1 1 1 1\")) # Output: 4\\n1 1 1 1 \nprint(solution(stdin=\"5\\n1 2 3 4 5\")) # Output: 1\\n5 \nprint(solution(stdin=\"5\\n1 2 1 2 1\")) # Output: 3\\n2 2 1"
    },
    {
        "number": 4319,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n\n    # count stairways and steps\n    curr_steps = 0\n    stairway_count = 0\n    stairway_lengths = []\n    for num in nums:\n        if num > curr_steps:\n            stairway_count += 1\n            stairway_lengths.append(num)\n            curr_steps = num\n        else:\n            curr_steps += num\n\n    # output stairways and steps\n    print(stairway_count)\n    print(' '.join(map(str, stairway_lengths)))"
    },
    {
        "number": 4320,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        k = 1\n        x = 0\n        while x + 2**k*x <= n:\n            x += 2**k*x\n            k += 1\n        x -= 2**k*x\n        print(x)\n    return \"\"\n\nstdin = \"7\\n3\\n6\\n7\\n21\\n28\\n999999999\\n999999984\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4320,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        x = 1\n        k = 1\n        while True:\n            if (x + (2**k - 1) * x) > n:\n                break\n            k += 1\n            x += (2**k - 1) * x - x\n        print(x)\n\nstdin = \"\"\"\n7\n3\n6\n7\n21\n28\n999999999\n999999984\n\"\"\"\n\nsolution(stdin)"
    },
    {
        "number": 4320,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    result = []\n    for i in range(1, t+1):\n        n = int(lines[i])\n        x = 1\n        k = 2\n        while (x+2**k-1) < n:\n            x = x + 2**(k-1)\n            k = k + 1\n        result.append(x)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4320,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n = int(stdin.split()[1])\n        k = 1\n        x = n // 2\n        while x**k < n:\n            k += 1\n        k -= 1\n        x = n - (2**(k-1)) * x\n        print(x)\n    return \"\""
    },
    {
        "number": 4320,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        k = 1\n        x = 0\n        while True:\n            if sum([x + 2**i*x for i in range(k)]) == n:\n                break\n            k += 1\n            x += 2**(k-1)*x\n        print(x)\n    return \"\""
    },
    {
        "number": 4320,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        x = 1\n        while x <= n:\n            k = 1\n            while (2**k)*x <= n:\n                k += 1\n            x += 1\n            if (2**k)*x == n:\n                return str(x)\n    return \"No solution\""
    },
    {
        "number": 4320,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    # binary search for k\n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) // 2\n        s = sum(mid * 2**(i-1) for i in range(1, 1001))\n        if s == n:\n            return str(mid)\n        elif s < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # if k does not exist, return the minimum k that satisfies n\n    k = 2\n    s = sum(k * 2**(i-1) for i in range(1, 1001))\n    while s < n:\n        k += 1\n        s = sum(k * 2**(i-1) for i in range(1, 1001))\n    return str(k)"
    },
    {
        "number": 4320,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n = int(stdin.split()[1])\n        x = int(n/2)\n        k = 1\n        while x + 2**k*x < n:\n            k += 1\n        print(x)\n    return \"\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        k = 1\n        x = 1\n        while k <= n:\n            x += 2**(k-1)\n            k += 1\n        k -= 2\n        while x > n:\n            x -= 2**(k-1)\n            k -= 1\n        print(x)"
    },
    {
        "number": 4320,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        k = 1\n        while (2**k)*k <= n:\n            k += 1\n        k -= 1\n        x = (n - (2**(k-1))*k) // k\n        print(x)"
    },
    {
        "number": 4321,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split()))\n    for _ in range(k):\n        if n % 10!= 0:\n            n -= 1\n        else:\n            n //= 10\n    return str(n)"
    },
    {
        "number": 4321,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    num = n\n    for i in range(k):\n        digit = num % 10\n        if digit == 0:\n            num //= 10\n        else:\n            num -= 1\n    print(num)"
    },
    {
        "number": 4321,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    result = n\n    for _ in range(k):\n        if result % 10!= 0:\n            result -= 1\n        else:\n            result //= 10\n    return str(result)\n"
    },
    {
        "number": 4321,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    num = n\n    for i in range(k):\n        if num == 0:\n            break\n        digit = num % 10\n        if digit!= 0:\n            num = num - 1\n        else:\n            num //= 10\n    return num"
    },
    {
        "number": 4321,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(k):\n        if n % 10!= 0:\n            n -= 1\n        else:\n            n //= 10\n    print(n)\n"
    },
    {
        "number": 4321,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for _ in range(k):\n        if n % 10!= 0:\n            n -= 1\n        else:\n            n //= 10\n    return str(n)\n\nprint(solution(\"512 4\")) # 50\nprint(solution(\"1000000000 9\")) # 1"
    },
    {
        "number": 4321,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    for i in range(k):\n        if n % 10!= 0:\n            n -= 1\n        else:\n            n //= 10\n    return n\n\nprint(solution(\"512 4\"))  # Output: 50"
    },
    {
        "number": 4321,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    res = n\n    for i in range(k):\n        if res % 10!= 0:\n            res -= 1\n        else:\n            res //= 10\n    return str(res)\n\nstdin = \"512 4\"\nprint(solution(stdin)) # output: 50\n\nstdin = \"1000000000 9\"\nprint(solution(stdin)) # output: 1"
    },
    {
        "number": 4321,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    num = n\n    for i in range(k):\n        if num % 10!= 0:\n            num -= 1\n        else:\n            num //= 10\n    print(num)"
    },
    {
        "number": 4321,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(k):\n        if n % 10!= 0:\n            n -= 1\n        else:\n            n //= 10\n    print(n)\n    return \"\""
    },
    {
        "number": 4322,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    a.sort()\n    k = 1\n    res = [a[0]]\n    for i in range(1, n):\n        if a[i] - a[i-1] <= 1:\n            res.append(a[i])\n        else:\n            k += 1\n            res.append(a[i])\n    if len(res) == n:\n        k -= 1\n        res.pop()\n    res = res[:k]\n    return f\"{k}\\n{' '.join(map(str, res))}\""
    },
    {
        "number": 4322,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    res = []\n    for i in range(n):\n        res.append(a.pop(a.index(max(a))))\n\n    k = len(res)\n    for i in range(k):\n        res.append(a[i])\n\n    return f\"{k}\\n{' '.join(map(str, res))}\""
    },
    {
        "number": 4322,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    k = n\n    res = a.copy()\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(a[i] - a[j]) > 1:\n                k -= 1\n                if k == 2:\n                    res = [a[i], a[i], a[j]]\n                else:\n                    res[k-2] = a[i]\n                    res[k-1] = a[j]\n                a[i], a[j] = a[j], a[i]\n                break\n        else:\n            continue\n        break\n    return k,''.join(map(str, res))"
    },
    {
        "number": 4322,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    max_k = 0\n    res = []\n    for k in range(1, n):\n        for i in range(n - k):\n            diff = abs(a[i] - a[i + k])\n            if diff > 1:\n                break\n        else:\n            if k > max_k:\n                max_k = k\n                res = a[i:i+k]\n    print(max_k)\n    print(\" \".join(map(str, res)))\n    return \"\""
    },
    {
        "number": 4322,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    # sort the heights in ascending order\n    a.sort()\n    \n    # initialize the maximum number of people in a balanced circle\n    max_k = 1\n    \n    # initialize the index of the maximum number of people in a balanced circle\n    max_index = 0\n    \n    # loop over all possible values of k\n    for k in range(2, n + 1):\n        # compute the sum of the absolute differences between adjacent heights\n        diff_sum = sum([abs(a[i] - a[i-1]) for i in range(1, k)])\n        \n        # if the sum is less than or equal to 1, then we have found a balanced circle\n        if diff_sum <= 1:\n            max_k = k\n            max_index = a.index(a[k-1])\n            break\n    \n    # print the number of people in the maximum balanced circle\n    print(max_k)\n    \n    # print the heights of the chosen people in the maximum balanced circle\n    print(*a[max_index:max_index+max_k])\n    \n    return \"\""
    },
    {
        "number": 4322,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    if n == 1:\n        return \"1\\n\" + str(a[0])\n\n    max_height = max(a)\n    max_height_index = a.index(max_height)\n\n    if n == 2:\n        return \"2\\n\" + \" \".join(map(str, [max_height, a[(max_height_index + 1) % n]]))\n\n    # Choose the two tallest people and add them to the circle\n    circle = [max_height, a[(max_height_index + 1) % n]]\n    a[max_height_index] = -1\n    a[(max_height_index + 1) % n] = -1\n    n -= 2\n\n    while n > 0:\n        max_height = max(a)\n        max_height_index = a.index(max_height)\n        circle.append(max_height)\n        a[max_height_index] = -1\n        n -= 1\n\n    return str(len(circle)) + \"\\n\" + \" \".join(map(str, circle))"
    },
    {
        "number": 4322,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    max_k = 0\n    max_circle = []\n    for k in range(2, n+1):\n        for i in range(n):\n            circle = a[i:i+k]\n            circle_heights = set(circle)\n            if len(circle_heights) == k:\n                height_diff = [abs(circle[i] - circle[i+1]) for i in range(k-1)]\n                if all(diff <= 1 for diff in height_diff):\n                    if k > max_k:\n                        max_k = k\n                        max_circle = circle\n    return f\"{max_k}\\n{' '.join(map(str, max_circle))}\""
    },
    {
        "number": 4322,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    k = n // 2\n    res = a[:k]\n    if n % 2 == 1:\n        res.append(a[k])\n    for i in range(k):\n        res.append(a[-i-1])\n    return k, res\n\nprint(solution('7\\n4 3 5 1 2 2 1\\n')) # Output: (5, [2, 1, 1, 2, 3])\nprint(solution('5\\n3 7 5 1 5\\n')) # Output: (2, [5, 5])\nprint(solution('3\\n5 1 4\\n')) # Output: (2, [4, 5])\nprint(solution('7\\n2 2 3 2 1 2 2\\n')) # Output: (7, [1, 2, 2, 2, 2, 3, 2])<|im_sep|>"
    },
    {
        "number": 4322,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    dp = [[False] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = True\n    for k in range(2, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n            if k == 2:\n                dp[i][j] = abs(a[i] - a[j]) <= 1\n            else:\n                for m in range(i, j):\n                    if dp[i][m] and dp[m + 1][j] and abs(a[m] - a[j]) <= 1:\n                        dp[i][j] = True\n                        break\n    ans = 0\n    for i in range(n):\n        if dp[0][i]:\n            ans = i + 1\n            break\n    res = []\n    for i in range(ans):\n        for j in range(ans - i - 1, ans):\n            if dp[i][j]:\n                res.append(a[j])\n                break\n    return str(ans) + \"\\n\" + \" \".join(map(str, res))"
    },
    {
        "number": 4322,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    res = [a[0]]\n    k = 1\n    for i in range(1, n):\n        if abs(a[i] - res[-1]) <= 1:\n            continue\n        res.append(a[i])\n        k += 1\n    if k == 1:\n        res = [a[0], a[0]]\n    print(k)\n    print(*res)"
    },
    {
        "number": 4323,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    songs = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        songs.append((a, b))\n    songs.sort(key=lambda x: x[0])\n    total_size = sum(s[0] for s in songs)\n    if total_size > m:\n        return \"-1\"\n    i = 0\n    j = n - 1\n    count = 0\n    while i <= j:\n        if total_size + songs[j][1] <= m:\n            count += 1\n            total_size += songs[j][1]\n            i += 1\n            j -= 1\n        else:\n            j -= 1\n    return count\n\nprint(solution(input()))"
    },
    {
        "number": 4323,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    songs = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        songs.append((a, b))\n    \n    songs.sort(reverse=True)\n    size = 0\n    count = 0\n    for a, b in songs:\n        if size + b <= m:\n            size += b\n            count += 1\n        else:\n            break\n    \n    if size!= sum(b for a, b in songs):\n        return \"-1\"\n    return str(count)"
    },
    {
        "number": 4323,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    songs = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        songs.append((a, b))\n\n    songs.sort(key=lambda x: x[0])\n\n    # binary search to find the minimum number of songs to compress\n    left, right = 0, n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if sum(songs[i][1] for i in range(mid+1)) <= m:\n            left = mid + 1\n        else:\n            right = mid\n    if sum(songs[i][0] for i in range(left)) <= m:\n        return str(left)\n    else:\n        return \"-1\""
    },
    {
        "number": 4323,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    songs = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        songs.append((a, b))\n    songs.sort(key=lambda x: x[0])\n    total_size = sum(s[0] for s in songs)\n    if total_size > m:\n        return \"-1\"\n    i = 0\n    count = 0\n    while i < n:\n        if songs[i][0] < songs[i][1]:\n            count += 1\n            total_size -= songs[i][0]\n            total_size += songs[i][1]\n        else:\n            total_size -= songs[i][0]\n        if total_size > m:\n            return \"-1\"\n        i += 1\n    return count"
    },
    {
        "number": 4323,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    songs = []\n    for i in range(n):\n        a, b = map(int, stdin.strip().split())\n        songs.append((a, b))\n    songs.sort(key=lambda x: x[0])\n    i = 0\n    j = n - 1\n    count = 0\n    total = 0\n    while i <= j:\n        if songs[i][0] + songs[j][0] <= m:\n            total += songs[i][1]\n            i += 1\n            j -= 1\n        elif songs[i][1] < songs[j][1]:\n            total += songs[i][1]\n            i += 1\n        else:\n            total += songs[j][1]\n            j -= 1\n        count += 1\n    if total > m:\n        return \"-1\"\n    return str(count)"
    },
    {
        "number": 4323,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    songs = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        songs.append((a, b))\n    songs.sort(reverse=True, key=lambda x: x[1])\n    used_size = 0\n    count = 0\n    for i, (a, b) in enumerate(songs):\n        if a <= m:\n            count += 1\n            used_size += a\n            if used_size > m:\n                return \"-1\"\n        else:\n            if used_size + a - b > m:\n                return \"-1\"\n            count += 1\n            used_size = 0\n    return count"
    },
    {
        "number": 4323,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    songs = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    \n    songs.sort(key=lambda x: x[1])\n    # sort songs by decreasing order of compressed size\n    \n    curr_size = 0\n    curr_songs = 0\n    for i in range(n):\n        size, compressed_size = songs[i]\n        if curr_size + compressed_size > m:\n            curr_songs -= 1\n            curr_size -= size\n            if curr_songs < 0:\n                return \"-1\"\n        else:\n            curr_songs += 1\n            curr_size += compressed_size\n    \n    return curr_songs"
    },
    {
        "number": 4323,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    songs = list(map(int, stdin.split()))\n    \n    # compress all songs and calculate total size\n    compressed_songs = [songs[i][1] for i in range(n)]\n    total_size = sum(compressed_songs)\n    \n    # if sum of compressed songs is greater than flash drive capacity, return -1\n    if total_size > m:\n        return \"-1\"\n    \n    # find minimum number of songs to compress\n    current_sum = 0\n    count = 0\n    for i in range(n):\n        if current_sum + compressed_songs[i] > m:\n            count += 1\n            current_sum = compressed_songs[i]\n        else:\n            current_sum += compressed_songs[i]\n    \n    # if count is equal to n, it is impossible to compress all songs\n    if count == n:\n        return \"-1\"\n    \n    # return count\n    return str(count)"
    },
    {
        "number": 4323,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    songs = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        songs.append((a, b))\n    songs.sort(key=lambda x: x[1])\n    res = []\n    i = 0\n    while i < n and songs[i][1] > 0:\n        res.append(songs[i][0])\n        songs[i] = (songs[i][0], songs[i][1] - 1)\n        i += 1\n    while i < n and sum(s[0] for s in songs[:i]) <= m:\n        res.append(songs[i][0])\n        songs[i] = (songs[i][0], songs[i][1] - 1)\n        i += 1\n    if i == n and sum(s[0] for s in songs[:n]) <= m:\n        return str(n)\n    else:\n        return \"-1\"\n\ndef"
    },
    {
        "number": 4323,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    songs = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        songs.append((a, b))\n\n    songs.sort(key=lambda x: x[1])\n    dp = [0] * (m+1)\n    for i in range(n):\n        for j in range(m, -1, -1):\n            if dp[j] == 0:\n                continue\n            if j - songs[i][1] >= 0 and dp[j-songs[i][1]] + 1 > dp[j]:\n                dp[j] = dp[j-songs[i][1]] + 1\n\n    if dp[m] == 0:\n        return \"-1\"\n\n    return str(dp[m])"
    },
    {
        "number": 4324,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split('\\n')\n    for i in range(1, len(cases)):\n        n, a, b = map(int, cases[i].split())\n        if b > a:\n            return \"impossible\"\n        alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        substrings = [alphabet[j:j+a] for j in range(n-a+1)]\n        counts = [set(substrings[j]) for j in range(len(substrings))]\n        for j in range(len(counts)):\n            if len(counts[j]) < b:\n                return \"impossible\"\n        answer = \"\"\n        for j in range(len(substrings)):\n            count = 0\n            while True:\n                if len(counts[j]) == b:\n                    break\n                count += 1\n                counts[j].remove(substrings[j][count])\n            answer += substrings[j][:count+1]\n        print(answer)\n"
    },
    {
        "number": 4324,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n, a, b = map(int, stdin.readline().split())\n        if a == 1 and b == 1:\n            print('a' * n)\n        else:\n            s = []\n            for j in range(26):\n                s.append(chr(j + ord('a')))\n            for j in range(n - a + 1):\n                s_j = s[:b]\n                for k in range(b, a):\n                    s_j = [s_j[x] for x in range(b) if s_j[x]!= s[k]]\n                    if len(s_j) < b:\n                        s_j = s[:b]\n                s = s_j\n            s = ''.join(s)\n            print(s)"
    },
    {
        "number": 4324,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.readline().split())\n    if a == 1:\n        return \"a\" * n\n    if b == 1:\n        return \"a\" * n\n    if a == 2:\n        return \"ab\" * (n // 2)\n    if b == 2:\n        return \"aa\" * (n // 2)\n    if a == n:\n        return \"abcdefghijklmnopqrstuvwxyz\"[:n]\n    if b == 1 or b == 26:\n        letters = \"abcdefghijklmnopqrstuvwxyz\"\n        s = \"\"\n        for i in range(a):\n            s += letters[i % 26]\n        return s * (n // a)\n    from collections import Counter\n    from itertools import combinations_with_replacement\n    from random import choice\n    # generate all possible substrings of length a\n    substrings = set()\n    for i in range(n-a+1):\n        substrings.add(stdin[i:i+a])\n    # generate all combinations of substrings of length a with b distinct letters\n    valid_combinations = set()\n    for c in combinations_with_replacement(substrings, b):\n        if len(set().union(*c)) == b:\n            valid_combinations.add(\"\".join(c))\n    # randomly choose a valid combination\n    if len(valid_combinations) == 0:\n        raise ValueError(\"No valid combination found\")\n    return choice(list(valid_combinations))"
    },
    {
        "number": 4324,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    s = ''.join(chr(ord('a') + i) for i in range(26))\n    res = []\n    for i in range(n // a):\n        sub = s[i*a:i*a+a]\n        count = 0\n        distinct = set(sub)\n        if len(distinct) == b:\n            res.append(sub)\n        for j in range(i*a+a, n, a):\n            sub = s[j:j+a]\n            count = 0\n            distinct = set(sub)\n            if len(distinct) == b:\n                res.append(sub)\n    return ''.join(res)\n\nprint(solution(\"4\\n7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\"))"
    },
    {
        "number": 4324,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split()[0])\n    for i in range(test_cases):\n        n, a, b = map(int, stdin.readline().strip().split())\n        s = ''.join(random.choices(string.ascii_lowercase, k=n))\n        substrings = [s[j:j+a] for j in range(n-a+1)]\n        for substring in substrings:\n            if len(set(substring))!= a:\n                s = random.sample(s, n)\n                break\n        else:\n            continue\n        print(s)"
    },
    {
        "number": 4324,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n, a, b = map(int, stdin.readline().split())\n        if n < a:\n            print(\"Invalid input\")\n            continue\n        if b > min(26, a):\n            print(\"Invalid input\")\n            continue\n        # construct a string of length n\n        s = \"abcdefghijklmnopqrstuvwxyz\"\n        s = s[:n]\n        # shuffle the string randomly\n        import random\n        s = ''.join(random.sample(s, n))\n        # generate substrings of length a with exactly b distinct letters\n        for i in range(n - a + 1):\n            substring = s[i:i+a]\n            if len(set(substring))!= b:\n                # replace the first non-distinct letter with a different letter\n                for j in range(len(substring)):\n                    if substring[j] not in set(substring[:j]) and substring[j]!= 'a':\n                        substring = substring[:j] + 'a' + substring[j+1:]\n                        break\n                # if no valid substring found, replace the first letter with 'a'\n                if len(set(substring))!= b:\n                    substring = 'a' + substring[1:]\n            s = s[:i] + substring + s[i+a:]\n        print(s)\n    return s"
    },
    {
        "number": 4324,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given three positive integers n, a, and b, construct a string s of length n consisting of lowercase Latin letters such that each substring of length a has exactly b distinct letters.\n    \"\"\"\n    t = int(stdin.readline())\n\n    for _ in range(t):\n        n, a, b = map(int, stdin.readline().split())\n\n        # Create a list of letters\n        letters = list(map(chr, range(ord('a'), ord('z')+1)))\n\n        # Randomly shuffle the list of letters\n        random.shuffle(letters)\n\n        # Divide the list into groups of length b\n        groups = [letters[i:i+b] for i in range(0, len(letters), b)]\n\n        # Create a string s of length n by concatenating substrings from groups\n        s = \"\"\n        for i in range(0, n, a):\n            sub = ''.join(random.choice(groups) for _ in range(a))\n            s += sub\n\n        print(s)"
    },
    {
        "number": 4324,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4324,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.strip().split())\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    result = []\n    for _ in range(t):\n        substrings = []\n        while s:\n            substring = s[:a]\n            s = s[a:]\n            if len(set(substring)) == b:\n                substrings.append(substring)\n        substrings.sort()\n        result.append(''.join(substrings))\n    return '\\n'.join(result)"
    },
    {
        "number": 4324,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n')[1:]:\n        n, a, b = map(int, line.split())\n        if a > n or b > min(26, a):\n            print(-1)\n            continue\n        s = list('abcdefghijklmnopqrstuvwxyz')\n        res = set()\n        for i in range(n - a + 1):\n            sub = ''.join(s[i:i+a])\n            if len(set(sub)) == a and len(set(sub)) == b:\n                res.add(sub)\n        if not res:\n            print(-1)\n            continue\n        ans = sorted(list(res))[0]\n        print(ans)"
    },
    {
        "number": 4325,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = map(int, stdin.split())\n    min_time = t\n    num_takoyaki = 0\n    for i in range(n//x+1):\n        num_takoyaki += x\n        min_time += t*(num_takoyaki//x)\n        num_takoyaki %= x\n    return str(min_time)"
    },
    {
        "number": 4325,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = map(int, stdin.split())\n    count = 0\n    while N > 0:\n        N -= X\n        count += 1\n        if N < 0:\n            N += X\n    return count * T"
    },
    {
        "number": 4325,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = map(int, stdin.split())\n    return str((n+x-1)//x*t)"
    },
    {
        "number": 4325,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = map(int, stdin.strip().split())\n    count = 0\n    minutes = 0\n    while count < n:\n        count += x\n        if count > n:\n            count = n\n        minutes += t\n    return str(minutes)"
    },
    {
        "number": 4325,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = map(int, stdin.split())\n    return str(max(n // x, t))\n"
    },
    {
        "number": 4325,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = map(int, stdin.strip().split())\n    return str(max(n // x, 1) * t)"
    },
    {
        "number": 4325,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = map(int, stdin.strip().split())\n    minutes = 0\n    while n > 0:\n        minutes += t\n        n -= x\n        if n < 0:\n            n = 0\n    return str(minutes)"
    },
    {
        "number": 4325,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = map(int, stdin.split())\n    return str(max(n//x*t, n%x*t))\n\nstdin = input()\nstdout = solution(stdin)\nprint(stdout)"
    },
    {
        "number": 4325,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = map(int, stdin.split())\n    return str(T * (N // X) + min(N % X, X))\n\n\nprint(solution(\"20 12 6\"))"
    },
    {
        "number": 4325,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = map(int, stdin.split())\n    return str(t * (n // x + 1))\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n    print(solution(stdin))\n"
    },
    {
        "number": 4326,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    groups = n // 3\n    if n % 3 == 0:\n        return str(groups)\n    else:\n        return str(groups + 1)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4326,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n\n    # Count the number of groups consisting of three or more students\n    count = 0\n    for i in range(1, N+1):\n        for j in range(i+1, N+1):\n            for k in range(j+1, N+1):\n                count += 1\n\n    # Return the maximum count\n    return str(count)"
    },
    {
        "number": 4326,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin)\n    \n    # Initialize variables\n    groups = 0\n    students = n\n    \n    # Iterate over possible number of groups\n    for i in range(1, students+1):\n        # Calculate number of groups with i students\n        groups += (students // i) * i\n        \n    # Calculate maximum number of groups with 3 or more students\n    max_groups = (students // 3) * 3\n    \n    # Return result\n    if groups <= max_groups:\n        return str(groups)\n    else:\n        return str(max_groups)"
    },
    {
        "number": 4326,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    groups = 0\n    students = n\n    while students >= 3:\n        groups += 1\n        students -= 3\n    return str(groups)"
    },
    {
        "number": 4326,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    \n    # initialize variables\n    groups = 0\n    students_per_group = 0\n    \n    # iterate through all possible values of students_per_group\n    for i in range(1, N+1):\n        # check if there are enough students to form a group of i students\n        if N % i == 0:\n            # count the number of groups that can be formed with i students\n            groups += N // i\n    \n    # return the maximum number of groups\n    return str(groups)"
    },
    {
        "number": 4326,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n < 3:\n        return '0'\n    groups = []\n    for i in range(2, n):\n        for j in range(i-1, n-1):\n            groups.append((i,j))\n    groups.append((n, n-1))\n    groups.sort(key=lambda x: x[1] - x[0], reverse=True)\n    max_groups = 1\n    for i in range(len(groups)):\n        if groups[i][0] >= 3:\n            max_groups += 1\n            if max_groups == n:\n                return str(max_groups)\n        elif groups[i][1] < groups[i][0]:\n            max_groups += 1\n            if max_groups == n:\n                return str(max_groups)\n    return '0'"
    },
    {
        "number": 4326,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    while n > 2:\n        count += 1\n        n -= 3\n    if n == 2:\n        count += 1\n    return str(count)"
    },
    {
        "number": 4326,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    count = 0\n    while N >= 3:\n        N -= 3\n        count += 1\n    return count"
    },
    {
        "number": 4326,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    groups = 0\n    students = n\n    \n    while students >= 3:\n        groups += 1\n        students -= 3\n        \n    return str(groups)"
    },
    {
        "number": 4326,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    groups = 0\n    students_per_group = 3\n    while students_per_group <= n:\n        groups += n // students_per_group\n        n = n % students_per_group\n        students_per_group += 1\n    return str(groups)"
    },
    {
        "number": 4327,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, p = map(int, stdin.strip().split())\n    if p == 0:\n        return \"0\"\n    if p % 2 == 1:\n        return \"0\"\n    cut_num = p // 3\n    total_num = cut_num + cut_num + 1\n    return str(total_num)"
    },
    {
        "number": 4327,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    A, P = map(int, stdin.strip().split())\n    \n    # Calculate maximum number of apple pies we can make\n    ans = (A + 2) // 3\n    \n    return str(ans)"
    },
    {
        "number": 4327,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, p = map(int, stdin.split())\n    if p == 0:\n        return str(0)\n    return str(p // a + (p % a > 0))"
    },
    {
        "number": 4327,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input values\n    a, p = map(int, stdin.strip().split())\n\n    # Calculate maximum number of apple pies\n    max_pies = (p // 3) * (a - 1) + (p % 3 > 0)\n\n    return str(max_pies)"
    },
    {
        "number": 4327,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    max_pies = 0\n    if P >= 2:\n        max_pies += P // 2 + (P % 2 > 0)\n    if A >= 2:\n        max_pies += A // 2 + (A % 2 > 0)\n    return str(max_pies)"
    },
    {
        "number": 4327,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    if A == 0:\n        return str(P)\n    if P == 0:\n        return str(A)\n    if P >= A:\n        return str(P//3)\n    else:\n        return str(A//3)"
    },
    {
        "number": 4327,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    apple_pies = 0\n\n    # We can make one apple pie by simmering two pieces of apple\n    apple_pies += A // 3\n\n    # We can make two more by simmering the remaining piece\n    apple_pies += A % 3 // 2\n\n    # We can make three more by simmering the remaining pieces\n    apple_pies += A % 3 % 2\n\n    # We can make as many apple pies as we have pieces of apple\n    apple_pies += P\n\n    # Print the maximum number of apple pies\n    return str(apple_pies)\n"
    },
    {
        "number": 4327,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    # Maximum number of apples we can make with one apple pie\n    max_apples = (A // 3) + (A % 3 > 0)\n    # Maximum number of apples we can make with two apple pies\n    max_apples_with_two_pies = (P // 2) + (P % 2 > 0)\n    # Maximum number of apple pies we can make\n    max_pies = min(max_apples, max_apples_with_two_pies)\n    return str(max_pies)"
    },
    {
        "number": 4327,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    if A == 0 and P == 0:\n        return \"0\"\n    if A == 0:\n        return \"1\"\n    if P == 0:\n        return \"0\"\n    if P == 1:\n        return \"1\"\n    if P == 2:\n        return \"2\"\n    max_apples = 0\n    for i in range(1, P+1):\n        for j in range(i+1, P+1):\n            k = P - i - j\n            if i*i + j*j == k*k:\n                max_apples = max(max_apples, i+j+k)\n    return str(max_apples)"
    },
    {
        "number": 4327,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get inputs\n    A, P = map(int, stdin.split())\n\n    # Find maximum number of apple pies we can make\n    max_pies = (A // 3) + (P // 2)\n\n    # Print output\n    print(max_pies)\n\n    return \"\""
    },
    {
        "number": 4328,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if B % A == 0:\n        return str(A + B)\n    else:\n        return str(B - A)"
    },
    {
        "number": 4328,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if b % a == 0:\n        return str(a + b)\n    else:\n        return str(b - a)\n\nprint(solution(input()))"
    },
    {
        "number": 4328,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b % a == 0:\n        return str(a + b)\n    else:\n        return str(b - a)"
    },
    {
        "number": 4328,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b % a == 0:\n        return str(a + b)\n    else:\n        return str(b - a)"
    },
    {
        "number": 4328,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if B % A == 0:\n        return str(A + B)\n    else:\n        return str(B - A)"
    },
    {
        "number": 4328,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b % a == 0:\n        return str(a + b)\n    else:\n        return str(b - a)"
    },
    {
        "number": 4328,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if b % a == 0:\n        return str(a + b)\n    else:\n        return str(b - a)"
    },
    {
        "number": 4328,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b % a == 0:\n        return str(a + b)\n    else:\n        return str(b - a)"
    },
    {
        "number": 4328,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    if B % A == 0:\n        return str(A + B)\n    else:\n        return str(B - A)"
    },
    {
        "number": 4328,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if B % A == 0:\n        return str(A + B)\n    else:\n        return str(B - A)"
    },
    {
        "number": 4329,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()[0]\n    T = stdin.split()[1]\n    if T == S + T[-1]:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4329,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip().split('\\n')[0]\n    T = stdin.strip().split('\\n')[1]\n    if T == S + T[-1]:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4329,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    if t == s + t[-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4329,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    if s[-1] == t[-1]:\n        return 'No'\n    else:\n        return 'Yes'"
    },
    {
        "number": 4329,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split()\n    t = s[0] + s[1][0]\n    if t in s:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4329,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if t == s[:-1] + s[-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4329,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = s + s[-1]\n    if t!= s:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4329,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if s == t:\n        return \"Yes\"\n    if s[-1]!= t[-1]:\n        return \"No\"\n    for i in range(len(s)-1):\n        if s[i]!= t[i]:\n            return \"No\"\n    return \"Yes\"\n\nprint(solution(input()))"
    },
    {
        "number": 4329,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if t in [s + c for c in 'abcdefghijklmnopqrstuvwxyz'] and len(set(t)) == len(t):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4329,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if t == s + t[-1]:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    for i in range(max(A,B)+1):\n        if abs(A - i) == abs(B - i):\n            return str(i)\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4330,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for i in range(1, 1000):\n        if (A-i)%10 == (B-i)%10 and (A-i)//10 == (B-i)//10:\n            return str(i)\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4330,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for K in range(max(A, B)+1):\n        if abs(A - K) == abs(B - K):\n            return str(K)\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4330,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for k in range(max(A, B), A+B+1):\n        if A-k == B-k:\n            return str(k)\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4330,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    if A == B:\n        return str(A)\n    \n    for i in range(max(A, B), min(A, B)+1):\n        if abs(A - i) == abs(B - i):\n            return str(i)\n        \n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4330,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    for i in range(max(a, b), min(a, b) - 1, -1):\n        if abs(a - i) == abs(b - i):\n            return str(i)\n    return \"IMPOSSIBLE\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4330,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    A, B = map(int, stdin.split())\n\n    # Calculate the difference between A and B\n    diff = abs(A - B)\n\n    # Check if there exists an integer K such that |A - K| = |B - K|\n    for K in range(diff+1):\n        if (A - K) % diff == 0 and (B - K) % diff == 0:\n            return str(K)\n\n    # If no such integer exists, return IMPOSSIBLE\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4330,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    if A == B:\n        return \"0\"\n    for k in range(min(A, B) + 1, max(A, B)):\n        if abs(A - k) == abs(B - k):\n            return str(k)\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4330,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    if A == B:\n        return str(A)\n    \n    for k in range(max(A, B), min(A, B)+1):\n        if A - k == B - k:\n            return str(k)\n    \n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4330,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for k in range(min(A,B), max(A,B)+1):\n        if abs(A-k) == abs(B-k):\n            return str(k)\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4331,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 10 == 7:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4331,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 10 == 7:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4331,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 7:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4331,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 7:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4331,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 10 == 7:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4331,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 10 == 7:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4331,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 10 == 7:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4331,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 10 == 7:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4331,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 7:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 7:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sum_of_digits = sum(map(int, str(N)))\n    if sum_of_digits % N == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin)\n    \n    # compute S(N)\n    S = sum(int(d) for d in str(N))\n    \n    # check if S(N) divides N\n    if S % N == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(N))\n    if digits_sum % N == 0:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4332,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    if sum_of_digits % n == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = sum(int(d) for d in str(n))\n    if s % n == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = sum(int(d) for d in str(n))\n    if s == 0:\n        return 'No'\n    elif n % s == 0:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4332,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = sum(int(digit) for digit in str(N))\n    if S == 0 or N % S == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = sum(int(digit) for digit in str(N))\n    if s % N == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = sum(int(d) for d in str(n))\n    if s % n == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum_digits = sum(int(digit) for digit in str(n))\n    if sum_digits % n == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4333,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n\n    # Calculate the differences between the four coordinates\n    dx1 = x_1 - x_2\n    dy1 = y_1 - y_2\n\n    dx2 = x_2 - x_3\n    dy2 = y_2 - y_3\n\n    # Use the differences to calculate the other two coordinates\n    x_3 = x_1 + dx2\n    y_3 = y_1 + dy2\n\n    x_4 = x_2 + dx1\n    y_4 = y_2 + dy1\n\n    return f\"{x_3} {y_3} {x_4} {y_4}\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3 = x1 + y2 - y1\n    y3 = y1 + x1 - x2\n    x4 = x1 + y1 - y2\n    y4 = y1 + x2 - x1\n    return f\"{x3} {y3} {x4} {y4}\\n\""
    },
    {
        "number": 4333,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x_1,y_1,x_2,y_2 = map(int,stdin.strip().split())\n    x_3 = (x_1*x_1 + y_1*y_1 - x_2*x_2 - y_2*y_2)/(2*(x_2-x_1))\n    y_3 = (y_2 - y_1)/(x_2 - x_1)*x_3 + y_1\n    x_4 = (x_1*x_1 + y_1*y_1 - x_2*x_2 - y_2*y_2)/(2*(y_2-y_1))\n    y_4 = (y_2 - y_1)/(x_2 - x_1)*x_4 + y_1\n    return f\"{x_3} {y_3} {x_4} {y_4}\""
    },
    {
        "number": 4333,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.strip().split())\n    x3 = (x1**2 + y1**2 - x2**2 - y2**2) / 2\n    y3 = (x1**2 + y1**2 + x2**2 + y2**2) / 2\n    x4 = (x1**2 + y1**2 + x2**2 + y2**2 - x3**2 - y3**2) / 2\n    y4 = (x1**2 + y1**2 - x2**2 - y2**2 + x3**2 + y3**2) / 2\n    return f\"{x3} {y3} {x4} {y4}\"\n\nprint(solution(input())) # output: -1 1 -1 0"
    },
    {
        "number": 4333,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = list(map(int, stdin.split()))\n    x_3, y_3 = (x_1 + x_2) // 2, (y_1 + y_2) // 2\n    x_4, y_4 = x_3 + (y_3 - y_1), y_3 + (x_2 - x_3)\n    return f\"{x_3} {y_3} {x_4} {y_4}\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = x1+y1, x2+y2, x1-y1, y1-x1\n    return f\"{x3} {y3} {x4} {y4}\"\n\n\nprint(solution(\"0 0 0 1\"))\n"
    },
    {
        "number": 4333,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3 = (x1 + x2) // 2\n    y3 = (y1 + y2) // 2\n    x4 = x3\n    y4 = y1 - y2\n    return f\"{x3} {y3} {x4} {y4}\\n\""
    },
    {
        "number": 4333,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.strip().split())\n    x3 = (x1**2 - x2**2 + y2**2) / (2 * (y2 - y1))\n    y3 = y1 + (x3 - x1) * (y2 - y1) / (x2 - x1)\n    x4 = (x1**2 + y1**2 - x2**2 - y2**2) / (2 * (y2 - y1))\n    y4 = y1 + (x4 - x1) * (y2 - y1) / (x2 - x1)\n    return f\"{x3} {y3} {x4} {y4}\\n\""
    },
    {
        "number": 4333,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_3 = x_2 - x_1\n    y_3 = y_2 - y_1\n    x_4 = 2 * x_1 - x_2\n    y_4 = 2 * y_1 - y_2\n    return f\"{x_3} {y_3} {x_4} {y_4}\"\n\nprint(solution(\"0 0 0 1\")) # Output: -1 1 -1 0"
    },
    {
        "number": 4333,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3 = (x1 + x2) // 2\n    y3 = (y1 + y2) // 2\n    x4 = 2 * x1 - x3\n    y4 = 2 * y1 - y3\n    return f\"{x3} {y3} {x4} {y4}\""
    },
    {
        "number": 4334,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t, a, b, u = stdin.strip().split()\n    a, b = int(a), int(b)\n\n    if u == s:\n        s_count = a\n        t_count = b\n    elif u == t:\n        s_count = b\n        t_count = a\n    else:\n        s_count = a + b\n        t_count = 0\n\n    return f\"{s_count} {t_count}\""
    },
    {
        "number": 4334,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    s, t = stdin.split()[0], stdin.split()[1]\n    a, b = map(int, stdin.split()[2].split())\n    u = stdin.split()[3]\n\n    # Remove u ball\n    if s == u:\n        a -= 1\n    else:\n        b -= 1\n\n    # Return result\n    return f\"{a} {b}\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, T, A, B, U = stdin.split()\n    A = int(A)\n    B = int(B)\n\n    if S == U:\n        A -= 1\n    elif T == U:\n        B -= 1\n\n    return f\"{A} {B}\"\n\nwith open('input.txt', 'r') as f:\n    input_str = f.read().strip()\n\noutput_str = solution(input_str)\nprint(output_str)"
    },
    {
        "number": 4334,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    A, B = map(int, input().split())\n    U = input()\n\n    if U == S:\n        A -= 1\n    elif U == T:\n        B -= 1\n\n    return f\"{A} {B}\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = map(str, stdin.split()[0:2])\n    a, b = map(int, stdin.split()[2:4])\n    u = stdin.split()[4]\n\n    if u == s:\n        return f\"{a} {b}\"\n    elif u == t:\n        return f\"{a} {b}\"\n    else:\n        if s == \"red\":\n            return f\"{a} {b+1}\"\n        else:\n            return f\"{a+1} {b}\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    a, b = map(int, stdin.strip().split())\n    u = stdin.strip()\n    if u == s or u == t:\n        return \"0 0\"\n    else:\n        if s == u:\n            return f\"{a} {b-1}\"\n        else:\n            return f\"{a-1} {b}\""
    },
    {
        "number": 4334,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, T = map(str, stdin.strip().split())\n    A, B = map(int, stdin.strip().split())\n    U = stdin.strip().split()[2]\n\n    if U in [S, T]:\n        A += 1\n        B += 1\n\n    return f\"{A} {B}\""
    },
    {
        "number": 4334,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    s, t, a, b, u = stdin.split()\n    a, b = int(a), int(b)\n\n    # Count balls with string S and T\n    s_count = t_count = 0\n    for i in range(a + b):\n        if i < a:\n            if s == u:\n                continue\n            else:\n                s_count += 1\n        else:\n            if t == u:\n                continue\n            else:\n                t_count += 1\n\n    # Print result\n    return f\"{s_count} {t_count}\""
    },
    {
        "number": 4334,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t, a, b, u = stdin.split()\n    a, b = int(a), int(b)\n    if s == u:\n        s, t = t, s\n    count_s = a + b\n    count_t = a + b\n    if u in s:\n        count_s -= 1\n    if u in t:\n        count_t -= 1\n    return f\"{count_s} {count_t}\""
    },
    {
        "number": 4334,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    a, b = map(int, stdin.strip().split())\n    u = stdin.strip()\n    # If Takahashi chooses the ball with U on it, we have A-1 balls with S and B-1 balls with T.\n    if u == s:\n        return f\"{a-1} {b}\"\n    elif u == t:\n        return f\"{a} {b-1}\"\n    # If U is not present on any of the balls, we have the same number of balls with S and T.\n    else:\n        return f\"{a} {b}\""
    },
    {
        "number": 4335,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.strip().split())\n    n = int(n)\n    t = s[:n//2]\n    return 'Yes' if s == t*2 else 'No'"
    },
    {
        "number": 4335,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.strip().split())\n    n = int(n)\n    if s == s[::-1]:\n        return \"No\"\n    for i in range(1, n):\n        if s[:i] == s[n-i:n]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4335,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n    if S == S[::-1] * 2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4335,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n    \n    # Check if S is a concatenation of two copies of some string\n    T = S[:len(S)//2]  # first half of S\n    if S[len(S)//2:] == T:  # second half of S is the same as first half\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4335,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    \n    t = s[:len(s)//2]\n    if s == t + t:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4335,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    if s == s[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4335,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.strip().split())\n    if s == s[::-1] and s.count(s[0]) == len(s):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4335,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.strip().split('\\n')\n    n = int(n)\n    t = s[:n//2]\n    return 'Yes' if s == t*2 else 'No'"
    },
    {
        "number": 4335,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    t = s[:len(s)//2]\n    if t * 2 == s:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4335,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.strip().split())\n    if len(set(s))!= len(s):\n        return 'No'\n    return 'Yes' if s in s + s else 'No'"
    },
    {
        "number": 4336,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.strip().split())\n    max_area = W*H/2\n    area1 = max(0, (x-1)*(H-y))\n    area2 = max(0, (W-x)*(y-1))\n    max_area = min(max_area, area1, area2)\n    if max_area == area1 or max_area == area2:\n        print(f\"{max_area:.9f} 1\")\n    else:\n        print(f\"{max_area:.9f} 0\")\n    return \"\""
    },
    {
        "number": 4336,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n    max_area = W * H\n    if x == 0 or x == W or y == 0 or y == H:\n        max_area = x * y\n    elif x == 1:\n        max_area = W * y\n    elif x == W:\n        max_area = x * y\n    elif y == 1:\n        max_area = W * H\n    elif y == H:\n        max_area = x * H\n    else:\n        max_area = (x * H) + (W - x) * y\n    print(\"{:.9f} {}\".format(max_area, 0))\n    return \"\""
    },
    {
        "number": 4336,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n\n    # calculate the area of the rectangle\n    area = W * H\n\n    # calculate the length of the diagonal line\n    d = max(abs(x - 0), abs(y - 0), abs(x - W), abs(y - H))\n\n    # calculate the length of the vertical line\n    v = min(abs(x - 0), abs(x - W))\n\n    # calculate the length of the horizontal line\n    h = min(abs(y - 0), abs(y - H))\n\n    # calculate the area of the cut\n    cut_area = d * v\n\n    # check if there are multiple ways to cut the rectangle\n    if cut_area <= area / 2:\n        return f\"{cut_area} 0\"\n    else:\n        return f\"{area - cut_area} 1\""
    },
    {
        "number": 4336,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n    lines = [(0, 0, x, y), (0, 0, W, y), (0, 0, x, H), (0, 0, W, H)]\n    for i in range(1, 4):\n        for j in range(i+1, 4):\n            l = (lines[i][0]-lines[j][0])/(lines[i][1]-lines[j][1])\n            if 0 <= l <= 1 and 0 <= lines[i][1]*(l+1) <= H:\n                lines[i] = (lines[i][0]+(l-lines[i][1]/(l+1))*lines[j][0], 0, lines[i][2]+lines[j][2], H)\n                lines.pop(j)\n                break\n    for i in range(1, 4):\n        for j in range(i+1, 4):\n            l = (lines[i][2]-lines[j][2])/(lines[i][3]-lines[j][3])\n            if 0 <= l <= 1 and 0 <= lines[i][3]*(l+1) <= W:\n                lines[i] = (0, lines[i][1]+(l-lines[i][3]/(l+1))*lines[j][1], W, lines[i][3]+lines[j][3])\n                lines.pop(j)\n                break\n    a = (lines[0][2]-lines[0][0])*(lines[0][3]-lines[0][1])\n    b = (lines[1][2]-lines[1][0])*(lines[1][3]-lines[1][1])\n    if b <= a:\n        a, b = b, a\n    if abs(a-b) > 1e-9:\n        return f\"{a:.9f} 1\"\n    else:\n        return f\"{a:.9f} 0\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4336,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n    cut_lines = [(0, 0), (x, y)]\n    if x!= W:\n        cut_lines.append((W, y))\n    if y!= H:\n        cut_lines.append((x, H))\n    cut_areas = [((line[1] - cut[1]) * (line[0] - cut[0])) / 2 for cut in cut_lines for line in cut_lines if cut!= line]\n    max_area = max(cut_areas)\n    if len(set(cut_areas)) == 1:\n        return f\"{max_area:.9f} 0\"\n    else:\n        return f\"{max_area:.9f} 1\""
    },
    {
        "number": 4336,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.strip().split())\n    cut1 = (x, y)\n    cut2 = (x, H)\n    cut3 = (W, y)\n    cut4 = (W, H)\n    max_area = 0\n    max_area_cut = None\n    for cut in (cut1, cut2, cut3, cut4):\n        area1 = (cut[1]-y)*(x-cut[0])\n        area2 = (H-cut[1])*(W-x)\n        area3 = (y-cut[1])*(cut[0]-x)\n        area4 = (y-cut[1])*(x-W)\n        area = min(area1, area2, area3, area4)\n        if area > max_area:\n            max_area = area\n            max_area_cut = cut\n    if max_area_cut == cut1:\n        return f\"{max_area:.9f} {1 if max_area1 > max_area2 else 0}\"\n    elif max_area_cut == cut2:\n        return f\"{max_area:.9f} {1 if max_area1 > max_area3 else 0}\"\n    elif max_area_cut == cut3:\n        return f\"{max_area:.9f} {1 if max_area2 > max_area4 else 0}\"\n    else:\n        return f\"{max_area:.9f} {1 if max_area3 > max_area4 else 0}\"\n\nwith open(\"input.txt\", \"r\") as f:\n    print(solution(f.read()))"
    },
    {
        "number": 4336,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n\n    max_area = min(W, H) ** 2\n    min_area = max(0, x, y) ** 2\n\n    if x == 0 or x == W:\n        if y == 0 or y == H:\n            return \"{:.9f} {}\".format(max_area, 1)\n        else:\n            area_left = (y + H - y) * x\n            area_right = (y + H - y) * (W - x)\n            return \"{:.9f} {}\".format(min(area_left, area_right), 1)\n    elif y == 0 or y == H:\n        area_top = (x + W - x) * y\n        area_bottom = (x + W - x) * (H - y)\n        return \"{:.9f} {}\".format(min(area_top, area_bottom), 1)\n    else:\n        area_left = (y + H - y) * x\n        area_right = (y + H - y) * (W - x)\n        area_top = (x + W - x) * y\n        area_bottom = (x + W - x) * (H - y)\n        return \"{:.9f} {}\".format(min(area_left, area_right, area_top, area_bottom), 1)"
    },
    {
        "number": 4336,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n    line_x = [[0, 0], [x, y]]\n    line_y = [[0, 0], [x, y]]\n\n    for i in range(2):\n        for j in range(2):\n            if i == 0:\n                if line_x[i][j] > W:\n                    line_x[i][j] = W\n            if j == 0:\n                if line_y[i][j] > H:\n                    line_y[i][j] = H\n\n    area_x = (line_x[0][0] - line_x[1][0]) * (line_x[0][1] + line_x[1][1])\n    area_y = (line_y[0][0] + line_y[1][0]) * (line_y[0][1] - line_y[1][1])\n\n    if area_x <= area_y:\n        return f\"{area_x:.9f} 0\"\n    else:\n        return f\"{area_y:.9f} 0\""
    },
    {
        "number": 4336,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n    # Calculate area of each rectangle part\n    top = y*H\n    bottom = (H-y)*x\n    left = x*W\n    right = (W-x)*y\n    # Find the maximum possible area of the part whose area is not larger than that of the other\n    if top >= bottom and top >= left and top >= right:\n        max_area = top\n        is_multiple = True if bottom < left or bottom < right else False\n    elif bottom >= top and bottom >= left and bottom >= right:\n        max_area = bottom\n        is_multiple = True if top < left or top < right else False\n    elif left >= top and left >= bottom and left >= right:\n        max_area = left\n        is_multiple = True if top < bottom or top < right else False\n    else:\n        max_area = right\n        is_multiple = True if top < bottom or top < left else False\n    # Print the result\n    return f\"{max_area:.9f} {1 if is_multiple else 0}\""
    },
    {
        "number": 4336,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n    # check if point is inside or on the border\n    if x == 0 or x == W or y == 0 or y == H:\n        return f\"{W * H:.9f} 0\"\n\n    # check if point is within one of the edges\n    if x == 0 or x == W:\n        a = y / x\n        b = 0\n        c = 0\n        if x == 0:\n            x1, y1 = 0, 0\n            x2, y2 = 0, H\n        else:\n            x1, y1 = W, 0\n            x2, y2 = W, H\n    elif y == 0 or y == H:\n        a = 0\n        b = x / y\n        c = 0\n        if y == 0:\n            x1, y1 = 0, 0\n            x2, y2 = W, 0\n        else:\n            x1, y1 = 0, H\n            x2, y2 = W, H\n    else:\n        a = y / x\n        b = -1\n        c = 0\n        x1, y1 = 0, 0\n        x2, y2 = W, H\n\n    # calculate the area of the two parts\n    A1 = (x2 - x) * (y2 - y)\n    A2 = (x2 - x1) * (y2 - y1)\n\n    # check if there are multiple ways to cut the rectangle\n    if A1 > A2:\n        return f\"{A1:.9f} 0\"\n\n    # calculate the maximum possible area of the cut part\n    d = abs(a * x - b * y + c) / math.sqrt(a ** 2 + b ** 2)\n    area = (d ** 2) * (W - x1) + (W - x1) * (H - y1)\n    return f\"{area:.9f} 1\""
    },
    {
        "number": 4337,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N = int(stdin.readline().strip())\n    arare_colors = stdin.readline().strip().split()\n    \n    # Count colors\n    pink = arare_colors.count('P')\n    white = arare_colors.count('W')\n    green = arare_colors.count('G')\n    yellow = arare_colors.count('Y')\n    \n    # Check number of colors\n    if pink == 0 or white == 0 or green == 0:\n        return 'Three'\n    elif yellow == 0:\n        return 'Four'\n    else:\n        return 'Unknown'"
    },
    {
        "number": 4337,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline())\n    colors = stdin.readline().strip().split()\n    \n    # count colors\n    count_colors = len(set(colors))\n    \n    # output result\n    if count_colors == 3:\n        return \"Three\"\n    elif count_colors == 4:\n        return \"Four\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4337,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    colors = stdin.readline().strip().split()\n\n    # count number of colors in bag\n    color_count = {}\n    for color in colors:\n        if color not in color_count:\n            color_count[color] = 1\n        else:\n            color_count[color] += 1\n\n    # check if bag contains three or four colors of arare\n    if len(color_count) == 3:\n        return \"Three\"\n    elif len(color_count) == 4:\n        return \"Four\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4337,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    colors = stdin.readline().strip().split()\n\n    if len(set(colors)) == 3:\n        return \"Three\"\n    else:\n        return \"Four\""
    },
    {
        "number": 4337,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    colors = stdin.split()[1:]\n\n    pink = 0\n    white = 0\n    green = 0\n    yellow = 0\n\n    for color in colors:\n        if color == \"P\":\n            pink += 1\n        elif color == \"W\":\n            white += 1\n        elif color == \"G\":\n            green += 1\n        else:\n            yellow += 1\n\n    if pink == 0 and white == 0 and green == 0:\n        return \"Three\"\n    else:\n        return \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get input from stdin\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip().split()\n\n    # count colors of arare\n    colors = set(S)\n    if len(colors) == 3:\n        return \"Three\"\n    elif len(colors) == 4:\n        return \"Four\"\n    else:\n        return \"Error\""
    },
    {
        "number": 4337,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    arare_colors = stdin.readline().strip().split()\n\n    # Check number of arare colors\n    num_arare_colors = len(set(arare_colors))\n    if num_arare_colors == 3:\n        return \"Three\"\n    elif num_arare_colors == 4:\n        return \"Four\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4337,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    colors = stdin.readline().strip().split()\n\n    count_pink = 0\n    count_white = 0\n    count_green = 0\n\n    for color in colors:\n        if color == 'P':\n            count_pink += 1\n        elif color == 'W':\n            count_white += 1\n        elif color == 'G':\n            count_green += 1\n\n    if count_pink == 0 and count_white == 0:\n        return \"Three\"\n    elif count_pink == 0 and count_white == 0 and count_green == 0:\n        return \"Four\"\n    else:\n        return \"Three\""
    },
    {
        "number": 4337,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N = int(stdin.split()[0])\n    colors = stdin.strip().split()[1:]\n\n    # Check number of colors\n    count_colors = colors.count('P') + colors.count('W') + colors.count('G') + colors.count('Y')\n    if count_colors == 3:\n        return \"Three\"\n    elif count_colors == 4:\n        return \"Four\"\n    else:\n        return \"Error: Invalid input\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    colors = stdin.readline().strip().split()\n    \n    count_colors = {\n        'P': 0,\n        'W': 0,\n        'G': 0,\n        'Y': 0\n    }\n    \n    for color in colors:\n        count_colors[color] += 1\n    \n    count_colors_values = list(count_colors.values())\n    \n    if len(count_colors_values) == 3:\n        return 'Three'\n    else:\n        return 'Four'\n\nprint(solution(sys.stdin))"
    },
    {
        "number": 4338,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.readline().split())\n    doors = list(map(int, stdin.readline().split()))\n    broken_doors = [False] * n\n    for i in range(n):\n        if doors[i] <= x:\n            broken_doors[i] = True\n    for _ in range(10**100):\n        slavik_move = True\n        if broken_doors.count(True) == 0:\n            break\n        for i in range(n):\n            if doors[i] > 0 and not broken_doors[i]:\n                if slavik_move:\n                    doors[i] -= y\n                    if doors[i] <= 0:\n                        broken_doors[i] = True\n                    else:\n                        slavik_move = False\n                else:\n                    doors[i] -= x\n                    if doors[i] <= 0:\n                        broken_doors[i] = True\n    return str(broken_doors.count(True))\n\nprint(solution(\"6 3 2\\n2 3 1 3 4 2\"))\nprint(solution(\"5 3 3\\n1 2 4 2 3\"))\nprint(solution(\"5 5 6\\n1 2 6 10 3\"))"
    },
    {
        "number": 4338,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    dp = [0] * n\n    dp[0] = a[0]\n\n    for i in range(1, n):\n        dp[i] = max(dp[i-1] - x, 0) + a[i]\n        dp[i] = max(dp[i], dp[i-1])\n\n    dp = [0] * n\n    dp[n-1] = a[n-1]\n\n    for i in range(n-2, -1, -1):\n        dp[i] = max(dp[i+1] - y, 0) + a[i]\n        dp[i] = max(dp[i], dp[i+1])\n\n    ans = 0\n    for i in range(n):\n        if dp[i] == 0:\n            ans += 1\n\n    return str(ans)"
    },
    {
        "number": 4338,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    doors = list(map(int, stdin.split()))\n\n    # Initialize doors\n    doors_left = [True] * n\n    for i in range(n):\n        if doors[i] == 0:\n            doors_left[i] = False\n\n    # Initialize variables\n    max_durability = 0\n    doors_to_break = []\n    doors_to_repair = []\n\n    # Play the game\n    for i in range(10**100):\n        # Player's turn\n        # Check if there are doors to break\n        if len(doors_to_break) == 0 and len(doors_to_repair) == 0:\n            for j in range(n):\n                if doors_left[j]:\n                    if doors[j] > 0:\n                        doors_to_break.append(j)\n\n        # Break the doors\n        for j in range(len(doors_to_break)):\n            doors[doors_to_break[j]] = max(0, doors[doors_to_break[j]] - x)\n\n        # Check if there are doors to repair\n        if len(doors_to_break) == 0 and len(doors_to_repair) == 0:\n            for j in range(n):\n                if doors_left[j]:\n                    if doors[j] < 0:\n                        doors_to_repair.append(j)\n\n        # Repair the doors\n        for j in range(len(doors_to_repair)):\n            if doors[doors_to_repair[j]] > 0:\n                doors[doors_to_repair[j]] += y\n\n        # Check if there are any doors left\n        doors_left = [True] * n\n        for j in range(n):\n            if doors[j] == 0:\n                doors_left[j] = False\n\n        # Check if there are any doors to skip\n        if len(doors_to_break) == 0 and len(doors_to_repair) == 0:\n            for j in range(n):\n                if doors_left[j]:\n                    doors_to_break.append(j)\n\n        # Update variables\n        max_durability = max(max_durability, max(doors))\n\n    # Count the number of doors with durability equal to 0 at the end\n    num_zero_doors = 0\n    for i in range(n):\n        if doors[i] == 0:\n            num_zero_doors += 1\n\n    return num_zero_doors"
    },
    {
        "number": 4338,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n\n    # Your move\n    for i in range(n):\n        if a[i] - x >= 0:\n            b[i] = a[i] - x\n\n    # Slavik move\n    for i in range(n):\n        if a[i] == 0:\n            b[i] = 0\n        else:\n            b[i] = a[i] + y\n\n    # Count number of doors with durability equal to 0\n    count = 0\n    for i in range(n):\n        if b[i] == 0:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4338,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:3+n]))\n\n    dp = [0] * n\n    for i in range(n):\n        if a[i] > 0:\n            dp[i] = 1\n\n    for i in range(n):\n        for j in range(i):\n            if a[i] > 0 and a[j] > 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    result = sum(1 for d in dp if d == 0)\n    return str(result)\n\ndef"
    },
    {
        "number": 4338,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [0] * n\n\n    # Player 1 moves\n    for i in range(n):\n        dp[i] = a[i] - x if a[i] - x > 0 else 0\n\n    # Player 2 moves\n    for i in range(n):\n        if dp[i]!= 0:\n            dp[i] += y\n\n    # Sum all durabilities equal to zero\n    cnt = sum(1 for i in range(n) if dp[i] == 0)\n\n    return str(cnt)"
    },
    {
        "number": 4338,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = a[i]\n    for i in range(1, 10**100):\n        dp2 = [0] * n\n        dp2[0] = dp[0] + x\n        for j in range(1, n):\n            dp2[j] = max(dp[j - 1], dp[j] - y)\n        dp = dp2\n    return str(dp.count(0))\n\ndef"
    },
    {
        "number": 4338,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, x, y = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n\n    # initialize variables\n    durability = [a[i] for i in range(n)]\n    broken = [False] * n\n    repaired = [False] * n\n    count = 0\n\n    # game loop\n    for turn in range(10**100):\n        # phase 1 - player move\n        for i in range(n):\n            if not broken[i]:\n                durability[i] = max(0, durability[i] - x)\n            if durability[i] == 0:\n                count += 1\n        # phase 2 - slavik move\n        for i in range(n):\n            if not repaired[i] and durability[i] > 0:\n                durability[i] += y\n                repaired[i] = True\n\n    return count"
    },
    {
        "number": 4338,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = dp[i-1]\n        if dp[i] - x >= 0:\n            dp[i] -= x\n        dp[i] = max(dp[i], a[i])\n    ans = dp.count(0)\n    print(ans)\n\nstdin = '''\n6 3 2\n2 3 1 3 4 2\n'''\nsolution(stdin)\n\nstdin = '''\n5 3 3\n1 2 4 2 3\n'''\nsolution(stdin)\n\nstdin = '''\n5 5 6\n1 2 6 10 3\n'''\nsolution(stdin)"
    },
    {
        "number": 4338,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    dp = [0] * n\n    for i in range(n):\n        if a[i] == 0:\n            dp[i] = 1\n            continue\n        dp[i] = a[i] // x\n        if a[i] % x!= 0:\n            dp[i] += 1\n\n    for _ in range(100):\n        ndp = [0] * n\n        for i in range(n):\n            if dp[i] == 0:\n                continue\n            if i + 1 < n and dp[i+1] > 0:\n                ndp[i+1] = max(ndp[i+1], dp[i]-1)\n            if i - 1 >= 0 and dp[i-1] > 0:\n                ndp[i-1] = max(ndp[i-1], dp[i]-1)\n            ndp[i] = 0\n        dp = ndp\n\n    res = 0\n    for i in range(n):\n        if a[i] == 0:\n            res += dp[i]\n    return res\n\ndef"
    },
    {
        "number": 4339,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    # count good pairs\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                count += 1\n\n    # print output\n    print(count)"
    },
    {
        "number": 4339,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4339,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                count += 1\n    return count"
    },
    {
        "number": 4339,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    cnt = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                cnt += 1\n    return cnt"
    },
    {
        "number": 4339,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 4339,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4339,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    pairs = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i]+a[j] > b[i]+b[j]:\n                pairs.append((i,j))\n    return len(pairs)"
    },
    {
        "number": 4339,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 4339,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    count = 0\n\n    # iterate over all possible pairs of topics\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # check if the pair is good\n            if a[i] + a[j] > b[i] + b[j]:\n                count += 1\n\n    # print result\n    print(count)\n\n    # return the solution\n    return str(count)"
    },
    {
        "number": 4339,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4340,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n    \n    for i in range(1, n, 2):\n        if a[i] == 1:\n            a[i] = 2\n        elif a[i] == 2:\n            a[i] = 1\n        elif a[i] == 3:\n            a[i] = 4\n        elif a[i] == 4:\n            a[i] = 3\n        elif a[i] == 5:\n            a[i] = 6\n        elif a[i] == 6:\n            a[i] = 5\n        elif a[i] == 7:\n            a[i] = 8\n        elif a[i] == 8:\n            a[i] = 7\n        elif a[i] == 9:\n            a[i] = 10\n        elif a[i] == 10:\n            a[i] = 9\n    \n    for i in range(0, n, 2):\n        if a[i] == 1:\n            a[i] = 2\n        elif a[i] == 2:\n            a[i] = 1\n        elif a[i] == 3:\n            a[i] = 4\n        elif a[i] == 4:\n            a[i] = 3\n        elif a[i] == 5:\n            a[i] = 6\n        elif a[i] == 6:\n            a[i] = 5\n        elif a[i] == 7:\n            a[i] = 8\n        elif a[i] == 8:\n            a[i] = 7\n        elif a[i] == 9:\n            a[i] = 10\n        elif a[i] == 10:\n            a[i] = 9\n    \n    return \" \".join(str(x) for x in a)\n\nstdin = \"5 1 2 4 5 10\"\nprint(solution(stdin)) # Output: \"1 1 3 5 9\""
    },
    {
        "number": 4340,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    for i in range(1, n, 2):\n        a[i] = 3 - a[i]\n    \n    for i in range(0, n, 2):\n        a[i] = a[i] // 2\n    \n    for i in range(n-2, -1, -2):\n        a[i] = (a[i] + 1) * 2\n    \n    for i in range(n):\n        a[i] = min(a[i], 1000000000)\n    \n    return''.join(map(str, a))\n    \nprint(solution(input()))"
    },
    {
        "number": 4340,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    for i in range(n - 1):\n        if a[i] == 1:\n            a[i] = 2\n        elif a[i] == 2:\n            a[i] = 1\n        elif a[i] == 3:\n            a[i] = 4\n        elif a[i] == 4:\n            a[i] = 3\n        elif a[i] == 5:\n            a[i] = 6\n        elif a[i] == 6:\n            a[i] = 5\n        elif a[i] == 7:\n            a[i] = 8\n        elif a[i] == 8:\n            a[i] = 7\n        elif a[i] == 9:\n            a[i] = 10\n        else:\n            a[i] = 1000000000\n    a[-1] = 1000000000 - 1\n    return \" \".join(map(str, a))"
    },
    {
        "number": 4340,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    b = a.copy()\n    for i in range(1, n):\n        if a[i-1] == 1:\n            b[i] = 2\n        elif a[i-1] == 2:\n            b[i] = 1\n        elif a[i-1] == 3:\n            b[i] = 4\n        elif a[i-1] == 4:\n            b[i] = 3\n        elif a[i-1] == 5:\n            b[i] = 6\n        elif a[i-1] == 6:\n            b[i] = 5\n        elif a[i-1] == 7:\n            b[i] = 8\n        elif a[i-1] == 8:\n            b[i] = 7\n        elif a[i-1] == 9:\n            b[i] = 10\n        elif a[i-1] == 10:\n            b[i] = 9\n        elif a[i-1] == 10**9 - 1:\n            b[i] = 10**9\n        else:\n            b[i] = 10**9 - 1\n    print(*b)"
    },
    {
        "number": 4340,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n\n    # Mishka's Adjacent Replacements Algorithm\n    for i in range(n):\n        if a[i] == 1:\n            a[i] = 2\n        elif a[i] == 2:\n            a[i] = 1\n        elif a[i] == 3:\n            a[i] = 4\n        elif a[i] == 4:\n            a[i] = 3\n        elif a[i] == 5:\n            a[i] = 6\n        elif a[i] == 6:\n            a[i] = 5\n        elif a[i] == 7:\n            a[i] = 8\n        elif a[i] == 8:\n            a[i] = 7\n        elif a[i] == 9:\n            a[i] = 10\n        elif a[i] == 10:\n            a[i] = 9\n\n    return \" \".join(map(str, a))"
    },
    {
        "number": 4340,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    # replace each occurrence of 1 with 2\n    for i in range(n):\n        if a[i] == 1:\n            a[i] = 2\n    # replace each occurrence of 2 with 1\n    for i in range(n):\n        if a[i] == 2:\n            a[i] = 1\n    # replace each occurrence of 3 with 4\n    for i in range(n):\n        if a[i] == 3:\n            a[i] = 4\n    # replace each occurrence of 4 with 3\n    for i in range(n):\n        if a[i] == 4:\n            a[i] = 3\n    # replace each occurrence of 5 with 6\n    for i in range(n):\n        if a[i] == 5:\n            a[i] = 6\n    # replace each occurrence of 6 with 5\n    for i in range(n):\n        if a[i] == 6:\n            a[i] = 5\n    # replace each occurrence of 7 with 8\n    for i in range(n):\n        if a[i] == 7:\n            a[i] = 8\n    # replace each occurrence of 8 with 7\n    for i in range(n):\n        if a[i] == 8:\n            a[i] = 7\n    # replace each occurrence of 9 with 10\n    for i in range(n):\n        if a[i] == 9:\n            a[i] = 10\n    # replace each occurrence of 10 with 9\n    for i in range(n):\n        if a[i] == 10:\n            a[i] = 9\n    # replace each occurrence of 1000000000 with 1\n    for i in range(n):\n        if a[i] == 1000000000:\n            a[i] = 1\n    # replace each occurrence of 1 with 1000000000\n    for i in range(n):\n        if a[i] == 1:\n            a[i] = 1000000000\n    return''.join(map(str, a))"
    },
    {
        "number": 4340,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    for i in range(n-1):\n        if a[i] == 1:\n            a[i] = 2\n        elif a[i] == 2:\n            a[i] = 1\n        elif a[i] == 3:\n            a[i] = 4\n        elif a[i] == 4:\n            a[i] = 3\n        elif a[i] == 5:\n            a[i] = 6\n        elif a[i] == 6:\n            a[i] = 5\n        elif a[i] == 7:\n            a[i] = 8\n        elif a[i] == 8:\n            a[i] = 7\n        elif a[i] == 9:\n            a[i] = 10\n        else:\n            a[i] = 9\n        if a[i+1] == 1:\n            a[i+1] = 2\n        elif a[i+1] == 2:\n            a[i+1] = 1\n        elif a[i+1] == 3:\n            a[i+1] = 4\n        elif a[i+1] == 4:\n            a[i+1] = 3\n        elif a[i+1] == 5:\n            a[i+1] = 6\n        elif a[i+1] == 6:\n            a[i+1] = 5\n        elif a[i+1] == 7:\n            a[i+1] = 8\n        elif a[i+1] == 8:\n            a[i+1] = 7\n        elif a[i+1] == 9:\n            a[i+1] = 10\n        else:\n            a[i+1] = 9\n    return''.join(map(str, a))"
    },
    {
        "number": 4340,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    for i in range(n):\n        if a[i] == 1:\n            a[i] = 2\n        elif a[i] == 2:\n            a[i] = 1\n        elif a[i] == 3:\n            a[i] = 4\n        elif a[i] == 4:\n            a[i] = 3\n        elif a[i] == 5:\n            a[i] = 6\n        elif a[i] == 6:\n            a[i] = 5\n        elif a[i] == 7:\n            a[i] = 8\n        elif a[i] == 8:\n            a[i] = 7\n        elif a[i] == 9:\n            a[i] = 10\n        elif a[i] == 10:\n            a[i] = 9\n    for i in range(n):\n        if a[i] == 10**9:\n            a[i] = 10**9 - 1\n        elif a[i] == 10**9 - 1:\n            a[i] = 10**9\n    return''.join(map(str, a))\n"
    },
    {
        "number": 4340,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    for i in range(n-1):\n        if a[i] == 1:\n            a[i] = 2\n        elif a[i] == 2:\n            a[i] = 1\n        elif a[i] == 3:\n            a[i] = 4\n        elif a[i] == 4:\n            a[i] = 3\n        elif a[i] == 5:\n            a[i] = 6\n        elif a[i] == 6:\n            a[i] = 5\n        elif a[i] == 7:\n            a[i] = 8\n        elif a[i] == 8:\n            a[i] = 7\n        elif a[i] == 9:\n            a[i] = 10\n        elif a[i] == 10:\n            a[i] = 9\n    return''.join(map(str, a))"
    },
    {
        "number": 4340,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    for i in range(1, n, 2):\n        if a[i] == 1:\n            a[i] = 2\n        elif a[i] == 2:\n            a[i] = 1\n        elif a[i] == 3:\n            a[i] = 4\n        elif a[i] == 4:\n            a[i] = 3\n        elif a[i] == 5:\n            a[i] = 6\n        elif a[i] == 6:\n            a[i] = 5\n        elif a[i] == 7:\n            a[i] = 8\n        elif a[i] == 8:\n            a[i] = 7\n        elif a[i] == 9:\n            a[i] = 10\n        else:\n            a[i] = 1\n            \n    for i in range(0, n, 2):\n        if a[i] == 10**9:\n            a[i] = 10**9 - 1\n        elif a[i] == 10**9 - 1:\n            a[i] = 10**9\n            \n    return''.join(map(str, a))\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We can solve this problem by implementing a depth-first search algorithm to find all the connected components in the graph.\n    For each component, we can check if it's also a cycle by doing a depth-first search on each vertex. If we can reach every vertex from any other vertex in the component, then it's a cycle.\n    We can keep track of the number of cycles found in this way.\n    \"\"\"\n    n, m = map(int, stdin.split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        adj[v].append(u)\n        adj[u].append(v)\n\n    visited = [False] * (n+1)\n    cycles = 0\n\n    def dfs(v):\n        nonlocal cycles\n        visited[v] = True\n        for u in adj[v]:\n            if not visited[u]:\n                dfs(u)\n            elif u!= v:\n                # If we can reach u from v, then it's a cycle\n                cycles += 1\n\n    for i in range(1, n+1):\n        if not visited[i]:\n            cycles += 1\n            dfs(i)\n\n    return str(cycles)"
    },
    {
        "number": 4341,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    graph = [[] for i in range(n+1)]\n    for i in range(m):\n        v, u = map(int, stdin.readline().split())\n        graph[v].append(u)\n        graph[u].append(v)\n    visited = [0]*(n+1)\n    cycle = False\n    cc = 0\n    for i in range(1, n+1):\n        if not visited[i]:\n            cc += 1\n            stack = [i]\n            visited[i] = 1\n            while stack:\n                curr = stack[-1]\n                for neighbor in graph[curr]:\n                    if not visited[neighbor]:\n                        if neighbor == stack[0]:\n                            cycle = True\n                            break\n                        stack.append(neighbor)\n                        visited[neighbor] = 1\n                else:\n                    stack.pop()\n    if cycle:\n        print(cc-1)\n    else:\n        print(cc)\n    return \"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = set()\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        edges.add((v, u))\n        edges.add((u, v))\n    \n    visited = set()\n    components = 0\n    for i in range(1, n+1):\n        if i not in visited:\n            cycle = [i]\n            visited.add(i)\n            node = i\n            while True:\n                for nei in edges:\n                    if nei[0] == node:\n                        if nei[1] in visited:\n                            if nei[1] == cycle[0]:\n                                components += 1\n                                break\n                            continue\n                        visited.add(nei[1])\n                        cycle.append(nei[1])\n                        node = nei[1]\n                        break\n                    if nei[1] == node:\n                        if nei[0] in visited:\n                            if nei[0] == cycle[0]:\n                                components += 1\n                                break\n                            continue\n                        visited.add(nei[0])\n                        cycle.append(nei[0])\n                        node = nei[0]\n                        break\n    return components\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for i in range(n+1)]\n    for i in range(m):\n        v, u = map(int, stdin.split())\n        graph[v].append(u)\n        graph[u].append(v)\n    count = 0\n    visited = [False]*(n+1)\n    for i in range(1, n+1):\n        if not visited[i]:\n            dfs(i, graph, visited)\n            count += 1\n    return count - 1 #exclude the cycle itself\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        graph[v].append(u)\n        graph[u].append(v)\n    count = 0\n    visited = [False] * (n+1)\n    for i in range(1, n+1):\n        if not visited[i]:\n            cycle = []\n            stack = [i]\n            visited[i] = True\n            while stack:\n                node = stack[-1]\n                if not graph[node]:\n                    cycle.append(stack.pop())\n                else:\n                    neighbor = graph[node].pop()\n                    if visited[neighbor]:\n                        if neighbor in cycle:\n                            count += 1\n                            for node in cycle:\n                                visited[node] = False\n                            cycle = []\n                        else:\n                            stack.append(node)\n                    else:\n                        stack.append(neighbor)\n                        visited[neighbor] = True\n            if cycle:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4341,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    edges = []\n    for i in range(m):\n        u, v = map(int, stdin.readline().strip().split())\n        edges.append((u-1, v-1))\n\n    visited = [False] * n\n    res = 0\n    for i in range(n):\n        if not visited[i]:\n            dfs(i, visited, edges)\n            res += 1\n\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        v, u = map(int, stdin.readline().strip().split())\n        graph[v].append(u)\n        graph[u].append(v)\n    visited = [False]*(n+1)\n    res = 0\n    for i in range(1, n+1):\n        if not visited[i]:\n            cycle = []\n            stack = [i]\n            while stack:\n                v = stack.pop()\n                if visited[v]:\n                    if len(cycle) >= 3:\n                        res += 1\n                    cycle = []\n                else:\n                    visited[v] = True\n                    cycle.append(v)\n                    stack.extend(graph[v])\n            if len(cycle) >= 3:\n                res += 1\n    return str(res)"
    },
    {
        "number": 4341,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    adj_list = [[] for _ in range(n+1)]\n    for i in range(m):\n        v, u = map(int, stdin.split())\n        adj_list[v].append(u)\n        adj_list[u].append(v)\n    visited = [False] * (n+1)\n    cycle_count = 0\n    for i in range(1, n+1):\n        if not visited[i]:\n            stack = [i]\n            visited[i] = True\n            while stack:\n                v = stack.pop()\n                for u in adj_list[v]:\n                    if not visited[u]:\n                        if u == stack[-1]:\n                            cycle_count += 1\n                            break\n                        stack.append(u)\n                        visited[u] = True\n    return cycle_count"
    },
    {
        "number": 4341,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    n, m = map(int, stdin.readline().split())\n    edges = [(int(u), int(v)) for u, v in [stdin.readline().split() for _ in range(m)]]\n\n    # Finding connected components\n    visited = [False] * (n + 1)\n    components = []\n    for i in range(1, n + 1):\n        if not visited[i]:\n            component = []\n            stack = [i]\n            visited[i] = True\n            while stack:\n                u = stack.pop()\n                component.append(u)\n                for v in range(1, n + 1):\n                    if (u, v) in edges or (v, u) in edges:\n                        if not visited[v]:\n                            stack.append(v)\n                            visited[v] = True\n            components.append(component)\n\n    # Finding cycles\n    cycles = 0\n    for component in components:\n        if len(component) > 2 and component[0] in component[1:] and component[-1] in component[:-1]:\n            cycles += 1\n\n    # Writing output\n    stdout.write(str(cycles))\n"
    },
    {
        "number": 4341,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.readline().split())\n    edges = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    \n    # build graph\n    graph = [[] for i in range(n+1)]\n    for v, u in edges:\n        graph[v].append(u)\n        graph[u].append(v)\n    \n    # DFS to detect cycles\n    visited = [False] * (n+1)\n    cycle_count = 0\n    for i in range(1, n+1):\n        if not visited[i]:\n            cycle_count += 1\n            stack = [i]\n            while stack:\n                v = stack[-1]\n                if not visited[v]:\n                    visited[v] = True\n                    for u in graph[v]:\n                        if u == stack[-2]:\n                            continue\n                        if not visited[u]:\n                            stack.append(u)\n                            break\n                        else:\n                            stack.pop()\n                else:\n                    stack.pop()\n    \n    return str(cycle_count)"
    },
    {
        "number": 4342,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    edges = [list(map(int, input().split())) for _ in range(n - 1)]\n    red = [i for i in range(n) if a[i] == 1]\n    blue = [i for i in range(n) if a[i] == 2]\n\n    def dfs(node, parent):\n        for child in edges[node - 1]:\n            if child == parent:\n                continue\n            if child in red and node in blue:\n                continue\n            if child in blue and node in red:\n                continue\n            if child not in visited:\n                visited.add(child)\n                dfs(child, node)\n\n    count = 0\n    for node in range(1, n + 1):\n        visited = set()\n        visited.add(node)\n        dfs(node, None)\n        if len(visited) > 1:\n            count += len(visited) - 1\n\n    return str(count)\n\nstdin = \"\"\"\n5\n2 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n\"\"\"\n\nprint(solution(stdin)) # Output: 1"
    },
    {
        "number": 4342,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.readline().split())\n    adj = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        v, u = map(int, stdin.readline().split())\n        adj[v - 1].append(u - 1)\n        adj[u - 1].append(v - 1)\n\n    def dfs(u, p, red, blue):\n        if a[u] == 1:\n            red.add(u)\n        elif a[u] == 2:\n            blue.add(u)\n\n        for v in adj[u]:\n            if v!= p:\n                dfs(v, u, red, blue)\n\n    red = set()\n    blue = set()\n    dfs(0, -1, red, blue)\n\n    ans = 0\n    for u in range(n):\n        for v in adj[u]:\n            if a[u]!= a[v] and (a[u] == 0 or a[v] == 0) and (red & blue) == set():\n                ans += 1\n\n    return str(ans)"
    },
    {
        "number": 4342,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    colors = [int(c) for c in stdin.readline().strip().split()]\n    edges = []\n    for i in range(n-1):\n        v, u = map(int, stdin.readline().strip().split())\n        edges.append((v, u))\n    parent = [-1] * n\n    rank = [0] * n\n    def find(v):\n        if parent[v] == -1:\n            return v\n        parent[v] = find(parent[v])\n        return parent[v]\n    def union(v, u):\n        v, u = find(v), find(u)\n        if rank[v] < rank[u]:\n            parent[v] = u\n        else:\n            parent[u] = v\n            if rank[v] == rank[u]:\n                rank[v] += 1\n    for v, u in edges:\n        union(v-1, u-1)\n    components = [-1] * n\n    def component(v):\n        if components[v] == -1:\n            components[v] = len(components)\n            for u in range(n):\n                if parent[v] == u:\n                    component(u)\n    for i in range(n):\n        component(i)\n    count = 0\n    for i in range(n-1):\n        v, u = edges[i]\n        if colors[v-1] == colors[u-1]:\n            continue\n        if components[v-1]!= components[u-1]:\n            count += 1\n    return count"
    },
    {
        "number": 4342,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    colors = list(map(int, stdin.readline().split()))\n    edges = {}\n    for _ in range(n-1):\n        v, u = map(int, stdin.readline().split())\n        edges[(v,u)] = True\n        edges[(u,v)] = True\n    count = 0\n    for edge in edges:\n        v, u = edge\n        if colors[v]!= colors[u]:\n            count += 1\n    return count"
    },
    {
        "number": 4342,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    colors = list(map(int, stdin.split()[1:n+1]))\n    edges = []\n    for i in range(n-1):\n        v, u = map(int, stdin.split()[i+1].split())\n        edges.append((v-1, u-1))\n\n    # DFS to find connected components\n    visited = [False] * n\n    def dfs(u, component):\n        visited[u] = True\n        for v, w in edges:\n            if v == u:\n                if not visited[w]:\n                    dfs(w, component)\n            elif w == u:\n                if not visited[v]:\n                    dfs(v, component)\n        return component\n\n    components = []\n    for u in range(n):\n        if not visited[u]:\n            component = dfs(u, [])\n            components.append(component)\n\n    # Count nice edges\n    count = 0\n    for u, v in edges:\n        if colors[u]!= colors[v]:\n            if len(components[u]) > len(components[v]):\n                u, v = v, u\n            if all(colors[x] == 0 for x in components[v]) and all(colors[x] == 1 for x in components[u]):\n                count += 1\n    return count"
    },
    {
        "number": 4342,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    colors = list(map(int, stdin.readline().strip().split()))\n    edges = []\n    for i in range(n-1):\n        v, u = map(int, stdin.readline().strip().split())\n        edges.append((v, u))\n    def is_connected(v, u):\n        return len(set(find_path(v, u))) == 2\n    def find_path(v, u):\n        if u == v:\n            return [v]\n        paths = []\n        for child in children[v]:\n            if child!= u:\n                path = find_path(child, u)\n                if path:\n                    paths.append([v] + path)\n        return paths\n    children = [[] for _ in range(n)]\n    for v, u in edges:\n        children[v-1].append(u-1)\n        children[u-1].append(v-1)\n    red_vertices = [i for i in range(n) if colors[i] == 1]\n    blue_vertices = [i for i in range(n) if colors[i] == 2]\n    if not is_connected(red_vertices[0], blue_vertices[0]):\n        return \"0\"\n    red_edges = sum(is_connected(v, u) for v, u in edges if colors[v-1] == 1 and colors[u-1] == 1)\n    blue_edges = sum(is_connected(v, u) for v, u in edges if colors[v-1] == 2 and colors[u-1] == 2)\n    return str(red_edges + blue_edges)"
    },
    {
        "number": 4342,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, colors = map(int, stdin.split()[0]), list(map(int, stdin.split()[1:]))\n    edges = []\n    for i in range(n-1):\n        v, u = map(int, stdin.split())\n        edges.append((v, u))\n    num_nice_edges = 0\n    for v, u in edges:\n        if colors[v-1]!= colors[u-1]:\n            num_nice_edges += 1\n    print(num_nice_edges)\n    return str(num_nice_edges)"
    },
    {
        "number": 4342,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass # TODO: Implement the solution\n"
    },
    {
        "number": 4342,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Prints the number of nice edges in the given tree.\n    \"\"\"\n    # Parse input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    edges = []\n    for i in range(n - 1):\n        v, u = map(int, stdin.readline().strip().split())\n        edges.append((v, u))\n    \n    # Count the number of nice edges\n    nice_edges = 0\n    for v, u in edges:\n        if a[v]!= a[u]:\n            continue\n        if a[v] == 1 or a[v] == 2:\n            continue\n        if (a[v] == 0 and a[u] == 1) or (a[v] == 1 and a[u] == 0):\n            nice_edges += 1\n    \n    # Print the result\n    print(nice_edges)"
    },
    {
        "number": 4342,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    n = int(stdin.readline().strip())\n    colors = list(map(int, stdin.readline().strip().split()))\n    edges = []\n    for i in range(n - 1):\n        v, u = map(int, stdin.readline().strip().split())\n        edges.append((v, u))\n\n    # Count the number of red and blue vertices\n    red_count = sum(1 for c in colors if c == 1)\n    blue_count = sum(1 for c in colors if c == 2)\n\n    # Count the number of nice edges\n    nice_edges = 0\n    for edge in edges:\n        v, u = edge\n        if colors[v - 1] == 0 or colors[u - 1] == 0:\n            continue\n        if colors[v - 1] == colors[u - 1]:\n            continue\n        if (colors[v - 1] == 1 and red_count > 1 and blue_count > 1) or (colors[u - 1] == 1 and red_count > 1 and blue_count > 1):\n            nice_edges += 1\n\n    # Output the result\n    print(nice_edges)\n    return str(nice_edges)"
    },
    {
        "number": 4343,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = stdin.split()\n    k = int(k)\n    s = sorted(set(s))\n    t = sorted(set(t))\n    if s == t:\n        return s\n    s = \"\".join(s)\n    t = \"\".join(t)\n    result = []\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            result.append(s[i])\n    if len(result) % 2 == 0:\n        mid = len(result) // 2\n        return result[mid - 1] + result[mid]\n    else:\n        mid = len(result) // 2\n        return result[mid]\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4343,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    n = 0\n    for i in range(k):\n        for j in range(ord(s[i]), ord(t[i])+1):\n            c = chr(j)\n            if c < s[i]:\n                continue\n            if c > t[i]:\n                break\n            if c >= s[i]:\n                n += 1\n    if n % 2 == 1:\n        for i in range(ord(s[k-1]), ord('z')+1):\n            if chr(i) < s[k-1]:\n                continue\n            if chr(i) > t[k-1]:\n                break\n            if chr(i) >= s[k-1]:\n                n += 1\n                if n == (k+1)//2:\n                    return chr(i)\n    else:\n        c = s[:k-1]\n        while True:\n            c = chr(ord(c[-1])+1)\n            if c < s[k-1]:\n                continue\n            if c > t[k-1]:\n                break\n            if c >= s[k-1]:\n                n += 1\n                if n == (k+1)//2:\n                    return c\n\nstdin = \"2\\naz\\nbf\\n5\\nafogk\\nasdji\\n6\\nnijfvj\\ntvqhwp\\n\"\nprint(solution(stdin)) # Output: \"bc\""
    },
    {
        "number": 4343,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = map(str, stdin.strip().split())\n    k, s, t = int(k), s, t\n    strings = []\n    for i in range(ord(s[0]), ord(t[0])+1):\n        for j in range(ord(s[1]), ord(t[1])+1):\n            if s[1] == t[1]:\n                if i == ord(s[0]) and j == ord(s[1]):\n                    strings.append(s)\n                elif i == ord(t[0]) and j == ord(t[1]):\n                    strings.append(t)\n                else:\n                    continue\n            else:\n                if j == ord(s[1]):\n                    strings.append(s[:1] + chr(i) + s[1:])\n                elif j == ord(t[1]):\n                    strings.append(t[:1] + chr(i) + t[1:])\n                else:\n                    strings.append(chr(i) + chr(j))\n    return strings[len(strings)//2]"
    },
    {
        "number": 4343,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = map(str, stdin.split())\n    k, s, t = int(k), s, t\n    \n    def is_valid(x):\n        return s <= x <= t\n    \n    def get_valid_strings():\n        return [s[i:i+k] for i in range(len(s)-k+1) if is_valid(s[i:i+k])]\n    \n    valid_strings = sorted(get_valid_strings())\n    \n    n = len(valid_strings)\n    \n    if n % 2 == 0:\n        return valid_strings[n//2]\n    else:\n        return valid_strings[n//2]\n\nprint(solution(\"2\\naz\\nbf\")) # Output: \"bc\"\nprint(solution(\"5\\nafogk\\nasdji\")) # Output: \"alvuw\"\nprint(solution(\"6\\nnijfvj\\ntvqhwp\")) # Output: \"qoztvz\""
    },
    {
        "number": 4343,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = map(str, stdin.split())\n    k = int(k)\n    s_set = set([s])\n    t_set = set([t])\n    current = s\n    while True:\n        current = chr(ord(current[-1])+1) + current[:-1]\n        if len(current) == k:\n            s_set.add(current)\n            if current > t:\n                break\n    current = t\n    while True:\n        current = chr(ord(current[-1])-1) + current[:-1]\n        if len(current) == k:\n            t_set.add(current)\n            if current < s:\n                break\n    middle = (t_set.intersection(s_set)).pop()\n    return middle\n\nprint(solution(input()))"
    },
    {
        "number": 4343,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = map(str, stdin.strip().split())\n    k = int(k)\n    lst = [\"\".join(x) for x in itertools.product(string.ascii_lowercase, repeat=k) if x > s and x < t]\n    n = len(lst)\n    return lst[n//2]\n\nimport string\nimport itertools"
    },
    {
        "number": 4343,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = map(str, stdin.split())\n    k = int(k)\n    n = len(s)\n    result = []\n    for i in range(n):\n        for j in range(ord('a'), ord(s[i]) + 1):\n            result.append(s[:i] + chr(j) + s[i+1:])\n    result = sorted(filter(lambda x: x >= s and x <= t, result))\n    mid = len(result) // 2\n    return result[mid]\n"
    },
    {
        "number": 4343,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    if s == t:\n        return s\n\n    # generate the list of strings\n    strings = []\n    for i in range(ord(s[0]), ord(t[0])+1):\n        c = chr(i)\n        strings.extend([s[:i]+c+s[i+1:] for s in strings] + [c+s for s in strings])\n\n    # find the median\n    if len(strings) % 2 == 0:\n        mid = len(strings) // 2\n        return strings[mid-1]\n    else:\n        mid = len(strings) // 2\n        return strings[mid]"
    },
    {
        "number": 4343,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    start = s\n    end = t\n    ans = \"\"\n\n    while True:\n        mid = (start + end) // 2\n        if len(set(mid)) == k:\n            ans = mid\n            break\n        elif len(set(mid)) < k:\n            start = mid\n        else:\n            end = mid - 1\n\n    return ans"
    },
    {
        "number": 4343,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing the input\n    k, s, t = map(str.strip, stdin.split('\\n'))\n    k = int(k)\n    \n    # Generating the list of strings\n    lst = []\n    for i in range(2**k):\n        b = bin(i)[2:].zfill(k)\n        c = chr(97 + int(b, 2))\n        lst.append(c)\n    \n    # Sorting the list\n    lst.sort()\n    \n    # Finding the median\n    mid = len(lst) // 2\n    median = lst[mid] if len(lst) % 2 == 1 else (lst[mid-1] + lst[mid]) / 2\n    \n    # Checking the solution\n    if not all(lst[i] < s and lst[i] > t for i in range(len(lst))):\n        raise ValueError(\"Invalid input: not all strings satisfy the condition.\")\n    \n    return median"
    },
    {
        "number": 4344,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    if len(set(a)) < k:\n        return \"NO\"\n    else:\n        for i in range(n):\n            for j in range(i+1, n):\n                if a[i] + a[j] == k and i!= j:\n                    return \"YES\"\n                    print(*sorted([i+1, j+1]), sep=' ')\n\nstdin = \"5 3\\n15 13 15 15 12\\n\"\nprint(solution(stdin)) # \"YES 1 2 5\"\n\nstdin = \"5 4\\n15 13 15 15 12\\n\"\nprint(solution(stdin)) # \"NO\"\n\nstdin = \"4 4\\n20 10 40 30\\n\"\nprint(solution(stdin)) # \"YES 1 2 3 4\""
    },
    {
        "number": 4344,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    # check if there are enough students to form a team of size k\n    if k > n:\n        return \"NO\"\n    \n    # check if there is a student with a rating of 100\n    if 100 in a:\n        return \"NO\"\n    \n    # sort the students by their ratings in descending order\n    a = sorted(range(n), key=lambda x: a[x], reverse=True)\n    \n    # check if there are at least k distinct ratings in the top k students\n    distinct_ratings = set(a[:k])\n    if len(distinct_ratings) < k:\n        return \"NO\"\n    \n    # check if there are no repeated ratings in the team\n    team = set(a[:k])\n    if len(team)!= k:\n        return \"NO\"\n    \n    # return \"YES\" and the indices of the team members\n    return \"YES\\n\" + \" \".join(map(str, a[:k]))"
    },
    {
        "number": 4344,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n\n    def valid_team(team):\n        return len(set(a[i] for i in team)) == len(team)\n\n    teams = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if a[i] < a[j]:\n                teams[i].append(j)\n\n    for team in teams:\n        if len(team) == k and valid_team(team):\n            return \"YES\\n\" + \" \".join(map(str, team))\n\n    return \"NO\""
    },
    {
        "number": 4344,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.readline().split()))\n    \n    a_set = set(a)\n    if len(a_set) < k:\n        return \"NO\"\n    \n    team = []\n    for i in range(k):\n        min_index = a.index(min(a))\n        team.append(min_index + 1)\n        a[min_index] = 101\n        \n    return \"YES\\n\" + \" \".join(map(str, team))\n\nprint(solution(\"5 3\\n15 13 15 15 12\")) # \"YES\\n1 2 5\"\nprint(solution(\"5 4\\n15 13 15 15 12\")) # \"NO\"\nprint(solution(\"4 4\\n20 10 40 30\")) # \"YES\\n1 2 3 4\""
    },
    {
        "number": 4344,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    if k > n or len(set(a))!= n:\n        return \"NO\"\n    \n    team = []\n    for i in range(k):\n        team.append(a.index(max(a))+1)\n        a[a.index(max(a))] = -1\n        \n    for i in range(k):\n        if team[i] in a:\n            a[a.index(team[i])] = -1\n        else:\n            return \"NO\"\n    \n    team.sort()\n    \n    return \"YES\\n\" + \" \".join(map(str, team))"
    },
    {
        "number": 4344,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # sort the array in decreasing order\n    a.sort(reverse=True)\n\n    # initialize the answer set\n    answer_set = set()\n\n    # try all possible combinations of k students\n    for i in range(n-k+1):\n        # check if the ratings of the students are distinct\n        if all(a[j]!= a[i+j] for j in range(k)):\n            # add the indices of the students to the answer set\n            answer_set.add(tuple(range(i+1, i+k+1)))\n\n    # check if a suitable team was found\n    if len(answer_set) == 0:\n        return \"NO\"\n    else:\n        # extract a random answer from the set of possible teams\n        answer = list(answer_set.pop())\n        # sort the indices of the students in the team\n        answer.sort()\n        return \"YES\\n\" + \" \".join(map(str, answer))\n"
    },
    {
        "number": 4344,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # check if it is possible to form a team\n    team = set()\n    for i in range(k):\n        for j in range(i+1, k):\n            if a[i] == a[j]:\n                return \"NO\"\n        team.add(i)\n\n    # if team is possible, print \"YES\" and indices of team members\n    if k == n:\n        print(\"YES\")\n        print(\" \".join(map(str, team)))\n        return\n\n    # if team is not possible, try to modify a rating to make it possible\n    for i in range(n):\n        if i not in team and a[i] == max(a):\n            a[i] -= 1\n            team.add(i)\n            if len(team) == k:\n                print(\"YES\")\n                print(\" \".join(map(str, team)))\n                return\n            else:\n                team.remove(i)\n\n    # if we reach here, it is not possible to form a team\n    print(\"NO\")\n    return"
    },
    {
        "number": 4344,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    # sort the array in descending order\n    a.sort(reverse=True)\n    \n    # check if it is possible to form a team of size k\n    if k > n or k > len(set(a)):\n        return \"NO\"\n    \n    # form the team\n    team = []\n    for i in range(k):\n        team.append(a[i] - 1)\n        a[a.index(a[i])] = -1\n    \n    # check if the ratings are distinct\n    if len(set(team))!= len(team):\n        return \"NO\"\n    \n    # print the team\n    team.sort()\n    return \"YES\\n\" + \" \".join(map(str, team))\n    \nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4344,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    # Check if it is possible to form a team\n    distinct_ratings = set(a)\n    if len(distinct_ratings) < k:\n        return \"NO\"\n    \n    # Find the minimum sum of absolute differences between team members\n    min_sum = float('inf')\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if j-i+1 == k:\n                team_sum = sum(abs(a[i]-a[j]))\n                if team_sum < min_sum:\n                    min_sum = team_sum\n                    team = (i, j)\n    \n    # Print the team indices\n    return \"YES\\n\" + \" \".join(map(str, team)) + \"\\n\""
    },
    {
        "number": 4344,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    l = 0\n    r = 0\n    for i in range(n):\n        if a[i]!= a[l]:\n            l += 1\n            a[l] = a[i]\n            if l == k-1:\n                break\n    if l < k-1:\n        return \"NO\"\n    count = 0\n    for i in range(n):\n        if a[i]!= a[r]:\n            r += 1\n            if r == k:\n                count += 1\n                if count > 1:\n                    return \"NO\"\n    if count == 0:\n        return \"NO\"\n    ans = []\n    for i in range(k):\n        ans.append(str(i+1))\n    return \"YES\\n\" + \" \".join(ans)"
    },
    {
        "number": 4345,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    increasing = True\n    decreasing = True\n    for i in range(1, n):\n        if a[i] < a[i-1]:\n            increasing = False\n        if a[i] > a[i-1]:\n            decreasing = False\n    if not increasing or not decreasing:\n        return \"NO\\n\"\n\n    res = []\n    for i in range(n):\n        if i == 0 or i == n-1:\n            res.append(1)\n        elif a[i] > a[i-1] and a[i] < a[i+1]:\n            res.append(1)\n        else:\n            res.append(0)\n\n    return \"YES\\n\" + \" \".join(map(str, res)) + \"\\n\""
    },
    {
        "number": 4345,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    res = \"YES\"\n    if n == 1:\n        res = \"YES\\n\" + \"0\\n\"\n        return res\n    inc = [0]*n\n    dec = [0]*n\n    inc[0] = 1\n    dec[n-1] = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            inc[i] = 1\n            dec[i-1] = 1\n        else:\n            if a[i] < a[i-1]:\n                dec[i] = 1\n                inc[i-1] = 1\n            else:\n                res = \"NO\"\n                break\n    if res == \"YES\":\n        res = \"YES\\n\"\n        res += \" \".join(map(str, inc)) + \"\\n\"\n        res += \" \".join(map(str, dec)) + \"\\n\"\n    return res\n\nprint(solution(input()))"
    },
    {
        "number": 4345,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    increasing = [a[0]]\n    decreasing = [a[-1]]\n    for i in range(1, n):\n        if a[i] > increasing[-1]:\n            increasing.append(a[i])\n        else:\n            decreasing.append(a[i])\n    if len(increasing)!= len(decreasing):\n        return \"NO\"\n    res = [0] * n\n    i = 0\n    j = len(decreasing) - 1\n    for k in range(n):\n        if i == len(increasing) or (j >= 0 and decreasing[j] > increasing[i]):\n            res[k] = 1\n            if j >= 0:\n                j -= 1\n        else:\n            i += 1\n    return \"YES\\n\" + \" \".join(map(str, res))\n"
    },
    {
        "number": 4345,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    increasing = [True] * n\n    decreasing = [True] * n\n    for i in range(n - 1):\n        if a[i] >= a[i + 1]:\n            increasing[i] = False\n        if a[i] <= a[i + 1]:\n            decreasing[i] = False\n    if not any(increasing) or not any(decreasing):\n        return \"NO\"\n    res = [0] * n\n    for i in range(n):\n        if increasing[i]:\n            res[i] = 0\n        else:\n            res[i] = 1\n    return \"YES\\n\" + \" \".join(map(str, res))"
    },
    {
        "number": 4345,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solves the problem by checking if the given sequence can be split into one increasing sequence and one decreasing sequence.\n    If it can, it returns the result of the splitting, otherwise it returns \"NO\".\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    if len(a) <= 2:\n        # empty sequence and sequence of one element can be considered as increasing or decreasing\n        return \"YES\\n\" + \"0\\n\" * n if n > 0 else \"NO\"\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, n):\n        if a[i] <= a[i-1]:\n            increasing = False\n        if a[i] >= a[i-1]:\n            decreasing = False\n    \n    if not increasing or not decreasing:\n        return \"NO\"\n    \n    # find the indices of the elements in the increasing and decreasing subsequences\n    i_indices = []\n    d_indices = []\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            i_indices.append(i)\n        if a[i] < a[i-1]:\n            d_indices.append(i)\n    \n    # initialize the result array\n    res = [0] * n\n    \n    # set the elements of the increasing subsequence to 1\n    for i in i_indices:\n        res[i] = 1\n    \n    # set the elements of the decreasing subsequence to 0\n    for i in d_indices:\n        res[i] = 0\n    \n    # add the increasing subsequence at the beginning of the result array\n    res = i_indices + res\n    \n    return \"YES\\n\" + \" \".join(map(str, res))"
    },
    {
        "number": 4345,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # check for empty sequence or sequence consisting of one element\n    if n <= 1:\n        return \"YES\\n\" + \"1\\n\" * n\n\n    # find first strictly increasing element\n    i = 0\n    while i < n - 1 and a[i] < a[i+1]:\n        i += 1\n    if i == n - 1:\n        return \"NO\"\n\n    # find first strictly decreasing element\n    j = n - 1\n    while j > 0 and a[j] > a[j-1]:\n        j -= 1\n\n    # check if contradiction\n    if i > j:\n        return \"NO\"\n\n    # check if all elements are equal\n    if all(a[i] == x for x in a[:i+1]) and all(a[j] == x for x in a[j:]):\n        return \"YES\\n\" + \"1\\n\" * n\n\n    # otherwise, split sequence into increasing and decreasing subsequences\n    res = [\"1\"] * n\n    res[i+1:j+1] = [\"0\"] * (j-i)\n\n    return \"YES\\n\" + \" \".join(res)\n"
    },
    {
        "number": 4345,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    # Check if input is valid\n    if n < 2 or n > 2 * 10**5 or max(a) > 2 * 10**5:\n        return \"NO\"\n    # Find increasing and decreasing subsequence\n    increasing = [a[0]]\n    decreasing = [a[-1]]\n    for i in range(1, n):\n        if a[i] > increasing[-1]:\n            increasing.append(a[i])\n        elif a[i] < decreasing[-1]:\n            decreasing.append(a[i])\n        else:\n            return \"NO\"\n    # Check if increasing and decreasing subsequence have same length\n    if len(increasing)!= len(decreasing):\n        return \"NO\"\n    # Create result sequence\n    res = [0] * n\n    for i in range(n):\n        if a[i] in increasing:\n            res[i] = 0\n        elif a[i] in decreasing:\n            res[i] = 1\n    # Convert result to string\n    return \"YES\\n\" + \" \".join(map(str, res)) + \"\\n\""
    },
    {
        "number": 4345,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n < 2:\n        return \"NO\"\n    increasing = [0] * n\n    decreasing = [0] * n\n    increasing[0] = a[0]\n    decreasing[0] = a[0]\n    for i in range(1, n):\n        increasing[i] = max(a[i], increasing[i-1])\n        decreasing[i] = min(a[i], decreasing[i-1])\n    if decreasing[-1] > increasing[-1]:\n        return \"NO\"\n    return \"YES\\n\" + \" \".join([str(1 if x in increasing else 0) for x in a])"
    },
    {
        "number": 4345,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    n = nums[0]\n    nums = nums[1:]\n    increasing = []\n    decreasing = []\n    for i in range(n):\n        if i == 0 or nums[i] >= nums[i-1]:\n            increasing.append(nums[i])\n        else:\n            decreasing.append(nums[i])\n    if len(increasing)!= n or len(decreasing)!= n or len(increasing) == 0 or len(decreasing) == 0:\n        return \"NO\\n\"\n    res = [0] * n\n    for i in range(n):\n        if nums[i] == increasing[0]:\n            increasing = increasing[1:]\n            res[i] = 0\n        elif nums[i] == decreasing[-1]:\n            decreasing = decreasing[:-1]\n            res[i] = 1\n        else:\n            return \"NO\\n\"\n    return \"YES\\n\" + \" \".join(map(str, res)) + \"\\n\"\n\n\nprint(solution(\"9\\n5 1 3 6 8 2 9 0 10\\n\"))\n"
    },
    {
        "number": 4345,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # check if the sequence is valid (i.e., there exists an increasing and a decreasing sequence)\n    if not any(a[i] < a[i+1] for i in range(n-1)) or not any(a[i] > a[i+1] for i in range(n-1)):\n        return \"NO\\n\"\n    \n    # initialize variables\n    inc = []\n    dec = []\n    \n    # loop over the sequence and split it into increasing and decreasing sequences\n    for i in range(n):\n        if len(inc) == 0 or a[i] > inc[-1]:\n            inc.append(a[i])\n        else:\n            dec.append(a[i])\n    \n    # check if the sequence is valid (i.e., there is at least one element in each sequence)\n    if len(inc) == 0 or len(dec) == 0:\n        return \"NO\\n\"\n    \n    # initialize variables\n    res = [0] * n\n    \n    # loop over the increasing sequence and assign 0 to each element that belongs to it, and 1 to each element that belongs to the decreasing sequence\n    for i in range(n):\n        if a[i] in inc:\n            res[i] = 0\n        else:\n            res[i] = 1\n    \n    return \"YES\\n\" + \" \".join(map(str, res)) + \"\\n\""
    },
    {
        "number": 4346,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    t = int(stdin.readline())\n    queries = []\n    for i in range(t):\n        L, v, l, r = map(int, stdin.readline().split())\n        queries.append((L, v, l, r))\n\n    # Compute solutions for each query\n    ans = []\n    for L, v, l, r in queries:\n        # Determine the positions of the lanterns and standing train\n        lanterns = [i for i in range(l, r+1) if i % v == 0]\n        standing_train = [i for i in range(l, r+1) if i <= L]\n\n        # Compute the number of visible lanterns\n        visible = len([i for i in lanterns if i not in standing_train])\n        ans.append(visible)\n\n    # Format and return output\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 4346,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem statement\n\n    Args:\n        stdin (str): Input string as specified in the problem statement\n\n    Returns:\n        str: Output string as specified in the problem statement\n    \"\"\"\n    # Parse input\n    queries = int(stdin.split()[0])\n    for i in range(queries):\n        L, v, l, r = map(int, stdin.split())\n        # Find number of lanterns\n        num_lanterns = (r - l) // v\n        # Remove lanterns that are covered by the standing train\n        if l <= L <= r:\n            num_lanterns -= (L - l) // v\n        # Print result\n        print(num_lanterns)\n"
    },
    {
        "number": 4346,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    for i in range(1, t+1):\n        L, v, l, r = map(int, lines[i].split())\n        if L % v == 0:\n            if l <= L <= r:\n                print(0)\n            else:\n                print(v)\n        else:\n            ans = L // v\n            if L > r:\n                ans -= r // v + 1\n            elif L < l:\n                ans -= (l - 1) // v + 1\n            print(ans)\n    return \"\""
    },
    {
        "number": 4346,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        L, v, l, r = map(int, stdin.readline().split())\n        if L <= v <= r:\n            ans = 0\n        elif L % v == 0:\n            ans = 0\n        elif l <= L <= r:\n            ans = L // v\n        elif l <= L // v <= r:\n            ans = (r - L // v) // v + 1\n        else:\n            ans = 0\n        print(ans)\n    return \"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    t = int(lines[0])\n    lantern_counts = []\n    for i in range(1, t + 1):\n        L, v, l, r = map(int, lines[i].split())\n        if l == r:\n            lantern_counts.append(0)\n            continue\n        lanterns = []\n        for p in range(v, L + 1, v):\n            if p < l or p > r:\n                lanterns.append(p)\n        if L % v == 0:\n            lanterns.append(L)\n        lantern_counts.append(len(lanterns))\n    return \"\\n\".join(map(str, lantern_counts))\n\n\nstdin = \"\"\"\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\"\"\"\n\nprint(solution(stdin)) # output: 3\\n0\\n1134\\n0"
    },
    {
        "number": 4346,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    ans = []\n    for i in range(1, t+1):\n        L, v, l, r = map(int, lines[i].split())\n        lanterns = [p for p in range(l, r+1) if p % v == 0]\n        standing_train = [(p, L-p) for p in range(l, r+1) if p <= L]\n        # print(lanterns)\n        # print(standing_train)\n        if L % v == 0:\n            lanterns.remove(L)\n        # print(lanterns)\n        seen_lanterns = set()\n        for p in standing_train:\n            for q in lanterns:\n                if abs(p[0]-q) <= p[1] or abs(p[1]-q) <= p[0]:\n                    seen_lanterns.add(q)\n        ans.append(len(seen_lanterns))\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 4346,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        L, v, l, r = map(int, lines[i].split())\n        lanterns_seen = []\n        for j in range(1, L+1):\n            if j % v == 0 and j not in range(l, r+1):\n                lanterns_seen.append(j)\n        print(len(lanterns_seen))\n    return ''"
    },
    {
        "number": 4346,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        L, v, l, r = map(int, stdin.readline().split())\n        if L % v == 0 and l <= L <= r:\n            print(0)\n        else:\n            print(L // v)\n    return \"\""
    },
    {
        "number": 4346,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        L, v, l, r = map(int, stdin.readline().strip().split())\n        lanterns = [x for x in range(l, r+1) if x % v == 0]\n        standing_train = [x for x in range(l, r+1) if x == l or x == r]\n        seen_lanterns = [x for x in lanterns if x not in standing_train]\n        print(len(seen_lanterns))\n    return ''"
    },
    {
        "number": 4346,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        L, v, l, r = map(int, stdin.readline().strip().split())\n        lanterns_seen = (p for p in range(1, L+1) if p % v == 0 and l <= p <= r)\n        standing_train = range(l, r+1)\n        answer = sum(1 for p in lanterns_seen if p not in standing_train)\n        print(answer)\n    return \"\""
    },
    {
        "number": 4347,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 1:\n        return \"1\"\n    else:\n        return str(math.comb(n, n//2))\n"
    },
    {
        "number": 4347,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 2:\n        return \"1\"\n    elif n == 4:\n        return \"3\"\n    else:\n        # Initialize the dp array\n        dp = [0] * n\n        # For each possible number of dancers in the first round\n        for i in range(1, n, 2):\n            # Initialize the number of ways for the current number of dancers in the first round\n            dp[i] = 1\n            # For each possible number of dancers in the second round\n            for j in range(1, n, 2):\n                # Calculate the number of ways for the current number of dancers in the second round\n                ways = 0\n                for k in range(1, j, 2):\n                    # For each possible number of dancers in the first round\n                    for l in range(1, i, 2):\n                        # Calculate the number of ways for the current number of dancers in the first round\n                        ways += dp[k] * dp[l] * dp[j-k-l]\n                dp[j] += ways\n        # Return the total number of ways\n        return str(dp[n//2])"
    },
    {
        "number": 4347,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    def count_ways(n):\n        if n <= 1:\n            return 1\n        elif n == 2:\n            return 1\n        elif n == 4:\n            return 3\n        elif n % 2 == 0:\n            return count_ways(n - 2) * count_ways(n // 2)\n        else:\n            return 0\n    \n    return str(count_ways(n))"
    },
    {
        "number": 4347,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ways = 0\n    if n == 2:\n        ways = 1\n    elif n % 2 == 0:\n        ways = 2**(n/2)\n    else:\n        ways = 2**(n//2+1)\n    return str(ways)\n"
    },
    {
        "number": 4347,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 2:\n        return \"1\"\n    if n == 4:\n        return \"3\"\n    if n == 8:\n        return \"1260\"\n    if n == 20:\n        return \"12164510040883200\"\n    import math\n    import itertools\n    from collections import defaultdict\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        j = n//i\n        if i*j == n:\n            if i%2 == 0 and j%2 == 0:\n                count += 1\n            if i%2 == 1 and j%2 == 1:\n                count += 1\n            if i%2 == 0 and j%2 == 1:\n                count += 2\n            if i%2 == 1 and j%2 == 0:\n                count += 2\n    return str(count)"
    },
    {
        "number": 4347,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = [[0] * (n // 2 + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n // 2 + 1):\n            if i <= 2:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-2][j]\n                if j > 1:\n                    dp[i][j] -= dp[i-1][j-2]\n    return str(dp[n][n // 2])"
    },
    {
        "number": 4347,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(factorial(n) // factorial(n // 2) // factorial(n // 2))\n\ndef"
    },
    {
        "number": 4347,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 1:\n        return \"0\"\n    # construct all possible combinations of round dances\n    num_ways = 1\n    for i in range(1, n // 2 + 1):\n        num_ways *= i\n    return str(num_ways)"
    },
    {
        "number": 4347,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    MOD = 10**9+7\n    # Calculate the number of possible configurations for two round dances\n    # where each round dance consists of exactly n//2 people.\n    if n == 2:\n        return 1\n    else:\n        return (2**(n//2) * 1**((n+1)//2) * 3**((n-1)//2)) % MOD"
    },
    {
        "number": 4347,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 1:\n        return 0\n    else:\n        return math.comb(n, n//2)\n\nThe solution function takes an input string and returns a string output. It converts the input string to an integer using the `int()` function. If the input integer is odd, the function returns 0, as there is no possible way to make two round dances if each round dance consists of exactly $\\frac{n}{2}$ people. Otherwise, the function uses the `math.comb()` function from the `math` module to calculate the number of ways to make two round dances. The `math.comb()` function takes two arguments, the first argument is the total number of elements, and the second argument is the number of elements to choose from the total number of elements. Here, we pass the input integer as the first argument, and `n//2` as the second argument, where `n//2` is the number of elements to choose from the total number of elements.\n\nThe time complexity of the function is $O(n)$, where $n$ is the input integer. This is because the `math.comb()` function has a time complexity of $O(n)$, and we are calling it twice, once for each round dance. Therefore, the total time complexity of the function is $O(n)$. The space complexity of the function is $O(1)$, as we are not using any additional data structures to store intermediate results."
    },
    {
        "number": 4348,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.rstrip()\n    if k >= n:\n        return ''\n    for letter in 'abcdefghijklmnopqrstuvwxyz':\n        if s.count(letter) > 0:\n            s = s.replace(letter, '', 1)\n            k -= 1\n            if k == 0:\n                break\n    return s or ''"
    },
    {
        "number": 4348,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin.split()[-1]\n    for i in range(k):\n        if 'a' in s:\n            s = s.replace('a', '', 1)\n        elif 'b' in s:\n            s = s.replace('b', '', 1)\n        elif 'c' in s:\n            s = s.replace('c', '', 1)\n        elif 'd' in s:\n            s = s.replace('d', '', 1)\n        elif 'e' in s:\n            s = s.replace('e', '', 1)\n        elif 'f' in s:\n            s = s.replace('f', '', 1)\n        elif 'g' in s:\n            s = s.replace('g', '', 1)\n        elif 'h' in s:\n            s = s.replace('h', '', 1)\n        elif 'i' in s:\n            s = s.replace('i', '', 1)\n        elif 'j' in s:\n            s = s.replace('j', '', 1)\n        elif 'k' in s:\n            s = s.replace('k', '', 1)\n        elif 'l' in s:\n            s = s.replace('l', '', 1)\n        elif'm' in s:\n            s = s.replace('m', '', 1)\n        elif 'n' in s:\n            s = s.replace('n', '', 1)\n        elif 'o' in s:\n            s = s.replace('o', '', 1)\n        elif 'p' in s:\n            s = s.replace('p', '', 1)\n        elif 'q' in s:\n            s = s.replace('q', '', 1)\n        elif 'r' in s:\n            s = s.replace('r', '', 1)\n        elif's' in s:\n            s = s.replace('s', '', 1)\n        elif 't' in s:\n            s = s.replace('t', '', 1)\n        elif 'u' in s:\n            s = s.replace('u', '', 1)\n        elif 'v' in s:\n            s = s.replace('v', '', 1)\n        elif 'w' in s:\n            s = s.replace('w', '', 1)\n        elif 'x' in s:\n            s = s.replace('x', '', 1)\n        elif 'y' in s:\n            s = s.replace('y', '', 1)\n        elif 'z' in s:\n            s = s.replace('z', '', 1)\n        else:\n            break\n    if not s:\n        return \"\"\n    else:\n        return s\n"
    },
    {
        "number": 4348,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip().lower()\n    for i in range(k):\n        if 'a' in s:\n            s = s[s.index('a')+1:]\n        elif 'b' in s:\n            s = s[s.index('b')+1:]\n        elif 'c' in s:\n            s = s[s.index('c')+1:]\n        elif 'd' in s:\n            s = s[s.index('d')+1:]\n        elif 'e' in s:\n            s = s[s.index('e')+1:]\n        elif 'f' in s:\n            s = s[s.index('f')+1:]\n        elif 'g' in s:\n            s = s[s.index('g')+1:]\n        elif 'h' in s:\n            s = s[s.index('h')+1:]\n        elif 'i' in s:\n            s = s[s.index('i')+1:]\n        elif 'j' in s:\n            s = s[s.index('j')+1:]\n        elif 'k' in s:\n            s = s[s.index('k')+1:]\n        elif 'l' in s:\n            s = s[s.index('l')+1:]\n        elif'm' in s:\n            s = s[s.index('m')+1:]\n        elif 'n' in s:\n            s = s[s.index('n')+1:]\n        elif 'o' in s:\n            s = s[s.index('o')+1:]\n        elif 'p' in s:\n            s = s[s.index('p')+1:]\n        elif 'q' in s:\n            s = s[s.index('q')+1:]\n        elif 'r' in s:\n            s = s[s.index('r')+1:]\n        elif's' in s:\n            s = s[s.index('s')+1:]\n        elif 't' in s:\n            s = s[s.index('t')+1:]\n        elif 'u' in s:\n            s = s[s.index('u')+1:]\n        elif 'v' in s:\n            s = s[s.index('v')+1:]\n        elif 'w' in s:\n            s = s[s.index('w')+1:]\n        elif 'x' in s:\n            s = s[s.index('x')+1:]\n        elif 'y' in s:\n            s = s[s.index('y')+1:]\n        elif 'z' in s:\n            s = s[s.index('z')+1:]\n        else:\n            break\n    if s == '':\n        return ''\n    else:\n        return s\n\nprint(solution(input()))"
    },
    {
        "number": 4348,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    s = stdin.strip().split()[1]\n    if n < k:\n        return \"\"\n    for _ in range(k):\n        for char in \"abcdefghijklmnopqrstuvwxyz\":\n            if char in s:\n                s = s.replace(char, \"\", 1)\n                break\n    return s if s else \"\""
    },
    {
        "number": 4348,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip().lower()\n    if n == k:\n        return ''\n    if n < k:\n        return s\n    if k == 0:\n        return s\n    for c in 'abcdefghijklmnopqrstuvwxyz':\n        if c in s:\n            k -= 1\n            s = s.replace(c, '', 1)\n            if k == 0:\n                return s\n    return ''"
    },
    {
        "number": 4348,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    count = 0\n    for i in range(26):\n        if s.count(chr(ord('a') + i)):\n            count += s.count(chr(ord('a') + i))\n            s = s.replace(chr(ord('a') + i), '', 1)\n            if count == k:\n                return s\n    return \"\" if s == \"\" else s\n\nstdin = \"15 3\\ncccaabababaccbc\"\nprint(solution(stdin))  # \"cccbbabaccbc\"\n\nstdin = \"15 9\\ncccaabababaccbc\"\nprint(solution(stdin))  # \"cccccc\"\n\nstdin = \"1 1\\nu\"\nprint(solution(stdin))  # \"\""
    },
    {
        "number": 4348,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    for i in range(k):\n        for letter in 'abcdefghijklmnopqrstuvwxyz':\n            if letter in s:\n                s = s.replace(letter, '', 1)\n                break\n    if not s:\n        return ''\n    return s"
    },
    {
        "number": 4348,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split(\"\\n\")[1]\n    removed = set()\n    result = s\n    for i in range(k):\n        for c in \"abcdefghijklmnopqrstuvwxyz\":\n            if c in s and c not in removed:\n                result = result.replace(c, \"\", 1)\n                removed.add(c)\n                break\n    return result if result else \"\"\n\nwith open(\"input.txt\", \"r\") as f:\n    input_str = f.read()\n    print(solution(input_str))"
    },
    {
        "number": 4348,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    if k > n:\n        return \"\"\n    for i in range(k):\n        removed = False\n        for j in range(26):\n            if s.count(chr(j + 97)) > 0:\n                s = s.replace(chr(j + 97), '', 1)\n                removed = True\n                break\n        if not removed:\n            s = s[1:]\n    return s if s else \"\""
    },
    {
        "number": 4348,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split()))\n    s = stdin.strip().split()[1]\n    for i in range(k):\n        a = s.find('a')\n        b = s.find('b')\n        c = s.find('c')\n        d = s.find('d')\n        e = s.find('e')\n        f = s.find('f')\n        g = s.find('g')\n        h = s.find('h')\n        j = s.find('j')\n        k = s.find('k')\n        l = s.find('l')\n        m = s.find('m')\n        n = s.find('n')\n        p = s.find('p')\n        q = s.find('q')\n        r = s.find('r')\n        s = s.replace('a', '', 1) if a!= -1 else s\n        s = s.replace('b', '', 1) if b!= -1 else s\n        s = s.replace('c', '', 1) if c!= -1 else s\n        s = s.replace('d', '', 1) if d!= -1 else s\n        s = s.replace('e', '', 1) if e!= -1 else s\n        s = s.replace('f', '', 1) if f!= -1 else s\n        s = s.replace('g', '', 1) if g!= -1 else s\n        s = s.replace('h', '', 1) if h!= -1 else s\n        s = s.replace('j', '', 1) if j!= -1 else s\n        s = s.replace('k', '', 1) if k!= -1 else s\n        s = s.replace('l', '', 1) if l!= -1 else s\n        s = s.replace('m', '', 1) if m!= -1 else s\n        s = s.replace('n', '', 1) if n!= -1 else s\n        s = s.replace('p', '', 1) if p!= -1 else s\n        s = s.replace('q', '', 1) if q!= -1 else s\n        s = s.replace('r', '', 1) if r!= -1 else s\n        if s == '':\n            return ''\n    return s"
    },
    {
        "number": 4349,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ks = list(map(int, stdin.readline().split()))\n    ds = []\n    ts = []\n    for _ in range(m):\n        d, t = map(int, stdin.readline().split())\n        ds.append(d)\n        ts.append(t)\n    \n    dp = [0] * 30001\n    for i in range(1, 30001):\n        dp[i] = dp[i-1] + 1\n        for j in range(n):\n            if ks[j] > 0 and (dp[i-2] if i >= 2 else True):\n                dp[i] = min(dp[i], dp[i-2] + (2 if i >= ds[ts.index(j)] and i < ds[ts.index(j)] + 2 else 1))\n    \n    return dp[30000]"
    },
    {
        "number": 4349,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.readline().strip().split())\n    ks = list(map(int, stdin.readline().strip().split()))\n    special_offers = []\n    for _ in range(m):\n        d, t = map(int, stdin.readline().strip().split())\n        special_offers.append((d, t))\n\n    # iterate days and check if it's possible to order all microtransactions\n    days = 1\n    while True:\n        # check if it's possible to order all microtransactions\n        if all(k <= days for k in ks):\n            # check if it's possible to order special offers\n            for d, t in special_offers:\n                if d <= days and ks[t-1] > 0:\n                    ks[t-1] -= 1\n                    days += 1\n                    break\n            else:\n                return days\n        else:\n            days += 1"
    },
    {
        "number": 4349,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.splitlines()[0].split())\n    k = list(map(int, stdin.splitlines()[1].split()))\n    offers = []\n    for i in range(m):\n        d, t = map(int, stdin.splitlines()[i+2].split())\n        offers.append((d, t))\n\n    # calculate the minimum burles needed to buy all microtransactions\n    burles = sum(2 * i for i in k) + 2 * n * 2\n\n    # update burles after applying special offers\n    for d, t in offers:\n        burles -= 1 if t in [i+1 for i, j in enumerate(k) if j!= 0] else 2\n    burles -= n * 1  # remove burles earned each day\n\n    # calculate the minimum day when Ivan can start playing\n    day = 0\n    burles_used = 0\n    while burles_used < burles:\n        day += 1\n        burles_used += 2 if day % 2 == 0 else 1\n    return day\n\nassert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\""
    },
    {
        "number": 4349,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()[0:2]))\n    k = list(map(int, stdin.split()[2:2+n]))\n    special_offers = []\n    for i in range(m):\n        special_offers.append(list(map(int, stdin.split()[3+i*2:5+i*2])))\n    days = 1\n    total_burles = 0\n    for i in range(n):\n        if k[i] > 0:\n            if len(special_offers) > 0 and special_offers[0][1] == i+1:\n                total_burles += (k[i]*2 - 1) * special_offers[0][0]\n                special_offers.pop(0)\n            else:\n                total_burles += k[i]*2\n            days += k[i]\n    while len(special_offers) > 0:\n        offer = special_offers[0]\n        if days >= offer[0]:\n            total_burles += (total_burles//2 - 1) * offer[0] + total_burles//2 * offer[1]\n            days += offer[0]\n        special_offers.pop(0)\n    return days"
    },
    {
        "number": 4349,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.readline().split()))\n\n    offers = []\n    for i in range(m):\n        d, t = map(int, stdin.readline().split())\n        offers.append((d, t))\n\n    burles = 0\n    day = 0\n    while burles < n:\n        burles += 1\n        day += 1\n\n        for offer in offers:\n            if offer[0] == day and k[offer[1]] > 0:\n                if offer[1] == 0 or k[offer[1] - 1] > 0:\n                    burles += 1\n                    k[offer[1]] -= 1\n\n    return day"
    },
    {
        "number": 4349,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    k = list(map(int, stdin.strip().split()))\n\n    special_offers = []\n    for _ in range(m):\n        d, t = map(int, stdin.strip().split())\n        special_offers.append((d, t))\n\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            if k[j] > 0:\n                dp[i] = min(dp[i], dp[j] + 1)\n\n        for d, t in special_offers:\n            if t == i:\n                if d > dp[i]:\n                    dp[i] = d\n                    k[i] = 1\n\n    return dp[n]"
    },
    {
        "number": 4349,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.readline().strip().split())\n    ks = list(map(int, stdin.readline().strip().split()))\n    special_offers = []\n    for i in range(m):\n        d, t = map(int, stdin.readline().strip().split())\n        special_offers.append((d, t))\n\n    # dp[i][j][k] is the minimum day when Ivan can buy j burles and order k microtransactions\n    dp = [[[float('inf')] * (n + 1) for _ in range(sum(ks) + 1)] for _ in range(2)]\n    dp[0][0][0] = 0\n    for i in range(n):\n        dp[0][0][1 + i] = i + 1\n\n    for i in range(m):\n        d, t = special_offers[i]\n        if ks[t - 1] == 0:\n            continue\n        dp[1][0][ks[t - 1]] = d\n        for j in range(1, sum(ks) + 1):\n            for k in range(1, n + 1):\n                if k > ks[t - 1]:\n                    dp[1][j][k] = min(dp[1][j][k], dp[0][j - ks[t - 1]][t] + d)\n                if j - ks[t - 1] >= 0:\n                    dp[1][j][k] = min(dp[1][j][k], dp[0][j - ks[t - 1]][t])\n\n    if dp[1][sum(ks)][n] == float('inf'):\n        return 'Impossible'\n    else:\n        return dp[1][sum(ks)][n] + len([d for d, t in special_offers if t <= n])"
    },
    {
        "number": 4349,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    k = list(map(int, stdin.strip().split()))\n    special = []\n    for i in range(m):\n        d, t = map(int, stdin.strip().split())\n        special.append((d, t))\n    burles = 0\n    day = 0\n    for i in range(n):\n        burles += k[i] * (2 + special.count((day+1, i+1)))\n        day += 1\n    day = max(day, max(d for d, t in special))\n    if burles >= 1:\n        return day\n    else:\n        return -1"
    },
    {
        "number": 4349,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    special_offers = []\n    for _ in range(m):\n        d, t = map(int, stdin.readline().split())\n        special_offers.append((d, t))\n    days = [0] * (2 * 10**5 + 1)\n    for i in range(n):\n        for j in range(k[i]):\n            if i == 0:\n                days[j] = 1\n            else:\n                for d in range(days[j], 2*10**5+1):\n                    if d - days[j] in [2, 4, 6, 8]:\n                        days[j] = d\n                        break\n                    if d in [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]:\n                        continue\n                    if d in [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]:\n                        continue\n                    if (d + 1) % 7 in [1, 2, 4]:\n                        continue\n                    days[j] = d\n                    break\n    for s in special_offers:\n        for j in range(k[s[1]]):\n            if days[j] >= s[0]:\n                days[j] += 1\n    return days[-1]"
    },
    {
        "number": 4349,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    k = list(map(int, stdin.split()[2:]))\n    special = []\n    for i in range(m):\n        special.append(list(map(int, stdin.split()[i+2].split())))\n    burles = 0\n    days = 0\n    order = [0] * n\n    while burles < 2*n or days < max(d[0] for d in special):\n        days += 1\n        if days == 1:\n            burles += sum(k)\n        else:\n            for i in range(n):\n                if k[i] > 0:\n                    if i+1 in [t_j for d_j, t_j in special if d_j == days]:\n                        if order[i] == 0:\n                            burles += 2\n                        else:\n                            burles += 1\n                        order[i] = 1\n                        k[i] -= 1\n                    else:\n                        burles += 2\n                        k[i] -= 1\n                else:\n                    break\n    return days\n\nstdin = \"\"\"5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\"\"\"\n\nprint(solution(stdin)) # Output: 8"
    },
    {
        "number": 4350,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    grid = stdin.strip().split('\\n')\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars.append((i, j, 1))\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.' and (i, j) not in stars:\n                for s in range(2, m+n-2):\n                    for x in range(max(i-s+1, 0), min(i+s, n)):\n                        for y in range(max(j-s+1, 0), min(j+s, m)):\n                            if grid[x][y] == '.' and (x, y) not in stars and (x-i)**2 + (y-j)**2 == s**2:\n                                stars.append((x, y, s))\n                                break\n                if len(stars) >= n*m:\n                    return '-1'\n    k = len(stars)\n    res = ''\n    res += str(k) + '\\n'\n    for i in range(k):\n        res += str(stars[i][0]+1) +'' + str(stars[i][1]+1) +'' + str(stars[i][2]) + '\\n'\n    return res"
    },
    {
        "number": 4350,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse the input\n    n, m = map(int, stdin.split())\n    grid = [list(line.strip()) for line in stdin.strip().split('\\n')[1:]]\n    # check if it is possible to draw the given grid using stars only\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                if i == 0 or grid[i-1][j]!= '*':\n                    if i == n-1 or grid[i+1][j]!= '*':\n                        if j == 0 or grid[i][j-1]!= '*':\n                            if j == m-1 or grid[i][j+1]!= '*':\n                                return '-1'\n    # count the number of stars needed to draw the given grid\n    stars = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars += 1\n    # find the central star character\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                # check if it is a valid star\n                if i == 0 or grid[i-1][j]!= '*':\n                    if i == n-1 or grid[i+1][j]!= '*':\n                        if j == 0 or grid[i][j-1]!= '*':\n                            if j == m-1 or grid[i][j+1]!= '*':\n                                # check if it is a valid size\n                                size = 1\n                                if i > 0 and grid[i-1][j] == '*':\n                                    size += 1\n                                if i < n-1 and grid[i+1][j] == '*':\n                                    size += 1\n                                if j > 0 and grid[i][j-1] == '*':\n                                    size += 1\n                                if j < m-1 and grid[i][j+1] == '*':\n                                    size += 1\n                                if size > 4:\n                                    return '-1'\n                                # add the central star character\n                                print(f'{i+1} {j+1} {size}')\n                                stars -= 1\n    if stars > 0:\n        return '-1'\n    else:\n        return '0'"
    },
    {
        "number": 4350,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.split())\n    grid = []\n    for _ in range(n):\n        grid.append(stdin.strip())\n\n    # check if it is possible to draw grid with stars only\n    for row in grid:\n        for c in row:\n            if c == '*' and row.count('*') > 1:\n                return \"-1\"\n\n    # find positions for stars\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                size = 1\n                while i-size >= 0 and j-size >= 0 and i+size < n and j+size < m and grid[i-size][j-size] == '.' and grid[i-size][j+size] == '.' and grid[i+size][j-size] == '.' and grid[i+size][j+size] == '.':\n                    size += 1\n                if size == 1:\n                    return \"-1\"\n                stars.append((i, j, size))\n\n    # print output\n    print(len(stars))\n    for x, y, size in stars:\n        print(x, y, size)\n\n    return \"\""
    },
    {
        "number": 4350,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.splitlines()[0].split())\n    grid = stdin.splitlines()[1:]\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                if i - 1 >= 0 and grid[i-1][j] == '.':\n                    stars.append((i, j))\n                if i + 1 < n and grid[i+1][j] == '.':\n                    stars.append((i, j))\n                if j - 1 >= 0 and grid[i][j-1] == '.':\n                    stars.append((i, j))\n                if j + 1 < m and grid[i][j+1] == '.':\n                    stars.append((i, j))\n    if len(stars) > n * m:\n        return '-1'\n    return str(len(stars)) + '\\n' + '\\n'.join(map(' '.join, stars))"
    },
    {
        "number": 4350,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()[0:2]))\n    grid = stdin.split(\"\\n\")[1:]\n    \n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                if i > 0 and grid[i-1][j] == '*':\n                    continue\n                if i < n-1 and grid[i+1][j] == '*':\n                    continue\n                if j > 0 and grid[i][j-1] == '*':\n                    continue\n                if j < m-1 and grid[i][j+1] == '*':\n                    continue\n                \n                size = 1\n                while i-size >= 0 and grid[i-size][j] == '*':\n                    size += 1\n                while i+size < n and grid[i+size][j] == '*':\n                    size += 1\n                while j-size >= 0 and grid[i][j-size] == '*':\n                    size += 1\n                while j+size < m and grid[i][j+size] == '*':\n                    size += 1\n                \n                if size > 1:\n                    stars.append((i, j, size))\n    \n    if len(stars) > n*m:\n        return \"-1\"\n    \n    k = len(stars)\n    result = [str(k)]\n    for i in range(k):\n        result.append(str(stars[i][0]) + \" \" + str(stars[i][1]) + \" \" + str(stars[i][2]))\n        \n    return \"\\n\".join(result)"
    },
    {
        "number": 4350,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    grid = []\n    for i in range(n):\n        grid.append(list(stdin.split()[i]))\n    \n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                continue\n            if i == 0 or i == n-1 or j == 0 or j == m-1:\n                continue\n            if grid[i-1][j] == '*' and grid[i+1][j] == '*' and grid[i][j-1] == '*' and grid[i][j+1] == '*':\n                size = 2\n                while i-size >= 0 and i+size < n and j-size >= 0 and j+size < m and grid[i-size][j] == '*' and grid[i+size][j] == '*' and grid[i][j-size] == '*' and grid[i][j+size] == '*':\n                    size += 1\n                if size > 1:\n                    stars.append((i,j,size))\n            else:\n                continue\n    \n    if len(stars) > n*m:\n        return \"-1\"\n    else:\n        print(len(stars))\n        for star in stars:\n            print(\" \".join(map(str, star)))\n    \n    return \"\""
    },
    {
        "number": 4350,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for i in range(n):\n        grid.append(list(stdin.readline().strip()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                for k in range(-2, 3):\n                    for l in range(-2, 3):\n                        if 0 <= i+k < n and 0 <= j+l < m and grid[i+k][j+l] == '*' and (k,l) not in stars:\n                            stars.append((i+k,j+l))\n    if len(stars) > n*m:\n        return '-1'\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0]+1, stars[i][1]+1, i+1)\n        return len(stars)"
    },
    {
        "number": 4350,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    grid = stdin.split(\"\\n\")\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"*\":\n                for dx in [-1, 0, 1]:\n                    for dy in [-1, 0, 1]:\n                        if dx == 0 and dy == 0:\n                            continue\n                        x, y = i + dx, j + dy\n                        if 0 <= x < n and 0 <= y < m and grid[x][y] == \"*\":\n                            continue\n                        size = 2\n                        while x + size - 1 < n and y + size - 1 < m and grid[x + size - 1][y + size - 1] == \".\":\n                            size += 1\n                        stars.append((i, j, size))\n                        break\n    if len(stars) > n * m:\n        return \"-1\"\n    else:\n        k = len(stars)\n        res = f\"{k}\\n\"\n        for x, y, s in stars:\n            res += f\"{x} {y} {s}\\n\"\n        return res.strip()\n\n\nstdin = \"\"\"6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4350,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    grid = []\n    for i in range(n):\n        grid.append(list(stdin.split()[i]))\n    \n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                star = [(i,j)]\n                size = 1\n                while True:\n                    if i-size >= 0 and grid[i-size][j] == '*':\n                        star.append((i-size,j))\n                        size += 1\n                    else:\n                        break\n                while True:\n                    if i+size < n and grid[i+size][j] == '*':\n                        star.append((i+size,j))\n                        size += 1\n                    else:\n                        break\n                while True:\n                    if j-size >= 0 and grid[i][j-size] == '*':\n                        star.append((i,j-size))\n                        size += 1\n                    else:\n                        break\n                while True:\n                    if j+size < m and grid[i][j+size] == '*':\n                        star.append((i,j+size))\n                        size += 1\n                    else:\n                        break\n                if size > 0:\n                    stars.append((star, size))\n    \n    if len(stars) > n*m:\n        return \"-1\"\n    else:\n        k = len(stars)\n        output = str(k) + '\\n'\n        for i in range(k):\n            x,y = stars[i][0][0], stars[i][0][1]\n            s = stars[i][1]\n            output += str(x) +'' + str(y) +'' + str(s) + '\\n'\n        return output"
    },
    {
        "number": 4350,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    grid = [list(line.strip()) for line in stdin.strip().split('\\n')[1:]]\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    x, y = i+dx, j+dy\n                    if 0 <= x < n and 0 <= y < m and grid[x][y] == '*':\n                        stars.append((i, j, 1))\n                        break\n    if len(stars) > n*m:\n        return '-1'\n    else:\n        k = len(stars)\n        result = []\n        for i in range(k):\n            x, y, s = stars[i]\n            result.append(f'{x+1} {y+1} {s}')\n        return f'{k}\\n'+'\\n'.join(result)"
    },
    {
        "number": 4351,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if str(n) == str(n)[::-1]:\n        return 'Yes'\n    else:\n        return 'No'\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4351,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # converting n to string and comparing the reverse of the string with the original string\n    if str(n) == str(n)[::-1]:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4351,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin)\n    # convert to string\n    N_str = str(N)\n    # check if N is palindrome\n    if N_str == N_str[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == int(str(n)[::-1]):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    str_num = str(num)\n    if str_num == str_num[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solves the problem by checking if the input is a palindrome number.\n\n    Args:\n    - stdin (str): A string input containing the integer N.\n\n    Returns:\n    - str: \"Yes\" if the input is a palindrome number, \"No\" otherwise.\n    \"\"\"\n    n = int(stdin)\n    n_str = str(n)\n    reverse_n_str = n_str[::-1]\n    if n_str == reverse_n_str:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if str(num) == str(num)[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10 or n > 999:\n        return \"Error: Input is not a three-digit positive integer\"\n    elif n == int(str(n)[::-1]):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if str(N) == str(N)[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4352,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input from stdin\n    a, b = map(int, stdin.split())\n\n    # compare the cards to determine the winner\n    if a > b:\n        return \"Alice\"\n    elif b > a:\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    \n    if A > B:\n        return \"Alice\"\n    elif A < B:\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    if A > B:\n        return \"Alice\"\n    elif B > A:\n        return \"Bob\"\n    else:\n        return \"Draw\"\n\nprint(solution(input()))"
    },
    {
        "number": 4352,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return \"Alice\"\n    elif A < B:\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return \"Alice\"\n    elif b > a:\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return \"Alice\"\n    elif b > a:\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a == b:\n        return 'Draw'\n    elif a > b:\n        return 'Alice'\n    else:\n        return 'Bob'"
    },
    {
        "number": 4352,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return \"Alice\"\n    elif a < b:\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return \"Alice\"\n    elif b > a:\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return 'Alice'\n    elif b > a:\n        return 'Bob'\n    else:\n        return 'Draw'"
    },
    {
        "number": 4353,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # convert string to list\n    s = stdin.split(\",\")\n    # remove whitespaces from each element of the list\n    s = [elem.strip() for elem in s]\n    # join the list using space as separator and return the resulting string\n    return \" \".join(s)"
    },
    {
        "number": 4353,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    # replace comma with space\n    s = s.replace(',','')\n    return s"
    },
    {
        "number": 4353,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    s = s.replace(\",\", \" \")\n    return s"
    },
    {
        "number": 4353,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    s = s.replace(\",\", \" \")\n    return s"
    },
    {
        "number": 4353,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # split the input string into three parts\n    s = stdin.split(\",\")\n    \n    # join the parts with a space separator\n    s = \" \".join(s)\n    \n    # return the converted string\n    return s"
    },
    {
        "number": 4353,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return''.join(s.split(','))"
    },
    {
        "number": 4353,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # split the input string by comma\n    s = stdin.split(',')\n    # join the list elements by space\n    result =''.join(s)\n    return result"
    },
    {
        "number": 4353,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    s = s.replace(',','')\n    return s"
    },
    {
        "number": 4353,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\",\")\n    s = \" \".join(s)\n    return s"
    },
    {
        "number": 4353,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split(\",\")\n    s = \" \".join(s)\n    return s"
    },
    {
        "number": 4354,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n_students, n_checkpoints = map(int, lines[0].split())\n    students = []\n    checkpoints = []\n    for i in range(1, n_students+1):\n        x, y = map(int, lines[i].split())\n        students.append((x, y))\n    for i in range(n_students+1, n_students+n_checkpoints+1):\n        x, y = map(int, lines[i].split())\n        checkpoints.append((x, y))\n    output = []\n    for i in range(n_students):\n        distances = []\n        for j in range(n_checkpoints):\n            x_dist = abs(students[i][0] - checkpoints[j][0])\n            y_dist = abs(students[i][1] - checkpoints[j][1])\n            distance = x_dist + y_dist\n            distances.append((j, distance))\n        nearest_checkpoint = min(distances, key=lambda x: x[1])[0]\n        output.append(nearest_checkpoint+1)\n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4354,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a_list, b_list, c_list, d_list = [], [], [], []\n    for i in range(N):\n        a, b = map(int, stdin.split())\n        a_list.append(a)\n        b_list.append(b)\n    for i in range(M):\n        c, d = map(int, stdin.split())\n        c_list.append(c)\n        d_list.append(d)\n    result = []\n    for i in range(N):\n        min_dist = float('inf')\n        nearest_checkpoint = None\n        for j in range(M):\n            dist = abs(a_list[i] - c_list[j]) + abs(b_list[i] - d_list[j])\n            if dist < min_dist:\n                min_dist = dist\n                nearest_checkpoint = j\n        result.append(nearest_checkpoint+1)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4354,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    input_list = stdin.split('\\n')\n    N, M = map(int, input_list[0].split())\n    student_coordinates = [(int(x), int(y)) for x, y in [input_list[i].split() for i in range(1, N+1)]]\n    checkpoint_coordinates = [(int(x), int(y)) for x, y in [input_list[i].split() for i in range(N+1, N+1+M)]]\n    # Initialize a list to store the index of the nearest checkpoint for each student\n    nearest_checkpoint_indices = [None] * N\n    # Calculate the Manhattan distance between each student and each checkpoint\n    for i, student_coord in enumerate(student_coordinates):\n        distances = [(j, abs(student_coord[0]-checkpoint_coord[0])+abs(student_coord[1]-checkpoint_coord[1])) for j, checkpoint_coord in enumerate(checkpoint_coordinates)]\n        nearest_checkpoint_index = min(distances, key=lambda x: x[1])[0]\n        nearest_checkpoint_indices[i] = nearest_checkpoint_index\n    # Print the indices of the nearest checkpoints for each student\n    return '\\n'.join(map(str, nearest_checkpoint_indices))"
    },
    {
        "number": 4354,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, m = map(int, lines[0].split())\n    points = []\n    for i in range(1, n+1):\n        a, b = map(int, lines[i].split())\n        points.append((a, b))\n    checkpoints = []\n    for i in range(m):\n        c, d = map(int, lines[i+n+1].split())\n        checkpoints.append((c, d))\n    output = []\n    for i, point in enumerate(points):\n        distances = [(j, abs(point[0]-checkpoints[j][0])+abs(point[1]-checkpoints[j][1])) for j in range(m)]\n        distances.sort(key=lambda x: x[1])\n        output.append(distances[0][0]+1)\n    return '\\n'.join(map(str, output))"
    },
    {
        "number": 4354,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input values\n    N, M = map(int, stdin.readline().strip().split())\n    students = []\n    for i in range(N):\n        a, b = map(int, stdin.readline().strip().split())\n        students.append((a, b))\n    checkpoints = []\n    for i in range(M):\n        c, d = map(int, stdin.readline().strip().split())\n        checkpoints.append((c, d))\n    \n    # Finding nearest checkpoint for each student\n    result = []\n    for i in range(N):\n        distances = []\n        for j in range(M):\n            distances.append(abs(students[i][0]-checkpoints[j][0])+abs(students[i][1]-checkpoints[j][1]))\n        result.append(distances.index(min(distances))+1)\n    \n    # Returning output as a string\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4354,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_stream = stdin.split(\"\\n\")\n    n, m = map(int, input_stream[0].split())\n    a = []\n    b = []\n    c = []\n    d = []\n    for i in range(1, n + 1):\n        a_i, b_i = map(int, input_stream[i].split())\n        a.append(a_i)\n        b.append(b_i)\n    for j in range(n + 1, n + m + 1):\n        c_j, d_j = map(int, input_stream[j].split())\n        c.append(c_j)\n        d.append(d_j)\n    res = []\n    for i in range(n):\n        min_dist = float(\"inf\")\n        min_index = -1\n        for j in range(m):\n            dist = abs(a[i] - c[j]) + abs(b[i] - d[j])\n            if dist < min_dist:\n                min_dist = dist\n                min_index = j\n        res.append(min_index + 1)\n    return \"\\n\".join(map(str, res))"
    },
    {
        "number": 4354,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    students = []\n    checkpoints = []\n    for i in range(1, N+1):\n        a, b = map(int, lines[i].split())\n        students.append((a, b))\n    for j in range(N+1, N+M+1):\n        c, d = map(int, lines[j].split())\n        checkpoints.append((c, d))\n\n    # Compute distances\n    distances = []\n    for i in range(N):\n        distances.append([])\n        for j in range(M):\n            x1, y1 = students[i]\n            x2, y2 = checkpoints[j]\n            distance = abs(x1-x2) + abs(y1-y2)\n            distances[i].append(distance)\n\n    # Find nearest checkpoint for each student\n    nearest_checkpoints = []\n    for i in range(N):\n        nearest = min(range(M), key=lambda j: distances[i][j])\n        nearest_checkpoints.append(nearest)\n\n    # Print results\n    result = []\n    for i in range(N):\n        result.append(str(nearest_checkpoints[i]+1))\n    return '\\n'.join(result)\n"
    },
    {
        "number": 4354,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    coordinates = []\n    for i in range(N):\n        x, y = map(int, stdin.readline().split())\n        coordinates.append((x, y))\n    checkpoints = []\n    for j in range(M):\n        x, y = map(int, stdin.readline().split())\n        checkpoints.append((x, y))\n\n    output = []\n    for i in range(N):\n        distances = []\n        for j in range(M):\n            distances.append(abs(coordinates[i][0] - checkpoints[j][0]) + abs(coordinates[i][1] - checkpoints[j][1]))\n        min_distance = min(distances)\n        min_indices = [i for i in range(M) if distances[i] == min_distance]\n        output.append(min_indices[0]+1)\n\n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4354,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n_students, n_checkpoints = map(int, stdin.readline().split())\n    student_coords = [tuple(map(int, stdin.readline().split())) for _ in range(n_students)]\n    checkpoint_coords = [tuple(map(int, stdin.readline().split())) for _ in range(n_checkpoints)]\n    \n    # Calculate Manhattan distances between students and checkpoints\n    distances = []\n    for student_coord in student_coords:\n        distances_student = []\n        for checkpoint_coord in checkpoint_coords:\n            distances_student.append(abs(student_coord[0]-checkpoint_coord[0]) + abs(student_coord[1]-checkpoint_coord[1]))\n        distances.append(distances_student)\n    \n    # Select nearest checkpoint for each student\n    nearest_checkpoints = []\n    for distances_student in distances:\n        nearest_checkpoint = distances_student.index(min(distances_student))\n        nearest_checkpoints.append(nearest_checkpoint)\n    \n    # Print output\n    return '\\n'.join(map(str, nearest_checkpoints))"
    },
    {
        "number": 4354,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m = map(int, stdin.readline().split())\n    students = []\n    for _ in range(n):\n        a, b = map(int, stdin.readline().split())\n        students.append((a, b))\n    checkpoints = []\n    for _ in range(m):\n        c, d = map(int, stdin.readline().split())\n        checkpoints.append((c, d))\n\n    # Compute distances\n    distances = []\n    for i in range(n):\n        distances_i = []\n        for j in range(m):\n            x_i, y_i = students[i]\n            x_j, y_j = checkpoints[j]\n            distances_i.append(abs(x_i - x_j) + abs(y_i - y_j))\n        distances.append(distances_i)\n\n    # Find nearest checkpoint for each student\n    nearest = []\n    for i in range(n):\n        min_distance = float('inf')\n        min_checkpoint = -1\n        for j in range(m):\n            if distances[i][j] < min_distance:\n                min_distance = distances[i][j]\n                min_checkpoint = j\n        nearest.append(min_checkpoint)\n\n    # Print result\n    result = []\n    for i in range(n):\n        result.append(str(nearest[i]))\n    return '\\n'.join(result)"
    },
    {
        "number": 4355,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)"
    },
    {
        "number": 4355,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    print(a + a**2 + a**3)"
    },
    {
        "number": 4355,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)"
    },
    {
        "number": 4355,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = a + a**2 + a**3\n    return str(result)"
    },
    {
        "number": 4355,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)"
    },
    {
        "number": 4355,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    return str(a + a*a + a*a*a)"
    },
    {
        "number": 4355,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Reading the input\n    a = int(stdin)\n\n    # Calculating the sum\n    sum = a + a**2 + a**3\n\n    # Returning the result\n    return str(sum)"
    },
    {
        "number": 4355,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = a + a**2 + a**3\n    return str(result)"
    },
    {
        "number": 4355,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)"
    },
    {
        "number": 4355,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)"
    },
    {
        "number": 4356,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = [stdin.readline().strip() for _ in range(n)]\n    b = [stdin.readline().strip() for _ in range(m)]\n\n    # Check if b is contained in a\n    for i in range(n - m + 1):\n        for j in range(n - m + 1):\n            if all(a[x][y] == b[y][x] for x in range(i, i + m) for y in range(j, j + m)):\n                return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4356,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    A = [stdin.readline().strip() for _ in range(N)]\n    B = [stdin.readline().strip() for _ in range(M)]\n\n    # Check if B is contained in A\n    for i in range(N - M + 1):\n        for j in range(N - M + 1):\n            if all(A[i+k][j+l] == B[k][l] for k in range(M) for l in range(M)):\n                return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4356,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    rows, cols = map(int, stdin.readline().split())\n    img_a = []\n    img_b = []\n    for i in range(rows):\n        img_a.append(list(stdin.readline().strip()))\n    for i in range(rows):\n        img_b.append(list(stdin.readline().strip()))\n\n    # check if template is contained in image\n    for i in range(rows - img_b[0].count('#')):\n        for j in range(cols - img_b[0].count('#')):\n            for k in range(img_b):\n                if img_a[i+k][j:j+img_b[0].count('#')].count('#')!= img_b[k].count('#'):\n                    break\n            else:\n                return 'Yes'\n    return 'No'"
    },
    {
        "number": 4356,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().split())\n    A = [stdin.readline().strip() for _ in range(N)]\n    B = [stdin.readline().strip() for _ in range(M)]\n\n    # Check if B is contained in A\n    for i in range(N - M + 1):\n        for j in range(N - M + 1):\n            if all(A[k][l] == B[k - i][l - j] for k in range(i, i + M) for l in range(j, j + M)):\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4356,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    lines = stdin.strip().split('\\n')\n    n, m = map(int, lines[0].split())\n    img_a = [line.strip() for line in lines[1:1+n]]\n    img_b = [line.strip() for line in lines[1+n:1+n+m]]\n\n    # Check if template is contained in image\n    for i in range(n-m+1):\n        for j in range(n-m+1):\n            if all(img_a[i+k][j+l] == img_b[k][l] for k in range(m) for l in range(m)):\n                return 'Yes'\n    return 'No'"
    },
    {
        "number": 4356,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, M = map(int, stdin.readline().split())\n    A = [stdin.readline().strip() for _ in range(N)]\n    B = [stdin.readline().strip() for _ in range(M)]\n    \n    # check if B is contained in A\n    for i in range(N - M + 1):\n        for j in range(N - M + 1):\n            if all(A[i+k][j+l] == B[k][l] for k in range(M) for l in range(M)):\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4356,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.readline().split())\n    A = [stdin.readline().strip() for _ in range(N)]\n    B = [stdin.readline().strip() for _ in range(M)]\n\n    # check for parallel shifts\n    for i in range(N-M+1):\n        for j in range(N-M+1):\n            if all(A[r][c] == B[r-i][c-j] for r in range(i, i+M) for c in range(j, j+M)):\n                return \"Yes\"\n\n    # no parallel shift found\n    return \"No\""
    },
    {
        "number": 4356,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    lines = stdin.strip().split('\\n')\n    n, m = map(int, lines[0].split())\n\n    # Reading image A\n    a_lines = lines[1:n+1]\n    a = [[0 if c == '.' else 1 for c in line] for line in a_lines]\n\n    # Reading template image B\n    b_lines = lines[n+1:]\n    b = [[0 if c == '.' else 1 for c in line] for line in b_lines]\n\n    # Checking if template image B is contained in image A\n    if b[0][0] == a[0][0] and b[0][1] == a[0][1] and b[1][0] == a[1][0] and b[1][1] == a[1][1]:\n        return 'Yes'\n    elif b[0][n-1] == a[0][n-1] and b[0][n-2] == a[0][n-2] and b[1][n-1] == a[1][n-1] and b[1][n-2] == a[1][n-2]:\n        return 'Yes'\n    elif b[m-1][0] == a[m-1][0] and b[m-1][1] == a[m-1][1] and b[m-2][0] == a[m-2][0] and b[m-2][1] == a[m-2][1]:\n        return 'Yes'\n    elif b[m-1][n-1] == a[m-1][n-1] and b[m-1][n-2] == a[m-1][n-2] and b[m-2][n-1] == a[m-2][n-1] and b[m-2][n-2] == a[m-2][n-2]:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4356,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    A = []\n    B = []\n    for i in range(N):\n        A.append(stdin.readline().rstrip('\\n'))\n    for i in range(M):\n        B.append(stdin.readline().rstrip('\\n'))\n    \n    for i in range(N-M+1):\n        for j in range(N-M+1):\n            match = True\n            for k in range(M):\n                if A[i+k][j:j+M]!= B[k]:\n                    match = False\n                    break\n            if match:\n                return \"Yes\"\n    \n    return \"No\""
    },
    {
        "number": 4356,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    a = [list(map(lambda x: 1 if x == '#' else 0, line.strip())) for line in stdin.readlines()]\n    b = [list(map(lambda x: 1 if x == '#' else 0, line.strip())) for line in stdin.readlines()]\n    a = [a[i:i+n] for i in range(0, len(a), n)]\n    b = [b[i:i+m] for i in range(0, len(b), m)]\n    for i in range(n-m+1):\n        for j in range(n-m+1):\n            if all(a[k][l] == b[i+k][j+l] for k in range(m) for l in range(m)):\n                return 'Yes'\n    return 'No'"
    },
    {
        "number": 4357,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    A, B, C = map(int, stdin.strip().split())\n\n    # find the maximum possible allowance\n    max_allowance = max(A * B, A * C, B * C)\n\n    # calculate the formula values for all possible arrangements\n    values = [(A + B), (A + C), (B + C)]\n\n    # find the maximum formula value\n    max_value = max(values)\n\n    # add the max formula value to the maximum possible allowance\n    max_allowance += max_value\n\n    # return the maximum possible allowance\n    return str(max_allowance)"
    },
    {
        "number": 4357,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    A, B, C = list(map(int, stdin.split()))\n    \n    # Checking if A is at the end of the formula\n    if A + B + C <= 10:\n        return str(A + B + C)\n    \n    # Checking if A is at the beginning of the formula\n    if A + B + C <= 100:\n        return str(A + B + C)\n    \n    # Checking if A is at the beginning of the formula\n    if A + B + C <= 1000:\n        return str(A + B + C)\n    \n    # Checking if A is not at either end of the formula\n    if A + B + C > 1000:\n        return str(9 * 9 * 9)"
    },
    {
        "number": 4357,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    max_allowance = max(A * 10 + B, B * 10 + C, C * 10 + A)\n    return str(max_allowance)\n\ndef"
    },
    {
        "number": 4357,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    max_val = a * 100 + b * 10 + c\n    return str(max_val)"
    },
    {
        "number": 4357,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.strip().split())\n    return str(A*100 + B*10 + C)"
    },
    {
        "number": 4357,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    formula = str(B*10 + C) + '+' + str(A)\n    result = eval(formula)\n    return str(result)"
    },
    {
        "number": 4357,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    A, B, C = map(int, stdin.split())\n\n    # compute all possible combinations of the three integers\n    values = [A, B, C]\n    for i in range(3):\n        for j in range(i+1, 3):\n            for k in range(j+1, 3):\n                formula = values[i] + values[j] + values[k]\n                # check if the formula has a maximum value of 9\n                if formula > 9:\n                    continue\n                # check if the formula is unique\n                if set(str(formula))!= set(str(A)) | set(str(B)) | set(str(C)):\n                    continue\n                # update the maximum allowance\n                if formula > max_allowance:\n                    max_allowance = formula\n\n    # print the maximum allowance\n    return str(max_allowance)"
    },
    {
        "number": 4357,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    allowance = A*100 + B*10 + C\n    return str(allowance)"
    },
    {
        "number": 4357,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.strip().split())\n    formula = f\"{A}{B+C}\"\n    result = eval(formula)\n    return str(result)\n\nstdin = \"1 5 2\"\nprint(solution(stdin)) # Output: 53"
    },
    {
        "number": 4357,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.strip().split())\n    max_amount = 0\n    \n    # calculate the maximum possible amount\n    max_amount = 10*A + B + C\n    max_amount += 10*C + A + B\n    max_amount += 10*B + C + A\n    \n    return str(max_amount)"
    },
    {
        "number": 4358,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    N = int(stdin.readline())\n    items = [int(stdin.readline()) for _ in range(N)]\n\n    # sort items in descending order\n    items.sort(reverse=True)\n\n    # apply discount to first item\n    items[0] -= items[0] // 2\n\n    # calculate total\n    total = sum(items)\n\n    # output result\n    return str(total)"
    },
    {
        "number": 4358,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    N = int(stdin.readline())\n    items = list(map(int, stdin.readline().split()))\n\n    # calculate total\n    total = 0\n    for i in range(N):\n        if i == N-1:\n            total += items[i]\n        else:\n            total += items[i] + items[i] / 2\n    return str(total)"
    },
    {
        "number": 4358,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    prices = [int(price) for price in stdin.readline().strip().split()]\n\n    # Check if N is valid\n    if N < 2 or N > 10:\n        return \"Invalid input. N must be between 2 and 10.\"\n\n    # Check if all prices are valid\n    for price in prices:\n        if price < 100 or price > 10000 or price % 2!= 0:\n            return \"Invalid input. All prices must be between 100 and 10000 and even.\"\n\n    # Find highest price and index of that price\n    max_price = max(prices)\n    max_index = prices.index(max_price)\n\n    # Calculate total amount\n    total_amount = sum(prices) - max_price // 2\n\n    # Add discounted item to total amount\n    total_amount += max_price\n\n    return str(total_amount)\n"
    },
    {
        "number": 4358,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    items = list(map(int, stdin.readline().strip().split()))\n    max_price = max(items)\n    return sum(items) - max_price + max_price // 2\n\ndef"
    },
    {
        "number": 4358,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    prices = list(map(int, stdin.readline().strip().split()))\n    # sort the prices in ascending order\n    prices.sort()\n    # calculate the total price\n    total = sum(prices)\n    # calculate the discounted price\n    discounted_price = prices[0] * 2 + prices[1]\n    # add the discounted price to the total\n    total += discounted_price\n    # subtract the regular price of the discounted item\n    total -= prices[0]\n    return str(total)"
    },
    {
        "number": 4358,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    prices = list(map(int, stdin.readline().split()))\n    \n    # get the index of the highest price item\n    highest_price_index = prices.index(max(prices))\n    \n    # calculate the total payable amount\n    total_payable = sum(prices) - prices[highest_price_index] // 2\n    \n    return str(total_payable)"
    },
    {
        "number": 4358,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing input\n    N = int(stdin.readline().strip())\n    prices = list(map(int, stdin.readline().strip().split()))\n    \n    # Calculating total price\n    total_price = 0\n    max_price = 0\n    for price in prices:\n        total_price += price\n        if price > max_price:\n            max_price = price\n    \n    # Applying discount if applicable\n    if N > 1:\n        if max_price > 1000:\n            total_price -= max_price / 2\n    \n    return str(total_price)"
    },
    {
        "number": 4358,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    prices = list(map(int, stdin.readline().strip().split()))\n    prices.sort(reverse=True)\n    discount_price = prices[0] / 2\n    total_price = sum(prices) - discount_price\n    return str(total_price)\n\nprint(solution(\"3\\n4980\\n7980\\n6980\\n\"))"
    },
    {
        "number": 4358,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n\n    # sort prices in descending order\n    p.sort(reverse=True)\n\n    # calculate total amount\n    total = 0\n    for i in range(N):\n        if i == 0:\n            # first item\n            total += p[i]\n        elif p[i] > p[i-1]:\n            # discount for second item\n            total += p[i] // 2 + p[i] % 2\n        else:\n            # regular price for subsequent items\n            total += p[i]\n\n    return str(total)"
    },
    {
        "number": 4358,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    N = int(stdin.readline())\n    prices = [int(stdin.readline()) for _ in range(N)]\n\n    # Calculating total\n    total = 0\n    max_price = max(prices)\n    discount = 0\n    for price in prices:\n        if price == max_price:\n            discount = max_price / 2\n        total += price - discount\n    return str(total)\n"
    },
    {
        "number": 4359,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    dishes = list(map(int, stdin.split()))\n    time = 0\n    while time % 10!= 0:\n        time += 1\n    last_dish_time = time + dishes[0]\n    for i in range(1, len(dishes)):\n        if dishes[i] < last_dish_time - time:\n            time += dishes[i] - (last_dish_time - time)\n        else:\n            time += 10\n        last_dish_time = time + dishes[i]\n    return str(time)"
    },
    {
        "number": 4359,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.strip().split())\n\n    # calculate the maximum time for each dish to be delivered\n    max_time = [A, B, C, D, E]\n\n    # find the maximum time for all dishes to be delivered\n    max_time = max(max_time)\n\n    # check if there is an order already placed and the dish is still not delivered\n    if max_time % 10!= 0:\n        max_time = (max_time // 10 + 1) * 10\n\n    # add the time it takes to eat the rice bowl to the final time\n    max_time += 20\n\n    return str(max_time)\n\nstdin = \"29\\n20\\n7\\n35\\n120\"\nprint(solution(stdin)) # Output: 215"
    },
    {
        "number": 4359,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    orders = [(A, 'ABC Don'), (B, 'ARC Curry'), (C, 'AGC Pasta'), (D, 'APC Ramen'), (E, 'ATC Hanbagu')]\n    orders = sorted(orders, key=lambda x: x[0])\n    last_dish = 'ATC Hanbagu'\n    last_dish_time = E\n    for order_time, dish in orders:\n        if dish!= last_dish:\n            last_dish = dish\n            last_dish_time = order_time + 29\n    return str(last_dish_time)"
    },
    {
        "number": 4359,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    orders = [(A, 0), (B, 30), (C, 50), (E, 60), (D, 180)]\n    current_order = 0\n    for order, time_to_deliver in sorted(orders):\n        if time_to_deliver <= current_order:\n            return \"No solution\"\n        current_order = time_to_deliver + order\n    return current_order\n\nprint(solution(input()))"
    },
    {
        "number": 4359,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    a, b, c, d, e = map(int, stdin.strip().split())\n    \n    # Find minimum delivery time\n    min_delivery_time = max(a, b, c, d, e)\n    \n    # Find maximum order time\n    max_order_time = 10 * ((min_delivery_time + 9) // 10)\n    \n    # Check if there is enough time to order all dishes\n    if max_order_time >= 10 * e:\n        return str(max_order_time)\n    else:\n        return '-1'"
    },
    {
        "number": 4359,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    last_dish_time = max(A, B, C, D, E) + 10\n    if last_dish_time % 20!= 0:\n        last_dish_time += 10 - (last_dish_time % 10)\n    return str(last_dish_time)"
    },
    {
        "number": 4359,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    A, B, C, D, E = map(int, stdin.strip().split())\n\n    # Calculate the latest time for each dish to be delivered\n    ABC_don_latest = 10 * ((A + 9) // 10)  # ceil(A/10)*10\n    ARC_curry_latest = 10 * ((B + 9) // 10)  # ceil(B/10)*10\n    AGC_pasta_latest = 10 * ((C + 9) // 10)  # ceil(C/10)*10\n    APC_ramen_latest = 10 * ((D + 9) // 10)  # ceil(D/10)*10\n    ATC_hanbagu_latest = 10 * ((E + 9) // 10)  # ceil(E/10)*10\n\n    # Check if there is any dish that can be delivered earlier than the latest time for ATC Hanbagu\n    if ABC_don_latest > ATC_hanbagu_latest:\n        return str(ABC_don_latest)\n    if ARC_curry_latest > ATC_hanbagu_latest:\n        return str(ARC_curry_latest)\n    if AGC_pasta_latest > ATC_hanbagu_latest:\n        return str(AGC_pasta_latest)\n    if APC_ramen_latest > ATC_hanbagu_latest:\n        return str(APC_ramen_latest)\n\n    # If there is no such dish, then the last dish can be delivered at any time after ATC Hanbagu is delivered\n    return str(ATC_hanbagu_latest + 10)\n"
    },
    {
        "number": 4359,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    dishes = stdin.split()\n    A, B, C, D, E = map(int, dishes)\n    max_time = A + B + C + D + E\n    while True:\n        if max_time % 10!= 0:\n            max_time += 10 - max_time % 10\n        if max_time % 2 == 1:\n            max_time += 1\n        ABC_Don = (A + max_time) % 10 == 0 and (A + max_time) // 10 <= B\n        ARC_Curry = (B + max_time) % 10 == 0 and (B + max_time) // 10 <= C\n        AGC_Pasta = (C + max_time) % 10 == 0 and (C + max_time) // 10 <= D\n        APC_Ramen = (D + max_time) % 10 == 0 and (D + max_time) // 10 <= E\n        if ABC_Don and ARC_Curry and AGC_Pasta and APC_Ramen:\n            return str(max_time)\n        max_time += 1"
    },
    {
        "number": 4359,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    A, B, C, D, E = map(int, stdin.split())\n    \n    # Calculate the time it takes to deliver each dish\n    time_to_deliver_A = A\n    time_to_deliver_B = B\n    time_to_deliver_C = C\n    time_to_deliver_D = D\n    time_to_deliver_E = E\n    \n    # Determine the earliest possible time for each dish to be delivered\n    earliest_time_to_deliver_A = 0\n    earliest_time_to_deliver_B = time_to_deliver_A\n    earliest_time_to_deliver_C = max(earliest_time_to_deliver_B, time_to_deliver_C)\n    earliest_time_to_deliver_D = max(earliest_time_to_deliver_C, time_to_deliver_D)\n    earliest_time_to_deliver_E = max(earliest_time_to_deliver_D, time_to_deliver_E)\n    \n    # Return the earliest possible time for the last dish to be delivered\n    return str(earliest_time_to_deliver_E)"
    },
    {
        "number": 4359,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n\n    time = 0\n    last_dish_time = A + B + C + D + E\n\n    while True:\n        if time % 10 == 0:\n            time += max(A, B, C, D, E)\n            last_dish_time = min(last_dish_time, time + E)\n        else:\n            time += 1\n\n        if time > last_dish_time:\n            return str(last_dish_time)\n"
    },
    {
        "number": 4360,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, nums = map(int, stdin.splitlines()[0].split())\n    inv_sum = 1 / sum(1/num for num in nums)\n    return str(inv_sum)"
    },
    {
        "number": 4360,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    inv_sum = 0\n    for i in range(n):\n        inv_sum += 1/a[i]\n    inv_sum = 1/inv_sum\n    return str(inv_sum)\n\nprint(solution(input()))"
    },
    {
        "number": 4360,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    inverse_sum = sum(1/x for x in a)\n    return str(1/inverse_sum)"
    },
    {
        "number": 4360,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    inverse_sum = 1\n    for i in range(n):\n        inverse_sum *= 1/a[i]\n        \n    return str(inverse_sum)"
    },
    {
        "number": 4360,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    inverse_sum = 0\n    for i in range(1, n+1):\n        inverse_sum += 1/a[i-1]\n    return str(1/inverse_sum)"
    },
    {
        "number": 4360,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    inv_sum = 1/sum(1/x for x in a)\n    return f\"{inv_sum:.5f}\"\n\ndef"
    },
    {
        "number": 4360,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    inv_sum = 0\n    for i in range(n):\n        inv_sum += 1/a[i]\n    inv_sum_inv = 1/inv_sum\n    return str(inv_sum_inv)"
    },
    {
        "number": 4360,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    inverse_sum = 1/sum(1/num for num in nums)\n    return f\"{inverse_sum:.5f}\""
    },
    {
        "number": 4360,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    inv_sum = 1 / (sum(1 / a for a in A))\n    return f\"{inv_sum:.5f}\""
    },
    {
        "number": 4360,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n\n    # calculate inverse of sum of inverse of A\n    s = sum(1/a for a in A)\n    inv_s = 1/s\n\n    return str(inv_s)"
    },
    {
        "number": 4361,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N, K = list(map(int, stdin.split()))\n    h = list(map(int, stdin.readline().split()))\n    # Sort heights\n    h = sorted(h)\n    # Find minimum difference\n    diff = h[-1] - h[K-1]\n    # Check if there are more decorations possible\n    for i in range(K-1, N):\n        diff = min(diff, h[-1] - h[i-K+1])\n    return str(diff)"
    },
    {
        "number": 4361,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N, K = map(int, stdin.readline().split())\n    heights = list(map(int, stdin.readline().split()))\n    \n    # Sort heights in non-decreasing order\n    heights.sort()\n    \n    # Find the maximum and minimum heights of decorated trees\n    max_height = sum(heights[:K])\n    min_height = sum(heights[-K:])\n    \n    # Calculate the difference in heights\n    diff = max_height - min_height\n    \n    return str(diff)"
    },
    {
        "number": 4361,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.readline().split()))\n\n    # sort heights in ascending order\n    h.sort()\n\n    # calculate maximum and minimum decorated heights\n    max_h = h[k-1]\n    min_h = h[0]\n\n    # return the difference\n    return str(max_h - min_h)"
    },
    {
        "number": 4361,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = map(int, stdin.split())\n    heights = list(map(int, stdin.split()))\n\n    # sort heights in ascending order\n    heights.sort()\n\n    # initialize variables for max and min height\n    max_height = heights[-1]\n    min_height = heights[0]\n\n    # calculate the difference between max and min heights\n    diff = max_height - min_height\n\n    return str(diff)"
    },
    {
        "number": 4361,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.readline().strip().split())\n    trees = list(map(int, stdin.readline().strip().split()))\n    \n    # Sort trees in ascending order\n    trees.sort()\n    \n    # Calculate max and min heights of decorated trees\n    h_max = 0\n    h_min = float('inf')\n    for i in range(K):\n        h_max = max(h_max, trees[i])\n        h_min = min(h_min, trees[i])\n    \n    # Calculate min difference of heights\n    min_diff = float('inf')\n    for i in range(K, N):\n        diff = trees[i] - h_max\n        if diff < min_diff:\n            min_diff = diff\n        h_max = max(h_max, trees[i])\n        h_min = min(h_min, trees[i])\n    \n    return str(min_diff)"
    },
    {
        "number": 4361,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k = map(int, stdin.strip().split())\n    heights = list(map(int, stdin.strip().split()))\n    \n    # Sort trees by height\n    heights.sort()\n    \n    # Find maximum and minimum heights\n    max_height = sum(heights[:k])\n    min_height = sum(heights[-k:])\n    \n    # Find difference\n    return str(max_height - min_height)"
    },
    {
        "number": 4361,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.readline().split())\n    heights = list(map(int, stdin.readline().split()))\n    # Sort heights\n    heights.sort()\n    # Decorate K trees\n    h_max = heights[-1]\n    h_min = heights[0]\n    for i in range(K):\n        h_max = max(h_max, heights[i])\n        h_min = min(h_min, heights[i])\n    # Return result\n    return str(h_max - h_min)"
    },
    {
        "number": 4361,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    heights = list(map(int, stdin.split()))\n    heights.sort()\n    max_height = sum(heights[-k:])\n    min_height = sum(heights[:k])\n    return str(max_height - min_height)\n\nstdin = \"5 3\\n10\\n15\\n11\\n14\\n12\\n\"\nprint(solution(stdin))"
    },
    {
        "number": 4361,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = map(int, lines[0].split())\n    h = list(map(int, lines[1:]))\n    h.sort()\n    return str(max(h[-k:]) - min(h[:k]))\n\nprint(solution(input())) # Input can be read from file using file=open('input.txt', 'r') and then input=file.read()."
    },
    {
        "number": 4361,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    N, K = map(int, lines[0].split())\n    h = list(map(int, lines[1:]))\n    h.sort()\n    return str(h[-1] - h[K-1])"
    },
    {
        "number": 4362,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin[0]\n    if alpha.isupper():\n        return 'A'\n    elif alpha.islower():\n        return 'a'\n    else:\n        return None"
    },
    {
        "number": 4362,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    letter = stdin[0]\n    if letter.isupper():\n        return 'A'\n    else:\n        return 'a'"
    },
    {
        "number": 4362,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isupper():\n        return \"A\"\n    else:\n        return \"a\""
    },
    {
        "number": 4362,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    alpha = stdin.strip()\n\n    # Check if alpha is uppercase\n    if alpha.isupper():\n        return 'A'\n    # If alpha is lowercase, return 'a'\n    else:\n        return 'a'"
    },
    {
        "number": 4362,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin.strip()\n    if alpha.isupper():\n        return \"A\"\n    else:\n        return \"a\""
    },
    {
        "number": 4362,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    letter = stdin.strip()\n    # Check if letter is uppercase or lowercase\n    if letter.isupper():\n        return 'A'\n    else:\n        return 'a'"
    },
    {
        "number": 4362,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin[0]\n    if alpha.isupper():\n        return 'A'\n    else:\n        return 'a'"
    },
    {
        "number": 4362,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin[0]\n    if alpha.isupper():\n        return 'A'\n    elif alpha.islower():\n        return 'a'\n    else:\n        return 'Invalid input'"
    },
    {
        "number": 4362,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin[0]\n    if alpha.isupper():\n        return 'A'\n    elif alpha.islower():\n        return 'a'"
    },
    {
        "number": 4362,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin[0]\n    if alpha.isupper():\n        return 'A'\n    else:\n        return 'a'\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4363,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.strip().split())\n    count = 0\n    for x in range(k+1):\n        for y in range(k+1):\n            for z in range(k+1):\n                if x+y+z == s and (x!= y or y!= z or z!= x):\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4363,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split())\n    count = 0\n    for x in range(k+1):\n        for y in range(k+1):\n            for z in range(k+1):\n                if x+y+z == s and x+y+z <= k:\n                    count += 1\n    return count"
    },
    {
        "number": 4363,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    count = 0\n    for x in range(K+1):\n        for y in range(K+1):\n            for z in range(K+1):\n                if x + y + z == S and x!= y!= z!= 0:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4363,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    count = 0\n    for x in range(K+1):\n        for y in range(K+1):\n            for z in range(K+1):\n                if x+y+z == S and x!=0 and y!=0 and z!=0 and x+y!=K and y+z!=K and x+z!=K:\n                    count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4363,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split())\n    count = 0\n    for x in range(k+1):\n        for y in range(k+1):\n            for z in range(k+1):\n                if x + y + z == s:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4363,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n\n    def backtrack(k, s, x, y, z, count):\n        nonlocal result\n\n        if k == 0 and s == 0:\n            result += count\n            return\n\n        if k == 0:\n            return\n\n        if s < k:\n            return\n\n        if k == 1:\n            if s == k:\n                result += count\n                return\n            else:\n                return\n\n        for i in range(k):\n            if i > s:\n                break\n\n            backtrack(k-1, s-i, x, y, z, count+1)\n\n            if i!= k-1:\n                x, y, z = x+1, y, z+1\n\n            else:\n                if k == 2:\n                    result += count\n                    break\n\n    result = 0\n    backtrack(K, S, 0, 0, 0, 1)\n    return str(result)"
    },
    {
        "number": 4363,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, s = list(map(int, stdin.strip().split()))\n    result = 0\n    for x in range(k+1):\n        for y in range(k+1):\n            for z in range(k+1):\n                if x + y + z == s and x*x + y*y + z*z <= k*k:\n                    result += 1\n    return str(result)\n"
    },
    {
        "number": 4363,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.strip().split())\n    count = 0\n    \n    for x in range(K+1):\n        for y in range(K+1):\n            for z in range(K+1):\n                if x+y+z == S:\n                    count += 1\n                    \n    return str(count)"
    },
    {
        "number": 4363,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    count = 0\n\n    for x in range(K+1):\n        for y in range(K+1):\n            for z in range(K+1):\n                if x + y + z == S:\n                    count += 1\n\n    return str(count)"
    },
    {
        "number": 4363,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.strip().split())\n    count = 0\n    \n    # We need to find all possible combinations of X, Y, Z\n    for i in range(k+1):\n        for j in range(k+1):\n            for l in range(k+1):\n                if i+j+l == s:\n                    count += 1\n    \n    return str(count)"
    },
    {
        "number": 4364,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    year = int(s[:2])\n    month = int(s[2:])\n    if month < 1 or month > 12 or year < 0 or year > 99:\n        return \"NA\"\n    if month < 10:\n        month = \"0\" + str(month)\n    if year < 10:\n        year = \"0\" + str(year)\n    yymm = year + month\n    mmyy = month + year\n    if yymm == s:\n        return \"YYMM\"\n    elif mmyy == s:\n        return \"MMYY\"\n    else:\n        return \"AMBIGUOUS\""
    },
    {
        "number": 4364,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input string\n    s = stdin.strip()\n\n    # define valid month strings\n    valid_months = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n\n    # check if s is a valid date in either format\n    if len(s)!= 4:\n        return \"NA\"\n    year = int(s[0:2])\n    month = int(s[2:4])\n    if year < 100:\n        year += 2000\n    if month < 1 or month > 12:\n        return \"NA\"\n\n    # check if s is valid in both formats\n    if str(year)[-2:] + str(month).zfill(2) in s or str(month).zfill(2) + str(year)[-2:] in s:\n        return \"AMBIGUOUS\"\n\n    # check if s is valid in YYMM format\n    if str(year)[-2:] + str(month).zfill(2) == s:\n        return \"YYMM\"\n\n    # check if s is valid in MMYY format\n    if str(month).zfill(2) + str(year)[-2:] == s:\n        return \"MMYY\"\n\n    # s is not valid in any format\n    return \"NA\""
    },
    {
        "number": 4364,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s)!= 4:\n        return \"NA\"\n    year = s[:2]\n    month = s[2:]\n    if year.isdigit() and month.isdigit():\n        year = int(year)\n        month = int(month)\n        if month < 1 or month > 12:\n            return \"NA\"\n        if year < 100:\n            year += 2000\n        if year < 1000 or year > 9999:\n            return \"NA\"\n        if month < 10:\n            month = \"0\" + str(month)\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        else:\n            days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        if days_in_month[month - 1] < int(day):\n            return \"NA\"\n        if year % 100 == 0:\n            return \"NA\"\n        if month > 7 and year % 4 == 0:\n            return \"YYMM\"\n        else:\n            return \"MMYY\"\n    else:\n        return \"NA\""
    },
    {
        "number": 4364,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if len(S)!= 4:\n        return \"NA\"\n    try:\n        year = int(S[:2])\n        month = int(S[2:])\n        if 0 <= month <= 12 and year > 17 and year < 99:\n            return \"YYMM\"\n        elif 1 <= month <= 12 and year > 0 and year < 99:\n            return \"MMYY\"\n        else:\n            return \"NA\"\n    except ValueError:\n        return \"NA\""
    },
    {
        "number": 4364,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    s = stdin.strip()\n\n    # check for valid input\n    if len(s)!= 4 or not s.isdigit():\n        return \"NA\"\n\n    # check for both formats\n    if s[2:4] <= \"12\" and int(s[:2]) <= 99:\n        return \"YYMM\"\n    elif s[0:2] <= \"12\" and int(s[2:]) <= 99:\n        return \"MMYY\"\n\n    # check for ambiguous format\n    if (int(s[:2]) > 99 or int(s[2:]) > 99) and (int(s[:2]) <= 12 or int(s[2:]) <= 99):\n        return \"AMBIGUOUS\"\n\n    # check for NA format\n    return \"NA\""
    },
    {
        "number": 4364,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # split the input into year and month\n    year = int(stdin[:2])\n    month = int(stdin[2:])\n    \n    # check if the year is valid\n    if year < 100:\n        return \"NA\"\n    \n    # check if the month is valid\n    if month < 1 or month > 12:\n        return \"NA\"\n    \n    # check if the year is a leap year\n    is_leap_year = (year % 4 == 0 and year % 100!= 0) or year % 400 == 0\n    \n    # convert the month to a two-digit string\n    month_str = str(month).zfill(2)\n    \n    # check if the month is valid in YYMM format\n    if month > 0 and month < 13:\n        # check if the day is valid\n        if month in [4, 6, 9, 11] and month > 30:\n            return \"NA\"\n        elif month == 2 and month > 29 and not is_leap_year:\n            return \"NA\"\n        else:\n            return \"YYMM\"\n    \n    # check if the month is valid in MMYY format\n    if month > 0 and month < 13:\n        # check if the day is valid\n        if month in [4, 6, 9, 11] and month > 30:\n            return \"NA\"\n        elif month == 2 and month > 29 and not is_leap_year:\n            return \"NA\"\n        else:\n            return \"MMYY\"\n    \n    # if the month is valid in both formats, print AMBIGUOUS\n    return \"AMBIGUOUS\""
    },
    {
        "number": 4364,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    year = int(S[:2])\n    month = int(S[2:])\n    if year < 100:\n        year += 2000\n    try:\n        datetime.datetime(year, month, 1)\n        if month < 10:\n            return f\"0{month}{year[-2:]}\"\n        else:\n            return f\"{month}{year[-2:]}\"\n    except ValueError:\n        if month < 10:\n            return f\"0{month}19\"\n        else:\n            return f\"{month}19\"\n\nprint(solution(\"1905\")) # \"YYMM\""
    },
    {
        "number": 4364,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    \n    year = int(S[:2])\n    month = int(S[2:])\n    \n    if month < 1 or month > 12:\n        return \"NA\"\n    \n    if (1900 <= year <= 2100) and (month >= 1 and month <= 12):\n        return \"YYMM\"\n    elif (1900 <= year <= 2100) and (month >= 1 and month <= 12):\n        return \"MMYY\"\n    elif (1900 <= year <= 2100) and (month >= 1 and month <= 12):\n        return \"AMBIGUOUS\"\n    else:\n        return \"NA\""
    },
    {
        "number": 4364,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input string\n    s = stdin.strip()\n\n    # Check if it is a valid date in either format\n    try:\n        year = int(s[:2]) + 2000\n        month = int(s[2:4])\n        datetime.date(year, month, 1)\n        if s[2:4] == '00':\n            raise ValueError()\n    except ValueError:\n        return 'NA'\n\n    # Check if it is valid in either format\n    if len(s) == 4:\n        if 1 <= int(s[:2]) <= 99:\n            if int(s[2:4]) >= 1 and int(s[2:4]) <= 12:\n                return 'YYMM'\n            else:\n                return 'NA'\n        else:\n            return 'NA'\n    elif len(s) == 6:\n        if int(s[:2]) >= 1 and int(s[:2]) <= 12:\n            if 1 <= int(s[2:4]) <= 99:\n                return 'MMYY'\n            else:\n                return 'NA'\n        else:\n            return 'NA'\n    else:\n        return 'NA'"
    },
    {
        "number": 4364,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # reading input\n    s = stdin\n\n    # checking both formats\n    yy = s[:2]\n    mm = s[2:]\n    if 0 < int(yy) < 100 and 0 < int(mm) < 13:\n        if len(yy) == 2 and len(mm) == 2:\n            return \"YYMM\"\n        elif len(mm) == 2 and len(yy) == 2:\n            return \"MMYY\"\n\n    # checking ambiguous format\n    if (int(s[0]) * int(s[1]) * int(s[2]) * int(s[3])) % 10 == 0:\n        return \"AMBIGUOUS\"\n\n    # checking NA format\n    return \"NA\""
    },
    {
        "number": 4365,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    count = 0\n    \n    # even numbers\n    for i in range(2, k+1, 2):\n        # odd numbers\n        for j in range(1, k+1, 2):\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4365,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k % 2 == 0:\n        return 0\n    n = k // 2\n    return n"
    },
    {
        "number": 4365,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    count = 0\n    for i in range(1, k+1, 2):\n        count += k // i\n    return count"
    },
    {
        "number": 4365,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    count = 0\n    for i in range(1, k+1, 2):\n        for j in range(1, k+1, 2):\n            if i!= j:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4365,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    count = 0\n    for i in range(1, k+1, 2):\n        for j in range(1, k+1, 2):\n            if i!= j:\n                count += 1\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4365,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    count = 0\n    for i in range(1, K+1, 2):\n        for j in range(1, K+1, 2):\n            if i!= j:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4365,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.readline().strip())\n    count = 0\n    for i in range(1,K+1,2):\n        for j in range(1,K+1,2):\n            if i!=j:\n                count += 1\n    return str(count//2)"
    },
    {
        "number": 4365,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    count = 0\n    for i in range(1, K+1):\n        if i % 2 == 0:\n            count += K//2 + 1\n        else:\n            count += K//2\n    return count"
    },
    {
        "number": 4365,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    k = int(stdin)\n\n    # Initialize count\n    count = 0\n\n    # Loop through all even numbers\n    for i in range(2, k+1, 2):\n        # Loop through all odd numbers\n        for j in range(1, k+1, 2):\n            # Check if both numbers are less than k\n            if i < k and j < k:\n                # Increment count\n                count += 1\n\n    # Return count\n    return str(count)"
    },
    {
        "number": 4365,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    count = 0\n    for i in range(1, k+1, 2):\n        for j in range(1, k+1, 2):\n            if i!= j:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4366,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    if B > 0:\n        return str((A + B) % 24)\n    else:\n        return str((A - B) % 24)"
    },
    {
        "number": 4366,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    if B >= 12:\n        B -= 12\n        ampm = \"PM\"\n    else:\n        ampm = \"AM\"\n    return f\"{B:02d}:{A:02d} {ampm}\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    start_time = (A + B) % 24\n    return str(start_time)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4366,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    H = (A + B) % 24\n    return str(H)"
    },
    {
        "number": 4366,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    start_time = (A + B) % 24\n    return str(start_time)"
    },
    {
        "number": 4366,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a + b >= 24:\n        return str(a + b - 24)\n    else:\n        return str(a + b)"
    },
    {
        "number": 4366,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    starting_time = (A + B) % 24\n    return str(starting_time)"
    },
    {
        "number": 4366,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str((A + B) % 24)\n\nstdin = \"9 12\"\nprint(solution(stdin))  # Output: 21"
    },
    {
        "number": 4366,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if B <= A:\n        return str((B + 24) % 24)\n    else:\n        return str(A)"
    },
    {
        "number": 4366,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return str((a + b) % 24)"
    },
    {
        "number": 4367,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    if n >= 10:\n        inner_rating = r\n    else:\n        inner_rating = r - 100 * (10 - n)\n    return str(inner_rating)"
    },
    {
        "number": 4367,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    if N < 10:\n        return str(R)\n    else:\n        return str(R - 100*(10-N))\n    \n"
    },
    {
        "number": 4367,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n\n    if N >= 10:\n        return str(R)\n    else:\n        return str(R - 100 * (10 - N))"
    },
    {
        "number": 4367,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    if N >= 10:\n        return str(R)\n    else:\n        return str(R - 100*(10-N))\n"
    },
    {
        "number": 4367,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    if N >= 10:\n        return str(R)\n    else:\n        return str(R - 100*(10 - N))"
    },
    {
        "number": 4367,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    if N >= 10:\n        return str(R)\n    else:\n        return str(R - 100 * (10 - N))"
    },
    {
        "number": 4367,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    if n >= 10:\n        return str(r)\n    else:\n        return str(r - 100 * (10 - n))"
    },
    {
        "number": 4367,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.strip().split())\n    if N >= 10:\n        InnerRating = R\n    else:\n        InnerRating = R - 100 * (10 - N)\n    print(InnerRating)\n"
    },
    {
        "number": 4367,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    if N >= 10:\n        Inner_Rating = R\n    else:\n        Inner_Rating = R - 100 * (10 - N)\n    return str(Inner_Rating)"
    },
    {
        "number": 4367,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    if N >= 10:\n        return str(R)\n    else:\n        return str(R - 100 * (10 - N))"
    },
    {
        "number": 4368,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N == 0:\n        return 1\n    count = 0\n    while N:\n        N //= K\n        count += 1\n    return count\n\nprint(solution(input()))"
    },
    {
        "number": 4368,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    count = 0\n    while n:\n        count += 1\n        n //= k\n    return count\n\nprint(solution(input()))"
    },
    {
        "number": 4368,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    count = 0\n    while n > 0:\n        n //= k\n        count += 1\n    return count"
    },
    {
        "number": 4368,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    while N > 0:\n        N //= K\n        count += 1\n    return count"
    },
    {
        "number": 4368,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    return len(str(n))"
    },
    {
        "number": 4368,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(len(bin(n)[2:]))"
    },
    {
        "number": 4368,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(len(bin(n)[2:]))"
    },
    {
        "number": 4368,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    num_digits = 0\n    while n > 0:\n        n //= k\n        num_digits += 1\n    return str(num_digits)"
    },
    {
        "number": 4368,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return len(str(n).replace('0b', '').replace('0', '').replace('1', '')) * k"
    },
    {
        "number": 4368,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    while n > 0:\n        n //= k\n        count += 1\n    return count"
    },
    {
        "number": 4369,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(n // 2 if n % 2 == 0 else n // 2 + 1)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4369,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    pages_per_sheet = 2\n    sheets = N // pages_per_sheet + (N % pages_per_sheet > 0)\n    return str(sheets)\n"
    },
    {
        "number": 4369,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sheets = n // 2\n    if n % 2!= 0:\n        sheets += 1\n    return str(sheets)\n"
    },
    {
        "number": 4369,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(n//2 + n%2)"
    },
    {
        "number": 4369,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    # we need at least n//2 sheets\n    return n//2"
    },
    {
        "number": 4369,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # the number of sheets needed to print N pages with double-sided printing\n    num_sheets = (N + 1) // 2\n    # number of pages per sheet (if possible)\n    pages_per_sheet = 2\n    # number of pages remaining after printing all the data on the last sheet\n    remaining_pages = N % 2\n    # if there are remaining pages, add one more sheet\n    if remaining_pages!= 0:\n        num_sheets += 1\n    return str(num_sheets)"
    },
    {
        "number": 4369,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    num_sheets = N // 2\n    if N % 2 == 1:\n        num_sheets += 1\n    return str(num_sheets)"
    },
    {
        "number": 4369,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.strip())\n\n    # Calculate number of pages per sheet\n    pages_per_sheet = 2\n\n    # Calculate number of sheets needed\n    sheets_needed = N // pages_per_sheet\n\n    # Check if there are any extra pages left\n    if N % pages_per_sheet > 0:\n        sheets_needed += 1\n\n    # Print the answer\n    print(sheets_needed)"
    },
    {
        "number": 4369,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n // 2 if n % 2 == 0 else n // 2 + 1)"
    },
    {
        "number": 4369,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 2:\n        return str(n)\n    else:\n        return str(2 * (n // 2) + n % 2)"
    },
    {
        "number": 4370,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if abs(a-b) == 1:\n        return 'Yay!'\n    else:\n        return ':('\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4370,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A+B <= 16 and (A == 1 or B == 16 or A == B):\n        return \"Yay!\"\n    else:\n        return \":(\""
    },
    {
        "number": 4370,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 1 and B == 15:\n        return \"Yay!\"\n    if A > 1 and B > 1:\n        if A == B-1 or B == A-1:\n            return \"Yay!\"\n    return \":(\""
    },
    {
        "number": 4370,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a+b > 16 or a < 1 or b < 1 or a > 16 or b > 16:\n        return \":(\"\n    if a == b:\n        return \":(\"\n    if (a+b)%2 == 1:\n        return \":(\"\n    if (a-1) % 4 == 0 and (b-1) % 4 == 0:\n        return \":(\"\n    if (a-1) % 4 == 3 and (b-1) % 4 == 3:\n        return \":(\"\n    if (a-1) % 4 == 2 and (b-1) % 4 == 2:\n        return \":(\"\n    return \"Yay!\"\n```python\ndef"
    },
    {
        "number": 4370,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if (a + b) > 16:\n        return \":(\\n\"\n    elif (a + b) == 16:\n        if (a == b == 1) or (a == 16 or b == 16):\n            return \"Yay!\\n\"\n        else:\n            return \":(\\n\"\n    elif (a + b) == 15:\n        if a == 1 or b == 16:\n            return \"Yay!\\n\"\n        elif b == 1:\n            return \":(\\n\"\n        else:\n            return \":(\\n\"\n    else:\n        return \":(\\n\""
    },
    {
        "number": 4370,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a+b > 16:\n        return \":(\"\n    if a == 1 or a == 16 or b == 1 or b == 16:\n        return \"Yay!\"\n    if a == 15 or b == 15:\n        return \"Yay!\"\n    if a == b or a == 16-b or b == 16-a:\n        return \"Yay!\"\n    return \":(\""
    },
    {
        "number": 4370,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a+b > 16:\n        return \":(\"\n    elif a-b == 0 or a-b == 1 or b-a == 0 or b-a == 1:\n        return \"Yay!\"\n    else:\n        return \":(\""
    },
    {
        "number": 4370,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a+b > 16:\n        return \":(\\n\"\n    elif (a==1 or a==16) and (b==1 or b==16):\n        return \":(\\n\"\n    else:\n        return \"Yay!\\n\"\n\nprint(solution(\"5 4\"))"
    },
    {
        "number": 4370,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1 or a == 16 or b == 1 or b == 16:\n        return \"Nay!\"\n    if a == b or a == b+1 or a == b-1 or a+b == 16 or a+b == 15:\n        return \"Yay!\"\n    else:\n        return \"Nay!\"\n\nprint(solution(input()))"
    },
    {
        "number": 4370,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a + b > 16:\n        return \":(\"\n    if a == b:\n        return \"Yay!\"\n    if (a == 1 and b == 15) or (a == 15 and b == 1):\n        return \"Yay!\"\n    return \":(\""
    },
    {
        "number": 4371,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    x = int(''.join(s[6:9]))\n    return str(abs(x - 753))"
    },
    {
        "number": 4371,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    for i in range(n-2):\n        if s[i] == '7' and s[i+1] == '5' and s[i+2] == '3':\n            x = int(s[i:i+3])\n            return str(abs(x - 753))\n    return '0'"
    },
    {
        "number": 4371,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    S = stdin.strip()\n    # find the minimum absolute difference between X and 753\n    X = int(S[6:9])\n    diff = abs(X - 753)\n    return str(diff)"
    },
    {
        "number": 4371,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    x = int(''.join(s[i] for i in range(3, 7)))\n    diff = abs(x - 753)\n    return str(diff)"
    },
    {
        "number": 4371,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    s = stdin.strip()\n\n    # Check length of input\n    if len(s) < 4 or len(s) > 10:\n        return \"Error: Length of input string must be between 4 and 10 (inclusive).\"\n\n    # Parse input\n    try:\n        x = int(s[2:5])\n    except ValueError:\n        return \"Error: Input string must contain only digits 1-9.\"\n\n    # Compute difference and print result\n    diff = abs(x - 753)\n    return str(diff)"
    },
    {
        "number": 4371,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num = int(stdin[2:5])\n    abs_diff = abs(num - 753)\n    return str(abs_diff)"
    },
    {
        "number": 4371,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    x = int(s[3:6])\n    return str(abs(x - 753))"
    },
    {
        "number": 4371,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    S = stdin.strip()\n\n    # Finding the length of the string\n    n = len(S)\n\n    # Taking out the required digits\n    X = int(S[n//3] + S[n//3+1] + S[n//3+2])\n\n    # Finding the difference between X and 753\n    diff = abs(X - 753)\n\n    # Returning the minimum possible difference\n    return str(diff)\n"
    },
    {
        "number": 4371,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    x = int(s[6:9])\n    return str(abs(753 - x))"
    },
    {
        "number": 4371,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    X = int(S[6:9])\n    diff = abs(X - 753)\n    return str(diff)"
    },
    {
        "number": 4372,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    # count minimum y and z\n    y = 0\n    z = float('inf')\n    for i in range(n):\n        if a[i] > 0:\n            y += a[i] // min(a)\n            z = min(z, a[i] % min(a))\n    \n    # output result\n    return f'{y} {z}'"
    },
    {
        "number": 4372,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # Find all unique pairs of indices (j, k) where a_j!= a_k\n    pairs = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i]!= a[j]:\n                pairs.add((i,j))\n\n    # Find minimum value of y\n    y = 1\n    for p in pairs:\n        y += a[p[0]] // a[p[1]]\n\n    # Find minimum value of z\n    z = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i]!= a[j]:\n                z += a[i] // a[j]\n\n    return f\"{y} {z}\""
    },
    {
        "number": 4372,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    x = a[-1]\n    y = z = 0\n    for i in range(n):\n        if a[i] == x:\n            y += 1\n            z += a[i]\n        else:\n            y += 1\n            z += a[i-1]\n    return f\"{y} {z}\""
    },
    {
        "number": 4372,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.strip().split())\n    x = y = z = 0\n    for i in range(n):\n        x += a[i]\n        if x >= 2:\n            y += x // 2\n            z += x % 2\n            x = 0\n    if x > 0:\n        y += 1\n        z += x\n    print(y, z)\n\nsolution('''3\n3 12 6''')\n"
    },
    {
        "number": 4372,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    i = 0\n    j = n-1\n    while i < j:\n        count += a[j]\n        j -= 1\n    count += sum(a[:i+1])\n    ans = count // (n-1)\n    return f\"{ans} {ans}\""
    },
    {
        "number": 4372,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if n == 1:\n        return '1 1'\n    a_max = max(a)\n    if n == 2:\n        return '2'+ str(a_max)\n    x_max = min(a_max, (sum(a) - a_max) // (n - 1))\n    y = 0\n    z = 0\n    for i in range(n):\n        if a[i] == a_max:\n            y += 1\n            z += a_max\n        elif a[i] > x_max:\n            y += a[i] // x_max\n            z += x_max * (a[i] // x_max)\n    if y == 0:\n        y = 1\n        z = a_max\n    return f'{y} {z}'"
    },
    {
        "number": 4372,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize the variables\n    min_y = float('inf')\n    min_z = float('inf')\n    max_y = 0\n    max_z = 0\n    max_z_for_y = 0\n\n    # Loop over all possible values of y and z\n    for y in range(1, n+1):\n        for z in range(1, n+1):\n            # Calculate the maximum number of swords for y and z\n            max_swords_for_y = 0\n            for i in range(n):\n                max_swords_for_y += min(y, a[i])\n            max_swords_for_z = 0\n            for i in range(n):\n                max_swords_for_z += min(z, a[i])\n            # Calculate the number of people who could have broken into the basement\n            num_breakers = max_swords_for_y // z\n            # Update the minimum number of people who could have broken into the basement\n            if num_breakers < min_y:\n                min_y = num_breakers\n                min_z = z\n            # Update the maximum number of people who could have broken into the basement\n            if num_breakers > max_y:\n                max_y = num_breakers\n                max_z = z\n                max_z_for_y = z\n\n    # Output the minimum number of people who could have broken into the basement and the number of swords each of them has taken\n    return f\"{min_y} {min_z}\""
    },
    {
        "number": 4372,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    x = 0\n    y = 0\n    z = 0\n    for i in range(n):\n        if a[i] > 0:\n            y += a[i] // 2\n            z += a[i] % 2 + a[i] // 2 * 2\n    if y == 0:\n        return \"0 0\"\n    return f\"{y} {z}\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = sorted(a)\n    y, z = 0, 0\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        if a[i] % 2 == 0:\n            y += a[i] // 2\n            z += 1\n        else:\n            y += 1\n            z += 1\n    return f\"{y} {z}\"\n\nprint(solution(\"3\\n3 12 6\")) # \"5 3\"\nprint(solution(\"2\\n2 9\")) # \"1 7\"\nprint(solution(\"7\\n2 1000000000 4 6 8 4 2\")) # \"2999999987 2\"\nprint(solution(\"6\\n13 52 0 13 26 52\")) # \"12 13\""
    },
    {
        "number": 4372,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    y, z = 1, a[0]\n    for i in range(1, n):\n        if a[i] > z:\n            y += 1\n            z = a[i]\n    return f\"{y} {z}\"\n\nstdin = \"\"\"\n3\n3 12 6\n\"\"\"\nprint(solution(stdin)) # Output: \"5 3\""
    },
    {
        "number": 4373,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.strip().split()))\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + a[i - 1]\n    ans = 0\n    for k in range(1, n + 1):\n        left = 0\n        right = k - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if dp[mid + 1] - dp[left] >= k:\n                ans = max(ans, mid + 1)\n                right = mid - 1\n            else:\n                left = mid + 1\n        if dp[ans] >= k * ans:\n            break\n    return ans\n"
    },
    {
        "number": 4373,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    dp = [1] * n\n    for i in range(1, n):\n        dp[i] = dp[i-1] + 1\n        for j in range(i-1, -1, -1):\n            if a[j] >= a[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n                break\n    return dp[-1]"
    },
    {
        "number": 4373,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    dp = [float('inf')] * n\n    dp[0] = 0\n    for i in range(1, n):\n        dp[i] = min(dp[i-1] + a[i], i+1)\n    return dp[-1]"
    },
    {
        "number": 4373,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = dp[i-1] + a[i]\n\n    for i in range(n-2, -1, -1):\n        dp[i] = min(dp[i+1], dp[i+2])\n\n    return str(dp[0])\n\nstdin = \"\"\"\n4\n3 1 4 1\n\"\"\"\n\nprint(solution(stdin)) # Output: 3"
    },
    {
        "number": 4373,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # Find the minimum number of days required to solve each problem\n    days = [1] * max(a)\n    for i in range(n):\n        for j in range(a[i]):\n            days[j] = max(days[j], i+1)\n\n    # Count the number of days required to solve all the problems\n    count = 0\n    for i in range(max(a)):\n        if days[i] > count:\n            count = days[i]\n\n    return str(count)"
    },
    {
        "number": 4373,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = dp[i - 1] + 1\n        if dp[i] == a[i]:\n            continue\n        for j in range(i):\n            if a[j] > dp[i] and a[j] <= a[i]:\n                dp[i] = a[j]\n        if dp[i] == 1:\n            dp[i] = 0\n    return max(dp)\n\nprint(solution(stdin))"
    },
    {
        "number": 4373,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = max(dp[j] + 1 for j in range(i - 1, -1, -1) if a[j] >= i)\n    return dp[n]"
    },
    {
        "number": 4373,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    dp = [float('inf')]*n\n    dp[0] = 1\n\n    for i in range(n):\n        for j in range(i):\n            if a[j] >= a[i]:\n                dp[i] = min(dp[i], dp[j]+1)\n\n    return dp[-1]"
    },
    {
        "number": 4373,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = a[i] + dp[i-1]\n\n    count = 1\n    for i in range(1, n):\n        count += dp[i] >= k\n        if count >= k:\n            return i + 1\n\n    return -1\n\ndef"
    },
    {
        "number": 4373,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.strip().split())\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + a[i-1]\n        for j in range(1, i):\n            dp[i] = max(dp[i], dp[j] + a[i-1])\n    return dp[n]\n\nprint(solution(\"4\\n3 1 4 1\")) # Output: 3\nprint(solution(\"3\\n1 1 1\")) # Output: 1\nprint(solution(\"5\\n1 1 1 2 2\")) # Output: 2"
    },
    {
        "number": 4374,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for i in range(n + 1)]\n    for i in range(m):\n        v, u = map(int, stdin.split())\n        graph[v].append(u)\n        graph[u].append(v)\n\n    # Union-Find algorithm to find the diameter\n    parent = [i for i in range(n + 1)]\n    rank = [0] * (n + 1)\n    def find(u):\n        if parent[u]!= u:\n            parent[u] = find(parent[u])\n        return parent[u]\n    def union(u, v):\n        pu, pv = find(u), find(v)\n        if pu == pv:\n            return\n        if rank[pu] > rank[pv]:\n            parent[pv] = pu\n        elif rank[pu] < rank[pv]:\n            parent[pu] = pv\n        else:\n            parent[pv] = pu\n            rank[pu] += 1\n\n    # Find the diameter of the given tree\n    diameter = 0\n    for u in range(1, n + 1):\n        for v in graph[u]:\n            if u < v:\n                union(u, v)\n                diameter = max(diameter, len(graph[u]) + len(graph[v]))\n                graph[u].remove(v)\n                graph[v].remove(u)\n\n    # Add edges to the tree to make it minimal\n    added_edges = []\n    for u in range(1, n + 1):\n        if len(graph[u]) == 1:\n            v = graph[u][0]\n            if find(u)!= find(v):\n                union(u, v)\n                added_edges.append(f\"{u} {v}\")\n    for u, v in added_edges:\n        graph[int(u)].remove(int(v))\n        graph[int(v)].remove(int(u))\n\n    # Output the result\n    if m == n - 1:\n        return str(diameter)\n    else:\n        return str(diameter) + \"\\n\" + \"\\n\".join(added_edges)\n\nprint(solution(input()))"
    },
    {
        "number": 4374,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    edges = set()\n    for _ in range(m):\n        v, u = map(int, stdin.readline().split())\n        edges.add((v, u))\n        edges.add((u, v))\n\n    if m == n - 1:\n        return str(n - 1)\n\n    diameter = n - 1\n    for i in range(1, n):\n        for j in range(i):\n            if (i, j) not in edges and (j, i) not in edges:\n                diameter += 1\n                edges.add((i, j))\n\n    result = str(diameter) + \"\\n\"\n    for edge in edges:\n        result += f\"{edge[0]} {edge[1]}\\n\"\n\n    return result\n"
    },
    {
        "number": 4374,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        graph[v].append(u)\n        graph[u].append(v)\n    # check if graph is already a tree\n    if not all(len(v) == 1 for v in graph):\n        # add edges to make it a tree\n        for i in range(1, n + 1):\n            for j in range(i + 1, n + 1):\n                if i not in graph[j]:\n                    graph[j].append(i)\n    # find diameter of the tree\n    diameter = 0\n    visited = [False] * (n + 1)\n    for i in range(1, n + 1):\n        if not visited[i]:\n            visited[i] = True\n            stack = [(i, 0)]\n            while stack:\n                v, d = stack.pop()\n                if d > diameter:\n                    diameter = d\n                for u in graph[v]:\n                    if not visited[u]:\n                        visited[u] = True\n                        stack.append((u, d + 1))\n    # print added edges\n    added = []\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if i not in graph[j]:\n                added.append((i, j))\n    # print diameter and added edges\n    if not added:\n        return str(diameter)\n    else:\n        print(diameter)\n        return '\\n'.join(map(str, added))"
    },
    {
        "number": 4374,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.splitlines()[0].split())\n    edges = set()\n    for line in stdin.splitlines()[1:]:\n        v, u = map(int, line.split())\n        edges.add((v, u))\n        edges.add((u, v))\n    \n    if m == n - 1:\n        diameter = n - 1\n        return str(diameter)\n    else:\n        tree = set()\n        for edge in edges:\n            if edge[0] in tree and edge[1] not in tree:\n                tree.add(edge[1])\n            elif edge[1] in tree and edge[0] not in tree:\n                tree.add(edge[0])\n            elif edge[0] not in tree and edge[1] not in tree:\n                tree.add(edge[0])\n                tree.add(edge[1])\n        \n        for i in range(1, n):\n            if i not in tree:\n                for j in range(i+1, n):\n                    if j not in tree:\n                        tree.add(i)\n                        tree.add(j)\n                        break\n                break\n        \n        diameter = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if (i, j) not in edges and (j, i) not in edges:\n                    path = list(nx.shortest_path(nx.Graph(tree), i, j))\n                    if len(path) - 1 > diameter:\n                        diameter = len(path) - 1\n        \n        result = str(diameter) + '\\n'\n        for edge in tree:\n            result += str(edge) +''\n        return result"
    },
    {
        "number": 4374,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = set()\n    for _ in range(m):\n        v, u = map(int, stdin.readline().split())\n        edges.add((v, u))\n        edges.add((u, v))\n\n    if len(edges) == n - 1:\n        return \"1\"\n\n    possible_edges = [(i, j) for i in range(1, n) for j in range(i + 1, n) if (i, j) not in edges]\n\n    min_diameter = float('inf')\n    for edge in possible_edges:\n        edges.add(edge)\n        max_diameter = 0\n        for i in range(1, n):\n            for j in range(i + 1, n):\n                if (i, j) not in edges:\n                    continue\n                dist = 0\n                queue = [(i, j)]\n                while queue:\n                    dist += 1\n                    size = len(queue)\n                    for _ in range(size):\n                        curr = queue.pop(0)\n                        for neighbor in (curr[0] - 1, curr[0] + 1, curr[1] - 1, curr[1] + 1):\n                            if neighbor!= -1 and neighbor!= n and neighbor!= curr[0] and neighbor!= curr[1]:\n                                if (neighbor, curr[0]) not in edges and (curr[0], neighbor) not in edges:\n                                    queue.append((neighbor, curr[0]))\n                                if (neighbor, curr[1]) not in edges and (curr[1], neighbor) not in edges:\n                                    queue.append((neighbor, curr[1]))\n                max_diameter = max(max_diameter, dist)\n        if max_diameter < min_diameter:\n            min_diameter = max_diameter\n            best_edges = [(i, j) for i, j in edges if (i, j) not in edges - {(i, j)}]\n        edges.remove(edge)\n\n    result = str(min_diameter) + '\\n'\n    for edge in best_edges:\n        result +=''.join(map(str, edge)) + '\\n'\n    return result"
    },
    {
        "number": 4374,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tree = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        tree[v].append(u)\n        tree[u].append(v)\n\n    # Check if graph is already a tree\n    if all(len(v) == 1 for v in tree):\n        return str(n - 1)\n\n    # Add edges to make graph a tree\n    added = 0\n    for v in range(1, n + 1):\n        if len(tree[v]) > 2:\n            return \"No solution\"\n        elif len(tree[v]) == 1:\n            u = tree[v][0]\n            tree[v] = []\n            tree[u].append(v)\n            added += 1\n\n    # Find diameter of resulting tree\n    diameter = 0\n    visited = [False] * (n + 1)\n    queue = [(1, 0)]\n    while queue:\n        v, d = queue.pop(0)\n        if visited[v]:\n            continue\n        visited[v] = True\n        diameter = max(diameter, d)\n        for u in tree[v]:\n            queue.append((u, d + 1))\n\n    return str(diameter) + '\\n' + '\\n'.join(f\"{added + 1} {v}\" for v in tree[1] if len(tree[v]) == 0)\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        v, u = map(int, stdin.readline().split())\n        edges.append((v - 1, u - 1))\n    adj = [[] for _ in range(n)]\n    for v, u in edges:\n        adj[v].append(u)\n        adj[u].append(v)\n    ans = m\n    for u in range(n):\n        if len(adj[u]) < 2:\n            continue\n        d = [-1] * n\n        d[u] = 0\n        q = [u]\n        while q:\n            cur = q.pop(0)\n            for nei in adj[cur]:\n                if d[nei] == -1:\n                    d[nei] = d[cur] + 1\n                    q.append(nei)\n        max_d = max(d)\n        if max_d > ans:\n            ans = max_d\n    if ans == n - 1:\n        return f\"{ans}\\n\"\n    added = []\n    for u in range(n):\n        if len(adj[u]) == 1:\n            continue\n        for nei in adj[u]:\n            if nei < u:\n                continue\n            if d[u] + d[nei] > ans:\n                added.append((u, nei))\n    return f\"{ans}\\n{' '.join(' '.join(map(str, edge)) for edge in added)}\\n\"\n\nstdin = \"\"\"\n4 2\n1 2\n2 3\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4374,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    edges = []\n    for i in range(m):\n        v, u = map(int, stdin.split()[0:2])\n        edges.append((v, u))\n    edges_set = set(edges)\n    # Check if the graph is a tree\n    if len(edges_set)!= n-1:\n        return \"No\"\n    # Find the diameter of the given tree\n    diameter = 0\n    for i in range(1, n):\n        for j in range(i):\n            if (i, j) not in edges_set:\n                for k in range(j):\n                    if (j, k) not in edges_set and (k, i) not in edges_set:\n                        diameter += 1\n                        break\n    # Add edges to make the graph a tree with minimal diameter\n    added_edges = []\n    for i in range(1, n):\n        for j in range(i):\n            if (i, j) not in edges_set and (j, i) not in edges_set:\n                added_edges.append((i, j))\n                edges.append((i, j))\n                edges_set.add((i, j))\n                break\n    # Print the diameter and added edges\n    return f\"{diameter}\\n{' '.join(map(str, added_edges))}\""
    },
    {
        "number": 4374,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    edges = []\n    for i in range(m):\n        v, u = map(int, stdin.split()[0:2])\n        edges.append((v, u))\n    # find diameter of the graph\n    diameter = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (i, j) in edges or (j, i) in edges:\n                continue\n            dist = bfs(i, j, edges)\n            diameter = max(diameter, dist)\n    # add edges to make it a tree\n    added = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (i, j) in edges or (j, i) in edges:\n                continue\n            dist = bfs(i, j, edges)\n            if dist <= diameter:\n                edges.append((i, j))\n                added += 1\n                diameter = dist\n    # print result\n    print(diameter)\n    for edge in edges:\n        print(*edge)\n    return \"\"\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        v, u = map(int, stdin.readline().split())\n        graph[v].append(u)\n        graph[u].append(v)\n\n    def dfs(u, parent, d):\n        if d > diameter:\n            return\n        for v in graph[u]:\n            if v!= parent:\n                dfs(v, u, d + 1)\n\n    diameter = 0\n    for u in range(1, n + 1):\n        for parent in range(1, n + 1):\n            dfs(u, parent, 0)\n            diameter = max(diameter, d)\n\n    if m == n - 1:\n        return str(diameter)\n\n    result = []\n    for u in range(1, n + 1):\n        for v in range(u + 1, n + 1):\n            if v not in graph[u]:\n                result.append((u, v))\n\n    return str(diameter) + '\\n' + '\\n'.join(map(str, result))"
    },
    {
        "number": 4375,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    edges = [list(map(int, stdin.readline().split())) for i in range(n - 1)]\n    G = {i: [] for i in range(1, n + 1)}\n    for u, v in edges:\n        G[u].append(v)\n        G[v].append(u)\n\n    dist = [-1] * (n + 1)\n    dist[1] = 0\n\n    def dfs(u, d):\n        for v in G[u]:\n            if dist[v] == -1:\n                dist[v] = d + 1\n                dfs(v, d + 1)\n\n    dfs(1, 0)\n\n    ans = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if dist[i] + dist[j] > k:\n                ans = max(ans, a[i] + a[j])\n\n    return str(ans)"
    },
    {
        "number": 4375,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        adj[u].append(v)\n        adj[v].append(u)\n\n    def dfs(u, prev, dist):\n        nonlocal ans\n        if dist > k:\n            return\n        if dist == k + 1:\n            ans = max(ans, sum(a[i] for i in subset))\n            return\n        subset.add(u)\n        for v in adj[u]:\n            if v!= prev:\n                dfs(v, u, dist + 1)\n        subset.remove(u)\n\n    ans = float('-inf')\n    for i in range(1, n + 1):\n        subset = set([i])\n        dfs(i, -1, 0)\n\n    return str(ans)\n\nprint(solution('''\n5 1\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5\n''')) # Output: 11\n\nprint(solution('''\n7 2\n2 1 2 1 2 1 1\n6 4\n1 5\n3 1\n2 3\n7 5\n7 4\n''')) # Output: 4"
    },
    {
        "number": 4375,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    adj_list = [[] for _ in range(n + 1)]\n    for i in range(n - 1):\n        u, v = map(int, stdin.readline().strip().split())\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n\n    visited = [False] * (n + 1)\n    dist = [-1] * (n + 1)\n    q = [(1, 0)]\n    while q:\n        u, d = q.pop(0)\n        visited[u] = True\n        dist[u] = d\n        for v in adj_list[u]:\n            if dist[v] == -1:\n                q.append((v, d + 1))\n\n    ans = 0\n    for i in range(1, n + 1):\n        if dist[i] > k:\n            continue\n        for j in range(i + 1, n + 1):\n            if dist[i] + dist[j] <= k:\n                ans += a[i] + a[j]\n\n    return str(ans)\n"
    },
    {
        "number": 4375,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    edges = [list(map(int, stdin.readline().split())) for _ in range(n-1)]\n    # Step 1: Compute the number of paths from each vertex to all other vertices\n    paths = [0] * n\n    for i in range(n):\n        paths[i] = [1] + [0] * (n-1)\n    for i in range(n-1):\n        u, v = edges[i]\n        paths[v][u] += 1\n        paths[u][v] += 1\n    # Step 2: Compute the maximum distance from any vertex to any other vertex\n    max_dist = 0\n    for i in range(n):\n        for j in range(n):\n            max_dist = max(max_dist, paths[i][j])\n    # Step 3: Compute the number of paths with distance <= k from each vertex to all other vertices\n    num_paths = [[0] * n for _ in range(max_dist+1)]\n    for i in range(n):\n        num_paths[0][i] = 1\n    for dist in range(1, max_dist+1):\n        for i in range(n):\n            for j in range(n):\n                num_paths[dist][i] += num_paths[dist-1][j] * paths[j][i]\n    # Step 4: Compute the maximum total weight of the subset in which all pairs of vertices have distance more than k\n    max_weight = 0\n    for i in range(n):\n        for j in range(n):\n            if paths[i][j] <= k:\n                max_weight = max(max_weight, a[i]+a[j])\n    for dist in range(k+1, max_dist+1):\n        for i in range(n):\n            for j in range(n):\n                if paths[i][j] <= dist:\n                    max_weight = max(max_weight, a[i]+a[j])\n    return max_weight"
    },
    {
        "number": 4375,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    edges = []\n    for i in range(n - 1):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n    ans = 0\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = a[i]\n    for i in range(k):\n        for u, v in edges:\n            dp[v - 1] = max(dp[v - 1], dp[u - 1] + a[v - 1])\n    ans = max(ans, sum(dp))\n    for i in range(k + 1, n):\n        dp = [0] * n\n        for j in range(n):\n            dp[j] = a[j]\n        for j in range(k, i):\n            for u, v in edges:\n                dp[v - 1] = max(dp[v - 1], dp[u - 1] + a[v - 1])\n        ans = max(ans, sum(dp))\n    return str(ans)"
    },
    {
        "number": 4375,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.readline().split()))\n    a = list(map(int, stdin.readline().split()))\n    adj = [[] for _ in range(n)]\n    for i in range(n-1):\n        u, v = list(map(int, stdin.readline().split()))\n        adj[u-1].append(v-1)\n        adj[v-1].append(u-1)\n        \n    dp = [0]*n\n    visited = [0]*n\n    def dfs(u, p, d):\n        visited[u] = 1\n        dp[u] = a[u] + max(dp[v] for v in adj[u] if v!= p)\n        for v in adj[u]:\n            if v!= p and d+1 <= k and not visited[v]:\n                dfs(v, u, d+1)\n                \n    dfs(0, -1, 0)\n    return max(dp)\n\nprint(solution(stdin))"
    },
    {
        "number": 4375,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    adj_list = [[] for _ in range(n)]\n    for i in range(n - 1):\n        u, v = map(int, stdin.split())\n        adj_list[u - 1].append(v - 1)\n        adj_list[v - 1].append(u - 1)\n\n    dp = [[0] * n for _ in range(1 << n)]\n    for i in range(n):\n        dp[1 << i][i] = a[i]\n\n    for mask in range(1 << n):\n        for i in range(n):\n            if mask & (1 << i):\n                for j in adj_list[i]:\n                    if j == i:\n                        continue\n                    next_mask = mask | (1 << j)\n                    if (mask & (1 << j)) == 0 and (next_mask & (1 << j)) == 0:\n                        dp[next_mask][j] = max(dp[next_mask][j], dp[mask][i] + a[j])\n\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if dp[1 << i][i] + dp[1 << j][j] - 2 * a[i] - 2 * a[j] <= k:\n                ans = max(ans, dp[1 << i][i] + dp[1 << j][j])\n\n    return str(ans)"
    },
    {
        "number": 4375,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    adj = [[] for _ in range(n+1)]\n    for i in range(n-1):\n        u, v = map(int, stdin.readline().strip().split())\n        adj[u].append(v)\n        adj[v].append(u)\n    dp = [[0]*(k+1) for _ in range(1<<n)]\n    for i in range(n):\n        dp[1<<i][0] = a[i]\n    for mask in range(1, 1<<n):\n        for j in range(k+1):\n            for v in adj[j]:\n                if (mask>>v)&1:\n                    continue\n                for t in range(k+1):\n                    if t+j<=k:\n                        dp[mask][j] = max(dp[mask][j], dp[mask^(1<<v)][t]+a[v])\n    return dp[-1][-1]"
    },
    {
        "number": 4375,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    adj = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n\n    # Create sets for each vertex\n    sets = [set([v]) for v in range(n)]\n    for v in range(n):\n        sets[v].add(v)\n\n    # Compute distance between each pair of vertices\n    dist = [[-1] * n for _ in range(n)]\n    q = [(v, 0) for v in range(n)]\n    while q:\n        v, d = q.pop(0)\n        if dist[v][v]!= -1:\n            continue\n        dist[v][v] = d\n        for u in adj[v]:\n            if dist[v][u] == -1:\n                dist[v][u] = d + 1\n                q.append((u, d + 1))\n\n    # Find all pairs of vertices with distance <= k\n    pairs = []\n    for v in range(n):\n        for u in adj[v]:\n            if dist[v][u] <= k:\n                pairs.append((v, u))\n\n    # Find maximum total weight of subset\n    max_weight = 0\n    for s in sets:\n        weight = sum(a[v] for v in s)\n        if all(dist[v][u] > k for v, u in pairs if v in s and u in s):\n            max_weight = max(max_weight, weight)\n\n    return str(max_weight)"
    },
    {
        "number": 4375,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    edges = [list(map(int, stdin.readline().strip().split())) for _ in range(n-1)]\n    # build the graph\n    graph = [[] for _ in range(n+1)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    # DFS to find the connected components with distance <= k\n    visited = [False] * (n+1)\n    parent = [-1] * (n+1)\n    stack = [(1, 0)]\n    max_weight = 0\n    while stack:\n        u, depth = stack.pop()\n        if visited[u]:\n            continue\n        visited[u] = True\n        parent[u] = None\n        if depth <= k:\n            max_weight += a[u]\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append((v, depth+1))\n    return max_weight"
    },
    {
        "number": 4376,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    b = list(map(int, stdin.split()[2+n:]))\n    f, k = 1, 0\n    for i in range(m):\n        if b[i] <= a[f-1]:\n            f -= 1\n            k = b[i]\n        else:\n            k = b[i] - sum(a[:f-1])\n            f += 1\n        print(f, k)"
    },
    {
        "number": 4376,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    b = list(map(int, stdin.split()[2+n:]))\n    res = []\n    for i in range(m):\n        d = b[i]\n        for j in range(n):\n            if d > a[j]:\n                d -= a[j]\n            else:\n                break\n        res.append(str(j+1) +'' + str(d))\n    return '\\n'.join(res)"
    },
    {
        "number": 4376,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()[0:2]))\n    a = list(map(int, stdin.split()[2:n+2]))\n    b = list(map(int, stdin.split()[n+2:]))\n    dorms = [0] * (n+1)\n    for i in range(n):\n        dorms[i+1] = dorms[i] + a[i]\n    res = []\n    for i in b:\n        f = 1\n        while f <= n and dorms[f] <= i:\n            f += 1\n        k = i - dorms[f-1] + 1\n        res.append(str(f) + \" \" + str(k))\n    return \"\\n\".join(res)"
    },
    {
        "number": 4376,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    b = list(map(int, lines[2].split()))\n    result = []\n    for i in range(m):\n        d = 0\n        for j in range(n):\n            if b[i] - sum(a[:j+1]) >= 0:\n                d += 1\n                k = b[i] - sum(a[:j+1])\n                break\n        result.append(f\"{d} {k}\")\n    return '\\n'.join(result)\n\nprint(solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\")) # Output: \"1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12\"\nprint(solution(\"2 3\\n5 10000000000\\n5 6 9999999999\")) # Output: \"1 5\\n2 1\\n2 9999999994\""
    },
    {
        "number": 4376,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    b = list(map(int, stdin.split()[2+n:]))\n    c = [0] * (max(b) + 1)\n    for i in range(n):\n        c[a[i]:a[i]+a[i+1]] = [i+1] * a[i+1]\n    f, k = [], []\n    for i in range(m):\n        f.append(c[b[i]])\n        k.append(b[i] - sum(a[:f[i]-1]))\n    return \"\\n\".join(str(f[i]) + \" \" + str(k[i]) for i in range(m))\n\nstdin = \"3 6\\n10 15 12\\n1 9 12 23 26 37\"\nprint(solution(stdin)) # Output: \"1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12\"\n\nstdin = \"2 3\\n5 10000000000\\n5 6 9999999999\"\nprint(solution(stdin)) # Output: \"1 5\\n2 1\\n2 9999999994\""
    },
    {
        "number": 4376,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    f, k = 0, 0\n    for j in range(m):\n        while b[j] > a[f]:\n            b[j] -= a[f]\n            f += 1\n        k = b[j]\n        print(f + 1, k)\n\n    return \"\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    dorm = 0\n    room = 0\n    for i in b:\n        for j in range(n):\n            if i <= a[j]:\n                dorm += 1\n                room = i\n                i -= a[j]\n            else:\n                i -= a[j]\n        print(dorm, room)"
    },
    {
        "number": 4376,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    curr = 0\n    for i in range(n):\n        curr += a[i]\n        if curr >= b[0]:\n            dorm = i+1\n            room = b[0] - (curr - a[i])\n            break\n\n    result = []\n    for j in range(1, m):\n        curr += a[dorm-1]\n        if curr < b[j]:\n            room += 1\n        else:\n            dorm += 1\n            room = b[j] - (curr - a[dorm-1])\n        result.append(str(dorm) + \" \" + str(room))\n\n    return \"\\n\".join(result)"
    },
    {
        "number": 4376,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    res = []\n    for i in range(m):\n        if b[i] <= a[0]:\n            res.append(str(1) + \" \" + str(b[i]))\n        else:\n            for j in range(n):\n                if b[i] <= sum(a[:j+1]):\n                    res.append(str(j+1) + \" \" + str(b[i] - sum(a[:j])))\n                    break\n    return \"\\n\".join(res)\n\nstdin = \"3 6\\n10 15 12\\n1 9 12 23 26 37\"\nprint(solution(stdin))  # Output: 1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12\n\nstdin = \"2 3\\n5 10000000000\\n5 6 9999999999\"\nprint(solution(stdin))  # Output: 1 5\\n2 1\\n2 9999999994"
    },
    {
        "number": 4376,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    # accumulate the sum of the rooms of each dormitory\n    accum = [a[0]]\n    for i in range(1, n):\n        accum.append(a[i] + accum[i-1])\n\n    # for each letter, find the dormitory and room number where it should be delivered\n    res = []\n    for j in range(m):\n        f = 0\n        k = 1\n        while accum[f] <= b[j]:\n            f += 1\n            k = b[j] - (accum[f-1] if f > 0 else 0)\n        res.append(f, k)\n\n    # print the result\n    for f, k in res:\n        print(f, k)"
    },
    {
        "number": 4377,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4 = map(int, stdin.split())\n    a = [x1, x2, x3, x4]\n    a.sort()\n    b = list(set([x1 + x2, x1 + x3, x1 + x4, x2 + x3, x2 + x4, x3 + x4]))\n    b.sort()\n    if a[0] + a[1] == a[2] + a[3]:\n        return \" \".join(map(str, [a[0], a[1], a[2]]))\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if a[i] + a[j] == a[k] and a[i]!= a[j] and a[k]!= a[j]:\n                    return \" \".join(map(str, [a[i], a[j], a[k]]))\n    return \" \".join(map(str, [b[0], b[1], b[2]]))"
    },
    {
        "number": 4377,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(x) for x in stdin.split()]\n    a, b, c, d = nums\n    if a+b == c+d:\n        return str(a) +'' + str(b) +'' + str(c)\n    elif a+c == b+d:\n        return str(a) +'' + str(c) +'' + str(b)\n    else:\n        return str(b) +'' + str(a) +'' + str(c)"
    },
    {
        "number": 4377,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    nums = list(map(int, stdin.split()))\n    # sort the input in ascending order\n    nums.sort()\n    # calculate the pairwise sums\n    pairwise_sums = [(nums[i] + nums[j]) for i in range(3) for j in range(i+1, 3)]\n    # calculate the sum of all three numbers\n    total = sum(nums)\n    # find the indices of the pairwise sums\n    idx = [pairwise_sums.index(i) for i in nums[:3]]\n    # guess the integers\n    guess = [nums[i] for i in idx]\n    # return the guessed integers\n    return''.join(map(str, guess))"
    },
    {
        "number": 4377,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    a, b, c = sorted(nums[0:3])\n    d = sum(nums) - a - b - c\n    return''.join(map(str, [a, b, c]))\n"
    },
    {
        "number": 4377,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    a, b, c, d = nums\n    if a + b == c + d or a + c == b + d or b + c == a + d:\n        return str(a) +'' + str(b) +'' + str(c)\n    elif a + b == d + c or a + c == d + b or b + c == d + a:\n        return str(a) +'' + str(b) +'' + str(d)\n    elif a + d == c + b or a + d == b + c or b + d == a + c:\n        return str(a) +'' + str(c) +'' + str(d)\n    elif c + d == a + b or c + d == a + b or d + c == b + a:\n        return str(b) +'' + str(c) +'' + str(d)\n    elif a + b == d and a + c == c and b + c == a:\n        return str(a) +'' + str(b) +'' + str(c)\n    elif a + b == d and a + d == b and b + d == a:\n        return str(a) +'' + str(c) +'' + str(d)\n    elif a + b == d and a + d == c and b + d == c:\n        return str(a) +'' + str(b) +'' + str(d)\n    elif a + b == d and a + c == b and b + c == c:\n        return str(a) +'' + str(d) +'' + str(c)\n    elif a + b == d and a + c == d and b + c == a:\n        return str(a) +'' + str(c) +'' + str(b)\n    elif a + b == d and a + c == b and b + c == d:\n        return str(b) +'' + str(c) +'' + str(a)\n    else:\n        return str(a) +'' + str(b) +'' + str(c)"
    },
    {
        "number": 4377,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4 = map(int, stdin.split())\n    if x1 + x2 == x3 + x4:\n        return str(x1) + \" \" + str(x2) + \" \" + str(x3)\n    elif x1 + x3 == x2 + x4:\n        return str(x1) + \" \" + str(x3) + \" \" + str(x2)\n    elif x1 + x2 + x3 == x4:\n        return str(x1) + \" \" + str(x2) + \" \" + str(x4 - x2)\n    else:\n        return str(x1) + \" \" + str(x3) + \" \" + str(x4 - x1 - x3)"
    },
    {
        "number": 4377,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    x1, x2, x3, x4 = map(int, stdin.split())\n\n    # possible values for a, b, c\n    values = [x1 + x2, x1 + x3, x1 + x4, x2 + x3, x2 + x4, x3 + x4]\n\n    # guess a, b, c\n    a = b = c = 0\n    if x1 in values:\n        a = x1\n    elif x2 in values:\n        a = x2\n    elif x3 in values:\n        a = x3\n    else:\n        a = x4\n    values.remove(a)\n\n    if x2 in values:\n        b = x2\n    elif x1 in values:\n        b = x1\n    else:\n        b = x3\n    values.remove(b)\n\n    if x3 in values:\n        c = x3\n    else:\n        c = x1\n\n    # check if a, b, c are valid\n    if a + b!= x1 or a + c!= x1 or b + c!= x1:\n        return f\"No solution found for {x1}, {x2}, {x3}, {x4}\"\n\n    # return a, b, c\n    return f\"{a} {b} {c}\""
    },
    {
        "number": 4377,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    numbers = sorted(map(int, stdin.split()))\n    sums = [numbers[0]+numbers[1], numbers[0]+numbers[2], numbers[1]+numbers[2], numbers[0]+numbers[1]+numbers[2]]\n    for i, num in enumerate(sums):\n        for j in range(3):\n            if j!= i and numbers[j] == num - sums[i]:\n                return str(numbers[i]) +'' + str(numbers[j]) +'' + str(numbers[k])\n    return 'None'"
    },
    {
        "number": 4377,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    x1, x2, x3, x4 = map(int, stdin.split())\n    \n    # calculate possible values\n    a = x1 + x2\n    b = x1 + x3\n    c = x1 + x4\n    d = x2 + x3\n    e = x2 + x4\n    f = x3 + x4\n    \n    # filter valid values\n    valid_values = [x1, x2, x3, x4, a, b, c, d, e, f]\n    valid_values = sorted(list(set(valid_values)))\n    \n    # guess three values\n    guessed_values = []\n    for value in valid_values:\n        if value not in guessed_values:\n            guessed_values.append(value)\n            if len(guessed_values) == 3:\n                break\n    \n    # print guessed values\n    return''.join(map(str, guessed_values))"
    },
    {
        "number": 4377,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    x1, x2, x3, x4 = [int(x) for x in stdin.split()]\n    \n    # Compute the sum of the first three numbers\n    s1 = x1 + x2 + x3\n    s2 = x2 + x3 + x4\n    s3 = x1 + x3 + x4\n    \n    # Guess the first number\n    if s1 == x4:\n        a = x1\n        b = x2\n        c = x3\n    elif s2 == x4:\n        a = x2\n        b = x3\n        c = x1\n    elif s3 == x4:\n        a = x3\n        b = x1\n        c = x2\n    else:\n        # Guess the second number\n        a = x1 + x2\n        b = x1 + x3\n        c = x2 + x3\n        \n        # Guess the third number\n        if a == x4:\n            a = x1\n            b = x2\n            c = x3\n        elif b == x4:\n            a = x2\n            b = x3\n            c = x1\n        elif c == x4:\n            a = x3\n            b = x1\n            c = x2\n        else:\n            # Guess the fourth number\n            a = x1 + x2 + x3\n            b = x2 + x3 + x4\n            c = x1 + x3 + x4\n    \n    # Print the guessed numbers\n    return f\"{a} {b} {c}\""
    },
    {
        "number": 4378,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = s.replace('R', '1').replace('B', '2').replace('G', '3')\n    count = 0\n    prev = None\n    for i in range(n):\n        if t[i] == prev:\n            count += 1\n        else:\n            prev = t[i]\n            count = 1\n        if i < n-1 and t[i] == t[i+1]:\n            if count == 2:\n                count -= 1\n                t = t[:i+1] + 'B' + t[i+1:]\n            elif count == 1:\n                count -= 1\n                t = t[:i+1] + 'G' + t[i+1:]\n    return count, ''.join(t.replace('1', 'R').replace('2', 'B').replace('3', 'G'))"
    },
    {
        "number": 4378,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.strip().split())\n    s = list(s)\n    colors = set(s)\n    if len(colors) == 1:\n        return \"No solution\"\n    r = 0\n    for i in range(1, n):\n        if s[i]!= s[i-1]:\n            r += 1\n            s[i] = s[i-1]\n    if r == 0:\n        return \"No solution\"\n    t = \"\".join(s)\n    return r, t"
    },
    {
        "number": 4378,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    colors = list(s)\n    i, j = 0, 1\n    res = 0\n    while j < n:\n        if colors[i]!= colors[j]:\n            res += 1\n            colors[i], colors[j] = colors[j], colors[i]\n        i += 1\n        j += 1\n    print(res)\n    return ''.join(colors)"
    },
    {
        "number": 4378,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    t = s\n    cnt = 0\n    for i in range(1, n):\n        if s[i]!= t[i]:\n            cnt += 1\n            t = t[:i] + s[i] + t[i+1:]\n    return cnt, t\n\nstdin = \"9\\nRBGRRBRGG\"\nprint(solution(stdin))  # Output: 2 RBGRGBRGR\n\nstdin = \"8\\nBBBGBRRR\"\nprint(solution(stdin))  # Output: 2 BRBGBRGR\n\nstdin = \"13\\nBBRRRRGGGGGRR\"\nprint(solution(stdin))  # Output: 6 BGRBRBGBGBGRG"
    },
    {
        "number": 4378,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = list(stdin.split()[1])\n    t = s.copy()\n    r = 0\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            if s[i] == 'R':\n                t[i+1] = 'G'\n                r += 1\n            elif s[i] == 'G':\n                t[i+1] = 'B'\n                r += 1\n            else:\n                t[i+1] = 'R'\n                r += 1\n    print(r)\n    print(''.join(t))\n"
    },
    {
        "number": 4378,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.splitlines()[0].split())\n    s = stdin.splitlines()[1]\n    count = 0\n    i = 0\n    while i < n - 1:\n        if s[i] == s[i+1]:\n            count += 1\n            i += 2\n            continue\n        i += 1\n    if count >= n-1:\n        return str(count) + \"\\n\" + s\n    for j in range(i+1, n):\n        if s[i]!= s[j]:\n            t = list(s)\n            t[i], t[j] = t[j], t[i]\n            t = \"\".join(t)\n            count = 0\n            i = 0\n            while i < n - 1:\n                if t[i] == t[i+1]:\n                    count += 1\n                    i += 2\n                    continue\n                i += 1\n            if count >= n-1:\n                return str(count) + \"\\n\" + t\n    return str(n) + \"\\n\" + s"
    },
    {
        "number": 4378,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    r = 0\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            r += 1\n    if r == 0:\n        t = s\n    else:\n        t = s[:r] + ['G' if s[i] == 'R' else 'R' for i in range(r,n)] + s[n-r:]\n    return str(r) + '\\n' + ''.join(t)"
    },
    {
        "number": 4378,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n, s = int(n), s\n    t = s\n    ans = 0\n    for i in range(n-1):\n        if s[i]!= s[i+1]:\n            t = t[:i+1] + s[i+1] + t[i+1:]\n            ans += 1\n    print(ans)\n    print(t)\n\nstdin = \"9\\nRBGRRBRGG\"\nsolution(stdin)\n\nstdin = \"8\\nBBBGBRRR\"\nsolution(stdin)\n\nstdin = \"13\\nBBRRRRGGGGGRR\"\nsolution(stdin)"
    },
    {
        "number": 4378,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    # initialize variables\n    r = 0\n    t = s\n\n    # iterate over adjacent pairs of lamps and check if their colors are distinct\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            # swap colors to make the garland diverse\n            t = t[:i+1] + swap(s[i]) + t[i+2:]\n            r += 1\n    \n    return str(r) + \"\\n\" + t\n\ndef"
    },
    {
        "number": 4378,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.splitlines()[0].split())\n    lamps = list(s)\n    count = 0\n    for i in range(n):\n        if i == 0:\n            if lamps[i] == lamps[i+1]:\n                lamps[i+1] = 'R'\n                count += 1\n        elif i == n-1:\n            if lamps[i] == lamps[i-1]:\n                lamps[i-1] = 'R'\n                count += 1\n        else:\n            if lamps[i] == lamps[i+1]:\n                lamps[i+1] = 'R'\n                count += 1\n            elif lamps[i] == lamps[i-1]:\n                lamps[i-1] = 'R'\n                count += 1\n    return count, ''.join(lamps)"
    },
    {
        "number": 4379,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    k = 1\n    x = 0\n    y = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            k += 1\n            y = i\n        elif a[i] == a[i-1]:\n            # if consecutive same values, reset the subsequence\n            k = 1\n            x = i\n            y = i+1\n        else:\n            # if not increasing, reset the subsequence\n            k = 1\n            x = i\n\n    # if the last element is not increasing, reset the subsequence\n    if k == 1:\n        k = 1\n        x = n-1\n        y = n\n    # print the maximum length and the subsequence of indices\n    print(k)\n    print(' '.join(str(i) for i in range(x, y)))"
    },
    {
        "number": 4379,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n\n    # check if arr is already increasing\n    if all(arr[i] <= arr[i+1] for i in range(n-1)):\n        return 1, '1'\n\n    # binary search for max length k\n    low, high = 1, n\n    while low < high:\n        mid = (low + high) // 2\n        if all(arr[i] <= arr[i+mid] for i in range(n-mid)):\n            low = mid + 1\n        else:\n            high = mid\n    k = low - 1\n\n    # find the indices of the subsequence\n    indices = []\n    i, j = 0, 0\n    while j < n:\n        if arr[j] == arr[i] + j - i + 1:\n            j += 1\n        else:\n            i = j\n            j += 1\n        if j - i == k:\n            indices.append(str(i+1))\n            i += 1\n\n    # return k and indices as string\n    return k,''.join(indices)\n"
    },
    {
        "number": 4379,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n\n    # dp[i][j] = maximum length of increasing subsequence ending at index i with j distinct elements\n    dp = [[0] * 2 for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = 1\n        dp[i][1] = 1\n\n    for i in range(1, n):\n        for j in range(2):\n            if a[i] > a[i-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                if j == 0:\n                    dp[i][j] = max(dp[i][j], dp[i-1][j])\n            else:\n                dp[i][j] = dp[i-1][j]\n\n    ans = dp[n-1][1]\n    indices = []\n    i = n - 1\n    j = 1\n    while i >= 0:\n        if dp[i][j] == ans:\n            indices.append(i)\n            i -= 1\n        elif j == 0:\n            break\n        else:\n            j -= 1\n\n    return f\"{ans}\\n{' '.join(map(str, indices[::-1]))}\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    \n    # Finding all possible increasing sequences of consecutive integers\n    sequences = []\n    for i in range(n):\n        curr = [arr[i]]\n        for j in range(i+1, n):\n            if arr[j] == arr[j-1]+1:\n                curr.append(arr[j])\n            else:\n                break\n        if len(curr) > 1:\n            sequences.append(curr)\n    \n    # Finding the maximum length subsequence\n    max_seq_len = 0\n    for seq in sequences:\n        if len(seq) > max_seq_len:\n            max_seq_len = len(seq)\n    \n    # Finding the indices of the maximum length subsequence\n    indices = []\n    for seq in sequences:\n        if len(seq) == max_seq_len:\n            indices = list(range(seq[0]-1, seq[0]+len(seq)-1))\n            break\n    \n    # Printing the required output\n    print(max_seq_len)\n    print(' '.join(map(str, indices)))\n    \n    return \"\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    # Find the maximum increasing subsequence\n    m = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and m[i] < m[j] + 1:\n                m[i] = m[j] + 1\n    \n    # Find the longest increasing subsequence with length greater than or equal to 3\n    k = max(m)\n    l = m.index(k)\n    if k < 3:\n        print(0)\n        print(-1)\n        return\n    \n    # Find the indices of the longest increasing subsequence with length greater than or equal to 3\n    indices = [l]\n    for i in range(l-1, -1, -1):\n        if a[i] < a[l] and m[i] == m[l] - 1:\n            indices.append(i)\n            l = i\n    \n    # Print the maximum length and the indices of the subsequence\n    print(k)\n    print(' '.join(map(str, indices)))"
    },
    {
        "number": 4379,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n\n    curr_len = 1\n    max_len = 1\n    subseq_start = 0\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]+1:\n            curr_len += 1\n            if curr_len > max_len:\n                max_len = curr_len\n                subseq_start = i-curr_len+1\n        else:\n            curr_len = 1\n\n    print(max_len)\n    print(' '.join(map(str, range(subseq_start, subseq_start+max_len))))"
    },
    {
        "number": 4379,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n\n    # Define a function to check if a subarray is increasing\n    def is_increasing(subarray):\n        return all(subarray[i] < subarray[i+1] for i in range(len(subarray)-1))\n\n    # Find all valid subarrays and find the maximum length\n    max_length = 0\n    valid_subarrays = []\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            subarray = arr[i:j+1]\n            if is_increasing(subarray) and len(subarray) > max_length:\n                max_length = len(subarray)\n                valid_subarrays = [subarray]\n            elif is_increasing(subarray) and len(subarray) == max_length:\n                valid_subarrays.append(subarray)\n\n    # Find the subarray with maximum length that is also increasing\n    final_subarray = max(valid_subarrays, key=len)\n\n    # Print the maximum length and the indices of the subarray\n    print(max_length)\n    print(*[arr.index(x) for x in final_subarray])"
    },
    {
        "number": 4379,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n\n    # Finding the length of increasing subsequence using binary search\n    low = 1\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        if is_increasing_subsequence(arr, mid):\n            high = mid - 1\n        else:\n            low = mid + 1\n    k = high\n\n    # Finding the indices of increasing subsequence\n    result = []\n    for i in range(n):\n        if arr[i] == arr[i+1] - 1:\n            result.append(i)\n    return str(k) + '\\n' +''.join(map(str, result))\n\n\ndef"
    },
    {
        "number": 4379,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    k = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            k += 1\n        else:\n            k = 1\n        if k == n:\n            return k, str(i-k+1) +'' +''.join(map(str, range(i-k+2, i+1)))\n    return k, ''\n\nprint(solution(open('input.txt', 'r')))"
    },
    {
        "number": 4379,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    def dfs(start, end, length):\n        if start == end:\n            return [[start]]\n        if start > end:\n            return []\n        res = []\n        for i in range(start, end):\n            for subseq in dfs(start, i, length + 1):\n                res.append([start] + subseq)\n        for i in range(start, end + 1):\n            for subseq in dfs(i, end, length + 1):\n                res.append([start] + subseq)\n        return res\n    \n    subseqs = dfs(0, n - 1, 1)\n    ans = 0\n    max_len = 0\n    for subseq in subseqs:\n        if subseq[0] == 0:\n            continue\n        for i in range(1, len(subseq)):\n            if subseq[i] - subseq[i - 1]!= 1:\n                break\n        else:\n            if len(subseq) > max_len:\n                max_len = len(subseq)\n                ans = subseq\n    \n    return f\"{max_len}\\n{' '.join(map(str, ans))}\""
    },
    {
        "number": 4380,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    for C in range(1, 4):\n        if (A * B * C) % 2 == 1:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    for C in range(1, 4):\n        if A * B * C % 2 == 1:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    for C in range(1, 4):\n        if A * B * C % 2 == 1:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for C in range(1, 4):\n        if A * B * C % 2 == 1:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    A, B = map(int, stdin.strip().split())\n    \n    # Check if there is an integer C between 1 and 3 such that A * B * C is an odd number\n    for C in range(1, 4):\n        if A * B * C % 2 == 1:\n            return \"Yes\"\n    \n    # If no such integer is found, return \"No\"\n    return \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    for c in range(1, 4):\n        if a * b * c % 2!= 0:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if (A == 1 and B == 1) or (A == 3 and B == 3):\n        return \"Yes\"\n    elif A == 2 and B == 2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for C in range(1, 4):\n        if A * B * C % 2 == 1:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for i in range(1, 4):\n        if A*B*i % 2!= 0:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for C in range(1, 4):\n        if A * B * C % 2!= 0:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4381,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if y % 2!= 0:\n        return \"Invalid input: Y is not even\"\n    train_fare = x\n    bus_fare = y // 2\n    total_fare = train_fare + bus_fare\n    return str(total_fare)"
    },
    {
        "number": 4381,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split()))\n    if y % 2!= 0:\n        y = (y // 2) * 2  # make it even\n    fare = x + (y // 2)  # calculate the fare\n    return str(fare)"
    },
    {
        "number": 4381,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if X >= Y:\n        return str(X)\n    else:\n        train_fare = X\n        bus_fare = Y\n        train_discount = train_fare // 2\n        if train_discount == 0:\n            train_discount = 1\n        bus_discount = bus_fare // 2\n        if bus_discount == 0:\n            bus_discount = 1\n        total_fare = train_fare + (train_discount * 2) + bus_fare - bus_discount\n        return str(total_fare)"
    },
    {
        "number": 4381,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = list(map(int, stdin.split()))\n    train_fare = X\n    bus_fare = Y\n    bus_discount = bus_fare // 2\n    total_fare = train_fare + bus_discount + bus_fare\n    return str(total_fare)"
    },
    {
        "number": 4381,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if Y % 2 == 1:\n        Y -= Y % 2 # round Y down to the nearest even number\n    if X <= Y:\n        return str(X)\n    else:\n        return str(X + Y // 2) # add the train fare and bus fare for half the price"
    },
    {
        "number": 4381,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x >= y and x % 2 == 0:\n        train_fare = y if x >= y else x\n        bus_fare = y // 2\n        total_fare = train_fare + bus_fare\n        return str(total_fare)\n    else:\n        return \"-1\""
    },
    {
        "number": 4381,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split()))\n    if y % 2 == 0:\n        return str(x)\n    return str(x + y // 2)"
    },
    {
        "number": 4381,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if y % 2 == 1:\n        return str(x)\n    else:\n        return str((x+y)//2)"
    },
    {
        "number": 4381,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    train_fare, bus_fare = map(int, stdin.split())\n    if train_fare > bus_fare:\n        return str(train_fare)\n    else:\n        return str(train_fare + bus_fare // 2)"
    },
    {
        "number": 4381,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    X, Y = map(int, stdin.strip().split())\n    \n    # Calculate train and bus fare\n    train_fare = X\n    bus_fare = Y // 2\n    \n    # Calculate total fare\n    total_fare = train_fare + bus_fare\n    \n    # Return output\n    return str(total_fare)"
    },
    {
        "number": 4382,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                if len(set(str(i) + str(j) + str(k))) == 3:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4382,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    # There are n possibilities for the first digit\n    # There are n possibilities for the second digit\n    # There are n possibilities for the third digit\n    # Therefore, there are n^3 possibilities in total\n    return str(n**3)"
    },
    {
        "number": 4382,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n\n    # Calculate number of possible passwords\n    count = 10**N\n    for i in range(N-1, -1, -1):\n        count *= (10-i)\n\n    # Print output\n    print(count)\n    return \"\""
    },
    {
        "number": 4382,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    N = int(stdin)\n\n    # Calculate number of possible passwords\n    possible_passwords = 10 ** N\n\n    # Print result\n    print(possible_passwords)\n\n    # Return solution as a string\n    return str(possible_passwords)"
    },
    {
        "number": 4382,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    total = 10 ** n\n    count = 0\n    for i in range(total):\n        for j in range(total):\n            for k in range(total):\n                s = str(i) + str(j) + str(k)\n                if set(s) == set(str(i)):\n                    count += 1\n    return str(count)\n\nprint(solution(open('input.txt', 'r')))"
    },
    {
        "number": 4382,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    total = 10**N\n    count = 0\n    for i in range(1, 10):\n        count += total\n    return count\n\nstdin = \"2\"\nprint(solution(stdin)) # Output: 8"
    },
    {
        "number": 4382,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 10**n\n    return str(count)"
    },
    {
        "number": 4382,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    total = 10 ** n\n    return str(total)"
    },
    {
        "number": 4382,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n\n    # calculate number of possible passwords\n    num_passwords = 10 ** n\n\n    # print result\n    print(num_passwords)\n\n    # return result as string\n    return str(num_passwords)"
    },
    {
        "number": 4382,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n\n    # Count the number of possible passwords\n    count = 0\n    for i in range(1, 10):\n        for j in range(1, 10):\n            for k in range(1, 10):\n                if i!= j and i!= k and j!= k:\n                    count += 1\n\n    return str(count)"
    },
    {
        "number": 4383,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X % 2 == 1:\n        return \"YES\"\n    elif X % 3 == 0:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 4383,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    if X % 7 == 0 and X % 5 == 0 and X % 3 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4383,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x % 2 == 1:\n        return \"NO\"\n    else:\n        if x < 7:\n            return \"NO\"\n        else:\n            return \"YES\"\n\ndef"
    },
    {
        "number": 4383,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    X = int(stdin)\n    \n    # Check if Shichi-Go-San is celebrated based on X\n    if X % 7 == 0:\n        print(\"YES\")\n        print(\"The growth of a seven-year-old child will be celebrated.\")\n    elif X % 5 == 0:\n        print(\"YES\")\n        print(\"The growth of a five-year-old child will be celebrated.\")\n    elif X % 3 == 0:\n        print(\"YES\")\n        print(\"The growth of a three-year-old child will be celebrated.\")\n    else:\n        print(\"NO\")\n    \n    # Return solution\n    return None"
    },
    {
        "number": 4383,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    if x >= 7:\n        return \"YES\"\n    elif x == 6 or x == 5:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 4383,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    if x in [7, 5, 3]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4383,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x >= 7:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4383,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    if x == 7 or x == 5 or x == 3:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4383,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    X = int(stdin.readline().strip())\n\n    # check if X is an integer\n    if not isinstance(X, int):\n        return \"NO\"\n\n    # check if X is within the range of 1-9\n    if X < 1 or X > 9:\n        return \"NO\"\n\n    # check if X is a multiple of 3\n    if X % 3!= 0:\n        return \"NO\"\n\n    # check if X is a multiple of 5\n    if X % 5!= 0:\n        return \"NO\"\n\n    # check if X is a multiple of 7\n    if X % 7!= 0:\n        return \"NO\"\n\n    # check if X is a multiple of 10\n    if X % 10!= 0:\n        return \"NO\"\n\n    # check if X is a multiple of 14\n    if X % 14!= 0:\n        return \"NO\"\n\n    # check if X is a multiple of 15\n    if X % 15!= 0:\n        return \"NO\"\n\n    # check if X is a multiple of 21\n    if X % 21!= 0:\n        return \"NO\"\n\n    # check if X is a multiple of 28\n    if X % 28!= 0:\n        return \"NO\"\n\n    # check if X is a multiple of 35\n    if X % 35!= 0:\n        return \"NO\"\n\n    # check if X is a multiple of 49\n    if X % 49!= 0:\n        return \"NO\"\n\n    # check if X is a multiple of 64\n    if X % 64!= 0:\n        return \"NO\"\n\n    # if none of the above conditions are met, X is a multiple of 75\n    return \"YES\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    if X >= 7:\n        return \"YES\"\n    elif X >= 4:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4384,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 1000:\n        return 'ABC'\n    else:\n        return 'ABD'"
    },
    {
        "number": 4384,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 999:\n        return f\"ABC{n:03d}\"\n    else:\n        return f\"ABD{n-1000:03d}\""
    },
    {
        "number": 4384,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1000:\n        return 'ABC'\n    else:\n        return 'ABD' + str(n - 999).zfill(3)"
    },
    {
        "number": 4384,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1000:\n        return \"ABC\"\n    elif n < 2000:\n        return \"ABD\"\n    else:\n        return \"ABC\"  # AtCoder Beginner Contest has ended."
    },
    {
        "number": 4384,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n <= 999:\n        return f\"ABC{n:03d}\"\n    else:\n        return f\"ABD{(n-999):03d}\""
    },
    {
        "number": 4384,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 1000:\n        return \"ABC\"\n    elif n < 2000:\n        return \"ABD\"\n    else:\n        return \"ABC\""
    },
    {
        "number": 4384,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input from string to integer\n    N = int(stdin)\n\n    # Check if input is within range\n    if N < 1 or N > 1998:\n        return \"Invalid input\"\n\n    # Check if N is within the first 1000 rounds\n    if N <= 999:\n        return \"ABC\"\n\n    # Check if N is within the next 98 rounds\n    if N <= 1998:\n        return \"ABD\"\n\n    # If N is greater than 1998, return an invalid input message\n    return \"Invalid input\""
    },
    {
        "number": 4384,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 999:\n        label = \"ABC\"\n    else:\n        label = \"ABD\"\n    N -= 999\n    if N <= 999:\n        label += str(N).zfill(3)\n    else:\n        label += str(N - 999).zfill(3)\n    return label"
    },
    {
        "number": 4384,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return f\"ABC{N//1000:03d}\""
    },
    {
        "number": 4384,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1000:\n        return \"ABC\"\n    else:\n        return \"ABD\""
    },
    {
        "number": 4385,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.strip().split())\n    if k < a + b <= k or k < a + c <= k or k < a + d <= k or k < a + e <= k or k < b + c <= k or k < b + d <= k or k < b + e <= k or k < c + d <= k or k < c + e <= k or k < d + e <= k:\n        return 'Yay!'\n    else:\n        return ':('"
    },
    {
        "number": 4385,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    antennas = [(a, 'A'), (b, 'B'), (c, 'C'), (d, 'D'), (e, 'E')]\n    for i in range(len(antennas)):\n        for j in range(i+1, len(antennas)):\n            if abs(antennas[i][0] - antennas[j][0]) > k:\n                print(antennas[i][1], antennas[j][1], 'cannot communicate directly')\n                return ':(',\n            else:\n                print(antennas[i][1], antennas[j][1], 'can communicate directly')\n    return 'Yay!'"
    },
    {
        "number": 4385,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    distances = [abs(b-a), abs(c-a), abs(d-a), abs(e-a), abs(e-b), abs(d-c), abs(e-c), abs(e-d)]\n    for distance in distances:\n        if distance > k:\n            return \":( There exists a pair of antennas that cannot communicate directly.\"\n    return \"Yay!\""
    },
    {
        "number": 4385,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    a, b, c, d, e, k = nums\n    if k >= (e - b):\n        return \"Yay!\"\n    return \":\""
    },
    {
        "number": 4385,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    if max(b-a, c-a, d-a, e-a) <= k:\n        return \"Yay!\"\n    elif max(a-b, c-b, d-b, e-b) <= k:\n        return \"Yay!\"\n    elif max(a-c, b-c, d-c, e-c) <= k:\n        return \"Yay!\"\n    elif max(a-d, b-d, c-d, e-d) <= k:\n        return \"Yay!\"\n    elif max(a-e, b-e, c-e, d-e) <= k:\n        return \"Yay!\"\n    else:\n        return \":(\"\n\nstdin = \"1 2 4 8 9 15\"\nprint(solution(stdin)) # Output: Yay!"
    },
    {
        "number": 4385,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    if k <= 1:\n        return \"Yay!\"\n    if b - a <= k and c - b <= k and d - c <= k and e - d <= k:\n        return \"Yay!\"\n    return \":(\""
    },
    {
        "number": 4385,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.strip().split())\n    distances = [b - a, c - a, d - a, e - a, e - b]\n    if any(distance > k for distance in distances):\n        return ':(\\n'\n    else:\n        return 'Yay!\\n'"
    },
    {
        "number": 4385,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    for i in range(4):\n        for j in range(i+1, 5):\n            if abs(a - b) > k and abs(a - c) > k and abs(a - d) > k and abs(a - e) > k and abs(b - c) > k and abs(b - d) > k and abs(b - e) > k and abs(c - d) > k and abs(c - e) > k and abs(d - e) > k:\n                return \":( There exists a pair of antennas that cannot communicate directly.\"\n    return \"Yay!\""
    },
    {
        "number": 4385,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    if k < abs(b - a) or k < abs(c - a) or k < abs(d - a) or k < abs(e - a):\n        return \":(\\n\"\n    for i in range(2, 5):\n        if k < abs(b - i) or k < abs(c - i) or k < abs(d - i) or k < abs(e - i):\n            return \":(\\n\"\n    return \"Yay!\\n\""
    },
    {
        "number": 4385,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    if k < 0 or k > 123:\n        return \"Error!\"\n    for i in range(a, b):\n        for j in range(c, d):\n            if abs(j - i) > k:\n                return \":(\\n\"\n    for i in range(a, b):\n        for j in range(e, d):\n            if abs(j - i) > k:\n                return \":(\\n\"\n    return \"Yay!\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4386,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, s = map(int, stdin.split())\n    if a >= 3200:\n        return'red'\n    else:\n        return s"
    },
    {
        "number": 4386,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, s = map(str, stdin.strip().split())\n    a = int(a)\n    if a >= 3200:\n        return \"red\"\n    return s"
    },
    {
        "number": 4386,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    a = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    # check if a is less than 3200\n    if a < 3200:\n        # print red\n        return \"red\"\n    else:\n        # print s\n        return s"
    },
    {
        "number": 4386,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, s = map(str, stdin.split())\n    a = int(a)\n    if a < 3200:\n        return \"red\"\n    else:\n        return s"
    },
    {
        "number": 4386,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, s = map(int, stdin.split())\n    if a >= 3200:\n        return \"red\"\n    else:\n        return s"
    },
    {
        "number": 4386,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, s = stdin.strip().split()\n    a = int(a)\n    if a < 3200:\n        return \"red\"\n    else:\n        return s"
    },
    {
        "number": 4386,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    s = stdin.split()[1]\n    if a < 3200:\n        return \"red\"\n    else:\n        return s"
    },
    {
        "number": 4386,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, s = stdin.split()\n    a = int(a)\n    if a >= 3200:\n        return \"red\"\n    else:\n        return s\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4386,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read the input\n    a, s = map(str, stdin.split())\n    \n    # convert the input to integer\n    a = int(a)\n    \n    # check if a is less than 3200\n    if a < 3200:\n        # print red\n        return \"red\"\n    else:\n        # print s\n        return s"
    },
    {
        "number": 4386,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    if a >= 3200:\n        return \"red\"\n    else:\n        return s"
    },
    {
        "number": 4387,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    r = int(stdin.strip())\n    \n    # Check which contest to take\n    if r < 1200:\n        return \"ABC\"\n    elif r < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\""
    },
    {
        "number": 4387,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin.strip())\n    if rating < 1200:\n        return \"ABC\"\n    elif rating < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\""
    },
    {
        "number": 4387,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R < 1200:\n        return \"ABC\"\n    elif R < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\""
    },
    {
        "number": 4387,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n\n    if R < 1200:\n        print(\"ABC\")\n    elif R < 2800:\n        print(\"ARC\")\n    else:\n        print(\"AGC\")\n\n    return \"\""
    },
    {
        "number": 4387,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin.strip())\n    if rating < 1200:\n        return \"ABC\"\n    elif rating < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\""
    },
    {
        "number": 4387,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R < 1200:\n        return \"ABC\"\n    elif R < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\""
    },
    {
        "number": 4387,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    r = int(stdin)\n\n    # Determine next contest\n    if r < 1200:\n        return \"ABC\"\n    elif r < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin.strip())\n    if rating < 1200:\n        return \"ABC\"\n    elif rating < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\""
    },
    {
        "number": 4387,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    R = int(stdin.strip())\n    \n    # Determine the rating range\n    if R < 1200:\n        next_contest = 'ABC'\n    elif R < 2800:\n        next_contest = 'ARC'\n    else:\n        next_contest = 'AGC'\n    \n    # Return output\n    return next_contest"
    },
    {
        "number": 4387,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin.strip())\n    if R < 1200:\n        return \"ABC\"\n    elif R < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\""
    },
    {
        "number": 4388,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read the input integer\n    n = int(stdin)\n\n    # convert the integer to a string and list of characters\n    n_str = str(n)\n    n_list = list(n_str)\n\n    # replace the occurrences of 1 with 9 and 9 with 1 in the list of characters\n    n_list = [9 if i == '1' else i for i in n_list]\n    n_list = [1 if i == '9' else i for i in n_list]\n\n    # convert the list of characters back to an integer and return it as a string\n    n = int(\"\".join(n_list))\n    return str(n)\n"
    },
    {
        "number": 4388,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    result = ''\n    for digit in n:\n        if digit == '1':\n            result += '9'\n        elif digit == '9':\n            result += '1'\n        else:\n            result += digit\n    return result"
    },
    {
        "number": 4388,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # Replace each 1 with 9 and each 9 with 1 in n\n    n = str(n)\n    n = n.replace('1', '9').replace('9', '1')\n    return n"
    },
    {
        "number": 4388,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ones_place = str(n // 100)\n    tens_place = str(n // 10 % 10)\n    hundreds_place = str(n % 100 // 10)\n\n    ones_place = ones_place.replace('1', '9')\n    tens_place = tens_place.replace('1', '9')\n    hundreds_place = hundreds_place.replace('1', '9')\n\n    ones_place = ones_place.replace('9', '1')\n    tens_place = tens_place.replace('9', '1')\n    hundreds_place = hundreds_place.replace('9', '1')\n\n    n = int(ones_place + tens_place + hundreds_place)\n\n    return str(n)"
    },
    {
        "number": 4388,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = str(n)\n    n = n.replace('1', '9', 1)\n    n = n.replace('9', '1', 1)\n    return n\n\nprint(solution(input())) # print the result of the solution function called on the input"
    },
    {
        "number": 4388,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ones = (n // 100) % 10\n    tens = (n // 10) % 10\n    hundreds = n % 10\n    new_n = (hundreds * 100) + (tens * 10) + ones\n    return str(new_n)"
    },
    {
        "number": 4388,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    n = n.replace(\"1\", \"9\")\n    n = n.replace(\"9\", \"1\")\n    return n\n"
    },
    {
        "number": 4388,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = (n // 100) * 100 + (n % 100 // 10) * 10 + (n % 100 % 10) * 1\n    return str(n)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4388,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    # Convert the integer to a string so that we can replace the digits\n    n_str = str(n)\n    # Create a new string with the digits swapped\n    n_new = ''\n    for digit in n_str:\n        if digit == '1':\n            n_new += '9'\n        elif digit == '9':\n            n_new += '1'\n        else:\n            n_new += digit\n    # Convert the new string back to an integer and return it\n    return int(n_new)"
    },
    {
        "number": 4388,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_str = str(n)\n    n_str = n_str.replace('1', '9')\n    n_str = n_str.replace('9', '1')\n    return n_str"
    },
    {
        "number": 4389,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        b = stdin.readline().strip()\n        # initialize variables\n        a = \"\"\n        # iterate through each character in b and add to a\n        for j in range(len(b)):\n            a += b[j]\n            # check if a is a substring of b and remove it\n            if a in b[j+1:]:\n                b = b[:j] + b[j+len(a):]\n                break\n        # print answer\n        print(a)\n"
    },
    {
        "number": 4389,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read the number of test cases\n    t = int(stdin.readline().strip())\n\n    # Iterate over the test cases\n    for i in range(t):\n        # Read the string b\n        b = stdin.readline().strip()\n\n        # Initialize a to an empty string\n        a = \"\"\n\n        # Iterate over the indices of string b\n        for j in range(len(b)):\n            # Check if the substring of length 2 starting at index j is a valid substring of string b\n            if b[j:j+2] in b[j:] and b[j:j+2] not in a:\n                # If the substring is valid and not already in a, add it to a\n                a += b[j:j+2]\n\n        # Print the secret string a\n        print(a)"
    },
    {
        "number": 4389,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    t = int(stdin.readline())\n    for i in range(t):\n        b = stdin.readline().strip()\n        # base case\n        if len(b) == 1:\n            print(b)\n            continue\n        # find all substrings of length 2\n        substrings = []\n        for j in range(len(b)):\n            for k in range(j+2, len(b)+1):\n                substrings.append(b[j:k])\n        # find longest substring of length 2\n        longest_substring = \"\"\n        for substring in substrings:\n            if len(substring) > len(longest_substring):\n                longest_substring = substring\n        # find all substrings of length 2 that can be obtained by deleting one character\n        deletions = []\n        for j in range(len(b)):\n            for k in range(j+2, len(b)+1):\n                if b[j:k] == longest_substring:\n                    deletions.append(b[:j]+b[k:])\n        # find longest deletion\n        longest_deletion = \"\"\n        for deletion in deletions:\n            if len(deletion) > len(longest_deletion):\n                longest_deletion = deletion\n        # find all substrings of length 2 that can be obtained by swapping two adjacent characters\n        swaps = []\n        for j in range(len(b)-1):\n            for k in range(j+2, len(b)):\n                if b[j] == b[k]:\n                    continue\n                swapped = b[:j]+b[k]+b[j+1]+b[k+1:j:-1]\n                if swapped!= b:\n                    swaps.append(swapped)\n        # find longest swap\n        longest_swap = \"\"\n        for swap in swaps:\n            if len(swap) > len(longest_swap):\n                longest_swap = swap\n        # print result\n        print(longest_substring if len(longest_substring) > len(longest_deletion) and len(longest_substring) > len(longest_swap) else longest_deletion if len(longest_deletion) > len(longest_substring) and len(longest_deletion) > len(longest_swap) else longest_swap)"
    },
    {
        "number": 4389,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    for i in range(len(lines)):\n        b = lines[i]\n        # check if b can be built from a\n        for j in range(len(b) - 1):\n            if b[j:j+2] not in b[j+1:]:\n                break\n        else:\n            return b\n    return 'No solution'"
    },
    {
        "number": 4389,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin.strip()\n    a = \"\"\n    for i in range(len(b)):\n        if i == 0:\n            a += b[i]\n        elif i == len(b) - 1:\n            a += b[i]\n        else:\n            if b[i]!= b[i-1] and b[i]!= b[i+1]:\n                a += b[i]\n    return a"
    },
    {
        "number": 4389,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin.strip()\n    a = ''\n    for i in range(len(b)):\n        if i % 2 == 0:\n            a += b[i]\n    return a\n\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    tests = int(stdin.readline())\n    for i in range(tests):\n        b = stdin.readline().strip()\n        # Split b into substrings of length 2\n        substrings = [b[i:i+2] for i in range(len(b)-1)]\n        # Join substrings in the same order as in b\n        a = ''.join(substrings)\n        print(a)\n\nstdin = \"4\\nabbaac\\nac\\nbccddaaf\\nzzzzzzzzzz\\n\"\nsolution(stdin) # Output: abac\\nac\\nbcdaf\\nzzzzzz\\n"
    },
    {
        "number": 4389,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin.strip()\n    if len(b) == 0:\n        return \"\"\n    a = \"\"\n    for i in range(len(b) - 1):\n        a += b[i] + b[i + 1]\n    if len(b) % 2 == 1:\n        a += b[-1]\n    return a"
    },
    {
        "number": 4389,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    for i in range(1, len(lines)):\n        substrings = [lines[i][j:j+2] for j in range(len(lines[i]))]\n        lines[i] = \"\".join(substrings)\n    return \"\\n\".join(lines[1:])\n\nstdin = \"4\\nabbaac\\nac\\nbccdaf\\nzzzzzzzzzz\"\nprint(solution(stdin))"
    },
    {
        "number": 4389,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n'):\n        if not line:\n            continue\n        b = line\n        a = \"\"\n        i = 0\n        while i < len(b):\n            if i+2 <= len(b):\n                a += b[i:i+2]\n                i += 2\n            else:\n                a += b[i]\n                i += 1\n        yield a"
    },
    {
        "number": 4390,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split('\\n')[0])\n    for i in range(1, test_cases+1):\n        a, b = map(int, stdin.split('\\n')[i].split())\n        count = 0\n        while a % b!= 0:\n            a += 1\n            count += 1\n        print(count)"
    },
    {
        "number": 4390,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for t in range(int(stdin.strip().split()[0])):\n        a, b = map(int, stdin.readline().strip().split())\n        if a % b == 0:\n            print(0)\n        else:\n            count = 0\n            while a % b!= 0:\n                a += 1\n                count += 1\n            print(count)"
    },
    {
        "number": 4390,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for case in stdin.splitlines():\n        a, b = map(int, case.split())\n        if a % b == 0:\n            print(0)\n        else:\n            moves = 0\n            while a % b!= 0:\n                moves += 1\n                a += 1\n            print(moves)\n"
    },
    {
        "number": 4390,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    t = int(lines[0])\n    output = \"\"\n    for i in range(1, t+1):\n        a, b = map(int, lines[i].strip().split())\n        count = 0\n        while a % b!= 0:\n            a += 1\n            count += 1\n        output += str(count) + \"\\n\"\n    return output[:-1]\n"
    },
    {
        "number": 4390,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        a, b = map(int, stdin.readline().split())\n        move_count = 0\n        while a % b!= 0:\n            move_count += 1\n            a += 1\n        print(move_count)"
    },
    {
        "number": 4390,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        a, b = map(int, stdin.readline().split())\n        moves = 0\n        while a % b!= 0:\n            a += 1\n            moves += 1\n        print(moves if moves > 0 else 0)\n"
    },
    {
        "number": 4390,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    t = int(stdin[0])\n    for i in range(1, t+1):\n        a, b = map(int, stdin[i].split())\n        if a % b == 0:\n            print(0)\n        else:\n            print(b - (a % b))"
    },
    {
        "number": 4390,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        moves = 0\n        while a % b!= 0:\n            moves += 1\n            a += 1\n        print(moves)\n"
    },
    {
        "number": 4390,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        a, b = map(int, stdin.readline().split())\n        count = 0\n        while a % b!= 0:\n            a += 1\n            count += 1\n        print(count)\n    return \"\""
    },
    {
        "number": 4390,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        count = 0\n        while a % b!= 0:\n            a += 1\n            count += 1\n        print(count)\n    return \"\"\n"
    },
    {
        "number": 4391,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    if k == 1:\n        return str(max(a))\n    segments = []\n    for i in range(n-k+1):\n        segments.append(sum(a[i:i+k])/k)\n    return str(max(segments))\n\nstdin = \"4 3\\n3 4 1 2\\n\"\nprint(solution(stdin))"
    },
    {
        "number": 4391,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for length in range(2, n+1):\n        for left in range(n-length+1):\n            right = left + length - 1\n            if length <= k:\n                dp[left][right] = max(dp[left][right], dp[left+1][right])\n            dp[left][right] = max(dp[left][right], (dp[left+1][right] + dp[left][right-1]) / 2)\n    return str(dp[0][n-1])\n\nstdin = \"\"\"\n4 3\n3 4 1 2\n\"\"\"\n\nassert solution(stdin) == \"2.666666666666667\"\n\nstdin = \"\"\"\n5 2\n3 4 1 2 5\n\"\"\"\n\nassert solution(stdin) == \"3.0\"\n\nstdin = \"\"\"\n5 3\n3 4 1 2 5\n\"\"\"\n\nassert solution(stdin) == \"4.0\"\n\nstdin = \"\"\"\n5 4\n3 4 1 2 5\n\"\"\"\n\nassert solution(stdin) == \"4.5\""
    },
    {
        "number": 4391,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    temps = list(map(int, stdin.readline().split()))\n\n    segments = []\n    for i in range(k, n+1):\n        segments.append(sum(temps[i-k:i])/k)\n\n    return str(max(segments))"
    },
    {
        "number": 4391,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    res = 0\n    for i in range(n - k + 1):\n        temp = sum(a[i:i+k]) / k\n        if temp > res:\n            res = temp\n\n    return str(res)"
    },
    {
        "number": 4391,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    res = 0\n    for i in range(k, n+1):\n        s = sum(a[j] for j in range(i-k, i))\n        res = max(res, s/(i-k+1))\n    \n    return str(res)\n\nprint(solution(\"4 3\\n3 4 1 2\"))"
    },
    {
        "number": 4391,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    res = 0\n    for i in range(n - k + 1):\n        res = max(res, sum(a[i:i+k]) / k)\n\n    return f\"{res:.12f}\""
    },
    {
        "number": 4391,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n\n    max_intensity = 0\n\n    for i in range(k, n+1):\n        segment_mean = sum(a[i-k:i])/k\n        if segment_mean > max_intensity:\n            max_intensity = segment_mean\n\n    return str(max_intensity)"
    },
    {
        "number": 4391,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    res = float('-inf')\n    for i in range(n - k + 1):\n        avg = sum(a[i:i+k]) / k\n        res = max(res, avg)\n    return str(res)"
    },
    {
        "number": 4391,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    res = float('-inf')\n    for i in range(n - k + 1):\n        seg_avg = sum(a[i:i+k]) / k\n        res = max(res, seg_avg)\n    return str(res)\n\nwith open('input.txt') as file:\n    input_str = file.read()\n\nprint(solution(input_str))"
    },
    {
        "number": 4391,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    res = 0\n    for i in range(n - k + 1):\n        temp = sum(a[i:i+k])/k\n        res = max(res, temp)\n    return str(res)"
    },
    {
        "number": 4392,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n, m = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        p = list(map(int, stdin.readline().split()))\n        dp = [0] * n\n        dp[0] = 1\n        for j in range(m):\n            if p[j] > 0 and p[j] + 1 < n and dp[p[j] - 1] == 1 and dp[p[j] + 1] == 1:\n                dp[p[j]] = 1\n        if dp[-1] == 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\ndef"
    },
    {
        "number": 4392,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        p = list(map(int, stdin.readline().strip().split()))\n        swap_count = 0\n        for j in p:\n            if j >= 1 and a[j-1] > a[j]:\n                swap_count += 1\n                a[j-1], a[j] = a[j], a[j-1]\n            if j >= 2 and a[j-2] > a[j]:\n                swap_count += 1\n                a[j-2], a[j] = a[j], a[j-2]\n        if a == sorted(a) and swap_count >= len(p):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 4392,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        p = list(map(int, stdin.readline().strip().split()))\n        a_copy = a.copy()\n        for i in p:\n            a[i-1], a[i] = a[i], a[i-1]\n        if a_copy == sorted(a):\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4392,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    \n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        p = list(map(int, stdin.readline().strip().split()))\n        p.sort()\n        \n        if any(abs(p[i] - p[i+1])!= 1 for i in range(m-1)):\n            return \"NO\"\n        \n        # check if swapping elements in a[p[i]] and a[p[i]+1] is valid\n        for j in range(m):\n            if p[j] == p[j+1] - 1:\n                continue\n            elif p[j] == p[j+1] - 2:\n                a[p[j]], a[p[j+1]-1] = a[p[j+1]-1], a[p[j]]\n            else:\n                return \"NO\"\n        \n        # check if the array is sorted in non-decreasing order\n        if a == sorted(a):\n            return \"YES\"\n        else:\n            return \"NO\""
    },
    {
        "number": 4392,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n, m = map(int, lines[i*3-2].split())\n        a = list(map(int, lines[i*3-1].split()))\n        p = list(map(int, lines[i*3].split()))\n        if not is_valid(a, p):\n            return \"NO\"\n    return \"YES\"\n\ndef"
    },
    {
        "number": 4392,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for testcase in stdin.split(\"\\n\\n\"):\n        n, m = map(int, testcase.split(\"\\n\")[0].split())\n        a = list(map(int, testcase.split(\"\\n\")[1].split()))\n        p = list(map(int, testcase.split(\"\\n\")[2].split()))\n        if not is_sortable(a, p):\n            return \"NO\"\n    return \"YES\"\n\ndef"
    },
    {
        "number": 4392,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.strip().split('\\n')\n    n = int(input_list[0].strip())\n    m = int(input_list[1].strip())\n    a = list(map(int, input_list[2].strip().split()))\n    p = list(map(int, input_list[3].strip().split()))\n    if len(a)!= n or len(p)!= m or len(set(p))!= len(p):\n        return \"NO\"\n    for i in range(m):\n        if p[i] == p[i-1] or p[i] == p[i+1]:\n            return \"NO\"\n        if a[p[i]-1] > a[p[i]]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4392,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    p = list(map(int, stdin.readline().split()))\n\n    if m == 0:\n        return \"YES\"\n\n    if p[0] > 1 and a[p[0]-1] > a[p[0]]:\n        return \"NO\"\n\n    for i in range(m):\n        if p[i] > 1 and a[p[i]-1] > a[p[i]]:\n            return \"NO\"\n\n        if p[i] < n-1 and a[p[i]] > a[p[i]+1]:\n            return \"NO\"\n\n        if p[i] < n-1 and a[p[i]] > a[p[i]+1]:\n            return \"NO\"\n\n    return \"YES\"\n\n\nfor _ in range(int(stdin.readline().strip())):\n    print(solution(stdin))"
    },
    {
        "number": 4392,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        p = list(map(int, stdin.readline().split()))\n        if m < n:\n            yes_swap = True\n            for i in range(m):\n                if a[p[i]-1] > a[p[i]]:\n                    yes_swap = False\n                    break\n            if yes_swap:\n                for i in range(m):\n                    a[p[i]-1], a[p[i]] = a[p[i]], a[p[i]-1]\n                for i in range(m):\n                    a[p[i]-1], a[p[i]] = a[p[i]], a[p[i]-1]\n                if all(a[i] <= a[i+1] for i in range(n-1)):\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4392,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def can_sort(a: List[int], p: List[int]) -> bool:\n        n, m = len(a), len(p)\n        p.sort()\n        if a == sorted(a):\n            return True\n        if a[0] < a[1]:\n            for i in range(m):\n                if i == m - 1 or p[i]!= p[i + 1] - 1:\n                    if p[i] < p[i + 1] - 1:\n                        a[p[i]], a[p[i + 1] - 1] = a[p[i + 1] - 1], a[p[i]]\n                        if can_sort(a, p):\n                            return True\n                        a[p[i]], a[p[i + 1] - 1] = a[p[i + 1] - 1], a[p[i]]\n                    elif p[i] == p[i + 1] - 1 and p[i] < n - 2 and a[p[i] + 2] > a[p[i]]:\n                        a[p[i]], a[p[i] + 2] = a[p[i] + 2], a[p[i]]\n                        if can_sort(a, p):\n                            return True\n                        a[p[i]], a[p[i] + 2] = a[p[i] + 2], a[p[i]]\n        elif a[0] > a[1]:\n            for i in range(m):\n                if i == m - 1 or p[i]!= p[i + 1] - 1:\n                    if p[i] < p[i + 1] - 1:\n                        a[p[i]], a[p[i + 1] - 1] = a[p[i + 1] - 1], a[p[i]]\n                        if can_sort(a, p):\n                            return True\n                        a[p[i]], a[p[i + 1] - 1] = a[p[i + 1] - 1], a[p[i]]\n                    elif p[i] == p[i + 1] - 1 and p[i] < n - 2 and a[p[i] + 2] < a[p[i]]:\n                        a[p[i]], a[p[i] + 2] = a[p[i] + 2], a[p[i]]\n                        if can_sort(a, p):\n                            return True\n                        a[p[i]], a[p[i] + 2] = a[p[i] + 2], a[p[i]]\n        return False\n    t = int(stdin.split()[0])\n    for i in range(t):\n        stdin = stdin.split('\\n')[1:]\n        n, m = map(int, stdin[0].split())\n        a = list(map(int, stdin[1].split()))\n        p = list(map(int, stdin[2].split()))\n        if can_sort(a, p):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        stdin = '\\n'.join(stdin[3:])\n    return None"
    },
    {
        "number": 4393,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    s = ''\n    for i in range(n):\n        if t[i] == 'b':\n            s += 'a' * (i + 1)\n    return s"
    },
    {
        "number": 4393,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n    s = \"\"\n    count = 0\n    for i in range(n):\n        if count == 0:\n            s += t[i]\n        else:\n            s += s[-1]\n        count = (count + 1) % (i+1)\n    return s\n\n\nstdin = input().strip()\nprint(solution(stdin))"
    },
    {
        "number": 4393,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n\n    s = \"\"\n    i = 0\n    while i < n:\n        if t[i] == 'b':\n            s += 'baa'\n        elif t[i] == 'a':\n            s += 'a'\n        i += 1\n\n    return s"
    },
    {
        "number": 4393,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n    s = \"\"\n    count = 1\n    for i in range(n):\n        if i == n-1:\n            s += t[i] * count\n            break\n        if t[i] == t[i+1]:\n            count += 1\n        else:\n            s += t[i] * count\n            count = 1\n    return s\n\ndef"
    },
    {
        "number": 4393,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = stdin.readline().strip()\n    s = \"\"\n    count = 1\n    for i in range(n):\n        if t[i] == s[-1]:\n            count += 1\n        else:\n            s += str(count) + t[i]\n            count = 1\n    s += str(count)\n    return s"
    },
    {
        "number": 4393,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = stdin.readline().strip()\n    s = \"\"\n    i = 0\n    while i < n:\n        if t[i] == \"b\":\n            s += \"baa\"\n            i += 3\n        else:\n            s += t[i]\n            i += 1\n    return s"
    },
    {
        "number": 4393,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = stdin.readline().strip()\n    s = \"\"\n    i = 0\n    while i < n:\n        if t[i] == 'b':\n            s += 'a' * 2\n            i += 2\n        elif t[i] == 'a':\n            s += 'b'\n            i += 1\n        else:\n            s += 'a' * t[i]\n            i += int(t[i])\n    return s"
    },
    {
        "number": 4393,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    t = stdin.split('\\n')[1]\n    s = \"\"\n    i = 0\n    while i < n:\n        if t[i] == 'b':\n            s += 'a'\n            i += 2\n        else:\n            count = int(t[i])\n            s += t[i]\n            i += 1\n            while count > 1:\n                s += t[i]\n                count -= 1\n    return s\n\nstdin = \"\"\"\n6\nbaabbb\n\"\"\"\nprint(solution(stdin)) # Output: \"bab\"\n\nstdin = \"\"\"\n10\nooopppssss\n\"\"\"\nprint(solution(stdin)) # Output: \"oops\"\n\nstdin = \"\"\"\n1\nz\n\"\"\"\nprint(solution(stdin)) # Output: \"z\""
    },
    {
        "number": 4393,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    s = \"\"\n    for i in range(n):\n        s += t[i] * (i+1)\n    return s"
    },
    {
        "number": 4393,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = stdin.readline().strip()\n    s = \"\"\n    i = 0\n    while i < n:\n        count = int(t[i])\n        j = i\n        while j < n and t[j] == 'o':\n            count += 1\n            j += 1\n        s += 'o' * count\n        i = j\n    return s"
    },
    {
        "number": 4394,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    edges = []\n    for _ in range(m):\n        u, v, w = map(int, stdin.strip().split())\n        edges.append((u, v, w))\n    visited = [False] * n\n    parent = [-1] * n\n    def find(u):\n        if parent[u] == -1:\n            return u\n        parent[u] = find(parent[u])\n        return parent[u]\n    def union(u, v):\n        pu, pv = find(u), find(v)\n        if pu!= pv:\n            parent[pv] = pu\n    def kruskal():\n        mst_cost = 0\n        edges.sort(key=lambda x: x[2])\n        for u, v, w in edges:\n            if not visited[u] and not visited[v]:\n                union(u, v)\n                mst_cost += w\n                if find(u) == find(v):\n                    return mst_cost\n        return float('inf')\n    k = kruskal()\n    if k == float('inf'):\n        return '0'\n    for i in range(m):\n        for j in range(m):\n            if edges[i][0] == edges[j][0] and edges[i][1] == edges[j][1]:\n                edges[i] = (edges[i][0], edges[i][1], edges[i][2]+1)\n            if edges[i][0] == edges[j][1] and edges[i][1] == edges[j][0]:\n                edges[i] = (edges[i][0], edges[i][1], edges[i][2]+1)\n    k = kruskal()\n    if k == kruskal():\n        return '1'\n    return '2'"
    },
    {
        "number": 4394,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    graph = {}\n    for _ in range(m):\n        u, v, w = map(int, stdin.readline().split())\n        if u not in graph:\n            graph[u] = {}\n        if v not in graph[u]:\n            graph[u][v] = w\n        else:\n            graph[u][v] = min(graph[u][v], w)\n        if v not in graph:\n            graph[v] = {}\n        if u not in graph[v]:\n            graph[v][u] = w\n        else:\n            graph[v][u] = min(graph[v][u], w)\n    mst_cost = 0\n    for u in range(1, n):\n        mst_cost += graph[1][u]\n    if mst_cost == 0:\n        return 0\n    mst = {(1, u): graph[1][u] for u in range(2, n)}\n    for u in range(2, n):\n        for v in graph[u]:\n            if v < u:\n                continue\n            if (u, v) in mst:\n                continue\n            if mst_cost - graph[u][v] == graph[1][u] + graph[1][v]:\n                mst[(u, v)] = graph[u][v]\n                mst_cost -= graph[u][v]\n    return len(mst)"
    },
    {
        "number": 4394,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The problem asks us to find the minimum number of operations to unify the MST of the initial graph\n    without changing the cost of MST. We can modify the given graph by increasing the weight of some edge\n    by 1. We need to find the minimum number of operations required to do it.\n\n    The approach we will take is:\n    First, we will build a minimum spanning tree (MST) of the graph.\n    Second, we will find the edges that are part of the MST.\n    Third, we will modify the weight of these edges.\n    Fourth, we will check if the MST remains the same. If it does, then we have found the minimum number of\n    operations required to unify MST of the initial graph without changing the cost of MST.\n\n    \"\"\"\n    n, m = map(int, stdin.readline().strip().split())\n    edges = []\n    for i in range(m):\n        u, v, w = map(int, stdin.readline().strip().split())\n        edges.append((u, v, w))\n\n    # Step 1: Build MST\n    mst = [(float('inf'), None)] * n  # parent and weight of each vertex\n    mst[0] = (0, 0)\n    for i in range(1, n):\n        parent, weight = min(mst[:i], key=lambda x: x[0])\n        mst[i] = (parent, weight + edges[parent-1][2])\n\n    # Step 2: Find MST edges\n    mst_edges = [i for i, x in enumerate(mst) if x[0] is not None]\n\n    # Step 3: Modify MST edges\n    for edge in mst_edges:\n        u, v, w = edges[edge]\n        w += 1\n        edges[edge] = (u, v, w)\n\n    # Step 4: Check if MST is the same\n    new_mst = [(float('inf'), None)] * n\n    new_mst[0] = (0, 0)\n    for i in range(1, n):\n        parent, weight = min(new_mst[:i], key=lambda x: x[0])\n        new_mst[i] = (parent, weight + edges[parent-1][2])\n\n    for i in range(n):\n        if new_mst[i]!= mst[i]:\n            return '1'\n\n    return '0'\n"
    },
    {
        "number": 4394,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        edges.append((u-1, v-1, w))\n    \n    # Kruskal's algorithm for finding MST\n    parent = list(range(n))\n    rank = [0] * n\n    for u, v, w in sorted(edges, key=lambda x: x[2]):\n        if find(parent, u)!= find(parent, v):\n            union(parent, u, v)\n            if len(set(parent)) == 1:\n                break\n    else:\n        return '0'\n    \n    # Increase weight of some edges\n    edges = [list(x) for x in edges]\n    for i in range(len(edges)):\n        edges[i][2] += 1\n    for u, v, w in edges:\n        if find(parent, u)!= find(parent, v):\n            union(parent, u, v)\n            if len(set(parent)) == 1:\n                return '1'\n    return '0'\n\ndef"
    },
    {
        "number": 4394,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.readline().strip().split())\n    edges = []\n    for i in range(m):\n        u, v, w = map(int, stdin.readline().strip().split())\n        edges.append((u-1, v-1, w))\n\n    # find MST\n    from heapq import heappush, heappop\n    parent = list(range(n))\n    cost = [0] * n\n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            heappush(cost, (0, i))\n            while cost:\n                c, u = heappop(cost)\n                if visited[u]: continue\n                visited[u] = True\n                for v, w in edges:\n                    if u == v: continue\n                    if not visited[v] and (u, v) not in edges:\n                        heappush(cost, (w, v))\n                        parent[v] = u\n\n    # modify edges\n    for i in range(m):\n        u, v, w = edges[i]\n        if parent[u] == v or parent[v] == u: continue\n        edges[i] = (u, v, w+1)\n\n    # find MST\n    parent = list(range(n))\n    cost = [0] * n\n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            heappush(cost, (0, i))\n            while cost:\n                c, u = heappop(cost)\n                if visited[u]: continue\n                visited[u] = True\n                for v, w in edges:\n                    if u == v: continue\n                    if not visited[v] and (u, v) not in edges:\n                        heappush(cost, (w, v))\n                        parent[v] = u\n\n    # count operations\n    operations = 0\n    for u, v, w in edges:\n        if w == edges[edges.index((u, v, w))+1][2]:\n            operations += 1\n    return str(operations)\n"
    },
    {
        "number": 4394,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    adj = [[] for i in range(n)]\n    for i in range(m):\n        u, v, w = map(int, stdin.split())\n        adj[u-1].append((v-1, w))\n        adj[v-1].append((u-1, w))\n    dp = [[float(\"inf\") for j in range(m)] for i in range(n)]\n    dp[0][0] = 0\n    for k in range(n):\n        for i in range(n):\n            for j in range(m):\n                if dp[i][j]!= float(\"inf\"):\n                    for p in range(len(adj[i])):\n                        if j == p:\n                            continue\n                        nxt = dp[i][j] + adj[i][p][1]\n                        dp[adj[i][p][0]][p] = min(dp[adj[i][p][0]][p], nxt)\n    res = float(\"inf\")\n    for i in range(m):\n        res = min(res, dp[0][i])\n    if res == float(\"inf\"):\n        return \"0\"\n    else:\n        return str(res)"
    },
    {
        "number": 4394,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4394,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.split()[:2])\n    edges = []\n    for i in range(m):\n        u, v, w = map(int, stdin.split()[:3])\n        edges.append((u, v, w))\n    \n    # build graph\n    graph = {i: [] for i in range(1, n+1)}\n    for u, v, w in edges:\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    \n    # find MST and its cost\n    mst_cost = 0\n    visited = set()\n    mst = []\n    def dfs(u):\n        nonlocal mst_cost, visited, mst\n        visited.add(u)\n        for v, w in graph[u]:\n            if v not in visited:\n                mst.append((u, v, w))\n                mst_cost += w\n                dfs(v)\n    \n    dfs(1)\n    \n    # modify MST\n    def modify_mst():\n        nonlocal mst, mst_cost\n        for u, v, w in mst:\n            if w < 10**9:\n                mst.remove((u, v, w))\n                mst.append((u, v, w+1))\n                mst_cost += 1\n    \n    # modify MST repeatedly until MST is unique\n    min_ops = 0\n    while True:\n        modify_mst()\n        if len(set(tuple(sorted(e)) for e in mst)) == len(mst):\n            break\n        min_ops += 1\n    \n    return str(min_ops)"
    },
    {
        "number": 4394,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        u, v, w = map(int, stdin.split())\n        edges.append((u, v, w))\n\n    edges.sort(key=lambda x: x[2])\n    mst_cost = sum(x[2] for x in edges)\n    mst = set(edges)\n\n    for i in range(m):\n        u, v, w = edges[i]\n        if u not in mst and v not in mst:\n            continue\n        if (u, v) in mst:\n            continue\n        for j in range(i+1, m):\n            x, y, z = edges[j]\n            if x not in mst and y not in mst:\n                continue\n            if (x, y) in mst:\n                continue\n            if w + 1 == z:\n                mst.add((u, v))\n                mst.add((x, y))\n                mst_cost -= w\n                mst_cost += z\n                break\n\n    print(mst_cost - sum(x[2] for x in mst))\n    return \"\""
    },
    {
        "number": 4394,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4395,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    r = 0\n    t = s\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                r += 1\n                if (i-j)%3!= 0:\n                    t = t[:i] + s[j] + t[i+1:j] + s[i] + t[j+1:]\n    return f\"{r}\\n{t}\"\n\nprint(solution(\"3\\nBRB\\n\")) # 1\\nGRB\\n\nprint(solution(\"7\\nRGBGRBB\\n\")) # 3\\nRGBRGBR\\n"
    },
    {
        "number": 4395,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    \n    cnt = 0\n    for i in range(1, n):\n        if s[i]!= s[i-1]:\n            cnt += 1\n    \n    if cnt <= 2:\n        return str(cnt) + '\\n' + s\n    \n    for i in range(1, n-1):\n        if s[i] == s[i-1] == s[i+1] and s[i]!= s[i-2]!= s[i+2]:\n            cnt += 1\n            s = s[:i+1] + 'R' + s[i+1:]\n    \n    return str(cnt) + '\\n' + s"
    },
    {
        "number": 4395,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    # Count the number of colors in the garland\n    color_count = {'R': 0, 'G': 0, 'B': 0}\n    for color in s:\n        color_count[color] += 1\n\n    # Find the minimum number of recolors needed to obtain a nice garland\n    recolors = 0\n    for count in color_count.values():\n        if count % 3!= 0:\n            recolors += 1\n\n    # If there are no recolors needed, print the original garland\n    if recolors == 0:\n        return '0\\n' + s\n\n    # Find a nice garland with minimum number of recolors\n    for i in range(n):\n        if i % 3 == 0:\n            continue\n        if s[i] == s[i-1] and s[i] == s[i-2]:\n            continue\n        if s[i]!= s[i-1] and s[i]!= s[i-2]:\n            continue\n        s = s[:i] + s[i-2] + s[i-1] + s[i+1:]\n        recolors -= 2\n        break\n    for i in range(n-1, -1, -1):\n        if i % 3 == 0:\n            continue\n        if s[i] == s[i+1] and s[i] == s[i+2]:\n            continue\n        if s[i]!= s[i+1] and s[i]!= s[i+2]:\n            continue\n        s = s[:i+1] + s[i] + s[i+2] + s[i+3:]\n        recolors -= 2\n        if recolors == 0:\n            return '1\\n' + s\n\n    return '2\\n' + s"
    },
    {
        "number": 4395,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count = 0\n    t = s\n    while True:\n        count += 1\n        for i in range(n - 1):\n            if s[i] == s[i + 1]:\n                continue\n            else:\n                t = list(t)\n                t[i + 1] = s[i]\n                t = ''.join(t)\n                break\n        if t == s:\n            break\n    print(count)\n    print(t)\n"
    },
    {
        "number": 4395,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    lamp_colors = [s[i] for i in range(n)]\n    # find the minimum number of recolors needed to obtain a nice garland\n    recolors = 0\n    for i in range(n):\n        if i > 0 and lamp_colors[i] == lamp_colors[i-1]:\n            recolors += 1\n            lamp_colors[i] = 'B'\n    # print the minimum number of recolors\n    print(recolors)\n    # print the nice garland obtained from the initial one with minimum number of recolors\n    t = ''.join(lamp_colors)\n    print(t)\n    return \"\""
    },
    {
        "number": 4395,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = s\n    c = Counter(s)\n    r = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                if (j-i) % 3!= 0:\n                    if c[s[i]] > 1:\n                        t = t[:i] + t[i+1:j] + t[j] + t[i] + t[j+1:]\n                        c[s[i]] -= 1\n                        c[s[j]] -= 1\n                        r += 1\n                    else:\n                        t = t[:i] + t[j] + t[i] + t[j+1:]\n                        c[s[i]] -= 1\n                        c[s[j]] -= 1\n                        r += 1\n    print(r)\n    print(t)\n    return t\n"
    },
    {
        "number": 4395,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    if len(set(s)) == 1:\n        return str(0) + \"\\n\" + s\n    \n    t = s\n    recolors = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                t = list(t)\n                k = (j-i) % 3\n                if k!= 0:\n                    t[i+k] = s[j]\n                    t[j+k] = s[i]\n                    recolors += 1\n                t = \"\".join(t)\n                \n    return str(recolors) + \"\\n\" + t\n\nprint(solution(\"3\\nBRB\")) # 1\\nGRB\nprint(solution(\"7\\nRGBGRBB\")) # 3\\nRGBRGBR"
    },
    {
        "number": 4395,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.strip().split())\n    r = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                r += 1\n    t = s\n    if r % 3 == 0:\n        return r, t\n    else:\n        for i in range(n):\n            if s[i] == 'R':\n                t = t[:i] + 'G' + t[i+1:]\n                r += 1\n            elif s[i] == 'G':\n                t = t[:i] + 'B' + t[i+1:]\n                r += 1\n            elif s[i] == 'B':\n                t = t[:i] + 'R' + t[i+1:]\n                r += 1\n            if r % 3 == 0:\n                break\n    return r, t\n\ndef"
    },
    {
        "number": 4395,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    # Initialize variables\n    r = 0\n    t = s\n\n    # Check if garland is already nice\n    if all(abs(i - j) % 3 == 0 for i in range(n) for j in range(i+1, n) if s[i] == s[j]):\n        return \"0\\n\" + s\n\n    # Find minimum number of recolors\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                # Check if adjacent lamps have distance divisible by 3\n                if abs(i - j) % 3!= 0:\n                    # Recolor lamps\n                    r += 1\n                    t = list(t)\n                    t[i], t[j] = t[j], t[i]\n                    t = ''.join(t)\n\n                    # Check if garland is nice\n                    if all(abs(i - j) % 3 == 0 for i in range(n) for j in range(i+1, n) if t[i] == t[j]):\n                        break\n\n    # Return minimum number of recolors and nice garland\n    return str(r) + \"\\n\" + t"
    },
    {
        "number": 4395,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    t = s\n    r = 0\n    for i in range(1, n):\n        if s[i]!= s[i-1]:\n            t = t[:i] + s[i-1] + t[i:]\n            r += 1\n    if r % 3 == 0:\n        print(r)\n        print(t)\n    else:\n        r += 1\n        while r % 3!= 0:\n            r += 1\n        t = s[:r//3] + s[r//3:r//3*2] + s[r//3*2:]\n        print(r)\n        print(t)"
    },
    {
        "number": 4396,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    result = 0\n    for i in range(1, n+1):\n        value, unit = lines[i].split()\n        value = float(value)\n        if unit == \"JPY\":\n            result += value\n        elif unit == \"BTC\":\n            result += value * 380000\n    return str(result)"
    },
    {
        "number": 4396,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    total = 0\n    for i in range(n):\n        x, u = stdin.readline().strip().split()\n        x = float(x)\n        if u == 'JPY':\n            total += x\n        else:\n            total += x * 380000.0\n    return str(total)\n\nwith open('input.txt', 'r') as f:\n    input_str = f.read()\n\nprint(solution(input_str))"
    },
    {
        "number": 4396,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    x = []\n    u = []\n    for i in range(1, N+1):\n        values = lines[i].split()\n        x.append(float(values[0]))\n        u.append(values[1])\n    if u[0] == 'JPY':\n        gifts_worth = sum(x)\n    elif u[0] == 'BTC':\n        gifts_worth = sum([x[i]*380000.0 for i in range(N)])\n    else:\n        raise ValueError(\"Invalid currency type\")\n    return str(gifts_worth)"
    },
    {
        "number": 4396,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    input_list = stdin.strip().split(\"\\n\")\n    n = int(input_list[0])\n    gifts = []\n    for i in range(1, n+1):\n        x_i, u_i = input_list[i].strip().split()\n        x_i = float(x_i)\n        if u_i == \"JPY\":\n            gifts.append(x_i)\n        elif u_i == \"BTC\":\n            gifts.append(x_i * 380000.0)\n    total = sum(gifts)\n    return str(total)\n"
    },
    {
        "number": 4396,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    total_value = 0\n    for i in range(1, n+1):\n        value, unit = lines[i].split()\n        value = float(value)\n        if unit == \"JPY\":\n            total_value += value\n        elif unit == \"BTC\":\n            total_value += value * 380000.0\n    return str(total_value)"
    },
    {
        "number": 4396,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    gifts = []\n    for i in range(1, n+1):\n        x, u = lines[i].split()\n        if u == 'JPY':\n            gifts.append(float(x))\n        else:\n            gifts.append(float(x) * 380000.0)\n    return str(sum(gifts))\n\nstdin = \"\"\"\n2\n10000 JPY\n0.10000000 BTC\n\"\"\"\n\nprint(solution(stdin))  # Output: 48000.0"
    },
    {
        "number": 4396,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split(\"\\n\")\n    n = int(lines[0])\n    gifts = []\n    for i in range(1, n+1):\n        gift = lines[i].split()\n        gifts.append((float(gift[0]), gift[1]))\n\n    # Calculate total value\n    total_value = 0\n    for gift in gifts:\n        if gift[1] == \"JPY\":\n            total_value += gift[0]\n        elif gift[1] == \"BTC\":\n            total_value += gift[0] * 380000.0\n\n    # Return result\n    return str(total_value)"
    },
    {
        "number": 4396,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    gifts = []\n    for i in range(1, N+1):\n        line = lines[i]\n        x, u = line.split()\n        if u == 'JPY':\n            x = int(x)\n            gifts.append(x)\n        else:\n            x = float(x)\n            gifts.append(x)\n    total_jpy = sum(gifts)\n    total_btc = sum(x for x in gifts if type(x) == float)\n    if total_btc > 0.00000001:\n        rate = 380000.0 / total_btc\n        total_jpy += total_btc * rate\n    return str(total_jpy)"
    },
    {
        "number": 4396,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    gifts = []\n    for i in range(n):\n        x, u = map(str, stdin.split())\n        x = float(x)\n        if u == 'JPY':\n            gifts.append(x)\n        elif u == 'BTC':\n            gifts.append(x * 380000.0)\n    return str(sum(gifts))"
    },
    {
        "number": 4396,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    values = []\n    units = []\n    for i in range(1, N+1):\n        x, u = lines[i].split()\n        values.append(float(x))\n        units.append(u)\n    if units[0] == 'JPY':\n        total = sum(values)\n    elif units[0] == 'BTC':\n        total = sum([values[i]*380000.0 for i in range(N)])\n    return str(total)"
    },
    {
        "number": 4397,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, i = map(int, stdin.split())\n    return n - i + 1"
    },
    {
        "number": 4397,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, i = map(int, stdin.split())\n\n    # find j such that the i-th car from the front of the train is the j-th car from the back\n    j = N - i + 1\n\n    # print output\n    print(j)\n\n    return \"\""
    },
    {
        "number": 4397,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    j = N - i + 1\n    return str(j)"
    },
    {
        "number": 4397,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, i = map(int, stdin.strip().split())\n    return (n + 1 - i) % n + 1"
    },
    {
        "number": 4397,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    j = N - i\n    return str(j)"
    },
    {
        "number": 4397,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, i = map(int, stdin.split())\n    return n - i + 1\n\nprint(solution(input()))"
    },
    {
        "number": 4397,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, i = map(int, stdin.split())\n    j = (n - i + 1) % n\n    return str(j)"
    },
    {
        "number": 4397,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.strip().split())\n    return N - i + 1\n"
    },
    {
        "number": 4397,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    j = N - i + 1\n    return str(j)\n\nprint(solution(input()))"
    },
    {
        "number": 4397,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split())\n    j = N - i + 1\n    return str(j)"
    },
    {
        "number": 4398,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.strip().split()\n    n = int(n)\n    res = \"\"\n    for i in range(n):\n        res += s[i] + t[i]\n    return res\n"
    },
    {
        "number": 4398,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    S, T = stdin.readline().strip().split()\n    \n    # alternate characters and join into a string\n    new_string = ''.join(S[i] + T[i] for i in range(N))\n    \n    return new_string"
    },
    {
        "number": 4398,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Reading the input\n    N = int(stdin.readline())\n    s, t = stdin.readline().strip().split()\n\n    # Creating the new string\n    new_string = \"\"\n    for i in range(N):\n        new_string += s[i] + t[i]\n\n    return new_string"
    },
    {
        "number": 4398,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s, t = stdin.readline().strip().split()\n    \n    return ''.join([s[i] + t[i] for i in range(n)])"
    },
    {
        "number": 4398,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s, t = stdin.readline().split()\n\n    return \"\".join(s[i % len(s)] + t[i % len(t)] for i in range(n))"
    },
    {
        "number": 4398,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s, t = stdin.readline().strip().split()\n\n    # create the new string\n    new_str = ''\n    for i in range(n):\n        new_str += s[i] + t[i]\n\n    return new_str\n"
    },
    {
        "number": 4398,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    n = int(stdin.readline().strip())\n    s, t = stdin.readline().strip().split()\n    \n    # Form new string\n    new_str = \"\"\n    for i in range(n):\n        new_str += s[i]\n        new_str += t[i]\n    \n    return new_str"
    },
    {
        "number": 4398,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s, t = stdin.readline().split()\n    return ''.join([s[i] + t[i] for i in range(n)])"
    },
    {
        "number": 4398,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    S, T = lines[1].split()\n\n    new_string = ''\n    for i in range(N):\n        new_string += S[i]\n        new_string += T[i]\n\n    return new_string"
    },
    {
        "number": 4398,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s, t = stdin.readline().strip().split()\n    return ''.join(list(zip(s, t))[::2])"
    },
    {
        "number": 4399,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0] == s[1] or s[1] == s[2] or s[0] == s[2]:\n        return \"No\"\n    if s[0] == \"A\" and s[1] == \"B\" and s[2] == \"A\":\n        return \"Yes\"\n    if s[0] == \"A\" and s[1] == \"A\" and s[2] == \"B\":\n        return \"Yes\"\n    if s[0] == \"B\" and s[1] == \"B\" and s[2] == \"A\":\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    S = stdin.strip()\n\n    # Checking if any two stations are connected by a bus service\n    for i in range(3):\n        for j in range(i+1, 3):\n            if S[i]!= S[j]:\n                return \"Yes\"\n\n    # If no such pair exists, return No\n    return \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    a, b = False, False\n    if s[0] == 'A':\n        a = True\n    elif s[0] == 'B':\n        b = True\n    for i in range(1, len(s)):\n        if s[i] == 'A' and not a:\n            a = True\n            b = False\n        elif s[i] == 'B' and not b:\n            a = False\n            b = True\n        elif s[i] == 'A' and a:\n            return 'Yes'\n        elif s[i] == 'B' and b:\n            return 'Yes'\n    return 'No'"
    },
    {
        "number": 4399,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0] == s[1] or s[1] == s[2] or s[0] == s[2]:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4399,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S[0] == S[1] or S[0] == S[2] or S[1] == S[2]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[0] == s[1] or s[0] == s[2] or s[1] == s[2]:\n        return \"No\"\n    if s[0] == 'A' and s[1] == 'B' and s[2] == 'A':\n        return \"Yes\"\n    if s[0] == 'B' and s[1] == 'A' and s[2] == 'B':\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0] == s[1] == s[2] or s[0] == s[2] == s[1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0] == s[1] or s[0] == s[2] or s[1] == s[2]:\n        return 'No'\n    elif s[0] == 'A' and s[1] == 'B' and s[2] == 'A':\n        return 'Yes'\n    elif s[0] == 'B' and s[1] == 'A' and s[2] == 'B':\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4399,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n\n    if s[0] == s[1] or s[1] == s[2] or s[0] == s[2]:\n        return \"No\"\n\n    if s[0] == \"A\" and s[1] == \"B\" and s[2] == \"A\":\n        return \"Yes\"\n\n    if s[0] == \"B\" and s[1] == \"A\" and s[2] == \"B\":\n        return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0] == s[1] or s[1] == s[2] or s[0] == s[2]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4400,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    records = stdin.strip()\n    max_consecutive_rainy_days = 0\n    consecutive_rainy_days = 0\n    for i in range(len(records)):\n        if records[i] == 'R':\n            consecutive_rainy_days += 1\n            max_consecutive_rainy_days = max(max_consecutive_rainy_days, consecutive_rainy_days)\n        else:\n            consecutive_rainy_days = 0\n    return str(max_consecutive_rainy_days)"
    },
    {
        "number": 4400,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Splitting the input string to get a list of characters\n    input_list = list(stdin.strip())\n\n    # Initializing the count of consecutive rainy days as 0\n    consecutive_rainy_days = 0\n\n    # Initializing the count of total rainy days as 0\n    total_rainy_days = 0\n\n    # Iterating through the list of characters\n    for char in input_list:\n        # If the current character is R, increment the count of consecutive rainy days\n        if char == 'R':\n            consecutive_rainy_days += 1\n        else:\n            # If the current character is S, reset the count of consecutive rainy days\n            consecutive_rainy_days = 0\n\n        # Increment the count of total rainy days\n        total_rainy_days += 1\n\n    # Returning the maximum number of consecutive rainy days in the period\n    return consecutive_rainy_days"
    },
    {
        "number": 4400,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Converting input string to list\n    S = list(stdin)\n    # Initializing variables\n    rain_count = 0\n    max_count = 0\n    # Iterating over the input list\n    for i in range(3):\n        if S[i] == 'R':\n            rain_count += 1\n        else:\n            rain_count = 0\n        if rain_count > max_count:\n            max_count = rain_count\n    # Returning the maximum number of consecutive rainy days\n    return str(max_count)"
    },
    {
        "number": 4400,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    count = 0\n    max_count = 0\n    for i in range(len(S)):\n        if S[i] == \"R\":\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n    return str(max_count)"
    },
    {
        "number": 4400,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input string\n    S = stdin.strip()\n\n    # initialize variables\n    count = 0\n    max_count = 0\n\n    # iterate through string\n    for i in range(len(S)):\n        if S[i] == 'R':\n            count += 1\n            # update max_count if count is greater than max_count\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n\n    # print max_count\n    return str(max_count)"
    },
    {
        "number": 4400,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    max_count = 0\n    count = 0\n    for i in range(len(S)):\n        if S[i] == 'R':\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count"
    },
    {
        "number": 4400,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    rainy_count = 0\n    max_rainy_count = 0\n    for i in range(3):\n        if S[i] == 'R':\n            rainy_count += 1\n            max_rainy_count = max(max_rainy_count, rainy_count)\n        else:\n            rainy_count = 0\n    return str(max_rainy_count)"
    },
    {
        "number": 4400,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing the input string\n    records = list(stdin.strip())\n    if len(records)!= 3:\n        return \"Invalid input\"\n\n    # Finding the maximum number of consecutive rainy days\n    rainy_days = 0\n    for i in range(len(records)):\n        if records[i] == 'R':\n            rainy_days += 1\n        else:\n            rainy_days = 0\n        if rainy_days > 2:\n            return rainy_days\n\n    # Returning the maximum number of consecutive rainy days\n    return rainy_days"
    },
    {
        "number": 4400,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    max_count = 0\n    current_count = 0\n    for i in range(len(S)):\n        if S[i] == 'R':\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n    return str(max_count)"
    },
    {
        "number": 4400,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get input string\n    S = stdin.strip()\n\n    # Initialize variables\n    count = 0\n    max_count = 0\n\n    # Traverse through the string\n    for i in range(len(S)):\n        if S[i] == 'R':\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n\n    return max_count"
    },
    {
        "number": 4401,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    x, y, z = map(int, stdin.split())\n\n    # Swap the contents of the boxes A and B\n    a, b = x, y\n    x, y = b, a\n\n    # Swap the contents of the boxes A and C\n    a, c = x, z\n    x, z = c, a\n\n    # Print the content of the boxes A, B, and C\n    print(x, y, z)\n\n    return \"\""
    },
    {
        "number": 4401,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    x, y, z = map(int, stdin.split())\n\n    # Swap contents of boxes A and B\n    a, b = y, x\n\n    # Swap contents of boxes A and C\n    a, c = z, a\n\n    # Output\n    return f\"{a} {b} {c}\""
    },
    {
        "number": 4401,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    a, b, c = x, y, z\n    \n    # swap contents of A and B\n    a, b = b, a\n    \n    # swap contents of A and C\n    a, c = c, a\n    \n    return f\"{a} {b} {c}\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    X, Y, Z = map(int, stdin.split())\n    \n    # Swap the contents of the boxes A and B\n    A, B = B, A\n    \n    # Swap the contents of the boxes A and C\n    A, C = C, A\n    \n    # Print the integers contained in the boxes A, B, and C, in this order\n    return f\"{A} {B} {C}\""
    },
    {
        "number": 4401,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    a, b, c = x, y, z\n    a, b = b, a  # swap A and B\n    a, c = c, a  # swap A and C\n    return f\"{a} {b} {c}\""
    },
    {
        "number": 4401,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.strip().split())\n    \n    # swap A and B\n    x, y = y, x\n    \n    # swap A and C\n    x, z = z, x\n    \n    return''.join(map(str, [x, y, z]))"
    },
    {
        "number": 4401,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Reading the input\n    x, y, z = map(int, stdin.split())\n    \n    # Applying the operations\n    x, y = y, x\n    x, z = z, x\n    \n    # Printing the output\n    return f\"{x} {y} {z}\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    a, b, c = x, y, z\n    \n    a, b = b, a\n    a, c = c, a\n    \n    return f\"{a} {b} {c}\"\n\nprint(solution(input()))"
    },
    {
        "number": 4401,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    x, y, z = map(int, stdin.strip().split())\n\n    # Swap contents of A and B\n    a, b = y, x\n\n    # Swap contents of A and C\n    a, c = z, a\n\n    # Output the contents of A, B, and C\n    return f\"{a} {b} {c}\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    A, B = B, A\n    A, C = C, A\n    return str(A) + \" \" + str(B) + \" \" + str(C)"
    },
    {
        "number": 4402,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    if A >= 13:\n        return B\n    elif A >= 6 and A <= 12:\n        return B // 2\n    else:\n        return 0"
    },
    {
        "number": 4402,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a >= 13:\n        cost = b\n    elif a >= 6 and a <= 12:\n        cost = b / 2\n    else:\n        cost = 0\n    return str(cost)"
    },
    {
        "number": 4402,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a >= 13:\n        if a >= 15:\n            return str(b)\n        else:\n            return str(b // 2)\n    else:\n        return \"0\""
    },
    {
        "number": 4402,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    age, price = map(int, stdin.split())\n    if age >= 13:\n        if age >= 16:\n            return str(price)\n        else:\n            return str(price//2)\n    else:\n        return \"0\""
    },
    {
        "number": 4402,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a >= 13:\n        return b\n    elif a >= 6:\n        return b // 2\n    else:\n        return 0\n\nprint(solution(\"30 100\")) # Output: 100"
    },
    {
        "number": 4402,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    if a >= 13:\n        cost = b\n    elif a >= 6 and a <= 12:\n        cost = b // 2\n    else:\n        cost = 0\n\n    return str(cost)"
    },
    {
        "number": 4402,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A >= 13:\n        cost = B\n    elif A >= 6 and A <= 12:\n        cost = B / 2\n    else:\n        cost = 0\n    print(cost)\n    return \"\""
    },
    {
        "number": 4402,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a >= 13:\n        if a >= 18:\n            cost = b\n        else:\n            cost = b // 2\n    else:\n        cost = 0\n    return str(cost)"
    },
    {
        "number": 4402,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    if A >= 13:\n        if A <= 18:\n            cost = B\n        else:\n            cost = B // 2\n    else:\n        if A == 5:\n            cost = 0\n        else:\n            cost = B // 2\n        \n    return str(cost)\n\nstdin = \"30 100\"\nprint(solution(stdin))  # Output: 100"
    },
    {
        "number": 4402,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < 6:\n        return str(0)\n    elif a < 13:\n        return str(b//2)\n    else:\n        return str(b)"
    },
    {
        "number": 4403,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    integer = 0\n    for char in stdin:\n        if char == '+':\n            integer += 1\n        else:\n            integer -= 1\n    return integer\n\nprint(solution(input()))"
    },
    {
        "number": 4403,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    integer = 0\n    for char in stdin:\n        if char == \"+\":\n            integer += 1\n        else:\n            integer -= 1\n    return str(integer)\n\nprint(solution(input())) # taking input from user"
    },
    {
        "number": 4403,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    integer = 0\n    for symbol in stdin:\n        if symbol == \"+\":\n            integer += 1\n        else:\n            integer -= 1\n    return str(integer)"
    },
    {
        "number": 4403,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    integer = 0\n    for symbol in S:\n        if symbol == \"+\":\n            integer += 1\n        else:\n            integer -= 1\n    return str(integer)"
    },
    {
        "number": 4403,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    integer = 0\n    for symbol in stdin:\n        if symbol == \"+\":\n            integer += 1\n        else:\n            integer -= 1\n    return str(integer)"
    },
    {
        "number": 4403,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    num = 0\n    for i in s:\n        if i == \"+\":\n            num += 1\n        elif i == \"-\":\n            num -= 1\n    return str(num)"
    },
    {
        "number": 4403,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into a list of characters\n    S = list(stdin.strip())\n\n    # Initialize the integer in Takahashi's mind to 0\n    integer = 0\n\n    # Iterate over the symbols to be eaten and update the integer accordingly\n    for symbol in S:\n        if symbol == '+':\n            integer += 1\n        elif symbol == '-':\n            integer -= 1\n\n    # Return the integer in Takahashi's mind\n    return str(integer)"
    },
    {
        "number": 4403,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    integer = 0\n    for symbol in S:\n        if symbol == \"+\":\n            integer += 1\n        else:\n            integer -= 1\n    return str(integer)"
    },
    {
        "number": 4403,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    integer = 0\n    for symbol in stdin:\n        if symbol == \"+\":\n            integer += 1\n        else:\n            integer -= 1\n    return str(integer)"
    },
    {
        "number": 4403,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    integer = 0\n    for char in stdin:\n        if char == '+':\n            integer += 1\n        elif char == '-':\n            integer -= 1\n    return str(integer)"
    },
    {
        "number": 4404,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    year, month, day = map(int, stdin.split('/'))\n    if year > 2019 or (year == 2019 and month > 4) or (year == 2019 and month == 4 and day > 30):\n        return 'TBD'\n    else:\n        return 'Heisei'"
    },
    {
        "number": 4404,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.strip()\n    year, month, day = map(int, date.split('/'))\n    if year > 2019 or (year == 2019 and month > 4) or (year == 2019 and month == 4 and day >= 30):\n        return \"TBD\"\n    else:\n        return \"Heisei\""
    },
    {
        "number": 4404,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.strip().split(\"/\")\n    year = int(date[0])\n    month = int(date[1])\n    day = int(date[2])\n    if year > 2019 or (year == 2019 and (month > 4 or (month == 4 and day > 30))):\n        return \"Heisei\"\n    else:\n        return \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    date_str = stdin.strip()\n    year, month, day = map(int, date_str.split('/'))\n    if year == 2019 and month > 4 or (year == 2020 and month <= 4):\n        return \"Heisei\"\n    else:\n        return \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.split(\"/\")\n    month = int(date[1])\n    day = int(date[2])\n    if month <= 4 and day <= 30:\n        return \"Heisei\"\n    else:\n        return \"TBD\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.split('/')\n    year = int(date[0])\n    month = int(date[1])\n    day = int(date[2])\n    if year > 2019 or (year == 2019 and month > 4) or (year == 2019 and month == 4 and day >= 30):\n        return \"TBD\"\n    else:\n        return \"Heisei\""
    },
    {
        "number": 4404,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    yyyy, mm, dd = map(int, stdin.split('/'))\n    if yyyy < 2020 or (yyyy == 2020 and mm < 4) or (yyyy == 2020 and mm == 4 and dd <= 30):\n        return 'Heisei'\n    return 'TBD'"
    },
    {
        "number": 4404,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    year, month, day = map(int, stdin.split(\"/\"))\n    if year > 2019 or (year == 2019 and month > 4) or (year == 2019 and month == 4 and day > 30):\n        return \"Heisei\"\n    else:\n        return \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split('\\n')[0]\n    year, month, day = map(int, S.split('/'))\n    if year < 2020 or (year == 2020 and month <= 4):\n        return \"Heisei\"\n    else:\n        return \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.strip().split('/')\n    year = int(date[0])\n    month = int(date[1])\n    day = int(date[2])\n\n    if year < 2019:\n        return 'TBD'\n    elif month > 4 or (month == 4 and day > 30):\n        return 'TBD'\n    else:\n        return 'Heisei'\n"
    },
    {
        "number": 4405,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    max_problems = 0\n    \n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            continue\n        max_problems += 2\n        \n    return str(max_problems)"
    },
    {
        "number": 4405,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    # Step 1: Find all possible pairs of consecutive pairs of problems of the same topic\n    pairs = []\n    for i in range(n-1):\n        if a[i] == a[i+1]:\n            pairs.append((i, i+1))\n    pairs.sort(key=lambda x: a[x[0]])\n    \n    # Step 2: Calculate the number of problems in each pair\n    prev_problems = 1\n    for i in range(len(pairs)):\n        pair = pairs[i]\n        problems = pair[1] - pair[0] + 1\n        if problems > prev_problems * 2:\n            return prev_problems * 2\n        prev_problems = problems\n    \n    # Step 3: Return the total number of problems\n    return prev_problems * 2"
    },
    {
        "number": 4405,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    def get_problems_count(problems, i):\n        count = 0\n        for j in range(i, n):\n            if a[j] == a[i]:\n                count += 1\n        return count\n\n    # get the optimal number of problems per day\n    prev_problems = 0\n    max_problems = 0\n    for i in range(n):\n        current_problems = get_problems_count(a, i)\n        if prev_problems + current_problems <= 2 * max_problems:\n            max_problems = prev_problems + current_problems\n        prev_problems = current_problems\n\n    return max_problems\n\nprint(solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\")) # 14\nprint(solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\")) # 9\nprint(solution(\"3\\n1337 1337 1337\")) # 3"
    },
    {
        "number": 4405,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    cnt = 0\n    current = 0\n    ans = 0\n    for i in range(n):\n        if cnt == 0 or current!= a[i]:\n            cnt = 1\n            current = a[i]\n        else:\n            cnt += 1\n        if cnt == 3:\n            ans += 1\n            cnt = 1\n            current = a[i]\n    ans += cnt > 1\n    return str(ans)\n\nstdin = \"\"\"\n18\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\n\"\"\"\n\nprint(solution(stdin))  # Output: 14"
    },
    {
        "number": 4405,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # Sort the array in descending order\n    a.sort(reverse=True)\n    \n    # Calculate the number of problems for each topic\n    count = [0] * (n + 1)\n    for i in range(1, n + 1):\n        count[a[i]] += 1\n        \n    # Find the maximum number of problems that can be added\n    max_problems = 0\n    for i in range(1, n + 1):\n        if count[a[i]] > 0:\n            max_problems += 1\n            count[a[i]] -= 1\n        if i % 2 == 0 and a[i] == a[i - 1] and count[a[i]] > 0:\n            max_problems += 1\n            count[a[i]] -= 1\n            \n    return max_problems\n    "
    },
    {
        "number": 4405,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    max_length = 0\n    current_length = 0\n    count = 0\n    \n    for i in range(n):\n        if a[i] == a[i-1]:\n            current_length += 1\n        else:\n            current_length = 1\n            \n        count += 1\n        \n        if count == 2:\n            max_length = max(max_length, current_length)\n            count = 1\n            current_length = 1\n            \n    max_length = max(max_length, current_length)\n            \n    return str(max_length)"
    },
    {
        "number": 4405,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    cnt = 1\n    ans = 0\n    for i in range(n):\n        if a[i]!= a[i-1]:\n            cnt = 1\n            ans += 1\n        else:\n            cnt += 1\n        ans += cnt\n    return ans"
    },
    {
        "number": 4405,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    problems = list(map(int, stdin.readline().strip().split()))\n    dp = [0] * n\n    for i in range(1, n):\n        if problems[i] == problems[i-1]:\n            dp[i] = dp[i-1] + 1\n        else:\n            dp[i] = dp[i-1]\n    return max(dp)\n\nprint(solution(open(\"input.txt\", \"r\")))"
    },
    {
        "number": 4405,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # sort the problems by topics\n    a.sort()\n\n    # initialize the current number of problems and the maximum number of problems\n    curr = max_total = 0\n\n    # loop through the sorted problems\n    for i in range(n):\n        # add the current problem to the current number of problems\n        curr += a[i]\n        # if the current number of problems is even, add it to the maximum number of problems\n        if curr % 2 == 0:\n            max_total += curr\n        # if the current number of problems is odd, reset the current number of problems to 0\n        else:\n            curr = 0\n    # return the maximum number of problems\n    return max_total"
    },
    {
        "number": 4405,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n\n    dp = [0] * n\n    dp[0] = 1\n    max_problems = 1\n    for i in range(1, n):\n        if arr[i] == arr[i-1]:\n            dp[i] = dp[i-1]\n        else:\n            dp[i] = dp[i-1] + 1\n        max_problems = max(max_problems, dp[i])\n    \n    return str(max_problems)"
    },
    {
        "number": 4406,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    ids = list(map(int, stdin.split()[2:]))\n    conversations = []\n    for i in range(n):\n        found = False\n        for j in range(len(conversations)):\n            if ids[i] == conversations[j][0]:\n                found = True\n                break\n        if not found:\n            if len(conversations) == k:\n                conversations.pop()\n            conversations.insert(0, [ids[i]])\n    print(len(conversations))\n    for conversation in conversations:\n        print(*conversation)\n    return \"\""
    },
    {
        "number": 4406,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()[0:2]))\n    ids = list(map(int, stdin.split()[2:]))\n    \n    # Initialize an empty list to store the list of conversations\n    conversations = []\n    \n    # Iterate over all the messages\n    for i in range(n):\n        # If the message is already on the screen, do nothing\n        if ids[i] in [conversations[j] for j in range(len(conversations))]:\n            continue\n        \n        # If the number of conversations is less than k, add the new conversation\n        if len(conversations) < k:\n            conversations.append(ids[i])\n        # Otherwise, remove the last conversation and add the new one\n        else:\n            conversations.pop()\n            conversations.insert(0, ids[i])\n    \n    # Print the number of conversations and the list of conversations\n    print(len(conversations))\n    print(' '.join(str(conversations[i]) for i in range(len(conversations))))\n    \n    return ''"
    },
    {
        "number": 4406,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    ids = list(map(int, stdin.readline().split()))\n    m = 0\n    conversations = []\n    for i in range(n):\n        id = ids[i]\n        if id not in [conv[-1] for conv in conversations]:\n            if m < k:\n                conversations.append([id])\n                m += 1\n            else:\n                for j in range(m):\n                    if id!= conversations[j][-1]:\n                        conversations[j+1:] = [conversations[j]] + conversations[j+1:]\n                        conversations[0] = [id] + conversations[0]\n                        break\n        if m == k:\n            break\n    print(m)\n    print(*[conv[-1] for conv in conversations])\n    return \"\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    ids = list(map(int, stdin.split()[2:]))\n    conversations = []\n    for i in range(n):\n        id = ids[i]\n        if not any(id in c for c in conversations):\n            if len(conversations) == k:\n                conversations.pop()\n            conversations.insert(0, [id])\n        else:\n            for j in range(len(conversations)):\n                if id in conversations[j]:\n                    break\n            if j!= 0:\n                conversations[0], conversations[j] = conversations[j], conversations[0]\n    return f\"{len(conversations)}\\n\" + \"\\n\".join(str(c[0]) for c in conversations)"
    },
    {
        "number": 4406,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()[0:2]))\n    ids = list(map(int, stdin.split()[2:]))\n    conversations = []\n    for i in range(n):\n        friend_id = ids[i]\n        if friend_id not in [conversation[0] for conversation in conversations]:\n            if len(conversations) == k:\n                conversations.pop()\n            conversations.insert(0, [friend_id, i+1])\n    m = len(conversations)\n    result = str(m) + \"\\n\"\n    result += \"\\n\".join([str(conversation[0]) for conversation in conversations])\n    return result"
    },
    {
        "number": 4406,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    ids = list(map(int, stdin.readline().strip().split()))\n\n    # remove duplicates\n    ids = list(set(ids))\n\n    # create dictionary to hold conversations\n    conversations = {}\n\n    # process messages\n    for i in range(n):\n        id_ = ids[i]\n\n        # if conversation with id_ is already on screen, move it to the top\n        if id_ in conversations:\n            screen_pos = conversations[id_]\n            del conversations[id_]\n            conversations[id_] = screen_pos\n\n        # if there are no conversations on screen, add new conversation to the top\n        elif len(conversations) < k:\n            conversations[id_] = len(conversations)\n\n        # if there are k conversations on screen, remove the last one and add new conversation to the top\n        else:\n            last_id = list(conversations.keys())[-1]\n            last_pos = conversations[last_id]\n            del conversations[last_id]\n            conversations[id_] = last_pos\n\n    # print number of conversations and their ids\n    m = len(conversations)\n    print(m)\n    print(*conversations.keys())\n\ndef"
    },
    {
        "number": 4406,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    ids = list(map(int, stdin.split()[2:]))\n    conversations = []\n    for i in range(n):\n        id_i = ids[i]\n        found = False\n        for j in range(len(conversations)):\n            if conversations[j][-1] == id_i:\n                found = True\n                break\n        if not found:\n            if len(conversations) == k:\n                conversations.pop()\n            conversations.insert(0, [id_i])\n            for j in range(1, len(conversations)):\n                conversations[j] = conversations[j-1]\n    return f\"{len(conversations)}\\n{' '.join(map(str, [x[-1] for x in conversations]))}\""
    },
    {
        "number": 4406,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    ids = list(map(int, stdin.split()[2:]))\n    \n    # count the number of messages for each friend\n    count = {}\n    for id in ids:\n        count[id] = count.get(id, 0) + 1\n    \n    # sort the friends based on the number of messages received in descending order\n    sorted_ids = sorted(count, key=lambda x: count[x], reverse=True)\n    \n    # keep track of the number of messages received for each friend\n    count = {id: 0 for id in ids}\n    conversations = []\n    \n    # iterate over the sorted friends and add them to the first k positions of the conversations list\n    for id in sorted_ids:\n        if len(conversations) < k:\n            count[id] += 1\n            conversations.append(id)\n        elif count[id] > 0:\n            index = conversations.index(id)\n            count[id] += 1\n            conversations[index] = id\n            for i in range(index+1, len(conversations)):\n                conversations[i] = conversations[i-1]\n    \n    # print the number of conversations and the list of friend IDs\n    print(len(conversations))\n    print(' '.join(map(str, conversations)))"
    },
    {
        "number": 4406,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    ids = list(map(int, stdin.readline().strip().split()))\n\n    conversations = {}\n    for i in range(n):\n        friend = ids[i]\n        if friend in conversations:\n            continue\n        if len(conversations) == k:\n            conversations.pop(min(conversations))\n        conversations[friend] = i + 1\n\n    return len(conversations),''.join(map(str, conversations.keys()))\n"
    },
    {
        "number": 4406,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    ids = list(map(int, stdin.splitlines()[1].split()))\n    \n    # list of conversations\n    conversations = []\n    \n    for i in range(n):\n        # check if current conversation is already on the screen\n        if ids[i] in [conversations[-1][1]] if conversations else []:\n            continue\n        # if there is no conversation with the current ID on the screen, add it to the screen\n        else:\n            # if the number of conversations on the screen is k, remove the last conversation\n            if len(conversations) == k:\n                conversations.pop()\n            # add the new conversation to the screen\n            conversations.append([i+1, ids[i]])\n    \n    # print the number of conversations and the IDs of the conversations on the screen\n    print(len(conversations))\n    print(*[conversations[i][1] for i in range(len(conversations))], sep=\" \")\n    \n    return \"\""
    },
    {
        "number": 4407,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.readline().split())\n    coins = list(map(int, stdin.readline().split()))\n    queries = list(map(int, stdin.readlines()))\n    dp = [[-1]*(10**6+1) for _ in range(n+1)]\n    dp[0][0] = 0\n    for i in range(1, n+1):\n        for j in range(10**6+1):\n            if dp[i-1][j] == -1:\n                dp[i][j] = dp[i-1][j]\n            elif j >= coins[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] + 1\n    for j in range(q):\n        if dp[n][queries[j]] == -1:\n            print(-1)\n        else:\n            print(dp[n][queries[j]])"
    },
    {
        "number": 4407,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    # dp[i][j] is the minimum number of coins needed to get value j using a[i:] coins\n    dp = [[0] * (2**10) for _ in range(n)]\n\n    # find the maximum value that we can get using a[i] coins\n    max_val = 0\n    for j in range(n):\n        dp[j][a[j]] = 1\n        max_val = max(max_val, a[j])\n\n    # fill the rest of the dp table using dynamic programming\n    for i in range(n):\n        for j in range(max_val, 2**10):\n            if dp[i][j] == 0:\n                continue\n\n            for k in range(i+1, n):\n                if dp[k][j-a[k]]:\n                    dp[k][j] = min(dp[k][j], dp[i][j] + 1)\n\n    # find the answer for each query\n    ans = []\n    for j in range(q):\n        if b[j] > 2**max_val:\n            ans.append(-1)\n        else:\n            # binary search for the minimum number of coins needed to get value b[j]\n            lo, hi = 0, 10**9\n            while lo < hi:\n                mid = (lo + hi) // 2\n                if dp[n-1][mid] >= b[j]:\n                    hi = mid\n                else:\n                    lo = mid + 1\n            ans.append(lo)\n\n    return \" \".join(map(str, ans))\n\nprint(solution(\"5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\")) # Output: 1 -1 3 2"
    },
    {
        "number": 4407,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[0:2])\n    coins = list(map(int, stdin.split()[2:2+n]))\n    queries = list(map(int, stdin.split()[2+n:]))\n    dp = [float('inf')] * (2*10**9+1)\n    dp[0] = 0\n    for i in range(n):\n        for j in range(dp[i]+1, 2*10**9+1):\n            if j >= coins[i]:\n                dp[j] = min(dp[j], dp[j-coins[i]]+1)\n    for query in queries:\n        if dp[query] == float('inf'):\n            print(-1, end=' ')\n        else:\n            print(dp[query], end=' ')\n    return \"\""
    },
    {
        "number": 4407,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    ans = []\n    for i in range(q):\n        b = int(stdin.readline())\n        count = 0\n        for j in range(n):\n            if a[j] <= b:\n                count += b // a[j]\n                b %= a[j]\n                if b == 0:\n                    break\n        if b!= 0:\n            ans.append(-1)\n        else:\n            ans.append(count)\n    return''.join(map(str, ans))"
    },
    {
        "number": 4407,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    ans = []\n    for _ in range(q):\n        b = int(stdin.readline())\n        if b == 0:\n            ans.append(0)\n            continue\n\n        cnt = 0\n        for i in range(n):\n            cnt += b // a[i]\n            b %= a[i]\n            if b == 0:\n                break\n        if b!= 0:\n            ans.append(-1)\n        else:\n            ans.append(cnt)\n\n    return '\\n'.join(map(str, ans))\n"
    },
    {
        "number": 4407,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    for i in range(q):\n        b = int(stdin.readline())\n        count = 0\n        for i in range(n):\n            if a[i] >= b:\n                count += 1\n                b -= a[i]\n            if b == 0:\n                break\n        if b!= 0:\n            print(-1)\n        else:\n            print(count)\n    return ''\n\ndef"
    },
    {
        "number": 4407,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    coins = list(map(int, stdin.split()))\n    ans = []\n    for _ in range(q):\n        b = int(stdin.readline().strip())\n        dp = [float('inf')] * n\n        dp[0] = 0\n        for i in range(1, n):\n            dp[i] = min(dp[i - 1], dp[i])\n            if coins[i] <= b:\n                dp[i] = min(dp[i], dp[i - coins[i]] + 1)\n        if dp[-1] == float('inf'):\n            ans.append(-1)\n        else:\n            ans.append(dp[-1])\n    return''.join(map(str, ans))"
    },
    {
        "number": 4407,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, q = list(map(int, stdin.split()))\n    a = list(map(int, stdin.readline().split()))\n    ans = []\n    for j in range(q):\n        b = int(stdin.readline())\n        s = 0\n        for i in range(n):\n            s += a[i]\n            if s >= b:\n                ans.append(i+1)\n                break\n        else:\n            ans.append(-1)\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 4407,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.readline().split())\n    coins = list(map(int, stdin.readline().split()))\n    queries = list(map(int, stdin.readlines()))\n    dp = [float('inf') for _ in range(q+1)]\n    dp[0] = 0\n    for i in range(n):\n        for j in range(q, 0, -1):\n            if coins[i] <= queries[j-1] and dp[j-1]!= float('inf'):\n                dp[j] = min(dp[j], dp[j-1]+1)\n    res = []\n    for j in range(q):\n        if dp[j] == float('inf'):\n            res.append(-1)\n        else:\n            res.append(dp[j])\n    return''.join(map(str, res))\n"
    },
    {
        "number": 4407,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, q = map(int, stdin.readline().split())\n    coins = list(map(int, stdin.readline().split()))\n    queries = list(map(int, stdin.readline().split()))\n\n    # dp[j] represents the minimum number of coins needed to obtain j\n    dp = [float('inf')] * (max(coins) + 1)\n    dp[0] = 0\n    for coin in coins:\n        for j in range(coin, len(dp)):\n            dp[j] = min(dp[j], dp[j - coin] + 1)\n\n    # solve queries\n    for query in queries:\n        print(dp[query] if dp[query]!= float('inf') else -1)\n\n    return \"\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    cards = list(map(int, stdin.split()[2:]))\n    favs = list(map(int, stdin.split()[2+k*n:2+2*k*n]))\n    joys = list(map(int, stdin.split()[2+2*k*n:]))\n    cards.sort()\n    ans = 0\n    for i in range(k):\n        ans += joys[i]*favs.count(cards[i*n])\n        if ans > 10**18:\n            return \"infinity\"\n    return ans\n\nprint(solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\\n\"))\nprint(solution(\"3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\\n\"))"
    },
    {
        "number": 4408,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    cards = list(map(int, stdin.readline().split()))\n    faves = list(map(int, stdin.readline().split()))\n    joys = list(map(int, stdin.readline().split()))\n\n    cards.sort()\n    joys.sort()\n\n    res = 0\n    i = 0\n    j = 0\n\n    for _ in range(k*n):\n        if cards[i] == faves[j]:\n            res += joys[j]\n            j += 1\n            if j == n:\n                break\n        i += 1\n\n    return str(res)"
    },
    {
        "number": 4408,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    cards = list(map(int, stdin.readline().strip().split()))\n    favs = list(map(int, stdin.readline().strip().split()))\n    joy = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    freq = [0] * 100001\n    max_freq = 0\n\n    # Count frequency of each number and find max frequency\n    for card in cards:\n        freq[card] += 1\n        if freq[card] > max_freq:\n            max_freq = freq[card]\n\n    # Remove duplicates and sort cards\n    unique_cards = sorted(list(set(cards)))\n\n    # Count frequency of favorite numbers\n    fav_freq = [0] * n\n    for i in range(n):\n        for card in unique_cards:\n            if card == favs[i]:\n                fav_freq[i] += 1\n\n    # Find max possible joy level of each player\n    max_joy = [0] * n\n    for i in range(n):\n        max_joy[i] = joy[fav_freq[i]]\n\n    # Count total joy level of each player\n    total_joy = [0] * n\n    for card in unique_cards:\n        for i in range(n):\n            if card == favs[i]:\n                total_joy[i] += joy[fav_freq[i]]\n\n    # Find maximum total joy level\n    max_total_joy = max(total_joy)\n\n    return str(max_total_joy)\n"
    },
    {
        "number": 4408,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k = map(int, stdin.readline().strip().split())\n    cards = list(map(int, stdin.readline().strip().split()))\n    favs = list(map(int, stdin.readline().strip().split()))\n    joys = list(map(int, stdin.readline().strip().split()))\n    \n    # Count the number of cards each player will get\n    counts = [k] * n\n    cards_left = len(cards)\n    for i in range(n):\n        counts[i] = min(counts[i], cards_left // n)\n        cards_left -= counts[i]\n    \n    # Calculate the maximum possible joy level for each player\n    max_joys = [0] * n\n    for i in range(n):\n        for j in range(counts[i]):\n            if cards[j + i*k] == favs[i]:\n                max_joys[i] += joys[counts[i]]\n    \n    # Calculate the total maximum possible joy level\n    return sum(max_joys)"
    },
    {
        "number": 4408,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    c = list(map(int, stdin.readline().split()))\n    f = list(map(int, stdin.readline().split()))\n    h = list(map(int, stdin.readline().split()))\n\n    h.sort(reverse=True)\n    dp = [0] * (k * n)\n    for i in range(k * n):\n        for j in range(k * n - i):\n            dp[i+j] = max(dp[i+j], dp[i] + h[j//n])\n    res = sum(dp[k*n-1] for i in range(k * n) if c[i] == f[i//k])\n    return str(res)"
    },
    {
        "number": 4408,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    cards = list(map(int, stdin.readline().split()))\n    favorites = list(map(int, stdin.readline().split()))\n    joy_levels = list(map(int, stdin.readline().split()))\n    cards_per_player = k // n\n\n    joy_levels_per_player = [0] * n\n\n    for i in range(len(cards)):\n        card = cards[i]\n        for j in range(n):\n            if card == favorites[j]:\n                joy_levels_per_player[j] += joy_levels[i // cards_per_player]\n\n    return max(joy_levels_per_player)\n\n\ndef"
    },
    {
        "number": 4408,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    cards = list(map(int, stdin.readline().split()))\n    favorites = list(map(int, stdin.readline().split()))\n    joy_levels = list(map(int, stdin.readline().split()))\n    \n    # Create an array to store the count of cards each player will get\n    counts = [0] * n\n    \n    # Sort the cards in ascending order\n    cards.sort()\n    \n    # Distribute the cards to the players\n    for i in range(k * n):\n        card = cards[i]\n        for j in range(n):\n            if card == favorites[j]:\n                counts[j] += 1\n    \n    # Compute the total joy level of each player\n    total_joy_levels = [0] * n\n    for j in range(n):\n        cards_with_favorite = counts[j]\n        joy_level = joy_levels[cards_with_favorite - 1]\n        total_joy_levels[j] = joy_level\n    \n    # Return the maximum total joy level\n    return max(total_joy_levels)"
    },
    {
        "number": 4408,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    cards = list(map(int, stdin.readline().split()))\n    favs = list(map(int, stdin.readline().split()))\n    joy_levels = list(map(int, stdin.readline().split()))\n\n    # initialize variables\n    max_joy_level = 0\n    num_cards_per_player = [0] * n\n    num_players_with_favorite_card = [0] * k\n    player_index = 0\n\n    # distribute cards to players\n    for card in cards:\n        # check if there are any players left who can get this card\n        while num_cards_per_player[player_index] == k:\n            player_index += 1\n            if player_index == n:\n                player_index = 0\n\n        # add card to player's hand\n        num_cards_per_player[player_index] += 1\n\n        # check if player has card with favorite number\n        if card in favs:\n            num_players_with_favorite_card[card - 1] += 1\n\n        # update max joy level\n        if num_players_with_favorite_card[-1] > 0:\n            max_joy_level += joy_levels[-1]\n\n    return str(max_joy_level)\n\ndef"
    },
    {
        "number": 4408,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    c = list(map(int, stdin.readline().split()))\n    f = list(map(int, stdin.readline().split()))\n    h = list(map(int, stdin.readline().split()))\n    max_joy = 0\n    for i in range(1, k + 1):\n        for j in itertools.combinations(c, i):\n            joy = sum([h[c.index(num)] for num in j if num in f])\n            max_joy = max(max_joy, joy)\n    return str(max_joy)\n\nimport itertools\n\nstdin = \"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\\n1 2 3\\n4 5 6\\n\"\nprint(solution(stdin))  # Output: 15"
    },
    {
        "number": 4408,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    cards = list(map(int, stdin.readline().strip().split()))\n    faves = list(map(int, stdin.readline().strip().split()))\n    joy = list(map(int, stdin.readline().strip().split()))\n\n    # create a dictionary to store the count of cards for each player\n    player_cards = {}\n    for i in range(n):\n        player_cards[i+1] = 0\n\n    # create a list to store the remaining cards\n    remaining_cards = cards.copy()\n\n    # create a dictionary to store the count of cards with favorite number for each player\n    player_fave_cards = {}\n    for i in range(n):\n        player_fave_cards[i+1] = 0\n\n    # loop through each card in the remaining cards\n    for card in remaining_cards:\n        # find the player who has this card\n        for player in player_cards:\n            if card in player_cards:\n                # add this card to the player's count\n                player_cards[player] += 1\n                # check if this card has the player's favorite number\n                if card == faves[player-1]:\n                    player_fave_cards[player] += 1\n\n    # calculate the total joy level for each player\n    total_joy = 0\n    for player in player_fave_cards:\n        total_joy += joy[player_fave_cards[player]-1]\n\n    return total_joy\n\n\ndef"
    },
    {
        "number": 4409,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    k = 0\n    for i in range(n):\n        for j in range(i+2, n):\n            if j-i==1:\n                if abs(a[i]-a[j])!= abs(a[j]-a[i]):\n                    k += 1\n                    if a[i]<a[j]:\n                        print(1, i, j)\n                        a[i] += abs(a[i]-a[j])\n                        a[j] -= abs(a[i]-a[j])\n                    else:\n                        print(2, i, j)\n                        a[i] -= abs(a[i]-a[j])\n                        a[j] += abs(a[i]-a[j])\n                else:\n                    k += 1\n                    if a[i]<a[j]:\n                        print(2, i, j)\n                        a[i] -= abs(a[i]-a[j])\n                        a[j] += abs(a[i]-a[j])\n                    else:\n                        print(1, i, j)\n                        a[i] += abs(a[i]-a[j])\n                        a[j] -= abs(a[i]-a[j])\n    return str(k)"
    },
    {
        "number": 4409,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    order = []\n    for i in range(n):\n        for j in range(i+2, n):\n            if abs(a[i] - a[j]) == 1:\n                count += 1\n                if a[i] > a[j]:\n                    order.append((1, i+1, j+1))\n                    a[i] += abs(a[i] - a[j])\n                else:\n                    order.append((2, i+1, j+1))\n                    a[i] -= abs(a[i] - a[j])\n    return f\"{count}\\n{' '.join(map(str, order))}\""
    },
    {
        "number": 4409,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    k = 0\n    ops = []\n    for i in range(n-1):\n        for j in range(i+2, n):\n            if abs(a[i] - a[j]) == 1:\n                if a[i] < a[j]:\n                    a[i] += abs(a[i] - a[j])\n                    ops.append((1, i+1, j+1))\n                    k += 1\n                else:\n                    a[i] -= abs(a[i] - a[j])\n                    ops.append((2, i+1, j+1))\n                    k += 1\n    return f\"{k}\\n{' '.join(str(op) for op in ops)}\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4409,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing the input\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # Calculating the minimum number of operations\n    k = 0\n    for i in range(1, n):\n        if abs(a[i] - a[i-1]) == 1:\n            if a[i] == a[i-1]:\n                a[i] -= 1\n            else:\n                a[i] += 1\n            k += 1\n            # print(f\"Performing operation ({k}, {i-1}, {i})\")\n            print(k, i-1, i)\n\n    # Printing the number of operations and the order of operations\n    print(k)\n\n    return \"\""
    },
    {
        "number": 4409,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    if n == 1:\n        return \"0\"\n\n    op_count = 0\n    while True:\n        for i in range(n-1):\n            if abs(a[i] - a[i+1]) > 1:\n                if a[i] < a[i+1]:\n                    a[i] += abs(a[i] - a[i+1])\n                    op_count += 1\n                else:\n                    a[i+1] += abs(a[i] - a[i+1])\n                    op_count += 1\n                break\n        else:\n            break\n\n    for i in range(n-1):\n        if abs(a[i] - a[i+1]) > 1:\n            return \"IMPOSSIBLE\"\n\n    if op_count == 0:\n        return \"0\"\n\n    result = f\"{op_count}\\n\"\n    for i in range(n-1):\n        if abs(a[i] - a[i+1]) == 1:\n            if a[i] < a[i+1]:\n                result += f\"1 {i+1} {i+2}\\n\"\n            else:\n                result += f\"1 {i} {i+1}\\n\"\n        elif abs(a[i] - a[i+1]) > 1:\n            return \"IMPOSSIBLE\"\n\n    return result[:-1]"
    },
    {
        "number": 4409,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    ops = []\n    for i in range(n):\n        if i == n-1 or abs(a[i]-a[i+1])!= 1:\n            continue\n        if a[i] < a[i+1]:\n            ops.append((1, i, i+1))\n            a[i] += abs(a[i]-a[i+1])\n        else:\n            ops.append((2, i, i+1))\n            a[i] -= abs(a[i]-a[i+1])\n        if a[i] == a[i+1]:\n            break\n    print(len(ops))\n    for op in ops:\n        print(*op)\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n\nwith open('output.txt', 'w') as f:\n    f.write(solution(stdin))"
    },
    {
        "number": 4409,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    ops = []\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(a[i] - a[j])!= 0:\n                if abs(a[i] - a[j]) < abs(a[j] - a[i]):\n                    a[i] += abs(a[i] - a[j])\n                    ops.append((1, i, j))\n                else:\n                    a[i] -= abs(a[i] - a[j])\n                    ops.append((2, i, j))\n                count += 1\n                if count == n-1:\n                    return count, ops\n    return count, ops\n\nstdin = \"5\\n2 4 6 6 6\"\ncount, ops = solution(stdin)\nprint(count)\nfor op in ops:\n    print(*op)\n\nstdin = \"3\\n2 8 10\"\ncount, ops = solution(stdin)\nprint(count)\nfor op in ops:\n    print(*op)\n\nstdin = \"4\\n1 1 1 1\"\ncount, ops = solution(stdin)\nprint(count)\nfor op in ops:\n    print(*op)"
    },
    {
        "number": 4409,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    operations = []\n    for i in range(n):\n        for j in range(i+2, n):\n            if j-i == 1:\n                if a[i] > a[j]:\n                    operations.append((1, i+1, j+1))\n                    a[i] -= abs(a[i] - a[j])\n                else:\n                    operations.append((2, i+1, j+1))\n                    a[i] += abs(a[i] - a[j])\n    print(len(operations))\n    for op in operations:\n        print(*op)\n    return \"\""
    },
    {
        "number": 4409,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    res = []\n    count = 0\n    for i in range(n):\n        if i < n-1 and a[i]!= a[i+1]:\n            res.append((1, i+1, i+2))\n            a[i+1] += abs(a[i+1] - a[i])\n            count += 1\n        if i > 0 and a[i]!= a[i-1]:\n            res.append((2, i-1, i))\n            a[i-1] -= abs(a[i-1] - a[i])\n            count += 1\n    return str(count) + '\\n' + '\\n'.join(map(lambda x:''.join(map(str, x)), res)) + '\\n' if count > 0 else '0\\n'"
    },
    {
        "number": 4409,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    res = []\n    for i in range(n-1):\n        if a[i]!= a[i+1]:\n            if abs(a[i] - a[i+1]) == 1:\n                if abs(a[i] - a[i+2]) == 1:\n                    res.append((1, i, i+2))\n                else:\n                    res.append((1, i, i+1))\n            else:\n                if abs(a[i] - a[i+2]) == 1:\n                    res.append((2, i, i+2))\n                else:\n                    res.append((2, i, i+1))\n    print(len(res))\n    for op in res:\n        print(op[0], op[1]+1, op[2]+1)"
    },
    {
        "number": 4410,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        # Initialize a list to store the distance between each pair of occupied tables\n        distance = [0] * n\n        for i in range(1, n):\n            distance[i] = abs(i - distance[i-1])\n        # Initialize a list to store the number of occupied tables at each position\n        count = [0] * n\n        for i in range(n):\n            if s[i] == '1':\n                count[i] = 1\n                # Update the distance between each pair of occupied tables at position i\n                for j in range(max(i-k, 0), min(i+k+1, n)):\n                    if s[j] == '1':\n                        distance[j] = min(distance[j], i-j)\n        # Find the maximum number of free tables that can be taken so as not to violate the rules of the restaurant\n        ans = 0\n        for i in range(n):\n            if s[i] == '0':\n                # Check if the current table can be taken without violating the rules of the restaurant\n                can_take = True\n                for j in range(max(i-k, 0), min(i+k+1, n)):\n                    if s[j] == '1':\n                        if abs(i-j) <= k and distance[j] <= k:\n                            can_take = False\n                            break\n                if can_take:\n                    ans += 1\n        print(ans)\n\nsolution(stdin=open(\"input.txt\", \"r\"))"
    },
    {
        "number": 4410,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        if \"1\" not in s or s.count(\"1\") == 1:\n            print(0)\n            continue\n        ans = 0\n        for j in range(n):\n            if s[j] == \"1\":\n                left = j - k\n                right = j + k\n                if left < 0:\n                    left = 0\n                if right >= n:\n                    right = n - 1\n                for x in range(left, right+1):\n                    if s[x] == \"1\":\n                        ans += 1\n                        break\n        print(ans)"
    },
    {
        "number": 4410,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4410,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        count = 0\n        for i in range(n):\n            if s[i] == '0':\n                count += 1\n                j = i - k\n                while j <= i + k and j < n:\n                    if s[j] == '1':\n                        count -= 1\n                        break\n                    j += 1\n        print(count)\n\nsolution(\"\"\"\n6\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n\"\"\")"
    },
    {
        "number": 4410,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4410,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, k = map(int, lines[0].split())\n    s = lines[1]\n    \n    free_tables = 0\n    for i in range(n):\n        if s[i] == \"0\":\n            free_tables += 1\n            for j in range(max(i-k, 0), min(i+k+1, n)):\n                if s[j] == \"1\":\n                    break\n            else:\n                free_tables -= 1\n    \n    return str(free_tables)"
    },
    {
        "number": 4410,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n, k = map(int, lines[i*2-1].split())\n        s = lines[i*2]\n        count = 0\n        for j in range(n):\n            if s[j] == '1':\n                continue\n            valid = True\n            for x in range(j-k, j+k+1):\n                if x < 0 or x >= n:\n                    continue\n                if s[x] == '1':\n                    valid = False\n                    break\n            if valid:\n                count += 1\n        print(count)"
    },
    {
        "number": 4410,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    testcases = int(stdin.readline().strip())\n    for i in range(testcases):\n        n, k = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        cnt = 0\n        for i in range(n):\n            if s[i] == '0':\n                cnt += 1\n                for j in range(max(0, i-k), min(n, i+k+1)):\n                    if j!= i and s[j] == '1':\n                        cnt = 0\n                        break\n                if cnt == 0:\n                    break\n        print(cnt)\n"
    },
    {
        "number": 4410,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    t = int(lines[0])\n    for i in range(1, t * 3, 3):\n        n, k = map(int, lines[i].split())\n        s = lines[i + 1]\n        c = 0\n        for j in range(n):\n            if s[j] == \"0\":\n                if any(s[j - k:j] + s[j + 1:j + k + 1] == \"111\" for j in range(n)):\n                    c += 1\n        print(c)\n"
    },
    {
        "number": 4410,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t * 4, 4):\n        n, k = map(int, lines[i].split())\n        s = lines[i+1]\n        count = 0\n        for j in range(n):\n            if s[j] == '0':\n                count += 1\n                for r in range(max(j - k, 0), min(j + k + 1, n)):\n                    if s[r] == '1':\n                        count -= 1\n                        break\n        print(count)\n    return ''"
    },
    {
        "number": 4411,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n    segments.sort()\n    bad_points = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            if segments[j][0] <= segments[i][0] <= segments[j][1]:\n                bad_points.add(segments[i][0])\n            if segments[j][0] <= segments[i][1] <= segments[j][1]:\n                bad_points.add(segments[i][1])\n    if len(bad_points) == 0:\n        return '0\\n'\n    else:\n        m = len(bad_points)\n        result = set()\n        for i in range(n):\n            if segments[i][0] in bad_points or segments[i][1] in bad_points:\n                continue\n            result.add(i)\n            if len(result) == m:\n                break\n        return f'{m}\\n{\" \".join(map(str, result))}\\n'"
    },
    {
        "number": 4411,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split()[i*2:i*2+2])\n        segments.append((l, r, i))\n    segments.sort(key=lambda x: x[0])\n\n    bad_points = []\n    for i in range(1, n+1):\n        count = 1\n        for l, r, j in segments:\n            if l <= i <= r:\n                count += 1\n        if count > k:\n            bad_points.append(i)\n\n    min_segments = len(segments)\n    for i in range(len(bad_points)-1):\n        if segments[bad_points[i]-1][0] > segments[bad_points[i]][1] or segments[bad_points[i]+1][1] < segments[bad_points[i]][0]:\n            min_segments -= 1\n    min_segments -= len(bad_points)\n\n    output = [min_segments]\n    if min_segments > 0:\n        output.append(bad_points)\n    return''.join(map(str, output))"
    },
    {
        "number": 4411,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    segments = [tuple(map(int, stdin.readline().split())) for i in range(n)]\n    segments.sort(key=lambda x: x[1]-x[0])\n    ans = 0\n    for i in range(n):\n        j = i+1\n        while j < n and segments[j][0] <= segments[i][1]:\n            j += 1\n        ans += (j-i-1) - min(j-i-1, k)\n    print(ans)\n    print(\" \".join(map(str, [i+1 for i in range(n) if segments[i][0]!= segments[i][1] and len(list(filter(lambda x: x[0] < segments[i][0] and x[1] > segments[i][1], segments))) <= k])))"
    },
    {
        "number": 4411,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split()[0:2])\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1])\n    bad_points = set()\n    for i in range(n):\n        l, r = segments[i]\n        for j in range(l, r+1):\n            count = 0\n            for segment in segments:\n                if l <= segment[0] <= r or l <= segment[1] <= r:\n                    count += 1\n            if count > k:\n                bad_points.add(j)\n    if len(bad_points) == 0:\n        return \"0\\n\"\n    else:\n        m = len(bad_points)\n        output = \"1\\n\"\n        for i in range(n):\n            l, r = segments[i]\n            if l <= min(bad_points) <= r:\n                output += str(i+1) + \" \"\n                segments.remove(segments[i])\n        return output[:-1] + \"\\n\""
    },
    {
        "number": 4411,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    segments = [list(map(int, stdin.readline().split())) for _ in range(n)]\n\n    segments.sort(key=lambda x: x[0])\n\n    bad_points = set()\n    count = 0\n    for i in range(n):\n        left, right = segments[i]\n        if left in bad_points or right in bad_points:\n            continue\n        count += 1\n        for j in range(left, right+1):\n            bad_points.add(j)\n        if count > k:\n            count -= 1\n            for j in range(left, right+1):\n                bad_points.remove(j)\n                if len(bad_points) < k:\n                    return \"impossible\"\n                if j in bad_points:\n                    break\n            else:\n                return \"impossible\"\n\n    return count,''.join(map(str, sorted(bad_points)))\n\nprint(solution(input()))"
    },
    {
        "number": 4411,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    segments = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    bad = [0] * (2*k+1)\n\n    # mark all bad points\n    for i in range(n):\n        for j in range(segments[i][0], segments[i][1]+1):\n            if bad[j-segments[i][0]] == 0:\n                bad[j-segments[i][0]] = 1\n            else:\n                bad[j-segments[i][0]] += 1\n\n    # find minimum number of segments to remove\n    count = 0\n    for i in range(len(bad)):\n        if bad[i] > k:\n            count += 1\n\n    if count == 0:\n        return \"0\\n\"\n\n    # find indices of segments to remove\n    indices = []\n    for i in range(len(bad)):\n        if bad[i] > k:\n            indices.append(i+1)\n\n    return f\"{count}\\n{len(indices)} {' '.join(map(str, indices))}\\n\""
    },
    {
        "number": 4411,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l, r))\n    segments.sort()\n    m = 0\n    used = [False] * n\n    for i in range(n):\n        if used[i]:\n            continue\n        if i > 0 and segments[i][0] == segments[i-1][0]:\n            continue\n        if i < n-1 and segments[i][1] == segments[i+1][0]:\n            continue\n        covered = 1\n        for j in range(i+1, n):\n            if segments[i][0] <= segments[j][0] and segments[j][0] <= segments[i][1]:\n                covered += 1\n            elif segments[j][0] <= segments[i][0] and segments[i][0] <= segments[j][1]:\n                covered += 1\n        if covered > k:\n            m += 1\n            for j in range(i, -1, -1):\n                if used[j]:\n                    continue\n                if j > 0 and segments[j][0] == segments[j-1][0]:\n                    continue\n                if j < n-1 and segments[j][1] == segments[j+1][0]:\n                    continue\n                used[j] = True\n                break\n    return f\"{m}\\n{' '.join(map(str, [i+1 for i in range(n) if not used[i]]))}\\n\"\n\nprint(solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\"))\nprint(solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\"))\nprint(solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\"))"
    },
    {
        "number": 4411,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split()[i*2:i*2+2])\n        segments.append((l, r))\n    \n    segments.sort(key=lambda x: x[0])\n    \n    count = 0\n    for i in range(n):\n        l, r = segments[i]\n        if l == r:\n            count += 1\n        else:\n            j = i + 1\n            while j < n and segments[j][0] <= r:\n                j += 1\n            if j - i - 1 > k:\n                return \"Impossible\"\n            count += j - i - 1\n    \n    result = 0\n    bad = 0\n    for i in range(1, n):\n        if segments[i][0] < segments[i-1][1] and segments[i][1] < segments[i-1][1]:\n            if segments[i][0] > segments[i-1][0]:\n                result += 1\n            else:\n                result += 2\n            bad += 1\n    \n    return \"{}\\n{}\".format(result, \" \".join(map(str, sorted([i+1 for i in range(n) if segments[i][0] == segments[i][1]]))))"
    },
    {
        "number": 4411,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[0])\n\n    points = {}\n    for i, segment in enumerate(segments):\n        l, r = segment\n        for j in range(l, r+1):\n            if j in points:\n                points[j].add(i)\n            else:\n                points[j] = {i}\n\n    bad_points = [point for point, covers in points.items() if len(covers) > k]\n    if not bad_points:\n        return '0\\n'\n\n    # get the minimum number of segments to remove\n    m = n\n    for point in bad_points:\n        covers = points[point]\n        if len(covers) == k+1:\n            for i in covers:\n                m -= 1\n                for j in range(i+1, n):\n                    if segments[j][0] <= segments[i][1]:\n                        break\n                    if segments[j][1] < segments[i][1]:\n                        segments[i], segments[j] = segments[j], segments[i]\n                        m -= 1\n\n    # print the minimum number of segments to remove and the indices of segments to remove\n    return f'{m}\\n{\" \".join(map(str, sorted(range(n), key=lambda x: segments[x])))}\\n'"
    },
    {
        "number": 4411,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n\n    bad_points = set()\n    for i in range(1, 2 * k + 2):\n        cnt = 0\n        for l, r in segments:\n            if l <= i <= r:\n                cnt += 1\n        if cnt > k:\n            bad_points.add(i)\n\n    res = []\n    for i in range(n):\n        cnt = 0\n        for j in range(segments[i][0], segments[i][1] + 1):\n            if j in bad_points:\n                cnt += 1\n        if cnt == 0:\n            res.append(i)\n\n    if len(res) == 0:\n        return \"0\\n\"\n\n    return \"{}\\n{}\\n\".format(len(res), \" \".join(map(str, res)))"
    },
    {
        "number": 4412,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    q = int(lines[0])\n    for i in range(1, q+1):\n        n = int(lines[i*2-1])\n        a = list(map(int, lines[i*2].split()))\n        a = sorted(a, reverse=True)\n        if n == 1:\n            print(a[0])\n        elif n == 2:\n            if a[0] == a[1]:\n                print(a[0]*2)\n            else:\n                print(a[0]+a[1])\n        elif n == 3:\n            if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n                print(a[0]*3)\n            else:\n                print(a[0]+a[1]+a[2])\n        else:\n            ans = 0\n            if a[0] <= a[1]:\n                ans = max(ans, a[0]+a[1]+a[2])\n            if a[0] <= a[2]:\n                ans = max(ans, a[0]+a[2]+a[1])\n            if a[1] <= a[2]:\n                ans = max(ans, a[1]+a[2]+a[0])\n            for i in range(3, n):\n                if a[i] == a[i-1] or a[i] == a[i-2] or a[i] == a[i-3]:\n                    ans = max(ans, a[i]+a[i-1]+a[i-2]+a[i-3])\n                else:\n                    ans = max(ans, a[i]+a[i-1]+a[i-2]+a[i-3])\n            print(ans)\n    return \"\""
    },
    {
        "number": 4412,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, a):\n        a = sorted(a, reverse=True)\n        s = sum(a)\n        res = []\n        for i in range(n-2):\n            for j in range(i+1, n-1):\n                for k in range(j+1, n):\n                    if a[i] % a[j] == 0 and a[j] % a[k] == 0 and a[k] % a[i] == 0:\n                        continue\n                    res.append(a[i] + a[j] + a[k])\n        return max(res)\n\n    q = int(stdin.readline())\n    for _ in range(q):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        print(solve(n, a))\n    return \"\""
    },
    {
        "number": 4412,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    q = int(lines[0])\n    for i in range(1, q+1):\n        n = int(lines[i*2-1])\n        a = list(map(int, lines[i*2].split()))\n        a.sort()\n        ans = 0\n        for j in range(3):\n            if j == 2:\n                ans += a[j]\n            else:\n                for k in range(j+1, 3):\n                    if a[j] % a[k]!= 0:\n                        ans += a[j] + a[k]\n                        break\n        print(ans)\n    return \"\""
    },
    {
        "number": 4412,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    q = int(stdin.readline())\n    for i in range(q):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n\n        # sort the problems by descending prettiness\n        a.sort(reverse=True)\n\n        # initialize variables\n        max_prettiness = 0\n        for j in range(n):\n            # check if the prettiness of the current problem is divisible by any of the previous problems\n            if j > 0 and a[j] % a[j-1] == 0:\n                continue\n            if j > 1 and a[j] % a[j-2] == 0:\n                continue\n            if j > 2 and a[j] % a[j-3] == 0:\n                continue\n            # if the current problem is not divisible by any of the previous problems, add it to the contest\n            max_prettiness += a[j]\n\n        # print the maximum possible cumulative prettiness of the contest\n        print(max_prettiness)\n\n    return \"\""
    },
    {
        "number": 4412,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline())\n\n    for i in range(queries):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n\n        a.sort(reverse=True)\n\n        answer = 0\n\n        for j in range(len(a)):\n            if j == 0:\n                answer = a[j]\n            elif j == 1:\n                answer = max(answer, a[j])\n            elif j == 2:\n                answer = max(answer, a[j])\n            else:\n                if a[j] % a[j-1]!= 0 and a[j] % a[j-2]!= 0 and a[j] % a[j-3]!= 0:\n                    answer += a[j]\n\n        print(answer)"
    },
    {
        "number": 4412,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    queries = stdin.split('\\n')\n    for i in range(1, len(queries)):\n        query = queries[i].strip()\n        n = int(query.split()[0])\n        a = list(map(int, query.split()[1:]))\n        print(get_max_prettiness(n, a))\n\n\ndef"
    },
    {
        "number": 4412,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        m = int(stdin.readline().strip())\n        if m == 3:\n            max_sum = sum(sorted(a, reverse=True)[:3])\n        else:\n            max_sum = sum(sorted(a, reverse=True)[:m])\n        print(max_sum)"
    },
    {
        "number": 4412,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin.readline())):\n        n = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().split()]\n        a.sort()\n        count = 0\n        ans = 0\n        for j in range(n):\n            ans += a[j]\n            if count < 3 and j > 0:\n                if a[j] % a[j-1]!= 0 and a[j] % a[j-2]!= 0:\n                    count += 1\n                    ans += a[j]\n            if count == 3:\n                break\n        print(ans)\n    return \"\"\n\nimport io\n\nstdin = io.StringIO(\"\"\"\n3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6\n\"\"\".strip())\n\nprint(solution(stdin)) # Output: 30 31 10"
    },
    {
        "number": 4412,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        n = int(stdin.readline().strip())\n        a = [int(x) for x in stdin.readline().strip().split()]\n        a.sort(reverse=True)\n        max_sum = max(a[0]+a[1]+a[2], a[0]+a[1]+a[3], a[0]+a[2]+a[3])\n        max_sum = max(max_sum, a[1]+a[2]+a[3])\n        print(max_sum)\n    return \"\""
    },
    {
        "number": 4412,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for query in range(queries):\n        n = int(stdin.readline().strip())\n        a = [int(x) for x in stdin.readline().strip().split()]\n        a.sort(reverse=True)\n        ans = 0\n        for i in range(n):\n            ans += a[i]\n            for j in range(i):\n                if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                    break\n            else:\n                for j in range(i+1, n):\n                    if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                        break\n                else:\n                    return str(ans)\n        return str(ans)"
    },
    {
        "number": 4413,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    q = int(lines[0])\n    for i in range(1, q+1):\n        n = int(lines[i*2-1])\n        a = list(map(int, lines[i*2].split()))\n        if n == 1:\n            print(1)\n            continue\n        result = 0\n        for j in range(n):\n            for k in range(j+1, n):\n                if abs(a[j] - a[k]) == 1:\n                    break\n            else:\n                result += 1\n        print(result)\n    return \"\""
    },
    {
        "number": 4413,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    q = int(input[0])\n    input = input[1:]\n    for i in range(q):\n        n = int(input[0])\n        a = list(map(int, input[1].split()))\n        input = input[2:]\n        if n == 1:\n            print(1)\n            continue\n        teams = set()\n        for j in range(n):\n            for k in range(j+1, n):\n                if abs(a[j] - a[k]) > 1:\n                    teams.add(tuple(sorted((j, k))))\n        print(len(teams))"
    },
    {
        "number": 4413,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        diff_count = 0\n        for j in range(n):\n            for k in range(j+1, n):\n                if abs(a[j]-a[k]) == 1:\n                    diff_count += 1\n                    break\n        print(diff_count)\n    return \"\""
    },
    {
        "number": 4413,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    for i in range(1, q+1):\n        n = int(lines[i*2-1])\n        skills = [int(x) for x in lines[i*2].split()]\n        count = 1\n        for j in range(n):\n            for k in range(j+1, n):\n                if abs(skills[j]-skills[k]) == 1:\n                    break\n            else:\n                count += 1\n        print(count)\n    return \"\""
    },
    {
        "number": 4413,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        ans = 1\n        for i in range(n-1):\n            for j in range(i+1, n):\n                if abs(a[i]-a[j])==1:\n                    ans += 1\n                    break\n        print(ans)\n\nwith open(\"input.txt\", \"r\") as f:\n    solution(f)"
    },
    {
        "number": 4413,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    q = int(lines[0])\n    for i in range(1, q+1):\n        n = int(lines[i*2-1])\n        a = [int(j) for j in lines[i*2].split()]\n        teams = set()\n        for i in range(n):\n            for j in range(i+1, n):\n                if abs(a[i]-a[j])==1:\n                    teams.add(frozenset([i,j]))\n        print(len(teams))\n    return \"\""
    },
    {
        "number": 4413,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline())\n    for _ in range(queries):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        team_count = 1\n        for i in range(1, n):\n            if a[i] - a[i-1] > 1:\n                team_count += 1\n        print(team_count)\n    return \"\""
    },
    {
        "number": 4413,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        n = int(stdin.readline().strip())\n        skills = list(map(int, stdin.readline().strip().split()))\n        teams = [[skills[0]]]\n        for j in range(1, n):\n            found = False\n            for k in range(len(teams)):\n                if abs(skills[j] - teams[k][-1]) > 1:\n                    teams[k].append(skills[j])\n                    found = True\n                    break\n            if not found:\n                teams.append([skills[j]])\n        print(len(teams))\n    return \"\""
    },
    {
        "number": 4413,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        teams = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if abs(a[i]-a[j]) == 1:\n                    teams += 1\n                    break\n        print(teams)\n    return ''"
    },
    {
        "number": 4413,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        stdin.readline()\n        if n == 1:\n            print(1)\n            continue\n        a_set = set(a)\n        if len(a_set) == n:\n            print(n)\n            continue\n        a_min = min(a)\n        a_max = max(a)\n        if a_max - a_min > 1:\n            print(2)\n            continue\n        else:\n            a_set.remove(a_min)\n            a_set.remove(a_max)\n            if len(a_set) == 1:\n                print(2)\n            else:\n                print(1)\n    return \"\""
    },
    {
        "number": 4414,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline().strip())\n    for i in range(cases):\n        a, b, n, S = map(int, stdin.readline().strip().split())\n        if (S % n == 0) and (S // n <= a) and (S % 2 == b):\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4414,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n_test_cases = int(lines[0])\n    results = []\n    for i in range(1, n_test_cases+1):\n        a, b, n, S = map(int, lines[i].split())\n        if a*n + b == S:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    return '\\n'.join(results)"
    },
    {
        "number": 4414,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    for i in range(1, q+1):\n        a, b, n, S = map(int, lines[i].split())\n        if a*n >= S:\n            print('YES')\n        elif b*1 >= S:\n            print('YES')\n        else:\n            print('NO')\n    return ''"
    },
    {
        "number": 4414,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    q = int(lines[0])\n    for i in range(1, q+1):\n        a, b, n, S = map(int, lines[i].split())\n        if a == 0 and S >= b:\n            return \"YES\"\n        elif S == 0 and a == 0:\n            return \"YES\"\n        elif S < 0:\n            return \"NO\"\n        elif a*n >= S:\n            return \"YES\"\n        elif (a*n + b) >= S:\n            return \"YES\"\n        else:\n            return \"NO\"\n    return \"NO\""
    },
    {
        "number": 4414,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for i in range(q):\n        a, b, n, S = map(int, stdin.readline().split())\n        x = a // n\n        y = b // 1\n        if x*n + y*1 == S:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nstdin = \"\"\"4\n1 2 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18\"\"\"\n\nsolution(stdin) # Output: YES\\nNO\\nNO\\nYES"
    },
    {
        "number": 4414,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    for i in range(1, q+1):\n        a, b, n, S = map(int, lines[i].split())\n        if (a + b) < S:\n            print('NO')\n        elif (a*n + b) == S:\n            print('YES')\n        else:\n            print('NO')\n    return ''"
    },
    {
        "number": 4414,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    for i in range(1, q+1):\n        a, b, n, S = map(int, lines[i].split())\n        if S % 2 == 1 or n % 2 == 1:\n            print('NO')\n        elif a*n+b*1!= S:\n            print('NO')\n        else:\n            x = S//n\n            y = S//2\n            if x > a or y > b:\n                print('NO')\n            else:\n                print('YES')"
    },
    {
        "number": 4414,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    cases = int(lines[0])\n    for i in range(1, cases+1):\n        a, b, n, S = map(int, lines[i].split())\n        if (n*a) + b <= S:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 4414,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    q = int(lines[0])\n    for i in range(1, q+1):\n        a, b, n, S = map(int, lines[i].split())\n        if a*n+b == S:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4414,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        a, b, n, S = map(int, stdin.readline().strip().split())\n        if (a + b) * n >= S:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n\nwith open('test.txt', 'r') as f:\n    solution(f)"
    },
    {
        "number": 4415,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    if all(a[i] >= a[i+1] for i in range(len(a)-1)):\n        return \"NO\"\n    if all(a[i] <= a[i+1] for i in range(len(a)-1)):\n        return \"NO\"\n    inc_count = 0\n    dec_count = 0\n    for i in range(len(a)-1):\n        if a[i] < a[i+1]:\n            inc_count += 1\n            inc_start = i\n        if a[i] > a[i+1]:\n            dec_count += 1\n            dec_start = i\n    print(\"YES\")\n    print(inc_count)\n    if inc_count > 0:\n        print(\" \".join(map(str, a[inc_start:inc_start+inc_count])))\n    else:\n        print()\n    print(dec_count)\n    if dec_count > 0:\n        print(\" \".join(map(str, a[dec_start:dec_start+dec_count][::-1])))\n    else:\n        print()\n    return \"\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n    \n    # Check if the input is valid\n    if len(set(a)) < len(a):\n        return \"NO\\n\"\n    \n    # Split the sequence into increasing and decreasing parts\n    i, j = 0, n-1\n    while i < j and a[i] < a[i+1]:\n        i += 1\n    while i < j and a[j] > a[j-1]:\n        j -= 1\n    \n    if i >= j:\n        return \"NO\\n\"\n    \n    # Print the result\n    n_i = i+1\n    inc = a[:i+1]\n    n_d = n - i - 1\n    dec = a[i+1:]\n    \n    return \"YES\\n{}\\n{}\\n{}\\n{}\\n{}\\n\".format(n_i, \" \".join(map(str, inc)), n_d, \" \".join(map(str, dec)), \" \".join(map(str, sorted(a))))"
    },
    {
        "number": 4415,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    a = [int(x) for x in lines[1].split()]\n    if len(set(a))!= len(a):\n        return 'NO'\n    inc_count = 0\n    dec_count = 0\n    for i in range(n):\n        if i == 0 or a[i] > a[i-1]:\n            inc_count += 1\n        elif i == n-1 or a[i] < a[i+1]:\n            dec_count += 1\n        else:\n            return 'NO'\n    if inc_count == 0 and dec_count == 0:\n        inc_count = 1\n        dec_count = 1\n    if inc_count == 1 and dec_count == 0:\n        inc_count = 2\n        dec_count = 0\n    if inc_count == 0 and dec_count == 1:\n        inc_count = 0\n        dec_count = 2\n    if inc_count!= dec_count:\n        return 'NO'\n    if inc_count == n or dec_count == n:\n        return 'YES\\n1\\n{}\\n'.format(a[0])\n    if inc_count == n-1:\n        return 'YES\\n1\\n{}\\n'.format(a[0])\n    inc_seq = [a[i] for i in range(n) if i == 0 or a[i] > a[i-1]]\n    dec_seq = [a[i] for i in range(n) if i == n-1 or a[i] < a[i+1]]\n    if len(inc_seq) == 0:\n        inc_seq = [a[0]]\n    if len(dec_seq) == 0:\n        dec_seq = [a[n-1]]\n    if len(inc_seq) == 0 or len(dec_seq) == 0:\n        return 'NO'\n    return 'YES\\n{}\\n{}\\n{}\\n{}\\n{}\\n'.format(len(inc_seq),''.join([str(x) for x in inc_seq]), len(dec_seq),''.join([str(x) for x in dec_seq]),''.join([str(x) for x in a]))"
    },
    {
        "number": 4415,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    seq = list(map(int, stdin.strip().split()))\n    n = len(seq)\n    inc = []\n    dec = []\n    for i in range(n):\n        if seq[i] < seq[i-1]:\n            return \"NO\"\n        if seq[i] > seq[i-1]:\n            inc.append(seq[i])\n    for i in range(n-1, -1, -1):\n        if seq[i] > seq[i+1]:\n            return \"NO\"\n        if seq[i] < seq[i+1]:\n            dec.append(seq[i])\n    if len(inc) + len(dec)!= n:\n        return \"NO\"\n    inc.sort()\n    dec.sort(reverse=True)\n    return \"YES\\n{}\\n{}\\n{}\\n{}\\n{}\".format(len(inc), \" \".join(map(str, inc)), len(dec), \" \".join(map(str, dec)), \" \".join(map(str, seq)))\n\nprint(solution(\"7 2 7 3 3 1 4\")) # Output: YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\nprint(solution(\"5 4 3 1 5 3\")) # Output: YES\\n1\\n3\\n4\\n5 4 3 1\\n\nprint(solution(\"5 1 1 2 1 2\")) # Output: NO\\n\nprint(solution(\"5 0 1 2 3 4\")) # Output: YES\\n0\\n\\n5 4 3 2 1\\n\nprint(solution(\"5 4 3 2 1 0\")) # Output: NO\\n"
    },
    {
        "number": 4415,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    inc = []\n    dec = []\n    for i in range(n):\n        if i == 0 or a[i] > a[i-1]:\n            inc.append(a[i])\n        elif a[i] < a[i-1]:\n            dec.append(a[i])\n    if len(inc) == 0 or len(dec) == 0:\n        return \"NO\"\n    if len(inc) == 1 and len(dec) == 1:\n        if a.count(a[0]) == 1:\n            inc = [a[0]]\n            dec = []\n        else:\n            inc = []\n            dec = [a[0]]\n    else:\n        inc = sorted(inc)\n        dec = sorted(dec, reverse=True)\n    n_i = len(inc)\n    n_d = len(dec)\n    if n_i + n_d!= n or sorted(inc + dec)!= sorted(a):\n        return \"NO\"\n    return \"YES\\n{}\\n{}\\n{}\\n{}\\n{}\\n\".format(n_i, \" \".join(map(str, inc)), n_d, \" \".join(map(str, dec)))\n"
    },
    {
        "number": 4415,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given two integer sequences, one strictly increasing and the other strictly decreasing, merge them and shuffle them,\n    and then find any two suitable initial sequences.\n    \"\"\"\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Find the positions of strictly increasing and strictly decreasing elements\n    increasing_pos = [i for i in range(n) if i == 0 or a[i] > a[i-1]]\n    decreasing_pos = [i for i in range(n) if i == 0 or a[i] < a[i-1]]\n\n    # If there are no strictly increasing or strictly decreasing elements, return \"NO\"\n    if len(increasing_pos) == 0 or len(decreasing_pos) == 0:\n        return \"NO\\n\"\n\n    # Calculate the number of elements in the increasing and decreasing sequences\n    n_i = len(increasing_pos)\n    n_d = len(decreasing_pos)\n\n    # Build the increasing and decreasing sequences\n    inc = [a[increasing_pos[i]] for i in range(n_i)]\n    dec = [a[decreasing_pos[i]] for i in range(n_d)]\n\n    # Sort the increasing and decreasing sequences\n    inc.sort()\n    dec.sort(reverse=True)\n\n    # Combine the increasing and decreasing sequences\n    a_comb = inc + dec\n\n    # Check if the combined sequence is a permutation of the original sequence\n    if sorted(a_comb)!= sorted(a):\n        return \"NO\\n\"\n\n    # Print the result\n    result = \"YES\\n\"\n    result += str(n_i) + \"\\n\"\n    result += \" \".join(map(str, inc)) + \"\\n\"\n    result += str(n_d) + \"\\n\"\n    result += \" \".join(map(str, dec)) + \"\\n\"\n\n    return result"
    },
    {
        "number": 4415,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    increasing = []\n    decreasing = []\n    for i in range(n):\n        if i == 0:\n            if a[i] < a[i+1]:\n                increasing.append(a[i])\n            else:\n                decreasing.append(a[i])\n        elif i == n-1:\n            if a[i] > a[i-1]:\n                decreasing.append(a[i])\n            else:\n                increasing.append(a[i])\n        else:\n            if a[i] > a[i-1] and a[i] < a[i+1]:\n                increasing.append(a[i])\n            elif a[i] < a[i-1] and a[i] > a[i+1]:\n                decreasing.append(a[i])\n            else:\n                return \"NO\"\n    increasing.sort()\n    decreasing.sort(reverse=True)\n    if len(increasing) + len(decreasing)!= n:\n        return \"NO\"\n    for i in range(len(a)):\n        if a[i]!= increasing[i % len(increasing)] and a[i]!= decreasing[i % len(decreasing)]:\n            return \"NO\"\n    return \"YES\\n{}\\n{}\\n{}\\n{}\".format(len(increasing), \" \".join(map(str, increasing)), len(decreasing), \" \".join(map(str, decreasing)))\n"
    },
    {
        "number": 4415,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = [int(x) for x in lines[1].split()]\n    \n    if n == 0 or n == 1:\n        return \"YES\\n0\\n\\n\"\n    \n    inc = []\n    dec = []\n    \n    for x in a:\n        if len(inc) == 0 or x > inc[-1]:\n            inc.append(x)\n        else:\n            while len(dec) > 0 and x < dec[-1]:\n                dec.pop()\n            dec.append(x)\n    \n    if len(inc) + len(dec)!= n:\n        return \"NO\\n\"\n    \n    if len(inc) == 0 or len(dec) == 0:\n        return \"YES\\n0\\n\\n\"\n    \n    return \"YES\\n{}\\n{}\\n{}\\n{}\\n\".format(len(inc),''.join([str(x) for x in inc]), len(dec),''.join([str(x) for x in dec]))\n    \n"
    },
    {
        "number": 4415,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # check if possible\n    if all(a[i] < a[i+1] for i in range(n-1)) or all(a[i] > a[i+1] for i in range(n-1)):\n        return \"NO\"\n\n    # find increasing and decreasing sequences\n    increasing = []\n    decreasing = []\n    for i in range(n):\n        if i == 0 or a[i] > a[i-1]:\n            increasing.append(a[i])\n        if i == n-1 or a[i] < a[i+1]:\n            decreasing.append(a[i])\n\n    # print output\n    print(\"YES\")\n    print(len(increasing))\n    print(\" \".join(map(str, increasing)))\n    print(len(decreasing))\n    print(\" \".join(map(str, decreasing)))\n\n    # check if output is correct\n    if len(increasing) + len(decreasing)!= n or sorted(increasing + decreasing)!= sorted(a):\n        return \"WRONG ANSWER\"\n\n    return \"OK\""
    },
    {
        "number": 4415,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    inc = []\n    dec = []\n    if n == 1:\n        if a[0] > 0:\n            return \"YES\\n0\\n\"\n        else:\n            return \"NO\"\n    for i in range(1, n):\n        if a[i] < a[i-1]:\n            return \"NO\"\n        if a[i] > a[i-1]:\n            inc.append(a[i])\n        else:\n            dec.append(a[i])\n    if len(inc) > len(dec):\n        inc = inc[:-1]\n        n_i = len(inc)\n        n_d = len(dec)\n    elif len(dec) > len(inc):\n        dec = dec[:-1]\n        n_d = len(dec)\n        n_i = len(inc)\n    else:\n        n_i = len(inc)\n        n_d = len(dec)\n    inc.sort()\n    dec.sort(reverse=True)\n    return \"YES\\n{}\\n{}\\n{}\\n{}\\n\".format(n_i, \" \".join(map(str, inc)), n_d, \" \".join(map(str, dec)))\n\nprint(solution(\"7 2 7 3 3 1 4\\n\")) # YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\nprint(solution(\"4 3 1 5 3\\n\")) # YES\\n1\\n3\\n4\\n5 4 3 1\\n\nprint(solution(\"1 1 2 1 2\\n\")) # NO\\n\nprint(solution(\"0 1 2 3 4\\n\")) # YES\\n0\\n"
    },
    {
        "number": 4416,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    books = []\n    for i in range(n):\n        t, a, b = map(int, stdin.split()[0:3])\n        books.append((t, a, b))\n    books.sort(key=lambda x: x[1] + x[2])\n    dp = [[float('inf') for _ in range(1 << n)] for _ in range(k+1)]\n    dp[0][0] = 0\n    for i in range(k+1):\n        for j in range(1 << n):\n            if dp[i][j]!= float('inf'):\n                for l in range(n):\n                    if (j & (1 << l)) == 0:\n                        dp[i+1][j|(1<<l)] = min(dp[i+1][j|(1<<l)], dp[i][j] + books[l][0])\n    for i in range(1 << n):\n        if sum([1 for j in range(n) if (i & (1 << j))!= 0 and (books[j][1] + books[j][2]) < k]) == k:\n            if dp[-1][i]!= float('inf'):\n                return str(dp[-1][i])\n    return '-1'"
    },
    {
        "number": 4416,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = list(map(int, lines[0].split()))\n    books = []\n    for i in range(1, n+1):\n        t, a, b = list(map(int, lines[i].split()))\n        books.append((t, a, b))\n\n    # sort books by time\n    books = sorted(books, key=lambda x: x[0])\n\n    # find suitable set\n    alice_sum = 0\n    bob_sum = 0\n    alice_count = 0\n    bob_count = 0\n    total_time = 0\n    for i in range(n):\n        if alice_sum >= k and bob_sum >= k:\n            break\n        if alice_sum < k and books[i][1]:\n            alice_sum += books[i][0]\n            alice_count += 1\n            total_time += books[i][0]\n        if bob_sum < k and books[i][2]:\n            bob_sum += books[i][0]\n            bob_count += 1\n            total_time += books[i][0]\n\n    if alice_sum >= k and bob_sum >= k:\n        return str(total_time)\n    else:\n        return '-1'"
    },
    {
        "number": 4416,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = []\n    for _ in range(n):\n        t, a, b = map(int, stdin.split())\n        books.append((t, a, b))\n    books.sort(key=lambda x: (-x[1], -x[2], -x[0]))\n    dp = [[float('inf') for _ in range(2 ** n)] for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(n + 1):\n        for mask in range(2 ** n):\n            if dp[i][mask] == float('inf'):\n                continue\n            for j in range(n):\n                if (mask >> j) & 1:\n                    continue\n                if dp[i][mask] + books[j][0] < dp[i + 1][mask | (1 << j)]:\n                    dp[i + 1][mask | (1 << j)] = dp[i][mask] + books[j][0]\n    if dp[n][(1 << n) - 1] == float('inf'):\n        return '-1'\n    return str(dp[n][(1 << n) - 1])"
    },
    {
        "number": 4416,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = []\n    for i in range(n):\n        t, a, b = map(int, stdin.split())\n        books.append((t, a, b))\n    books = sorted(books, key=lambda x: x[1])\n    alice_books = [b for b in books if b[1]]\n    bob_books = [b for b in books if b[2]]\n    alice_books = alice_books[:k]\n    bob_books = bob_books[:k]\n    if not alice_books or not bob_books:\n        return -1\n    total_time = sum(b[0] for b in alice_books + bob_books)\n    return total_time\n\nassert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\") == \"18\"\nassert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n\") == \"8\"\nassert solution(\"5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\\n\") == \"-1\""
    },
    {
        "number": 4416,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    n, k = map(int, stdin.readline().split())\n    books = []\n    for i in range(n):\n        t, a, b = map(int, stdin.readline().split())\n        books.append((t, a, b))\n    \n    # Initializing variables\n    max_time = sum(t for t, a, b in books)\n    min_set = [(0, []) for _ in range(k+1)]\n    max_set = [(0, []) for _ in range(k+1)]\n    \n    # Iterating over all possible subsets\n    for subset in combinations(range(n), k):\n        # Calculating total time for the subset\n        subset_time = sum(books[i][0] for i in subset)\n        # Updating minimum set\n        for i in range(k, 0, -1):\n            if subset_time < min_set[i][0]:\n                min_set[i] = (subset_time, subset)\n        # Updating maximum set\n        for i in range(k+1):\n            if subset_time > max_set[i][0]:\n                max_set[i] = (subset_time, subset)\n    \n    # Checking if minimum set satisfies the constraints\n    if all(books[i][1] == 1 for i in min_set[k][1]):\n        if all(books[i][2] == 1 for i in min_set[k][1]):\n            return str(min_set[k][0])\n    \n    # Checking if maximum set satisfies the constraints\n    if all(books[i][1] == 1 for i in max_set[k][1]):\n        if all(books[i][2] == 1 for i in max_set[k][1]):\n            return str(max_set[k][0])\n    \n    # If no solution exists\n    return \"-1\""
    },
    {
        "number": 4416,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = []\n    for i in range(n):\n        t, a, b = map(int, stdin.readline().split())\n        books.append((t, a, b))\n    books.sort(key=lambda x: x[0])\n    \n    # dp[i][j][k] - min time to read i books with j like from Alice and k like from Bob\n    dp = [[[float('inf')]*2 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # base cases\n    for i in range(n+1):\n        dp[i][0][0] = 0\n        dp[i][0][1] = 0\n        dp[i][1][0] = 0\n        dp[i][1][1] = sum(t for t, _, _ in books[:i])\n        \n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            for k in range(2):\n                # try all possible sets of books\n                for l in range(n):\n                    if l >= j:\n                        continue\n                    if books[l][1] == k:\n                        dp[i][j][k] = min(dp[i][j][k], dp[i-1][j-1][k] + books[l][0])\n                # try to add a new book from the other person\n                for l in range(n):\n                    if l >= j:\n                        continue\n                    if books[l][2] == k:\n                        dp[i][j][k] = min(dp[i][j][k], dp[i-1][j][k] + books[l][0])\n    if dp[n][k][0] == float('inf') or dp[n][k][1] == float('inf'):\n        return '-1'\n    return str(dp[n][k][0] + dp[n][k][1])\n    \n"
    },
    {
        "number": 4416,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    books = []\n    for i in range(n):\n        t, a, b = map(int, stdin.readline().strip().split())\n        books.append((t, a, b))\n    books.sort(key=lambda x: x[0])\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                dp[i][j] = books[i-1][0]\n            elif j == i+1:\n                dp[i][j] = books[i-1][0] + books[j-1][0]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + books[i-1][0]\n    if dp[n][n] < k*2:\n        return \"-1\"\n    else:\n        return str(dp[n][n])"
    },
    {
        "number": 4416,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = list(map(int, lines[0].split()))\n    books = []\n    for i in range(1, n+1):\n        t, a, b = list(map(int, lines[i].split()))\n        books.append((t, a, b))\n    books.sort(key=lambda x: x[0])\n    dp = [[float('inf')]*(n+1) for _ in range(k+1)]\n    dp[0][0] = 0\n    for i in range(1, k+1):\n        for j in range(i, n+1):\n            for m in range(j):\n                dp[i][j] = min(dp[i][j], dp[i-1][m]+books[j-1][0])\n                if dp[i][j] == dp[i-1][m]+books[j-1][0] and books[j-1][1] == 1 and books[j-1][2] == 0:\n                    dp[i][j] = float('inf')\n                    break\n            if dp[i][j] == float('inf'):\n                break\n    for i in range(k, n+1):\n        dp[i][i] = books[i-1][0]\n    for i in range(k, n+1):\n        for j in range(k, i):\n            dp[j][i] = dp[j][i-1]\n    ans = float('inf')\n    for i in range(k, n+1):\n        ans = min(ans, dp[k][i])\n    if ans == float('inf'):\n        return '-1'\n    return str(ans)"
    },
    {
        "number": 4416,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = []\n    for i in range(n):\n        t, a, b = map(int, stdin.split())\n        books.append((t, a, b))\n    \n    # sort by time\n    books = sorted(books, key=lambda x: x[0])\n    # sort by likes\n    books = sorted(books, key=lambda x: x[1])\n    # sort by dislikes\n    books = sorted(books, key=lambda x: x[2], reverse=True)\n    \n    time_taken = 0\n    alice_books = []\n    bob_books = []\n    \n    for i in range(n):\n        if len(alice_books) < k and len(bob_books) < k:\n            time_taken += books[i][0]\n            if books[i][1] == 1:\n                alice_books.append(i)\n            if books[i][2] == 1:\n                bob_books.append(i)\n        else:\n            break\n    \n    if len(alice_books) < k or len(bob_books) < k:\n        print(-1)\n    else:\n        print(time_taken)\n    \n    return \"\""
    },
    {
        "number": 4416,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    books = []\n    for i in range(n):\n        t, a, b = map(int, stdin.strip().split())\n        books.append((t, a, b))\n\n    # sort books by descending t\n    books.sort(key=lambda x: x[0], reverse=True)\n\n    # initialize DP table with -1\n    dp = [[-1]*(1<<n) for _ in range(n+1)]\n\n    # calculate DP\n    for i in range(n+1):\n        for mask in range(1<<n):\n            if i > 0 and (mask >> (i-1)) & 1 == 0:\n                continue\n            # calculate total time for books in mask\n            total_time = sum(books[j][0] for j in range(n) if mask >> j & 1 == 1)\n            # check if Alice and Bob likes at least k books\n            if sum(mask >> j & 1 == 1 and books[j][1] for j in range(n)) >= k and \\\n               sum(mask >> j & 1 == 1 and books[j][2] for j in range(n)) >= k:\n                dp[i][mask] = total_time\n\n    # check if DP table has solution\n    if dp[n][(1<<n)-1] == -1:\n        return \"-1\"\n    else:\n        return str(dp[n][(1<<n)-1])"
    },
    {
        "number": 4417,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    for i in range(queries):\n        n, k = map(int, stdin.split())\n        a = list(map(int, stdin.readline().split()))\n        if k > max(a) - min(a):\n            print(-1)\n            continue\n        dp = [float('inf')] * (n+1)\n        dp[0] = 0\n        for i in range(1, n+1):\n            for j in range(i):\n                if abs(a[j]-a[i]) <= k:\n                    dp[i] = min(dp[i], dp[j]+1)\n            if dp[i] == float('inf'):\n                print(-1)\n                break\n        else:\n            print(dp[-1])\n    return ''"
    },
    {
        "number": 4417,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        n, k = map(int, stdin.readline().strip().split())\n        prices = list(map(int, stdin.readline().strip().split()))\n        prices.sort()\n        if k < max(prices):\n            print(-1)\n        else:\n            ans = k\n            i = 0\n            j = len(prices) - 1\n            while i < j:\n                if prices[i] + prices[j] <= k:\n                    ans = prices[i] + prices[j]\n                    i += 1\n                    j -= 1\n                else:\n                    j -= 1\n            print(ans)\n    return \"\""
    },
    {
        "number": 4417,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    queries = []\n    for _ in range(int(stdin.split()[0])):\n        n, k = map(int, stdin.split()[1:])\n        a = list(map(int, stdin.readline().split()))\n        queries.append((n, k, a))\n\n    for n, k, a in queries:\n        if n == 1:\n            print(max(a))\n        else:\n            dp = [0] * (k+1)\n            dp[0] = 1\n            for i in range(1, k+1):\n                for j in range(n):\n                    dp[i] += dp[i-abs(a[j]-i)]\n            if dp[k] == 0:\n                print(-1)\n            else:\n                print(k)\n"
    },
    {
        "number": 4417,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    q = int(stdin.readline())\n    queries = []\n    for _ in range(q):\n        queries.append(list(map(int, stdin.readline().split())))\n\n    # Brute force approach\n    for i in range(1, 101):\n        b = i\n        valid = True\n        for j in range(n):\n            if abs(a[j] - b) > k:\n                valid = False\n                break\n        if valid:\n            return str(b)\n\n    # Cannot find a valid solution\n    return \"-1\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4417,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        # find the maximum equal price of all products with restriction\n        B = max(a) + k\n        if any(abs(a[i]-B) > k for i in range(n)):\n            B = -1\n        print(B)\n    return \"\""
    },
    {
        "number": 4417,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for query in range(queries):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        min_a = min(a)\n        max_a = max(a)\n        if k > max_a - min_a:\n            print(-1)\n        else:\n            print(max_a - k)\n    return \"OK\""
    },
    {
        "number": 4417,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        a.sort()\n        b = a[-1]\n        for i in range(n-1, -1, -1):\n            if a[i] + k <= b:\n                b = a[i]\n            else:\n                break\n        if b == 0:\n            print(-1)\n        else:\n            print(b)\n    return \"\""
    },
    {
        "number": 4417,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, k = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    q = int(lines[2])\n    b = []\n    for i in range(q):\n        n, k = map(int, lines[i+3].split())\n        a = list(map(int, lines[i+4].split()))\n        b.append(max_equal_price(n, k, a))\n    return \"\\n\".join(map(str, b))\n\ndef"
    },
    {
        "number": 4417,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n\n    for i in range(queries):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n\n        # sort the prices in ascending order\n        a.sort()\n\n        # initialize the answer to be the first price in sorted list\n        b = a[0]\n\n        # iterate over the sorted prices and check if the condition is satisfied\n        for i in range(1, n):\n            if abs(a[i] - b) > k:\n                # if condition is violated, update the answer\n                b += k\n\n        # if all conditions are satisfied, update the answer with the upper limit of the range\n        if abs(a[0] - b) <= k:\n            b = a[-1]\n\n        # if no suitable value of B is found, print -1\n        if b == a[0]:\n            print(-1)\n        else:\n            print(b)"
    },
    {
        "number": 4417,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def check(prices):\n        for i in range(len(prices)):\n            for j in range(i+1, len(prices)):\n                if abs(prices[i]-prices[j]) > k:\n                    return False\n        return True\n    \n    def binary_search(l, r, prices):\n        while l < r:\n            mid = (l+r)//2\n            if check(mid):\n                r = mid\n            else:\n                l = mid+1\n        return l\n    \n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        n, k = map(int, stdin.readline().strip().split())\n        prices = list(map(int, stdin.readline().strip().split()))\n        ans = binary_search(1, max(prices), prices)\n        if ans == -1:\n            print(-1)\n        else:\n            print(ans)"
    },
    {
        "number": 4418,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    # Check if array is good\n    if n % 6!= 0 or not all(x in [4, 8, 15, 16, 23, 42] for x in a):\n        return str(0)\n\n    # Remove minimum number of elements\n    count = 0\n    for i in range(1, n):\n        if a[i] < a[i-1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4418,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    count = 0\n    for i in range(n):\n        if a[i] == 4:\n            count += 1\n        elif a[i] == 8:\n            count += 2\n        elif a[i] == 15:\n            count += 3\n        elif a[i] == 16:\n            count += 4\n        elif a[i] == 23:\n            count += 5\n        else:\n            count += 6\n    if count % 6!= 0:\n        return str(count % 6)\n    else:\n        return \"0\""
    },
    {
        "number": 4418,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    if n % 6!= 0:\n        return n\n    \n    if n == 6 and a == [4, 8, 15, 16, 23, 42]:\n        return 0\n    \n    for i in range(6, n, 6):\n        if a[i]!= 4 and a[i]!= 8 and a[i]!= 15 and a[i]!= 16 and a[i]!= 23 and a[i]!= 42:\n            return n - i\n    \n    return 0"
    },
    {
        "number": 4418,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n\n    # check if array is good\n    if len(a) % 6!= 0 or not all(x in [4, 8, 15, 16, 23, 42] for x in a):\n        return str(len(a))\n\n    # check if array can be split into six parts\n    if sum(a[:6]) == 210:\n        return \"0\"\n\n    # find minimum number of elements to remove\n    for i in range(1, len(a)):\n        if sum(a[:i]) % 210 == 0 and sum(a[i:]) % 210 == 0:\n            return str(i)\n    return str(len(a))"
    },
    {
        "number": 4418,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # count the number of 4's, 8's, 15's, 16's, 23's, and 42's\n    count_4 = a.count(4)\n    count_8 = a.count(8)\n    count_15 = a.count(15)\n    count_16 = a.count(16)\n    count_23 = a.count(23)\n    count_42 = a.count(42)\n    \n    # calculate the length of the array that is divisible by 6\n    good_length = 6 * (count_4 // 6) + 6 * (count_8 // 6) + 6 * (count_15 // 6) + 6 * (count_16 // 6) + 6 * (count_23 // 6) + 6 * (count_42 // 6)\n    \n    # calculate the number of elements to remove\n    num_to_remove = len(a) - good_length\n    \n    # return the minimum number of elements to remove\n    return str(num_to_remove)"
    },
    {
        "number": 4418,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    n = len(a)\n    count = 0\n    for i in range(n):\n        if a[i] == 4:\n            count += 1\n        elif a[i] == 8:\n            count += 1\n            if count == 3:\n                a[i] = 42\n            else:\n                count -= 1\n        elif a[i] == 15:\n            count += 1\n            if count == 2:\n                a[i] = 8\n            else:\n                count -= 1\n        elif a[i] == 16:\n            count += 1\n            if count == 2:\n                a[i] = 8\n            else:\n                count -= 1\n        elif a[i] == 23:\n            count += 1\n            if count == 3:\n                a[i] = 15\n            else:\n                count -= 1\n        elif a[i] == 42:\n            count += 1\n            if count == 2:\n                a[i] = 23\n            else:\n                count -= 1\n    k = len(a)\n    if k % 6 == 0 and k // 6 <= len(set(a)):\n        return 0\n    else:\n        return k % 6\n"
    },
    {
        "number": 4418,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    if len(a) % 6!= 0 or not all(elem in [4, 8, 15, 16, 23, 42] for elem in a):\n        return \"Impossible\"\n\n    count = 0\n    for elem in a:\n        if elem == 4:\n            count += 1\n        elif elem == 8:\n            count += 1\n        elif elem == 15:\n            count += 1\n        elif elem == 16:\n            count += 1\n        elif elem == 23:\n            count += 1\n        elif elem == 42:\n            count += 1\n\n    if count == len(a):\n        return \"0\"\n\n    if count % 6!= 0:\n        return \"Impossible\"\n\n    count = 0\n    for elem in a:\n        if elem == 4:\n            count += 1\n            if count == len(a) // 6:\n                return str(len(a) - 3)\n        elif elem == 8:\n            count += 1\n            if count == len(a) // 6:\n                return str(len(a) - 2)\n        elif elem == 15:\n            count += 1\n            if count == len(a) // 6:\n                return str(len(a) - 1)\n        elif elem == 16:\n            count += 1\n            if count == len(a) // 6:\n                return str(len(a) - 1)\n        elif elem == 23:\n            count += 1\n            if count == len(a) // 6:\n                return str(len(a) - 1)\n        elif elem == 42:\n            count += 1\n            if count == len(a) // 6:\n                return str(len(a) - 1)\n\n    return \"Impossible\"\n\ndef"
    },
    {
        "number": 4418,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # find required sequences\n    required_sequences = []\n    start = 0\n    while start < n:\n        end = start + 1\n        while end < n and a[end-1] % 6 == a[end] % 6 == 0:\n            end += 1\n        if end - start >= 6:\n            required_sequences.append((start, end))\n        start = end\n    \n    # find minimum number of elements to remove\n    min_remove = n\n    for i in range(len(required_sequences)):\n        for j in range(i+1, len(required_sequences)):\n            min_remove = min(min_remove, required_sequences[i][0] - required_sequences[j][1])\n            min_remove = min(min_remove, required_sequences[j][0] - required_sequences[i][1])\n    \n    # print output\n    return str(min_remove)"
    },
    {
        "number": 4418,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # count the number of occurrences of each number in the array\n    freq = [0] * 6\n    for num in a:\n        freq[num-4] += 1\n    \n    # check if the array is good\n    if sum(freq) % 6 == 0:\n        k = sum(freq) // 6\n        for i in range(6):\n            if freq[i] < k:\n                return n - k * (k//6) + freq[i]\n        return 0\n    else:\n        return n\n    "
    },
    {
        "number": 4418,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    good_array = [4, 8, 15, 16, 23, 42] * (n // 6)\n    if len(a) == 0:\n        return 0\n    else:\n        for i in range(len(a)):\n            if a[i]!= good_array[i]:\n                return 6 * (n // 6) - i - 1\n        return 0\n\nstdin = \"\"\"\n5\n4 8 15 16 23\n\"\"\"\n\nstdout = \"\"\"\n5\n\"\"\"\n\nstdin = \"\"\"\n12\n4 8 4 15 16 8 23 15 16 42 23 42\n\"\"\"\n\nstdout = \"\"\"\n0\n\"\"\"\n\nstdin = \"\"\"\n15\n4 8 4 8 15 16 8 16 23 15 16 4 42 23 42\n\"\"\"\n\nstdout = \"\"\"\n3\n\"\"\""
    },
    {
        "number": 4419,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        if a == b:\n            print(0)\n        else:\n            moves = 0\n            while a!= b:\n                if a > b:\n                    a -= 10\n                    moves += 1\n                else:\n                    a += 10\n                    moves += 1\n            print(moves)"
    },
    {
        "number": 4419,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4419,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    for i in range(1, len(input_list), 2):\n        a, b = map(int, input_list[i].split())\n        if a == b:\n            print(0)\n        else:\n            moves = 0\n            while a!= b:\n                if a < b:\n                    a += 10\n                    moves += 1\n                else:\n                    a -= 1\n                    moves += 1\n            print(moves)"
    },
    {
        "number": 4419,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    res = []\n    for i in range(1, t+1):\n        a, b = map(int, lines[i].split())\n        if a == b:\n            res.append('0')\n        else:\n            if a > b:\n                a, b = b, a\n            moves = 0\n            while a!= b:\n                if b > 10*a:\n                    moves += b // a\n                    b -= b // a * a\n                else:\n                    k = min(b, 10 - a)\n                    a += k\n                    moves += 1\n                    b -= k\n            res.append(str(moves))\n    return '\\n'.join(res)"
    },
    {
        "number": 4419,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    output = \"\"\n    for i in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        if a == b:\n            output += str(0) + \"\\n\"\n            continue\n        if a < b:\n            output += str(-1) + \"\\n\"\n            continue\n        moves = 0\n        while a > b:\n            if a % 10 == 0:\n                a //= 10\n            else:\n                a -= 1\n            moves += 1\n        output += str(moves) + \"\\n\"\n    return output"
    },
    {
        "number": 4419,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        if a == b:\n            print(0)\n        else:\n            diff = b - a\n            k = 1\n            while diff > 0:\n                k = min(k*10, diff)\n                diff -= k\n            print(k)\n    return \"\""
    },
    {
        "number": 4419,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    output = \"\"\n    for _ in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        moves = 0\n        while a!= b:\n            moves += 1\n            if a > b:\n                a -= min(a - b, 10)\n            else:\n                a += min(b - a, 10)\n        output += str(moves) + \"\\n\"\n    return output"
    },
    {
        "number": 4419,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split('\\n')\n    cases = cases[1:]\n    for case in cases:\n        a, b = [int(x) for x in case.strip().split()]\n        moves = 0\n        while a!= b:\n            if a < b:\n                a += 10\n            else:\n                a -= 10\n            moves += 1\n        print(moves)\n    return ''"
    },
    {
        "number": 4419,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    tests = int(stdin.split()[0])\n    for i in range(tests):\n        a, b = map(int, stdin.readline().split())\n        if a == b:\n            print(0)\n        else:\n            steps = 0\n            while a!= b:\n                if a > b:\n                    a -= 10\n                else:\n                    a += 1\n                steps += 1\n            print(steps)\n    return \"\""
    },
    {
        "number": 4419,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n'):\n        if not line:\n            continue\n        a, b = map(int, line.split())\n        if a == b:\n            print(0)\n            continue\n        moves = 0\n        while a!= b:\n            if b > a:\n                moves += b - a\n                b -= 10\n            else:\n                moves += a - b\n                a += 10\n        print(moves)"
    },
    {
        "number": 4420,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    output = []\n    for i in range(1, t+1):\n        x, y, n = map(int, lines[i].split())\n        k = (n * y) // x\n        output.append(str(k))\n    return '\\n'.join(output)"
    },
    {
        "number": 4420,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        x, y, n = map(int, stdin.readline().split())\n        if x == 1:\n            print(n)\n            continue\n        if y == 0:\n            print(0)\n            continue\n        k = 0\n        mod = x\n        while k <= n:\n            if k % mod == y:\n                print(k)\n                break\n            k += 1\n        else:\n            print(k)\n    return \"\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        x, y, n = map(int, stdin.readline().strip().split())\n        if x == 1:\n            print(0)\n            continue\n        k = (n // x) * x + y\n        print(k)"
    },
    {
        "number": 4420,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    output = []\n    for i in range(1, t+1):\n        x, y, n = map(int, lines[i].strip().split())\n        k = (n-y) // x\n        if y!= 0:\n            k += 1\n        output.append(str(k))\n    return '\\n'.join(output)"
    },
    {
        "number": 4420,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    t = int(inputs[0])\n    res = []\n    for i in range(1, t+1):\n        x, y, n = map(int, inputs[i].split())\n        k = y\n        for i in range(y, n, x):\n            if i % x == y:\n                k = i\n        res.append(str(k))\n    return \"\\n\".join(res)\n\nprint(solution(\"\"\"\n7\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n\"\"\")) # Output: 12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998"
    },
    {
        "number": 4420,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        x, y, n = map(int, stdin.readline().split())\n        k = (n // x) * x + y\n        print(k)\n    return \"\""
    },
    {
        "number": 4420,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        x, y, n = map(int, stdin.readline().split())\n        k = (n + y) // x * x - y\n        print(k)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4420,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        x, y, n = map(int, stdin.readline().split())\n        if x == y:\n            k = y\n        else:\n            k = y - (x - y) % x\n        print(k)"
    },
    {
        "number": 4420,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for i in range(t):\n        x, y, n = map(int, stdin.readline().strip().split())\n        k = (n - 1) // x * x + y\n        print(k)"
    },
    {
        "number": 4420,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        x, y, n = map(int, stdin.readline().split())\n        k = y\n        for j in range(y+1, n+1):\n            k = (k * x) % n\n        print(k)"
    },
    {
        "number": 4421,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    d = list(map(int, stdin.split()[2:]))\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (d[i] + d[j]) % k == 0:\n                count += 1\n\n    return count\n"
    },
    {
        "number": 4421,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    d = list(map(int, stdin.split()[2:]))\n    pairs = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if (d[i]+d[j]) % k == 0:\n                pairs.append((i, j))\n    return len(set(pairs))"
    },
    {
        "number": 4421,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    candies = list(map(int, stdin.split()))\n    max_boxes = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (candies[i] + candies[j]) % k == 0:\n                max_boxes += 1\n    return max_boxes"
    },
    {
        "number": 4421,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    boxes = list(map(int, stdin.split()[2:]))\n    \n    pairs = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if (boxes[i] + boxes[j]) % k == 0:\n                pairs.append((i,j))\n                \n    return len(pairs)"
    },
    {
        "number": 4421,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    boxes = list(map(int, stdin.splitlines()[1].split()))\n    \n    boxes_set = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            if (boxes[i] + boxes[j]) % k == 0:\n                boxes_set.add((i, j))\n                \n    return len(boxes_set)\n\nstdin = \"\"\"7 2\n1 2 2 3 2 4 10\"\"\"\n\nprint(solution(stdin)) # Output: 6"
    },
    {
        "number": 4421,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    candies = list(map(int, stdin.split()[2:]))\n    count = 0\n    for i in range(n):\n        if candies[i] % k!= 0:\n            continue\n        for j in range(i+1, n):\n            if candies[j] % k!= 0:\n                continue\n            if (candies[i] + candies[j]) % k == 0:\n                count += 1\n    return count"
    },
    {
        "number": 4421,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = map(int, stdin.readline().split())\n    d = list(map(int, stdin.readline().split()))\n    # sort boxes by size in descending order\n    d_sorted = sorted(d, reverse=True)\n    # initialize variables\n    count = 0\n    i = 0\n    j = 0\n    # loop over boxes\n    while j < n:\n        # add current box to the gift if it is the first box or the total amount of candies in the gift is divisible by k\n        if i == 0 or (d_sorted[i-1] + d_sorted[j] + count) % k == 0:\n            # update count and indices of boxes\n            count += d_sorted[i]\n            j += 1\n        # add the previous box to the gift if the total amount of candies in the gift is not divisible by k\n        elif (d_sorted[i-1] + d_sorted[j-1] + count) % k!= 0:\n            # update count and indices of boxes\n            count += d_sorted[i-1]\n            i += 1\n        # increment indices of boxes\n        else:\n            i += 1\n        # increment count and indices of boxes if j is the last index\n        if j == n-1:\n            count += d_sorted[j]\n            j += 1\n    # return the maximum number of boxes Polycarp can give as gifts\n    return count"
    },
    {
        "number": 4421,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    d = list(map(int, stdin.readline().split()))\n    d.sort()\n    i = 0\n    j = 1\n    max_boxes = 0\n    while j < n:\n        if (d[j] + d[i]) % k == 0:\n            max_boxes += 2\n            i += 1\n            j += 1\n        elif d[j] < (d[i] + k - 1) // k:\n            i += 1\n            j += 1\n        else:\n            max_boxes += 1\n            j += 1\n    if i == n - 1:\n        max_boxes += 1\n    return str(max_boxes)"
    },
    {
        "number": 4421,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    d = list(map(int, stdin.strip().split()))\n    pairs = []\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (d[i] + d[j]) % k == 0:\n                pairs.append((i,j))\n    return len(pairs)\n\ndef"
    },
    {
        "number": 4421,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = map(int, stdin.split()[0:2])\n    d = list(map(int, stdin.split()[2:]))\n    \n    # initialize variables\n    count = 0\n    candies = 0\n    \n    # loop through all boxes and check for valid gifts\n    for i in range(n):\n        # check if box is valid gift\n        if candies % k == 0 and d[i] % k == 0:\n            # add box to gift\n            candies += d[i]\n            count += 1\n        else:\n            # reset gift\n            candies = d[i]\n            count = 1\n        \n        # check if we have enough boxes for all girls\n        if count == k:\n            break\n    \n    # return maximum number of boxes\n    return count\n    "
    },
    {
        "number": 4422,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes a string as input, and returns the string after lowercasing the K-th character in it.\n    \"\"\"\n    # read the input\n    N, K = map(int, stdin.readline().strip().split())\n    S = stdin.readline().strip()\n\n    # lowercase the K-th character in the string\n    new_char = chr(ord(S[K-1]).lower())\n    new_S = S[:K-1] + new_char + S[K:]\n\n    return new_S"
    },
    {
        "number": 4422,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n\n    # Lowercase k-th character\n    k -= 1\n    s = list(s)\n    s[k] = s[k].lower()\n    s = ''.join(s)\n\n    # Return result\n    return s"
    },
    {
        "number": 4422,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.readline().split())\n    S = stdin.readline().rstrip()\n\n    # Lowercase the K-th character\n    S = list(S)\n    S[K-1] = S[K-1].lower()\n    S = ''.join(S)\n\n    # Print the result\n    print(S)\n    return S\n"
    },
    {
        "number": 4422,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.readline().strip().split())\n    S = stdin.readline().strip()\n    \n    S = list(S)\n    S[K-1] = S[K-1].lower()\n    S = \"\".join(S)\n    \n    return S"
    },
    {
        "number": 4422,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n    s = list(s)\n    s[k-1] = s[k-1].lower()\n    return ''.join(s)"
    },
    {
        "number": 4422,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    s = list(s)\n    s[k-1] = s[k-1].lower()\n    s = \"\".join(s)\n    print(s)\n    return s"
    },
    {
        "number": 4422,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    kth_char = s[k-1]\n    lower_kth_char = kth_char.lower()\n    s = s[:k-1] + lower_kth_char + s[k:]\n    return s"
    },
    {
        "number": 4422,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n    s = list(s)\n    s[k-1] = s[k-1].lower()\n    s = ''.join(s)\n    return s\n\nprint(solution(input()))"
    },
    {
        "number": 4422,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes input from the stdin in the format specified in the problem statement.\n    It returns the string S after lowercasing the K-th character in it.\n    \"\"\"\n    # read input from stdin\n    N, K = map(int, stdin.readline().split())\n    S = stdin.readline().strip()\n\n    # convert K-th character to lowercase\n    S = S[:K-1] + S[K-1].lower() + S[K:]\n\n    return S\n"
    },
    {
        "number": 4422,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.readline().strip().split())\n    S = stdin.readline().strip()\n\n    # Lowercase the Kth character\n    S = list(S)\n    S[K-1] = S[K-1].lower()\n    S = \"\".join(S)\n\n    return S"
    },
    {
        "number": 4423,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    restaurants = []\n    for i in range(n):\n        city, score = stdin.readline().strip().split()\n        restaurants.append((city, int(score)))\n    restaurants.sort()\n    for city, _ in restaurants:\n        restaurants_in_city = sorted([i for i, (c, _) in enumerate(restaurants) if c == city], reverse=True)\n        for i in restaurants_in_city:\n            print(i+1)\n    return \"\""
    },
    {
        "number": 4423,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    restaurants = []\n    for i in range(1, len(lines)):\n        s, p = lines[i].split()\n        restaurants.append((s, int(p)))\n    restaurants.sort(key=lambda x: (x[0], -x[1]))\n    for i in range(n):\n        print(i+1, end='\\n')\n    return ''"
    },
    {
        "number": 4423,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    restaurants = []\n    for i in range(n):\n        city, score = stdin.readline().strip().split()\n        restaurants.append((city, int(score)))\n    restaurants.sort(key=lambda x: (x[0], -x[1]))\n    for i in range(n):\n        city, score = restaurants[i]\n        print(i+1)\n    return \"\"\n\nwith open(\"input.txt\", \"r\") as f:\n    print(solution(f.read()))"
    },
    {
        "number": 4423,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    restaurants = []\n    for i in range(1, N+1):\n        city, score = lines[i].split()\n        restaurants.append((city, int(score)))\n    # sort restaurants by city and score\n    restaurants.sort()\n    restaurants.sort(key=lambda x: x[1], reverse=True)\n    # print identification numbers in order of introduction\n    ids = [i+1 for i in range(N)]\n    result = ''\n    for city, score in restaurants:\n        for i in range(N):\n            if restaurants[i][0] == city and restaurants[i][1] == score:\n                result += str(ids.pop(0)) + '\\n'\n                break\n    return result"
    },
    {
        "number": 4423,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    restaurants = []\n    for i in range(n):\n        city, score = stdin.readline().strip().split()\n        score = int(score)\n        restaurants.append((city, score))\n    restaurants.sort(key=lambda x: x[0])\n    restaurants.sort(key=lambda x: x[1], reverse=True)\n    result = []\n    for city, score in restaurants:\n        result.append(f\"{restaurants.index((city, score))+1}\")\n    return \"\\n\".join(result)"
    },
    {
        "number": 4423,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    restaurants = []\n    for line in stdin.split('\\n'):\n        if not line:\n            break\n        city, score = line.split()\n        restaurants.append((city, int(score)))\n    restaurants.sort(key=lambda x: (x[0], -x[1]))\n    return '\\n'.join(str(i+1) for i, _ in enumerate(restaurants))"
    },
    {
        "number": 4423,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    restaurants = []\n    for i in range(n):\n        city, score = stdin.readline().strip().split()\n        score = int(score)\n        restaurants.append((city, score))\n    restaurants.sort(key=lambda x: (x[0], -x[1]))\n    for i, (city, score) in enumerate(restaurants):\n        print(i+1)\n    return \"\""
    },
    {
        "number": 4423,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    restaurants = {}\n    for i in range(n):\n        city, score = stdin.readline().strip().split()\n        score = int(score)\n        if city in restaurants:\n            restaurants[city].append((score, i))\n        else:\n            restaurants[city] = [(score, i)]\n    for city, scores in restaurants.items():\n        scores.sort(reverse=True)\n    for i in range(n):\n        city = max(restaurants, key=lambda c: restaurants[c][i][0] if i < len(restaurants[c]) else 0)\n        score, index = restaurants[city][i]\n        print(index+1)\n    return \"\""
    },
    {
        "number": 4423,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    restaurants = []\n    for line in stdin.split('\\n'):\n        if line:\n            city, score = line.split()\n            restaurants.append((city, int(score)))\n    restaurants.sort()\n    result = []\n    for city, score in restaurants:\n        for i, (city2, score2) in enumerate(restaurants):\n            if city == city2 and score < score2:\n                result.append(str(i+1))\n    return '\\n'.join(result)\n\nprint(solution(input()))"
    },
    {
        "number": 4423,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    restaurants = []\n    for line in stdin.split('\\n'):\n        if line:\n            city, score = line.split()\n            score = int(score)\n            restaurants.append((city, score))\n\n    restaurants.sort(key=lambda x: (x[0], -x[1]))\n\n    for i, (city, score) in enumerate(restaurants, 1):\n        print(i)\n\n    return ''\n"
    },
    {
        "number": 4424,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.strip().split())\n    coins = [500] * k\n    total = sum(coins)\n    if total >= x:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nstdin = \"2 900\"\nprint(solution(stdin)) # Output: Yes"
    },
    {
        "number": 4424,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    if k >= 1 and k <= 100 and x >= 1 and x <= 100000:\n        if k * 500 >= x:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"Invalid Input\""
    },
    {
        "number": 4424,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    if X <= 500 * K:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4424,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.strip().split())\n    if x >= (500 * k):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4424,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    if k * 500 >= x:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4424,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    if X < 100 * K:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4424,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, x = list(map(int, stdin.split()))\n    coins = [500 for _ in range(k)]\n    if sum(coins) >= x:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4424,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n\n    if k * 500 >= x:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    if K >= 1 and K <= 100 and X >= 1 and X <= 10**5 and X % 500 == 0:\n        return 'Yes' if (K * 500) >= X else 'No'\n    else:\n        return 'Invalid input'\n\nprint(solution('2 900')) # Yes"
    },
    {
        "number": 4424,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    coins = 500 * K\n    if coins >= X:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4425,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    p_win = 0\n    for i in range(1, K+1):\n        p_win += (1 / 3) * (0.5 ** i)\n    if K < N:\n        for i in range(K+1, N+1):\n            p_win += (1 / 3) * (0.5 ** (i-K)) * (0.5 ** K)\n    return f\"{p_win:.9f}\"\n\nprint(solution(input()))"
    },
    {
        "number": 4425,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    N, K = map(int, stdin.split())\n\n    # P(Snuke wins) = P(score >= K)\n    # P(score >= K) = sum(P(score >= k)) from k=K to N\n    # P(score >= k) = P(score == k) + P(score == k - 1) + P(score == k - 2) +... + P(score == 0)\n    #               = (K - k + 1) / N\n    # P(score == k) = P(coin == heads) * P(score >= k + 1) + P(coin == tails) * P(score >= k)\n    #               = P(coin == heads) * P(score >= k + 1) + (1 - P(coin == heads)) * P(score >= k)\n    # P(score == 0) = P(coin == tails) * P(score >= 1)\n    #               = (N - K + 1) / N * (1 - P(coin == heads)) * P(score >= 1)\n    # P(coin == heads) = (K - 1) / N\n    # P(coin == tails) = (N - K + 1) / N\n\n    P_score_geq_K = 0\n    P_coin_heads = (K - 1) / N\n    P_coin_tails = (N - K + 1) / N\n\n    for k in range(K, N + 1):\n        P_score_geq_k = (K - k + 1) / N\n        P_score_geq_K += P_score_geq_k * (P_coin_heads * (K - k + 2) / N + P_coin_tails)\n\n    P_score_geq_K += (N - K + 1) / N * (1 - P_coin_heads) * P_score_geq_K\n\n    return '{:.9f}'.format(P_score_geq_K)"
    },
    {
        "number": 4425,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    prob_win = 0\n    for i in range(1, n + 1):\n        prob_win += (1 / (n * 2)) ** i * ((1 / 2) ** (k - i + 1))\n    return f\"{prob_win:.9f}\""
    },
    {
        "number": 4425,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return f\"{sum(1 for i in range(1, K+1) for j in range(N) if ((j+i) % K) == 0) / N**2:.9f}\""
    },
    {
        "number": 4425,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    p = 0\n    for i in range(1, N+1):\n        if i <= K-1:\n            score = i\n            flips = 1\n            while score <= K-1 and flips <= 1000:\n                if random.random() < 0.5:\n                    score *= 2\n                    if score > K-1:\n                        score = K-1\n                else:\n                    score = 0\n                flips += 1\n            if score >= K:\n                p += 1/N\n        else:\n            p += 1/N\n    return '{:.9f}'.format(p)\n\nimport random\nprint(solution(\"3 10\")) # expected output: 0.145833333\n"
    },
    {
        "number": 4425,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    N, K = map(int, stdin.split())\n\n    # Calculate probability of getting a score of K or above\n    prob = 0\n    for i in range(K-1, N):\n        prob += 1 / (N-i) * (1/2)**(K-1)\n\n    # Calculate probability of losing the game\n    prob_lose = 1 - prob\n\n    # Round off the result to 9 decimal places\n    prob = round(prob, 9)\n    prob_lose = round(prob_lose, 9)\n\n    # Printing the result\n    return f\"{prob} {prob_lose}\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    # probability of getting K consecutive heads\n    prob = 0.0\n    for i in range(K):\n        prob += 1.0/(2*i+1)\n    # probability of getting N\n    prob *= 1.0/N\n    # probability of winning\n    prob_win = 1 - prob\n    return str(prob_win)"
    },
    {
        "number": 4425,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    N, K = map(int, stdin.strip().split())\n\n    # Computing probabilities for each score\n    probabilities = [0.0] * (K + 1)\n    probabilities[0] = 1.0\n    for i in range(1, N + 1):\n        new_probabilities = [0.0] * (K + 1)\n        for j in range(1, K + 1):\n            if j <= i - 1:\n                new_probabilities[j] += probabilities[j - 1] * (1.0 / 3.0)\n            if j <= i - 2:\n                new_probabilities[j] += probabilities[j - 2] * (1.0 / 3.0)\n            if j <= i - 3:\n                new_probabilities[j] += probabilities[j - 3] * (1.0 / 3.0)\n        probabilities = new_probabilities\n\n    # Computing probability of winning\n    win_probability = probabilities[K] if K <= N else 0.0\n\n    # Printing result\n    return f\"{win_probability:.9f}\""
    },
    {
        "number": 4425,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.strip().split())\n    p = 0\n    for i in range(1, N+1):\n        if i == K:\n            break\n        if i > K:\n            p += 1/K\n            continue\n        c = 0\n        while True:\n            if c == K-i:\n                break\n            if i+c >= K:\n                break\n            if c == K-i-c:\n                c += 1\n                break\n            c = c + 2 if random.randint(0, 1) == 0 else c + 1\n        p += 1/(2**c)\n    return f\"{p:.9f}\"\n\nimport random\n\nstdin = \"3 10\"\nprint(solution(stdin))"
    },
    {
        "number": 4425,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, K = map(int, stdin.split())\n    # calculate probabilities of winning each score\n    p = 0\n    for i in range(K, N+1):\n        p += 1/(2**(i-K+1))\n    # calculate probability of losing\n    q = 1 - p\n    return f\"{p:.9f}\"  # output with 9 decimal places"
    },
    {
        "number": 4426,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']\n    s_day = stdin.strip().upper()\n    if s_day not in days:\n        return 'Invalid input'\n    next_sunday = days.index('SUN')\n    curr_day = days.index(s_day)\n    diff = 7 - curr_day + next_sunday\n    return str(diff)"
    },
    {
        "number": 4426,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input day of the week\n    day = stdin.strip()\n    \n    # Set the number of days to 1 if today is Saturday or Sunday\n    if day in ['SAT', 'SUN']:\n        return '1'\n    \n    # Set the number of days to 8 if today is Monday\n    if day == 'MON':\n        return '8'\n    \n    # Set the number of days to 15 if today is Tuesday\n    if day == 'TUE':\n        return '15'\n    \n    # Set the number of days to 22 if today is Wednesday\n    if day == 'WED':\n        return '22'\n    \n    # Set the number of days to 29 if today is Thursday\n    if day == 'THU':\n        return '29'\n    \n    # Set the number of days to 36 if today is Friday\n    if day == 'FRI':\n        return '36'\n    \n    # If none of the above conditions are met, return -1 as an error code\n    return '-1'"
    },
    {
        "number": 4426,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    days = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']\n    current_day = stdin.strip()\n    next_sunday = (days.index(current_day) + 1) % 7  # Find index of next Sunday\n    return str(next_sunday)"
    },
    {
        "number": 4426,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # convert input string to uppercase\n    day = stdin.upper()\n\n    # initialize variables\n    sunday = 6  # next sunday is 6 days later\n    today = -1  # initialize to -1 to handle invalid input\n\n    # loop through days of the week\n    for i in range(7):\n        # if current day matches input day, set today to index\n        if day == ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'][i]:\n            today = i\n            break\n\n    # if today is invalid, return -1\n    if today == -1:\n        return -1\n\n    # return number of days before next sunday\n    return (7 - today - sunday) % 7\n"
    },
    {
        "number": 4426,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input string from stdin\n    day_of_week = stdin.strip()\n    # Initialize variables\n    days_until_sunday = 0\n    # Loop through each day until next Sunday\n    for i in range(1, 8):\n        # Calculate the day of the week for the next day\n        next_day = (i + days_until_sunday) % 7\n        # Check if the next day is Sunday\n        if next_day == 6:\n            # Increment the number of days until next Sunday\n            days_until_sunday = (days_until_sunday + 1) % 7\n    # Return the number of days until next Sunday\n    return str(days_until_sunday)"
    },
    {
        "number": 4426,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    day = stdin.strip()\n    days = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']\n    if day not in days:\n        return \"Invalid input\"\n    index = days.index(day)\n    next_sunday = days[(index + 1) % 7]\n    if next_sunday == 'SUN':\n        return \"0\"\n    return \"1\""
    },
    {
        "number": 4426,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    day = stdin.strip().upper()\n    if day == \"SUN\":\n        return \"6\"\n    elif day == \"MON\":\n        return \"5\"\n    elif day == \"TUE\":\n        return \"4\"\n    elif day == \"WED\":\n        return \"3\"\n    elif day == \"THU\":\n        return \"2\"\n    elif day == \"FRI\":\n        return \"1\"\n    elif day == \"SAT\":\n        return \"0\"\n    else:\n        return \"-1\""
    },
    {
        "number": 4426,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    day = stdin.strip()\n    if day == 'SUN':\n        return '1'\n    elif day == 'MON':\n        return '2'\n    elif day == 'TUE':\n        return '3'\n    elif day == 'WED':\n        return '4'\n    elif day == 'THU':\n        return '5'\n    elif day == 'FRI':\n        return '6'\n    elif day == 'SAT':\n        return '7'\n    else:\n        return 'Invalid input'\n\nprint(solution(input()))"
    },
    {
        "number": 4426,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    S = stdin.strip()\n\n    # Find next Sunday\n    next_sunday = (datetime.date.today() + datetime.timedelta(days=1))\n    while next_sunday.weekday()!= 6:\n        next_sunday = next_sunday + datetime.timedelta(days=1)\n\n    # Calculate number of days before next Sunday\n    delta = next_sunday - datetime.date.today()\n    return str(delta.days)"
    },
    {
        "number": 4426,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    days = {'SUN': 0, 'MON': 1, 'TUE': 2, 'WED': 3, 'THU': 4, 'FRI': 5, 'SAT': 6}\n    day = days[stdin.strip()]\n    if day == 6:\n        return str(7)\n    else:\n        return str(6 - day)"
    },
    {
        "number": 4427,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.split())\n\n    for i in range(1, 11):\n        x_i = x_2000 * 2**(i-1)\n        x_i_next = r * x_i - D\n        print(x_i_next)\n\n    return ''"
    },
    {
        "number": 4427,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.split())\n    x = [x_2000]\n    for i in range(1, 11):\n        x_i = r * x[i-1] - D\n        x.append(x_i)\n    return '\\n'.join(map(str, x))"
    },
    {
        "number": 4427,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing input\n    r, D, x_2000 = map(int, stdin.split())\n\n    # Initializing variables\n    x_2001 = r * x_2000 - D\n    x_2002 = r * x_2001 - D\n\n    # Printing output\n    output = \"\"\n    for i in range(10):\n        output += str(x_2002) + \"\\n\"\n        x_2003 = r * x_2002 - D\n        x_2002 = x_2001\n        x_2001 = x_2003\n\n    return output"
    },
    {
        "number": 4427,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    r, D, x = map(int, stdin.split())\n    \n    # Calculating x_{i+1} for i>=2000\n    x_next = []\n    for i in range(2001, 2011):\n        if i == 2001:\n            x_next.append(x)\n        else:\n            x_next.append(r*x_next[i-2001-1] - D)\n            x = x_next[i-2001-1]\n    \n    # Converting x_next to string and returning\n    return '\\n'.join(map(str, x_next))"
    },
    {
        "number": 4427,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.strip().split())\n    x_2001 = r * x_2000 - D\n    print(x_2001)\n    for i in range(1, 10):\n        x_2000 = x_2001\n        x_2001 = r * x_2000 - D\n        print(x_2001)\n    return \"\"\n\nstdin = \"2 10 20\"\nprint(solution(stdin)) # Output: \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\""
    },
    {
        "number": 4427,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x2000 = map(int, stdin.split())\n    x2001 = r * x2000 - D\n    x2002 = r * x2001 - D\n    x2003 = r * x2002 - D\n    x2004 = r * x2003 - D\n    x2005 = r * x2004 - D\n    x2006 = r * x2005 - D\n    x2007 = r * x2006 - D\n    x2008 = r * x2007 - D\n    x2009 = r * x2008 - D\n    x2010 = r * x2009 - D\n\n    return \"\\n\".join(map(str, [x2001, x2002, x2003, x2004, x2005, x2006, x2007, x2008, x2009, x2010]))"
    },
    {
        "number": 4427,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.split())\n    x_list = []\n    for i in range(10):\n        x_i = x_2000 * (r ** i) - D * i\n        x_list.append(x_i)\n    return '\\n'.join(str(x) for x in x_list)"
    },
    {
        "number": 4427,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Get input values\n    r, D, x_2000 = map(int, stdin.split())\n    # Initialize variables\n    x_2001 = r * x_2000 - D\n    x_2002 = x_2001\n    # Calculate and print x_{2001},..., x_{2010}\n    for i in range(1, 10):\n        x_2002 = r * x_2001 - D\n        print(x_2002)\n        x_2001 = x_2002\n"
    },
    {
        "number": 4427,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    r, D, x_2000 = map(int, stdin.split())\n    # initialize variables\n    x_2001 = r * x_2000 - D\n    result = [x_2001]\n    for i in range(1, 10):\n        x_2001 = r * x_2001 - D\n        result.append(x_2001)\n    # format output\n    output = \"\\n\".join(map(str, result))\n    return output"
    },
    {
        "number": 4427,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.strip().split())\n    x_i = x_2000\n    for i in range(2000, 2011):\n        x_i = r * x_i - D\n        if i >= 2001:\n            print(x_i)\n    return \"\""
    },
    {
        "number": 4428,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    d = list(map(int, stdin.readline().strip().split()))\n    a, b, c = 0, 0, 0\n    max_sum = 0\n    for i in range(n):\n        if a + b + c + 1 <= 2*a + b + c + 2:\n            a += 1\n            c += 1\n            b -= 1\n        elif a + b + c + 1 <= 2*a + b + c:\n            b += 1\n            a -= 1\n            c -= 1\n        else:\n            a -= 1\n            b -= 1\n            c += 1\n        max_sum = max(max_sum, a + b + c)\n    return str(max_sum)"
    },
    {
        "number": 4428,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    n = int(stdin.readline().strip())\n    d = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    a = 0\n    b = 0\n    c = 0\n    sum_1 = 0\n    sum_2 = 0\n    sum_3 = 0\n\n    # Loop through the array and calculate the sums\n    for i in range(n):\n        if a + b + c == i:\n            a += 1\n            sum_1 += d[i]\n        elif a + b + c == i + 1:\n            b += 1\n            sum_2 += d[i]\n        else:\n            c += 1\n            sum_3 += d[i]\n\n    # Find the maximum sum_1\n    max_sum_1 = sum_3\n    if sum_1 > max_sum_1:\n        max_sum_1 = sum_1\n\n    # Print the result\n    return str(max_sum_1)\n"
    },
    {
        "number": 4428,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, arr = map(int, stdin.strip().split())\n    arr.sort()\n    if n == 1:\n        return str(arr[0])\n    s1 = sum(arr[:n//3])\n    s2 = sum(arr[n//3: 2*n//3])\n    s3 = sum(arr[2*n//3:])\n    if s1 == s3:\n        return str(s1)\n    elif s1 == s2+s3:\n        return str(s1+s2)\n    else:\n        return str(s1+s3)"
    },
    {
        "number": 4428,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = map(int, stdin.split())\n    a, b, c = 0, 0, 0\n    total = sum(arr)\n    left_sum = arr[0]\n    right_sum = total - arr[0]\n    \n    for i in range(1, n):\n        left_sum += arr[i]\n        right_sum -= arr[i]\n        if left_sum > right_sum:\n            b += 1\n            c += left_sum - right_sum\n        else:\n            a += 1\n            c += right_sum - left_sum\n    \n    return min(c, total - c)\n"
    },
    {
        "number": 4428,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = list(map(int, stdin.split()[1:]))\n    d.sort(reverse=True)\n    s1, s2, s3 = 0, 0, 0\n    for i in range(n):\n        if i < n // 3:\n            s1 += d[i]\n        elif i < 2 * n // 3:\n            s2 += d[i]\n        else:\n            s3 += d[i]\n    return max(s1, s3)\n\nwith open(\"input.txt\", \"r\") as f:\n    input_str = f.read()\n\nprint(solution(input_str))\n"
    },
    {
        "number": 4428,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    d = list(map(int, stdin.split('\\n')[1].split()))\n\n    a = b = c = 0\n    sum_1 = sum_2 = sum_3 = 0\n\n    max_sum = 0\n\n    for i in range(n):\n        if sum_1 == sum_3:\n            break\n\n        if sum_1 < sum_3:\n            sum_1 += d[i]\n            a += 1\n\n        else:\n            sum_3 += d[i]\n            c += 1\n\n        if sum_1 < sum_3:\n            sum_2 += d[i]\n            b += 1\n\n        max_sum = max(max_sum, sum_1)\n\n    return str(max_sum)\n\nstdin = '5\\n1 3 1 1 4\\n'\nprint(solution(stdin)) # Output: 5\n\nstdin = '5\\n1 3 2 1 4\\n'\nprint(solution(stdin)) # Output: 4\n\nstdin = '3\\n4 1 2\\n'\nprint(solution(stdin)) # Output: 0"
    },
    {
        "number": 4428,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.split()[0])\n    d = list(map(int, stdin.split()[1:]))\n    # check if all elements are equal\n    if len(set(d)) == 1:\n        return 0\n    # check if all elements are negative\n    if all(i < 0 for i in d):\n        return max(d)\n    # check if all elements are positive\n    if all(i > 0 for i in d):\n        return sum(d)\n    # compute sums\n    s = sum(d)\n    a = sum(min(d[i], d[j]) for i in range(n) for j in range(i+1, n) if d[i]+d[j] == s-max(d))\n    b = sum(max(d[i], d[j]) for i in range(n) for j in range(i+1, n) if d[i]+d[j] == s-max(d))\n    c = sum(max(d[i], d[j]) for i in range(n) for j in range(i+1, n) if d[i]+d[j] == s-max(d))\n    # check if sum_1 = sum_3\n    if s-max(d) == 2*a+b+c:\n        return a+b+c\n    else:\n        return 0"
    },
    {
        "number": 4428,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    \n    max_sum = 0\n    for i in range(1, n-1):\n        for j in range(i+1, n):\n            left_sum = sum(arr[:i])\n            mid_sum = sum(arr[i:j])\n            right_sum = sum(arr[j:])\n            total_sum = left_sum + mid_sum + right_sum\n            if total_sum > max_sum:\n                max_sum = total_sum\n    \n    return max_sum"
    },
    {
        "number": 4428,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    d = list(map(int, stdin.readline().strip().split()))\n    dp = [[[0] * 3 for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(n + 1):\n            dp[i][j][0] = dp[i][j][1] = dp[i][j][2] = float('-inf')\n    for i in range(n + 1):\n        dp[i][i][0] = dp[i][i][1] = dp[i][i][2] = 0\n    for i in range(1, n + 1):\n        for j in range(1, n - i + 2):\n            for k in range(3):\n                if k == 0:\n                    dp[j][j + i - 1][k] = dp[j + 1][j + i - 1][k] + sum(d[j:j + i])\n                elif k == 1:\n                    dp[j][j + i - 1][k] = dp[j][j + i - 1][k - 1] + sum(d[j:j + i])\n                else:\n                    dp[j][j + i - 1][k] = max(dp[j][j + i - 1][k - 1] + sum(d[j:j + i]), dp[j + 1][j + i - 1][k - 1])\n    return str(dp[1][n][0])\n"
    },
    {
        "number": 4428,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = list(map(int, stdin.split()[1:]))\n    \n    a, b, c = 0, 0, 0\n    for i in range(n):\n        if d[i] <= 2*c:\n            c += d[i]\n        elif d[i] <= 2*c+b:\n            b += d[i] - c\n            c = 0\n        else:\n            a += d[i] - c - b\n            c = b = 0\n    \n    if a == 0:\n        return \"0\"\n    \n    return str(2*c+a)"
    },
    {
        "number": 4429,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        x, y, z = map(int, stdin.readline().split())\n        if x <= y and x <= z:\n            print(\"YES\")\n            print(max(x, y), max(x, z), max(y, z))\n        elif y <= x and y <= z:\n            print(\"YES\")\n            print(max(x, y), max(y, z), max(x, z))\n        elif z <= x and z <= y:\n            print(\"YES\")\n            print(max(x, z), max(y, z), max(x, y))\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 4429,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    result = []\n    for i in range(1, t+1):\n        line = lines[i]\n        x, y, z = map(int, line.split())\n        if x == max(x, y, z) and y == max(x, y, z) and z == max(x, y, z):\n            result.append(\"YES\\n\" + str(x) + \" \" + str(y) + \" \" + str(z))\n        else:\n            result.append(\"NO\")\n    return '\\n'.join(result)"
    },
    {
        "number": 4429,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        x, y, z = map(int, stdin.readline().strip().split())\n        if x + y + z!= 1000000000:\n            print(\"NO\")\n        elif x > y and x > z:\n            print(\"YES\")\n            print(x, \" \".join([str(x), str(y), str(z)]))\n        elif y > x and y > z:\n            print(\"YES\")\n            print(y, \" \".join([str(x), str(y), str(z)]))\n        elif z > x and z > y:\n            print(\"YES\")\n            print(z, \" \".join([str(x), str(y), str(z)]))\n        else:\n            print(\"NO\")\n    return \"\"\n\ndef"
    },
    {
        "number": 4429,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        x, y, z = map(int, stdin.readline().strip().split())\n        if x == max(x, y, z) and y == max(x, y, z) and z == max(x, y, z):\n            print(\"YES\")\n            if x == y == z:\n                print(x, x, x)\n            elif x == y and x < z:\n                print(x, x, z)\n            elif x == z and x < y:\n                print(x, z, x)\n            elif y == z and y < x:\n                print(y, y, x)\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 4429,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        x, y, z = map(int, lines[i].split())\n        if x+y+z <= 3:\n            print(\"NO\")\n            continue\n        if x == max(x, y, z) and y == max(x, y, z):\n            if x*y*z > 0:\n                print(\"YES\")\n                print(x, y, z)\n                continue\n        if x == max(x, y, z) and z == max(x, y, z):\n            if x*y*z > 0:\n                print(\"YES\")\n                print(x, z, y)\n                continue\n        if y == max(x, y, z) and z == max(x, y, z):\n            if x*y*z > 0:\n                print(\"YES\")\n                print(y, z, x)\n                continue\n        print(\"NO\")\n    return ''"
    },
    {
        "number": 4429,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        x, y, z = map(int, stdin.readline().strip().split())\n        max_val = max(x, y, z)\n        if max_val == x:\n            if max(y, z)!= max_val:\n                print(\"YES\")\n                print(max_val, y, z)\n                return\n            else:\n                print(\"NO\")\n                return\n        elif max_val == y:\n            if max(x, z)!= max_val:\n                print(\"YES\")\n                print(x, max_val, z)\n                return\n            else:\n                print(\"NO\")\n                return\n        elif max_val == z:\n            if max(x, y)!= max_val:\n                print(\"YES\")\n                print(x, y, max_val)\n                return\n            else:\n                print(\"NO\")\n                return"
    },
    {
        "number": 4429,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    lines = lines[1:]\n    for i in range(t):\n        x, y, z = map(int, lines[i].split())\n        if x == y == z:\n            print(\"YES\\n\", x)\n        elif x >= y and x >= z:\n            print(\"YES\\n\", x, y, z)\n        elif y >= x and y >= z:\n            print(\"YES\\n\", y, x, z)\n        elif z >= x and z >= y:\n            print(\"YES\\n\", z, x, y)\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 4429,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.strip().split(\"\\n\"):\n        x, y, z = map(int, line.strip().split())\n        if x >= y and x >= z:\n            if y >= z:\n                print(\"YES\")\n                print(x, y, z)\n            else:\n                print(\"YES\")\n                print(z, y, x)\n        elif y >= x and y >= z:\n            if x >= z:\n                print(\"YES\")\n                print(y, x, z)\n            else:\n                print(\"YES\")\n                print(z, x, y)\n        elif z >= x and z >= y:\n            if x >= y:\n                print(\"YES\")\n                print(z, x, y)\n            else:\n                print(\"YES\")\n                print(y, x, z)\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 4429,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        x, y, z = map(int, stdin.readline().split())\n        if x == max(x, y, z) and y == max(x, y, z) and z == max(x, y, z):\n            print(\"YES\")\n            print(max(x, y, z), max(x, z), max(y, z))\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 4429,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    result = []\n    for i in range(t):\n        x, y, z = map(int, stdin.readline().split())\n        a, b, c = None, None, None\n        if x >= y >= z:\n            a, b, c = x, y, z\n        elif x >= z >= y:\n            a, b, c = x, z, y\n        elif y >= x >= z:\n            a, b, c = y, x, z\n        elif y >= z >= x:\n            a, b, c = y, z, x\n        elif z >= x >= y:\n            a, b, c = z, x, y\n        elif z >= y >= x:\n            a, b, c = z, y, x\n        if a is not None and b is not None and c is not None:\n            result.append(\"YES\\n\" + str(a) + \" \" + str(b) + \" \" + str(c))\n        else:\n            result.append(\"NO\")\n    return \"\\n\".join(result)"
    },
    {
        "number": 4430,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    # sort objects in decreasing order of size\n    a.sort(reverse=True)\n    \n    # remaining objects\n    r = n\n    # max number of objects to pack\n    max_objects = 0\n    \n    # iterate over boxes\n    for i in range(m):\n        # remaining size of current box\n        box_size = k\n        # number of objects that can be packed in current box\n        num_objects = 0\n        \n        # iterate over objects\n        while r > 0 and box_size >= a[r-1]:\n            num_objects += 1\n            box_size -= a[r-1]\n            r -= 1\n        \n        # update max number of objects to pack\n        max_objects = max(max_objects, num_objects)\n    \n    return str(max_objects)"
    },
    {
        "number": 4430,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n    a.sort()\n\n    res = 0\n    left = 0\n    box = [0] * m\n\n    for right in range(n):\n        if a[right] > box[-1]:\n            if len(box) == m:\n                continue\n            box[len(box)] = a[right]\n            res = max(res, len(box))\n            continue\n\n        for i in range(len(box)):\n            if a[right] <= box[i] + k - box[-1]:\n                box[i] += a[right]\n                res = max(res, len(box))\n                break\n        else:\n            if len(box) == m:\n                continue\n            box[len(box)] = a[right]\n            res = max(res, len(box))\n\n    return str(res)"
    },
    {
        "number": 4430,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    a.sort(reverse=True)\n    ans = 0\n    box_size = [0] * m\n    for i in range(n):\n        # find an empty box to pack the object\n        for j in range(m):\n            if box_size[j] + a[i] <= k:\n                box_size[j] += a[i]\n                ans += 1\n                break\n        # if there is no empty box then we cannot pack this set of objects\n        if j == m-1 and box_size[j] + a[i] > k:\n            break\n    return str(ans)\n\nstdin = \"\"\"\n5 2 6\n5 2 1 4 2\n\"\"\"\n\nprint(solution(stdin)) # Output: 4"
    },
    {
        "number": 4430,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n    boxes = [0] * m\n    total_objects = 0\n    for i in range(n):\n        fit_in_box = False\n        for j in range(m):\n            if boxes[j] + a[i] <= k:\n                boxes[j] += a[i]\n                fit_in_box = True\n                total_objects += 1\n                break\n        if not fit_in_box:\n            break\n    print(total_objects)"
    },
    {
        "number": 4430,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n    a.sort(reverse=True)\n    empty_boxes = m\n    current_box = 0\n    count = 0\n    for i in range(n):\n        if current_box >= m:\n            break\n        if empty_boxes <= 0:\n            break\n        if a[i] <= k and empty_boxes > 0:\n            empty_boxes -= 1\n            current_box += 1\n            count += 1\n    return count"
    },
    {
        "number": 4430,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    boxes = [0] * m\n    objects = sorted(a, reverse=True)\n    count = 0\n    while objects:\n        if count >= n:\n            break\n        for i in range(m):\n            if boxes[i] + objects[-1] <= k:\n                boxes[i] += objects[-1]\n                objects.pop()\n                count += 1\n                break\n    return count\n\nstdin = \"\"\"\n5 2 6\n5 2 1 4 2\n\"\"\"\nprint(solution(stdin)) # Output: 4"
    },
    {
        "number": 4430,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n    a.sort(reverse=True)\n    ans = 0\n    for i in range(n):\n        if a[i] > k:\n            break\n        ans += 1\n        k -= a[i]\n        if k == 0:\n            break\n    return str(ans)"
    },
    {
        "number": 4430,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    boxes = [0] * m\n    remaining = a.copy()\n    count = 0\n\n    while remaining:\n        empty_boxes = [i for i in range(m) if boxes[i] == 0]\n        if not empty_boxes:\n            break\n        box = empty_boxes[0]\n        for obj in remaining:\n            if obj <= k - boxes[box]:\n                boxes[box] += obj\n                remaining.remove(obj)\n                count += 1\n                break\n\n    if count == n:\n        return str(count)\n    else:\n        return str(count-1)"
    },
    {
        "number": 4430,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n    boxes = [[] for _ in range(m)]\n    i = 0\n    count = 0\n    for x in a:\n        j = 0\n        while j < m and len(boxes[j]) > 0 and boxes[j][-1] + x <= k:\n            j += 1\n        if j < m:\n            boxes[j].append(x)\n            count += 1\n        else:\n            i += 1\n    return count if i == 0 else -1\n\nprint(solution(input()))"
    },
    {
        "number": 4430,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    left = 0\n    while left < n:\n        if m == 0 and left!= n:\n            break\n        box_size = 0\n        for i in range(left, n):\n            if box_size + a[i] <= k:\n                box_size += a[i]\n            else:\n                break\n        if box_size == 0:\n            break\n        if box_size == k:\n            m -= 1\n        count += 1\n        left += box_size\n    return count\n\nprint(solution(input()))"
    },
    {
        "number": 4431,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = stdin.split()[2]\n    c = stdin.split()[3:]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if len(set(s[i:j]).intersection(c)) == len(c):\n                count += 1\n    return str(count)"
    },
    {
        "number": 4431,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    c = set(stdin.readline().strip().split())\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if set(s[i:j]) <= c:\n                count += 1\n    return count\n\nprint(solution(\"\"\"\n7 2\nabacaba\na b\n\"\"\")) # Output: 12"
    },
    {
        "number": 4431,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = stdin.split()[2]\n    available_letters = set(stdin.split()[3:])\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if len(set(s[i:j])) <= k:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4431,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    c = stdin.readline().strip().split()\n    # initialize a 2D array to store whether each substring is valid or not\n    valid = [[True] * n for _ in range(n)]\n    # remove invalid characters from c\n    c = set(c)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(set(s[i:j+1]) - c) > 0:\n                valid[i][j] = False\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if valid[i][j]:\n                count += 1\n    return count"
    },
    {
        "number": 4431,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    s = stdin.readline().strip()\n    c = stdin.readline().strip().split()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if set(s[i:j]).issubset(set(c)):\n                count += 1\n    return count\n"
    },
    {
        "number": 4431,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    letters = stdin.split()[-1]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if set(substring).issubset(letters):\n                count += 1\n    return count"
    },
    {
        "number": 4431,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    c = stdin.readline().strip().split()\n    # convert c to set for faster lookup\n    c = set(c)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if all(letter in c for letter in substring):\n                count += 1\n    return count\n\nstdin = \"\"\"\n7 2\nabacaba\na b\n\"\"\"\n\nprint(solution(stdin))  # output: 12\n\nstdin = \"\"\"\n10 3\nsadfaasdda\nf a d\n\"\"\"\n\nprint(solution(stdin))  # output: 21\n\nstdin = \"\"\"\n7 1\naaaaaaa\nb\n\"\"\"\n\nprint(solution(stdin))  # output: 0"
    },
    {
        "number": 4431,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = stdin.split()[2]\n    c = set(stdin.split()[3:])\n\n    count = 0\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if all(char in c for char in substring):\n                count += 1\n\n    return count\n\nprint(solution(\"7 2\\nabacaba\\na b\")) # 12\nprint(solution(\"10 3\\nsadfaasdda\\nf a d\")) # 21\nprint(solution(\"7 1\\naaaaaaa\\nb\")) # 0"
    },
    {
        "number": 4431,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    keyboard = set(stdin.readline().strip().split())\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if all(c in keyboard for c in substring):\n                count += 1\n\n    return count\n\nstdin = \"\"\"\n7 2\nabacaba\na b\n\"\"\"\n\nprint(solution(stdin)) # Output: 12"
    },
    {
        "number": 4431,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    c = stdin.readline().strip().split()\n    substrings = set()\n    for i in range(n):\n        for j in range(i, n):\n            substrings.add(s[i:j+1])\n    count = 0\n    for substring in substrings:\n        if all(char in c for char in substring):\n            count += 1\n    return count"
    },
    {
        "number": 4432,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    num_test_cases = int(inputs[0])\n    output = []\n    for i in range(1, num_test_cases+1):\n        n = int(inputs[i].split()[0])\n        a = [int(x) for x in inputs[i].split()[1:]]\n        ans = 0\n        if n <= 2:\n            ans = max(a)\n        else:\n            for j in range(1, n, 2):\n                ans = max(ans, sum(a[:j]))\n            for j in range(0, n, 2):\n                ans = max(ans, sum(a[j:]))\n        output.append(str(ans))\n    return '\\n'.join(output)\n\nprint(solution(input()))"
    },
    {
        "number": 4432,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        max_len = 0\n        max_sum = 0\n        for i in range(n):\n            if a[i] > 0 and i > 0 and a[i] > a[i-1]:\n                break\n            elif a[i] < 0 and i > 0 and a[i] < a[i-1]:\n                break\n            elif i == n-1:\n                max_len = i+1\n                max_sum = sum(a[:max_len])\n        print(max_sum)\n\nsolution(sys.stdin)"
    },
    {
        "number": 4432,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    t = int(inputs[0])\n    for i in range(1, t+1):\n        n = int(inputs[i*2-1])\n        a = list(map(int, inputs[i*2].split()))\n        ans = 0\n        for j in range(n):\n            if j % 2 == 0:\n                ans += a[j]\n            else:\n                ans -= a[j]\n        print(ans)"
    },
    {
        "number": 4432,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.strip().split(\"\\n\")\n    t = int(input[0])\n    for i in range(1, t+1):\n        n = int(input[i*2-1])\n        a = list(map(int, input[i*2].split()))\n        ans = 0\n        for i in range(n-1):\n            if a[i] > 0 and a[i+1] < 0 or a[i] < 0 and a[i+1] > 0:\n                ans = max(ans, abs(a[i])+abs(a[i+1]))\n        print(\"Case #{}: {}\".format(i, ans))"
    },
    {
        "number": 4432,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        # initialize variables\n        max_length = 1\n        max_sum = sum(a)\n        left = 0\n        right = 1\n        curr_length = 1\n        curr_sum = a[0]\n        # loop through the sequence\n        while right < n:\n            if a[right] + a[left] < 0 or a[right] - a[left] > 0:\n                # update current length and sum\n                curr_length += 1\n                curr_sum += a[right]\n                # update maximum length and sum\n                if curr_length > max_length:\n                    max_length = curr_length\n                    max_sum = curr_sum\n                # update pointers\n                left = right\n                right += 1\n            else:\n                # revert to previous pointers\n                right -= 1\n                curr_length -= 1\n                curr_sum -= a[left]\n                left += 1\n        # check last subsequence\n        curr_length += 1\n        curr_sum += a[-1]\n        if curr_length > max_length:\n            max_length = curr_length\n            max_sum = curr_sum\n        print(max_sum)"
    },
    {
        "number": 4432,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n\n    # maximum length of alternating subsequence\n    max_len = 0\n    for i in range(n):\n        if i > 0 and a[i]!= a[i-1]:\n            max_len += 1\n        else:\n            max_len = 1\n\n    # maximum sum of alternating subsequence of length max_len\n    max_sum = 0\n    for i in range(n):\n        if max_len == 1:\n            max_sum = max(max_sum, a[i])\n        elif i > 0 and a[i]!= a[i-1]:\n            max_sum += a[i]\n            max_len -= 1\n        else:\n            max_len = 1\n\n    return str(max_sum)\n\ndef"
    },
    {
        "number": 4432,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n = int(stdin.split()[0])\n        a = list(map(int, stdin.split()[1:]))\n        max_sum = 0\n        max_len = 0\n        for j in range(n):\n            if j < n-1 and a[j] * a[j+1] < 0:\n                continue\n            count = 1\n            for k in range(j+2, n):\n                if a[k] * a[k-1] < 0:\n                    break\n                count += 1\n            if count > max_len:\n                max_len = count\n                max_sum = sum(a[j:j+max_len])\n            elif count == max_len and sum(a[j:j+max_len]) > max_sum:\n                max_sum = sum(a[j:j+max_len])\n        print(max_sum)\n        stdin = stdin[stdin.index('\\n')+1:]"
    },
    {
        "number": 4432,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.strip().split()))\n    test_cases = input_list[0]\n    input_list = input_list[1:]\n    for i in range(test_cases):\n        n = input_list[0]\n        a = input_list[1:n+1]\n        max_sum = 0\n        for j in range(n//2+1):\n            sum = 0\n            for k in range(j, n, 2):\n                sum += a[k]\n            if sum > max_sum:\n                max_sum = sum\n        print(max_sum)\n        input_list = input_list[n+1:]"
    },
    {
        "number": 4432,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        prefix_sum = [0] * (n+1)\n        for j in range(1, n+1):\n            prefix_sum[j] = prefix_sum[j-1] + a[j-1]\n        ans = float('-inf')\n        for k in range(2, n+1, 2):\n            max_sum = float('-inf')\n            for i in range(k-2):\n                if a[i] * a[i+1] < 0:\n                    continue\n                left = prefix_sum[i+1] - prefix_sum[i+k-2]\n                right = prefix_sum[n] - prefix_sum[n-k+i+2]\n                if left > 0 and right > 0:\n                    max_sum = max(max_sum, left + right)\n            ans = max(ans, max_sum)\n        print(ans)"
    },
    {
        "number": 4432,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        result = float('-inf')\n        for k in range(1, n):\n            if a[k] * a[k-1] > 0:\n                continue\n            sub_sum = sum(a[i] for i in range(k) if i % 2 == k % 2)\n            if sub_sum > result:\n                result = sub_sum\n        print(result)"
    },
    {
        "number": 4433,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    edges = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n    max_degree = 0\n    max_degree_vertex = None\n    for i in range(1, n+1):\n        degree = len([1 for edge in edges if edge[0]==i or edge[1]==i])\n        if degree > max_degree:\n            max_degree = degree\n            max_degree_vertex = i\n    spanning_tree = []\n    for edge in edges:\n        if edge[0] == max_degree_vertex or edge[1] == max_degree_vertex:\n            spanning_tree.append(edge)\n    return '\\n'.join(map(str, spanning_tree))"
    },
    {
        "number": 4433,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    edges = []\n    for i in range(m):\n        v, u = map(int, stdin.split()[i*2:i*2+2])\n        if u!= v:\n            edges.append((v-1, u-1))\n\n    g = [[] for _ in range(n)]\n    for e in edges:\n        g[e[0]].append(e[1])\n        g[e[1]].append(e[0])\n\n    # find maximum degree vertex\n    max_deg = -1\n    max_deg_v = -1\n    for i in range(n):\n        if len(g[i]) > max_deg:\n            max_deg = len(g[i])\n            max_deg_v = i\n\n    # dfs to find spanning tree\n    vis = [False] * n\n    stack = [(max_deg_v, None)]\n    tree = []\n    while stack:\n        v, prev = stack.pop()\n        if v!= max_deg_v and prev!= None:\n            tree.append((prev+1, v+1))\n        for u in g[v]:\n            if u!= prev:\n                stack.append((u, v))\n        vis[v] = True\n\n    # reverse tree to make it a valid spanning tree\n    tree = [(u, v) if v > u else (v, u) for u, v in tree]\n\n    # print tree in reversed order\n    ans = \"\"\n    for u, v in reversed(tree):\n        ans += str(u+1) + \" \" + str(v+1) + \"\\n\"\n\n    return ans\n"
    },
    {
        "number": 4433,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[:2])\n    edges = []\n    for _ in range(m):\n        a, b = map(int, stdin.split()[:2])\n        if a!= b:\n            edges.append((a-1, b-1))\n    max_degree = 0\n    for i in range(n):\n        degree = sum(1 for j in range(m) if edges[j][0] == i or edges[j][1] == i)\n        max_degree = max(max_degree, degree)\n    ans = []\n    for i in range(n):\n        for j in range(m):\n            if (edges[j][0] == i or edges[j][1] == i) and i!= edges[j][0] and i!= edges[j][1]:\n                if edges[j][0]!= i and edges[j][1]!= i:\n                    ans.append((i, edges[j][0]))\n                    ans.append((i, edges[j][1]))\n                    break\n    return '\\n'.join(map(str, ans))\n\nstdin = \"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\"\nprint(solution(stdin))"
    },
    {
        "number": 4433,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    edges = [tuple(map(int, stdin.split())) for _ in range(m)]\n    # Use Kruskal's algorithm to find a minimum spanning tree\n    edges.sort()\n    parent = list(range(n+1))\n    rank = [0] * (n+1)\n    def find(u):\n        if parent[u]!= u:\n            parent[u] = find(parent[u])\n        return parent[u]\n    def union(u, v):\n        pu, pv = find(u), find(v)\n        if rank[pu] < rank[pv]:\n            parent[pu] = pv\n        elif rank[pu] > rank[pv]:\n            parent[pv] = pu\n        else:\n            parent[pv] = pu\n            rank[pu] += 1\n    ans = []\n    for u, v in edges:\n        if find(u)!= find(v):\n            union(u, v)\n            ans.append((u, v))\n            if len(ans) == n-1:\n                break\n    # Find the maximum degree vertex\n    max_deg, max_v = 0, -1\n    for v in range(1, n+1):\n        deg = sum(u == v or v == u for u, _ in ans)\n        if deg > max_deg:\n            max_deg = deg\n            max_v = v\n    # Add the edges corresponding to the maximum degree vertex\n    ans += [(max_v, u) for u, _ in ans]\n    ans += [(u, max_v) for _, u in ans]\n    ans.sort()\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 4433,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.splitlines()[0].split())\n    edges = []\n    for line in stdin.splitlines()[1:]:\n        v, u = map(int, line.split())\n        edges.append((v, u))\n        edges.append((u, v))\n    adj = [[] for _ in range(n+1)]\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    visited = [False] * (n+1)\n    visited[1] = True\n    parent = [0] * (n+1)\n    spanning_tree = []\n    for i in range(n):\n        max_degree = 0\n        u = 0\n        for j in range(1, n+1):\n            if not visited[j] and len(adj[j]) > max_degree:\n                u = j\n                max_degree = len(adj[j])\n        for v in adj[u]:\n            if v!= parent[u]:\n                spanning_tree.append((u, v))\n                parent[v] = u\n                visited[v] = True\n    return '\\n'.join(f'{u} {v}' for u, v in spanning_tree)\n\ndef"
    },
    {
        "number": 4433,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        graph[v].append(u)\n        graph[u].append(v)\n\n    def dfs(graph, start, visited, parent, spanning_tree):\n        visited[start] = True\n        for i in graph[start]:\n            if i == parent:\n                continue\n            if visited[i]:\n                continue\n            spanning_tree.append((start, i))\n            dfs(graph, i, visited, start, spanning_tree)\n\n    visited = [False] * (n+1)\n    max_degree = 0\n    for i in range(1, n+1):\n        if visited[i]:\n            continue\n        spanning_tree = []\n        dfs(graph, i, visited, -1, spanning_tree)\n        degree = len(spanning_tree)\n        if degree > max_degree:\n            max_degree = degree\n            max_spanning_tree = spanning_tree\n\n    print(n-1)\n    for edge in max_spanning_tree:\n        print(edge[0], edge[1])\n    return \"\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    in_degree = [0] * n\n    for u, v in edges:\n        in_degree[v-1] += 1\n    max_degree = max(in_degree)\n    max_edges = []\n    for u, v in edges:\n        if in_degree[v-1] == max_degree:\n            max_edges.append((u, v))\n            max_degree -= 1\n            if max_degree == 0:\n                break\n    return '\\n'.join(map(lambda e:''.join(map(str, e)), max_edges))"
    },
    {
        "number": 4433,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        v, u = map(int, stdin.strip().split())\n        graph[v].append(u)\n        graph[u].append(v)\n    visited = [False] * (n+1)\n    max_degree = 0\n    for i in range(1, n+1):\n        if not visited[i]:\n            dfs(graph, i, visited, 0)\n            max_degree = max(max_degree, visited.count(False))\n    visited = [False] * (n+1)\n    edges = []\n    for i in range(1, n+1):\n        if not visited[i]:\n            dfs(graph, i, visited, 0)\n            for j in range(1, n+1):\n                if visited[j]:\n                    edges.append((i, j))\n    for i in range(n-1):\n        print(edges[i][0], edges[i][1])\n    return \"\"\n\ndef"
    },
    {
        "number": 4433,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.split()[0:2])\n    edges = [list(map(int, stdin.split()[0:2])) for _ in range(m)]\n\n    # construct adjacency matrix\n    adj_matrix = [[0] * n for _ in range(n)]\n    for v, u in edges:\n        adj_matrix[v-1][u-1] = 1\n        adj_matrix[u-1][v-1] = 1\n\n    # find minimum spanning tree\n    mst_edges = []\n    for i in range(n):\n        visited = [False] * n\n        stack = [i]\n        while stack:\n            u = stack.pop()\n            if visited[u]:\n                continue\n            visited[u] = True\n            for v in range(n):\n                if adj_matrix[u][v] == 1 and not visited[v]:\n                    stack.append(v)\n                    mst_edges.append((u, v))\n\n    # check maximum degree\n    degrees = [0] * n\n    for v, u in mst_edges:\n        degrees[v] += 1\n        degrees[u] += 1\n    max_degree = max(degrees)\n\n    # print maximum degree spanning tree\n    output = []\n    for v, u in mst_edges:\n        if degrees[v] == max_degree and degrees[u] == max_degree:\n            output.append(str(v+1) +'' + str(u+1))\n    return '\\n'.join(output)\n"
    },
    {
        "number": 4433,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    edges = []\n    for _ in range(m):\n        v, u = map(int, stdin.readline().split())\n        edges.append((v-1, u-1))\n        edges.append((u-1, v-1))\n    adjacency_list = [[] for _ in range(n)]\n    for v, u in edges:\n        adjacency_list[v].append(u)\n        adjacency_list[u].append(v)\n    # compute the degrees of all vertices\n    degrees = [len(neighbors) for neighbors in adjacency_list]\n    # initialize the spanning tree with any vertex\n    spanning_tree = set([(v, u) for v, u in edges if v == 0])\n    # iterate over the remaining vertices in decreasing order of degrees\n    remaining_vertices = sorted(range(n), key=lambda v: -degrees[v])\n    for v in remaining_vertices:\n        if v in spanning_tree:\n            continue\n        # find the neighbor of v with the highest degree in the spanning tree\n        max_degree = 0\n        max_neighbor = -1\n        for neighbor in adjacency_list[v]:\n            if (v, neighbor) in spanning_tree or (neighbor, v) in spanning_tree:\n                continue\n            if degrees[neighbor] > max_degree:\n                max_degree = degrees[neighbor]\n                max_neighbor = neighbor\n        if max_neighbor == -1:\n            return \"no spanning tree exists\"\n        # add the edge (v, max_neighbor) to the spanning tree\n        spanning_tree.add((v, max_neighbor))\n    # print the edges of the spanning tree in the desired format\n    spanning_tree = sorted(spanning_tree)\n    result = \"\"\n    for v, u in spanning_tree:\n        result += f\"{v+1} {u+1}\\n\"\n    return result"
    },
    {
        "number": 4434,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        board = [[0]*n for _ in range(n)]\n        num_of_figures = n*n\n        for i in range(n):\n            for j in range(n):\n                board[i][j] = 1\n        num_of_moves = 0\n        while num_of_figures > 1:\n            move = False\n            for i in range(n):\n                for j in range(n):\n                    if board[i][j]!= 0:\n                        for x, y in [(i-1,j-1), (i-1,j), (i-1,j+1), (i,j-1), (i,j+1), (i+1,j-1), (i+1,j), (i+1,j+1)]:\n                            if 0<=x<n and 0<=y<n and board[x][y] == 0 and board[i][j] == 1:\n                                board[x][y] = 1\n                                board[i][j] = 0\n                                num_of_figures -= 1\n                                move = True\n                                num_of_moves += 1\n                                break\n                        if move:\n                            break\n            if not move:\n                return \"Impossible\"\n        print(num_of_moves)\n"
    },
    {
        "number": 4434,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4434,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n\n        if n % 2 == 0:\n            print(0)\n        else:\n            print((n - 1) ** 2 // 4)\n\n    return \"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for t in range(int(stdin.split()[0])):\n        n = int(stdin.split()[1])\n        if n == 1:\n            print(0)\n            continue\n        board = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            board[0][i] = i\n        for i in range(1, n):\n            for j in range(n):\n                board[i][j] = (board[i-1][j] + j + 1) % n\n        ans = 0\n        for i in range(n):\n            for j in range(n):\n                ans += board[i][j]\n        print(ans)"
    },
    {
        "number": 4434,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n\n    if n == 1:\n        return \"0\"\n\n    moves = 0\n    current_cell = (n // 2, n // 2)\n\n    # Move figure from the center to the edges\n    for i in range(1, n // 2 + 1):\n        for j in range(1, n // 2 + 1):\n            if i!= n // 2 or j!= n // 2:\n                moves += 1\n\n    # Move figures from the edges to the center\n    for i in range(n // 2 - 1, 0, -1):\n        for j in range(n // 2 - 1, 0, -1):\n            if i!= n // 2 or j!= n // 2:\n                moves += 1\n\n    # Move figures from the center to the corners\n    for i in range(n // 2 - 1, 0, -1):\n        for j in range(n // 2 - 1, 0, -1):\n            if (i, j) not in [(0, 0), (0, n - 1), (n - 1, 0), (n - 1, n - 1)]:\n                moves += 1\n\n    # Move figures from the corners to the center\n    for i in range(1, n // 2):\n        for j in range(1, n // 2):\n            if (i, j) not in [(0, 0), (0, n - 1), (n - 1, 0), (n - 1, n - 1)]:\n                moves += 1\n\n    return str(moves)\n"
    },
    {
        "number": 4434,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        dp = [n**2] * ((n+1)**2)\n        dp[0] = 0\n        dp[n**2-1] = 1\n        for i in range(1, n**2-1):\n            dp[i] = 2*dp[i-1] + 2*dp[i+1]\n        ans = dp[n**2-1]\n        print(ans)\n    return \"\""
    },
    {
        "number": 4434,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function solves the problem by creating a board of size n x n with the initial configuration of each cell containing one figure. Then it iterates through all possible moves and counts the number of moves needed to get all the figures into one cell. The minimum number of moves is returned.\n\n    Args:\n        stdin (str): A string containing the input of the problem\n\n    Returns:\n        str: A string containing the output of the problem\n    \"\"\"\n    input_list = stdin.strip().split('\\n')\n    t = int(input_list[0])\n    output = []\n    for i in range(1, t+1):\n        n = int(input_list[i])\n        board = [[0 for j in range(n)] for i in range(n)]\n        for j in range(n):\n            board[0][j] = 1\n            board[n-1][j] = 1\n            board[j][0] = 1\n            board[j][n-1] = 1\n        moves = 0\n        while True:\n            # Check if all figures are in one cell\n            cell_count = 0\n            for i in range(n):\n                for j in range(n):\n                    if board[i][j]!= 0:\n                        cell_count += 1\n            if cell_count == n**2:\n                output.append(moves)\n                break\n            # Find the cell with the largest number of figures\n            max_cell = (-1, -1)\n            max_count = 0\n            for i in range(n):\n                for j in range(n):\n                    if board[i][j] > max_count:\n                        max_count = board[i][j]\n                        max_cell = (i, j)\n            # Try all possible moves from the cell with the largest number of figures\n            for move in [(0, -1), (-1, 0), (0, 1), (1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]:\n                new_cell = (max_cell[0] + move[0], max_cell[1] + move[1])\n                if 0 <= new_cell[0] < n and 0 <= new_cell[1] < n and board[new_cell[0]][new_cell[1]] == 0:\n                    # Move the figure from the current cell to the new cell\n                    board[max_cell[0]][max_cell[1]] -= 1\n                    board[new_cell[0]][new_cell[1]] += 1\n                    moves += 1\n                    break\n            else:\n                # If no move is possible, undo the last move and try again\n                board[max_cell[0]][max_cell[1]] += 1\n                moves -= 1\n    return '\\n'.join(map(str, output))"
    },
    {
        "number": 4434,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a string as output. The input string represents the input of a test case.\n\n    The function should solve the problem as described in the prompt and return the minimum number of moves needed to get all the figures into one cell.\n    \"\"\"\n    # Read the input\n    n = int(stdin.strip())\n\n    # Initialize the board\n    board = [[1 if i == j else 0 for j in range(n)] for i in range(n)]\n\n    # Initialize a counter to keep track of the number of moves\n    moves = 0\n\n    # Keep looping until all figures are in one cell\n    while True:\n        # Initialize a flag to check if any moves were made\n        made_move = False\n\n        # Loop through all cells in the board\n        for i in range(n):\n            for j in range(n):\n                # If the current cell is not empty\n                if board[i][j] > 0:\n                    # Loop through all possible moves\n                    for move in [(i - 1, j - 1), (i - 1, j), (i - 1, j + 1), (i, j - 1), (i, j + 1), (i + 1, j - 1), (i + 1, j), (i + 1, j + 1)]:\n                        # If the move is valid (i.e. within the bounds of the board and the cell is empty)\n                        if 0 <= move[0] < n and 0 <= move[1] < n and board[move[0]][move[1]] == 0:\n                            # Make the move\n                            board[move[0]][move[1]], board[i][j] = board[i][j], board[move[0]][move[1]]\n                            # Increment the moves counter\n                            moves += 1\n                            # Set the flag to true\n                            made_move = True\n\n        # If no moves were made, then we are done\n        if not made_move:\n            break\n\n    # Return the number of moves\n    return str(moves)"
    },
    {
        "number": 4434,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    board = [[0 for j in range(n)] for i in range(n)]\n    moves = 0\n    for i in range(n):\n        for j in range(n):\n            board[i][j] = i * n + j + 1\n    # print(board)\n    while True:\n        is_done = True\n        for i in range(n):\n            for j in range(n):\n                if board[i][j]!= 0:\n                    is_done = False\n                    for k in range(8):\n                        new_i = i + [-1, 0, 1, -1, 1, -1, 0, 1][k]\n                        new_j = j + [-1, -1, -1, 0, 0, 1, 1, 1][k]\n                        if 0 <= new_i < n and 0 <= new_j < n and board[new_i][new_j] == 0:\n                            board[new_i][new_j] = board[i][j]\n                            board[i][j] = 0\n                            is_done = True\n                            moves += 1\n                            break\n        if is_done:\n            break\n    # print(board)\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j]!= 0:\n                count += 1\n    return moves if count == n * n - 1 else -1"
    },
    {
        "number": 4434,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i])\n        if n % 2 == 0:\n            return \"Invalid input\"\n        moves = 0\n        for i in range(1, n, 2):\n            for j in range(1, n, 2):\n                moves += 2 * (n-1)\n        if n > 1:\n            moves += (n-1)**2\n        print(moves)\n    return \"\""
    },
    {
        "number": 4435,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    d = [float('inf')] * n\n    d[0] = 0\n    for i in range(1, n):\n        if i - a[i] >= 0:\n            d[i] = min(d[i], d[i - a[i]] + 1)\n        if i + a[i] < n:\n            d[i] = min(d[i], d[i + a[i]] + 1)\n    for i in range(n):\n        if d[i] == float('inf'):\n            d[i] = -1\n    return''.join(map(str, d))"
    },
    {
        "number": 4435,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    d = [-1] * n\n    stack = []\n\n    for i in range(n):\n        if i == 0:\n            stack.append(i)\n            d[i] = 1\n        else:\n            if a[i] % 2 == 0 and a[stack[-1]] % 2 == 1:\n                stack.append(i)\n                d[i] = d[stack[-2]] + 1\n            elif a[i] % 2 == 1 and a[stack[-1]] % 2 == 0:\n                stack.append(i)\n                d[i] = d[stack[-2]] + 1\n            else:\n                d[i] = -1\n\n    for i in range(n):\n        if d[i] == -1:\n            print(-1, end=' ')\n        else:\n            print(d[i], end=' ')\n"
    },
    {
        "number": 4435,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    d = [-1] * n\n    d[0] = 0\n    q = [0]\n\n    for i in range(1, n):\n        if a[i] % 2 == a[i-1] % 2:\n            d[i] = d[i-1]\n        else:\n            d[i] = d[i-1] + 1\n\n        for j in range(len(q)):\n            if abs(q[j] - i) <= a[i] <= abs(q[j] - i) + a[i]:\n                if a[i] % 2 == a[q[j]] % 2:\n                    d[i] = min(d[i], d[q[j]] + 1)\n                q.append(i)\n                break\n\n        if d[i] == -1:\n            return''.join(list(map(str, d)))\n\n    return''.join(list(map(str, d)))\n"
    },
    {
        "number": 4435,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize dp array\n    dp = [-1] * n\n\n    # Base case\n    dp[0] = 0\n\n    # Calculate dp array\n    for i in range(1, n):\n        if dp[i - 1] == -1:\n            dp[i] = -1\n        else:\n            dp[i] = dp[i - 1] + 1\n            if i - a[i - 1] >= 0 and (a[i - 1] % 2 == 0 and a[i - 1]!= a[i - 1 - a[i - 1]] or a[i - 1] % 2 == 1 and a[i - 1]!= a[i - 1 + a[i - 1]]):\n                dp[i] = min(dp[i], dp[i - 1 - a[i - 1]])\n            if i + a[i - 1] < n and (a[i - 1] % 2 == 0 and a[i - 1]!= a[i + 1 - a[i - 1]] or a[i - 1] % 2 == 1 and a[i - 1]!= a[i + 1 + a[i - 1]]):\n                dp[i] = min(dp[i], dp[i + 1 + a[i - 1]])\n\n    # Output dp array\n    return''.join(map(str, dp))"
    },
    {
        "number": 4435,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    # initialize variables\n    d = [-1] * n\n    # set initial values\n    for i in range(n):\n        if a[i] % 2 == 0:\n            if i > 0 and d[i-1]!= -1:\n                d[i] = d[i-1] + 1\n        else:\n            if i < n-1 and d[i+1]!= -1:\n                d[i] = d[i+1] + 1\n    # fill in values\n    for i in range(n-1, -1, -1):\n        if a[i] % 2 == 0:\n            if i > 0 and d[i-1]!= -1:\n                d[i] = min(d[i], d[i-1] + 1)\n        else:\n            if i < n-1 and d[i+1]!= -1:\n                d[i] = min(d[i], d[i+1] + 1)\n    # output result\n    return''.join(map(str, d))\n\nstdin = \"\"\"\n10\n4 5 7 6 7 5 4 4 6 4\n\"\"\"\n\nprint(solution(stdin))  # Output: \"1 1 1 2 -1 1 1 3 1 1\""
    },
    {
        "number": 4435,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    d = [-1] * n\n    d[0] = 0\n    stack = [0]\n    while stack:\n        i = stack.pop()\n        for j in range(1, n + 1):\n            if j == 1:\n                if a[i] % 2 == 0:\n                    if d[i] + 1 < d[j]:\n                        d[j] = d[i] + 1\n                        stack.append(j)\n                else:\n                    if d[i] + 2 < d[j]:\n                        d[j] = d[i] + 2\n                        stack.append(j)\n            else:\n                if j - a[i] > 0 and d[i] + 1 < d[j - a[i]]:\n                    d[j - a[i]] = d[i] + 1\n                    stack.append(j - a[i])\n                if j + a[i] <= n and d[i] + 2 < d[j + a[i]]:\n                    d[j + a[i]] = d[i] + 2\n                    stack.append(j + a[i])\n\n    return''.join(map(str, d))\n\nprint(solution(input()))"
    },
    {
        "number": 4435,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    d = [-1] * n\n    stack = []\n    for i in range(n):\n        if not stack:\n            stack.append(i)\n        else:\n            if abs(a[stack[-1]] - a[i]) % 2 == 1:\n                stack.append(i)\n            else:\n                if d[stack[-1]] == -1:\n                    d[stack[-1]] = i - stack[-1]\n                if d[i] == -1:\n                    d[i] = stack[-1] - i\n                stack.pop()\n    if stack:\n        for i in stack:\n            if d[stack[-1]] == -1:\n                d[stack[-1]] = i - stack[-1]\n            if d[i] == -1:\n                d[i] = stack[-1] - i\n    return''.join(map(str, d))"
    },
    {
        "number": 4435,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    d = [-1] * n\n\n    for i in range(n):\n        if a[i] % 2 == 1:\n            d[i] = 1\n        else:\n            d[i] = n - i\n\n    for i in range(n):\n        for j in range(i, n):\n            if a[j] % 2 == 0 and d[j] == -1:\n                if a[i] % 2 == 0:\n                    d[j] = d[i] + 1\n                else:\n                    d[j] = d[i] + n - j\n\n    return''.join(map(str, d))"
    },
    {
        "number": 4435,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    d = [-1] * n\n    for i in range(n):\n        if a[i] % 2 == 0:\n            j = i + a[i]\n            if j >= n:\n                return \" \".join(map(str, d))\n            if d[j] == -1:\n                d[j] = d[i] + 1\n        else:\n            j = i - a[i]\n            if j <= 0:\n                return \" \".join(map(str, d))\n            if d[j] == -1:\n                d[j] = d[i] + 1\n    return \" \".join(map(str, d))\n\n\nstdin = \"10\\n4 5 7 6 7 5 4 4 6 4\"\nprint(solution(stdin)) # Output: 1 1 1 2 -1 1 1 3 1 1"
    },
    {
        "number": 4435,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    d = [-1] * n\n\n    for i in range(n):\n        if i % 2 == 0:\n            if a[i] % 2 == 0:\n                continue\n            else:\n                j = i - a[i]\n                if j < 0 or j >= n:\n                    continue\n                if a[j] % 2 == 0:\n                    d[j] = 1 + d[i]\n                else:\n                    continue\n        else:\n            if a[i] % 2 == 1:\n                continue\n            else:\n                j = i + a[i]\n                if j < 0 or j >= n:\n                    continue\n                if a[j] % 2 == 1:\n                    d[j] = 1 + d[i]\n                else:\n                    continue\n\n    return''.join(map(str, d))"
    },
    {
        "number": 4436,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.splitlines():\n        n = int(line)\n        for a in range(2, int(n**(1/3))+1):\n            for b in range(a+1, int(n**(1/2))+1):\n                if n == a*b*int(n/a/b):\n                    return \"YES\\n\" + \" \".join(map(str, sorted([a, b, n//a//b])))\n        return \"NO\""
    },
    {
        "number": 4436,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        if n < 2 or n > 10**9:\n            print(\"NO\")\n        else:\n            for a in range(2, n):\n                for b in range(2, n):\n                    if n % a == 0 and n % b == 0 and a * b <= n:\n                        c = n // (a * b)\n                        if c >= 2 and a * b * c == n:\n                            print(\"YES\")\n                            print(f\"{a} {b} {c}\")\n                            break\n                else:\n                    continue\n                break\n            else:\n                print(\"NO\")\n    return \"\""
    },
    {
        "number": 4436,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        if n < 2:\n            print(\"NO\")\n        else:\n            for a in range(2, n):\n                for b in range(2, n):\n                    for c in range(2, n):\n                        if a*b*c == n and a*b!= n and a*c!= n and b*c!= n:\n                            print(\"YES\", a, b, c)\n                            break\n                    else:\n                        continue\n                    break\n                else:\n                    continue\n                break\n            else:\n                print(\"NO\")"
    },
    {
        "number": 4436,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline().strip())\n    for t in range(test_cases):\n        n = int(stdin.readline().strip())\n        for a in range(2, n+1):\n            for b in range(2, n+1):\n                for c in range(2, n+1):\n                    if a*b*c == n and a <= b and b <= c:\n                        print(\"YES\")\n                        print(f\"{a} {b} {c}\")\n                        break\n                else:\n                    continue\n                break\n            else:\n                continue\n            break\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4436,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for n in stdin.split('\\n'):\n        if n == '':\n            continue\n        n = int(n)\n        if n % 2 == 1 or n % 3 == 0 or n % 5 == 0:\n            print(\"NO\")\n            continue\n        for a in range(2, int(n**(0.5))+1):\n            if n % a == 0:\n                b = n // a\n                c = n // (a * b)\n                if a * b * c == n:\n                    print(\"YES\")\n                    print(a, b, c)\n                    break\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4436,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get number of test cases\n    t = int(stdin.readline().strip())\n    \n    # iterate over test cases\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        \n        # check if it is impossible\n        if n < 2 or n > 10**9:\n            print(\"NO\")\n        else:\n            # check if n can be represented as a*b*c\n            for a in range(2, int(n**(1/3))+1):\n                for b in range(2, int(n**(1/3))+1):\n                    for c in range(2, int(n**(1/3))+1):\n                        if a*b*c == n and (2 <= a <= n) and (2 <= b <= n) and (2 <= c <= n):\n                            print(\"YES\", a, b, c)\n                            break\n                    else:\n                        continue\n                    break\n                else:\n                    continue\n                break\n            else:\n                print(\"NO\")\n                \n    return \"\""
    },
    {
        "number": 4436,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        if n < 2 or n > 10**9:\n            print(\"NO\")\n        else:\n            for a in range(2, n):\n                for b in range(2, n):\n                    for c in range(2, n):\n                        if a*b*c == n and 2 <= a <= n and 2 <= b <= n and 2 <= c <= n:\n                            print(\"YES\")\n                            print(a, b, c)\n                            break\n                    else:\n                        continue\n                    break\n                else:\n                    continue\n                break\n            else:\n                print(\"NO\")\n    return \"\""
    },
    {
        "number": 4436,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        if n % 2 == 0 or n % 3 == 0:\n            print(\"NO\")\n        else:\n            a = 2\n            for b in range(3, int(n**0.5)+1, 2):\n                if n % b == 0:\n                    c = n // b\n                    if c <= int(n**0.5):\n                        print(\"YES\")\n                        print(a, b, c)\n                        break\n            else:\n                print(\"NO\")\n    return \"\""
    },
    {
        "number": 4436,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        a = b = c = -1\n        for i in range(1, n):\n            for j in range(i+1, n):\n                if n % i == 0 and n % j == 0 and i*j == n:\n                    a = i\n                    b = j\n                    c = n//a//b\n                    break\n        if a!= -1 and b!= -1 and c!= -1:\n            print(\"YES\")\n            print(str(a) + \" \" + str(b) + \" \" + str(c))\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4436,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    t = int(stdin.readline())\n    test_cases = []\n    for i in range(t):\n        test_cases.append(int(stdin.readline()))\n\n    # Solve each test case\n    for n in test_cases:\n        # Check if n is divisible by 2\n        if n % 2 == 0:\n            print(\"YES\")\n            print(f\"{n//2} {n//2} 2\")\n            continue\n\n        # Iterate over all possible values of a, b, and c\n        for a in range(2, int(n ** (1/3))+1):\n            for b in range(a+1, int(n ** (2/3))+1):\n                for c in range(b+1, n+1):\n                    if a*b*c == n:\n                        print(\"YES\")\n                        print(f\"{a} {b} {c}\")\n                        break\n                else:\n                    continue\n                break\n            else:\n                continue\n            break\n        else:\n            print(\"NO\")\n\n    return \"\""
    },
    {
        "number": 4437,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count = 0\n    for i in range(1, n, 2):\n        if s[i-1]!= 'b':\n            s = s[:i-1] + 'b' + s[i:]\n            count += 1\n        elif s[i]!= 'a':\n            s = s[:i] + 'a' + s[i+1:]\n            count += 1\n    print(count)\n    return s"
    },
    {
        "number": 4437,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    # count the frequency of 'a' and 'b' in s\n    freq_a = s.count('a')\n    freq_b = s.count('b')\n    \n    # if the length of s is odd, add a 'b' at the end\n    if n % 2 == 1:\n        s += 'b'\n        freq_b += 1\n    \n    # initialize the result string\n    res = s\n    \n    # iterate over all prefixes of even length\n    for i in range(1, n+1, 2):\n        # if the number of 'a' and 'b' in the prefix is equal, do nothing\n        if s[i:i+2].count('a') == freq_a and s[i:i+2].count('b') == freq_b:\n            continue\n        # if the number of 'a' and 'b' in the prefix is not equal, swap one 'a' and 'b'\n        else:\n            prefix = s[i:i+2]\n            if prefix.count('a') > prefix.count('b'):\n                res = res[:i+1] + 'b' + res[i+2:]\n            else:\n                res = res[:i] + 'a' + res[i+1:]\n            # update the frequency of 'a' and 'b' in the result string\n            freq_a -= prefix.count('a')\n            freq_b -= prefix.count('b')\n            freq_a += res[i:i+2].count('a')\n            freq_b += res[i:i+2].count('b')\n    \n    return freq_a // 2 + freq_b // 2, res"
    },
    {
        "number": 4437,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    prefix_count = [0] * n\n    prefix_count[0] = 1\n    prev_char = s[0]\n    for i in range(1, n):\n        if s[i] == prev_char:\n            prefix_count[i] = prefix_count[i-1]\n        else:\n            prefix_count[i] = prefix_count[i-1] + 1\n        prev_char = s[i]\n\n    min_ops = 0\n    for i in range(n//2):\n        if prefix_count[i*2] == prefix_count[i*2+1]:\n            min_ops += 1\n\n    return f\"{min_ops}\\n{s}\"\n\ndef"
    },
    {
        "number": 4437,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    cnt = 0\n    for i in range(0, n, 2):\n        if s[i] == 'a':\n            cnt += 1\n        else:\n            cnt -= 1\n    if cnt == 0:\n        return \"0\" + \"\\n\" + s\n    else:\n        ans = \"\"\n        for i in range(n):\n            if s[i] == 'a':\n                ans += 'b'\n            else:\n                ans += 'a'\n        return str(cnt) + \"\\n\" + ans"
    },
    {
        "number": 4437,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    a_count = s.count('a')\n    b_count = s.count('b')\n    if a_count == 0 or b_count == 0:\n        return 0, s\n    if a_count == b_count:\n        return 0, s\n    if a_count > b_count:\n        s = s.replace('a', 'b', a_count-b_count)\n    else:\n        s = s.replace('b', 'a', b_count-a_count)\n    return b_count - a_count, s"
    },
    {
        "number": 4437,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count = 0\n    for i in range(1, n+1, 2):\n        if s[i-1] == 'a':\n            s = s[:i-1] + 'b' + s[i:]\n            count += 1\n        elif s[i-1] == 'b':\n            s = s[:i-1] + 'a' + s[i:]\n            count += 1\n    print(count)\n    return s"
    },
    {
        "number": 4437,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count = 0\n    prev_char = s[0]\n    for i in range(1, n, 2):\n        if s[i]!= prev_char:\n            count += 1\n            s = s[:i] + s[i].swapcase() + s[i+1:]\n            prev_char = s[i]\n    print(count)\n    print(s)"
    },
    {
        "number": 4437,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count = 0\n    for i in range(1, n, 2):\n        if s[i] == 'a':\n            s = s[:i] + 'b' + s[i+1:]\n            count += 1\n        elif s[i] == 'b':\n            s = s[:i] + 'a' + s[i+1:]\n            count += 1\n    print(count)\n    return s"
    },
    {
        "number": 4437,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    \n    count = 0\n    for i in range(n):\n        if i % 2 == 0:\n            if s[i] == 'a':\n                count += 1\n            elif s[i] == 'b':\n                count -= 1\n                \n    if count > 0:\n        for i in range(n):\n            if s[i] == 'b':\n                s = s[:i] + 'a' + s[i+1:]\n                count -= 1\n                if count == 0:\n                    break\n    elif count < 0:\n        for i in range(n):\n            if s[i] == 'a':\n                s = s[:i] + 'b' + s[i+1:]\n                count += 1\n                if count == 0:\n                    break\n    \n    return count, s"
    },
    {
        "number": 4437,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    # Finding the minimum number of operations\n    count = 0\n    for i in range(n):\n        if s[i]!= 'b':\n            count += 1\n            s = s[:i] + 'b' + s[i+1:]\n\n    # Printing output\n    print(count)\n    return s\n"
    },
    {
        "number": 4438,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().split())\n        points.append((x, y))\n    points.sort(key=lambda x: max(x))\n    dist = 0\n    visited = set()\n    for i, point in enumerate(points):\n        if point in visited:\n            continue\n        dist += 1\n        visited.add(point)\n        for j in range(i+1, len(points)):\n            if point[0] + 1 == points[j][0] or point[0] - 1 == points[j][0] or point[1] + 1 == points[j][1] or point[1] - 1 == points[j][1]:\n                if points[j] not in visited:\n                    visited.add(points[j])\n                    dist += abs(points[j][0] - point[0]) + abs(points[j][1] - point[1])\n    return str(dist)"
    },
    {
        "number": 4438,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().split())\n        points.append((x, y))\n\n    points.sort(key=lambda x: (x[1], x[0]))\n\n    dist = 0\n    for i in range(1, n):\n        if points[i][1] > points[i-1][1]:\n            dist += abs(points[i][0] - points[i-1][0]) + abs(points[i][1] - points[i-1][1])\n\n    return str(dist)\n"
    },
    {
        "number": 4438,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        points.append((x, y))\n    visited = [False] * n\n    levels = [0] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1]) == 1:\n                levels[i] = max(levels[i], levels[j]+1)\n                levels[j] = max(levels[j], levels[i]+1)\n    level = min(levels)\n    dist = 0\n    for i in range(n):\n        if levels[i] == level:\n            visited[i] = True\n            for j in range(n):\n                if abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1]) == 1:\n                    dist += abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1])\n    return dist"
    },
    {
        "number": 4438,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n\n    # sort by level\n    points.sort(key=lambda x: max(x[0], x[1]))\n\n    # starting from minimum level\n    visited = set()\n    visited.add(tuple(points[0]))\n    distance = 0\n    for i in range(1, n):\n        p = points[i]\n        level = max(p[0], p[1])\n        # check if all points of previous level are visited\n        if not all(p1[0] == p[0] or p1[1] == p[1] for p1 in points[:i] if max(p1[0], p1[1]) == level):\n            continue\n        visited.add(tuple(p))\n        # calculate distance\n        for p1 in visited:\n            distance += abs(p[0] - p1[0]) + abs(p[1] - p1[1])\n\n    return str(distance)"
    },
    {
        "number": 4438,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    \n    # Sort points by level\n    points.sort(key=lambda x: max(x[0], x[1]))\n    \n    # Find min level\n    min_level = max(max(x[0], x[1]) for x in points) + 1\n    \n    # Initialize dp\n    dp = [float('inf')] * (2 * min_level + 1)\n    dp[0] = 0\n    \n    # Dynamic Programming\n    for p in points:\n        for i in range(max(p[0], p[1]), 2 * min_level + 1):\n            for j in range(p[0] - i, p[0] + i + 1):\n                for k in range(p[1] - i, p[1] + i + 1):\n                    if (0 <= j < 2 * min_level + 1) and (0 <= k < 2 * min_level + 1):\n                        dp[i] = min(dp[i], dp[max(0, j - p[0]) + max(0, k - p[1])] + abs(j - p[0]) + abs(k - p[1]))\n    \n    return str(dp[min_level])\n\n\ndef"
    },
    {
        "number": 4438,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().split())\n        points.append((x, y))\n    points.sort(key=lambda x: x[1])\n    dp = [0] * (n + 1)\n    visited = [False] * n\n    ans = 0\n    for i in range(n):\n        dp[i+1] = dp[i] + max(abs(points[i][0]), abs(points[i][1]))\n        visited[i] = False\n    for i in range(n):\n        if dp[i+1] == dp[0]:\n            for j in range(i+1, n):\n                if visited[j] == False and abs(points[j][1] - points[i][1]) <= 1 and abs(points[j][0] - points[i][0]) <= 1:\n                    visited[j] = True\n                    dp[j+1] = min(dp[j+1], dp[i] + max(abs(points[j][0]), abs(points[j][1])))\n    return dp[-1]"
    },
    {
        "number": 4438,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    points.sort()\n    levels = [[] for _ in range(1000)]\n    for i, (x, y) in enumerate(points):\n        levels[max(x, y)].append(i)\n    visited = set()\n    total_distance = 0\n    for level in levels:\n        for i in level:\n            if i in visited:\n                continue\n            visited.add(i)\n            for j in levels[max(points[i][0], points[i][1])]:\n                if j not in visited:\n                    total_distance += abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1])\n    return str(total_distance)\n\nwith open('input.txt', 'r') as f:\n    input_data = f.read()\n    print(solution(input_data))"
    },
    {
        "number": 4438,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    n = int(stdin.readline())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n\n    # Calculate the minimum distance\n    dist = float('inf')\n    for i in range(n):\n        x, y = points[i]\n        # Find all points that are at a lower level than the current point\n        lower_level_points = [(x+dx, y+dy) for dx, dy in [(0, 1), (1, 0), (-1, 0), (0, -1)]]\n        lower_level_points = [(x, y) for x, y in lower_level_points if 0 <= x < 2 and 0 <= y < 2]\n        # Calculate the distance from the current point to each of the lower level points\n        lower_level_dist = [abs(x - points[j][0]) + abs(y - points[j][1]) for j, (x, y) in enumerate(lower_level_points)]\n        # Add the minimum distance to the total distance\n        dist += min(lower_level_dist)\n\n    # Return the minimum distance\n    return dist"
    },
    {
        "number": 4438,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        points.append((x, y))\n    \n    points.sort(key=lambda p: max(p))\n    \n    visited = set()\n    distances = {0: 0}\n    for x, y in points:\n        level = max(x, y)\n        if level not in visited:\n            visited.add(level)\n            for i in range(level):\n                distances[level] = min(distances.get(level, float('inf')), distances.get(i, float('inf')) + 1)\n    \n    return distances[max(visited)]"
    },
    {
        "number": 4438,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    max_level = max(max(p[0], p[1]) for p in points)\n    visited = set()\n    total_distance = 0\n    for level in range(max_level, 0, -1):\n        level_points = [p for p in points if max(p[0], p[1]) == level]\n        for p in level_points:\n            if p in visited:\n                continue\n            visited.add(p)\n            total_distance += 4 * level ** 2\n            for i in range(-1, 2):\n                for j in range(-1, 2):\n                    if i == 0 and j == 0:\n                        continue\n                    if (x, y) := (p[0] + i, p[1] + j) in level_points:\n                        total_distance += abs(i) + abs(j)\n    return total_distance\n\nassert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == 15\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == 9"
    },
    {
        "number": 4439,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    if A == B:\n        return str(3-A)\n    else:\n        return str(A)"
    },
    {
        "number": 4439,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return str(3 - a)\n    elif a == 1 and b == 2:\n        return '2'\n    elif a == 2 and b == 1:\n        return '2'\n    elif a == 2 and b == 3:\n        return '1'\n    elif a == 3 and b == 2:\n        return '1'\n    else:\n        return '3'"
    },
    {
        "number": 4439,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a == b:\n        return str(3 - a)\n    else:\n        return str(a)"
    },
    {
        "number": 4439,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(3 - (a + b))\n\nprint(solution(input()))"
    },
    {
        "number": 4439,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return str(3 - a)\n    else:\n        return str(b)"
    },
    {
        "number": 4439,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a == 3 and b == 1:\n        return \"2\"\n    elif a == 1 and b == 2:\n        return \"2\"\n    elif a == 2 and b == 3:\n        return \"2\"\n    else:\n        return \"None\""
    },
    {
        "number": 4439,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return str(A+B)\n    return str(A)\n\nprint(solution(input()))"
    },
    {
        "number": 4439,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1 or a == 2:\n        return str(2)\n    else:\n        return str(3)"
    },
    {
        "number": 4439,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return \"1\"\n    elif a == 1 or a == 3:\n        return \"2\"\n    else:\n        return \"3\""
    },
    {
        "number": 4439,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 2 or A == 3:\n        return '1'\n    else:\n        return '2'"
    },
    {
        "number": 4440,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = float(stdin)\n\n    max_volume = L / 3.0  # Initialize the maximum volume as the sum of the smaller two sides divided by 3\n    max_width = max_volume / L * 2  # Initialize the maximum width as twice the volume divided by the sum of the dimensions\n\n    # Loop through all possible combinations of dimensions and update the maximum volume and width if a better combination is found\n    for i in range(1, int(L / 2) + 1):\n        for j in range(i + 1, int(L / 2) + 1):\n            if i + j <= L and L - i - j <= L:  # Check if the sum of the dimensions is less than or equal to L\n                volume = i * j * (L - i - j)\n                width = 2 * (L - i - j) / (i + j)\n                if volume > max_volume:\n                    max_volume = volume\n                    max_width = width\n\n    return f\"{max_volume:.10f}\"  # Return the maximum volume with 10 decimal places\n"
    },
    {
        "number": 4440,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    L = float(stdin.strip())\n    vol = 0\n    # We can use the Pythagorean theorem to find the maximum side length\n    # of the rectangular cuboid whose sum of the dimensions is L.\n    for i in range(1, int(L**0.5)+1):\n        for j in range(1, int(L**0.5)+1):\n            if i**2 + j**2 <= L**2:\n                # Calculate the volume of the rectangular cuboid\n                # whose dimensions are i, j, and L-i-j\n                vol = max(vol, i*j*(L-i-j))\n    return f'{vol:.10f}'"
    },
    {
        "number": 4440,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    L = float(stdin)\n    a, b, c = 1, 1, 1\n    while a + b + c <= L:\n        a += 0.5\n        b += 0.5\n        c += 0.5\n    return \"{:.6f}\".format(a * b * c)\n\nprint(solution(\"3\")) # Output: 1.000000"
    },
    {
        "number": 4440,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    L = float(stdin)\n\n    # find maximum possible volume of a rectangular cuboid whose sum of the dimensions (not necessarily integers) is L\n    max_volume = L / 3\n\n    # print output\n    return f\"{max_volume:.10f}\""
    },
    {
        "number": 4440,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    L = float(stdin)\n    vol = L/3\n    return f\"{vol:.10f}\""
    },
    {
        "number": 4440,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    L = float(stdin)\n    max_volume = 0\n    for i in range(1, int(L) + 1):\n        for j in range(1, int(L) + 1):\n            for k in range(1, int(L) + 1):\n                if i + j + k == L:\n                    volume = i * j * k\n                    if volume > max_volume:\n                        max_volume = volume\n    return str(max_volume) + '\\n'\n\nwith open('input.txt', 'r') as f:\n    with open('output.txt', 'w') as o:\n        o.write(solution(f.read()))"
    },
    {
        "number": 4440,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    L = float(stdin)\n    if L == 0:\n        return str(0)\n    if L <= 1:\n        return str(1)\n    d = L/3\n    v = L**2\n    for i in range(1, int(L)+1):\n        if L%i == 0:\n            x = L/i\n            y = i\n            z = L/x\n            if x <= y <= z:\n                v = max(v, (x*y*z))\n            if y <= x <= z:\n                v = max(v, (x*y*z))\n            if z <= x <= y:\n                v = max(v, (x*y*z))\n    return str(v)"
    },
    {
        "number": 4440,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    L = float(stdin)\n    max_volume = (L*(L+1))/2\n    print(\"{:.10f}\".format(max_volume))\n    return \"\""
    },
    {
        "number": 4440,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    L = float(stdin.readline().strip())\n    v = (L/3)**(1/3)\n    return \"{:.10f}\".format(v)"
    },
    {
        "number": 4440,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    L = float(stdin.strip())\n    x = L/3\n    y = L/3\n    z = L/3\n    while x*y*z > L:\n        if x*y > z:\n            y -= 1\n        elif y*z > x:\n            x -= 1\n        else:\n            z -= 1\n    return f\"{x} {y} {z}\""
    },
    {
        "number": 4441,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    if N == 1:\n        return \"Hello World\"\n    else:\n        A, B = map(int, stdin.readline().split())\n        return str(A+B)"
    },
    {
        "number": 4441,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"Hello World\"\n    else:\n        a = int(stdin.strip())\n        b = int(stdin.strip())\n        return str(a+b)"
    },
    {
        "number": 4441,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin and parse it\n    n = int(stdin)\n    if n == 1:\n        return \"Hello World\"\n    elif n == 2:\n        # Read input for A and B\n        a = int(input())\n        b = int(input())\n        return str(a + b)\n    else:\n        raise ValueError(\"Invalid input\")"
    },
    {
        "number": 4441,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    age = int(stdin.strip())\n    if age == 1:\n        return \"Hello World\"\n    elif age == 2:\n        A = int(input())\n        B = int(input())\n        return str(A+B)\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4441,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"Hello World\"\n    else:\n        a = int(stdin)\n        b = int(stdin)\n        return str(a+b)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4441,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n == 1:\n        return \"Hello World\"\n    else:\n        a = int(stdin.readline().strip())\n        b = int(stdin.readline().strip())\n        return str(a + b)"
    },
    {
        "number": 4441,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    if n == 1:\n        return \"Hello World\"\n    else:\n        a = int(stdin.strip())\n        b = int(stdin.strip())\n        return str(a+b)"
    },
    {
        "number": 4441,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 1:\n        return \"Hello World\\n\"\n    else:\n        a = int(stdin.readline())\n        b = int(stdin.readline())\n        return f\"{a+b}\\n\""
    },
    {
        "number": 4441,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 1:\n        return \"Hello World\"\n    else:\n        a = int(stdin.readline())\n        b = int(stdin.readline())\n        return str(a + b)"
    },
    {
        "number": 4441,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"Hello World\"\n    else:\n        a = int(stdin.strip())\n        b = int(stdin.strip())\n        return str(a+b)"
    },
    {
        "number": 4442,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a_str = str(a) * b\n    b_str = str(b) * a\n    if a_str < b_str:\n        return a_str\n    else:\n        return b_str\n\n\ndef"
    },
    {
        "number": 4442,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s1 = a * str(a) + b * str(a)\n    s2 = b * str(b) + a * str(b)\n    if s1 < s2:\n        return s1\n    else:\n        return s2\n"
    },
    {
        "number": 4442,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    s1 = str(a) * b\n    s2 = str(b) * a\n    return min(s1, s2)"
    },
    {
        "number": 4442,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    string_a = a * b\n    string_b = b * a\n    \n    if string_a < string_b:\n        return string_a\n    else:\n        return string_b"
    },
    {
        "number": 4442,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    a, b = map(int, stdin.split())\n\n    # Concatenate the two strings\n    s1 = a * b\n    s2 = b * a\n\n    # Check which string is lexicographically smaller\n    if s1 < s2:\n        return s1\n    else:\n        return s2"
    },
    {
        "number": 4442,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s1 = str(a) * b\n    s2 = str(b) * a\n    if s1 < s2:\n        return s1\n    else:\n        return s2"
    },
    {
        "number": 4442,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    num_a = str(a)\n    num_b = str(b)\n    string_a = num_a * b\n    string_b = num_b * a\n    if string_a < string_b:\n        return string_a\n    else:\n        return string_b"
    },
    {
        "number": 4442,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    a, b = map(int, stdin.split())\n\n    # concatenate a copies of a and b copies of b\n    string_a = a * str(a)\n    string_b = b * str(b)\n\n    # check which string is smaller lexicographically\n    if string_a < string_b:\n        return string_a\n    elif string_a > string_b:\n        return string_b\n    else:\n        # if the two strings are equal, return one of them\n        return string_a"
    },
    {
        "number": 4442,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    a_str = str(a) * b\n    b_str = str(b) * a\n    if a_str < b_str:\n        return a_str\n    else:\n        return b_str"
    },
    {
        "number": 4442,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s1 = a * str(b)\n    s2 = b * str(a)\n    return s1 if s1 < s2 else s2"
    },
    {
        "number": 4443,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.strip()\n    if c == 'z':\n        return 'a'\n    else:\n        return chr(ord(c) + 1)"
    },
    {
        "number": 4443,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Prints the letter that follows C in alphabetical order.\n\n    Args:\n        stdin: A string representing the input C.\n\n    Returns:\n        A string representing the letter that follows C in alphabetical order.\n\n    Raises:\n        ValueError: If the input is not a lowercase English letter or is z.\n    \"\"\"\n    if len(stdin)!= 1 or not stdin.isalpha() or stdin == 'z':\n        raise ValueError('Input must be a lowercase English letter that is not z.')\n\n    if stdin =='m':\n        return 'n'\n\n    if stdin == 'n':\n        return 'o'\n\n    return chr(ord(stdin) + 1)\n"
    },
    {
        "number": 4443,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.strip()\n    if c == 'z':\n        return 'b'\n    else:\n        return chr(ord(c) + 1)"
    },
    {
        "number": 4443,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.strip()\n    if c == 'z':\n        return 'a'\n    else:\n        return chr(ord(c)+1)"
    },
    {
        "number": 4443,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.strip()\n    if c == 'z':\n        return 'b'\n    else:\n        return chr(ord(c) + 1)"
    },
    {
        "number": 4443,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin[0]\n    return chr(ord(c) + 1)"
    },
    {
        "number": 4443,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.strip().lower()\n    if c == 'z':\n        return 'no letter follows z'\n    else:\n        return chr(ord(c) + 1)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4443,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin[0]\n    if c == 'z':\n        return 'b'\n    return chr(ord(c) + 1)\n\ndef"
    },
    {
        "number": 4443,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.strip()\n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    index = alphabet.index(c)\n    return alphabet[index+1]\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4443,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes a string input which is the lowercase English letter C that is not z.\n    It returns the letter that follows C in alphabetical order.\n\n    :param stdin: A string input which is the lowercase English letter C that is not z.\n    :return: Returns the letter that follows C in alphabetical order.\n    \"\"\"\n    c = stdin.strip()\n    if c == 'z':\n        return 'no letter follows z'\n    else:\n        return chr(ord(c)+1)\n"
    },
    {
        "number": 4444,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    return T + S"
    },
    {
        "number": 4444,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return t + s"
    },
    {
        "number": 4444,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return t+s"
    },
    {
        "number": 4444,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    return t + s"
    },
    {
        "number": 4444,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return t + s"
    },
    {
        "number": 4444,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return t + s"
    },
    {
        "number": 4444,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split()\n    return T + S"
    },
    {
        "number": 4444,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return t + s"
    },
    {
        "number": 4444,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    s, t = stdin.split()\n\n    # Concatenating T and S without space in between\n    result = ''.join(t) + ''.join(s)\n\n    # Printing the resulting string\n    print(result)\n"
    },
    {
        "number": 4444,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    return t + s"
    },
    {
        "number": 4445,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    a = a[1:]\n    while n > 1:\n        if n % 2 == 0:\n            a.remove(min(filter(lambda x: x % 2 == 0 and x!= a[-2], a)))\n        else:\n            a.remove(min(filter(lambda x: x % 2 == 1 and x!= a[-2], a)))\n        n -= 1\n    return sum(a) if a else 0\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4445,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    while len(a) > 1:\n        if len(a) == n:\n            return str(0)\n        elif len(a) == n-1:\n            a.sort()\n            return str(a[-1])\n        else:\n            if a[-1] % 2 == 0:\n                parity = 1\n            else:\n                parity = 0\n            for i in range(len(a)-1, -1, -1):\n                if a[i] % 2 == parity:\n                    a.pop(i)\n                    break\n            parity = 1 - parity\n    return str(a[0])\n"
    },
    {
        "number": 4445,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    if n == 1:\n        return str(a[0])\n\n    even = a[0]\n    odd = None\n\n    for i in range(1, n):\n        if i % 2 == 0:\n            even += a[i]\n        else:\n            if odd is None:\n                odd = a[i]\n            else:\n                even += a[i]\n\n    return str(min(even, odd))"
    },
    {
        "number": 4445,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    result = 0\n    even = 0\n    odd = 0\n    for i in range(n):\n        if i == 0:\n            if a[i] % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            result = a[i]\n        else:\n            if a[i] % 2 == 0:\n                even += 1\n                if a[i] == result:\n                    odd += 1\n                result += a[i]\n            else:\n                odd += 1\n                if a[i] == result:\n                    even += 1\n                result += a[i]\n    if even == odd or even == 0:\n        return str(result)\n    else:\n        return \"Infinity\"\n\nstdin = \"5 1 5 7 8 2\"\nprint(solution(stdin)) # Output: 0"
    },
    {
        "number": 4445,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    ans = sum(a)\n    while len(a) > 1:\n        if len(a) % 2 == 1:\n            ans -= a.pop()\n        else:\n            ans -= a.pop(0)\n    return str(ans)"
    },
    {
        "number": 4445,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    even_sum = sum(filter(lambda x: x % 2 == 0, a))\n    odd_sum = sum(filter(lambda x: x % 2 == 1, a))\n    min_sum = float('inf')\n    while True:\n        if len(a) == 0:\n            break\n        if len(a) == 1:\n            min_sum = 0\n            break\n        if len(a) == 2:\n            min_sum = min(even_sum + odd_sum, min_sum)\n            break\n        if a[-1] % 2 == 1:\n            a.pop()\n            even_sum -= a[-1]\n            odd_sum += a[-1]\n            if len(a) == 2:\n                min_sum = min(even_sum + odd_sum, min_sum)\n                break\n            if a[-2] % 2 == 1:\n                a.pop()\n                even_sum -= a[-1]\n                odd_sum += a[-1]\n                if len(a) == 2:\n                    min_sum = min(even_sum + odd_sum, min_sum)\n                    break\n        else:\n            a.pop()\n            odd_sum -= a[-1]\n            even_sum += a[-1]\n            if len(a) == 2:\n                min_sum = min(even_sum + odd_sum, min_sum)\n                break\n            if a[-2] % 2 == 0:\n                a.pop()\n                odd_sum -= a[-1]\n                even_sum += a[-1]\n                if len(a) == 2:\n                    min_sum = min(even_sum + odd_sum, min_sum)\n                    break\n    return str(min_sum)"
    },
    {
        "number": 4445,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    i = 0\n    parity = 0\n    deleted = 0\n    while i < len(a):\n        if deleted % 2 == parity:\n            del a[i]\n            deleted += 1\n            parity = 1 - parity\n        else:\n            i += 1\n    \n    return sum(a)\n\nprint(solution(open('input.txt')))\n"
    },
    {
        "number": 4445,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    ans = float('inf')\n    for i in range(2**n):\n        cur_ans = sum(a[j] for j in range(n) if not (i & (1 << j)))\n        ans = min(ans, cur_ans)\n    return str(ans) if ans!= float('inf') else '-1'"
    },
    {
        "number": 4445,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    if n == 1:\n        return 0\n    \n    if n == 2:\n        return min(a[0], a[1])\n    \n    parity = 0\n    \n    for i in range(n):\n        if i % 2 == 0:\n            parity = 1 - parity\n        else:\n            if parity == 0 and a[i] % 2 == 0:\n                return 0\n            elif parity == 1 and a[i] % 2 == 1:\n                return 0\n    \n    return sum(a) - a[n-1]\n    \n\nstdin = \"\"\"\n5\n1 5 7 8 2\n\"\"\"\n\nprint(solution(stdin)) # Output: 0\n\n\nstdin = \"\"\"\n6\n5 1 2 4 6 3\n\"\"\"\n\nprint(solution(stdin)) # Output: 0\n\n\nstdin = \"\"\"\n2\n1000000 1000000\n\"\"\"\n\nprint(solution(stdin)) # Output: 1000000"
    },
    {
        "number": 4445,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    removed = 0\n    min_sum = sum(a)\n    if n == 1:\n        return str(a[0])\n    while n > 1:\n        parity = a[-2] % 2\n        if parity == 0:\n            for i in range(len(a)-1, -1, -1):\n                if a[i] % 2 == 0:\n                    removed += a[i]\n                    del a[i]\n                    n -= 1\n                    break\n        else:\n            for i in range(len(a)-1, -1, -1):\n                if a[i] % 2 == 1:\n                    removed += a[i]\n                    del a[i]\n                    n -= 1\n                    break\n        if n == 1:\n            return str(removed)\n        min_sum = min(min_sum, removed)\n    return str(min_sum)"
    },
    {
        "number": 4446,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split()[0:4])\n    h = list(map(int, stdin.split()[4:]))\n    dp = [0] * (k + 1)\n    for i in range(n):\n        for j in range(min(i, k), -1, -1):\n            dp[j] = max(dp[j], dp[j - 1] + h[i] if j == 0 else dp[j - 1] + a + max(0, b - a))\n    return str(dp[k])"
    },
    {
        "number": 4446,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.readline().split())\n    h = list(map(int, stdin.readline().split()))\n\n    dp = [[0]*(k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            if h[i-1] > 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + h[i-1])\n            if h[i-1] > 0 and j > 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j])\n    return dp[n][k]"
    },
    {
        "number": 4446,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.readline().split())\n    h = list(map(int, stdin.readline().split()))\n    dp = [[float('inf')] * (k+1) for _ in range(n+1)]\n    dp[1][0] = 0\n    for i in range(2, n+1):\n        for j in range(k+1):\n            dp[i][j] = dp[i-1][j]\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j-1] + h[i-1])\n            if j > 1:\n                dp[i][j] = min(dp[i][j], dp[i-2][j-2] + max(h[i-1]-a, 0))\n            dp[i][j] = min(dp[i][j], h[i-1])\n    return dp[n][k]"
    },
    {
        "number": 4446,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split()[0:4])\n    h = list(map(int, stdin.split()[4:]))\n    dp = [[0 for _ in range(k+1)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][0] = max(h[i] - b, 0)\n\n    for i in range(n):\n        for j in range(1, k+1):\n            dp[i][j] = max(dp[i-1][j-1] - a, dp[i-1][j])\n\n    return str(dp[-1][k])"
    },
    {
        "number": 4446,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split()[0:4])\n    h = list(map(int, stdin.split()[4:]))\n\n    # dp[i][j] means the max points you can gain if you start from i and use k j-1 times on the rest\n    dp = [[0] * (k+1) for _ in range(n)]\n\n    # dp[i][0] is always 0\n    for i in range(n):\n        dp[i][0] = 0\n\n    # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + (h[i-1] - b) // a + 1)\n    # the first term is the max points if you start from i-1 and don't use the technique\n    # the second term is the max points if you start from i-1 and use j-1 times on the rest and hit the monster\n    # we add 1 to the result because we are using the secret technique\n    # we divide by a because we hit the monster by a hp\n    for j in range(1, k+1):\n        for i in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + (h[i-1] - b) // a + 1)\n\n    return str(dp[n-1][k])"
    },
    {
        "number": 4446,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.strip().split())\n    health_points = list(map(int, stdin.strip().split()))\n    \n    max_points = 0\n    for i in range(n):\n        if health_points[i] > 0:\n            max_points += 1\n            for j in range(k):\n                if i+j+1 >= n:\n                    break\n                max_points += 1\n                health_points[i+j+1] -= b\n                if health_points[i+j+1] <= 0:\n                    break\n    \n    return str(max_points)"
    },
    {
        "number": 4446,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split())\n    h = list(map(int, stdin.readline().split()))\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-2][j]\n    print(dp)\n    ans = 0\n    for i in range(n):\n        if i < k:\n            ans += dp[i][i+1]\n        else:\n            ans += dp[i][k]\n    return str(ans)\n\nprint(solution(\"6 2 3 3\\n7 10 50 12 1 8\"))\nprint(solution(\"1 1 100 99\\n100\"))\nprint(solution(\"7 4 2 1\\n1 3 5 4 2 7 6\"))"
    },
    {
        "number": 4446,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split())\n    health_points = list(map(int, stdin.split()))\n    \n    points = 0\n    for i in range(n):\n        if k == 0:\n            points += health_points[i] // (a + b)\n            continue\n        \n        if i % 2 == 0:\n            if health_points[i] <= a + b:\n                points += 1\n            else:\n                points += health_points[i] // (a + b)\n            health_points[i] = max(0, health_points[i] - a)\n        else:\n            if health_points[i] <= a + b:\n                points += 1\n            else:\n                points += health_points[i] // (a + b)\n            health_points[i] = max(0, health_points[i] - b)\n        \n        k -= 1\n        \n    return points"
    },
    {
        "number": 4446,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.readline().strip().split())\n    h = list(map(int, stdin.readline().strip().split()))\n    \n    dp = [[0] * (k+1) for _ in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n            if j == 1 or i-j < 0:\n                dp[i][j] += h[i-1]\n            else:\n                dp[i][j] += h[i-1] - b\n                \n    return dp[n][k]\n    \n\ndef"
    },
    {
        "number": 4446,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = list(map(int, stdin.strip().split()))\n    h = list(map(int, stdin.strip().split()))\n\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    dp[1][0] = max(0, h[1] - a - b)\n    dp[2][0] = max(0, h[2] - a - b)\n\n    for i in range(3, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = max(dp[i-1][j-1] + max(0, h[i] - a - b), dp[i-2][j-1] + max(0, h[i] - a - b))\n\n    return str(dp[-1][-1])"
    },
    {
        "number": 4447,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Calculate the remainders of each element in a\n    remainders = [i % m for i in a]\n\n    # Initialize count array with 0\n    count = [0] * m\n\n    # Count the number of elements with each remainder\n    for r in remainders:\n        count[r] += 1\n\n    # Calculate the required number of moves\n    moves = 0\n    for c in count:\n        moves += abs(c - n // m)\n\n    # Print the minimum number of moves\n    print(moves)\n\n    # Generate the resulting array\n    result = [0] * n\n    for i in range(n):\n        result[i] = a[i] + (m - remainders[i])\n        if result[i] > 10 ** 18:\n            result[i] = 10 ** 18\n\n    # Print the resulting array\n    print(*result)\n\n    return \"\""
    },
    {
        "number": 4447,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    count = [0] * m\n    for i in a:\n        count[i % m] += 1\n\n    min_moves = n\n    for i in range(m):\n        if count[i] > 0:\n            min_moves = min(min_moves, n - count[i])\n\n    if min_moves == n:\n        return str(min_moves) + '\\n' +''.join(map(str, a))\n\n    for i in range(m):\n        if count[i] == 0:\n            continue\n        j = i\n        while j < m and count[j] == 0:\n            j += 1\n        if j == m:\n            return \"impossible\"\n        a[a.index(j, a.index(j) + 1)] += m\n        count[i] -= 1\n        count[j] += 1\n        min_moves -= 1\n        if count[i] == 0 or count[j] == 0:\n            if count[i] == 0:\n                j = i\n                while j < m and count[j] == 0:\n                    j += 1\n                a[a.index(j, a.index(j) + 1)] += m\n            if count[j] == 0:\n                i = j - 1\n                while i >= 0 and count[i] == 0:\n                    i -= 1\n                a[a.index(i, a.index(i) + 1)] += m\n            count[i % m] -= 1\n            count[j % m] += 1\n            min_moves -= 1\n            if count[i % m] == 0 or count[j % m] == 0:\n                if count[i % m] == 0:\n                    j = i % m\n                    while j < m and count[j] == 0:\n                        j += 1\n                    a[a.index(j, a.index(j) + 1)] += m\n                if count[j % m] == 0:\n                    i = j - 1\n                    while i >= 0 and count[i] == 0:\n                        i -= 1\n                    a[a.index(i, a.index(i) + 1)] += m\n                count[i % m] -= 1\n                count[j % m] += 1\n                min_moves -= 1\n\n    return str(min_moves) + '\\n' +''.join(map(str, a))"
    },
    {
        "number": 4447,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.readline().split()))\n    c = [0] * m\n    for i in range(n):\n        c[a[i] % m] += 1\n    for i in range(1, m):\n        c[i] += c[i - 1]\n    ans = n\n    for i in range(m):\n        ans = min(ans, max(c[i], n - c[i]))\n    for i in range(m):\n        if c[i] < n // m:\n            ans = min(ans, n // m - c[i] + c[i + 1])\n    if ans == n:\n        return f\"{ans}\\n{' '.join(map(str, a))}\"\n    for i in range(n):\n        for j in range(m):\n            if (a[i] + j) % m == 0 and c[(a[i] + j) % m] - 1 <= c[j]:\n                a[i] += j\n                c[a[i] % m] -= 1\n                c[(a[i] - j) % m] += 1\n                ans -= 1\n                if ans == 0:\n                    return f\"{ans}\\n{' '.join(map(str, a))}\"\n                j = 0"
    },
    {
        "number": 4447,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    remainders = [0] * m\n    for i in range(n):\n        remainders[a[i] % m] += 1\n\n    min_moves = n\n    for r in range(m):\n        if remainders[r] > n // m:\n            min_moves = min(min_moves, n - remainders[r] * r)\n\n    for r in range(m):\n        if remainders[r] < n // m:\n            min_moves = min(min_moves, n - remainders[r] * r)\n\n    for r in range(m):\n        if remainders[r] > n // m:\n            remainders[r] -= n // m\n        else:\n            remainders[r] = 0\n\n    a = [x - min_moves * (x // m) for x in a]\n    return f\"{min_moves}\\n{' '.join(map(str, a))}\""
    },
    {
        "number": 4447,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    \n    count = [0] * m\n    for x in a:\n        count[x % m] += 1\n    \n    min_moves = n\n    for x in count:\n        min_moves = min(min_moves, n - x)\n        \n    if min_moves == n:\n        return \"0\\n\" + \" \".join(map(str, a))\n    \n    for i in range(n):\n        if count[a[i] % m] < n // m:\n            count[a[i] % m] += 1\n            min_moves -= 1\n            break\n            \n    return str(min_moves) + \"\\n\" + \" \".join(map(str, a))\n"
    },
    {
        "number": 4447,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    count = [0] * m\n    for num in a:\n        count[num % m] += 1\n    \n    moves = 0\n    for i in range(m):\n        diff = count[i] - (n // m)\n        if diff > 0:\n            moves += diff\n            for j in range(n):\n                a[j] += (j + 1) // m\n            count = [0] * m\n            for num in a:\n                count[num % m] += 1\n            break\n    \n    print(moves)\n    print(' '.join(map(str, a)))\n    return ''"
    },
    {
        "number": 4447,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Calculate c_r\n    c = [0] * m\n    for x in a:\n        c[x % m] += 1\n\n    # Calculate min moves\n    moves = 0\n    for i in range(m):\n        if c[i] < n // m:\n            moves += n // m - c[i]\n            c[i] = n // m\n\n    # Print result\n    print(moves)\n    if moves > 0:\n        for i in range(m):\n            c[i] = c[i] * (n // m) // c[(i + 1) % m]\n        print(' '.join(map(str, c)))\n    else:\n        print(' '.join(map(str, a)))"
    },
    {
        "number": 4447,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    c = [0] * m\n    for i in range(n):\n        c[a[i] % m] += 1\n    ans = n\n    for i in range(m):\n        ans = min(ans, n - c[i])\n    if ans == n:\n        print(0)\n        print(*a)\n        return\n    for i in range(n):\n        if a[i] % m == ans:\n            a[i] += 1\n            ans += 1\n            if ans == m:\n                break\n    print(ans)\n    print(*a)\n    return"
    },
    {
        "number": 4447,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    def count(r):\n        return sum(1 for x in a if x % m == r)\n    \n    c = [count(r) for r in range(m)]\n    \n    move = 0\n    for i in range(n):\n        if c[a[i] % m] == n // m:\n            continue\n        for j in range(m):\n            if (a[i] + 1) % m == j and c[(a[i] + 1) % m] < c[j]:\n                a[i] += 1\n                move += 1\n                c[a[i] % m] -= 1\n                c[j] += 1\n                break\n    \n    return move + 1,''.join(map(str, a))\n\ndef"
    },
    {
        "number": 4447,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    c = [0] * m\n    for i in a:\n        c[i % m] += 1\n    moves = 0\n    for i in range(m):\n        if c[i] < n // m:\n            moves += n // m - c[i]\n            c[i] = n // m\n    print(moves)\n    if moves > 0:\n        for i in range(n):\n            a[i] = (a[i] + moves) % m\n        print(' '.join(map(str, a)))\n    else:\n        print(' '.join(map(str, a)))\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n\nsolution(stdin)"
    },
    {
        "number": 4448,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    k = list(map(int, stdin.split()[2:]))\n    special = []\n    for i in range(m):\n        special.append(list(map(int, stdin.readline().split())))\n    ans = 0\n    for i in range(1001):\n        total_burles = 0\n        for j in range(n):\n            if k[j] == 0:\n                continue\n            if i == special[j][0]:\n                total_burles += (k[j] - 1) * 1 + 1\n            else:\n                total_burles += k[j] * 2\n        if total_burles >= 1:\n            ans = i\n            break\n    return str(ans)\n\ndef"
    },
    {
        "number": 4448,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    offers = []\n    for i in range(m):\n        d, t = map(int, stdin.readline().split())\n        offers.append((d, t))\n    burles = 1\n    order = [0] * n\n    for i in range(n):\n        for j in range(k[i]):\n            for offer in offers:\n                if offer[1] == i + 1:\n                    burles += 1\n            order[i] += 1\n            burles += 2\n            if burles > offer[0] and offer[0] > 0:\n                burles -= 1\n                burles += 1\n    return burles - sum(order)\n\nstdin = \"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\"\nprint(solution(stdin)) # Output: 8\n\nstdin = \"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\"\nprint(solution(stdin)) # Output: 20"
    },
    {
        "number": 4448,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    special_offers = []\n    for _ in range(m):\n        d, t = map(int, stdin.readline().split())\n        special_offers.append((d, t))\n\n    # dp[i][j] = min day when can buy all microtransactions of type j\n    dp = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        dp[0][i] = 0\n\n    # iterate over special offers\n    for day, type_id in special_offers:\n        for i in range(n):\n            dp[day][i] = min(dp[day][i], dp[day-1][i])\n            if type_id == i:\n                dp[day][i] = min(dp[day][i], dp[day-1][i]+1)\n\n    # iterate over days\n    for day in range(1, n):\n        # iterate over types\n        for type_id in range(n):\n            # iterate over copies of this type\n            for copies in range(k[type_id]):\n                # iterate over types\n                for next_type_id in range(n):\n                    # cost to buy this microtransaction\n                    cost = 2 if next_type_id == type_id else 1\n\n                    # check if this microtransaction is on sale\n                    on_sale = False\n                    for offer_day, offer_type in special_offers:\n                        if offer_day == day and offer_type == type_id:\n                            on_sale = True\n                            break\n\n                    # if microtransaction is not on sale, add cost to total cost\n                    if not on_sale:\n                        dp[day][next_type_id] = min(dp[day][next_type_id], dp[day-1][type_id] + cost)\n                    else:\n                        dp[day][next_type_id] = min(dp[day][next_type_id], dp[day-1][type_id] + 1)\n\n    # return min day when can buy all microtransactions\n    return min(dp[n-1])"
    },
    {
        "number": 4448,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    k = list(map(int, stdin.split()[2:2+n]))\n    d_t = []\n    for i in range(m):\n        d, t = map(int, stdin.split()[2*i+2:2*i+4])\n        d_t.append((d,t))\n    d_t.sort()\n    ans = 0\n    burles = 0\n    for i in range(m):\n        d, t = d_t[i]\n        if burles >= k[t-1] * (2 if d <= 7 else 1):\n            continue\n        burles += k[t-1] * (2 if d <= 7 else 1)\n        ans = max(ans, d)\n    return str(ans)\n\nassert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\""
    },
    {
        "number": 4448,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.readline().split()))\n    special_offers = []\n    for _ in range(m):\n        d, t = map(int, stdin.readline().split())\n        special_offers.append((d, t))\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        for offer in special_offers:\n            if i == offer[1]:\n                dp[i] = min(dp[i], dp[i - 1] + offer[0])\n        for j in range(1, k[i] + 1):\n            dp[i] = min(dp[i], dp[i - 1] + (2 if j > 1 or i == 1 else 1) + j * 2)\n    return dp[n]"
    },
    {
        "number": 4448,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    k = list(map(int, stdin.strip().split()))\n    \n    dp = [float('inf')]*1001\n    dp[0] = 0\n    \n    for i in range(n):\n        for j in range(1001):\n            if dp[j-2]!= float('inf'):\n                dp[j] = min(dp[j], dp[j-2] + 1)\n            if j >= k[i]*2:\n                dp[j] = min(dp[j], dp[j-k[i]*2] + 1)\n                \n    for i in range(m):\n        d, t = map(int, stdin.strip().split())\n        dp[d-1] = min(dp[d-1], dp[d-1+1] + 1)\n        dp[d-1+t*2-2] = min(dp[d-1+t*2-2], dp[d-1+t*2-2+1] + 1)\n        \n    return -1 if dp[1000] == float('inf') else dp[1000]"
    },
    {
        "number": 4448,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    special_offers = []\n    for _ in range(m):\n        d, t = map(int, stdin.readline().split())\n        special_offers.append((d, t))\n    burles = 0\n    for i in range(n):\n        burles += k[i] * 2\n    for day, t in special_offers:\n        burles -= k[t-1]\n        if burles < 0:\n            return \"Impossible\"\n        burles += 1\n    return burles // 2"
    },
    {
        "number": 4448,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    offers = []\n    for _ in range(m):\n        d, t = map(int, stdin.readline().split())\n        offers.append((d, t))\n    burles = 1\n    for i in range(n):\n        burles += k[i] * 2\n    best_day = 1\n    for offer in offers:\n        if offer[1] > 0:\n            burles -= 1\n        if offer[1] == n:\n            burles -= 2\n        if burles < 0:\n            break\n        if burles >= 2:\n            if burles >= 1 and offer[1] > 0:\n                burles -= 1\n            if burles >= 1 and offer[1] == n:\n                burles -= 2\n            if burles < 0:\n                break\n            best_day = max(best_day, offer[0])\n    return best_day if burles >= 0 else -1"
    },
    {
        "number": 4448,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    special_offers = []\n    for _ in range(m):\n        day, type = map(int, stdin.readline().split())\n        special_offers.append((day, type))\n    days_spent = 0\n    burles_earned = 0\n    microtransactions_ordered = 0\n    for i in range(n):\n        microtransactions_ordered += k[i]\n    while microtransactions_ordered > 0:\n        burles_earned += days_spent * 2\n        for j in range(len(special_offers)):\n            if days_spent == special_offers[j][0]:\n                microtransactions_ordered += 1\n                if special_offers[j][1] < n and k[special_offers[j][1]] > 0:\n                    k[special_offers[j][1]] -= 1\n        days_spent += 1\n        microtransactions_ordered -= 1\n    return burles_earned"
    },
    {
        "number": 4448,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, m = map(int, lines[0].split())\n    ks = list(map(int, lines[1].split()))\n    special_offers = [list(map(int, lines[i+1].split())) for i in range(m)]\n    \n    # create dp array\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + ks[i-1]\n        \n    # dp for special offers\n    for day, t in special_offers:\n        dp[t] = min(dp[t], day)\n        \n    # dp for all microtransactions\n    ans = 0\n    for i in range(1, n+1):\n        ans = max(ans, dp[i])\n        \n    return str(ans)"
    },
    {
        "number": 4449,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = [int(num) for num in stdin.split('\\n')[1:]]\n    for q in range(1, len(queries)+1):\n        n = queries[q-1]\n        stick_lengths = [int(num) for num in stdin.split('\\n')[q+1].split()]\n        if n > len(stick_lengths)//4:\n            print(\"NO\")\n        else:\n            stick_lengths.sort()\n            max_area = 0\n            for i in range(len(stick_lengths)//4):\n                area = stick_lengths[i]*stick_lengths[i+n]*stick_lengths[i+2*n]*stick_lengths[i+3*n]\n                max_area = max(max_area, area)\n            if max_area == 0:\n                print(\"YES\")\n            else:\n                print(\"NO\")"
    },
    {
        "number": 4449,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for i in range(q):\n        n = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().split()]\n        if n > len(a) // 4:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    return \"\"\n\nassert solution(\"\"\"\n5\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n\"\"\".strip()) == \"\"\"\nYES\nNO\nYES\nYES\nNO\n\"\"\".strip()"
    },
    {
        "number": 4449,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        n = int(stdin.readline().strip())\n        stick_lengths = list(map(int, stdin.readline().strip().split()))\n        if n*4 > len(stick_lengths):\n            print(\"NO\")\n        else:\n            stick_lengths.sort()\n            max_area = sum([stick_lengths[i] for i in range(4*n-3, -1, -4)])\n            for i in range(4*n-3, -1, -4):\n                if stick_lengths[i] > stick_lengths[i+1]*2:\n                    break\n                max_area = max(max_area, sum([stick_lengths[j] for j in range(i, i+4)]))\n            if max_area == n*16:\n                print(\"YES\")\n            else:\n                print(\"NO\")"
    },
    {
        "number": 4449,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    q = int(lines[0])\n    for i in range(1, q+1):\n        n = int(lines[i*2-1])\n        sticks = list(map(int, lines[i*2].split()))\n        if n > 4*len(set(sticks)):\n            print(\"NO\")\n        else:\n            print(\"YES\")"
    },
    {
        "number": 4449,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    stick_list = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(4*n):\n        if stick_list[i] >= 2*count:\n            count += 1\n    if count < n:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4449,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if len(set(a))!= 4*n:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    a.sort()\n    for i in range(n-1):\n        if a[i] == a[i+1]:\n            return \"NO\"\n        if a[i] == a[i+1] - 1:\n            return \"YES\"\n    return \"YES\""
    },
    {
        "number": 4449,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    q = int(lines[0])\n    for i in range(1, q+1):\n        n = int(lines[i*2-1])\n        sticks = [int(x) for x in lines[i*2].split()]\n        if len(set(sticks))!= 4*n:\n            print(\"NO\")\n            continue\n        else:\n            print(\"YES\")"
    },
    {
        "number": 4449,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split('\\n')\n    for i in range(1, len(queries), 2):\n        n = int(queries[i])\n        stick_lengths = list(map(int, queries[i+1].split()))\n        if len(stick_lengths)!= 4*n:\n            print(\"NO\")\n        else:\n            stick_lengths.sort()\n            for i in range(4*n):\n                if i % 4 == 0:\n                    if stick_lengths[i+1]!= stick_lengths[i] or stick_lengths[i+2]!= stick_lengths[i] or stick_lengths[i+3]!= stick_lengths[i]:\n                        print(\"NO\")\n                        break\n            else:\n                print(\"YES\")\n    return \"\""
    },
    {
        "number": 4449,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    if n == 1:\n        return \"YES\" if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] else \"NO\"\n    \n    # check if the given sticks can form n rectangles of equal area\n    sticks = set(a[:4])\n    for i in range(4, len(a), 4):\n        for stick in sticks:\n            if a[i] == stick or a[i+1] == stick or a[i+2] == stick or a[i+3] == stick:\n                break\n        else:\n            return \"NO\"\n        sticks.remove(a[i])\n        sticks.remove(a[i+1])\n        sticks.remove(a[i+2])\n        sticks.remove(a[i+3])\n    \n    return \"YES\""
    },
    {
        "number": 4449,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        n = int(stdin.readline().strip())\n        a = stdin.readline().strip().split()\n        a = [int(x) for x in a]\n        if n == 1:\n            print(\"YES\")\n            continue\n        a.sort()\n        a.reverse()\n        if sum(a) % (n*4)!= 0:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    return \"\""
    },
    {
        "number": 4450,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n\n    graph = [[] for _ in range(n+1)]\n\n    for i in range(m):\n        x, y, w = map(int, stdin.split())\n        graph[x].append((y, w))\n        graph[y].append((x, w))\n\n    dist = [float('inf')] * (n+1)\n    dist[1] = 0\n\n    q = [(1, 0)]\n\n    while q:\n        u, d = q.pop(0)\n        for v, w in graph[u]:\n            if dist[v] > dist[u] + w:\n                dist[v] = dist[u] + w\n                q.append((v, dist[v]))\n\n    dist.sort()\n\n    return dist[k-1]\n\ndef"
    },
    {
        "number": 4450,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    graph = [[0 for i in range(n)] for j in range(n)]\n    for i in range(m):\n        x, y, w = map(int, stdin.readline().split())\n        graph[x-1][y-1] = w\n        graph[y-1][x-1] = w\n    d = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        d[i][i] = 0\n        for j in range(i+1, n):\n            if graph[i][j] == 0:\n                d[i][j] = float('inf')\n            else:\n                d[i][j] = graph[i][j]\n                d[j][i] = graph[i][j]\n    dp = [[0 for i in range(n)] for j in range(1 << n)]\n    for i in range(n):\n        dp[1 << i][i] = 1\n    for mask in range(1 << n):\n        for i in range(n):\n            if mask & (1 << i):\n                continue\n            for j in range(n):\n                if mask & (1 << j) or i == j:\n                    continue\n                if dp[mask][i] > dp[mask ^ (1 << j)][j] + d[j][i]:\n                    dp[mask][i] = dp[mask ^ (1 << j)][j] + d[j][i]\n    dist = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if d[i][j]!= 0:\n                dist.append(d[i][j])\n    dist.sort()\n    print(dist[k-1])\n    return ''"
    },
    {
        "number": 4450,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    graph = {i: [] for i in range(1, n+1)}\n    for _ in range(m):\n        x, y, w = map(int, stdin.readline().split())\n        graph[x].append((y, w))\n        graph[y].append((x, w))\n    visited = [False] * (n+1)\n    distances = [float('inf')] * (n+1)\n    distances[1] = 0\n    pq = [(0, 1)]\n    while pq:\n        d, u = heapq.heappop(pq)\n        if visited[u]:\n            continue\n        visited[u] = True\n        if k <= 0:\n            continue\n        k -= 1\n        for v, w in graph[u]:\n            if not visited[v] and distances[u] + w < distances[v]:\n                distances[v] = distances[u] + w\n                heapq.heappush(pq, (distances[v], v))\n    result = sorted(distances[2:])[k-1] if k <= len(distances)-2 else float('inf')\n    return str(result)\n"
    },
    {
        "number": 4450,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    n, m, k = map(int, stdin.readline().strip().split())\n    edges = [list(map(int, line.strip().split())) for line in stdin.readlines()]\n\n    # Initialize the distance matrix with maximum distance\n    dist = [[float('inf')] * (n + 1) for _ in range(n + 1)]\n\n    # Initialize the distance matrix with the given edges\n    for x, y, w in edges:\n        dist[x][y] = w\n        dist[y][x] = w\n\n    # Floyd-Warshall algorithm for shortest path\n    for k in range(n):\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n\n    # Sort the distances in ascending order\n    distances = [dist[i][j] for i in range(1, n + 1) for j in range(i + 1, n + 1)]\n    distances.sort()\n\n    # Print the k-th smallest shortest path\n    return str(distances[k - 1])"
    },
    {
        "number": 4450,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().strip().split())\n    edges = []\n    for i in range(m):\n        x, y, w = map(int, stdin.readline().strip().split())\n        edges.append((x, y, w))\n    adj = [[] for _ in range(n)]\n    for x, y, w in edges:\n        adj[x-1].append((y-1, w))\n        adj[y-1].append((x-1, w))\n    dist = [float('inf')] * n\n    dist[k-1] = 0\n    visited = [False] * n\n    def dfs(u, d):\n        visited[u] = True\n        for v, w in adj[u]:\n            if not visited[v] and dist[v] > dist[u] + w:\n                dist[v] = dist[u] + w\n                dfs(v, dist[v])\n    for i in range(n):\n        if not visited[i]:\n            dfs(i, dist[i])\n    d = [float('-inf')] * (n+1)\n    d[0] = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            d[i+1] = max(d[i+1], dist[j])\n            d[j+1] = max(d[j+1], dist[i])\n    d.sort()\n    return d[k-1]"
    },
    {
        "number": 4450,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = [[float('inf')] * n for _ in range(n)]\n    for _ in range(m):\n        x, y, w = map(int, stdin.split())\n        graph[x-1][y-1] = w\n        graph[y-1][x-1] = w\n    for i in range(n):\n        graph[i][i] = 0\n    for k in range(1, n):\n        for i in range(n):\n            for j in range(n):\n                if graph[i][k]!= float('inf') + graph[k][j]:\n                    graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j])\n    dist = [graph[i][j] for i in range(n) for j in range(i+1, n)]\n    dist.sort()\n    return str(dist[k-1])\n\nprint(solution(input()))"
    },
    {
        "number": 4450,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    graph = [[0] * n for _ in range(n)]\n    for _ in range(m):\n        x, y, w = map(int, stdin.readline().split())\n        x -= 1\n        y -= 1\n        graph[x][y] = graph[y][x] = w\n    dist = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        dist[i][i] = 0\n        for j in range(n):\n            if graph[i][j]!= 0:\n                dist[i][j] = graph[i][j]\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    dist_list = []\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                dist_list.append(dist[i][j])\n    dist_list.sort()\n    return str(dist_list[k - 1])"
    },
    {
        "number": 4450,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = [{} for _ in range(n+1)]\n    for i in range(m):\n        x, y, w = map(int, stdin.split())\n        graph[x][y] = w\n        graph[y][x] = w\n    dp = [[float('inf')]*(n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][i] = 0\n    for k in range(1, n+1):\n        for i in range(1, n+1):\n            for j in range(1, n+1):\n                dp[i][j] = min(dp[i][j], dp[i][k-1] + dp[k-1][j] + graph[i][j])\n    paths = [dp[i][j] for i in range(1, n+1) for j in range(i+1, n+1) if i!= j]\n    paths.sort()\n    return str(paths[k-1])\n\nwith open('input.txt', 'r') as f:\n    input_data = f.read()\n    output_data = solution(input_data)\n    with open('output.txt', 'w') as f:\n        f.write(output_data)"
    },
    {
        "number": 4450,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        x, y, w = map(int, stdin.split())\n        graph[x-1].append((y-1, w))\n        graph[y-1].append((x-1, w))\n    d = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        d[i][i] = 0\n        q = [i]\n        while q:\n            u = q.pop(0)\n            for v, w in graph[u]:\n                if d[u][v] > d[u][u] + w:\n                    d[u][v] = d[u][u] + w\n                    q.append(v)\n    paths = []\n    for i in range(n):\n        for j in range(i+1, n):\n            paths.append(d[i][j])\n    paths.sort()\n    return str(paths[k-1])"
    },
    {
        "number": 4450,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        x, y, w = map(int, stdin.split()[:3])\n        x -= 1\n        y -= 1\n        graph[x].append((y, w))\n        graph[y].append((x, w))\n    inf = float('inf')\n    dist = [inf] * n\n    dist[0] = 0\n    visited = [False] * n\n    queue = [(0, 0)]\n    while queue:\n        d, v = queue.pop(0)\n        if visited[v]:\n            continue\n        visited[v] = True\n        for u, w in graph[v]:\n            if dist[u] > d + w:\n                dist[u] = d + w\n                queue.append((d + w, u))\n    dist = sorted([d for d in dist if d!= inf])\n    return str(dist[k-1])"
    },
    {
        "number": 4451,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    # sort students by skill\n    a.sort()\n    \n    # initialize variables\n    res = float('inf')\n    teams = 1\n    \n    # find optimal teams\n    for i in range(n):\n        # check if adding student to team i will not exceed diversity limit\n        if (n-i-1)//teams < a[i] - a[i-1]:\n            teams += 1\n        else:\n            # calculate diversity for team i\n            div = 0\n            for j in range(i, n-teams+1, teams):\n                div += a[j+teams-1] - a[j]\n            # update result if this team has a lower diversity\n            if div < res:\n                res = div\n                t = [i//teams+1]*teams + [i//teams+1]*(n-i-1)\n                for j in range(i, n-teams+1, teams):\n                    t[j] = i//teams+2\n                t.append((n-teams+1)//teams+1)\n    \n    return f'{res} {teams}\\n' +''.join(map(str, t))"
    },
    {
        "number": 4451,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n\n    # find the max and min skill of each student\n    max_skills = [max(a[:i+1]) for i in range(n)]\n    min_skills = [min(a[:i+1]) for i in range(n)]\n\n    # calculate the diversity of each team\n    teams = []\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i!= j!= k:\n                    team_skills = [a[i], a[j], a[k]]\n                    diversity = max(team_skills) - min(team_skills)\n                    teams.append((diversity, i, j, k))\n\n    # sort the teams by diversity\n    teams.sort(key=lambda x: x[0])\n\n    # divide the students into teams\n    num_teams = 0\n    assigned_teams = [0] * n\n    for diversity, i, j, k in teams:\n        if assigned_teams[i] == assigned_teams[j] == assigned_teams[k] == 0:\n            num_teams += 1\n            assigned_teams[i] = num_teams\n            assigned_teams[j] = num_teams\n            assigned_teams[k] = num_teams\n\n    # calculate the total diversity\n    total_diversity = sum(diversity for diversity, _, _, _ in teams)\n\n    # print the result\n    return f\"{total_diversity} {num_teams}\\n\" + \" \".join(map(str, assigned_teams)) + \"\\n\""
    },
    {
        "number": 4451,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    k, res = 0, float('inf')\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for m in range(j+1, n+1):\n                team = [a[i-1], a[j-1], a[m-1]]\n                if len(set(team)) == len(team):\n                    div = max(team) - min(team)\n                    if div < res:\n                        res = div\n                        k = 1\n                    elif div == res:\n                        k += 1\n                    t = [(i-1)//3, (j-1)//3, (m-1)//3]\n                    if len(set(t)) == len(t):\n                        if all(t[i] == t[i+1] for i in range(len(t)-1)):\n                            return f'{res} {k}\\n{t}\\n'\n    return f'{res} {k}\\n'"
    },
    {
        "number": 4451,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    \n    # sort students by skill\n    sorted_students = sorted(enumerate(a), key=lambda x: x[1])\n    \n    # initialize variables\n    num_teams = 0\n    curr_team = []\n    curr_team_skills = []\n    curr_team_diversity = 0\n    total_diversity = 0\n    \n    # iterate over sorted students and add them to teams\n    for i, skill in sorted_students:\n        # check if current student can be added to current team\n        if curr_team and skill - curr_team_skills[-1] <= curr_team_diversity:\n            curr_team.append(i)\n            curr_team_skills.append(skill)\n            curr_team_diversity = max(curr_team_skills) - min(curr_team_skills)\n        # create new team for current student\n        else:\n            # add current team to total diversity and reset variables\n            total_diversity += curr_team_diversity\n            num_teams += 1\n            \n            curr_team = [i]\n            curr_team_skills = [skill]\n            curr_team_diversity = 0\n    \n    # add last team to total diversity and increment num_teams\n    total_diversity += curr_team_diversity\n    num_teams += 1\n    \n    # print result\n    print(total_diversity, num_teams)\n    print(' '.join(map(str, [len(curr_team)] * n)))\n    \n    # print team assignments\n    teams = [0] * n\n    for i, skill in sorted_students:\n        for j in range(len(curr_team)):\n            if i == curr_team[j]:\n                teams[i] = j + 1\n                break\n    print(' '.join(map(str, teams)))\n    \n    return ''\n"
    },
    {
        "number": 4451,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a.sort()\n    \n    # create the array dp to store the minimum total diversity of the division of students for the first i students\n    dp = [float('inf')] * n\n    \n    # create the array teams to store the team to which the student belong\n    teams = [0] * n\n    \n    # initialize the dp array and the teams array\n    dp[0] = 0\n    teams[0] = 1\n    \n    # fill the dp and teams array\n    for i in range(1, n):\n        dp[i] = dp[i-1] + (a[i] - a[i-1])\n        teams[i] = i % (n-i) + 1\n        \n    res = float('inf')\n    for i in range(1, n):\n        if dp[i] < res:\n            res = dp[i]\n            \n    # find the team to which the student belong\n    k = 1\n    team = []\n    for i in range(1, n):\n        if teams[i] == k:\n            team.append(i)\n        else:\n            k += 1\n            team = [i]\n            \n    # output the result\n    return str(res) +'' + str(k) + '\\n' +''.join(map(str, team))\n\n\nprint(solution('''5\n1 1 3 4 2'''))\nprint(solution('''6\n1 5 12 13 2 15'''))\nprint(solution('''10\n1 2 5 129 185 581 1041 1909 1580 8150'''))"
    },
    {
        "number": 4451,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    # check if there are at least 3 students\n    if n < 3:\n        return \"0 0\"\n    # sort students by skill\n    a.sort()\n    # find optimal teams\n    res = float('inf')\n    for i in range(n-2):\n        # check if current team is feasible\n        if a[i+2] - a[i+1] > a[i+1] - a[i]:\n            # calculate diversity of current team\n            d = max(a[i+2] - a[i+1], a[i+1] - a[i])\n            # check if current team is better than previous best\n            if d + (n-i-3) * (a[i+2] - a[i+1]) < res:\n                res = d + (n-i-3) * (a[i+2] - a[i+1])\n                # calculate division of students into teams\n                teams = [1]*i + [2]*(n-i-3) + [1]*i\n    # return result\n    return f\"{res} {teams.count(2)}\""
    },
    {
        "number": 4451,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    res = float('inf')\n    for i in range(len(a) - 2):\n        l, r = i + 2, len(a)\n        while l < r:\n            mid = (l + r) // 2\n            team_div = max(a[i], a[mid]) - min(a[i], a[mid])\n            if team_div > res:\n                l = mid + 1\n            else:\n                r = mid\n        res = min(res, team_div * (len(a) - i - l))\n    k = res // res // a[-1] + 1\n    t = [0] * n\n    for i in range(n):\n        t[i] = i // (len(a) // k)\n    return f'{res} {k}\\n{\" \".join(map(str, t))}'\n\n\nassert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\""
    },
    {
        "number": 4451,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    max_a = max(a)\n    min_a = min(a)\n    dp = [[float('-inf')] * (max_a + 1) for _ in range(n)]\n    teams = [[] for _ in range(n)]\n    dp[0][a[0]] = 0\n    for i in range(1, n):\n        for j in range(max_a + 1):\n            if dp[i-1][j]!= float('-inf'):\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + j - a[i])\n            dp[i][j] = max(dp[i][j], dp[i-1][j-a[i]] + max_a + 1 - j)\n            if dp[i][j]!= float('-inf'):\n                teams[i].append(j)\n    res = float('inf')\n    for i in range(n):\n        for j in range(i+3, n+1):\n            if j-i < 3:\n                continue\n            team = [teams[k][dp[k].index(max(dp[k]))] for k in range(i, j)]\n            diff = max(team) - min(team)\n            if res > diff:\n                res = diff\n                ans = team\n    return f\"{res} {len(ans)}\\n\" +''.join(map(str, ans))\n"
    },
    {
        "number": 4451,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n\n    # sort students by their skill\n    a.sort()\n\n    # divide students into teams\n    teams = []\n    for i in range(n):\n        # if there is no team with this skill, create a new team\n        if not teams or a[i]!= teams[-1][1]:\n            teams.append([i])\n        else:\n            teams[-1].append(i)\n\n    # calculate team diversity and total diversity\n    max_skills = [a[t[0]] for t in teams]\n    min_skills = [a[t[-1]] for t in teams]\n    team_diversity = [max_skills[i] - min_skills[i] for i in range(len(teams))]\n    total_diversity = sum(team_diversity)\n\n    # find the best division\n    min_total_diversity = total_diversity\n    min_division = None\n    for i in range(1, n):\n        # divide students into i teams\n        teams = []\n        for j in range(0, n, i):\n            teams.append(list(range(j, j+i)))\n\n        # calculate team diversity and total diversity\n        max_skills = [a[t[0]] for t in teams]\n        min_skills = [a[t[-1]] for t in teams]\n        team_diversity = [max_skills[i] - min_skills[i] for i in range(len(teams))]\n        total_diversity = sum(team_diversity)\n\n        # update minimum total diversity and division\n        if total_diversity < min_total_diversity:\n            min_total_diversity = total_diversity\n            min_division = teams\n\n    # print results\n    res = min_total_diversity\n    k = len(min_division)\n    print(res, k)\n    for t in min_division:\n        print(' '.join(map(str, [len(t)] + t)))\n\n    return res, k, min_division"
    },
    {
        "number": 4451,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    div = [a[-1]-a[0]]\n    for i in range(1, n):\n        div.append(max(a[i]-a[i-1], a[n-1]-a[i]))\n    total_div = sum(div)\n    res = float('inf')\n    for i in range(1, n//3+1):\n        for j in combinations(range(n), i):\n            team = [0] * n\n            for k in j:\n                team[k] = 1\n            team_div = sum(div[k] for k in range(n) if team[k])\n            if team_div < res:\n                res = team_div\n                result = team.copy()\n    return str(res) +'' + str(len(result)) + '\\n' +''.join(map(str, result))"
    },
    {
        "number": 4452,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i])\n        count = 1\n        for i in range(1, n):\n            if (n//i)%10!= 0:\n                break\n            count += 1\n        if count > 1:\n            print(count, end=' ')\n            for i in range(count):\n                print(n//(10**(count-i-1)), end=' ')\n        else:\n            print(1, n)"
    },
    {
        "number": 4452,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i])\n        k = 1\n        while n >= 10:\n            n = n // 10\n            k += 1\n        print(k, end=' ')\n        for j in range(k):\n            print(n, end=' ')\n        print()\n    return \"\"\n\nstdin = \"\"\"\n5\n5009\n7\n9876\n10000\n10\n\"\"\""
    },
    {
        "number": 4452,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    output = []\n    for i in range(t):\n        n = int(stdin.readline())\n        if n < 10:\n            output.append(str(n))\n        else:\n            round_nums = []\n            while n > 0:\n                digit = n % 10\n                if digit > 0:\n                    round_nums.append(str(digit))\n                n //= 10\n            if len(round_nums) == 1:\n                output.append(str(round_nums[0]))\n            else:\n                output.append(str(len(round_nums)) + \" \" + \" \".join(round_nums))\n    return \"\\n\".join(output)"
    },
    {
        "number": 4452,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    results = []\n    for line in lines[1:]:\n        n = int(line)\n        digits = [int(d) for d in str(n)]\n        round_digits = [d for d in digits if d > 0 and d < 10]\n        if len(round_digits) == 0:\n            results.append(\"1\\n1\\n{}\\n\".format(n))\n        else:\n            result = \"1\\n\"\n            for d in round_digits:\n                result += str(d) + \"\\n\"\n            remainder = n - sum(round_digits)\n            result += str(remainder)\n            results.append(result)\n    return \"\\n\".join(results)"
    },
    {
        "number": 4452,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        if n == 1:\n            print(1)\n            print(1)\n        else:\n            digits = [int(d) for d in str(n)]\n            k = 0\n            while digits[0] == 0:\n                digits = digits[1:]\n                k += 1\n            if n == sum(digits):\n                print(k)\n                print(n)\n            else:\n                i = 0\n                while i < len(digits) and digits[i] == 0:\n                    i += 1\n                digits = digits[i:]\n                k = 0\n                while digits[0] == 0:\n                    digits = digits[1:]\n                    k += 1\n                n = sum(digits)\n                print(k)\n                for i in range(len(digits)):\n                    print(digits[i], end=' ')\n                print(n)\n\nwith open('round.txt', 'r') as file:\n    solution(file)"
    },
    {
        "number": 4452,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i])\n        if n == 1:\n            print(1)\n            continue\n        for k in range(2, n+1):\n            if k*9**k < n:\n                continue\n            elif k*9**k == n:\n                print(k, end=' ')\n                for j in range(k):\n                    print(9**(k-j-1), end=' ')\n                print()\n            else:\n                break"
    },
    {
        "number": 4452,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    output = ''\n    for num in input_list:\n        n = int(num)\n        k = 1\n        if n > 10:\n            k = n // 10 + 1\n            n = n - k * 10\n        if n == 0:\n            k -= 1\n        output += f'{k}\\n'\n        for i in range(k):\n            if n >= 100:\n                output += f'{n // 100}00 '\n                n = n - (n // 100) * 100\n            if n >= 10:\n                output += f'{n // 10}0 '\n                n = n - (n // 10) * 10\n            if n >= 1:\n                output += f'{n} '\n                n = n - n\n            output += '\\n'\n    return output\n"
    },
    {
        "number": 4452,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    i = 1\n    while i < len(lines):\n        n = int(lines[i])\n        k = 0\n        if n == 1:\n            k = 1\n        else:\n            for i in range(10):\n                if n % 10 == 0:\n                    k += 1\n                    n //= 10\n                elif n % 10!= 0:\n                    break\n        print(k, end=' ')\n        for i in range(k):\n            print(n, end=' ')\n        print()\n        i += 1\n    return \"\""
    },
    {
        "number": 4452,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        if n == 1:\n            print(1)\n            continue\n        ans = \"\"\n        i = 1\n        while True:\n            j = i + 1\n            while j <= n:\n                if j % 10!= 0:\n                    break\n                j *= 10\n            if j > n:\n                ans += f\" {n-i}\"\n                break\n            k = (n-i) // j\n            ans += f\" {k*j} {' '.join([str(j) for j in range(i, i+k)])}\"\n            i = j\n        print(ans.strip())\n\nstdin = \"\"\"\n5\n5009\n7\n9876\n10000\n10\n\"\"\"\n\nsolution(stdin)"
    },
    {
        "number": 4452,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    testcases = stdin.strip().split(\"\\n\")\n    for i, tc in enumerate(testcases):\n        n = int(tc.strip())\n        round_numbers = [str(i) for i in range(1, 10) if n % 10**i == 0]\n        k = len(round_numbers)\n        if k == 0:\n            print(1)\n            print(n)\n        else:\n            print(k)\n            print(\" \".join(round_numbers))\n            for i in range(1, k):\n                print(int(round_numbers[-1]) // 10**(i-1))\n            print(n - sum(int(round_numbers[-1]) // 10**i for i in range(1, k)))"
    },
    {
        "number": 4453,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q, queries = int(stdin.readline()), []\n    for _ in range(q):\n        n = int(stdin.readline())\n        p = list(map(int, stdin.readline().split()))\n        queries.append((n, p))\n\n    for n, p in queries:\n        dp = [0] * n\n        for i in range(n):\n            dp[p[i] - 1] = i + 1\n        for i in range(n):\n            dp[i] = min(dp[i], i - dp[p[i] - 1] + 1)\n        print(*dp)\n\n    return \"\""
    },
    {
        "number": 4453,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function finds the number of days when the book of the ith child is returned back to him for the first time for every i from 1 to n.\n    \"\"\"\n    # Get the number of queries\n    q = int(stdin.readline())\n\n    # Loop through each query\n    for i in range(q):\n        # Get the number of kids in the query\n        n = int(stdin.readline())\n\n        # Get the sequence of kids which will get the book of the i-th kid\n        p = list(map(int, stdin.readline().split()))\n\n        # Initialize a list to store the number of the day the book of the i-th child is returned back to him for the first time\n        a = [0] * n\n\n        # Loop through each day\n        for day in range(1, n + 1):\n            # Get the current position of the i-th kid in the sequence\n            current_position = p.index(i)\n\n            # Check if the book of the i-th kid is returned back to him for the first time in this day\n            if current_position == day - 1:\n                a[i - 1] = day\n\n            # Move the i-th kid to the next position in the sequence\n            p.append(p.pop(current_position))\n\n        # Print the number of the day the book of the i-th child is returned back to him for the first time in this query\n        print(*a)\n\n    return \"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    queries = []\n    n, *p = map(int, stdin.strip().split())\n    queries.append([p])\n    for i in range(1, q):\n        queries.append(map(int, stdin.strip().split()))\n\n    for query in queries:\n        n, p = query\n        dp = [0] * n\n        for i in range(n):\n            dp[p[i]-1] += 1\n        for i in range(n-1):\n            dp[i+1] = max(dp[i+1], dp[i] + 1)\n        print(*dp)\n\n    return \"\""
    },
    {
        "number": 4453,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    queries = stdin.strip().split(\"\\n\")[1:]\n    result = []\n    for query in queries:\n        p = list(map(int, query.split()))\n        days = [0] * n\n        for i in range(n):\n            days[p[i]-1] = i+1\n        result.append(\" \".join(map(str, days)))\n    return \"\\n\".join(result)"
    },
    {
        "number": 4453,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    q = int(lines[0])\n    for i in range(1, q + 1):\n        n = int(lines[i*2-1])\n        p = [int(x) for x in lines[i*2].split()]\n        a = [-1] * n\n        for j in range(n):\n            a[j] = p.index(j+1) + 1\n        print(*a)"
    },
    {
        "number": 4453,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    p = list(map(int, stdin[1].split()))\n    q = int(stdin[2])\n    for i in range(q):\n        query = stdin[3+i].split()\n        kids = list(map(int, query[1:]))\n        days = [0]*n\n        for i in range(n):\n            days[p[i]-1] = i+1\n        for kid in kids:\n            print(days[kid-1], end=' ')\n        print()"
    },
    {
        "number": 4453,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4453,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # initialize input\n    q, n = map(int, stdin.split()[0:2])\n    queries = []\n    for i in range(q):\n        p = list(map(int, stdin.split()[0:n]))\n        queries.append(p)\n\n    # find answer for each query\n    answers = []\n    for p in queries:\n        days = [0] * n\n        for i in range(1, n+1):\n            days[i-1] = days[p[i-1]-1] + 1\n        answers.append(days)\n\n    # print answers for each query\n    for a in answers:\n        print(' '.join(map(str, a)))\n\n    return ''"
    },
    {
        "number": 4453,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        n = int(stdin.readline().strip())\n        p = [int(x) for x in stdin.readline().strip().split()]\n        # count number of days to return book\n        counts = [0] * n\n        for i in range(n):\n            counts[p[i]-1] = i+1\n        # print result\n        print(' '.join(str(x) for x in counts))\n    return ''"
    },
    {
        "number": 4453,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    q = int(stdin.readline().strip())\n    res = []\n    for i in range(q):\n        dp = [0] * n\n        for j in range(n):\n            dp[j] = p[j]\n            for k in range(j):\n                if p[k] == j:\n                    dp[j] = k + 1\n        res.append(dp)\n    for i in res:\n        print(*i)\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 4454,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for query in range(queries):\n        n = int(stdin.readline().strip())\n        prices = list(map(int, stdin.readline().strip().split()))\n        total_price = sum(prices)\n        min_price = min(prices)\n        max_price = max(prices)\n        if total_price == 0:\n            print(0)\n        elif min_price == 0:\n            print(min_price)\n        else:\n            while min_price + 1 < max_price:\n                mid_price = (min_price + max_price) // 2\n                mid_total_price = sum(mid_price if p < mid_price else p for p in prices)\n                if mid_total_price < total_price:\n                    min_price = mid_price\n                else:\n                    max_price = mid_price\n            print(min_price)"
    },
    {
        "number": 4454,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        if n == 1:\n            print(a[0])\n        else:\n            a = sorted(a)\n            if a[0] == a[1]:\n                print(a[0])\n            else:\n                print(a[0] + (a[n-2] - a[0]) // (n-1))\n    return \"\""
    },
    {
        "number": 4454,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    queries = []\n    for i in range(int(stdin.split()[0])):\n        n = int(stdin.readline().strip())\n        prices = list(map(int, stdin.readline().strip().split()))\n        queries.append((n, prices))\n\n    for q in queries:\n        n, prices = q\n        min_price = min(prices)\n        max_price = max(prices)\n        if min_price == max_price:\n            print(min_price)\n        else:\n            left = min_price\n            right = max_price\n            while left <= right:\n                mid = (left + right) // 2\n                total = sum([max(p - mid, 0) for p in prices])\n                if total >= n:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            print(left)\n"
    },
    {
        "number": 4454,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    queries = int(stdin.readline().strip())\n    for query in range(queries):\n        n = int(stdin.readline().strip())\n        prices = list(map(int, stdin.readline().strip().split()))\n\n        # Calculate minimum possible equal price\n        min_price = min(prices)\n        max_price = max(prices)\n        while min_price < max_price:\n            mid_price = (min_price + max_price) // 2\n            total_cost = sum(map(lambda x: max(x - mid_price, 0), prices))\n            if total_cost >= n * mid_price:\n                min_price = mid_price + 1\n            else:\n                max_price = mid_price\n        print(min_price)\n\n    # Return answer\n    return \"\""
    },
    {
        "number": 4454,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.readline().split())\n    min_price = min(a)\n    max_price = sum(a)\n    price = min_price\n    while price <= max_price:\n        total_price = sum(map(lambda x: min(price, x), a))\n        if total_price >= max_price:\n            break\n        price += 1\n    return str(price)"
    },
    {
        "number": 4454,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    queries = int(stdin.pop(0))\n    for _ in range(queries):\n        n = int(stdin.pop(0))\n        prices = list(map(int, stdin.pop(0).split()))\n        min_price = min(prices)\n        total_initial = sum(prices)\n        total_new = total_initial + (n - 1) * min_price\n        print(min_price)\n        if total_new < total_initial:\n            print(min_price + 1)\n        else:\n            print(min_price - 1)"
    },
    {
        "number": 4454,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for i in range(q):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().strip().split()))\n        min_a = min(a)\n        max_a = max(a)\n        while max_a - min_a > 1:\n            mid = (max_a + min_a) // 2\n            if sum(mid if x > mid else x for x in a) >= sum(a):\n                max_a = mid\n            else:\n                min_a = mid\n        print(min_a)"
    },
    {
        "number": 4454,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n    \"\"\"\n    queries = int(stdin.readline().strip())\n    result = []\n    for i in range(queries):\n        n = int(stdin.readline().strip())\n        prices = list(map(int, stdin.readline().strip().split()))\n        new_prices = [min(prices)] * n\n        result.append(sum(new_prices))\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4454,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    queries = []\n    for i in range(int(stdin.split()[0])):\n        n = int(stdin.readline().split()[0])\n        a = list(map(int, stdin.readline().split()))\n        queries.append((n, a))\n    results = []\n    for n, a in queries:\n        initial_sum = sum(a)\n        if n == 1:\n            results.append(a[0])\n            continue\n        price = 0\n        for i in range(1, n+1):\n            price += i\n            if sum(a) - price >= initial_sum:\n                break\n        results.append(price)\n    return \"\\n\".join(map(str, results))"
    },
    {
        "number": 4454,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for query in range(queries):\n        n = int(stdin.readline().strip())\n        prices = list(map(int, stdin.readline().strip().split()))\n        min_price = min(prices)\n        if sum(prices) % n!= 0:\n            min_price += 1\n        print(min_price)"
    },
    {
        "number": 4455,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split()))\n    skills = list(map(int, stdin.strip().split()))\n    pairs = []\n    for i in range(k):\n        x, y = list(map(int, stdin.strip().split()))\n        pairs.append((x, y))\n\n    # initialize result array\n    result = [0] * n\n\n    # calculate skill difference for each pair\n    for x, y in pairs:\n        result[x-1] += 1\n        result[y-1] += 1\n\n    # calculate skill difference for each non-quarrel pair\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (i+1, j+1) not in pairs and (j+1, i+1) not in pairs:\n                result[i] += 1\n                result[j] += 1\n\n    # subtract skill difference for each mentorable pair\n    for x, y in pairs:\n        if skills[x-1] > skills[y-1]:\n            result[y-1] -= 1\n        if skills[y-1] > skills[x-1]:\n            result[x-1] -= 1\n\n    return \" \".join(list(map(str, result)))\n\nstdin = \"\"\"\n4 2\n10 4 10 15\n1 2\n4 3\n\"\"\"\n\nprint(solution(stdin)) # Output: 0 0 1 2 \n\nstdin = \"\"\"\n10 4\n5 4 1 5 4 3 7 1 2 5\n4 6\n2 1\n10 8\n3 5\n\"\"\"\n\nprint(solution(stdin)) # Output: 5 4 0 5 3 3 9 0 2 5"
    },
    {
        "number": 4455,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    skills = list(map(int, stdin.split()[2:2+n]))\n    pairs = set()\n    for _ in range(k):\n        x, y = map(int, stdin.split()[2+n:])\n        pairs.add((x-1, y-1))\n        pairs.add((y-1, x-1))\n    #print(pairs)\n\n    res = [0] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            if (i, j) not in pairs and (j, i) not in pairs and skills[i] > skills[j]:\n                res[i] += 1\n                res[j] += 1\n\n    return''.join(map(str, res))\n"
    },
    {
        "number": 4455,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    skills = list(map(int, stdin.split()[2:]))\n    pairs = set()\n    for i in range(k):\n        x, y = map(int, stdin.split()[2*i:2*(i+1)])\n        pairs.add((x, y))\n    ans = [0] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            if (i, j) in pairs or (j, i) in pairs:\n                continue\n            if skills[i] > skills[j]:\n                ans[i] += 1\n                ans[j] += 1\n    return \" \".join(map(str, ans))"
    },
    {
        "number": 4455,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    skills = list(map(int, stdin.readline().split()))\n    pairs = []\n    for i in range(k):\n        pair = tuple(map(int, stdin.readline().split()))\n        pairs.append(pair)\n\n    mentors = [0] * n\n    for i in range(n):\n        for pair in pairs:\n            if i == pair[0] or i == pair[1]:\n                for j in range(n):\n                    if j!= i and j not in pair and skills[j] > skills[i]:\n                        mentors[i] += 1\n                        break\n\n    return''.join(map(str, mentors))"
    },
    {
        "number": 4455,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    skills = list(map(int, stdin.splitlines()[1].split()))\n    quarrels = [tuple(map(int, line.split())) for line in stdin.splitlines()[2:]]\n    # Initialize the array of mentors\n    mentors = [0] * n\n    # For each pair of programmers check if they can be mentors\n    for x, y in quarrels:\n        if skills[x-1] > skills[y-1]:\n            mentors[x-1] += 1\n            mentors[y-1] += 1\n    # Count the number of mentors for each programmer\n    for i in range(n):\n        for j in range(i+1, n):\n            if skills[i] > skills[j] and mentors[j] == 0 and i+1!= j+1:\n                mentors[i] += 1\n    # Output the result\n    return''.join(map(str, mentors))"
    },
    {
        "number": 4455,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    skills = list(map(int, stdin.readline().split()))\n    quarrels = [list(map(int, stdin.readline().split())) for _ in range(k)]\n\n    graph = [[] for _ in range(n)]\n    for x, y in quarrels:\n        graph[x - 1].append(y - 1)\n        graph[y - 1].append(x - 1)\n\n    result = [0] * n\n\n    def dfs(u, parent):\n        for v in graph[u]:\n            if v!= parent:\n                dfs(v, u)\n                result[u] += result[v]\n\n    for i in range(n):\n        dfs(i, -1)\n        result[i] = n - result[i]\n\n    return''.join(map(str, result))\n"
    },
    {
        "number": 4455,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = map(int, stdin.readline().strip().split())\n    rs = list(map(int, stdin.readline().strip().split()))\n    pairs = []\n    for i in range(k):\n        pair = stdin.readline().strip().split()\n        pair = list(map(int, pair))\n        pairs.append(pair)\n\n    # create graph\n    graph = [[] for _ in range(n)]\n    for p in pairs:\n        x, y = p\n        graph[x-1].append(y-1)\n        graph[y-1].append(x-1)\n\n    # bfs\n    visited = [False] * n\n    count = [0] * n\n    for i in range(n):\n        if not visited[i]:\n            queue = [i]\n            while queue:\n                u = queue.pop(0)\n                visited[u] = True\n                for v in graph[u]:\n                    if not visited[v]:\n                        queue.append(v)\n                        if rs[u] > rs[v]:\n                            count[u] += 1\n\n    # print result\n    for i in range(n):\n        print(count[i], end=' ')\n    return ''"
    },
    {
        "number": 4455,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    skills = list(map(int, stdin.split()[2:]))\n\n    quarrels = []\n    for _ in range(k):\n        x, y = map(int, stdin.split()[0:2])\n        quarrels.append((x - 1, y - 1))\n        quarrels.append((y - 1, x - 1))\n\n    mentors = [0] * n\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if j in [x[1] for x in quarrels] or i in [x[0] for x in quarrels]:\n                continue\n            if skills[i] > skills[j]:\n                mentors[i] += 1\n\n    return''.join(map(str, mentors))\n\nstdin = \"4 2\\n10 4 10 15\\n1 2\\n4 3\"\nprint(solution(stdin))"
    },
    {
        "number": 4455,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    rs = list(map(int, stdin.splitlines()[1].split()))\n    pairs = [(int(x)-1, int(y)-1) for x, y in [line.split() for line in stdin.splitlines()[2:2+k]]]\n    ans = [0]*n\n    for i in range(n):\n        for j in range(i+1, n):\n            if rs[i] < rs[j]:\n                ans[i] += 1\n            if rs[i] > rs[j]:\n                ans[j] += 1\n        for x, y in pairs:\n            if i == x or i == y:\n                continue\n            if rs[i] > rs[x] and rs[i] > rs[y]:\n                ans[i] += 1\n    return''.join(map(str, ans))"
    },
    {
        "number": 4455,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.readline().split()))\n    skills = list(map(int, stdin.readline().split()))\n    pairs = []\n    for i in range(k):\n        x, y = list(map(int, stdin.readline().split()))\n        pairs.append((x-1, y-1))\n\n    mentors = [0] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            if i == j or (j, i) in pairs or (i, j) in pairs:\n                continue\n            if skills[i] > skills[j]:\n                mentors[i] += 1\n            else:\n                mentors[j] += 1\n\n    return \" \".join(map(str, mentors))\n"
    },
    {
        "number": 4456,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[0:n]))\n    q = list(map(int, stdin.split()[n:2*n]))\n\n    if len(set(p))!= n or len(set(q))!= n:\n        return \"NO\"\n\n    s = ['_' for _ in range(n)]\n    for i in range(n):\n        s[p[i]-1] = chr(ord('a') + i)\n        s[q[i]-1] = chr(ord('a') + i)\n\n    if '_' in s:\n        return \"NO\"\n\n    return \"YES\" + \"\".join(s)"
    },
    {
        "number": 4456,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = map(int, stdin.readline().strip().split())\n    p = list(map(int, stdin.readline().strip().split()))\n    q = list(map(int, stdin.readline().strip().split()))\n\n    # check for validity\n    if k > 26 or len(set(p))!= n or len(set(q))!= n or len(set(p) & set(q))!= n:\n        return \"NO\"\n\n    # build string\n    s = \"\"\n    for i in range(n):\n        s += chr(ord('a') + p[i] - 1)\n\n    # check for distinct characters\n    distinct_chars = set(s)\n    if len(distinct_chars) < k:\n        return \"NO\"\n\n    return \"YES\\n\" + s"
    },
    {
        "number": 4456,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    q = list(map(int, stdin.readline().split()))\n    \n    # build mapping from permutations to sorted string\n    mapping = {}\n    for i in range(n):\n        s = ''.join(sorted(list(set(p[:i+1] + p[i+2:] + q[:i+1] + q[i+2:]))))\n        mapping[tuple(p)] = s\n        mapping[tuple(q)] = s\n    \n    # iterate through all possible strings and check if they match the conditions\n    for s in itertools.permutations('abcdefghijklmnopqrstuvwxyz', n):\n        s = ''.join(s)\n        if mapping.get(tuple(p)) == s and mapping.get(tuple(q)) == s and len(set(s)) >= k:\n            return 'YES\\n' + s\n    \n    return 'NO'"
    },
    {
        "number": 4456,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, k = map(int, stdin.readline().strip().split())\n    p = list(map(int, stdin.readline().strip().split()))\n    q = list(map(int, stdin.readline().strip().split()))\n    \n    # check if it is possible to restore the string\n    if len(set(p))!= n or len(set(q))!= n or any(p[i] > p[i+1] for i in range(n-1)) or any(q[i] > q[i+1] for i in range(n-1)):\n        return \"NO\"\n    \n    # generate all possible strings\n    chars = [chr(ord('a') + i) for i in range(26)]\n    strings = [''.join(chars[p[i]-1] if i+1 in p else chars[q[i]-1] for i in range(n)) for _ in range(2**n)]\n    \n    # filter strings with required number of distinct characters\n    strings = [s for s in strings if len(set(s)) >= k]\n    \n    # return the first string if it exists, otherwise \"NO\"\n    return \"YES\\n\" + strings[0] if strings else \"NO\""
    },
    {
        "number": 4456,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.readline().strip().split()))\n    p = list(map(int, stdin.readline().strip().split()))\n    q = list(map(int, stdin.readline().strip().split()))\n    \n    # check if p and q are valid permutations\n    if len(set(p))!= n or len(set(q))!= n or sorted(p)!= list(range(1, n+1)) or sorted(q)!= list(range(1, n+1)):\n        return \"NO\"\n    \n    # check if there are at least k distinct characters\n    chars = set()\n    for i in range(n):\n        if len(chars) == k:\n            break\n        chars.add(chr(ord('a') + p[i]-1))\n        chars.add(chr(ord('a') + q[i]-1))\n    else:\n        return \"NO\"\n    \n    # create the string\n    s = \"\"\n    for i in range(n):\n        s += chr(ord('a') + p[i]-1)\n        s += chr(ord('a') + q[i]-1)\n    \n    return \"YES\\n\" + s"
    },
    {
        "number": 4456,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[0:n]))\n    q = list(map(int, stdin.split()[n:2*n]))\n    \n    # Check if p is a valid permutation\n    if sorted(p)!= list(range(1, n+1)):\n        return \"NO\"\n    \n    # Check if q is a valid permutation\n    if sorted(q)!= list(range(1, n+1)):\n        return \"NO\"\n    \n    # Check if k <= n\n    if k > n:\n        return \"NO\"\n    \n    # Generate all possible strings\n    res = set()\n    for i in range(n):\n        res.add(chr((i+1) % 26 + ord('a')))\n    for i in range(n):\n        res.add(chr((i+1) // 26 + ord('a')))\n    \n    # Filter out strings that do not have at least k distinct characters\n    res = [s for s in res if len(set(s)) >= k]\n    \n    # Filter out strings that do not suit the given permutations\n    for s in res:\n        if all(s[p[i]-1] <= s[p[i+1]-1] for i in range(n-1)) and \\\n           all(s[q[i]-1] <= s[q[i+1]-1] for i in range(n-1)):\n            return \"YES\\n\" + s\n    \n    return \"NO\""
    },
    {
        "number": 4456,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    q = list(map(int, stdin.readline().split()))\n    s = list(set(range(1, n + 1)) - set(p))\n    for i in range(n):\n        if i == 0:\n            continue\n        if s[i] < s[i - 1]:\n            s.insert(i, s.pop(i - 1))\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            s.insert(i + 1, s.pop(i))\n    if len(set(s)) < k:\n        return \"NO\"\n    return \"YES\" + \"\".join(chr(i + ord('a')) for i in s)\n"
    },
    {
        "number": 4456,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    q = list(map(int, stdin.readline().split()))\n\n    # Check if it is possible to create a string of length n with k distinct characters\n    if len(set(p))!= n or len(set(q))!= n:\n        return \"NO\"\n\n    # Create a list of characters of length n with indices in p and q\n    s = [chr(97 + i) for i in range(n)]\n    for i in range(n):\n        s[p[i]-1] = chr(97 + i)\n        s[q[i]-1] = chr(97 + i)\n\n    # Check if it contains at least k distinct characters\n    if len(set(s)) < k:\n        return \"NO\"\n\n    return \"YES\\n\" + \"\".join(s)\n\nprint(solution(\"3 2\\n1 2 3\\n1 3 2\")) # Output: YES\\nabb<|im_sep|>"
    },
    {
        "number": 4456,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    p = list(map(int, stdin.readline().strip().split()))\n    q = list(map(int, stdin.readline().strip().split()))\n\n    letters = set()\n\n    for i in range(n):\n        letters.add(chr(ord('a') + p[i]-1))\n\n    for i in range(k):\n        if len(letters) == 26:\n            break\n        if chr(ord('a') + q[i]-1) in letters:\n            letters.remove(chr(ord('a') + q[i]-1))\n        else:\n            letters.add(chr(ord('a') + q[i]-1))\n\n    if len(letters) < k:\n        return \"NO\"\n\n    s = \"\"\n    for i in range(n):\n        s += chr(ord('a') + q[i]-1)\n\n    return \"YES\\n\" + s\n"
    },
    {
        "number": 4456,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    q = list(map(int, stdin.readline().split()))\n\n    if len(set(p))!= len(p) or len(set(q))!= len(q) or len(p)!= n or len(q)!= n:\n        return \"NO\"\n\n    chars = [chr(i + ord('a')) for i in range(k)]\n    for i in range(n - 1):\n        if (p[i] > p[i + 1] or q[i] > q[i + 1]) and (p[i]!= q[i] or p[i]!= q[i + 1]):\n            return \"NO\"\n        if p[i] == q[i]:\n            chars.remove(p[i])\n\n    if len(chars) < k:\n        return \"NO\"\n\n    result = \"\"\n    for i in range(n):\n        result += chars[(p[i] - 1) % k]\n\n    return \"YES\\n\" + result"
    },
    {
        "number": 4457,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    dp = [float('inf')] * n\n    dp[0] = 0\n    for i in range(1, n):\n        dp[i] = min(dp[i-1] + a[i-1], dp[i])\n    ans = dp[n-1]\n    perm = [0] * n\n    for i in range(n):\n        dp = [float('inf')] * n\n        dp[i] = 0\n        for j in range(i+1, n):\n            dp[j] = min(dp[j-1] + a[j-1], dp[j])\n        perm[i] = dp[n-1]\n    for i in range(n):\n        if perm[i] == ans:\n            return f\"{ans}\\n{' '.join(str(j+1) for j in range(n))}\\n\"\n    return \"No solution exists.\\n\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = list(map(int, stdin.splitlines()[1].split()))\n    dp = [[0] * n for _ in range(n)]\n    ans = float('inf')\n    res = []\n    for i in range(n):\n        dp[i][i] = a[i] * (i + 1)\n        ans = min(ans, dp[i][i])\n    for gap in range(1, n):\n        for i in range(n-gap):\n            j = i + gap\n            dp[i][j] = dp[i+1][j] + a[j] * gap\n            for k in range(i+1, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + a[j] * gap)\n            ans = min(ans, dp[i][j])\n    for i in range(n):\n        res.append(ans - dp[0][i] + (i+1))\n    return str(ans) + '\\n' +''.join(map(str, res))"
    },
    {
        "number": 4457,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n\n    dp = [float('inf')] * n\n    dp[0] = 0\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[j] > a[i]:\n                dp[i] = min(dp[i], dp[j] + (a[i] * j + 1))\n\n        if dp[i] == float('inf'):\n            dp[i] = dp[i-1] + (a[i] * (i-1) + 1)\n\n    ans = dp[n-1]\n    indices = []\n\n    for i in range(n-1, 0, -1):\n        if dp[i] == ans - 1:\n            ans -= 1\n            indices.append(i+1)\n\n    indices.reverse()\n    return str(ans) + '\\n' +''.join(str(i) for i in indices)"
    },
    {
        "number": 4457,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            dp[i][j] = a[i - 1] + dp[i - 1][j - 1]\n    ans = float('inf')\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if dp[i][j] == 2 * sum(a):\n                ans = min(ans, dp[i][j])\n    if ans == float('inf'):\n        return 'Impossible'\n    ans_indices = [0] * n\n    i = n\n    j = n\n    while i > 0:\n        if dp[i][j] == 2 * sum(a):\n            ans_indices[i - 1] = i\n        if dp[i][j] == dp[i - 1][j] + a[i - 1]:\n            i -= 1\n        else:\n            j -= 1\n    return f'{ans}\\n{\" \".join(map(str, ans_indices))}'"
    },
    {
        "number": 4457,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Calculate the minimum number of shots required to knock each can down exactly once\n    dp = [0] * n\n    for i in range(1, n):\n        dp[i] = dp[i-1] + a[i-1] * (i-1) + 1\n    result = dp[-1]\n\n    # Find the order of shooting that minimizes the number of shots required\n    dp = [0] * n\n    for i in range(n-1, -1, -1):\n        dp[i] = dp[i+1] + a[i] * (n-i-1) + 1\n        if dp[i] < result:\n            result = dp[i]\n            order = i\n\n    # Print the minimum number of shots required and the order of shooting\n    return f\"{result}\\n{list(range(1, n+1))[order::-1]}\""
    },
    {
        "number": 4457,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    cans = [int(x) for x in stdin.split()[1:]]\n\n    dp = [[float('inf') for _ in range(1<<n)] for _ in range(n+1)]\n    dp[0][0] = 0\n\n    for i in range(1, n+1):\n        for j in range(1<<n):\n            for k in range(j):\n                dp[i][j] = min(dp[i][j], dp[i-1][j^(1<<k)] + (cans[i-1] * k + 1))\n\n    ans = min(dp[n])\n\n    for i in range(1, 1<<n):\n        if dp[n][i] == ans:\n            ans_seq = [x+1 for x in range(n) if (i & (1<<x))]\n            ans_seq.reverse()\n            return str(ans) + '\\n' +''.join([str(x) for x in ans_seq])\n\ndef"
    },
    {
        "number": 4457,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    dp = [float('inf')] * n\n    dp[0] = 0\n    for i in range(1, n):\n        dp[i] = min(dp[j] + a[j] + 1 for j in range(i))\n    ans = dp[-1]\n    for i in range(n):\n        if dp[i] == ans:\n            print(i+1, end=' ')\n    return str(ans)"
    },
    {
        "number": 4457,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    dp = [float('inf')] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = min(dp[i-1] + a[i-1], dp[i-2] + a[i-1] + a[i]) + 1\n    print(dp[-1])\n    ans = []\n    i = n - 1\n    while i > 0:\n        if dp[i] - dp[i-1] == 0:\n            ans.append(i+1)\n            i -= 1\n        else:\n            i -= 2\n    ans.append(1)\n    ans.reverse()\n    print(' '.join(map(str, ans)))"
    },
    {
        "number": 4457,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for k in range(1, n):\n        for i in range(n-k):\n            j = i+k\n            dp[i][j] = min(dp[i][j-1] + a[j])\n    res = dp[0][n-1]\n    print(res)\n    print(get_sequence(dp))\n\ndef"
    },
    {
        "number": 4457,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    dp = [[0]*n for _ in range(1<<n)]\n    for i in range(n):\n        dp[1<<i][i] = a[i]\n    for mask in range(1, 1<<n):\n        for i in range(n):\n            if not (mask & (1<<i)):\n                continue\n            for j in range(i+1, n):\n                if mask & (1<<j):\n                    continue\n                dp[mask][j] = min(dp[mask][j], dp[mask^(1<<i)][i] + a[j])\n    ans = dp[-1][-1]\n    perm = []\n    mask = (1<<n) - 1\n    for i in range(n-1, -1, -1):\n        if not (mask & (1<<i)):\n            continue\n        for j in range(i+1, n):\n            if mask & (1<<j):\n                continue\n            if dp[mask][j] == dp[mask^(1<<i)][i] + a[j]:\n                perm.append(j+1)\n                mask ^= (1<<j)\n                break\n    return f\"{ans}\\n{' '.join(map(str, perm))}\""
    },
    {
        "number": 4458,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    P = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    count = 0\n    for i in range(N):\n        for j in range(i):\n            if P[i] <= P[j]:\n                count += 1\n                break\n\n    # Output result\n    return str(count)"
    },
    {
        "number": 4458,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the number of integers i (1 <= i <= N) that satisfy the following condition:\n    For any integer j (1 <= j <= i), P_i <= P_j.\n\n    Args:\n    stdin (str): A string containing the input in the required format.\n\n    Returns:\n    str: A string containing the required output.\n    \"\"\"\n    # Get the input\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through the list of permutations\n    for i in range(1, n):\n        # Check if the current permutation is greater than or equal to the previous one\n        if p[i] >= p[i-1]:\n            count += 1\n\n    # Return the count of integers that satisfy the condition\n    return str(count)"
    },
    {
        "number": 4458,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if nums[i] > nums[j]:\n                count += 1\n                break\n    return str(count)"
    },
    {
        "number": 4458,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i):\n            if p[i] <= p[j]:\n                count += 1\n                break\n    return str(count)"
    },
    {
        "number": 4458,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n\n    count = 1\n    for i in range(2, n):\n        if p[i] > p[i-1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4458,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    P = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    count = 0\n    for i in range(1, N):\n        for j in range(i):\n            if P[i] > P[j]:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4458,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    permutation = [int(x) for x in stdin.readline().strip().split()]\n    count = 1\n    for i in range(1, n):\n        if permutation[i] > permutation[i-1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4458,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    N = int(stdin.readline().strip())\n    P = list(map(int, stdin.readline().strip().split()))\n    \n    # initialize count\n    count = 0\n    \n    # iterate through all indices i\n    for i in range(N):\n        # check if P[i] is less than or equal to any of the elements to its right\n        # (since we want to find the maximum number of indices that satisfy the condition)\n        satisfies_condition = True\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                satisfies_condition = False\n                break\n        \n        # if P[i] satisfies the condition, increment count\n        if satisfies_condition:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4458,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n\n    count = 0\n    for i in range(1, n):\n        found = False\n        for j in range(i):\n            if p[i] > p[j]:\n                found = True\n                break\n        if not found:\n            count += 1\n\n    return str(count)\n\ndef"
    },
    {
        "number": 4458,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                count += 1\n                break\n    return str(count)"
    },
    {
        "number": 4459,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Find duplicates\n    duplicates = [i for i in range(N) if a.count(a[i]) > 1]\n\n    # Count frequency\n    freq = {}\n    for i in range(N):\n        freq[a[i]] = freq.get(a[i], 0) + 1\n\n    # Find maximum frequency\n    max_freq = max(freq.values())\n\n    # Count number of occurrences to remove\n    occurrences_to_remove = 0\n    for key in freq.keys():\n        if freq[key] > 1 and freq[key]!= max_freq:\n            occurrences_to_remove += freq[key] - 1\n\n    # Print result\n    print(occurrences_to_remove)\n"
    },
    {
        "number": 4459,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # Count occurrences of each element\n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n\n    # Find minimum number of elements to remove\n    min_removals = sum(1 for x in counts.values() if x > 1)\n    return str(min_removals)"
    },
    {
        "number": 4459,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # count frequency of each element in a\n    freq = [0] * (max(a) + 1)\n    for x in a:\n        freq[x] += 1\n\n    # remove elements that occur less than their frequency\n    count = 0\n    for i in range(len(freq)):\n        if freq[i] < i:\n            count += i - freq[i]\n            freq[i] = i\n\n    # print the minimum number of elements to remove\n    print(count)\n\n    # return an empty string\n    return \"\""
    },
    {
        "number": 4459,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Count occurrences of each element in a\n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n\n    # Count number of occurrences of each element that occurs x times\n    x_counts = {}\n    for x in counts:\n        if counts[x] == x:\n            x_counts[x] = x_counts.get(x, 0) + 1\n\n    # Find minimum number of elements that needs to be removed\n    min_count = N\n    for x in x_counts:\n        if x_counts[x] == 1:\n            min_count = min(min_count, counts[x])\n\n    return str(min_count)"
    },
    {
        "number": 4459,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    freq = {}\n    for num in a:\n        freq[num] = freq.get(num, 0) + 1\n    max_count = max(freq.values())\n    count = 0\n    for num, freq in freq.items():\n        if freq < max_count:\n            count += max_count - freq\n    return str(count)"
    },
    {
        "number": 4459,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    freq = [0] * (max(a) + 1)\n    for i in a:\n        freq[i - 1] += 1\n    count = 0\n    for i in freq:\n        if i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 4459,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # count the frequency of each element in a\n    freq = {}\n    for x in a:\n        if x not in freq:\n            freq[x] = 0\n        freq[x] += 1\n    \n    # count the number of elements that occur less than twice\n    count = 0\n    for x in freq:\n        if freq[x] < 2:\n            count += 1\n    \n    # print the answer\n    print(count)\n    \n    # return the minimum number of elements that needs to be removed\n    return ''"
    },
    {
        "number": 4459,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # count occurrences of each element in a\n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n\n    # find the minimum number of elements to remove\n    count_max = max(counts.values())\n    count_min = min(counts.values())\n    if count_max == count_min:\n        return 0\n    else:\n        return count_max - count_min"
    },
    {
        "number": 4459,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Count occurrences of each element in a\n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n\n    # Count the number of occurrences of each distinct element in a\n    distinct_counts = {}\n    for x in counts:\n        distinct_counts[x] = distinct_counts.get(x, 0) + 1\n\n    # Compute the minimum number of elements to remove\n    min_remove = 0\n    for x in distinct_counts:\n        min_remove += counts[x] - distinct_counts[x]\n\n    return str(min_remove)"
    },
    {
        "number": 4459,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Remove duplicates from a\n    a = list(set(a))\n\n    # Count occurrences of each element in a\n    count = {}\n    for x in a:\n        if x in count:\n            count[x] += 1\n        else:\n            count[x] = 1\n\n    # Check if a is a good sequence\n    good_seq = True\n    for x in count:\n        if count[x]!= x:\n            good_seq = False\n            break\n\n    # If a is not a good sequence, find the minimum number of elements to remove\n    if not good_seq:\n        min_remove = float('inf')\n        for x in count:\n            if count[x] == 1:\n                min_remove = min(min_remove, a.count(x))\n        return str(min_remove)\n    else:\n        return '0'"
    },
    {
        "number": 4460,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    x = stdin.split()\n    x = [int(i) for i in x]\n\n    # Check which variable Snuke assigned 0\n    for i in range(5):\n        if x[i] == 0:\n            return str(i)\n\n    # If Snuke didn't assign 0 to any variable, return -1\n    return \"-1\""
    },
    {
        "number": 4460,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.strip().split())\n    if x_1 == 0:\n        return '1'\n    elif x_2 == 0:\n        return '2'\n    elif x_3 == 0:\n        return '3'\n    elif x_4 == 0:\n        return '4'\n    elif x_5 == 0:\n        return '5'\n    else:\n        return '0'"
    },
    {
        "number": 4460,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4, x5 = map(int, stdin.split())\n    if x1 == 0:\n        return \"1\"\n    elif x2 == 0:\n        return \"2\"\n    elif x3 == 0:\n        return \"3\"\n    elif x4 == 0:\n        return \"4\"\n    elif x5 == 0:\n        return \"5\"\n    else:\n        return \"0\""
    },
    {
        "number": 4460,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.strip().split())\n\n    # find which variable Snuke assigned 0\n    for i in range(1, 6):\n        if locals()['x_' + str(i)] == 0:\n            return str(i)\n\n    # if no variable was assigned 0, something went wrong\n    return 'Something went wrong'\n"
    },
    {
        "number": 4460,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.strip().split())\n    if x_1 == 0:\n        return str(1)\n    elif x_2 == 0:\n        return str(2)\n    elif x_3 == 0:\n        return str(3)\n    elif x_4 == 0:\n        return str(4)\n    elif x_5 == 0:\n        return str(5)\n    else:\n        return \"0\""
    },
    {
        "number": 4460,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.strip().split())\n    \n    # find which variable was assigned 0\n    if x_1 == 0:\n        return str(1)\n    elif x_2 == 0:\n        return str(2)\n    elif x_3 == 0:\n        return str(3)\n    elif x_4 == 0:\n        return str(4)\n    elif x_5 == 0:\n        return str(5)\n    else:\n        return \"0\""
    },
    {
        "number": 4460,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    if x_1 == 0:\n        return str(1)\n    elif x_2 == 0:\n        return str(2)\n    elif x_3 == 0:\n        return str(3)\n    elif x_4 == 0:\n        return str(4)\n    elif x_5 == 0:\n        return str(5)\n    else:\n        return \"None of the variables assigned 0\"\n        "
    },
    {
        "number": 4460,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    for i in range(1, 6):\n        if x_i == 0:\n            return str(i)\n    return \"None\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4460,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    if x_1 == 0:\n        return str(1)\n    elif x_2 == 0:\n        return str(2)\n    elif x_3 == 0:\n        return str(3)\n    elif x_4 == 0:\n        return str(4)\n    else:\n        return str(5)"
    },
    {
        "number": 4460,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.strip().split())\n    if x_1 == 0:\n        return '1'\n    elif x_2 == 0:\n        return '2'\n    elif x_3 == 0:\n        return '3'\n    elif x_4 == 0:\n        return '4'\n    elif x_5 == 0:\n        return '5'\n    else:\n        return '-1'"
    },
    {
        "number": 4461,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    max_area = (H + W - 1) // 3\n    min_area = H * W // 3\n    return str(max_area - min_area)"
    },
    {
        "number": 4461,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    pieces = [[H, W], [W, H], [H, W]]\n    min_area = max(H, W) ** 2\n    max_area = 0\n    for p in pieces:\n        max_area = max(max_area, p[0] * p[1])\n        min_area = min(min_area, p[0] * p[1])\n    return str(max_area - min_area)"
    },
    {
        "number": 4461,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    H, W = map(int, stdin.split())\n    \n    # Calculate area of each piece\n    S_max = H * W\n    S_min = min(H, W) ** 2\n    \n    # Calculate result\n    result = S_max - S_min\n    \n    # Return output as string\n    return str(result)"
    },
    {
        "number": 4461,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.strip().split())\n    return str(3 * h * w - 2 * (h * (h - 1) // 2) - 2 * (w * (w - 1) // 2))"
    },
    {
        "number": 4461,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.strip().split())\n    max_area = h * w\n    min_area = (h + w - max_area) // 3\n    return str(max_area - min_area)"
    },
    {
        "number": 4461,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.strip().split())\n    max_piece_area = (h + w) // 3\n    min_piece_area = (h - w) // 3\n    return str(max_piece_area - min_piece_area)"
    },
    {
        "number": 4461,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    H, W = map(int, stdin.split())\n\n    # compute the area of each rectangle\n    area_min = H * W // 3\n    area_max = (H + 1) * (W + 1) // 3\n\n    # compute the minimum difference\n    diff = area_max - area_min\n\n    # output result\n    return str(diff)"
    },
    {
        "number": 4461,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    max_area = (h * w) // 3\n    min_area = h * w - max_area\n    return str(max_area - min_area)"
    },
    {
        "number": 4461,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.strip().split())\n    S_max = H * W\n    S_min = min(H, W) * min(H, W)\n    return str(S_max - S_min)"
    },
    {
        "number": 4461,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n\n    min_area = min(H, W)\n    max_area = max(H, W)\n\n    if max_area % 3 == 0:\n        return str(max_area // 3)\n    else:\n        return str(max_area // 3 + 1)\n\nprint(solution(input()))"
    },
    {
        "number": 4462,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if a[0] == 1 and a[1] == 10 and a[2] == 100:\n        return 'Yes'\n    if a[0] % 2 == 0 or a[1] % 2 == 0 or a[2] % 2 == 0:\n        return 'No'\n    for i in range(n-1):\n        if (a[i] * a[i+1]) % 4!= 0:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4462,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    if all(a[i] % 4 == 0 or a[i] % 4 == 2 for i in range(n - 1)) and all(a[i] * a[i + 1] % 4 == 0 for i in range(n - 1)):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4462,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    if N == 2:\n        if (a[0]*a[1])%4 == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        for i in range(N-1):\n            if (a[i]*a[i+1])%4!= 0:\n                return \"No\"\n        return \"Yes\""
    },
    {
        "number": 4462,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.strip().split())\n    a = sorted(a, reverse=True)\n    if a[0] % 4!= 0:\n        return \"No\"\n    if n == 1:\n        return \"Yes\"\n    for i in range(1, n):\n        if a[i] % 4!= 0:\n            return \"No\"\n        if a[i] // a[i-1] % 4!= 0:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4462,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # check if condition is satisfied\n    for i in range(n - 1):\n        if a[i] * a[i + 1] % 4!= 0:\n            return \"No\"\n    \n    return \"Yes\""
    },
    {
        "number": 4462,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # Check if Snuke can achieve his objective\n    for i in range(N-1):\n        if a[i] * a[i+1] % 4!= 0:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4462,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # check if N is valid\n    if not (2 <= N <= 10**5):\n        return \"Invalid input\"\n\n    # check if a is valid\n    if not all(1 <= a_i <= 10**9 for a_i in a):\n        return \"Invalid input\"\n\n    # check if Snuke can achieve his objective\n    for i in range(N - 1):\n        if a[i] * a[i + 1] % 4!= 0:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4462,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    if a[-1] % 4!= 0:\n        return \"No\"\n\n    for i in range(n - 1):\n        if (a[i] * a[i + 1]) % 4!= 0:\n            return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n\n    if n == 1 or n == 2:\n        return \"Yes\"\n\n    # Check if the product of any two adjacent elements in the array is a multiple of 4\n    for i in range(n - 1):\n        if a[i] * a[i + 1] % 4!= 0:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4462,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # check if permutation is possible\n    for i in range(N-1):\n        if a[i]*a[i+1] % 4!= 0:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4463,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    if s < t:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4463,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    if s < t:\n        return \"Yes\"\n    elif s == t:\n        return \"Yes\"\n    elif s > t:\n        return \"No\"\n    else:\n        s, t = t, s\n        if s < t:\n            return \"Yes\"\n        elif s == t:\n            return \"Yes\"\n        else:\n            return \"No\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n\n    # Check if s' < t'\n    if s < t or (s == t and all(c in 'aeiou' for c in s)):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s_prime = ''.join(sorted(s))\n    t_prime = ''.join(sorted(t))\n    if s_prime < t_prime:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4463,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if s < t:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4463,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    if s < t:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4463,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    s_sorted = ''.join(sorted(s))\n    t_sorted = ''.join(sorted(t))\n    return 'Yes' if s_sorted < t_sorted else 'No'"
    },
    {
        "number": 4463,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n\n    if s == t:\n        return \"No\"\n\n    s_set = set(s)\n    t_set = set(t)\n\n    if len(s_set)!= len(t_set):\n        return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    if s < t:\n        return 'Yes'\n    if s == t:\n        return 'No'\n    s_prime = ''.join(sorted(s))\n    t_prime = ''.join(sorted(t))\n    if s_prime < t_prime:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4463,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s_sorted = ''.join(sorted(s))\n    t_sorted = ''.join(sorted(t))\n    if s_sorted < t_sorted:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4464,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if c % a!= 0:\n        return \"NO\"\n    count = b // a + 1\n    if count == 1:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.strip().split())\n\n    if C % A == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4464,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    for i in range(1, B+1):\n        if C%i!= 0:\n            continue\n        for j in range(1, B+1):\n            if (C+j)%B == 0:\n                if C%A!= 0:\n                    continue\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4464,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    A, B, C = map(int, stdin.split())\n\n    # Check if the sum is congruent to C modulo B\n    if C % B == 0:\n        return \"YES\"\n\n    # Check all multiples of A between A and B\n    for i in range(A, B, A):\n        if (C + i) % B == 0:\n            return \"YES\"\n\n    # If no solution is found, return NO\n    return \"NO\""
    },
    {
        "number": 4464,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.strip().split())\n    selected_numbers = []\n    for i in range(B):\n        if i % A == 0:\n            selected_numbers.append(i)\n    if not selected_numbers:\n        return \"NO\"\n    total_sum = sum(selected_numbers)\n    if total_sum % B == C:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C % B!= 0:\n        return \"NO\"\n    n = 1\n    sum_ = 0\n    while sum_ % A!= C % A:\n        sum_ += n\n        n += 1\n    return \"YES\""
    },
    {
        "number": 4464,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C % B!= 0:\n        return \"NO\"\n    for i in range(2, 1000000):\n        if (A * i) % B == C:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4464,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    for i in range(a, b*c, a):\n        if i % b == c:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4464,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C % A!= 0:\n        return 'NO'\n    for i in range(A, B, A):\n        if i % C == 0 and i!= C:\n            return 'YES'\n    return 'NO'"
    },
    {
        "number": 4464,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if c % b == 0 and a!= 0:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4465,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    area = a * b - 1\n    return str(area)"
    },
    {
        "number": 4465,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    area = A * B\n    return str(area)"
    },
    {
        "number": 4465,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    area = (a - 1) * (b - 1)\n    return str(area)"
    },
    {
        "number": 4465,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    area = (A+B) * (A+B) - A*B\n    return str(area)\n\nprint(solution(input()))"
    },
    {
        "number": 4465,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    area = (A-2)*(B-2)\n    return str(area)"
    },
    {
        "number": 4465,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.strip().split()))\n    area = (A+B) * (A+B)\n    print(area - 4)\n    return \"\""
    },
    {
        "number": 4465,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    area = A * B - 2\n    print(area)\n    return str(area)"
    },
    {
        "number": 4465,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    area = A * B - 1\n    return str(area)\n"
    },
    {
        "number": 4465,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    area = A * B - 2\n    return str(area)"
    },
    {
        "number": 4465,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    area = A * B\n    return str(area)"
    },
    {
        "number": 4466,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    x, y, z = list(map(int, stdin.split()))\n\n    # calculate the maximum number of seats\n    max_seats = x // (y + 2 * z)\n\n    # calculate the minimum distance between the end of the seat and the start of a person\n    min_dist = max(z, x - max_seats * (y + z))\n\n    # calculate the maximum distance between two people\n    max_dist = y + z\n\n    # calculate the actual number of seats that can be accommodated\n    actual_seats = max(max_seats, x // max_dist)\n\n    return str(actual_seats)\n"
    },
    {
        "number": 4466,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    x, y, z = map(int, stdin.split())\n\n    # Calculate maximum number of people that can sit\n    max_people = (x - z) // (y + z)\n\n    # If there are more than one maximum number, adjust to ensure that at least one person is left over\n    if (x - z) % (y + z) >= y:\n        max_people += 1\n\n    return str(max_people)"
    },
    {
        "number": 4466,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    return str(X//(Y+2*Z)+1)"
    },
    {
        "number": 4466,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    # We can seat at most X/Y - 1 people\n    # We need at least (Y+2Z)/X intervals between two people\n    # We have Y centimeters of free space at the end of the seat\n    # So we need to subtract X-(Y+2Z) from X/Y - 1 to get the maximum number of people we can seat\n    return str((x-y-z)//(y+2*z) - ((x-y-z)%(y+2*z)>0) + 1)\n\nprint(solution(\"13 3 1\"))"
    },
    {
        "number": 4466,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.strip().split())\n    # Total length of the seat\n    seat_length = x\n    # Minimum length between two people\n    min_gap = y + 2 * z\n    # Maximum number of people that can be seated\n    max_people = seat_length // min_gap\n    # Adjust seat length and minimum gap to accommodate the maximum number of people\n    if max_people * min_gap < seat_length:\n        seat_length = max_people * min_gap\n    min_gap = seat_length // max_people\n    return str(max_people)"
    },
    {
        "number": 4466,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    X, Y, Z = map(int, stdin.split())\n\n    # Calculate the number of people that can sit\n    num_people = X // (Y + 2 * Z)\n\n    # Check if there are any people left over\n    if X % (Y + 2 * Z) >= Y:\n        num_people += 1\n\n    return str(num_people)"
    },
    {
        "number": 4466,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    X, Y, Z = map(int, stdin.strip().split())\n\n    # Calculate number of people that can fit\n    num_people = (X - 2*Z) // (Y + 2*Z)\n\n    # Check if there is enough space for two more people\n    if (X - 2*Z) % (Y + 2*Z) >= Y:\n        num_people += 1\n\n    return str(num_people)"
    },
    {
        "number": 4466,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.strip().split())\n    return str((X - Y) // (Y + Z) + 1)\n"
    },
    {
        "number": 4466,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input from string to integer\n    x, y, z = map(int, stdin.split())\n\n    # Calculate the minimum number of seats required\n    num_seats = (x - z) // (y + 2 * z)\n\n    # If there is a remaining seat, add it\n    if (x - z) % (y + 2 * z) >= y:\n        num_seats += 1\n\n    return str(num_seats)"
    },
    {
        "number": 4466,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    X, Y, Z = map(int, stdin.split())\n    \n    # Calculating the minimum distance between two people\n    min_dist = Y + Z\n    \n    # Calculating the number of people that can sit\n    num_people = (X - min_dist) // min_dist\n    \n    # If there is no space left for more people, we limit it to the number of available spaces\n    if num_people * min_dist + Y + Z > X:\n        num_people = (X - Y - Z) // min_dist\n    \n    return str(num_people)"
    },
    {
        "number": 4467,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    points = []\n    for i in range(1, N+1):\n        a, b = map(int, lines[i].split())\n        points.append((a, b))\n    pairs = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if points[i][0] < points[j][0] and points[i][1] < points[j][1]:\n                pairs += 1\n    return str(pairs)\n\ndef"
    },
    {
        "number": 4467,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    N = int(stdin.readline().strip())\n    red_points = []\n    blue_points = []\n    for i in range(N):\n        a, b = map(int, stdin.readline().strip().split())\n        red_points.append((a, b))\n    for i in range(N):\n        c, d = map(int, stdin.readline().strip().split())\n        blue_points.append((c, d))\n\n    # count friendly pairs\n    pairs = 0\n    for i in range(N):\n        for j in range(N):\n            if red_points[i][0] < blue_points[j][0] and red_points[i][1] < blue_points[j][1]:\n                pairs += 1\n\n    # print result\n    return str(pairs)"
    },
    {
        "number": 4467,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    red_points = []\n    blue_points = []\n    for i in range(N):\n        a, b = map(int, stdin.readline().split())\n        red_points.append((a, b))\n    for i in range(N):\n        c, d = map(int, stdin.readline().split())\n        blue_points.append((c, d))\n\n    count = 0\n    red_points.sort()\n    blue_points.sort()\n    i = 0\n    j = 0\n    while i < N and j < N:\n        if red_points[i][0] < blue_points[j][0] and red_points[i][1] < blue_points[j][1]:\n            count += 1\n            i += 1\n            j += 1\n        elif red_points[i][0] < blue_points[j][0]:\n            i += 1\n        else:\n            j += 1\n\n    print(count)\n    return \"\""
    },
    {
        "number": 4467,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    points = [(int(x), int(y)) for x, y in (line.split() for line in lines[1:])]\n    pairs = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if points[i][0] < points[j][0] and points[i][1] < points[j][1]:\n                pairs += 1\n    return str(pairs)\n\nstdin = \"\"\"\n3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n\"\"\"\n\nprint(solution(stdin)) # Output: 2"
    },
    {
        "number": 4467,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    red = []\n    blue = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        red.append((x, y))\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        blue.append((x, y))\n    \n    max_pairs = 0\n    for i in range(n):\n        for j in range(n):\n            if red[i][0] < blue[j][0] and red[i][1] < blue[j][1]:\n                max_pairs += 1\n                \n    return max_pairs"
    },
    {
        "number": 4467,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    pairs = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] < points[j][0] and points[i][1] < points[j][1]:\n                pairs.add((i, j))\n    print(len(pairs))"
    },
    {
        "number": 4467,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    red_points = []\n    blue_points = []\n    for i in range(1, 2*n+1, 2):\n        red_points.append((int(lines[i]), int(lines[i+1])))\n    for i in range(2*n+2, 2*n+2+2*n, 2):\n        blue_points.append((int(lines[i]), int(lines[i+1])))\n    pairs = set()\n    for red_point in red_points:\n        for blue_point in blue_points:\n            if red_point[0] < blue_point[0] and red_point[1] < blue_point[1]:\n                pairs.add((red_point, blue_point))\n    return len(pairs)"
    },
    {
        "number": 4467,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    n = int(stdin.readline().strip())\n    red_points = []\n    blue_points = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        c, d = map(int, stdin.readline().strip().split())\n        red_points.append((a, b))\n        blue_points.append((c, d))\n\n    # Sorting red and blue points by x and y coordinates\n    red_points = sorted(red_points)\n    blue_points = sorted(blue_points)\n\n    # Initializing variables\n    max_pairs = 0\n    red_points_used = set()\n    blue_points_used = set()\n\n    # Finding pairs\n    for red_point in red_points:\n        for blue_point in blue_points:\n            if red_point[0] < blue_point[0] and red_point[1] < blue_point[1] and (red_point, blue_point) not in red_points_used and (blue_point, red_point) not in blue_points_used:\n                red_points_used.add((red_point, blue_point))\n                blue_points_used.add((blue_point, red_point))\n                max_pairs += 1\n\n    return str(max_pairs)"
    },
    {
        "number": 4467,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = []\n    b = []\n    c = []\n    d = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        a.append(x)\n        b.append(y)\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        c.append(x)\n        d.append(y)\n    cnt = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i] < c[j] and b[i] < d[j]:\n                cnt += 1\n    return str(cnt)"
    },
    {
        "number": 4467,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    red_points = []\n    blue_points = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        red_points.append((a, b))\n    for i in range(n):\n        c, d = map(int, stdin.readline().strip().split())\n        blue_points.append((c, d))\n\n    # sort points by x coordinate\n    red_points.sort(key=lambda x: x[0])\n    blue_points.sort(key=lambda x: x[0])\n\n    # initialize variables\n    count = 0\n    i = 0\n    j = 0\n\n    # iterate through red points\n    while i < n and j < n:\n        if red_points[i][0] < blue_points[j][0]:\n            i += 1\n        elif blue_points[j][0] < red_points[i][0]:\n            j += 1\n        else:\n            if red_points[i][1] < blue_points[j][1]:\n                i += 1\n            elif blue_points[j][1] < red_points[i][1]:\n                j += 1\n            else:\n                count += 1\n                i += 1\n                j += 1\n\n    return str(count)\n"
    },
    {
        "number": 4468,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, t = map(int, stdin.split())\n    ts = list(map(int, stdin.readline().split()))\n\n    # calculate water emission time\n    water_time = max(t, max(ts))\n\n    # calculate total emission time\n    total_time = sum([ts[i] - ts[i-1] for i in range(1, n)]) + (water_time * n)\n\n    # print result\n    print(total_time)"
    },
    {
        "number": 4468,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.readline().split())\n    t_list = list(map(int, stdin.readline().split()))\n\n    total_water = 0\n    last_switch_time = 0\n\n    for i in range(N):\n        current_switch_time = t_list[i]\n        current_water = current_switch_time - last_switch_time\n\n        if current_water < 0:\n            current_water = 0\n\n        total_water += current_water\n        last_switch_time = current_switch_time\n\n    if total_water < T:\n        total_water = T\n\n    print(total_water)"
    },
    {
        "number": 4468,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.strip().split())\n    times = list(map(int, stdin.strip().split()))\n    times.insert(0, 0)\n    times.append(T)\n    water_time = 0\n    for i in range(1, N+1):\n        water_time = max(water_time, times[i] - times[i-1])\n    return str(water_time)"
    },
    {
        "number": 4468,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    t_arr = list(map(int, stdin.split()))\n    t_arr.sort()\n\n    # If the first person pushes the switch after T seconds,\n    # the shower will emit water for T seconds.\n    if t_arr[0] >= t:\n        return str(t)\n\n    # Otherwise, the first person pushes the switch after t_1 seconds,\n    # and the shower will emit water for t_1 + t_2 +... + t_{N-1} + T seconds.\n    x = sum(t_arr) + t\n    return str(x)"
    },
    {
        "number": 4468,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.readline().strip().split())\n    t_list = list(map(int, stdin.readline().strip().split()))\n    t_list.sort()\n    t_list.insert(0, 0)\n    #print(t_list)\n    \n    water_time = 0\n    for i in range(1, N+1):\n        if t_list[i] <= T:\n            water_time += t_list[i]\n        else:\n            water_time += T\n    \n    return str(water_time)"
    },
    {
        "number": 4468,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.readline().split())\n    t = list(map(int, stdin.readline().split()))\n    t.sort()\n    total = 0\n    for i in range(N):\n        total += t[i]\n    if T <= total:\n        return str(T)\n    else:\n        return str(total + T)"
    },
    {
        "number": 4468,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.readline().split())\n    t = list(map(int, stdin.readline().split()))\n    t = [0] + t + [T]\n    ans = t[1]\n    for i in range(2, N+2):\n        ans = max(ans, t[i] + ans)\n    return str(ans)"
    },
    {
        "number": 4468,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    times = list(map(int, stdin.readline().split()))\n    total_time = 0\n    current_time = 0\n    for i in range(n):\n        if i == 0:\n            total_time = max(times[0], t)\n        else:\n            total_time += max(times[i] - times[i-1], t)\n        current_time = max(current_time, total_time)\n    return str(current_time)"
    },
    {
        "number": 4468,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    t_arr = list(map(int, stdin.readline().split()))\n    t_sum = sum(t_arr)\n    if n * t <= t_sum:\n        return str(n * t)\n    else:\n        return str(t_sum)"
    },
    {
        "number": 4468,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, T = map(int, stdin.readline().split())\n    t_list = list(map(int, stdin.readline().split()))\n    # Initialize variables\n    current_time = 0\n    total_water = 0\n    # Iterate over each person\n    for i in range(N):\n        # If the switch is pushed when the shower is already emitting water, add the remaining water to the total water\n        if current_time >= t_list[i]:\n            total_water += T - current_time\n            current_time = T\n        else:\n            # Otherwise, add the water emitted by the person to the total water\n            total_water += t_list[i] - current_time\n            current_time = t_list[i]\n    # Add the remaining water to the total water\n    total_water += T - current_time\n    # Return the total water emitted by the shower\n    return str(total_water)"
    },
    {
        "number": 4469,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    q = int(stdin.readline())\n    queries = []\n    for i in range(q):\n        query = stdin.readline().split()\n        queries.append(query)\n    # initialize variables\n    left = []\n    right = []\n    for i in range(100001):\n        left.append(0)\n        right.append(0)\n    # execute queries\n    ans = []\n    for query in queries:\n        if query[0] == 'L':\n            id = int(query[1])\n            left[id] += 1\n            while left[left[-1]]:\n                left.pop()\n        elif query[0] == 'R':\n            id = int(query[1])\n            right[id] += 1\n            while right[right[-1]]:\n                right.pop()\n        else:\n            id = int(query[1])\n            left_pop = len(left) - left.index(1) - 1\n            right_pop = len(right) - right.index(1) - 1\n            ans.append(min(left_pop, right_pop))\n    # print answers\n    for a in ans:\n        print(a)\n    return ''"
    },
    {
        "number": 4469,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    queries = [line.strip() for line in stdin.split(\"\\n\")]\n    \n    # Initialize variables\n    shelf = []\n    \n    # Process queries\n    for query in queries:\n        if query[0] == \"L\":\n            # Put book to the left\n            id = int(query.split()[1])\n            index = shelf.index(id) if id in shelf else len(shelf)\n            shelf.insert(index, id)\n        elif query[0] == \"R\":\n            # Put book to the right\n            id = int(query.split()[1])\n            index = shelf.index(id) if id in shelf else -1\n            shelf.insert(index + 1, id)\n        elif query[0] == \"?\":\n            # Calculate number of books needed\n            id = int(query.split()[1])\n            count_left = len([1 for x in shelf if x < id])\n            count_right = len(shelf) - count_left - 1\n            print(min(count_left, count_right))\n    \n    # Return empty string as output\n    return \"\""
    },
    {
        "number": 4469,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Main function to solve the problem.\n    :param stdin: Input string as specified in the problem.\n    :return: Output string as specified in the problem.\n    \"\"\"\n    queries = stdin.split(\"\\n\")\n    shelf = []\n    result = []\n    for query in queries:\n        if query.startswith(\"L\"):\n            id = int(query.split()[1])\n            shelf.append(id)\n        elif query.startswith(\"R\"):\n            id = int(query.split()[1])\n            shelf.insert(0, id)\n        else:\n            id = int(query.split()[1])\n            left_books = shelf.index(id)\n            right_books = len(shelf) - left_books - 1\n            result.append(min(left_books, right_books))\n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4469,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split(\"\\n\")\n    shelves = []\n    for q in queries:\n        if q.startswith(\"L\"):\n            id = int(q.split()[1])\n            shelves.insert(0, id)\n        elif q.startswith(\"R\"):\n            id = int(q.split()[1])\n            shelves.append(id)\n        else:\n            id = int(q.split()[1])\n            left_min = min(shelves.index(id), len(shelves) - shelves[::-1].index(id))\n            right_min = min(len(shelves) - shelves.index(id) - 1, shelves.index(id))\n            print(min(left_min, right_min))\n    return \"\""
    },
    {
        "number": 4469,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.splitlines()\n    books = []\n    left_pops = 0\n    right_pops = 0\n    for query in queries:\n        command, id_str = query.split()\n        id = int(id_str)\n        if command == \"L\":\n            books.insert(0, id)\n        elif command == \"R\":\n            books.append(id)\n        elif command == \"?\":\n            left_pops = 0\n            right_pops = 0\n            for i in range(len(books)):\n                if books[i] == id:\n                    left_pops = len(books) - i - 1\n                    right_pops = i\n                    break\n            print(min(left_pops, right_pops))\n    return \"\""
    },
    {
        "number": 4469,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    s = []\n    for i in range(1, q+1):\n        query = lines[i].split()\n        if query[0] == 'L':\n            s.append(int(query[1]))\n        elif query[0] == 'R':\n            s.insert(0, int(query[1]))\n        elif query[0] == '?':\n            id = int(query[1])\n            left = s.index(id)\n            right = len(s)-s[::-1].index(id)-1\n            print(min(left, right))\n    return ''"
    },
    {
        "number": 4469,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.splitlines()\n    q = int(queries[0])\n    stack = []\n    left_count = 0\n    for i in range(q):\n        query = queries[i+1].split()\n        if query[0] == \"L\":\n            stack.append(int(query[1]))\n        elif query[0] == \"R\":\n            stack.append(int(query[1]))\n            left_count += 1\n        else:\n            right_count = 0\n            for j in range(len(stack)):\n                if stack[j] == int(query[1]):\n                    right_count = j\n                    break\n            print(min(left_count, len(stack) - right_count - 1))\n            left_count = right_count\n    return \"\""
    },
    {
        "number": 4469,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    stack = []\n    for i in range(q):\n        query = stdin.split()[0]\n        if query == \"L\":\n            id = int(stdin.split()[1])\n            if id in stack:\n                continue\n            stack.append(id)\n        elif query == \"R\":\n            id = int(stdin.split()[1])\n            if id in stack:\n                continue\n            stack.append(id)\n        else:\n            id = int(stdin.split()[1])\n            if id in stack:\n                stack.remove(id)\n                if stack and stack[-1] < id:\n                    stack.remove(stack[-1])\n                    stack.append(id)\n                elif not stack:\n                    stack.append(id)\n                else:\n                    stack.append(id)\n            print(len(stack))\n    return \"\""
    },
    {
        "number": 4469,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.splitlines()\n    shelf = []\n    for query in queries:\n        query_type, book_id = query.split()\n        if query_type == 'L':\n            shelf.insert(0, book_id)\n        elif query_type == 'R':\n            shelf.append(book_id)\n        else:\n            left_pop_count = len([b for b in shelf if int(b) < int(book_id)])\n            right_pop_count = len(shelf) - len([b for b in shelf if int(b) > int(book_id)])\n            answer = min(left_pop_count, right_pop_count)\n            print(answer)\n            shelf = [b for b in shelf if int(b)!= int(book_id)]"
    },
    {
        "number": 4469,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    shelves = [[]]\n    for i in range(q):\n        query = stdin.readline().strip().split()\n        if query[0] == \"L\":\n            book_id = int(query[1])\n            shelves[-1].append(book_id)\n            shelves.append([])\n        elif query[0] == \"R\":\n            book_id = int(query[1])\n            shelves[-1].append(book_id)\n            shelves.append([])\n        elif query[0] == \"?\":\n            book_id = int(query[1])\n            left_books = []\n            for shelf in shelves:\n                left_books.append(len(shelf))\n            min_pops = min(left_books)\n            if left_books[-1] == min_pops and left_books[-1] > 0:\n                shelves.pop()\n            if left_books[0] == min_pops and left_books[0] > 0:\n                shelves.pop(0)\n            print(min_pops)\n    return \"\""
    },
    {
        "number": 4470,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    move_count = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n //= 2\n        elif n % 3 == 0:\n            n = 2*n // 3\n        elif n % 5 == 0:\n            n = 4*n // 5\n        else:\n            return '-1'\n        move_count += 1\n    return str(move_count)"
    },
    {
        "number": 4470,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        n = int(stdin.readline().strip())\n        count = 0\n        while n!= 1:\n            if n % 2 == 0:\n                n = n // 2\n                count += 1\n            elif n % 3 == 0:\n                n = 2 * n // 3\n                count += 1\n            elif n % 5 == 0:\n                n = 4 * n // 5\n                count += 1\n            else:\n                return -1\n        print(count)"
    },
    {
        "number": 4470,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"0\"\n    else:\n        count = 0\n        while n!= 1:\n            if n % 2 == 0:\n                n /= 2\n                count += 1\n            elif n % 3 == 0:\n                n = 2 * n // 3\n                count += 1\n            elif n % 5 == 0:\n                n = 4 * n // 5\n                count += 1\n            else:\n                return \"-1\"\n        return str(count)"
    },
    {
        "number": 4470,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for i in range(q):\n        n = int(stdin.readline())\n        moves = 0\n        while n!= 1:\n            if n % 2 == 0:\n                n //= 2\n                moves += 1\n            elif n % 3 == 0:\n                n = 2*n // 3\n                moves += 2\n            elif n % 5 == 0:\n                n = 4*n // 5\n                moves += 3\n            else:\n                return -1\n        print(moves)\n    return None"
    },
    {
        "number": 4470,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    moves = 0\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n            moves += 1\n        elif n % 3 == 0:\n            n = 2 * n // 3\n            moves += 1\n        elif n % 5 == 0:\n            n = 4 * n // 5\n            moves += 1\n        else:\n            return -1\n    return moves\n\nq = int(input())\nfor _ in range(q):\n    print(solution(input()))"
    },
    {
        "number": 4470,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_stream = stdin.strip().split('\\n')\n    q = int(input_stream[0])\n    output = []\n\n    for i in range(1, q+1):\n        n = int(input_stream[i])\n        moves = 0\n        while n!= 1:\n            if n % 2 == 0:\n                n = n//2\n                moves += 1\n            elif n % 3 == 0:\n                n = (2*n)//3\n                moves += 1\n            elif n % 5 == 0:\n                n = (4*n)//5\n                moves += 1\n            else:\n                output.append('-1')\n                break\n        else:\n            output.append(moves)\n\n    return '\\n'.join(map(str, output))"
    },
    {
        "number": 4470,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split('\\n')\n    queries.pop(0)\n    for query in queries:\n        n = int(query)\n        count = 0\n        while n!= 1:\n            if n % 2 == 0:\n                n = n // 2\n            elif n % 3 == 0:\n                n = 2 * n // 3\n            elif n % 5 == 0:\n                n = 4 * n // 5\n            else:\n                return '-1'\n            count += 1\n        print(count)"
    },
    {
        "number": 4470,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    elif n % 2 == 0:\n        return str(solution(str(n // 2)))\n    elif n % 3 == 0:\n        return str(solution(str(2 * n // 3)))\n    elif n % 5 == 0:\n        return str(solution(str(4 * n // 5)))\n    else:\n        return \"-1\"\n\nstdin = input()\nq = int(stdin)\nfor i in range(q):\n    n = int(input())\n    print(solution(str(n)))"
    },
    {
        "number": 4470,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    answers = []\n    for i in range(q):\n        n = int(stdin.readline().strip())\n        moves = 0\n        while n!= 1:\n            if n % 2 == 0:\n                n = n // 2\n                moves += 1\n            elif n % 3 == 0:\n                n = 2*n // 3\n                moves += 1\n            elif n % 5 == 0:\n                n = 4*n // 5\n                moves += 1\n            else:\n                break\n        if n == 1:\n            answers.append(moves)\n        else:\n            answers.append(-1)\n    return '\\n'.join(map(str, answers))"
    },
    {
        "number": 4470,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        n = int(stdin.readline().strip())\n        count = 0\n        while n!= 1:\n            if n % 2 == 0:\n                n //= 2\n                count += 1\n            elif n % 3 == 0:\n                n = 2*n//3\n                count += 1\n            elif n % 5 == 0:\n                n = 4*n//5\n                count += 1\n            else:\n                return '-1'\n        print(count)\n    return 'Solution Complete'\n\nprint(solution(sys.stdin))<|im_sep|>"
    },
    {
        "number": 4471,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        field = [0] * n\n        for j in range(n):\n            field[j] = a[j]\n        can_clear = True\n        while field.count(0) < n:\n            for j in range(n):\n                if field[j] > 0:\n                    field[j] -= 1\n                    for k in range(j+1, n):\n                        if field[k] == 0 and k - j == 1:\n                            field[k] = 2\n                            break\n                    else:\n                        can_clear = False\n                        break\n            if not can_clear:\n                break\n        if can_clear:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n\ndef"
    },
    {
        "number": 4471,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        if all(x >= 2 for x in a):\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4471,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    for i in range(1, t * 2 + 1, 2):\n        n = int(lines[i])\n        a = list(map(int, lines[i + 1].split()))\n        if all(x <= 1 for x in a):\n            print(\"YES\")\n            continue\n        count = 0\n        for j in range(n):\n            if a[j] > 1:\n                count += 1\n        if count == n:\n            print(\"NO\")\n            continue\n        for _ in range(count):\n            a = [x - 1 for x in a]\n        if all(x >= 1 for x in a):\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4471,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.strip().split())\n    for i in range(n):\n        if a[i] > 0:\n            if i == 0:\n                if a[i] > 2:\n                    return \"NO\"\n                elif a[i] == 2:\n                    a[i] -= 1\n            else:\n                if a[i] > 1:\n                    return \"NO\"\n                elif a[i] == 1:\n                    a[i] -= 1\n                elif i == n-1 and a[i] == 0:\n                    return \"YES\"\n                else:\n                    return \"NO\"\n    return \"YES\"\n\ndef"
    },
    {
        "number": 4471,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    for i in range(1, len(lines), 2):\n        n = int(lines[i])\n        a = list(map(int, lines[i+1].split()))\n        for j in range(n):\n            if a[j] < 2:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4471,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, 2*t, 2):\n        n = int(lines[i])\n        a = list(map(int, lines[i+1].split()))\n        if not can_clear_field(n, a):\n            return \"NO\"\n    return \"YES\"\n\ndef"
    },
    {
        "number": 4471,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        if sum(a) <= 0:\n            print(\"YES\")\n            continue\n        i = 0\n        while i < n and a[i] > 0:\n            a[i] -= 1\n            i += 1\n        if i >= n:\n            print(\"YES\")\n            continue\n        while i < n:\n            if a[i] > 0:\n                a[i] -= 1\n            i += 1\n        if sum(a) > 0:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    return \"\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        \n        # simulate process\n        for j in range(2*n):\n            # check if all a are greater than zero\n            if not all(a):\n                return \"NO\"\n            # replace a with a-1\n            a = list(map(lambda x: x-1 if x>0 else 0, a))\n            \n        # check if all a are zero\n        if all(a):\n            return \"YES\"\n            \n    return \"YES\""
    },
    {
        "number": 4471,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        if max(a) < 2:\n            print(\"YES\")\n        else:\n            ans = True\n            for j in range(n):\n                if a[j] < 2:\n                    ans = False\n                    break\n            if ans:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\nstdin = \"\"\"4\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\"\"\"\n\nsolution(stdin) # Output: YES NO YES YES"
    },
    {
        "number": 4471,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin.readline().strip())):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        k = 0\n        for i in range(n):\n            if a[i] >= 2:\n                k += 1\n                a[i] -= 2\n        if k == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4472,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n    count = 0\n    for i in range(1, n):\n        if a[i]!= b[i]:\n            count += 1\n            if count == 1:\n                a = a[:i] + b[i] + a[i+1:]\n                b = b[:i] + a[i] + b[i+1:]\n            elif count == 2:\n                a = a[:i] + b[i] + a[i+1:]\n                b = b[:i] + b[i] + b[i+1:]\n            elif count == 3:\n                a = a[:i] + a[i] + a[i+1:]\n                b = b[:i] + b[i] + b[i+1:]\n            else:\n                return -1\n    return count"
    },
    {
        "number": 4472,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n\n    count = 0\n    for i in range(1, n+1):\n        if a[i-1]!= b[n-i+1]:\n            count += 1\n            a = a[:i-1] + b[n-i+1] + a[i:]\n            b = b[:n-i+1] + a[i-1] + b[n-i:]\n\n    return count"
    },
    {
        "number": 4472,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n    \n    # count number of swaps needed to make a and b equal\n    count = 0\n    for i in range(1, n+1):\n        if a[i-1]!= b[i-1]:\n            count += 1\n    \n    # count preprocess moves\n    preprocess = 0\n    for i in range(1, n+1):\n        if a[i-1]!= b[i-1]:\n            preprocess += 1\n            if preprocess == count:\n                break\n    \n    return preprocess"
    },
    {
        "number": 4472,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n\n    # preprocess moves to make the strings equal\n    count = 0\n    for i in range(1, n+1):\n        if a[i-1]!= b[i-1]:\n            if a[i-1] == 'z':\n                a = a[:i-1] + 'a' + a[i:]\n                b = b[:i-1] + 'a' + b[i:]\n            else:\n                a = a[:i-1] + chr(ord(a[i-1])+1) + a[i:]\n                b = b[:i-1] + chr(ord(b[i-1])+1) + b[i:]\n            count += 1\n\n    # apply changes to make the strings equal\n    for i in range(1, n//2+1):\n        if a[i-1] == b[n-i]:\n            a = a[:i-1] + b[n-i] + a[i:]\n            b = b[:n-i] + a[i-1] + b[n-i+1:]\n            count += 1\n        elif a[i-1] == b[i-1]:\n            a = a[:i-1] + b[i-1] + a[i:]\n            b = b[:i-1] + a[i-1] + b[i:]\n            count += 1\n        elif b[i-1] == a[n-i]:\n            a = a[:n-i] + b[i-1] + a[n-i:]\n            b = b[:i-1] + a[n-i] + b[i:]\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4472,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(stdin.readline().strip())\n    b = list(stdin.readline().strip())\n    count = 0\n    for i in range(1, n):\n        if a[i]!= b[i]:\n            count += 1\n            if count > 1:\n                return -1\n            a[i], b[i] = b[i], a[i]\n            if i <= n//2:\n                if a[i]!= b[i]:\n                    count += 1\n                    if count > 1:\n                        return -1\n                    a[i], b[i] = b[i], a[i]\n                if a[n-i+1]!= b[n-i+1]:\n                    count += 1\n                    if count > 1:\n                        return -1\n                    a[n-i+1], b[n-i+1] = b[n-i+1], a[n-i+1]\n            else:\n                if a[i]!= b[i]:\n                    count += 1\n                    if count > 1:\n                        return -1\n                    a[i], b[i] = b[i], a[i]\n                if a[n-i+1]!= b[n-i+1]:\n                    count += 1\n                    if count > 1:\n                        return -1\n                    a[n-i+1], b[n-i+1] = b[n-i+1], a[n-i+1]\n    return count"
    },
    {
        "number": 4472,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n\n    count = 0\n\n    # check if a is equal to b\n    if a == b:\n        return 0\n\n    # check if a and b are the same after swapping a_i with b_i\n    for i in range(n):\n        if a[i]!= b[i]:\n            a, b = a[:i] + b[i], b[:i] + a[i]\n            count += 1\n            if a == b:\n                return count\n\n    # check if a and b are the same after swapping a_i with a_{n-i+1}\n    for i in range(n):\n        if a[i]!= a[n-i-1]:\n            a, b = a[:i] + a[n-i-1], b[:i] + b[n-i-1]\n            count += 1\n            if a == b:\n                return count\n\n    # check if a and b are the same after swapping b_i with b_{n-i+1}\n    for i in range(n):\n        if b[i]!= b[n-i-1]:\n            a, b = a[:i] + b[n-i-1], b[:i] + a[n-i-1]\n            count += 1\n            if a == b:\n                return count\n\n    # check if a and b are the same after swapping a_i with a_{n-i+1} and b_i with b_{n-i+1}\n    for i in range(n):\n        if a[i]!= a[n-i-1] and b[i]!= b[n-i-1]:\n            a, b = a[:i] + a[n-i-1], b[:i] + b[n-i-1]\n            count += 1\n            if a == b:\n                return count\n\n    # check if a and b are the same after swapping a_i with a_{n-i+1} and b_i with a_{n-i+1}\n    for i in range(n):\n        if a[i]!= a[n-i-1] and b[i]!= a[n-i-1]:\n            a, b = a[:i] + a[n-i-1], b[:i] + a[n-i-1]\n            count += 1\n            if a == b:\n                return count\n\n    # check if a and b are the same after swapping a_i with b_i\n    for i in range(n):\n        if a[i]!= b[i]:\n            a, b = a[:i] + b[i], b[:i] + a[i]\n            count += 1\n            if a == b:\n                return count\n\n    # check if a and b are the same after swapping a_i with b_{n-i+1}\n    for i in range(n):\n        if a[i]!= b[n-i-1]:\n            a, b = a[:i] + b[n-i-1], b[:i] + a[n-i-1]\n            count += 1\n            if a == b:\n                return count\n\n    # check if a and b are the same after swapping a_{n-i+1} with b_i\n    for i in range(n):\n        if a[n-i-1]!= b[i]:\n            a, b = a[:i] + b[i], b[:i] + a[i]\n            count += 1\n            if a == b:\n                return count\n\n    # check if a and b are the same after swapping a_{n-i+1} with b_{n-i+1}\n    for i in range(n):\n        if a[n-i-1]!= b[n-i-1]:\n            a, b = a[:i] + b[n-i-1], b[:i] + a[n-i-1]\n            count += 1\n            if a == b:\n                return count\n\n    # no preprocess moves required\n    return 0\n"
    },
    {
        "number": 4472,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n\n    count = 0\n\n    # check if a and b are equal\n    if a == b:\n        print(0)\n        return\n    \n    # check if a is already equal to b with a single preprocess move\n    for i in range(n):\n        if a[i]!= b[i]:\n            count += 1\n            break\n\n    # check if a is already equal to b with two preprocess moves\n    for i in range(n):\n        if a[i]!= b[n - i - 1]:\n            count += 1\n            break\n\n    print(count)\n"
    },
    {
        "number": 4472,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(str, stdin.splitlines())\n    n = int(n)\n    moves = 0\n    for i in range(1, n+1):\n        if a[i-1]!= b[n-i+1]:\n            if a[i-1] == b[i-1]:\n                moves += 1\n            elif a[i-1] == a[n-i+1]:\n                moves += 1\n            else:\n                moves += 2\n        if b[i-1]!= a[n-i+1]:\n            if b[i-1] == a[i-1]:\n                moves += 1\n            elif b[i-1] == b[n-i+1]:\n                moves += 1\n            else:\n                moves += 2\n    return moves"
    },
    {
        "number": 4472,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n\n    count = 0\n    for i in range(n):\n        if a[i]!= b[i]:\n            count += 1\n\n    if count % 2 == 1:\n        return \"Impossible\"\n\n    preprocess = 0\n    for i in range(n):\n        if a[i]!= b[i]:\n            continue\n        if i == 0 or a[i-1]!= b[i-1]:\n            preprocess += 1\n            a = a[:i] + a[i+1] + a[i] + a[i+2:]\n            b = b[:i] + b[i+1] + b[i] + b[i+2:]\n    for i in range(n):\n        if a[i]!= b[i]:\n            continue\n        if i == n-1 or a[i+1]!= b[i+1]:\n            preprocess += 1\n            a = a[:i] + a[i] + a[i+1] + a[i+2:]\n            b = b[:i] + b[i] + b[i+1] + b[i+2:]\n    if n % 2 == 1 and a[n//2] == a[n//2+1]:\n        preprocess += 1\n        a = a[:n//2] + a[n//2+1] + a[n//2] + a[n//2+2:]\n        b = b[:n//2] + b[n//2+1] + b[n//2] + b[n//2+2:]\n\n    return preprocess"
    },
    {
        "number": 4472,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n\n    changes = 0\n\n    # preprocess move to replace a character in a\n    for i in range(1, n+1):\n        if a[i-1]!= b[i-1]:\n            changes += 1\n            a = a[:i-1] + b[i-1] + a[i:]\n    \n    # preprocess move to replace a character in b\n    for i in range(1, n+1):\n        if b[i-1]!= a[n-i]:\n            changes += 1\n            b = b[:i-1] + a[n-i] + b[i:]\n\n    # check if the strings are already equal\n    if a == b:\n        return changes\n    \n    # make the strings equal by applying swaps\n    for i in range(1, n+1):\n        if a[i-1]!= b[i-1]:\n            changes += 1\n            a, b = a[:i-1] + b[i-1] + a[i:], b[:i-1] + a[i-1] + b[i:]\n        if i!= n and a[i-1]!= a[n-i]:\n            changes += 1\n            a, b = a[:i-1] + a[n-i] + a[i:], b[:i-1] + b[n-i] + b[i:]\n        if i!= n and b[i-1]!= b[n-i]:\n            changes += 1\n            a, b = a[:i-1] + b[n-i] + a[i:], b[:i-1] + a[i-1] + b[i:]\n    \n    return changes"
    },
    {
        "number": 4473,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    frog_pos = [0] * int(stdin.split('\\n')[0])\n    for i in range(1, len(stdin.split('\\n'))):\n        a, b, k = map(int, stdin.split('\\n')[i].split())\n        frog_pos[i-1] = k*(a+(k-1)*b)\n    return '\\n'.join(map(str, frog_pos))"
    },
    {
        "number": 4473,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    t = int(stdin.readline().strip())\n    queries = [list(map(int, stdin.readline().strip().split())) for _ in range(t)]\n    \n    # Solve queries\n    for query in queries:\n        a, b, k = query\n        \n        # Calculate the position of the frog after k jumps\n        pos = 0\n        for i in range(k):\n            if i % 2 == 0:\n                pos += a\n            else:\n                pos -= b\n        \n        print(pos)"
    },
    {
        "number": 4473,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.strip().split(\"\\n\")\n    t = int(inputs[0])\n    for i in range(1, t+1):\n        a, b, k = map(int, inputs[i].split())\n        if k % 2 == 0:\n            position = k*a // 2\n        else:\n            position = -k*b // 2\n        print(position)\n    return \"\""
    },
    {
        "number": 4473,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    results = []\n    for line in lines:\n        a, b, k = map(int, line.split())\n        if k % 2 == 0:\n            x = 0\n            for i in range(k):\n                if i % 2 == 0:\n                    x += a\n                else:\n                    x -= b\n        else:\n            x = 0\n            for i in range(k):\n                if i % 2 == 0:\n                    x -= b\n                else:\n                    x += a\n        results.append(x)\n    return \"\\n\".join(map(str, results))\n"
    },
    {
        "number": 4473,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, k = map(int, stdin.readline().strip().split())\n        if k % 2 == 0:\n            position = a * (k // 2)\n        else:\n            position = a * (k // 2) + b\n        print(position)\n\nsolution(stdin=\"\"\"6\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\"\"\")"
    },
    {
        "number": 4473,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n_queries = int(stdin.readline().strip())\n    for i in range(n_queries):\n        a, b, k = map(int, stdin.readline().strip().split())\n        jumps = []\n        for j in range(k):\n            if (j % 2 == 0):\n                jumps.append(a)\n            else:\n                jumps.append(b)\n        print(sum(jumps))\n    return \"\""
    },
    {
        "number": 4473,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    queries = []\n    for i in range(1, t+1):\n        queries.append(list(map(int, lines[i].strip().split())))\n\n    # Solve queries\n    results = []\n    for query in queries:\n        a, b, k = query\n        if k % 2 == 0:\n            x = 0\n            for i in range(k):\n                x += a if i % 2 == 0 else -b\n        else:\n            x = 0\n            for i in range(k):\n                x -= b if i % 2 == 0 else a\n        results.append(x)\n\n    # Format output\n    return '\\n'.join(map(str, results))\n"
    },
    {
        "number": 4473,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    results = []\n    for i in range(1, t+1):\n        a, b, k = map(int, lines[i].strip().split())\n        if k % 2 == 0:\n            pos = k // 2 * (a + b)\n        else:\n            pos = (k // 2) * b - ((k // 2) ** 2 - k // 2) * a\n        results.append(pos)\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4473,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    results = []\n    for i in range(n):\n        a, b, k = map(int, stdin.readline().split())\n        if k % 2 == 0:\n            pos = a * k // 2\n        else:\n            pos = a * (k // 2) + b * (k // 2)\n        results.append(pos)\n    return \"\\n\".join(map(str, results))\n"
    },
    {
        "number": 4473,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    ans = []\n    for _ in range(n):\n        a, b, k = map(int, stdin.readline().strip().split())\n        if k % 2 == 0:\n            x = 0\n            for _ in range(k):\n                x += a\n        else:\n            x = 0\n            for _ in range(k):\n                x -= b\n        ans.append(x)\n    return '\\n'.join(map(str, ans))\n\nprint(solution('''6\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999'''))"
    },
    {
        "number": 4474,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    q = int(lines[0])\n    output = []\n    for i in range(1, q+1):\n        n = int(lines[i])\n        m = n+1\n        while True:\n            found = False\n            for j in range(3, int(m**0.5)+1):\n                if m % j == 0:\n                    found = True\n                    break\n            if not found:\n                break\n            else:\n                m += 1\n        output.append(m)\n    return '\\n'.join(map(str, output))"
    },
    {
        "number": 4474,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    for i in range(q):\n        m = n\n        while True:\n            if is_good(m):\n                break\n            m += 1\n        print(m)\n\ndef"
    },
    {
        "number": 4474,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        n = int(stdin.readline().strip())\n        m = 3**int((n-1).bit_length()/3)*3\n        if m >= n:\n            m += 27**(int((n-1).bit_length()/3)-1)*3\n        print(m)"
    },
    {
        "number": 4474,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(n):\n        count = 0\n        m = n + 1\n        while count < 3:\n            m += 3 ** count\n            count += 1\n        while m % 2 == 0:\n            count += 1\n            m //= 2\n        while m % 3 == 0:\n            count += 1\n            m //= 3\n        if m == 1:\n            print(n + 2 * (count - 1))\n        else:\n            print(n + 3 * (count - 1))"
    },
    {
        "number": 4474,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    q = int(lines[0])\n    for i in range(1, q+1):\n        n = int(lines[i])\n        m = n\n        while True:\n            if m == 0:\n                m = 2\n            if m > n:\n                break\n            if is_good(m):\n                print(m)\n                break\n            m += 1\n\ndef"
    },
    {
        "number": 4474,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        n = int(stdin.readline().strip())\n        i = 2\n        while True:\n            if i**3 > n:\n                break\n            i += 1\n        print(i)"
    },
    {
        "number": 4474,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for i in range(q):\n        n = int(stdin.readline())\n        # check if n itself is a good number\n        if is_good(n):\n            print(n)\n        else:\n            # iterate over all the numbers greater than n and check if they are good\n            m = n + 1\n            while not is_good(m):\n                m += 1\n            print(m)\n\n\ndef"
    },
    {
        "number": 4474,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    q = int(lines[0])\n    for i in range(1, q+1):\n        n = int(lines[i])\n        count = 1\n        while True:\n            m = count * 3**(count-1)\n            if m >= n:\n                print(m)\n                break\n            count += 1\n    return \"\""
    },
    {
        "number": 4474,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    result = []\n    for i in range(q):\n        n = int(stdin.readline().strip())\n        result.append(next_good_number(n))\n    return '\\n'.join(str(r) for r in result)\n\n\ndef"
    },
    {
        "number": 4474,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        m = n\n        while m % 3!= 0:\n            m += 1\n        print(m)"
    },
    {
        "number": 4475,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    for i in range(1, len(stdin)):\n        a, b, x, y, n = map(int, stdin[i].strip().split())\n        min_a, max_a = x, a\n        min_b, max_b = y, b\n        for j in range(n):\n            if min_a < max_a:\n                min_a += 1\n            if min_b < max_b:\n                min_b += 1\n        print(min_a * min_b)\n    return \"\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines.pop(0))\n\n    for line in lines:\n        a, b, x, y, n = map(int, line.split())\n        if a < x:\n            a = x\n        if b < y:\n            b = y\n        while n > 0:\n            if a > b:\n                a -= 1\n            else:\n                b -= 1\n            n -= 1\n        print(a * b)\n\n    return ''\n\nprint(solution('''7\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10'''))"
    },
    {
        "number": 4475,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.strip().split('\\n'):\n        a, b, x, y, n = map(int, line.split())\n        if a < x:\n            a = x\n        if b < y:\n            b = y\n        product = a * b\n        for i in range(n):\n            if a > x and b > y:\n                if a > b:\n                    a -= 1\n                    b -= 1\n                else:\n                    b -= 1\n            else:\n                if a > b:\n                    a -= 1\n                else:\n                    b -= 1\n        if product > a * b:\n            product = a * b\n        print(product)"
    },
    {
        "number": 4475,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for i, line in enumerate(stdin.split('\\n')):\n        if i == 0:\n            t = int(line)\n            continue\n        a, b, x, y, n = map(int, line.split())\n        ans = 10**9\n        for i in range(n):\n            if a >= x:\n                if ans > a*ans:\n                    ans = a*ans\n            if b >= y:\n                if ans > b*ans:\n                    ans = b*ans\n            if a >= x:\n                a -= 1\n            if b >= y:\n                b -= 1\n        print(ans)\n\nstdin = \"\"\"\n7\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n\"\"\"\n\nsolution(stdin)"
    },
    {
        "number": 4475,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        a, b, x, y, n = map(int, stdin.readline().split())\n        if x >= a and y >= b:\n            print(a * b)\n        else:\n            print(min(a * (b - y), b * (a - x)))\n    return \"\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        a, b, x, y, n = map(int, stdin.readline().split())\n        if x > a:\n            a, b = x, b\n        elif x > b:\n            a, b = a, x\n        if y > b:\n            a, b = a, y\n        ans = a * b\n        for j in range(n):\n            if a > x:\n                a -= 1\n            if b > y:\n                b -= 1\n            ans = min(ans, a * b)\n        print(ans)\n    return \"\""
    },
    {
        "number": 4475,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, x, y, n = map(int, stdin.readline().strip().split())\n        # initialize variables\n        if a < x:\n            a = x\n        if b < y:\n            b = y\n        # apply operations\n        for i in range(n):\n            if a > x and b > y:\n                a -= 1\n                b -= 1\n            elif a > x:\n                a -= 1\n            else:\n                b -= 1\n        # compute and print result\n        result = a * b\n        print(result)\n\n\ndef"
    },
    {
        "number": 4475,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, x, y, n = map(int, stdin.readline().strip().split())\n        if a < x or b < y:\n            print(0)\n            continue\n        if n == 0:\n            print(a*b)\n            continue\n        ans = a*b\n        for _ in range(n):\n            if a > x and b > y:\n                ans = min(ans, a*b)\n                if a == b:\n                    break\n                elif a > b:\n                    a -= 1\n                else:\n                    b -= 1\n            else:\n                break\n        print(ans)\n    return \"\""
    },
    {
        "number": 4475,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b, x, y, n = map(int, stdin.readline().strip().split())\n        if a < x:\n            a = x\n        if b < y:\n            b = y\n        if n == 0:\n            print(a * b)\n        else:\n            count = 0\n            while count < n:\n                if a < b:\n                    a -= 1\n                else:\n                    b -= 1\n                count += 1\n            print(a * b)\n    return \"\"\n\nstdin = \"\"\"\n7\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n\"\"\"\n\nprint(solution(stdin)) # Output: 70\\n77\\n177177\\n999999999000000000\\n999999999\\n55\\n10\\n"
    },
    {
        "number": 4475,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for t in range(int(stdin.split()[0])):\n        a, b, x, y, n = map(int, stdin.readline().split())\n        if a < x:\n            a = x\n        if b < y:\n            b = y\n        for i in range(n):\n            if a > b:\n                a = a - 1\n                a = max(a, x)\n            else:\n                b = b - 1\n                b = max(b, y)\n        print(a*b)\n    return \"\""
    },
    {
        "number": 4476,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        a, b = map(int, stdin.split()[1:])\n        if a == b:\n            print(0)\n            continue\n        moves = 0\n        while a < b:\n            if a & 1:\n                a += 2\n                moves += 1\n            else:\n                a += 1\n                moves += 1\n        print(moves)"
    },
    {
        "number": 4476,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    for i in range(1, len(input)):\n        a, b = list(map(int, input[i].split()))\n        if a == b:\n            print(\"0\")\n            continue\n        if a % 2 == 0:\n            x, y = a // 2, b // 2\n        else:\n            x, y = a, b\n        count = 0\n        while x < y:\n            if x % 2 == 1:\n                x += 1\n            else:\n                x -= 1\n            if y % 2 == 1:\n                y += 1\n            else:\n                y -= 1\n            count += 1\n        print(count)\n    return \"\""
    },
    {
        "number": 4476,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for i in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n\n        ans = 0\n        while a!= b:\n            if a % 2 == 0:\n                a -= 2\n            else:\n                a += 1\n            ans += 1\n\n        print(ans)\n"
    },
    {
        "number": 4476,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        if a == b:\n            print(0)\n        elif a > b:\n            print(-1)\n        else:\n            moves = 0\n            while a!= b:\n                if a % 2 == 0:\n                    x = a // 2\n                    y = 0\n                else:\n                    x = (a + 1) // 2\n                    y = a - x\n                if y <= 0:\n                    moves = -1\n                    break\n                if x <= y:\n                    a -= y\n                else:\n                    a += x\n                moves += 1\n            if moves == -1:\n                print(-1)\n            else:\n                print(moves)"
    },
    {
        "number": 4476,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n\n    for i in range(t):\n        a, b = map(int, stdin.readline().split())\n\n        moves = 0\n\n        while a!= b:\n            if a % 2 == 0:\n                a -= 1\n                moves += 1\n            else:\n                x = a // 2\n                if x > b:\n                    a -= 1\n                    moves += 1\n                else:\n                    a = x\n                    moves += 1\n\n            if a % 2 == 0:\n                a += 1\n                moves += 1\n            else:\n                y = a // 2\n                if y > b:\n                    a += 1\n                    moves += 1\n                else:\n                    a = y\n                    moves += 1\n\n        print(moves)\n\n    return \"\""
    },
    {
        "number": 4476,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def count_moves(a, b):\n        if a == b:\n            return 0\n        moves = 0\n        while a!= b:\n            if a % 2 == 0:\n                a -= 1\n            else:\n                a += 1\n            moves += 1\n        return moves\n\n    # read input\n    t = int(stdin.readline().strip())\n    output = \"\"\n    for i in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        output += str(count_moves(a, b)) + \"\\n\"\n    return output"
    },
    {
        "number": 4476,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    cases = []\n    for i in range(1, t+1):\n        a, b = map(int, lines[i].split())\n        cases.append((a, b))\n\n    # Solve cases\n    for a, b in cases:\n        count = 0\n        x = 1\n        y = 1\n        while a!= b:\n            if a < b:\n                a += x\n                x += 2\n                y = 1\n            else:\n                a -= y\n                y += 2\n                x = 1\n            count += 1\n        print(count)\n\n    # Return output\n    return ''"
    },
    {
        "number": 4476,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        if a == b:\n            print(0)\n        else:\n            moves = 0\n            while a!= b:\n                if a % 2 == 0:\n                    if a > b:\n                        a -= a % 2\n                    else:\n                        a += 1\n                else:\n                    if a > b:\n                        a -= 1\n                    else:\n                        a += a % 2\n                moves += 1\n            print(moves)"
    },
    {
        "number": 4476,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for test_case in stdin.split('\\n'):\n        a, b = map(int, test_case.split())\n        \n        if a == b:\n            print(0)\n            continue\n        \n        moves = 0\n        \n        while a!= b:\n            if a % 2 == 1:\n                a += 2\n            else:\n                a -= 1\n            moves += 1\n            \n        print(moves)\n        \n"
    },
    {
        "number": 4476,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        a, b = map(int, stdin.split()[1:])\n        if a == b:\n            print(0)\n        else:\n            moves = 0\n            while a!= b:\n                if a % 2 == 0:\n                    y = abs(a - b) // 2\n                    a -= y\n                    moves += 1\n                else:\n                    x = abs(a - b) // 2\n                    a += x\n                    moves += 1\n            print(moves)\n    return \"\""
    },
    {
        "number": 4477,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.strip().split('\\n')\n    for case in cases:\n        x = int(case)\n        count = 1\n        digit = x // 10**(len(str(x))-1)\n        while digit > 0:\n            count += len([i for i in range(1, digit+1) if str(i).count(str(digit)) == 1])\n            digit //= 10\n        print(count)\n    return ''"
    },
    {
        "number": 4477,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        x = int(lines[i])\n        num_digits = len(str(x))\n        answer = (num_digits-1) * (10**(num_digits-1))\n        print(answer)\n    return \"\""
    },
    {
        "number": 4477,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        x = int(stdin.readline())\n        n = len(str(x))\n        count = n * (n + 1) // 2\n        print(count)\n    return ''"
    },
    {
        "number": 4477,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    for i in range(n):\n        x = int(stdin.split()[i+1])\n        count = 0\n        for digit in str(x):\n            count += int(digit)\n        print(count)\n    return \"\"\n\ndef"
    },
    {
        "number": 4477,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def count_digits(num):\n        count = 0\n        while num > 0:\n            num //= 10\n            count += 1\n        return count\n    \n    t = int(stdin.readline())\n    for i in range(t):\n        x = int(stdin.readline())\n        count = 0\n        digit = x // 10 ** (count_digits(x) - 1)\n        while digit > 0:\n            count += count_digits(digit)\n            digit //= 10\n        print(count)"
    },
    {
        "number": 4477,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip().split()[0])\n    for i in range(t):\n        x = int(stdin.strip().split()[i])\n        num_digits = len(str(x))\n        total_digits = sum([len(str(j)) for j in range(1, 10**num_digits) if sum(int(digit) for digit in str(j)) == x])\n        print(total_digits)"
    },
    {
        "number": 4477,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    for i in range(1, n+1):\n        x = int(lines[i])\n        digits = [int(d) for d in str(x)]\n        n_digits = len(digits)\n        digit_sum = sum(digits)\n        total_presses = digit_sum * n_digits\n        print(total_presses)\n    return \"\""
    },
    {
        "number": 4477,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    for i in range(len(stdin)):\n        if i == 0:\n            x = int(stdin[i])\n        else:\n            x = 0\n    total_digits = 0\n    digit = 1\n    while digit <= x:\n        total_digits += x // digit + 1\n        digit *= 10\n    print(total_digits)"
    },
    {
        "number": 4477,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        x = int(stdin.split()[1])\n        digits = set(str(x))\n        count = 0\n        for digit in digits:\n            count += ord(digit) - ord('0')\n        print(count)\n\nstdin = \"\"\"4\n22\n9999\n1\n777\"\"\"\n\nsolution(stdin)"
    },
    {
        "number": 4477,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for x in stdin:\n        x = int(x)\n        total_digits = 0\n        digit = x % 10\n        while x:\n            x //= 10\n            total_digits += 1\n        total_digits -= 1\n        pressed_digits = digit * (total_digits // digit)\n        if total_digits % digit!= 0:\n            pressed_digits += digit\n        print(pressed_digits)"
    },
    {
        "number": 4478,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    \n    seqs = []\n    for i in range(k):\n        n = int(stdin.readline())\n        seq = list(map(int, stdin.readline().split()))\n        seqs.append(seq)\n    \n    for i in range(k):\n        for j in range(i+1, k):\n            if sum(seqs[i][:-1]) == sum(seqs[j][:-1]):\n                return \"YES\\n%d %d\\n%d %d\" % (i+1, seqs[i].index(min(seqs[i])), j+1, seqs[j].index(min(seqs[j])))\n    \n    return \"NO\""
    },
    {
        "number": 4478,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    seqs = []\n    sums = []\n    for i in range(k):\n        n = int(stdin.readline().strip())\n        seq = list(map(int, stdin.readline().strip().split()))\n        sums.append(sum(seq))\n        seqs.append(seq)\n    pairs = []\n    for i in range(k):\n        for j in range(i+1, k):\n            if sums[i] == sums[j] and seqs[i]!= seqs[j]:\n                pairs.append((i,j))\n    if len(pairs) == 0:\n        return \"NO\"\n    else:\n        ans = pairs[0]\n        for pair in pairs:\n            if (pair[0] < ans[0] and pair[1] < ans[1]) or (pair[0] > ans[0] and pair[1] > ans[1]):\n                ans = pair\n        i, x, j, y = ans[0], 0, ans[1], 0\n        for j in range(1, len(seqs[ans[1]])+1):\n            s = sum(seqs[ans[1]]) - seqs[ans[1]][j-1]\n            if s == sums[ans[0]] - seqs[ans[0]][-1]:\n                y = j\n                break\n        for i in range(1, len(seqs[ans[0]])+1):\n            s = sum(seqs[ans[0]]) - seqs[ans[0]][i-1]\n            if s == sums[ans[1]] - seqs[ans[1]][-1]:\n                x = i\n                break\n        return \"YES\\n\"+str(ans[0]+1)+\" \"+str(x)+\"\\n\"+str(ans[1]+1)+\" \"+str(y)"
    },
    {
        "number": 4478,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    seqs = []\n    for i in range(k):\n        n, *arr = map(int, stdin.readline().strip().split())\n        seqs.append(arr)\n    ans = \"NO\"\n    for i in range(k):\n        for j in range(i+1, k):\n            a1 = sum(seqs[i][:seqs[i].index(seqs[i][0])+1])\n            a2 = sum(seqs[j][:seqs[j].index(seqs[j][0])+1])\n            if a1 + a2 == sum(seqs[i][seqs[i].index(seqs[i][0])+1:]) + sum(seqs[j][seqs[j].index(seqs[j][0])+1:]):\n                ans = \"YES\"\n                print(ans)\n                print(i+1, len(seqs[i])-1)\n                print(j+1, len(seqs[j])-1)\n                return\n    print(ans)"
    },
    {
        "number": 4478,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    k = int(stdin.readline().strip())\n    sequences = []\n    for i in range(k):\n        n = int(stdin.readline().strip())\n        seq = list(map(int, stdin.readline().strip().split()))\n        sequences.append((n, seq))\n\n    # find pairs\n    pairs = []\n    for i in range(k):\n        for j in range(i + 1, k):\n            if sum(sequences[i][1]) + sum(sequences[j][1]) == 0:\n                pairs.append((i, j))\n\n    # check pairs\n    for i, j in pairs:\n        for x in range(1, sequences[i][0]):\n            for y in range(1, sequences[j][0]):\n                if sum(sequences[i][1][:x]) + sum(sequences[i][1][x+1:]) == sum(sequences[j][1][:y]) + sum(sequences[j][1][y+1:]):\n                    return \"YES\\n\" + \" \".join(map(str, [i+1, x])) + \"\\n\" + \" \".join(map(str, [j+1, y]))\n\n    # no solution found\n    return \"NO\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def find_sum(a: List[int]) -> int:\n        return sum(a) - (len(a) * (len(a) - 1)) // 2\n    \n    # Reading input\n    k = int(stdin.readline().strip())\n    seqs = []\n    for i in range(k):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        seqs.append((n, a))\n    \n    # Finding pairs\n    pairs = []\n    for i in range(k):\n        for j in range(i+1, k):\n            if find_sum(seqs[i][1]) == find_sum(seqs[j][1]):\n                pairs.append((i, j))\n    \n    # Printing output\n    if not pairs:\n        return \"NO\"\n    else:\n        pair = pairs[0]\n        x = seqs[pair[0]][1].index(min(seqs[pair[0]][1]))\n        y = seqs[pair[1]][1].index(min(seqs[pair[1]][1]))\n        return f\"YES\\n{pair[0]+1} {x+1}\\n{pair[1]+1} {y+1}\""
    },
    {
        "number": 4478,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    seqs = []\n    for i in range(n):\n        seq = list(map(int, stdin.readline().strip().split()))\n        seqs.append(seq)\n    \n    # find pairs of seqs\n    pairs = []\n    for i in range(n):\n        for j in range(i+1, n):\n            pairs.append((i, j))\n    \n    # check each pair\n    for i, j in pairs:\n        for x in range(1, len(seqs[i])):\n            for y in range(1, len(seqs[j])):\n                if seqs[i][x] + seqs[j][y] == seqs[i][x-1] + seqs[j][y-1] and seqs[i][x] + seqs[j][y] == seqs[i][x-1] + seqs[j][y] + seqs[i][x] - seqs[i][x-1]:\n                    return \"YES\\n%d %d\\n%d %d\" % (i+1, x, j+1, y)\n    \n    # no pair found\n    return \"NO\"\n\ndef"
    },
    {
        "number": 4478,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[0])\n    pairs = []\n    for i in range(k):\n        n, seq = map(int, stdin.split())\n        pairs.append((n, seq))\n    for i, (ni, ai) in enumerate(pairs):\n        for j, (nj, aj) in enumerate(pairs):\n            if i == j:\n                continue\n            if sum(ai[:x] + ai[x+1:] for x in range(ni)) == sum(aj[:y] + aj[y+1:] for y in range(nj)):\n                return \"YES\\n\" + f\"{i+1} {x+1}\\n{j+1} {y+1}\"\n    return \"NO\"\n\ndef"
    },
    {
        "number": 4478,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split('\\n')[0])\n    pairs = []\n    for i in range(1, k * 2, 2):\n        n = int(stdin.split('\\n')[i])\n        seq = list(map(int, stdin.split('\\n')[i + 1].split()))\n        pairs.append((n, seq))\n\n    for i in range(k):\n        for j in range(i + 1, k):\n            ni, ai = pairs[i]\n            nj, aj = pairs[j]\n            if ni == nj:\n                continue\n            for x in range(ni):\n                if sum(ai[:x] + ai[x+1:]) == sum(aj[:x] + aj[x+1:]):\n                    for y in range(nj):\n                        if sum(aj[:y] + aj[y+1:]) == sum(ai[:y] + ai[y+1:]):\n                            return \"YES\\n%d %d\\n%d %d\" % (i+1, x+1, j+1, y+1)\n\n    return \"NO\"\n\n\nprint(solution('''4\n6\n2 2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n'''))"
    },
    {
        "number": 4478,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.strip().split('\\n')\n    k = int(lines[0])\n    seqs = []\n    for i in range(1, 2 * k + 1, 2):\n        n = int(lines[i])\n        seq = list(map(int, lines[i + 1].strip().split()))\n        seqs.append((n, seq))\n\n    # try to find two sequences\n    for i in range(k):\n        for j in range(i + 1, k):\n            if sum(seqs[i][1][:seqs[i][0] - 1]) == sum(seqs[j][1][:seqs[j][0] - 1]):\n                for x in range(1, seqs[i][0]):\n                    if sum(seqs[i][1][:x]) + sum(seqs[i][1][x + 1:]) == \\\n                            sum(seqs[j][1][:x]) + sum(seqs[j][1][x + 1:]):\n                        for y in range(1, seqs[j][0]):\n                            if sum(seqs[i][1][:x]) + sum(seqs[i][1][x:]) + sum(seqs[j][1][:y]) + sum(seqs[j][1][y + 1:]) == \\\n                                    sum(seqs[j][1][:x]) + sum(seqs[j][1][x:]) + sum(seqs[i][1][:y]) + sum(seqs[i][1][y + 1:]):\n                                return 'YES\\n{}\\n{}\\n{}\\n{}\\n'.format(i + 1, x, j + 1, y)\n\n    # not found\n    return 'NO\\n'\n"
    },
    {
        "number": 4478,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    seqs = []\n    for _ in range(k):\n        n = int(stdin.readline())\n        seq = list(map(int, stdin.readline().split()))\n        seqs.append(seq)\n    found = False\n    for i in range(k):\n        for j in range(i+1, k):\n            for x in range(1, len(seqs[i])):\n                if sum(seqs[i][:x]) == sum(seqs[j][:x]) == sum(seqs[i][x:]) + sum(seqs[j][x:]):\n                    found = True\n                    break\n            if found:\n                break\n        if found:\n            break\n    if found:\n        return \"YES\\n{}\\n{}\\n\".format(i+1, x) + \"{}\\n{}\\n\".format(j+1, y)\n    else:\n        return \"NO\\n\"\n\nstdin = \"\"\"\n3\n1\n5\n5\n1 1 1 1 1\n2\n2 3\n\"\"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4479,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    max_sum = sum(A)\n    for _ in range(K):\n        i = max_sum.index(max(max_sum))\n        max_sum[i] = -max_sum[i]\n    return sum(max_sum)\n\nprint(solution(\"4 2 3 1\")) # Output: 5\nprint(solution(\"3 -1 0 2 3\")) # Output: 6\nprint(solution(\"2 -3 -1 5 -4 2\")) # Output: 13"
    },
    {
        "number": 4479,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split()\n    A = [int(x) for x in A]\n    K = int(input())\n    max_sum = sum(A)\n    A.sort(reverse=True)\n    for i in range(K):\n        for j in range(len(A)):\n            if A[j] < 0:\n                A[j] *= -1\n                max_sum += A[j]\n    return max_sum"
    },
    {
        "number": 4479,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    A = list(map(int, stdin.split()))\n    K = int(stdin.split()[-1])\n\n    # Calculate the sum of the array\n    original_sum = sum(A)\n\n    # Modify the array K times\n    for i in range(K):\n        for j in range(len(A)):\n            A[j] = -A[j]\n\n    # Calculate the new sum of the array\n    new_sum = sum(A)\n\n    # Return the largest possible sum of the array after modifying it in this way\n    return max(original_sum, new_sum)"
    },
    {
        "number": 4479,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass #TODO: Write solution code here"
    },
    {
        "number": 4479,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A = [x if x >= 0 else -x for x in A]\n    A.sort(reverse=True)\n    ans = 0\n    for i in range(K):\n        ans += A[i]\n    return ans"
    },
    {
        "number": 4479,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    K = int(input())\n    A = [-A[i] if i%2==0 else A[i] for i in range(len(A))]\n    A = sorted(A)\n    return sum(A[:K])\n\nprint(solution(input()))"
    },
    {
        "number": 4479,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, K = map(int, stdin.strip().split())\n    A = list(map(int, stdin.strip().split()))\n    for i in range(K):\n        max_idx = A.index(max(A))\n        A[max_idx] = -A[max_idx]\n    return max(A)"
    },
    {
        "number": 4479,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # convert input string to list of integers\n    A = list(map(int, stdin.split()))\n    K = A[-1]\n    A = A[:-1]\n    # modify the array\n    for _ in range(K):\n        i = max(range(len(A)), key=lambda x: abs(A[x]))\n        A[i] = -A[i]\n    # return the maximum absolute value in the modified array\n    return max(map(abs, A))"
    },
    {
        "number": 4479,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, K = stdin.strip().split()\n    A = [int(x) for x in A.split(',')]\n    n = len(A)\n    res = A[0]\n    for i in range(K):\n        for j in range(n):\n            if A[j] < 0:\n                A[j] = -A[j]\n            else:\n                A[j] = -A[j]\n        max_val = max(A)\n        if max_val > res:\n            res = max_val\n    return str(res)"
    },
    {
        "number": 4479,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    A = list(map(int, stdin.split()[0].split(\",\")))\n    K = int(stdin.split()[1])\n\n    # modify array\n    for _ in range(K):\n        indices = []\n        for i in range(len(A)):\n            if A[i] < 0:\n                indices.append(i)\n        if not indices:\n            break\n        index = indices[0]\n        A[index] = -A[index]\n\n    # calculate max sum\n    max_sum = 0\n    curr_sum = 0\n    for num in A:\n        curr_sum += num\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum\n"
    },
    {
        "number": 4480,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass # Write your solution here"
    },
    {
        "number": 4480,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n\n    # Check if array can be partitioned into three parts with equal sums\n    for i in range(len(A)-2):\n        if A[i] == 0:\n            if i!= 0 and i!= len(A)-3:\n                if A[i+1] + A[i+2] + A[i+3] == A[i] + A[i+1] + A[i+2]:\n                    return True\n            elif i == 0 and A[i+1] + A[i+2] + A[i+3] == A[i] + A[i+1] + A[i+2]:\n                return True\n            elif i == len(A)-3 and A[i-1] + A[i] + A[i+1] == A[i] + A[i+1] + A[i+2]:\n                return True\n\n    return False"
    },
    {
        "number": 4480,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    total_sum = sum(A)\n    if total_sum % 3!= 0:\n        return False\n    target_sum = total_sum // 3\n    left_sum = 0\n    for i in range(len(A)):\n        if left_sum == target_sum:\n            break\n        left_sum += A[i]\n    else:\n        return False\n    right_sum = total_sum - left_sum\n    if left_sum == right_sum:\n        return True\n    return False"
    },
    {
        "number": 4480,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: Implement solution\n    pass"
    },
    {
        "number": 4480,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    arr = list(map(int, stdin.split()))\n    \n    # calculate prefix sums\n    prefix_sums = [0] * (len(arr) + 1)\n    for i in range(1, len(arr) + 1):\n        prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1]\n    \n    # check for valid partitions\n    for i in range(1, len(arr) - 1):\n        for j in range(i + 2, len(arr) + 1):\n            if prefix_sums[j] - prefix_sums[i - 1] == prefix_sums[-1] - prefix_sums[j - 1]:\n                return True\n    \n    return False\n"
    },
    {
        "number": 4480,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    A = list(map(int,stdin.split()))\n    n = len(A)\n    s = sum(A)\n    if s%3!= 0:\n        return False\n    target = s//3\n    start = 0\n    end = 0\n    curr_sum = 0\n    while end < n:\n        curr_sum += A[end]\n        while curr_sum > target:\n            curr_sum -= A[start]\n            start += 1\n        if curr_sum == target:\n            return True\n        end += 1\n    return False"
    },
    {
        "number": 4480,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    A = list(map(int, stdin.split()))\n    n = len(A)\n    s = sum(A)\n    if s % 3!= 0:\n        return False\n    target = s // 3\n    left, right = 0, n - 1\n    while left < right:\n        if A[left] + A[right] == target:\n            return True\n        elif A[left] + A[right] < target:\n            left += 1\n        else:\n            right -= 1\n    return False"
    },
    {
        "number": 4480,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass # TODO: implement solution here"
    },
    {
        "number": 4480,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4480,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input string to a list of integers\n    A = list(map(int, stdin.split()))\n    \n    # Initialize variables to keep track of the sums\n    sum1 = 0\n    sum2 = 0\n    \n    # Iterate through the array and calculate the sums\n    for i in range(len(A)):\n        if i < len(A) / 3:\n            sum1 += A[i]\n        elif i >= 2 * len(A) / 3:\n            sum2 += A[i]\n    \n    # Check if the sums are equal and return the result as a boolean\n    return sum1 == sum2"
    },
    {
        "number": 4481,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s_list = [stdin.readline().strip() for _ in range(n)]\n    vote_dict = {}\n    max_vote = 0\n    for s in s_list:\n        if s in vote_dict:\n            vote_dict[s] += 1\n        else:\n            vote_dict[s] = 1\n        if vote_dict[s] > max_vote:\n            max_vote = vote_dict[s]\n    result = []\n    for s in s_list:\n        if vote_dict[s] == max_vote:\n            result.append(s)\n    result.sort()\n    return '\\n'.join(result)"
    },
    {
        "number": 4481,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    n = int(stdin.readline())\n    votes = stdin.readline().strip().split()\n\n    # Counting votes for each string\n    string_count = {}\n    for vote in votes:\n        if vote not in string_count:\n            string_count[vote] = 1\n        else:\n            string_count[vote] += 1\n\n    # Finding the most voted string\n    max_count = 0\n    most_voted_string = \"\"\n    for vote in string_count:\n        if string_count[vote] > max_count:\n            max_count = string_count[vote]\n            most_voted_string = vote\n\n    # Printing output\n    output = \"\"\n    for vote in votes:\n        if vote == most_voted_string:\n            output += vote + \"\\n\"\n    return output"
    },
    {
        "number": 4481,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # convert stdin to a list of strings\n    votes = stdin.strip().split('\\n')\n\n    # count the number of votes for each string\n    counts = {}\n    for vote in votes:\n        if vote not in counts:\n            counts[vote] = 0\n        counts[vote] += 1\n\n    # find the maximum count\n    max_count = max(counts.values())\n\n    # print all strings with the maximum count in lexicographical order\n    result = []\n    for vote, count in counts.items():\n        if count == max_count:\n            result.append(vote)\n    result.sort()\n    return '\\n'.join(result)"
    },
    {
        "number": 4481,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    votes = {}\n    for i in range(n):\n        vote = stdin.readline().strip()\n        if vote in votes:\n            votes[vote] += 1\n        else:\n            votes[vote] = 1\n    max_vote = max(votes.values())\n    result = [k for k, v in votes.items() if v == max_vote]\n    return \"\\n\".join(sorted(result))\n"
    },
    {
        "number": 4481,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    votes = {}\n    for i in range(N):\n        vote = stdin.readline().strip()\n        if vote in votes:\n            votes[vote] += 1\n        else:\n            votes[vote] = 1\n\n    max_count = max(votes.values())\n    result = [key for key, value in votes.items() if value == max_count]\n    result.sort()\n    return \"\\n\".join(result)"
    },
    {
        "number": 4481,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    votes = {}\n    for i in range(n):\n        vote = stdin.readline().strip()\n        if vote in votes:\n            votes[vote] += 1\n        else:\n            votes[vote] = 1\n\n    max_votes = max(votes.values())\n    result = []\n    for vote in votes:\n        if votes[vote] == max_votes:\n            result.append(vote)\n\n    result.sort()\n    for vote in result:\n        print(vote)"
    },
    {
        "number": 4481,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    votes = {}\n    for i in range(1, n+1):\n        vote = lines[i]\n        if vote not in votes:\n            votes[vote] = 1\n        else:\n            votes[vote] += 1\n    \n    max_votes = max(votes.values())\n    result = []\n    for vote, count in votes.items():\n        if count == max_votes:\n            result.append(vote)\n    \n    result.sort()\n    return '\\n'.join(result)"
    },
    {
        "number": 4481,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    votes = {}\n    for i in range(n):\n        vote = stdin.readline().strip()\n        if vote in votes:\n            votes[vote] += 1\n        else:\n            votes[vote] = 1\n    max_votes = max(votes.values())\n    result = [k for k, v in votes.items() if v == max_votes]\n    result.sort()\n    return '\\n'.join(result)"
    },
    {
        "number": 4481,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    votes = {}\n    for i in range(1, n+1):\n        vote = lines[i]\n        if vote in votes:\n            votes[vote] += 1\n        else:\n            votes[vote] = 1\n    max_votes = 0\n    for vote in votes:\n        if votes[vote] > max_votes:\n            max_votes = votes[vote]\n            max_vote = vote\n    result = []\n    for vote in votes:\n        if votes[vote] == max_votes:\n            result.append(vote)\n    result.sort()\n    return '\\n'.join(result)"
    },
    {
        "number": 4481,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    votes = [stdin.readline().strip() for _ in range(N)]\n    \n    # Count number of occurrences of each string\n    counts = {}\n    for vote in votes:\n        if vote not in counts:\n            counts[vote] = 0\n        counts[vote] += 1\n    \n    # Find string with maximum count\n    max_count = max(counts.values())\n    max_votes = [vote for vote, count in counts.items() if count == max_count]\n    \n    # Print maximum votes in lexicographical order\n    max_votes.sort()\n    return '\\n'.join(max_votes)"
    },
    {
        "number": 4482,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n\n    # Initialize dp array with float('inf')\n    dp = [float('inf')] * 101\n\n    # Base case: dp[a] = 0 for all a\n    for a in range(-100, 101):\n        dp[a+100] = 0\n\n    # Fill dp array\n    for i in range(n):\n        for j in range(-100, 101):\n            if j == arr[i]:\n                continue\n            dp[j+100] = min(dp[j+100], dp[arr[i]+100] + (j - arr[i])**2)\n\n    # Find the minimum total cost\n    min_cost = float('inf')\n    for i in range(-100, 101):\n        if i in arr:\n            continue\n        min_cost = min(min_cost, dp[i+100] + (i - arr[arr.index(max(arr))])**2)\n\n    return str(min_cost)"
    },
    {
        "number": 4482,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a_set = set(a)\n\n    if len(a_set) == n:\n        return str(0)\n\n    cost = sum([(i-j)**2 for i in a for j in a if i!= j])\n    return str(cost)"
    },
    {
        "number": 4482,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\n    # Fill the diagonal\n    for i in range(n):\n        dp[i][i] = arr[i] ** 2\n\n    # Fill the rest of the table\n    for gap in range(1, n):\n        for i in range(n-gap):\n            j = i + gap\n            dp[i][j] = float('inf')\n            for k in range(i, j):\n                temp = dp[i][k] + dp[k+1][j] + (arr[k]-arr[j]) ** 2\n                dp[i][j] = min(dp[i][j], temp)\n\n    # Return the minimum cost\n    return dp[0][n-1]\n"
    },
    {
        "number": 4482,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [[0]*(102) for _ in range(102)]\n    for i in range(n):\n        for j in range(102):\n            if j==a[i]:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = dp[i-1][j] + ((j-a[i])**2)\n                for k in range(i):\n                    if a[i]!=a[k]:\n                        dp[i][j] = min(dp[i][j], dp[k][j]+dp[i-1][a[k]])\n    return str(dp[n-1][101])"
    },
    {
        "number": 4482,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize dp array\n    dp = [[float('inf') for j in range(n)] for i in range(n)]\n\n    # Fill dp array\n    for i in range(n):\n        dp[i][i] = 0\n\n    # Fill dp array\n    for L in range(2, n+1):\n        for i in range(n-L+1):\n            j = i+L-1\n            for k in range(i, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + (a[j]-a[i])**2)\n\n    return dp[0][n-1]"
    },
    {
        "number": 4482,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # DP table to store minimum cost for each possible sum\n    dp = [[float('inf') for _ in range(201)] for _ in range(N)]\n    for i in range(N):\n        dp[i][a[i]+100] = 0\n    \n    # Fill the DP table\n    for i in range(N):\n        for j in range(201):\n            if dp[i][j]!= float('inf'):\n                for k in range(j):\n                    dp[i+1][j] = min(dp[i+1][j], dp[i][j] + (k - a[i])**2)\n    \n    # Calculate the minimum cost\n    ans = float('inf')\n    for i in range(201):\n        if dp[N-1][i]!= float('inf'):\n            ans = min(ans, dp[N-1][i])\n    \n    # If there are repeated integers, we need to pay the cost separately for transforming each of them\n    for i in range(N):\n        for j in range(i+1, N):\n            if a[i] == a[j]:\n                ans += (a[i]-a[j])**2\n    \n    return str(ans)"
    },
    {
        "number": 4482,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [[0] * (101) for i in range(101)]\n    for i in range(101):\n        dp[i][i] = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            dp[i][j] = (a[i]-a[j])**2\n            for k in range(i+1, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + (a[i]-a[j])**2)\n    return str(dp[0][n-1])"
    },
    {
        "number": 4482,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # initialize variables\n    min_cost = 0\n    a_set = set(a)\n    \n    # loop through each integer and check if it can be transformed\n    for i in a:\n        if i not in a_set:\n            continue\n        # check if i can be transformed into j\n        for j in a:\n            if i == j:\n                continue\n            if j in a_set:\n                min_cost += (i-j)**2\n                a_set.remove(i)\n                break\n        else:\n            return \"No solution\"\n    \n    # print minimum cost\n    return str(min_cost)"
    },
    {
        "number": 4482,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    count = [0] * 101\n    for i in arr:\n        count[i] += 1\n    if n == len(set(arr)):\n        return n * n\n    min_cost = n * 2 * n * n\n    for i in range(101):\n        for j in range(i+1, 101):\n            if count[i] == 0 or count[j] == 0:\n                continue\n            if i == j:\n                cost = n * n\n            else:\n                cost = n * (arr[0] + arr[1]) + (i - j) ** 2\n            if cost < min_cost:\n                min_cost = cost\n    return min_cost"
    },
    {
        "number": 4482,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the minimum total cost to achieve Evi's objective.\n    \"\"\"\n    # parse input\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    a = list(map(int, lines[1].split()))\n\n    # initialize dp array\n    dp = [[0] * N for _ in range(1 << N)]\n\n    # initialize base cases\n    for i in range(N):\n        dp[1 << i][i] = a[i] ** 2\n\n    # fill dp array\n    for mask in range(1, 1 << N):\n        for i in range(N):\n            if mask & (1 << i):\n                for j in range(N):\n                    if i!= j:\n                        if not mask & (1 << j):\n                            dp[mask][i] = min(dp[mask][i], dp[mask ^ (1 << i)][j] + (a[i] - a[j]) ** 2)\n\n    # find minimum cost\n    ans = float(\"inf\")\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                ans = min(ans, dp[(1 << N) - 1][i] + dp[(1 << N) - 1][j] + (a[i] - a[j]) ** 2)\n\n    return str(ans)\n"
    },
    {
        "number": 4483,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    X, A, B = map(int, stdin.split())\n\n    # Calculating the total cost of cakes and donuts\n    total_cost = A + (B * (X - A) // A)\n\n    # Calculating the amount left after shopping\n    amount_left = X - total_cost\n\n    # Printing the result\n    print(amount_left)\n\n    return \"\""
    },
    {
        "number": 4483,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    left_money = x - a\n    donuts = left_money // b\n    if donuts == 0:\n        return str(left_money)\n    else:\n        return str(left_money - donuts * b)\n\nprint(solution(input()))"
    },
    {
        "number": 4483,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    cake_price = A\n    donut_price = B\n    cake_bought = 1\n    donut_bought = 0\n    left_over = X - (cake_price + donut_price) * cake_bought\n\n    while left_over >= donut_price:\n        donut_bought += 1\n        left_over -= donut_price\n\n    if left_over > 0:\n        cake_bought += left_over // cake_price\n        left_over %= cake_price\n\n    return f\"{X - (cake_price + donut_price) * cake_bought - donut_price * donut_bought}\""
    },
    {
        "number": 4483,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n\n    cake_left = X - A\n    donuts_left = cake_left // B\n    cake_left = cake_left - (B * donuts_left)\n\n    return str(cake_left)"
    },
    {
        "number": 4483,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    left = x - a\n    donuts = left // b\n    return str(donuts)"
    },
    {
        "number": 4483,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n\n    # buy cakes\n    cake_price = A\n    cake_count = X // A\n    remaining_yen = X % A\n\n    # buy donuts\n    donut_price = B\n    donut_count = remaining_yen // B\n    remaining_yen = remaining_yen % B\n\n    # print result\n    print(remaining_yen)"
    },
    {
        "number": 4483,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.strip().split())\n    cake_price = A\n    donut_price = B\n    cakes_bought = X // cake_price\n    donuts_bought = (X - (cake_price * cakes_bought)) // donut_price\n    remaining_money = X - (cake_price * cakes_bought) - (donut_price * donuts_bought)\n    return str(remaining_money)"
    },
    {
        "number": 4483,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n\n    # buy one cake\n    left_after_cake = x - a\n\n    # buy as many donuts as possible\n    donuts_to_buy = left_after_cake // b\n    left_after_donuts = donuts_to_buy * b\n\n    return str(left_after_donuts)"
    },
    {
        "number": 4483,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    cakes = x // a\n    donuts = x // b\n    return str(x - cakes * a - donuts * b)"
    },
    {
        "number": 4483,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    cakes = X // A\n    donuts = (X - A*cakes) // B\n    leftover = X - A*cakes - B*donuts\n    return str(leftover)\n"
    },
    {
        "number": 4484,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    MOD = 10**9+7\n    if N == 1 and M == 1:\n        return 1\n    \n    dp = [[0]*(M+1) for _ in range(N+1)]\n    \n    # base case: if there is only one animal, we can arrange it alone\n    for i in range(1, N+1):\n        dp[i][1] = 1\n        \n    # if there are two animals, we can either arrange them together or separately\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n            dp[i][j] %= MOD\n            \n    # we need to subtract the number of ways to arrange them separately\n    dp[N][M] -= dp[N-1][M-1]\n    dp[N][M] %= MOD\n    \n    return dp[N][M]"
    },
    {
        "number": 4484,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.strip().split())\n    \n    # create a graph representing the edges between the animals\n    graph = [[False for j in range(n+m)] for i in range(n+m)]\n    for i in range(n+m):\n        graph[i][i] = True  # each animal is connected to itself\n        for j in range(i+1, n+m):\n            graph[i][j] = True\n            graph[j][i] = True\n    \n    # use backtracking to find all possible arrangements\n    count = 0\n    used = [False for _ in range(n+m)]\n    def backtrack(start, count):\n        nonlocal used, graph\n        if start == n+m:\n            nonlocal answer\n            answer += 1\n            return\n        \n        for i in range(n+m):\n            if not used[i] and not graph[start][i]:\n                used[start] = True\n                used[i] = True\n                backtrack(start+1, count)\n                used[start] = False\n                used[i] = False\n                \n    answer = 0\n    backtrack(0, 0)\n    return str((answer % (10**9+7)))"
    },
    {
        "number": 4484,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.split())\n\n    # count total number of arrangements\n    count = 8\n\n    # count number of dogs and monkeys in each row\n    dogs = [1] * (n//2) + [0] * (n - n//2)\n    monkeys = [1] * (m//2) + [0] * (m - m//2)\n\n    # count number of adjacent dogs and monkeys\n    for i in range(1, n):\n        count *= dogs[i]\n        count %= 10**9 + 7\n    for i in range(1, m):\n        count *= monkeys[i]\n        count %= 10**9 + 7\n\n    # count number of non-adjacent dogs and monkeys\n    for i in range(1, n):\n        count *= dogs[i] * (n-i) // i\n        count %= 10**9 + 7\n    for i in range(1, m):\n        count *= monkeys[i] * (m-i) // i\n        count %= 10**9 + 7\n\n    # count number of full rows and half-rows\n    count *= factorial(n)\n    count *= factorial(m)\n    count %= 10**9 + 7\n    count *= 2**(n+m)\n    count %= 10**9 + 7\n\n    # count number of reversible arrangements\n    count *= 2\n    count %= 10**9 + 7\n\n    # print result\n    return str(count)\n\ndef"
    },
    {
        "number": 4484,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.split())\n    \n    # Define possible arrangements\n    # We will use four variables to represent the positions of the animals\n    # A B C D are the indices of the dogs, and C and D are the indices of the monkeys\n    # We will use a list to represent the positions of the animals\n    positions = [i for i in range(N+M)]\n    \n    # Define the number of possible arrangements\n    count = 0\n    \n    # Define a helper function to count the number of arrangements\n    def count_arrangements(A, B, C, D):\n        # Count the number of adjacent dogs or monkeys\n        count_dogs = 0\n        count_monkeys = 0\n        for i in range(N):\n            if i < N-1 and A[i+1] == A[i]+1:\n                count_dogs += 1\n            if i < N-2 and A[i+2] == A[i]+2:\n                count_dogs += 1\n            if i > 0 and A[i-1] == A[i]-1:\n                count_dogs += 1\n            if i > 1 and A[i-2] == A[i]-2:\n                count_dogs += 1\n            if i < M-1 and B[i+1] == B[i]+1:\n                count_dogs += 1\n            if i < M-2 and B[i+2] == B[i]+2:\n                count_dogs += 1\n            if i > 0 and B[i-1] == B[i]-1:\n                count_dogs += 1\n            if i > 1 and B[i-2] == B[i]-2:\n                count_dogs += 1\n        for i in range(M):\n            if i < M-1 and C[i+1] == C[i]+1:\n                count_monkeys += 1\n            if i < M-2 and C[i+2] == C[i]+2:\n                count_monkeys += 1\n            if i > 0 and C[i-1] == C[i]-1:\n                count_monkeys += 1\n            if i > 1 and C[i-2] == C[i]-2:\n                count_monkeys += 1\n            if i < N-1 and D[i+1] == D[i]+1:\n                count_monkeys += 1\n            if i < N-2 and D[i+2] == D[i]+2:\n                count_monkeys += 1\n            if i > 0 and D[i-1] == D[i]-1:\n                count_monkeys += 1\n            if i > 1 and D[i-2] == D[i]-2:\n                count_monkeys += 1\n        \n        # Check if there are two adjacent dogs or two adjacent monkeys\n        if count_dogs == 0 and count_monkeys == 0:\n            nonlocal count\n            count += 1\n        \n        # Recursively count the number of arrangements\n        for i in range(N):\n            if A[i] < N-1 and A[i+1]!= A[i]+1 and A[i] < A[i+1]:\n                A[i], A[i+1] = A[i+1], A[i]\n                count_arrangements(A, B, C, D)\n                A[i], A[i+1] = A[i+1], A[i]\n        for i in range(M):\n            if C[i] < M-1 and C[i+1]!= C[i]+1 and C[i] < C[i+1]:\n                C[i], C[i+1] = C[i+1], C[i]\n                count_arrangements(A, B, C, D)\n                C[i], C[i+1] = C[i+1], C[i]\n        for i in range(N):\n            if B[i] < M-1 and B[i+1]!= B[i]+1 and B[i] < B[i+1]:\n                B[i], B[i+1] = B[i+1], B[i]\n                count_arrangements(A, B, C, D)\n                B[i], B[i+1] = B[i+1], B[i]\n        for i in range(M):\n            if D[i] < N-1 and D[i+1]!= D[i]+1 and D[i"
    },
    {
        "number": 4484,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.split())\n\n    # Initialize variables\n    count = 1\n\n    # Handle cases with no monkeys or no dogs\n    if N == 0 or M == 0:\n        return str(1)\n\n    # Handle cases with only one animal\n    if N == 1:\n        return str(M)\n    if M == 1:\n        return str(N)\n\n    # Handle cases with two animals\n    if N == 2:\n        if M == 2:\n            return str(1)\n        else:\n            return str(2)\n    if M == 2:\n        return str(2)\n\n    # Handle cases with more than two animals\n    count = (N*(N-1)//2)*M\n    count += (M*(M-1)//2)*N\n    count += (N-1)*M\n    count += (M-1)*N\n    count = count // 2\n    return str(count % (10**9+7))"
    },
    {
        "number": 4484,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    MOD = 10**9+7\n    # count the number of valid arrangements\n    # for each i, there are (n-i-1) options for the first dog\n    # for each j, there are (m-j-1) options for the second dog\n    # we need to take the product of these two counts\n    ans = 1\n    for i in range(n):\n        ans = (ans * (n-i-1) % MOD * (m-1) % MOD) % MOD\n    return str(ans)"
    },
    {
        "number": 4484,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    MOD = 10**9 + 7\n    # Define the number of ways to arrange n dogs and m monkeys\n    def count_arrangements(n, m):\n        # Base cases\n        if n == 0 and m == 0:\n            return 1\n        elif n < 0 or m < 0:\n            return 0\n        # Recursive case\n        else:\n            return count_arrangements(n-1, m) + count_arrangements(n, m-1) - count_arrangements(n-1, m-1)\n    # Compute the count of ways to arrange n dogs and m monkeys, modulo 10^9+7\n    ans = count_arrangements(n, m) % MOD\n    return str(ans)\n\nprint(solution(input()))"
    },
    {
        "number": 4484,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    MOD = 10**9+7\n    def count_arrangements(n, m, k=0):\n        if n == 0 and m == 0:\n            return 1\n        if n == 0 or m == 0:\n            return 0\n        return ((count_arrangements(n-1, m, k+1) + count_arrangements(n, m-1, k+1) - count_arrangements(n-1, m-1, k+1)) % MOD + MOD) % MOD\n    return count_arrangements(n, m)"
    },
    {
        "number": 4484,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.split())\n\n    # initialize count to 1\n    count = 1\n\n    # compute factorials\n    factorial = [1] * (n+m+1)\n    for i in range(1, n+m+1):\n        factorial[i] = factorial[i-1] * i % (10**9+7)\n\n    # compute combinations\n    count = factorial[n+m]\n    count = count * pow(2, n, 10**9+7) % (10**9+7)  # add n!\n    count = count * pow(2, m, 10**9+7) % (10**9+7)  # add m!\n    count = count * pow(2, n-1, 10**9+7) % (10**9+7)  # subtract 1 from n and add n!\n    count = count * pow(2, m-1, 10**9+7) % (10**9+7)  # subtract 1 from m and add m!\n\n    # subtract 2 adjacent dogs and monkeys\n    count = count * pow(2, n*m, 10**9+7) % (10**9+7)\n    count = count * pow(2, 2*(n-1)*(m-1), 10**9+7) % (10**9+7)\n\n    # reverse each pair of adjacent dogs and monkeys\n    count = count * pow(2, n-2, 10**9+7) % (10**9+7)\n    count = count * pow(2, m-2, 10**9+7) % (10**9+7)\n\n    return str(count)"
    },
    {
        "number": 4484,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    MOD = 10**9+7\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    dp[1][1] = 1\n    dp[2][1] = 1\n    for i in range(3, n+1):\n        dp[i][1] = (dp[i-1][1] + dp[i-2][1]) % MOD\n    for j in range(2, m+1):\n        dp[1][j] = (dp[1][j-1] + dp[1][j-2]) % MOD\n        for i in range(2, n+1):\n            dp[i][j] = (dp[i-1][j] + dp[i][j-1] - dp[i-2][j-1]) % MOD\n    return dp[n][m]"
    },
    {
        "number": 4485,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing input\n    lines = stdin.strip().split(\"\\n\")\n    N, M = map(int, lines[0].split())\n    boat_services = [list(map(int, line.split())) for line in lines[1:]]\n    \n    # Checking if it is possible to go from Island 1 to Island N using two boat services\n    count = 0\n    for service in boat_services:\n        if service[0] == 1 and service[1] == N:\n            count += 1\n        if count == 2:\n            return \"POSSIBLE\"\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4485,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        a, b = map(int, stdin.strip().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = [False] * (n+1)\n    def dfs(curr, count, target):\n        visited[curr] = True\n        if curr == target:\n            if count >= 2:\n                return True\n            return False\n        for i in graph[curr]:\n            if not visited[i]:\n                if dfs(i, count+1, target):\n                    return True\n        return False\n    if dfs(1, 0, n):\n        return \"POSSIBLE\"\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4485,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = [False] * (n+1)\n    queue = [(1, 0)]\n    while queue:\n        island, count = queue.pop(0)\n        if island == n:\n            return \"POSSIBLE\"\n        for neighbor in graph[island]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                queue.append((neighbor, count+1))\n    return \"IMPOSSIBLE\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4485,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.readline().split())\n    boats = list(map(int, stdin.readline().strip().split()))\n    islands = list(range(1, n+1))\n    islands.pop(0) # remove 1 from islands\n\n    # create graph\n    graph = {i: [] for i in range(n+1)}\n    for i in range(0, len(boats), 2):\n        a, b = boats[i], boats[i+1]\n        graph[a].append(b)\n        graph[b].append(a)\n\n    # bfs\n    visited = [False] * (n+1)\n    queue = [1]\n    visited[1] = True\n    while queue:\n        current = queue.pop(0)\n        if current == n:\n            return \"POSSIBLE\"\n        for neighbor in graph[current]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                queue.append(neighbor)\n\n    # if no path is found\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4485,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    islands = set(range(1, n+1))\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        if a in islands and b in islands:\n            islands.remove(a)\n            islands.remove(b)\n    if len(islands) == 1 and 1 in islands:\n        return \"POSSIBLE\"\n    else:\n        return \"IMPOSSIBLE\"\n\nwith open(\"input.txt\", \"r\") as f:\n    input_str = f.read()\n\nprint(solution(input_str))"
    },
    {
        "number": 4485,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split('\\n')\n    N, M = map(int, lines[0].split())\n    island_pairs = [(int(a), int(b)) for a, b in [line.split() for line in lines[1:]]]\n    \n    # Check if there is a boat service connecting Island 1 to Island N\n    if (1, N) not in island_pairs:\n        return 'IMPOSSIBLE'\n    \n    # Check if there are exactly two boat services connecting two different islands\n    boat_services = set(island_pairs)\n    if len(boat_services)!= M+1:\n        return 'IMPOSSIBLE'\n    \n    return 'POSSIBLE'"
    },
    {
        "number": 4485,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().split())\n    islands = [[] for _ in range(N + 1)]\n    for i in range(M):\n        a, b = map(int, stdin.readline().split())\n        islands[a].append(b)\n        islands[b].append(a)\n\n    # DFS to find all possible paths from Island 1 to Island N\n    def dfs(visited: set[int], current: int) -> bool:\n        if current == N:\n            return True\n        visited.add(current)\n        for neighbor in islands[current]:\n            if neighbor not in visited and dfs(visited, neighbor):\n                return True\n        return False\n\n    # Check if there are two boat services from Island 1 to Island N\n    visited = set()\n    if any(dfs(visited.copy(), 1) for _ in range(2)):\n        return \"POSSIBLE\"\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4485,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes an input string in the format specified in the problem statement and returns\n    \"POSSIBLE\" if it is possible to go to Island N by using two boat services, otherwise, it returns \"IMPOSSIBLE\".\n    \"\"\"\n    n, m = map(int, stdin.split())\n    islands = [[] for _ in range(n+1)]\n    boat_services = set()\n\n    # Parse the input and build the graph of the islands and the boat services\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        islands[a].append(b)\n        islands[b].append(a)\n        boat_services.add((a, b))\n        boat_services.add((b, a))\n\n    # Check if there are two boat services connecting Island 1 and Island N\n    if (1, n) not in boat_services and (n, 1) not in boat_services:\n        return \"IMPOSSIBLE\"\n\n    # Check if there are any other boat services connecting two different islands in the graph\n    for i in range(n):\n        for j in range(i+1, n):\n            if (i+1, j+1) not in boat_services:\n                return \"POSSIBLE\"\n\n    return \"POSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = [False]*(n+1)\n    visited[1] = True\n    q = [1]\n    while q:\n        node = q.pop(0)\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                q.append(neighbor)\n                if len(q) == 2:\n                    return \"POSSIBLE\"\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4485,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.readline().split())\n    island_pairs = []\n    for i in range(m):\n        a, b = map(int, stdin.readline().split())\n        if (a, b) not in island_pairs:\n            island_pairs.append((a, b))\n\n    # check if there is a boat service from Island 1 to Island N\n    if (1, n) not in island_pairs:\n        return \"IMPOSSIBLE\"\n\n    # check if there are at least two boat services\n    if len(island_pairs) < 2:\n        return \"IMPOSSIBLE\"\n\n    return \"POSSIBLE\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    odd_chars = [s[i] for i in range(1, len(s), 2)]\n    return \"\".join(odd_chars)"
    },
    {
        "number": 4486,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Split the string into a list of characters\n    chars = list(stdin)\n    \n    # Initialize an empty string to store the odd-indexed characters\n    result = \"\"\n    \n    # Iterate over the characters and extract the odd-indexed characters\n    for i in range(1, len(chars), 2):\n        result += chars[i]\n    \n    return result"
    },
    {
        "number": 4486,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    odd_chars = [s[i] for i in range(1, len(s), 2)]\n    return ''.join(odd_chars)"
    },
    {
        "number": 4486,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    result = \"\"\n    for i in range(1, len(s), 2):\n        result += s[i]\n    return result"
    },
    {
        "number": 4486,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    odd_index_chars = [s[i] for i in range(1, len(s), 2)]\n    return ''.join(odd_index_chars)"
    },
    {
        "number": 4486,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    result = \"\"\n    for i in range(1, len(s), 2):\n        result += s[i]\n    return result"
    },
    {
        "number": 4486,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    result = \"\"\n    for i in range(1, len(s), 2):\n        result += s[i]\n    return result"
    },
    {
        "number": 4486,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    result = \"\"\n    for i in range(1, len(s), 2):\n        result += s[i]\n    return result"
    },
    {
        "number": 4486,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    result = \"\"\n    for i in range(1, len(s), 2):\n        result += s[i]\n    return result"
    },
    {
        "number": 4486,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    result = ''\n    for i in range(1, len(s), 2):\n        result += s[i]\n    return result"
    },
    {
        "number": 4487,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    if A[-1] == B[0] and B[-1] == C[0]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    A, B, C = stdin.split()\n    \n    # Check if last character of A and initial character of B are the same\n    if A[-1] == B[0]:\n        # Check if last character of B and initial character of C are the same\n        if B[-1] == C[0]:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4487,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.strip().split()\n    \n    if A[-1] == B[0] and B[-1] == C[0]:\n        return 'YES'\n    else:\n        return 'NO'\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4487,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    if a[-1] == b[0] and b[-1] == c[0]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4487,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input strings\n    a, b, c = stdin.strip().split()\n\n    # Check if the last character in A and the initial character in B are the same\n    if a[-1] == b[0]:\n        # Check if the last character in B and the initial character in C are the same\n        if b[-1] == c[0]:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4487,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read the input\n    A, B, C = stdin.strip().split()\n\n    # check if last characters of A and B are the same and if B and C have the same first character\n    if A[-1] == B[0] and B[-1] == C[0]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.strip().split()\n    if A[-1] == B[0] and B[-1] == C[0]:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4487,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    if A[-1] == B[0] and B[-1] == C[0]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4487,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.strip().split()\n    if A[-1] == B[0] and B[-1] == C[0]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(input()))"
    },
    {
        "number": 4487,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.strip().split()\n    if A[-1] == B[0] and B[-1] == C[0]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4488,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\""
    },
    {
        "number": 4488,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.readline())\n    B = int(stdin.readline())\n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\""
    },
    {
        "number": 4488,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    A = int(stdin.readline().strip())\n    B = int(stdin.readline().strip())\n    \n    # compare the magnitudes\n    if A == B:\n        return \"EQUAL\"\n    elif A > B:\n        return \"GREATER\"\n    else:\n        return \"LESS\""
    },
    {
        "number": 4488,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return \"GREATER\"\n    elif a < b:\n        return \"LESS\"\n    else:\n        return \"EQUAL\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline().strip())\n    b = int(stdin.readline().strip())\n    if a > b:\n        return \"GREATER\"\n    elif a < b:\n        return \"LESS\"\n    else:\n        return \"EQUAL\""
    },
    {
        "number": 4488,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.readline())\n    B = int(stdin.readline())\n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\""
    },
    {
        "number": 4488,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\""
    },
    {
        "number": 4488,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return \"GREATER\"\n    elif a < b:\n        return \"LESS\"\n    else:\n        return \"EQUAL\"\n\nprint(solution(\"36\\n24\")) # Output: GREATER"
    },
    {
        "number": 4488,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a > b:\n        return \"GREATER\"\n    elif a < b:\n        return \"LESS\"\n    else:\n        return \"EQUAL\"\n\nprint(solution(input()))"
    },
    {
        "number": 4488,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a > b:\n        return \"GREATER\"\n    elif a < b:\n        return \"LESS\"\n    else:\n        return \"EQUAL\""
    },
    {
        "number": 4489,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N = int(stdin.readline().strip())\n    blue_cards = [stdin.readline().strip() for _ in range(N)]\n    M = int(stdin.readline().strip())\n    red_cards = [stdin.readline().strip() for _ in range(M)]\n\n    # Determine the max earning possible\n    max_earnings = 0\n    for string in blue_cards:\n        if string in red_cards:\n            continue\n        max_earnings += 1\n    for string in red_cards:\n        if string in blue_cards:\n            continue\n        max_earnings -= 1\n\n    # Return the result\n    return str(max_earnings)"
    },
    {
        "number": 4489,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *s, m, *t = map(str.strip, stdin.split())\n    s = set(s)\n    t = set(t)\n    if any(len(s_i)!= len(t[0]) for s_i in s):\n        return \"0\"\n    if all(s_i not in t for s_i in s):\n        return \"0\"\n    if any(t_i not in s for t_i in t):\n        return \"0\"\n    return str(len(s & t))"
    },
    {
        "number": 4489,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing the input\n    input_lines = stdin.strip().split(\"\\n\")\n    N = int(input_lines[0])\n    blue_cards = input_lines[1:1+N]\n    M = int(input_lines[1+N])\n    red_cards = input_lines[2+N:]\n\n    # Checking if the string is present on all cards\n    s = blue_cards[0]\n    for card in blue_cards[1:]:\n        if card!= s:\n            return \"No\"\n\n    # Calculating the maximum earnings\n    earnings = 0\n    for card in red_cards:\n        if card == s:\n            earnings -= 1\n        else:\n            earnings += 1\n\n    return str(earnings)"
    },
    {
        "number": 4489,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *blues, m, *reds = map(int, stdin.split())\n    blues = list(map(str, blues))\n    reds = list(map(str, reds))\n    max_earn = 0\n    for i in range(n):\n        for j in range(m):\n            if blues[i] == reds[j]:\n                if i % 2 == 0:\n                    max_earn += 1\n                else:\n                    max_earn -= 1\n    return max_earn"
    },
    {
        "number": 4489,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, *strings = stdin.strip().split()\n    m, *targets = stdin.strip().split()\n\n    # count blue and red cards with the same string\n    blue_count = 0\n    red_count = 0\n    for string in strings:\n        if string in targets:\n            blue_count += 1\n\n    # count cards with different strings\n    for target in targets:\n        if target not in strings:\n            red_count += 1\n\n    # calculate the maximum earning\n    max_earning = blue_count * 1 + red_count * -1\n\n    # return the result\n    return str(max_earning)"
    },
    {
        "number": 4489,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    blue_cards_count, *blue_cards = map(str.strip, stdin.splitlines()[0].split())\n    red_cards_count, *red_cards = map(str.strip, stdin.splitlines()[1].split())\n    blue_cards = list(blue_cards)\n    red_cards = list(red_cards)\n\n    # calculate answer\n    balance = 0\n    for card in blue_cards:\n        if card == stdin.splitlines()[2]:\n            balance += 1\n    for card in red_cards:\n        if card == stdin.splitlines()[2]:\n            balance -= 1\n\n    # print answer\n    print(balance)\n\n    return \"\""
    },
    {
        "number": 4489,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *s, M, *t = map(str.strip, stdin.split())\n    s = set(s)\n    t = set(t)\n    if len(s & t) == 0:\n        return \"0\"\n    elif len(s & t) == 1:\n        return \"1\"\n    else:\n        s_t = s.intersection(t)\n        if len(s_t) == 1:\n            return \"2\"\n        else:\n            return \"3\""
    },
    {
        "number": 4489,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    blue_cards = []\n    red_cards = []\n    N, M = map(int, stdin.readline().strip().split())\n    for i in range(N):\n        blue_cards.append(stdin.readline().strip())\n    for i in range(M):\n        red_cards.append(stdin.readline().strip())\n    string = input(\"Enter a string: \").strip()\n    earned = 0\n    lost = 0\n    for card in blue_cards:\n        if card == string:\n            earned += 1\n    for card in red_cards:\n        if card == string:\n            lost += 1\n    return str(max(0, earned - lost))"
    },
    {
        "number": 4489,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    blue_cards = int(stdin.readline().strip())\n    blue_strings = stdin.readline().strip().split()\n    red_cards = int(stdin.readline().strip())\n    red_strings = stdin.readline().strip().split()\n    \n    common_strings = [string for string in blue_strings if string in red_strings]\n    return str(len(common_strings))\n    \n"
    },
    {
        "number": 4489,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    blue_cards = [stdin.readline().strip() for _ in range(N)]\n    M = int(stdin.readline())\n    red_cards = [stdin.readline().strip() for _ in range(M)]\n    announced_str = input().strip()\n\n    earned = 0\n    for card in blue_cards:\n        if card == announced_str:\n            earned += 1\n    for card in red_cards:\n        if card == announced_str:\n            earned -= 1\n\n    return str(max(0, earned))"
    },
    {
        "number": 4490,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    base = stdin.strip()\n    if base == 'A':\n        return 'T'\n    elif base == 'C':\n        return 'G'\n    elif base == 'G':\n        return 'C'\n    else:\n        return 'A'\n    \n"
    },
    {
        "number": 4490,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    b = stdin.strip()\n\n    # Determine bonded base\n    if b == 'A':\n        return 'T'\n    elif b == 'C':\n        return 'G'\n    elif b == 'G':\n        return 'C'\n    elif b == 'T':\n        return 'A'\n    else:\n        raise ValueError('Invalid input')"
    },
    {
        "number": 4490,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin[0]\n    if b == 'A':\n        return 'T'\n    elif b == 'C':\n        return 'G'\n    elif b == 'G':\n        return 'C'\n    elif b == 'T':\n        return 'A'\n\ndef"
    },
    {
        "number": 4490,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin.strip()\n    if b == 'A':\n        return 'T'\n    elif b == 'C':\n        return 'G'\n    elif b == 'G':\n        return 'C'\n    elif b == 'T':\n        return 'A'"
    },
    {
        "number": 4490,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin.strip()\n    if b == 'A':\n        return 'T'\n    elif b == 'C':\n        return 'G'\n    elif b == 'G':\n        return 'C'\n    elif b == 'T':\n        return 'A'\n    else:\n        return 'Invalid input'"
    },
    {
        "number": 4490,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin.strip()\n    if b == 'A':\n        return 'T'\n    elif b == 'C':\n        return 'G'\n    elif b == 'G':\n        return 'C'\n    else:\n        return 'A'"
    },
    {
        "number": 4490,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin.strip()\n    if b == 'A':\n        return 'T'\n    elif b == 'C':\n        return 'G'\n    elif b == 'G':\n        return 'C'\n    else:\n        return 'A'"
    },
    {
        "number": 4490,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin.strip()\n    if b == 'A':\n        return 'T'\n    elif b == 'C':\n        return 'G'\n    elif b == 'G':\n        return 'C'\n    else:\n        return 'A'"
    },
    {
        "number": 4490,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    base = stdin.strip()\n    if base == \"A\":\n        return \"T\"\n    elif base == \"C\":\n        return \"G\"\n    elif base == \"G\":\n        return \"C\"\n    else:\n        return \"A\""
    },
    {
        "number": 4490,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin.strip()\n    if b == 'A':\n        return 'T'\n    elif b == 'C':\n        return 'G'\n    elif b == 'G':\n        return 'C'\n    elif b == 'T':\n        return 'A'\n    else:\n        return 'Invalid input'"
    },
    {
        "number": 4491,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    grid = []\n    for i in range(2):\n        row = list(map(int, stdin.readline().strip().split()))\n        grid.append(row)\n\n    dp = [[0] * (n + 1) for _ in range(2)]\n    dp[0][1] = grid[0][0]\n    dp[1][1] = grid[1][0]\n\n    for i in range(1, n):\n        dp[0][i + 1] = max(dp[0][i - 1], dp[1][i]) + grid[0][i]\n        dp[1][i + 1] = max(dp[1][i - 1], dp[0][i]) + grid[1][i]\n\n    return max(dp[0][n], dp[1][n]) + grid[0][0] + grid[1][n]\n"
    },
    {
        "number": 4491,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline())\n    grid = []\n    for i in range(2):\n        row = list(map(int, stdin.readline().split()))\n        grid.append(row)\n\n    # initialize variables\n    max_candies = 0\n    candies = 0\n    i = 0\n    j = 0\n\n    # traverse grid\n    while i < 2:\n        # add candies from current square\n        candies += grid[i][j]\n        # check if current square is bottom-right\n        if i == 1 and j == N - 1:\n            # add candies from bottom-right square\n            candies += grid[i][j]\n            # update max candies\n            max_candies = max(max_candies, candies)\n            # reset variables\n            candies = 0\n            i = 0\n            j = 0\n        # move right or down\n        elif j < N - 1:\n            j += 1\n        else:\n            i += 1\n            j = 0\n            # add candies from bottom-right square\n            candies += grid[i][j]\n            # update max candies\n            max_candies = max(max_candies, candies)\n            # reset variables\n            candies = 0\n\n    # add candies from top-left and bottom-right squares\n    max_candies += grid[0][0] + grid[1][N-1]\n\n    return str(max_candies)"
    },
    {
        "number": 4491,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    candies = [list(map(int, lines[i].split())) for i in range(1, 3)]\n\n    # initialize variables\n    dp = [[0] * (n+2) for _ in range(2+2)]\n    dp[1][1] = candies[0][0] + candies[1][0]\n    dp[2][n] = candies[0][n-1] + candies[1][n-1]\n\n    # fill dp table\n    for i in range(2, n+2):\n        for j in range(2, n+2):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + candies[i%2][j-2]\n\n    # return the maximum number of candies that can be collected\n    return dp[n+1][n+1]"
    },
    {
        "number": 4491,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    grid = []\n    for i in range(2):\n        row = list(map(int, stdin.readline().strip().split()))\n        grid.append(row)\n\n    # Find best path\n    max_candies = 0\n    for i in range(1, 3):\n        for j in range(1, N+1):\n            if i == 1:\n                left = grid[i-1][j-1]\n                right = grid[i-1][j]\n                down = 0\n            else:\n                left = grid[i-1][j]\n                right = 0\n                down = grid[i][j-1]\n            curr_candies = grid[i-1][j-1]\n            max_candies = max(max_candies, left + right + down + curr_candies)\n\n    # Add top-left and bottom-right candies\n    max_candies += grid[0][0] + grid[1][N]\n\n    return str(max_candies)"
    },
    {
        "number": 4491,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    grid = []\n    for i in range(2):\n        row = list(map(int, stdin.readline().split()))\n        grid.append(row)\n\n    dp = [[0]*(n+1) for _ in range(2)]\n    dp[0][0] = grid[0][0]\n    dp[1][0] = grid[1][0]\n\n    for i in range(1, n):\n        dp[0][i] = max(dp[0][i-1], dp[1][i]) + grid[0][i]\n        dp[1][i] = max(dp[0][i], dp[1][i-1]) + grid[1][i]\n\n    return max(dp[0][n-1], dp[1][n-1]) + grid[0][0] + grid[1][n-1]"
    },
    {
        "number": 4491,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    grid = []\n    for i in range(2):\n        row = list(map(int, stdin.readline().strip().split()))\n        grid.append(row)\n    \n    # Initialize variables\n    max_candies = 0\n    current_candies = 0\n    i, j = 0, 0\n    \n    # Traverse grid\n    while i < 2 and j < N:\n        # Check current square\n        current_candies += grid[i][j]\n        if i == 1 and j == N-1:\n            # Collect candies at the bottom-right square\n            current_candies += grid[i][j]\n        max_candies = max(max_candies, current_candies)\n        \n        # Move right or down\n        if j < N-1:\n            # Move right\n            current_candies -= grid[i][j]\n            j += 1\n            current_candies += grid[i][j]\n        else:\n            # Move down\n            current_candies -= grid[i][j]\n            i += 1\n            j = 0\n            current_candies += grid[i][j]\n    \n    return max_candies"
    },
    {
        "number": 4491,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    grid = [list(map(int, line.split())) for line in lines[1:]]\n\n    # Define dp table\n    dp = [[0] * (n+2) for _ in range(n+2)]\n    dp[1][1] = grid[0][0]\n\n    # Fill dp table\n    for i in range(1, n+2):\n        for j in range(1, n+2):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i-1][j-1]\n\n    # Return answer\n    return dp[n+1][n+1]"
    },
    {
        "number": 4491,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    grid = [list(map(int, stdin.readline().strip().split())) for _ in range(2)]\n    dp = [[0] * N for _ in range(2)]\n    \n    for i in range(2):\n        for j in range(N):\n            dp[i][j] = grid[i][j]\n            if i > 0:\n                dp[i][j] += dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j-1]\n                \n    return dp[1][N-1]"
    },
    {
        "number": 4491,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    grid = []\n    for i in range(1, 3):\n        grid.append(list(map(int, lines[i].split())))\n\n    dp = [[0 for j in range(n+1)] for i in range(2)]\n\n    # top-left square\n    dp[0][0] = grid[0][0]\n\n    # top-right square\n    dp[0][n] = grid[0][n-1]\n\n    # bottom-left square\n    dp[1][0] = grid[1][0]\n\n    # bottom-right square\n    dp[1][n] = grid[1][n-1]\n\n    # fill the table\n    for i in range(2, n):\n        for j in range(n):\n            dp[i%2][j] = max(dp[(i-1)%2][j], dp[(i-1)%2][j+1]) + grid[i%2][j]\n\n    return dp[n%2][n-1]"
    },
    {
        "number": 4491,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    grid = []\n    for i in range(1, 3):\n        grid.append([int(x) for x in lines[i].split()])\n\n    # Initialize variables\n    max_candies = 0\n    visited = [[False for j in range(N+1)] for i in range(2)]\n    visited[1][1] = True\n    direction = 0  # 0 for right, 1 for down\n\n    # Traverse the grid and collect candies\n    for i in range(1, 3):\n        for j in range(1, N+1):\n            if not visited[i][j]:\n                # Visit the current square\n                max_candies += grid[i-1][j-1]\n                visited[i][j] = True\n\n                # Update direction\n                if i == 2 and j == N:\n                    direction = 1\n                else:\n                    direction = 0\n\n                # Move in the direction of the next square\n                if direction == 0:\n                    next_i = i\n                    next_j = j+1\n                else:\n                    next_i = i+1\n                    next_j = j\n\n                # Check if the next square is within the grid\n                if next_i <= 2 and next_j <= N:\n                    # Check if the next square has already been visited\n                    if not visited[next_i][next_j]:\n                        # Move to the next square\n                        i, j = next_i, next_j\n\n    # Return the maximum number of candies\n    return str(max_candies)"
    },
    {
        "number": 4492,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = min(dp[i-1] + a[i], a[i])\n    if dp[-1] <= x:\n        return \"0\"\n    ans = n\n    for i in range(n):\n        if i == 0:\n            if dp[i] <= x:\n                ans = 1\n            continue\n        if dp[i-1] + dp[i] <= x:\n            ans = min(ans, i+1)\n    return str(ans)\n\nprint(solution(input()))"
    },
    {
        "number": 4492,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, x = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n\n    # initialize dp table with zeros\n    dp = [[0]*N for _ in range(N)]\n\n    # base case: only one box, so no operation needed\n    for i in range(N):\n        dp[i][i] = 1\n\n    # fill the dp table\n    for l in range(2, N+1):\n        for i in range(N-l+1):\n            j = i + l - 1\n            for k in range(i, j):\n                # if the sum of candies in the boxes is <= x, then we can't have more than x candies in each box\n                if dp[i][k]!= 0 and dp[k+1][j]!= 0 and a[i] + a[k+1] + a[j] <= x:\n                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j])\n\n    return dp[0][N-1]"
    },
    {
        "number": 4492,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    \n    count = 0\n    \n    # calculate the minimum number of times Snuke can eat\n    for i in range(n):\n        count += (a[i] + x - 1) // x\n        \n    return count\n\nstdin = \"\"\"\n3 3\n2 2 2\n\"\"\"\nprint(solution(stdin)) # Output: 1"
    },
    {
        "number": 4492,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes a string input in the specified format and\n    returns the minimum number of operations required to achieve the objective.\n\n    Args:\n        stdin: A string input in the specified format\n\n    Returns:\n        A string output in the specified format\n    \"\"\"\n    # parse input\n    N, x = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n\n    # initialize variables\n    operations = 0\n    total_candy = sum(a)\n\n    # loop through boxes\n    for i in range(N):\n        # if the total candy is less than or equal to x, we can't perform any operations\n        if total_candy <= x:\n            break\n\n        # choose a box with at least one candy\n        if a[i] > 0:\n            # eat one of the candies in the chosen box\n            a[i] -= 1\n            total_candy -= 1\n            operations += 1\n\n            # update the total candy in the neighboring boxes\n            for j in range(max(0, i - 1), min(i + 2, N)):\n                a[j] = min(a[j] + 1, x)\n                total_candy += 1\n\n    # print the minimum number of operations required\n    return str(operations)"
    },
    {
        "number": 4492,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, x = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n\n    # initialize variables\n    candies = a\n    operations = 0\n\n    # loop until all candies are eaten\n    while True:\n        # find the box with at least one candy\n        index = next((i for i in range(N) if candies[i] > 0), None)\n        if index is None:\n            break  # all candies are eaten\n\n        # eat one candy from the chosen box\n        candies[index] -= 1\n        operations += 1\n\n        # check if any two neighboring boxes contain at most x candies in total\n        for i in range(max(0, index - 1), min(index + 2, N)):\n            if candies[i] > x:\n                # move candies to the neighboring box\n                operations += 1\n                candies[i] -= 1\n                candies[index] += 1\n\n    return str(operations)\n"
    },
    {
        "number": 4492,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, x = map(int, stdin.strip().split())\n    candies = list(map(int, stdin.strip().split()))\n\n    # Initialize variables\n    ops = 0\n    last_index = N - 1\n\n    # Iterate through boxes\n    for i in range(N):\n        # If there is at least one candy in the box, eat one of them\n        if candies[i] > 0:\n            candies[i] -= 1\n            ops += 1\n\n            # Check if any neighboring box has more than x candies\n            if i > 0 and candies[i - 1] > x:\n                return \"IMPOSSIBLE\"\n            if i < last_index and candies[i + 1] > x:\n                return \"IMPOSSIBLE\"\n\n    # Return minimum number of operations\n    return str(ops)\n"
    },
    {
        "number": 4492,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    # Initialize variables\n    count = 0\n    curr_sum = 0\n    prev_sum = 0\n    # Iterate through each box\n    for i in range(n):\n        curr_sum += a[i]\n        # Check if the current sum exceeds the threshold\n        if curr_sum > x:\n            # Eat one candy from the previous box\n            curr_sum -= a[prev_sum]\n            prev_sum += 1\n            count += 1\n    # Return the number of operations required\n    return str(count)"
    },
    {
        "number": 4492,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, x = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    # initialize variables\n    count = 0\n    # iterate over boxes\n    for i in range(n):\n        # if there are at least two candies, eat one of them\n        if a[i] >= 2:\n            a[i] -= 1\n            count += 1\n        # if the sum of candies in adjacent boxes is greater than x,\n        # eat one of them and increment the operation count\n        if i > 0 and a[i-1] + a[i] > x:\n            a[i-1] -= 1\n            count += 1\n        if i < n-1 and a[i] + a[i+1] > x:\n            a[i] -= 1\n            count += 1\n    return str(count)"
    },
    {
        "number": 4492,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, x = list(map(int, stdin.split()))\n    a = list(map(int, stdin.readline().split()))\n    # initialization\n    operations = 0\n    box_count = N\n    box_sum = sum(a)\n    # iterate until all boxes are empty\n    while box_count > 0 and box_sum > x:\n        # find the index of the first non-empty box\n        i = 0\n        while i < box_count and a[i] == 0:\n            i += 1\n        # find the index of the first box with at least two candies\n        j = i + 1\n        while j < box_count and a[j] < 2:\n            j += 1\n        # if no such box exists, eat one candy from the first non-empty box\n        if j == box_count:\n            a[i] -= 1\n            box_sum -= 1\n        # otherwise, eat two candies from the first box with at least two candies\n        else:\n            a[i] -= 2\n            a[j] -= 1\n            box_sum -= 2\n            operations += 1\n        # check if all boxes are empty\n        if box_sum == 0:\n            break\n        # remove empty boxes\n        while a[-1] == 0:\n            box_count -= 1\n            a.pop()\n    # print the minimum number of operations required to achieve the objective\n    return str(operations)"
    },
    {
        "number": 4492,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, x = map(int, stdin.split())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    ops = 0\n    candies = a.copy()\n\n    # Iterate through boxes\n    for i in range(N):\n        # Check if current box has at least one candy\n        if candies[i] == 0:\n            continue\n\n        # Check if current box can satisfy objective\n        if i > 0 and candies[i] + candies[i-1] > x:\n            continue\n        if i < N-1 and candies[i] + candies[i+1] > x:\n            continue\n\n        # Eat one candy from current box\n        candies[i] -= 1\n        ops += 1\n\n        # Check if next box can satisfy objective\n        if i > 0 and candies[i] + candies[i-1] > x:\n            candies[i] += 1\n            continue\n        if i < N-1 and candies[i] + candies[i+1] > x:\n            candies[i] += 1\n            continue\n\n    # Return result\n    return str(ops)"
    },
    {
        "number": 4493,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    grid = []\n    for line in stdin.split('\\n'):\n        grid.append([int(x) for x in line.split()])\n\n    for i in range(3):\n        for j in range(3):\n            if grid[i][j]!= i + j + 1:\n                return 'No'\n    return 'Yes'"
    },
    {
        "number": 4493,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    grid = []\n    for line in lines:\n        grid.append([int(x) for x in line.split()])\n    a = grid[0]\n    b = [grid[i][2] for i in range(3)]\n    if all(a[i]+b[i] == grid[i][2] for i in range(3)) or \\\n        all(a[i]+b[2-i] == grid[i][0] for i in range(3)) or \\\n        all(a[i]+b[i] == grid[2-i][0] for i in range(3)) or \\\n        all(a[i]+b[i] == grid[i][2] for i in range(3)) or \\\n        all(a[i]+b[i] == grid[i][0] for i in range(3)) or \\\n        all(a[i]+b[i] == grid[2-i][0] for i in range(3)):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4493,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    grid = [[int(x) for x in line.split()] for line in stdin.split('\\n')]\n    a_1, a_2, a_3 = grid[0][0], grid[1][0], grid[2][0]\n    b_1, b_2, b_3 = grid[0][1], grid[1][1], grid[2][1]\n    c_11, c_12, c_13 = grid[0][2], grid[1][2], grid[2][2]\n    c_21, c_22, c_23 = grid[0][0]+grid[0][1], grid[1][0]+grid[1][1], grid[2][0]+grid[2][1]\n    c_31, c_32, c_33 = grid[0][0]+grid[0][2], grid[1][0]+grid[1][2], grid[2][0]+grid[2][2]\n    c_1, c_2, c_3 = c_11, c_12, c_13\n    c_4 = a_1+b_1\n    c_5 = a_2+b_2\n    c_6 = a_3+b_3\n    c_7 = c_11+c_22\n    c_8 = c_12+c_21\n    c_9 = c_13+c_23\n    c_10 = c_11+c_23\n    c_11 = a_1+b_3\n    c_12 = b_1+a_3\n    c_13 = a_1+b_2\n    c_14 = b_1+a_2\n    c_15 = b_2+a_1\n    c_16 = b_3+a_1\n    c_17 = a_3+b_2\n    c_18 = b_2+a_3\n    c_19 = b_3+a_2\n    c_20 = a_2+b_3\n    c_21 = c_12+c_13\n    c_22 = c_11+c_12\n    c_23 = c_13+c_12\n    c_24 = c_11+c_13\n    c_25 = c_11+c_12\n    c_26 = c_13+c_12\n    c_27 = c_11+c_21+c_23\n    c_28 = c_13+c_21+c_22\n    c_29 = c_11+c_22+c_23\n    c_30 = c_12+c_21+c_23\n    c_31 = c_11+c_21+c_22\n    c_32 = c_12+c_22+c_23\n    c_33 = c_13+c_21+c_23\n    c_34 = c_11+c_22+c_23\n    c_35 = c_11+c_21+c_23\n    c_36 = c_13+c_22+c_23\n    c_37 = c_11+c_12+c_22+c_23\n    c_38 = c_13+c_12+c_21+c_23\n    c_39 = c_11+c_12+c_23+c_22\n    c_40 = c_13+c_12+c_22+c_21\n    c_41 = c_11+c_12+c_21+c_22\n    c_42 = c_13+c_12+c_23+c_21\n    c_43 = c_11+c_13+c_22+c_23\n    c_44 = c_12+c_13+c_21+c_23\n    c_45 = c_11+c_13+c_21+c_22\n    c_46 = c_12+c_13+c_22+c_21\n    c_47 = c_11"
    },
    {
        "number": 4493,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    c = []\n    for line in lines:\n        c.append([int(x) for x in line.split()])\n    \n    a1 = c[0][0]\n    a2 = c[1][1]\n    a3 = c[2][2]\n    b1 = c[0][1]\n    b2 = c[1][2]\n    b3 = c[0][2] + c[1][0] + c[2][0]\n    \n    if a1 + b1 == a2 + b2 == a3 + b3 == c[0][0] + c[1][1] + c[2][2] == c[2][0] + c[1][0] + c[0][2]:\n        return \"Yes\"\n    else:\n        return \"No\"\n    \nstdin = \"1 0 1\\n2 1 2\\n1 0 1\"\nprint(solution(stdin))  # Output: Yes"
    },
    {
        "number": 4493,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    c = []\n    for line in lines:\n        c.append([int(x) for x in line.split()])\n    for i in range(3):\n        for j in range(3):\n            a = c[i][0] + c[i][1] + c[i][2]\n            b = c[0][j] + c[1][j] + c[2][j]\n            if a!= b:\n                return 'No'\n    return 'Yes'"
    },
    {
        "number": 4493,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    c = [[int(x) for x in line.split()] for line in stdin.strip().split(\"\\n\")]\n    # check rows\n    for i in range(3):\n        a = c[i][0] + c[i][1] + c[i][2]\n        b = c[i][0] + c[i][1] + c[i][2]\n        if a!= c[i][0] or b!= c[i][1] or a!= c[i][2]:\n            return \"No\"\n    # check columns\n    for j in range(3):\n        a = c[0][j] + c[1][j] + c[2][j]\n        b = c[0][j] + c[1][j] + c[2][j]\n        if a!= c[0][j] or b!= c[1][j] or a!= c[2][j]:\n            return \"No\"\n    # check diagonals\n    a = c[0][0] + c[1][1] + c[2][2]\n    b = c[0][2] + c[1][1] + c[2][0]\n    if a!= c[0][2] or b!= c[1][1] or a!= c[2][0]:\n        return \"No\"\n    # if all checks pass, Takahashi is correct\n    return \"Yes\""
    },
    {
        "number": 4493,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    grid = [list(map(int, line.split())) for line in stdin.strip().split('\\n')]\n    \n    # Check if Takahashi's statement is correct\n    for i in range(3):\n        for j in range(3):\n            a = grid[i][0] + grid[i][1]\n            b = grid[0][j] + grid[1][j]\n            c = grid[1][1]\n            if a + b!= c:\n                return \"No\"\n    \n    return \"Yes\""
    },
    {
        "number": 4493,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    grid = stdin.strip().split()\n    a_1, a_2, a_3 = int(grid[0]), int(grid[1]), int(grid[2])\n    b_1, b_2, b_3 = int(grid[3]), int(grid[4]), int(grid[5])\n    if a_1+b_1 == a_2+b_2 == a_3+b_3 == a_1+b_2+b_3+a_2+a_3+a_1:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4493,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    c = []\n    for line in lines:\n        c.append([int(x) for x in line.split()])\n    \n    a = [c[0][0]+c[1][1]+c[2][2], c[2][0]+c[1][1]+c[0][2], c[0][0]+c[2][1]+c[1][2], c[1][0]+c[2][1]+c[0][2], c[0][1]+c[1][1]+c[2][0], c[2][1]+c[1][1]+c[0][0]]\n    b = [c[0][0]+c[0][1]+c[0][2], c[1][0]+c[1][1]+c[1][2], c[2][0]+c[2][1]+c[2][2], c[0][0]+c[1][0]+c[2][0], c[0][1]+c[1][1]+c[2][1], c[0][2]+c[1][2]+c[2][2]]\n    \n    if a == b:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4493,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    c = []\n    for line in stdin.splitlines():\n        c.append(list(map(int, line.split())))\n\n    # find unique values in each row\n    for i in range(3):\n        if len(set(c[i]))!= 3:\n            return \"No\"\n\n    # find unique values in each column\n    for j in range(3):\n        if len(set([c[i][j] for i in range(3)]))!= 3:\n            return \"No\"\n\n    # check Takahashi's statement\n    for i in range(3):\n        for j in range(3):\n            if c[i][j]!= a[i] + b[j]:\n                return \"No\"\n\n    return \"Yes\"\n\na = [0, 1, 0]\nb = [1, 0, 1]\nstdin = \"1 0 1\\n2 1 2\\n1 0 1\"\nprint(solution(stdin)) # output: Yes"
    },
    {
        "number": 4494,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    week_type = stdin.strip()\n    if week_type == \"ABC\":\n        return \"ARC\"\n    elif week_type == \"ARC\":\n        return \"ABC\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4494,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # convert input to string\n    S = stdin.strip()\n\n    # check if S is ARC\n    if S == \"ARC\":\n        return \"ABC\"\n    # otherwise, S is ABC, so return ARC\n    else:\n        return \"ARC\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S == \"ABC\":\n        return \"ARC\"\n    else:\n        return \"ABC\""
    },
    {
        "number": 4494,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s == 'ABC':\n        return 'ARC'\n    else:\n        return 'ABC'"
    },
    {
        "number": 4494,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input string\n    S = stdin.strip()\n\n    # Determine the next contest type\n    if S == \"ABC\":\n        return \"ARC\"\n    elif S == \"ARC\":\n        return \"ABC\"\n    else:\n        raise ValueError(\"Invalid input\")\n"
    },
    {
        "number": 4494,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"ABC\":\n        return \"ARC\"\n    else:\n        return \"ABC\""
    },
    {
        "number": 4494,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S == 'ABC':\n        return 'ARC'\n    else:\n        return 'ABC'"
    },
    {
        "number": 4494,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S == \"ABC\":\n        return \"ARC\"\n    else:\n        return \"ABC\""
    },
    {
        "number": 4494,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S == 'ABC':\n        return 'ARC'\n    else:\n        return 'ABC'\n    \n"
    },
    {
        "number": 4494,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S == \"ABC\":\n        return \"ARC\"\n    elif S == \"ARC\":\n        return \"ABC\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4495,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.strip().split())\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4495,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.strip().split())\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4495,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4495,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4495,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4495,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4495,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.strip().split())\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4495,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for num in range(a, b+1):\n        if num % x == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4495,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.strip().split())\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4495,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4496,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    if d == 25:\n        return \"Christmas\"\n    elif d == 24:\n        return \"Christmas Eve\"\n    elif d == 23:\n        return \"Christmas Eve Eve\"\n    else:\n        return \"Christmas Eve Eve Eve\""
    },
    {
        "number": 4496,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    if D == 25:\n        return \"Christmas\"\n    elif D == 24:\n        return \"Christmas Eve\"\n    elif D == 23:\n        return \"Christmas Eve Eve\"\n    else:\n        return \"Christmas Eve Eve Eve\""
    },
    {
        "number": 4496,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin.strip())\n    if d == 25:\n        return \"Christmas\"\n    elif d == 24:\n        return \"Christmas Eve\"\n    elif d == 23:\n        return \"Christmas Eve Eve\"\n    else:\n        return \"Christmas Eve Eve Eve\""
    },
    {
        "number": 4496,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    if D == 25:\n        return \"Christmas\"\n    elif D == 24:\n        return \"Christmas Eve\"\n    elif D == 23:\n        return \"Christmas Eve Eve\"\n    elif D == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4496,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin.strip())\n    if d == 25:\n        return \"Christmas\"\n    elif d == 24:\n        return \"Christmas Eve\"\n    elif d == 23:\n        return \"Christmas Eve Eve\"\n    elif d == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"\""
    },
    {
        "number": 4496,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin.strip())\n    if D == 25:\n        return \"Christmas\"\n    elif D == 24:\n        return \"Christmas Eve\"\n    elif D == 23:\n        return \"Christmas Eve Eve\"\n    elif D == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes the input string from the user and returns the corresponding string based on the value of D.\n    \"\"\"\n    D = int(stdin)\n    if D == 25:\n        return \"Christmas\"\n    elif D == 24:\n        return \"Christmas Eve\"\n    elif D == 23:\n        return \"Christmas Eve Eve\"\n    elif D == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4496,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin.strip())\n    \n    if D == 25:\n        return \"Christmas\"\n    elif D == 24:\n        return \"Christmas Eve\"\n    elif D == 23:\n        return \"Christmas Eve Eve\"\n    elif D == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"\"\n        \n"
    },
    {
        "number": 4496,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    if d == 25:\n        return \"Christmas\"\n    elif d == 24:\n        return \"Christmas Eve\"\n    elif d == 23:\n        return \"Christmas Eve Eve\"\n    elif d == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"\"\n        \n"
    },
    {
        "number": 4496,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    if d == 25:\n        return \"Christmas\"\n    elif d == 24:\n        return \"Christmas Eve\"\n    elif d == 23:\n        return \"Christmas Eve Eve\"\n    elif d == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"\"\n\nprint(solution(input()))"
    },
    {
        "number": 4497,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # initialize variables\n    max_count = 0\n    max_num = 0\n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # count the number of times the number can be divided by 2 without remainder\n        count = 0\n        while i % 2 == 0:\n            count += 1\n            i //= 2\n        # update max_count and max_num if the current number has more counts\n        if count > max_count:\n            max_count = count\n            max_num = i\n    return str(max_num)"
    },
    {
        "number": 4497,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = [0] * (n+1)\n    for i in range(1, n+1):\n        while i % 2 == 0:\n            i //= 2\n            count[i] += 1\n    return max(count)"
    },
    {
        "number": 4497,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_count = 0\n    answer = 0\n    for i in range(1, n+1):\n        count = 0\n        while i % 2 == 0:\n            i //= 2\n            count += 1\n        if count > max_count:\n            max_count = count\n            answer = i\n    return str(answer)"
    },
    {
        "number": 4497,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.strip())\n    \n    # Initialize variables\n    max_count = 0\n    max_num = None\n    \n    # Loop through numbers and count divisible by 2\n    for num in range(1, N+1):\n        count = 0\n        while num % 2 == 0:\n            count += 1\n            num //= 2\n        if count > max_count:\n            max_count = count\n            max_num = num\n    \n    # Print result\n    print(max_num)\n    \n    return \"\""
    },
    {
        "number": 4497,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    max_count = 0\n    result = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            count = 1\n            while i % 2 == 0:\n                i //= 2\n                count += 1\n            if count > max_count:\n                max_count = count\n                result = i\n    return str(result)\n\nprint(solution(input()))"
    },
    {
        "number": 4497,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    max_count = 0\n    max_num = -1\n    for i in range(1, n+1):\n        count = 0\n        while i % 2 == 0:\n            count += 1\n            i //= 2\n        if count > max_count:\n            max_count = count\n            max_num = i\n    return str(max_num)"
    },
    {
        "number": 4497,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = [0] * (n+1)\n    max_count = 0\n    max_num = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            count[i] = 1\n        else:\n            count[i] = count[i-1]\n        if count[i] > max_count:\n            max_count = count[i]\n            max_num = i\n    return str(max_num)\n\nprint(solution(input()))"
    },
    {
        "number": 4497,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    most_frequent = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            count += 1\n            if count > most_frequent:\n                most_frequent = count\n        else:\n            count = 0\n    return str(most_frequent)"
    },
    {
        "number": 4497,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_div = -1\n    max_num = -1\n    for num in range(1, n+1):\n        div = 0\n        while num % 2 == 0:\n            num //= 2\n            div += 1\n        if div > max_div:\n            max_div = div\n            max_num = num\n    return str(max_num)\n\nprint(solution(input()))"
    },
    {
        "number": 4497,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    max_count = 0\n    max_num = 0\n    for i in range(1, n+1):\n        count = 0\n        while i > 0:\n            i //= 2\n            count += 1\n        if count > max_count:\n            max_count = count\n            max_num = i\n    return str(max_num)"
    },
    {
        "number": 4498,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    \n    if abs(a-c) <= d or abs(b-c) <= d:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4498,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    a, b, c, d = list(map(int, stdin.split()))\n\n    # Check if A and C can communicate directly or indirectly\n    if abs(a-c) <= d or (abs(a-b) <= d and abs(b-c) <= d):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if abs(a - c) <= d:\n        return \"Yes\"\n    if a - b <= d:\n        if b - c <= d:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4498,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if abs(a - c) <= d:\n        return \"Yes\"\n    elif a > d and c > d and b <= d:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4498,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.strip().split())\n    if abs(a - c) <= d or (abs(b - a) <= d and abs(c - b) <= d):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nwith open(\"input.txt\") as file:\n    input_str = file.read()\n\noutput_str = solution(input_str)\n\nwith open(\"output.txt\", \"w\") as file:\n    file.write(output_str)"
    },
    {
        "number": 4498,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    dist_ab = abs(a-b)\n    dist_ac = abs(a-c)\n    dist_bc = abs(b-c)\n\n    if dist_ab <= d or dist_ac <= d or dist_bc <= d:\n        # A and B can directly communicate\n        if dist_ab <= d and dist_bc <= d:\n            return \"Yes\"\n        # A and C can indirectly communicate\n        elif dist_ab <= d and dist_ac <= d and dist_ab+dist_ac > d and dist_ac+dist_bc > d:\n            return \"Yes\"\n        # B and C can indirectly communicate\n        elif dist_bc <= d and dist_ac <= d and dist_ac+dist_bc > d and dist_ab+dist_bc > d:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\""
    },
    {
        "number": 4498,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.strip().split())\n    if (a - c) <= d or (b - c) <= d:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4498,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if abs(a - c) <= d or (a - b) * (c - b) <= 0 and abs(b - c) <= d:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if abs(a-c) <= d or (a+b <= c+d and b+c <= a+d):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4498,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if abs(a - c) <= d or abs(a - b) <= d or abs(b - c) <= d:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4499,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    acronym = \"\"\n    for word in words:\n        acronym += word[0].upper()\n    return acronym"
    },
    {
        "number": 4499,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = stdin.split()\n    acronym = ''.join([word[0].upper() for word in [s1, s2, s3] if word])\n    return acronym"
    },
    {
        "number": 4499,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = stdin.split()\n    acronym = ''\n    for word in [s1, s2, s3]:\n        acronym += word[0].upper()\n    return acronym\n"
    },
    {
        "number": 4499,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = stdin.strip().split()\n    acronym = \"\".join(word[0].upper() for word in [s1, s2, s3])\n    return acronym"
    },
    {
        "number": 4499,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = stdin.split()\n    acronym = \"\".join([word[0].upper() for word in [s1, s2, s3]])\n    return acronym"
    },
    {
        "number": 4499,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    s1, s2, s3 = stdin.strip().split()\n    # uppercase the initial letter of each word\n    s1 = s1[0].upper()\n    s2 = s2[0].upper()\n    s3 = s3[0].upper()\n    # concatenate the uppercased initial letters\n    acronym = s1 + s2 + s3\n    return acronym"
    },
    {
        "number": 4499,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = stdin.split()\n    acronym = ''.join(word[0].upper() for word in [s1, s2, s3])\n    return acronym\n"
    },
    {
        "number": 4499,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = stdin.split()\n    acronym = ''.join([word[0].upper() for word in [s1, s2, s3] if word[0].isalpha()])\n    return acronym\n"
    },
    {
        "number": 4499,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    acronym = ''.join(word[0].upper() for word in words)\n    return acronym\n"
    },
    {
        "number": 4499,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = stdin.strip().split()\n    acronym = ''.join(word[0].upper() for word in [s1, s2, s3])\n    return acronym"
    },
    {
        "number": 4500,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    total_coins = A + B\n    if total_coins < C:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4500,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.strip().split())\n\n    if a + b < c:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4500,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = list(map(int, stdin.split()))\n    if C <= A + B:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4500,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C > A + B:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4500,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    total_yen = A + B\n    if total_yen >= C:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4500,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    yen_count = A + B\n    if C <= yen_count:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4500,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.strip().split())\n    if A == 0 or B == 0:\n        return \"No\"\n    if C <= A and C <= B:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4500,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A + B >= C:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4500,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A + B >= C:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4500,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a+b >= c:\n        return \"Yes\"\n    else:\n        return \"No\"\n    \n"
    },
    {
        "number": 4501,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, A = map(int, lines[0].split())\n    x = list(map(int, lines[1].split()))\n\n    dp = [[0 for _ in range(A+1)] for _ in range(N+1)]\n    for i in range(1, N+1):\n        for j in range(1, A+1):\n            if x[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-x[i-1]]\n\n    return str(dp[N][A])"
    },
    {
        "number": 4501,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    N, A = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n\n    # Sort the cards in ascending order\n    x.sort()\n\n    # Initialize variables to keep track of the count and the running sum\n    count = 0\n    total = 0\n\n    # Loop through the sorted cards and add them to the running sum while checking if the average is within range\n    for i in range(N):\n        total += x[i]\n        if total >= A and (i == N-1 or total > x[i+1]):\n            count += 1\n            total -= x[i]\n\n    return str(count)"
    },
    {
        "number": 4501,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    total_sum = sum(x)\n    average = total_sum / n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (total_sum - x[i] - x[j]) / (n-2) == a:\n                count += 1\n    return count"
    },
    {
        "number": 4501,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    cards = list(map(int, stdin.split()))\n    cards.sort()\n\n    # Initialize variables\n    i, j = 0, n-1\n    count = 0\n\n    # Loop until i >= j\n    while i < j:\n        # Check if the average is equal to the target\n        if (cards[i] + cards[j]) / 2 == a:\n            # Increment the count\n            count += 1\n            # Move the pointers towards the center\n            i += 1\n            j -= 1\n        # If the average is less than the target, increase i\n        elif (cards[i] + cards[j]) / 2 < a:\n            i += 1\n        # If the average is greater than the target, decrease j\n        else:\n            j -= 1\n\n    # Return the count\n    return str(count)"
    },
    {
        "number": 4501,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0].split()[0])\n    a = int(lines[0].split()[1])\n    xs = list(map(int, lines[1].split()))\n\n    cnt = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            s = (xs[i] + xs[j]) / 2\n            if s == a:\n                cnt += 1\n\n    return str(cnt)\n\nstdin = \"\"\"\n4 8\n7 9 8 9\n\"\"\"\n\nprint(solution(stdin)) # Output: \"5\""
    },
    {
        "number": 4501,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    xs = list(map(int, stdin.split()))\n    xs.sort()\n    total = sum(xs)\n    if total < A or (total == A and len(xs) % 2 == 0):\n        return \"0\"\n\n    count = 0\n    left, right = 0, N - 1\n    while left <= right:\n        if xs[left] + xs[right] == A:\n            count += 1\n            left += 1\n            right -= 1\n        elif xs[left] + xs[right] < A:\n            left += 1\n        else:\n            right -= 1\n\n    return str(count)\n\ndef"
    },
    {
        "number": 4501,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n    x.sort()\n    count = 0\n    for i in range(n):\n        left = i\n        right = n-1\n        while left < right:\n            if x[i] + (x[right]-x[i])*(right-left) == a:\n                count += right-left\n                left += 1\n                right -= 1\n            elif x[i] + (x[right]-x[i])*(right-left) < a:\n                left += 1\n            else:\n                right -= 1\n    return str(count)"
    },
    {
        "number": 4501,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    \n    nums.sort()\n    left, right = 0, n - 1\n    count = 0\n    \n    while left <= right:\n        if nums[left] + nums[right] == a:\n            count += 1\n            left += 1\n            right -= 1\n        elif nums[left] + nums[right] < a:\n            left += 1\n        else:\n            right -= 1\n    \n    return count"
    },
    {
        "number": 4501,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split()[0:2])\n    x = list(map(int, stdin.split()[2:]))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if sum(x[i:j+1])/j == A:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4501,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n    x.sort()\n    result = 0\n    count = 0\n    for i in range(N):\n        if x[i] + sum(x[i+1:]) >= A:\n            count += 1\n            result += count\n        else:\n            count = 0\n    return str(result)\n\nprint(solution(open(\"input.txt\", \"r\")))"
    },
    {
        "number": 4502,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = []\n    for i in range(n):\n        b.append(a[i])\n        b.reverse()\n    return''.join(map(str, b))\n"
    },
    {
        "number": 4502,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    b = []\n    for i in range(n):\n        b.append(a[i])\n        b.reverse()\n    return \" \".join(map(str, b))"
    },
    {
        "number": 4502,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    b = []\n    for i in range(n):\n        b.append(a[i])\n        b.reverse()\n    return''.join(map(str, b))\n"
    },
    {
        "number": 4502,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = []\n    for i in range(n):\n        b.append(a[i])\n        b.reverse()\n    return \" \".join(map(str, b))\n"
    },
    {
        "number": 4502,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = []\n    for i in range(n):\n        b.append(a[i])\n        b.reverse()\n    return''.join(map(str, b))"
    },
    {
        "number": 4502,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = []\n    for i in range(n):\n        b.append(a[i])\n        b.reverse()\n        a[i] = b.pop()\n    return''.join(map(str, b))\n"
    },
    {
        "number": 4502,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = []\n    for i in range(n):\n        b.append(a[i])\n        b.reverse()\n    return''.join(map(str, b))"
    },
    {
        "number": 4502,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    b = []\n    for i in range(n):\n        b.append(a[i])\n        b.reverse()\n    return \" \".join(str(x) for x in b)\n"
    },
    {
        "number": 4502,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = []\n    for i in range(n):\n        b.append(a[i])\n        b.reverse()\n    return''.join(map(str, b))"
    },
    {
        "number": 4502,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    b = []\n    for i in range(n):\n        b.append(arr[i])\n        b.reverse()\n    return \" \".join(map(str, b))"
    },
    {
        "number": 4503,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    H = int(lines[0])\n    N = int(lines[1])\n    A = list(map(int, lines[2].strip().split()))\n\n    A_set = set(A)\n    if len(A)!= len(A_set):\n        return 'No'\n\n    # Check if any move can win the game\n    for i in range(1, 2**N):\n        health = H\n        used_moves = []\n        for j in range(N):\n            if i & (1 << j):\n                move = A[j]\n                if move in used_moves:\n                    break\n                health -= move\n                used_moves.append(move)\n            if health <= 0:\n                return 'Yes'\n\n    return 'No'"
    },
    {
        "number": 4503,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.readline().strip().split())\n    A = list(map(int, stdin.readline().strip().split()))\n    moves = set()\n    for i in range(N):\n        if A[i] == 0:\n            continue\n        H -= A[i]\n        moves.add(A[i])\n        if H <= 0:\n            break\n    if H <= 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h, n = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    \n    if a[0] > h:\n        return \"No\"\n    \n    move_count = {}\n    \n    for i in range(n):\n        if a[i] <= h:\n            move_count[a[i]] = move_count.get(a[i], 0) + 1\n            \n        if h <= 0:\n            return \"Yes\"\n    \n    if len(move_count) == len(a):\n        return \"Yes\"\n    else:\n        return \"No\"\n    \nprint(solution(\"10 3\\n4 5 6\\n\")) # Yes"
    },
    {
        "number": 4503,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.strip().split())\n    A = list(map(int, stdin.strip().split()))\n    \n    if sum(A) > H:\n        return \"No\"\n    if A.count(min(A)) > 1:\n        return \"No\"\n    if max(A) > H:\n        return \"No\"\n    \n    if H == sum(A):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4503,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split())\n    A = list(map(int, stdin.readline().split()))\n\n    used_moves = set()\n    total_health = H\n    for i in range(N):\n        if total_health <= 0:\n            break\n        if A[i] in used_moves:\n            return \"No\"\n        used_moves.add(A[i])\n        total_health -= A[i]\n    return \"Yes\" if total_health <= 0 else \"No\""
    },
    {
        "number": 4503,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    health, num_moves = map(int, stdin.readline().split())\n    move_damages = list(map(int, stdin.readline().split()))\n    \n    # sort move damages in ascending order\n    move_damages.sort()\n    \n    # check if can win without using same move twice or more\n    prev_move_damage = move_damages[0]\n    for damage in move_damages[1:]:\n        if damage == prev_move_damage:\n            return \"No\"\n        prev_move_damage = damage\n    \n    # calculate number of moves required to kill the monster\n    num_moves_required = int(health / move_damages[-1])\n    \n    # check if can win without using same move twice or more\n    prev_move_damage = move_damages[0]\n    for damage in move_damages[1:]:\n        if damage == prev_move_damage:\n            return \"No\"\n        prev_move_damage = damage\n    \n    if num_moves_required <= num_moves:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4503,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.readline().strip().split())\n    A = list(map(int, stdin.readline().strip().split()))\n    A.sort()\n    count = 0\n    for i in range(N):\n        if A[i] > H:\n            count += 1\n    if count == N:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4503,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    health, n_moves = map(int, stdin.split())\n    moves = list(map(int, stdin.readline().split()))\n    moves_used = set()\n    i = 0\n    while health > 0 and i < n_moves:\n        if i >= n_moves:\n            return \"No\"\n        if i == n_moves - 1:\n            if health <= moves[i] * 2:\n                return \"Yes\"\n            else:\n                return \"No\"\n        if moves[i] in moves_used:\n            return \"No\"\n        moves_used.add(moves[i])\n        health -= moves[i]\n        i += 1\n    return \"Yes\""
    },
    {
        "number": 4503,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    health, num_moves = map(int, stdin.split())\n    moves = list(map(int, stdin.readline().split()))\n    used_moves = set()\n    i = 0\n    while health > 0 and i < len(moves):\n        if moves[i] not in used_moves:\n            used_moves.add(moves[i])\n            health -= moves[i]\n            i = 0\n        else:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4503,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    H, N = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # initialize variables\n    health = H\n    moves = set()\n\n    # loop through moves\n    for i in range(N):\n        # check if move can be used\n        if A[i] <= health:\n            # use move\n            health -= A[i]\n            moves.add(i)\n\n            # check if health is 0 or below\n            if health <= 0:\n                return \"Yes\"\n\n            # check if move can be used again\n            if i - 1 in moves:\n                return \"No\"\n\n    # if all moves were used, check if health is 0 or below\n    return \"Yes\" if health <= 0 else \"No\""
    },
    {
        "number": 4504,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    even = s + s[::-1]\n    return len(even)"
    },
    {
        "number": 4504,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    max_length = 0\n    for i in range(1, n, 2):\n        if s[-i:] == s[:-i]:\n            max_length = i\n    return max_length\n\nstdin = \"abaababaab\"\nprint(solution(stdin))"
    },
    {
        "number": 4504,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    i = len(S) - 1\n    while i >= 0:\n        if S[i] == 'a':\n            break\n        i -= 1\n    return len(S) - i - 1"
    },
    {
        "number": 4504,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n    if n % 2 == 1:\n        print(n-1)\n    else:\n        k = 0\n        while k < n-1 and S[k] == S[-1-k]:\n            k += 1\n        print(n-2*k)"
    },
    {
        "number": 4504,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    i, j = 0, n-1\n    while i < j:\n        if s[i]!= s[j]:\n            break\n        i += 1\n        j -= 1\n    return n-i+1"
    },
    {
        "number": 4504,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n    if n % 2 == 0:\n        print(n)\n        return\n    for i in range(n-2, 0, -2):\n        if S[:i] == S[i:n]:\n            print(i)\n            return\n    print(0)"
    },
    {
        "number": 4504,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    even_strings = []\n    for i in range(len(S)):\n        even_strings.append(S[:i] + S[i+1:])\n    even_strings = set(even_strings)\n    max_len = 0\n    for s in even_strings:\n        if len(s) % 2 == 0:\n            max_len = max(max_len, len(s))\n    return max_len"
    },
    {
        "number": 4504,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    S = stdin.strip()\n\n    # Initialize variables\n    even_str = \"\"\n    i = len(S) - 1\n    while i >= 0:\n        if S[i] == \"a\" or S[i] == \"b\" or S[i] == \"c\":\n            even_str += S[i]\n            i -= 2\n        else:\n            i -= 1\n\n    # Get length of longest even string\n    return len(even_str)"
    },
    {
        "number": 4504,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    for i in range(n // 2, -1, -1):\n        if s[i]!= s[n - i - 1]:\n            return n - i - 1\n    return n // 2"
    },
    {
        "number": 4504,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n    count = 0\n    for i in range(n // 2):\n        if S[i]!= S[n - 1 - i]:\n            count += 1\n    if count == 0:\n        return str(n)\n    if count == 1 and S[-2] == S[-1]:\n        return str(n - 1)\n    return str(n - count)"
    },
    {
        "number": 4505,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if sorted(s) == ['a', 'b', 'c']:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4505,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().lower()\n    if len(s)!= 3:\n        return \"No\"\n    if set(s)!= set(['a', 'b', 'c']):\n        return \"No\"\n    if s == 'abc':\n        return \"Yes\"\n    if s == 'acb':\n        return \"Yes\"\n    if s == 'bac':\n        return \"Yes\"\n    if s == 'bca':\n        return \"Yes\"\n    if s == 'cab':\n        return \"Yes\"\n    if s == 'cba':\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4505,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if sorted(S) == sorted('abc'):\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4505,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if sorted(S)!= ['a', 'b', 'c']:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4505,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if sorted(s)!= ['a', 'b', 'c']:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4505,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().lower()\n    if set(s)!= set('abc'):\n        return \"No\"\n    else:\n        a, b, c = s\n        if (a == 'a' and b == 'b' and c == 'c') or (a == 'b' and b == 'c' and c == 'a') or (a == 'c' and b == 'a' and c == 'b'):\n            return \"Yes\"\n        else:\n            return \"No\""
    },
    {
        "number": 4505,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s)!= 3 or 'a' not in s or 'b' not in s or 'c' not in s:\n        return \"No\"\n    a, b, c = s[0], s[1], s[2]\n    if set(s)!= set(s[::-1]):\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4505,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0] == 'a' and s[1] == 'b' and s[2] == 'c':\n        return 'Yes'\n    elif s[0] == 'b' and s[1] == 'a' and s[2] == 'c':\n        return 'Yes'\n    elif s[0] == 'b' and s[1] == 'c' and s[2] == 'a':\n        return 'Yes'\n    elif s[0] == 'c' and s[1] == 'a' and s[2] == 'b':\n        return 'Yes'\n    elif s[0] == 'c' and s[1] == 'b' and s[2] == 'a':\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4505,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if sorted(s) == ['a', 'b', 'c']:\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(input()))"
    },
    {
        "number": 4505,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    S = stdin.strip()\n\n    # Checking if S can be obtained by permuting abc\n    if set(S) == set('abc'):\n        print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 4506,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n    \n    MOD = 998244353\n    \n    def f(l, r):\n        return sum(a[i-1] * b[i-1] for i in range(l, r+1))\n    \n    def g(perm):\n        return sum(f(i, i+1) for i in range(n) if perm[i]!= i+1)\n    \n    def h(perm):\n        return sum(f(perm[i-1], perm[i]) for i in range(1, n))\n    \n    def k(perm):\n        return sum(f(0, i) for i in range(n+1))\n    \n    def check(perm):\n        return k(perm) == k(b)\n    \n    def brute(b):\n        res = float('inf')\n        for perm in itertools.permutations(b):\n            if check(perm):\n                res = min(res, h(perm))\n        return res % MOD\n    \n    return str(brute(b))\n\nimport itertools\n\nstdin = \"\"\"\n5\n1 8 7 2 4\n9 7 2 9 3\n\"\"\"\n\nprint(solution(stdin)) # Output: 646"
    },
    {
        "number": 4506,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    MOD = 998244353\n\n    def f(l, r):\n        return sum(a[i-1] * b[i-1] for i in range(l, r+1))\n\n    def g(b):\n        n = len(b)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = f(i+1, i+1)\n        for l in range(2, n+1):\n            for i in range(n-l+1):\n                j = i + l - 1\n                dp[i][j] = float('inf')\n                for k in range(i, j):\n                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + f(i+1, j))\n        return dp[0][n-1]\n\n    def h(b):\n        n = len(b)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = f(i+1, i+1)\n        for l in range(2, n+1):\n            for i in range(n-l+1):\n                j = i + l - 1\n                dp[i][j] = float('inf')\n                for k in range(i, j):\n                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + f(i+1, j))\n        ans = dp[0][n-1]\n        for i in range(n-1):\n            for j in range(i+1, n):\n                if dp[i][j] == ans:\n                    b[i], b[j] = b[j], b[i]\n                    new_ans = g(b)\n                    b[i], b[j] = b[j], b[i]\n                    if new_ans < ans:\n                        ans = new_ans\n        return ans % MOD\n\n    return str(h(b))\n"
    },
    {
        "number": 4506,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    MOD = 998244353\n    f = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(n):\n        for j in range(n):\n            f[i+1][j+1] = f[i][j+1] + a[i]*b[j] + a[i+j+1]\n    ans = float('inf')\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            ans = min(ans, f[i][j])\n    return str(ans % MOD)"
    },
    {
        "number": 4506,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n\n    # calculate f(l, r)\n    f = [0] * (n+1)\n    for i in range(1, n+1):\n        f[i] = (f[i-1] + a[i-1]*b[i-1]) % 998244353\n\n    # calculate g(l, r)\n    g = [0] * (n+1)\n    for i in range(1, n+1):\n        g[i] = (g[i-1] + b[i-1]) % 998244353\n\n    # calculate h(l, r)\n    h = [0] * (n+1)\n    for i in range(n-1, -1, -1):\n        h[i] = (h[i+1] + a[i]*b[i]) % 998244353\n\n    # calculate the answer\n    ans = 0\n    for i in range(1, n+1):\n        ans = (ans + f[i] * g[i] * h[i]) % 998244353\n\n    return str(ans)\n"
    },
    {
        "number": 4506,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    MOD = 998244353\n    # dp[i][j] := minimum value of sum(b[i]*b[j]) with i < j <= i + j // 2\n    dp = [[float('inf') for j in range(n)] for i in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if j - i > 1:\n                dp[i][j] = min(dp[i][j-1] + dp[j][j] * (j-i-1), dp[i][j-1] + dp[j-1][j] * (j-i))\n            else:\n                dp[i][j] = dp[i][j-1] + dp[j][j] * (j-i-1)\n    # dp[i][j] is the minimum value of sum(b[i]*b[j]) with i < j <= i + j // 2\n    # dp[0][n-1] is the minimum value of sum(b[i]*b[j]) with i < j <= n-1\n    b_sorted = sorted(b)\n    ans = 0\n    for i in range(n):\n        ans += dp[0][i] * b_sorted[i]\n    return str(ans % MOD)\n"
    },
    {
        "number": 4506,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    # Sort b by f(l, r)\n    def f(l, r):\n        return sum(a[i-1] * b[i-1] for i in range(l, r+1))\n    b.sort(key=lambda j: sum(f(l, r) for l in range(1, n+1) for r in range(l, n+1)), reverse=True)\n\n    # Compute result\n    result = sum(f(l, r) for l in range(1, n+1) for r in range(l, n+1))\n    return str(result % 998244353)"
    },
    {
        "number": 4506,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    a_sum = sum(a)\n    b_sum = sum(b)\n    if a_sum > b_sum:\n        a, b = b, a\n        a_sum, b_sum = b_sum, a_sum\n\n    MOD = 998244353\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = b[i]\n\n    for gap in range(1, n):\n        for i in range(n - gap):\n            j = i + gap\n            dp[i][j] = dp[i][j - 1] + dp[i + 1][j] * b[i]\n\n    ans = 0\n    for i in range(n):\n        ans += dp[i][n - 1]\n\n    return str((ans % MOD))"
    },
    {
        "number": 4506,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n    MOD = 998244353\n    # sort a and b simultaneously\n    a.sort()\n    b.sort()\n    # initialize dp array\n    dp = [[0] * n for _ in range(n)]\n    # fill dp array\n    for i in range(n):\n        dp[i][i] = a[i] * b[i]\n    # fill dp array\n    for l in range(1, n):\n        for r in range(l, n):\n            dp[l][r] = (dp[l][r-1] + dp[l-1][r]) % MOD\n            # choose minimum of rearranged b\n            b[l:r+1] = sorted(b[l:r+1])\n            dp[l][r] = min(dp[l][r], (sum([a[i] * b[i] for i in range(l, r+1)]) + dp[l][r-1] - dp[l-1][r]) % MOD)\n    return str(dp[-1][-1])"
    },
    {
        "number": 4506,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n\n    f = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            f[i][j] = f[i-1][j] + a[i-1] * b[j-1]\n\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][i] = f[i][i]\n\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n+1):\n            for k in range(i, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + f[i][j])\n\n    return str(dp[0][n] % 998244353)\n\ndef"
    },
    {
        "number": 4506,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    # compute f(l, r)\n    def f(l, r):\n        return sum(a[i-1]*b[i-1] for i in range(l, r+1))\n\n    # compute minimum value of f(l, r)\n    values = [f(l, r) for l in range(1, n+1) for r in range(l, n+1)]\n    min_value = min(values)\n\n    # reorder b to minimize the sum of f(l, r)\n    b.sort(key=lambda x: values.index(f(x, n)))\n\n    # compute sum of f(l, r) after rearranging b\n    sum_f = sum(f(l, r) for l in range(1, n+1) for r in range(l, n+1))\n\n    # print result\n    return str((sum_f - min_value) % 998244353)\n"
    },
    {
        "number": 4507,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    offers = []\n    for i in range(m):\n        x, y = map(int, stdin.readline().split())\n        offers.append((x, y))\n\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n\n    for i in range(n):\n        for j in range(i+1, min(i+k+1, n+1)):\n            dp[j] = min(dp[j], dp[i] + a[j-1])\n\n    for x, y in offers:\n        for i in range(n-y, n-x-1, -1):\n            dp[i] = min(dp[i], dp[n-x]+(n-i)*a[i])\n\n    return dp[k]"
    },
    {
        "number": 4507,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    offers = []\n    for i in range(m):\n        x, y = map(int, stdin.split())\n        offers.append((x, y))\n    # sort by number of shovels\n    offers = sorted(offers, key=lambda x: x[0])\n    # sort by price\n    offers = sorted(offers, key=lambda x: a[x[1]-1])\n    # calculate dp\n    dp = [0]*(k+1)\n    for i in range(k+1):\n        for offer in offers:\n            if i >= offer[0]:\n                dp[i] = max(dp[i], dp[i-offer[0]] + offer[0]*a[offer[1]-1])\n    return dp[k]\n\nprint(solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\"))\nprint(solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\"))\nprint(solution(\"5 1 4\\n2 5 7 4 6\\n5 4\"))"
    },
    {
        "number": 4507,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    b = []\n    for _ in range(m):\n        x, y = map(int, stdin.strip().split())\n        b.append((x, y))\n    a.sort()\n    dp = [[float(\"inf\")] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        dp[i][0] = 0\n    for j in range(1, k + 1):\n        dp[0][j] = float(\"inf\")\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            for x, y in b:\n                if j >= x and dp[i - y][j - x]!= float(\"inf\"):\n                    dp[i][j] = min(dp[i][j], dp[i - y][j - x] + a[i - 1])\n            dp[i][j] = min(dp[i][j], dp[i - 1][j])\n    return dp[n][k]"
    },
    {
        "number": 4507,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    special_offers = []\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        special_offers.append((x, y))\n    \n    a.sort()\n    dp = [float('inf')] * (k + 1)\n    dp[0] = 0\n    for i in range(n):\n        for j in range(k, 0, -1):\n            if j >= a[i]:\n                dp[j] = min(dp[j], dp[j - a[i]] + a[i])\n            for offer in special_offers:\n                if j >= offer[0] and i >= offer[1] - 1:\n                    dp[j] = min(dp[j], dp[j - offer[0]] + a[i])\n    \n    return dp[k]\n\ndef"
    },
    {
        "number": 4507,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    special = []\n    for i in range(m):\n        x, y = map(int, stdin.split())\n        special.append((x, y))\n    a.sort()\n    dp = [[float('inf') for _ in range(k+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 0\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            for s in special:\n                if j >= s[0]:\n                    dp[j][i] = min(dp[j][i], dp[j-s[0]][i-1] + s[1]*s[0] + (s[0]-1)*sum(a[:s[0]-1]))\n            dp[j][i] = min(dp[j][i], dp[j-1][i] + a[j-1])\n    return dp[n][k]\n"
    },
    {
        "number": 4507,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    shovels = list(map(int, stdin.split()[3:3+n]))\n    special_offers = []\n    for i in range(m):\n        x, y = map(int, stdin.split()[3+n+2*i:3+n+2*i+2])\n        special_offers.append((x, y))\n    shovels.sort()\n    dp = [[float('inf')]*(k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(k+1):\n            if j == 0:\n                dp[i][j] = 0\n            else:\n                for s in range(1, j+1):\n                    if s <= i:\n                        dp[i][j] = min(dp[i][j], dp[s-1][j-s]+sum(shovels[s-1:i]))\n                for offer in special_offers:\n                    if j >= offer[0]:\n                        dp[i][j] = min(dp[i][j], dp[offer[0]-1][j-offer[0]]+offer[1]*offer[0]+sum(shovels[offer[0]:i]))\n    return dp[n][k]\n\nstdin = \"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\"\nprint(solution(stdin)) # Output: 7\n\nstdin = \"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\"\nprint(solution(stdin)) # Output: 17\n\nstdin = \"5 1 4\\n2 5 7 4 6\\n5 4\"\nprint(solution(stdin)) # Output: 17"
    },
    {
        "number": 4507,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[:3])\n    a = list(map(int, stdin.split()[3:]))\n    offers = []\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        offers.append((x, y))\n    dp = [0] * (1 << n)\n    for i in range(1, 1 << n):\n        for offer in offers:\n            x, y = offer\n            if bin(i).count('1') == x:\n                for j in range(n):\n                    if i & (1 << j):\n                        continue\n                    if j < y:\n                        continue\n                    dp[i] = min(dp[i], dp[i ^ (1 << j)] + a[j])\n                break\n        else:\n            dp[i] = sum(a[j] for j in range(n) if i & (1 << j))\n    return dp[(1 << n) - 1]\n"
    },
    {
        "number": 4507,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    special_offers = []\n    for i in range(m):\n        x, y = map(int, stdin.split())\n        special_offers.append((x, y))\n    \n    a.sort()\n    cost = 0\n    i = 0\n    for offer in special_offers:\n        if offer[1] <= i:\n            continue\n        if i + offer[0] > k:\n            break\n        cost += offer[1] * a[i]\n        i += offer[0]\n    \n    while i < k:\n        cost += a[i]\n        i += 1\n    \n    return cost"
    },
    {
        "number": 4507,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    offers = []\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        offers.append((x, y))\n    dp = [[float('inf')] * (k+1) for _ in range(n+1)]\n    dp[0][0] = 0\n    for i in range(1, n+1):\n        for j in range(k+1):\n            for o in offers:\n                if i >= o[0]:\n                    dp[i][j] = min(dp[i][j], dp[i-o[0]][max(j-o[1], 0)] + sum(a[i-o[0]:i]) - a[i-1])\n    return dp[n][k]"
    },
    {
        "number": 4507,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    special_offers = []\n    for _ in range(m):\n        x, y = map(int, stdin.readline().split())\n        special_offers.append((x, y))\n\n    # sort shovels by cost\n    shovels = sorted(enumerate(a), key=lambda x: x[1])\n\n    # dp[i] represents the minimum cost of buying i shovels\n    dp = [float('inf')] * (n+1)\n    dp[0] = 0\n\n    # dp[i] represents the minimum cost of buying i shovels\n    for i in range(1, n+1):\n        # iterate over all shovels to consider\n        for j in range(len(shovels)):\n            # skip shovels that are already bought\n            if dp[i-1] < float('inf') and j >= shovels[i-1][0]:\n                break\n            # skip shovels that are already bought and offer is not applicable\n            if dp[i-shovels[j][0]]!= float('inf'):\n                continue\n            # consider shovel j\n            cost = shovels[j][1]\n            # consider special offer\n            if any(shovels[j][0] == x and i-shovels[j][0] == y for x, y in special_offers):\n                cost -= 2 * min(special_offers, key=lambda x: x[1])[1]\n            # update dp\n            dp[i] = min(dp[i], dp[i-shovels[j][0]] + cost)\n\n    return str(dp[k])"
    },
    {
        "number": 4508,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, edges = int(stdin.readline()), []\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().strip().split())\n        edges.append((u, v))\n    res = 0\n    for i in range(n):\n        visited = [False] * n\n        visited[i] = True\n        queue = [(i, 0)]\n        while queue:\n            node, dist = queue.pop(0)\n            if dist > 2:\n                break\n            for neigh in edges:\n                if neigh[0] == node:\n                    continue\n                if visited[neigh[1]]:\n                    continue\n                visited[neigh[1]] = True\n                queue.append((neigh[1], dist + 1))\n        if dist <= 2:\n            res += 1\n    print(res)\n    return str(res)"
    },
    {
        "number": 4508,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    edges = set()\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().strip().split())\n        edges.add((min(u, v), max(u, v)))\n\n    # Find the shortest path from 1 to each vertex\n    from collections import defaultdict\n    dist = defaultdict(lambda: float('inf'))\n    dist[1] = 0\n    queue = [1]\n    while queue:\n        curr = queue.pop(0)\n        for neighbor in range(1, n + 1):\n            if (curr, neighbor) not in edges:\n                continue\n            if dist[curr] + 1 < dist[neighbor]:\n                dist[neighbor] = dist[curr] + 1\n                queue.append(neighbor)\n\n    # Count the number of edges to add\n    ans = 0\n    for u, v in edges:\n        if dist[u] + dist[v] > 2:\n            ans += 1\n\n    # Output the answer\n    print(ans)"
    },
    {
        "number": 4508,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4508,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, edges = int(stdin.readline()), set()\n    for i in range(n-1):\n        u, v = map(int, stdin.readline().split())\n        edges.add((u, v))\n    visited = set([1])\n    stack = [(1, 0)]\n    count = 0\n    while stack:\n        u, dist = stack.pop()\n        if dist > 2:\n            continue\n        for v in range(1, n+1):\n            if (u, v) in edges or (v, u) in edges:\n                continue\n            if v not in visited:\n                visited.add(v)\n                stack.append((v, dist+1))\n                count += 1\n                if count == n-1:\n                    return str(count)\n    return str(count)"
    },
    {
        "number": 4508,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4508,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [list(map(int, line.split())) for line in stdin.readlines()]\n\n    tree = [[] for _ in range(n+1)]\n    for u, v in edges:\n        tree[u].append(v)\n        tree[v].append(u)\n\n    seen = set()\n    stack = [(1, 0)]\n    min_dist = 1e10\n\n    while stack:\n        u, dist = stack.pop()\n        if u in seen:\n            continue\n        seen.add(u)\n        if dist > min_dist:\n            continue\n        for v in tree[u]:\n            if v not in seen:\n                stack.append((v, dist+1))\n        min_dist = dist\n\n    return str(min_dist)"
    },
    {
        "number": 4508,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = [tuple(map(int, line.strip().split())) for line in stdin]\n    \n    g = {i: [] for i in range(1, n+1)}\n    for u, v in edges:\n        g[u].append(v)\n        g[v].append(u)\n        \n    visited = [False] * (n+1)\n    stack = [(1, 0)]\n    ans = 0\n    \n    while stack:\n        u, d = stack.pop()\n        if d <= 2:\n            ans += 1\n        visited[u] = True\n        for v in g[u]:\n            if not visited[v]:\n                stack.append((v, d+1))\n    \n    return str(ans)\n\nprint(solution('''\n7\n1 2\n2 3\n2 4\n4 5\n4 6\n5 7\n''')) # Output: 2\n\nprint(solution('''\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n''')) # Output: 0\n\nprint(solution('''\n7\n1 2\n2 3\n3 4\n3 5\n3 6\n3 7\n''')) # Output: 1"
    },
    {
        "number": 4508,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = []\n    for _ in range(n-1):\n        u, v = map(int, stdin.readline().split())\n        edges.append((u, v))\n    visited = [False] * n\n    visited[0] = True\n    dist = [float('inf')] * n\n    dist[0] = 0\n    for i in range(n):\n        if visited[i]:\n            for j in range(len(edges)):\n                if edges[j][0] == i:\n                    if visited[edges[j][1]]:\n                        continue\n                    if dist[edges[j][1]] > dist[i] + 1:\n                        dist[edges[j][1]] = dist[i] + 1\n    cnt = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if dist[i] + dist[j] > 2:\n                cnt += 1\n    return cnt"
    },
    {
        "number": 4508,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    edges = []\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().strip().split())\n        edges.append((u, v))\n    \n    # Build graph\n    graph = {}\n    for u, v in edges:\n        if u not in graph:\n            graph[u] = set([v])\n        else:\n            graph[u].add(v)\n        if v not in graph:\n            graph[v] = set([u])\n        else:\n            graph[v].add(u)\n    \n    # DFS to find connected components with shortest path length <= 2\n    visited = set()\n    queue = [(1, 0)]\n    while queue:\n        u, d = queue.pop(0)\n        if u in visited:\n            continue\n        visited.add(u)\n        for v in graph[u]:\n            if v not in visited:\n                queue.append((v, d + 1))\n    \n    # Count the number of edges to add\n    count = 0\n    for u in range(2, n + 1):\n        if u not in visited:\n            count += 1\n    \n    # Output result\n    return str(count)"
    },
    {
        "number": 4508,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4509,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    num = 1\n    count = 0\n    while count < k:\n        if num % n!= 0:\n            count += 1\n        num += 1\n    return str(num - 1)"
    },
    {
        "number": 4509,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n, k = map(int, stdin.readline().split())\n        if n == 2 and k == 1:\n            print(1)\n        else:\n            count = 0\n            for i in range(1, k*n+1):\n                if i % n!= 0:\n                    count += 1\n                    if count == k:\n                        print(i)\n                        break"
    },
    {
        "number": 4509,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split()\n    for i in range(0, len(cases), 2):\n        n = int(cases[i])\n        k = int(cases[i+1])\n        if n == 2:\n            k -= 1\n            if k == 0:\n                print(1)\n                continue\n        count = 0\n        num = 1\n        while count < k:\n            num += n\n            count += 1\n        print(num)\n    return \"\"\n\nprint(solution(\"6\\n3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\"))"
    },
    {
        "number": 4509,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    count = 1\n    while True:\n        if count % n!= 0:\n            if k == 1:\n                return str(count)\n            else:\n                k -= 1\n        count += 1\n"
    },
    {
        "number": 4509,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n'):\n        if line:\n            n, k = map(int, line.split())\n            res = -1\n            count = 0\n            for i in range(1, k*n+1):\n                if i % n!= 0:\n                    res = i\n                    count += 1\n                if count == k:\n                    break\n            if res == -1:\n                return \"No such number\"\n            else:\n                return str(res)\n    return \"\"\n\nprint(solution(\"6\\n3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\")) # Output: 10\\n15\\n1999999999\\n113\\n1000000001\\n1"
    },
    {
        "number": 4509,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    for i in range(1, len(input_list)):\n        n, k = map(int, input_list[i].split())\n        count = 0\n        num = 1\n        while count < k:\n            num += 1\n            if num % n!= 0:\n                count += 1\n        print(num)\n\nstdin = \"\"\"\n6\n3 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\n\"\"\"\n\nsolution(stdin)"
    },
    {
        "number": 4509,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().split()[0])\n    k = int(stdin.readline().split()[0])\n\n    count = 0\n    num = 1\n    while count < k:\n        if num % n!= 0:\n            count += 1\n        num += 1\n\n    return str(num - 1)"
    },
    {
        "number": 4509,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    t = int(stdin.readline())\n    for i in range(t):\n        n, k = map(int, stdin.readline().split())\n        # iterate over all integers and count how many are not divisible by n\n        count = 0\n        num = 1\n        while count < k:\n            if num % n!= 0:\n                count += 1\n            num += 1\n        # print the k-th non-divisible integer\n        print(num - 1)"
    },
    {
        "number": 4509,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    count = 0\n    num = 1\n    while True:\n        if num % n!= 0:\n            count += 1\n        if count == k:\n            return str(num)\n        num += 1\n\ndef"
    },
    {
        "number": 4509,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a string as output.\n    The input string is a list of integers separated by spaces.\n    The first integer is n, the second integer is k.\n    The function returns the k-th positive integer that is not divisible by n.\n    \"\"\"\n    # Read the input string and convert it into a list of integers\n    arr = stdin.strip().split()\n    n = int(arr[0])\n    k = int(arr[1])\n\n    # Initialize the variables\n    count = 1\n    num = 1\n\n    # Loop through all positive integers until we find the k-th one\n    while count < k:\n        num += n\n        count += 1\n\n    # If k is greater than the number of integers that are not divisible by n, return 0\n    if count == k:\n        return str(num)\n    else:\n        return \"0\""
    },
    {
        "number": 4510,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ids = list(map(int, stdin.split()))\n    conversations = {}\n    for i in range(n):\n        friend_id = ids[i]\n        if friend_id not in conversations:\n            if len(conversations) == k:\n                del conversations[list(conversations.keys())[k-1]]\n            conversations[friend_id] = i\n    return f\"{len(conversations)}\\n{' '.join(str(i) for i in conversations.keys())}\""
    },
    {
        "number": 4510,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    id_list = list(map(int, stdin.split()[2:]))\n\n    # create a dictionary to store the conversation history\n    conversation_dict = {}\n    for i in range(n):\n        friend_id = id_list[i]\n        if friend_id not in conversation_dict:\n            conversation_dict[friend_id] = []\n        conversation_dict[friend_id].append(i)\n\n    # sort the conversation history by length (descending)\n    sorted_conversation_dict = sorted(conversation_dict.items(), key=lambda x: len(x[1]), reverse=True)\n\n    # create a list to store the sorted conversation IDs\n    sorted_conversation_ids = []\n    for friend_id, conv_list in sorted_conversation_dict:\n        sorted_conversation_ids.extend(conv_list)\n\n    # display the first k conversation IDs on the screen\n    displayed_conversation_ids = sorted_conversation_ids[:k]\n    m = len(displayed_conversation_ids)\n    displayed_conversation_ids = list(map(lambda x: id_list[x], displayed_conversation_ids))\n\n    # print the number of displayed conversations and their IDs\n    print(m)\n    print(' '.join(map(str, displayed_conversation_ids)))"
    },
    {
        "number": 4510,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    messages = map(int, stdin.split()[2:])\n    conversations = {}\n    for i, message in enumerate(messages):\n        if message not in conversations:\n            conversations[message] = i\n            if len(conversations) > k:\n                # remove the last conversation from the screen\n                last_message = max(conversations, key=conversations.get)\n                del conversations[last_message]\n    m = len(conversations)\n    ids = sorted(conversations.keys())\n    return str(m) + '\\n' +''.join(map(str, ids))"
    },
    {
        "number": 4510,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    ids = list(map(int, stdin.strip().split()))\n    \n    conversations = {}\n    for i, id_ in enumerate(ids):\n        if id_ not in conversations:\n            conversations[id_] = []\n        conversations[id_].append(i)\n    \n    sorted_conversations = sorted(conversations.items(), key=lambda x: x[1][-1], reverse=True)\n    \n    count = 0\n    result = []\n    for id_, indexes in sorted_conversations:\n        if count == k:\n            break\n        result.extend(indexes)\n        count += 1\n    \n    return str(len(result)) + '\\n' +''.join(map(str, [ids[i] for i in result]))"
    },
    {
        "number": 4510,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    ids = list(map(int, stdin.splitlines()[1].split()))\n    convos = {}\n    for i in range(n):\n        friend_id = ids[i]\n        if friend_id not in convos:\n            if len(convos) == k:\n                convos.pop(next(reversed(convos)))\n            convos[friend_id] = i\n        else:\n            convos[friend_id] = i\n    m = len(convos)\n    if m == 0:\n        return \"0\"\n    return str(m) + \"\\n\" + \"\\n\".join(map(str, convos.keys()))"
    },
    {
        "number": 4510,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ids = list(map(int, stdin.split()))\n    conversations = {}\n    for i in range(n):\n        friend_id = ids[i]\n        if friend_id in conversations:\n            continue\n        if len(conversations) == k:\n            conversations.pop(list(conversations.keys())[-1])\n        conversations[friend_id] = len(conversations) + 1\n    m = len(conversations)\n    ids = [friend_id for friend_id, _ in sorted(conversations.items(), key=lambda x: x[1])]\n    return f\"{m}\\n{*ids}\""
    },
    {
        "number": 4510,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()[0:2]))\n    ids = list(map(int, stdin.split()[2:]))\n\n    # sort the messages by the friend ID\n    sorted_ids = sorted(ids)\n\n    # initialize the output variables\n    num_conversations = 0\n    output_ids = []\n\n    # loop through the sorted messages\n    for i in range(n):\n        # check if the friend ID matches the current conversation\n        if sorted_ids[i] in output_ids:\n            # if yes, continue reading messages\n            continue\n        else:\n            # if no, add the friend ID to the output list\n            output_ids.append(sorted_ids[i])\n\n            # remove the oldest conversation if there are too many\n            if num_conversations == k:\n                output_ids.pop(0)\n\n            # increment the number of displayed conversations\n            num_conversations += 1\n\n    # print the output\n    print(num_conversations)\n    print(*output_ids)\n\n    return ''"
    },
    {
        "number": 4510,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    ids = list(map(int, stdin.readline().strip().split()))\n\n    ids_dict = {}\n    result = []\n\n    for i in range(n):\n        if ids[i] not in ids_dict:\n            ids_dict[ids[i]] = i\n            result.append(ids[i])\n\n        else:\n            j = ids_dict[ids[i]]\n            result.pop(j)\n            result.append(ids[i])\n            ids_dict[ids[i]] = i\n\n            if len(result) == k:\n                result.pop()\n\n    m = len(result)\n    return f\"{m}\\n{' '.join(map(str, result))}\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    ids = list(map(int, stdin.readline().strip().split()))\n    history = {}\n    conversations = []\n    for i in range(n):\n        id_ = ids[i]\n        if id_ in history:\n            continue\n        history[id_] = 1\n        if len(conversations) < k:\n            conversations.append(id_)\n        else:\n            if id_ not in conversations:\n                conversations.pop(0)\n                conversations.append(id_)\n    print(len(conversations))\n    print(*conversations)\n    return ''"
    },
    {
        "number": 4510,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ids = list(map(int, stdin.split()))\n    if k >= n:\n        return f\"{n}\\n{' '.join(map(str, ids))}\"\n    convos = []\n    for id in ids:\n        if id not in convos:\n            convos.append(id)\n            if len(convos) > k:\n                convos.pop(0)\n    return f\"{len(convos)}\\n{' '.join(map(str, convos))}\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    max_damage = 0\n    for i in range(n):\n        k = int(stdin.readline())\n        turn_damage = 0\n        for j in range(k):\n            c, d = map(int, stdin.readline().split())\n            if j % 10 == 0:\n                turn_damage += 2 * d\n            else:\n                turn_damage += d\n        max_damage = max(max_damage, turn_damage)\n    return str(max_damage)"
    },
    {
        "number": 4511,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    max_damage = 0\n    for i in range(n):\n        k = int(stdin.split()[0])\n        damage = 0\n        for j in range(k):\n            c, d = map(int, stdin.split())\n            damage += d\n            if j % 10 == 9:\n                damage *= 2\n        max_damage = max(damage, max_damage)\n        stdin = stdin[stdin.find('\\n')+1:]\n    return str(max_damage)\n\nprint(solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\"))"
    },
    {
        "number": 4511,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    max_damage = 0\n    for i in range(n):\n        k = int(stdin.readline())\n        damage = 0\n        for j in range(k):\n            c, d = map(int, stdin.readline().split())\n            damage += d\n            if j % 10 == 9:\n                damage *= 2\n        max_damage = max(max_damage, damage)\n    return str(max_damage)"
    },
    {
        "number": 4511,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    damage = 0\n    for i in range(n):\n        k = int(stdin.readline())\n        cards = []\n        for j in range(k):\n            c, d = map(int, stdin.readline().split())\n            cards.append((c, d))\n        if i % 10 == 9:\n            for c, d in cards:\n                if c <= 3:\n                    damage += d * 2\n                else:\n                    damage += d\n        else:\n            for c, d in cards:\n                if c <= 3:\n                    damage += d\n                else:\n                    damage += d\n    return str(damage)"
    },
    {
        "number": 4511,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    max_damage = 0\n    for i in range(n):\n        k = int(stdin.readline())\n        cards = []\n        for j in range(k):\n            c, d = map(int, stdin.readline().split())\n            if c >= 10:\n                d *= 2\n            cards.append((c, d))\n        damage = sum(d for c, d in cards)\n        max_damage = max(max_damage, damage)\n    return str(max_damage)\n"
    },
    {
        "number": 4511,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    damage = 0\n    for i in range(n):\n        k = int(stdin.readline().strip())\n        cards = []\n        for j in range(k):\n            c, d = map(int, stdin.readline().strip().split())\n            cards.append((c, d))\n        damage += sum([c * d for c, d in cards if c <= 3]) * (2 if i % 10 == 0 else 1)\n    return str(damage)"
    },
    {
        "number": 4511,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    max_damage = 0\n    for i in range(n):\n        k = int(stdin.readline())\n        total_cost = 0\n        damage = 0\n        for j in range(k):\n            c, d = map(int, stdin.readline().strip().split())\n            if j % 10 == 0:\n                damage += d * 2\n            else:\n                damage += d\n            total_cost += c\n            if total_cost > 3:\n                break\n        max_damage += damage\n    return str(max_damage)\n\nprint(solution(\"\"\"5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100\"\"\")) # Output: 263"
    },
    {
        "number": 4511,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    total_damage = 0\n    for i in range(n):\n        k = int(stdin.readline().strip())\n        damage = 0\n        for j in range(k):\n            c, d = map(int, stdin.readline().strip().split())\n            if j % 10 == 0:\n                d *= 2\n            damage += d\n        total_damage += damage\n        # discard unused cards\n        for j in range(k):\n            stdin.readline().strip()\n    return str(total_damage)"
    },
    {
        "number": 4511,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    total_damage = 0\n    for _ in range(n):\n        k = int(stdin.readline().strip())\n        damage_boost = 0\n        for _ in range(k):\n            c, d = map(int, stdin.readline().strip().split())\n            if c == 10:\n                damage_boost += 10\n            total_damage += d\n        total_damage += damage_boost // 10 * 2 * 10\n    return str(total_damage)\n\nprint(solution(stdin=\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\"))"
    },
    {
        "number": 4511,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    cards = []\n    for i in range(1, n+1):\n        k = int(stdin.split('\\n')[i])\n        for j in range(k):\n            c, d = map(int, stdin.split('\\n')[i+j+1].split())\n            cards.append((c, d))\n    damage = 0\n    for i in range(n):\n        cards_this_turn = []\n        for j in range(3):\n            if len(cards) > 0 and cards[0][0] <= 3:\n                cards_this_turn.append(cards.pop(0))\n        if i % 10 == 9:\n            for card in cards_this_turn:\n                card = (card[0], card[1] * 2)\n        damage += sum(card[1] for card in cards_this_turn)\n    return str(damage)"
    },
    {
        "number": 4512,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, q = stdin.split('\\n')\n    s = list(s)\n    ans = []\n    for _ in range(int(q)):\n        t, *args = stdin.split()\n        if t == '1':\n            pos, c = map(int, args)\n            s[pos-1] = c\n        elif t == '2':\n            l, r = map(int, args)\n            sub = ''.join(s[l-1:r])\n            ans.append(len(set(sub)))\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 4512,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, q = stdin.split('\\n')\n    s = list(s)\n    for _ in range(int(q)):\n        query = stdin.split('\\n')[0].split()\n        if query[0] == '1':\n            s[int(query[1]) - 1] = query[2]\n        else:\n            l, r = int(query[1]) - 1, int(query[2])\n            sub = set(s[l:r])\n            print(len(sub))\n    return '\\n'.join(s)"
    },
    {
        "number": 4512,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    q = int(stdin.split()[1])\n    distinct_chars = set()\n    for _ in range(q):\n        query = stdin.readline().strip().split()\n        if query[0] == '1':\n            pos, char = int(query[1])-1, query[2]\n            s = s[:pos] + char + s[pos+1:]\n        elif query[0] == '2':\n            l, r = int(query[1])-1, int(query[2])-1\n            distinct_chars.update(set(s[l:r+1]))\n    return '\\n'.join(map(str, distinct_chars))"
    },
    {
        "number": 4512,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split()[0]\n    q = int(stdin.strip().split()[1])\n    s_list = list(s)\n    for i in range(q):\n        query = stdin.strip().split()[i+1]\n        if query[0] == '1':\n            pos = int(query.split()[1]) - 1\n            s_list[pos] = query.split()[2]\n        elif query[0] == '2':\n            l, r = int(query.split()[1]) - 1, int(query.split()[2])\n            substring = ''.join(s_list[l:r+1])\n            distinct_chars = len(set(substring))\n            print(distinct_chars)\n    return '\\n'.join([str(len(set(s_list[:i+1]))) for i in range(len(s_list))])"
    },
    {
        "number": 4512,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    q = int(stdin.split('\\n')[1])\n    for i in range(q):\n        query = stdin.split('\\n')[i+2].split()\n        if query[0] == '1':\n            s = s[:int(query[1])-1] + query[2] + s[int(query[1]):]\n        elif query[0] == '2':\n            sub = s[int(query[1])-1:int(query[2])]\n            print(len(set(sub)))\n    return ''"
    },
    {
        "number": 4512,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    q = int(stdin.split('\\n')[1])\n    for i in range(q):\n        query = stdin.split('\\n')[i+2].split()\n        if query[0] == '1':\n            s = s[:int(query[1])-1] + query[2] + s[int(query[1]):]\n        else:\n            count = len(set(s[int(query[1])-1:int(query[2])]))\n            print(count)\n    return s"
    },
    {
        "number": 4512,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.readline().strip()\n    q = int(stdin.readline())\n    \n    for i in range(q):\n        query = stdin.readline().strip().split()\n        if query[0] == '1':\n            pos = int(query[1]) - 1\n            c = query[2]\n            s = s[:pos] + c + s[pos + 1:]\n        else:\n            l = int(query[1]) - 1\n            r = int(query[2])\n            sub = s[l:r+1]\n            count = len(set(sub))\n            print(count)\n    \n    return s"
    },
    {
        "number": 4512,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.readline().strip()\n    q = int(stdin.readline())\n    distinct_chars = set(s)\n\n    for i in range(q):\n        query = stdin.readline().strip().split()\n        if query[0] == '1':\n            s = s[:int(query[1]) - 1] + query[2] + s[int(query[1]):]\n        else:\n            distinct_chars = set(s[int(query[1]) - 1:int(query[2])])\n\n    return '\\n'.join(map(str, [len(distinct_chars)] * q))"
    },
    {
        "number": 4512,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    q = int(stdin.split()[1])\n    for i in range(q):\n        q_type, *args = stdin.split()[i+2].split()\n        if q_type == \"1\":\n            pos, c = args\n            s = s[:int(pos)-1] + c + s[int(pos):]\n        elif q_type == \"2\":\n            l, r = args\n            sub = s[int(l)-1:int(r)]\n            distinct_chars = len(set(sub))\n            print(distinct_chars)\n    return s"
    },
    {
        "number": 4512,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.readline().strip()\n    q = int(stdin.readline().strip())\n\n    for i in range(q):\n        query = stdin.readline().strip().split()\n\n        if query[0] == '1':\n            pos = int(query[1]) - 1\n            c = query[2]\n            s = s[:pos] + c + s[pos+1:]\n        else:\n            l = int(query[1]) - 1\n            r = int(query[2])\n            distinct = set(s[l:r+1])\n            print(len(distinct))"
    },
    {
        "number": 4513,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for _ in range(t):\n        field = [list(map(int, list(stdin.readline().strip()))) for _ in range(9)]\n\n        # Check rows for anti-sudoku\n        for i in range(9):\n            row = set(field[i])\n            if len(row)!= 9:\n                for j in range(9):\n                    if field[i][j] not in row and field[i][j]!= 0:\n                        field[i][j] = list(set(range(1, 10)) - row)[0]\n\n        # Check columns for anti-sudoku\n        for j in range(9):\n            col = [field[i][j] for i in range(9)]\n            if len(set(col))!= 9:\n                for i in range(9):\n                    if field[i][j] not in set(col) and field[i][j]!= 0:\n                        field[i][j] = list(set(range(1, 10)) - set(col))[0]\n\n        # Check 3x3 blocks for anti-sudoku\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                block = [field[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n                if len(set(block))!= 9:\n                    for x in range(i, i+3):\n                        for y in range(j, j+3):\n                            if field[x][y] not in set(block) and field[x][y]!= 0:\n                                field[x][y] = list(set(range(1, 10)) - set(block))[0]\n\n        # Print anti-sudoku field\n        for i in range(9):\n            print(*field[i])\n"
    },
    {
        "number": 4513,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline().strip())\n    for i in range(test_cases):\n        sudoku = [list(map(int, line.strip())) for line in stdin.readlines()]\n        # Check rows\n        for row in sudoku:\n            row_set = set(row)\n            if len(row_set)!= len(row):\n                for j in range(9):\n                    if row[j] not in row_set:\n                        # Change row[j] to any number in range [1; 9] that is not in the row_set\n                        for k in range(1, 10):\n                            if k not in row_set:\n                                row[j] = k\n                                if check_row(sudoku, row_set, j, row):\n                                    return \"\\n\".join(map(str, sudoku))\n                                else:\n                                    row[j] = 0\n        # Check columns\n        for j in range(9):\n            col = [sudoku[i][j] for i in range(9)]\n            col_set = set(col)\n            if len(col_set)!= len(col):\n                for i in range(9):\n                    if col[i] not in col_set:\n                        # Change col[i] to any number in range [1; 9] that is not in the col_set\n                        for k in range(1, 10):\n                            if k not in col_set:\n                                col[i] = k\n                                if check_column(sudoku, col_set, i, col):\n                                    return \"\\n\".join(map(str, sudoku))\n                                else:\n                                    col[i] = 0\n        # Check blocks\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                block = [sudoku[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n                block_set = set(block)\n                if len(block_set)!= len(block):\n                    for k in range(9):\n                        if block[k] not in block_set:\n                            # Change block[k] to any number in range [1; 9] that is not in the block_set\n                            for l in range(1, 10):\n                                if l not in block_set:\n                                    block[k] = l\n                                    if check_block(sudoku, block_set, k, i, j, block):\n                                        return \"\\n\".join(map(str, sudoku))\n                                    else:\n                                        block[k] = 0\n    return None\n\ndef"
    },
    {
        "number": 4513,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    sudokus = lines[1:]\n\n    # iterate through test cases\n    for i in range(t):\n        # parse sudoku\n        sudoku = [[int(x) for x in s] for s in sudokus[i].split()]\n\n        # iterate through cells and choose at most 9 cells to change\n        changed = 0\n        for i in range(9):\n            for j in range(9):\n                if sudoku[i][j]!= 0:\n                    continue\n                # iterate through possible values and change cell if possible\n                for k in range(1, 10):\n                    if k in sudoku[i] or k in [sudoku[x][j] for x in range(9)] or k in [sudoku[x//3*3+x%3//3][y//3*3+y%3//3] for x in range(9) for y in range(9)]:\n                        sudoku[i][j] = k\n                        changed += 1\n                        if changed == 9:\n                            break\n                if changed == 9:\n                    break\n        # print sudoku with changed cells\n        print('\\n'.join([''.join([str(sudoku[i][j]) for j in range(9)]) for i in range(9)]))\n"
    },
    {
        "number": 4513,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = 9\n    grid = [[int(c) for c in line.strip()] for line in lines]\n    for i in range(n):\n        for j in range(n):\n            if not valid_row(grid, i, j) or not valid_col(grid, i, j) or not valid_block(grid, i, j):\n                return '\\n'.join([' '.join(str(c) for c in row) for row in grid])\n            if grid[i][j]!= 0:\n                continue\n            for k in range(1, n+1):\n                if valid_position(grid, i, j, k):\n                    grid[i][j] = k\n                    break\n    return '\\n'.join([' '.join(str(c) for c in row) for row in grid])\n\ndef"
    },
    {
        "number": 4513,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        field = [list(map(int, list(line.strip()))) for line in stdin.readlines()]\n        \n        # modify the field to make it anti-sudoku\n        n = 0\n        while n < 9:\n            i, j = random.randint(0, 8), random.randint(0, 8)\n            if field[i][j]!= 0:\n                field[i][j] = 0\n                n += 1\n        \n        # check if the modified field is anti-sudoku\n        for i in range(9):\n            if len(set(field[i])) < 9:\n                # row has duplicate numbers\n                n = 0\n                while n < 9:\n                    field[i][random.randint(0, 8)] = random.randint(1, 9)\n                    n += 1\n                return \"\\n\".join([\"\".join(map(str, row)) for row in field])\n            if len(set([field[k][i] for k in range(9)])) < 9:\n                # column has duplicate numbers\n                n = 0\n                while n < 9:\n                    field[random.randint(0, 8)][i] = random.randint(1, 9)\n                    n += 1\n                return \"\\n\".join([\"\".join(map(str, row)) for row in field])\n        \n        # check if each block has duplicate numbers\n        for k in range(9):\n            i = (k // 3) * 3\n            j = (k % 3) * 3\n            if len(set([field[i + m][j + n] for m in range(3) for n in range(3)])) < 9:\n                # block has duplicate numbers\n                n = 0\n                while n < 9:\n                    field[i + random.randint(0, 2)][j + random.randint(0, 2)] = random.randint(1, 9)\n                    n += 1\n                return \"\\n\".join([\"\".join(map(str, row)) for row in field])\n        \n        # if all conditions are satisfied, the field is anti-sudoku\n        return \"\\n\".join([\"\".join(map(str, row)) for row in field])"
    },
    {
        "number": 4513,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    lines = lines[1:]\n    for i in range(n):\n        field = [[int(num) for num in line] for line in lines[i*9:i*9+9]]\n        #print(field)\n        changed = False\n        for i in range(9):\n            for j in range(9):\n                if field[i][j]!= 0:\n                    continue\n                nums = [k+1 for k in range(9)]\n                for k in range(9):\n                    if field[i][k] in nums:\n                        nums.remove(field[i][k])\n                    if field[k][j] in nums:\n                        nums.remove(field[k][j])\n                for k in range(i//3*3, i//3*3+3):\n                    for l in range(j//3*3, j//3*3+3):\n                        if field[k][l] in nums:\n                            nums.remove(field[k][l])\n                field[i][j] = nums[0]\n                changed = True\n        if not changed:\n            return '\\n'.join([''.join([str(num) for num in line]) for line in field])\n        lines = lines[:i*9] + [''.join([str(num) for num in line]) for line in field] + lines[i*9+9:]\n    return None"
    },
    {
        "number": 4513,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def anti_sudoku(field):\n        for i in range(9):\n            row = [field[i][j] for j in range(9)]\n            col = [field[j][i] for j in range(9)]\n            block_x = i // 3\n            block_y = i % 3\n            block = [field[block_x*3+j//3][block_y*3+j%3] for j in range(9)]\n            if len(set(row))!= 9 or len(set(col))!= 9 or len(set(block))!= 9:\n                return False\n        return True\n\n    def valid_field(field):\n        for i in range(9):\n            row = [int(field[i][j]) for j in range(9)]\n            col = [int(field[j][i]) for j in range(9)]\n            if len(set(row))!= 9 or len(set(col))!= 9:\n                return False\n        return True\n\n    def change_field(field):\n        for i in range(9):\n            for j in range(9):\n                if field[i][j] == '.':\n                    for num in range(1, 10):\n                        field[i][j] = str(num)\n                        if anti_sudoku(field) and valid_field(field):\n                            return True\n                        field[i][j] = '.'\n                    return False\n        return True\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        field = [list(stdin.readline().strip()) for _ in range(9)]\n        change_field(field)\n        for row in field:\n            print(''.join(row))\n        print()"
    },
    {
        "number": 4513,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        s = stdin.readline().strip()\n        anti_sudoku = False\n        for i in range(9):\n            row = set(s[i*9:i*9+9])\n            col = set(s[j*9+i] for j in range(9))\n            if len(row)!= 9 or len(col)!= 9:\n                anti_sudoku = True\n                break\n        if anti_sudoku:\n            for i in range(9):\n                for j in range(9):\n                    if s[i*9+j]!= '0':\n                        continue\n                    for k in range(1, 10):\n                        if k in row or k in col or (i//3)*3 + k//3 in [x//3 for x in range(i*9, i*9+3)]:\n                            continue\n                        s = s[:i*9+j] + str(k) + s[i*9+j+1:]\n                        if int(s[i*9+j]) == k:\n                            break\n                    else:\n                        return 'Error'\n            return s\n        else:\n            return 'The input is already anti-sudoku'"
    },
    {
        "number": 4513,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        field = lines[i].split()\n        changed = True\n        while changed:\n            changed = False\n            for i in range(9):\n                for j in range(9):\n                    if field[i][j] == '0':\n                        for n in range(1, 10):\n                            if ((n not in field[i]) and (n not in ''.join([field[k][j] for k in range(9)])) and (n not in [field[k][j//3 + (j%3)*3] for k in range(3)])):\n                                field[i] = field[i][:j] + str(n) + field[i][j+1:]\n                                changed = True\n                                break\n                        if not changed:\n                            field[i] = field[i][:j] + '0' + field[i][j+1:]\n                            break\n        print('\\n'.join([' '.join(field[i:i+3]) for i in range(0, 9, 3)]))\n        for i in range(9):\n            print(field[i])\n        print()"
    },
    {
        "number": 4513,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    t = int(lines[0])\n    lines = lines[1:]\n    for i in range(t):\n        sudoku = [list(map(int, line.strip())) for line in lines[:9]]\n        answer = [[0 for _ in range(9)] for _ in range(9)]\n        changed = 0\n        for i in range(9):\n            for j in range(9):\n                if sudoku[i][j]!= 0:\n                    answer[i][j] = sudoku[i][j]\n                    continue\n                for num in range(1, 10):\n                    if all(num!= answer[k][j] for k in range(9)) and \\\n                            all(num!= answer[i][k] for k in range(9)) and \\\n                            all(num!= answer[i//3*3+k//3][j//3*3+k%3] for k in range(9)):\n                        answer[i][j] = num\n                        changed += 1\n                        if changed >= 9:\n                            break\n                if changed >= 9:\n                    break\n        answer = \"\\n\".join(\"\".join(str(num) for num in row) for row in answer)\n        print(answer)\n        lines = lines[9:]\n\nsolution('''\n1\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n''')"
    },
    {
        "number": 4514,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.readline().strip().split())\n    officer_superior = list(map(int, stdin.readline().strip().split()))\n\n    def dfs(officer):\n        nonlocal command_order\n        command_order.append(officer)\n        for subordinate in range(1, n + 1):\n            if officer_superior[subordinate - 1] == officer:\n                dfs(subordinate)\n\n    command_order = []\n    dfs(1)\n\n    for _ in range(q):\n        u, k = map(int, stdin.readline().strip().split())\n        position = command_order.index(u) + k\n        if position >= len(command_order):\n            print(-1)\n        else:\n            print(command_order[position])\n\n    return \"\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    superior = list(map(int, stdin.split()))\n    \n    def dfs(u: int) -> List[int]:\n        visited.add(u)\n        subordinates = [v for v in range(n) if superior[v] == u and v not in visited]\n        for v in subordinates:\n            subordinate_sequence += dfs(v)\n        return subordinates + [u]\n    \n    subordinate_sequence = []\n    visited = set()\n    commander = 1\n    for i in range(q):\n        u, k = map(int, stdin.split())\n        commander_sequence = dfs(commander)\n        if k <= len(commander_sequence):\n            result = commander_sequence[k-1]\n        else:\n            result = -1\n        print(result)\n        commander = u\n\nstdin = \"\"\"9 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\"\"\"\n\nsolution(stdin)"
    },
    {
        "number": 4514,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4514,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    graph = {i+1:[] for i in range(n)}\n    for i in range(n-1):\n        p = int(stdin.split()[i])\n        graph[p].append(i+2)\n    \n    for i in range(q):\n        u, k = map(int, stdin.split())\n        visited = [False]*(n+1)\n        stack = [(u, 1)]\n        while stack:\n            curr_officer, curr_pos = stack.pop()\n            if visited[curr_officer]:\n                continue\n            visited[curr_officer] = True\n            if curr_pos == k:\n                return curr_officer\n            for subordinate in graph[curr_officer]:\n                stack.append((subordinate, curr_pos+1))\n        return -1\n    \n    return -1\n\nprint(solution(input()))"
    },
    {
        "number": 4514,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:]))\n    assert n == len(p) + 1\n    \n    # construct the tree\n    tree = [[] for _ in range(n)]\n    for i in range(n - 1):\n        tree[p[i]].append(i + 1)\n    \n    # process queries\n    for i in range(q):\n        u, k = map(int, stdin.split()[i*2:i*2+2])\n        assert 1 <= u <= n and 1 <= k <= n\n        \n        # dfs algorithm to spread the command\n        received = []\n        stack = [(u, 0)]\n        while stack:\n            curr, depth = stack.pop()\n            if curr in received:\n                continue\n            received.append(curr)\n            for child in tree[curr]:\n                if child not in received:\n                    stack.append((child, depth + 1))\n        \n        # find the k-th received officer\n        if k <= len(received):\n            print(received[k - 1])\n        else:\n            print(\"-1\")\n    \n    return \"\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4514,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, q = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:]))\n    queries = []\n    for i in range(q):\n        queries.append(list(map(int, stdin.split())))\n\n    # construct the tree\n    tree = [[] for _ in range(n)]\n    for i in range(1, n):\n        parent = p[i-1]\n        tree[parent-1].append(i-1)\n        tree[i-1].append(parent-1)\n\n    # define a dfs function to process the queries\n    def dfs(u, k):\n        # if we have visited this node, return None\n        if visited[u]:\n            return None\n        visited[u] = True\n\n        # if we have reached the end of the sequence, return the current node\n        if k == 1:\n            return u\n        # otherwise, process the subtree of the current node\n        for v in tree[u]:\n            if dfs(v, k-1) is not None:\n                return v\n\n    # process the queries\n    result = []\n    visited = [False] * n\n    for u, k in queries:\n        u -= 1\n        k -= 1\n\n        # perform dfs from the start node\n        dfs(u, k)\n\n        # construct the command delivery sequence\n        seq = [i+1 for i in range(n) if visited[i]]\n        if k > len(seq):\n            result.append(\"-1\")\n        else:\n            result.append(seq[k-1])\n\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4514,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, q = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    queries = []\n    for _ in range(q):\n        u, k = map(int, stdin.readline().split())\n        queries.append((u, k))\n    \n    # construct the tree\n    tree = [[] for _ in range(n)]\n    for i in range(1, n):\n        tree[p[i]].append(i)\n    \n    # process queries\n    results = []\n    for u, k in queries:\n        # do dfs from u to collect subordinates who have not received the command\n        seen = set([u])\n        stack = [u]\n        subordinates = []\n        while stack:\n            node = stack.pop()\n            for subordinate in tree[node]:\n                if subordinate not in seen:\n                    seen.add(subordinate)\n                    stack.append(subordinate)\n            subordinates.append(node)\n        \n        # find the k-th element of subordinates\n        if len(subordinates) < k:\n            results.append(-1)\n        else:\n            results.append(subordinates[k - 1])\n    \n    return \"\\n\".join(map(str, results))"
    },
    {
        "number": 4514,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, q = map(int, stdin.readline().strip().split())\n    officer_superiors = list(map(int, stdin.readline().strip().split()))\n    queries = []\n    for _ in range(q):\n        queries.append(tuple(map(int, stdin.readline().strip().split())))\n\n    # Build army tree\n    army_tree = [[] for _ in range(n)]\n    for i in range(2, n):\n        army_tree[officer_superiors[i-1]-1].append(i)\n\n    # DFS to spread command\n    def spread_command(officer):\n        # Base case: command spreads to direct subordinates\n        if officer in army_tree and army_tree[officer]:\n            # Choose the officer with the smallest index\n            direct_subordinate = min(army_tree[officer])\n            army_tree[officer].remove(direct_subordinate)\n            # Recursively spread command to direct subordinate\n            return [officer, direct_subordinate] + spread_command(direct_subordinate)\n        # Base case: command reaches the commander\n        else:\n            return [officer]\n\n    # Process queries\n    for u, k in queries:\n        # Reset army tree for each query\n        army_tree = [[] for _ in range(n)]\n        army_tree[officer_superiors[u-1]-1].append(u)\n        # Spread command to subordinates\n        command_sequence = spread_command(u)\n        # Get the k-th element or -1 if it doesn't exist\n        if k > len(command_sequence):\n            print(\"-1\")\n        else:\n            print(command_sequence[k-1])\n\n    return \"\""
    },
    {
        "number": 4514,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.readline().split())\n    parent = list(map(int, stdin.readline().split()))\n    queries = [tuple(map(int, stdin.readline().split())) for _ in range(q)]\n\n    # Construct the tree using parent array\n    tree = [[] for _ in range(n)]\n    for i in range(1, n):\n        tree[parent[i]].append(i)\n\n    # DFS algorithm to spread the command\n    def dfs(u: int, k: int) -> List[int]:\n        if u == 1:\n            return [u]\n        visited = [False] * n\n        visited[u] = True\n        stack = [u]\n        result = [u]\n        while stack:\n            curr = stack.pop()\n            for child in tree[curr]:\n                if not visited[child]:\n                    visited[child] = True\n                    stack.append(child)\n                    result.append(child)\n        return result[k-1] if k <= len(result) else -1\n\n    # Process each query\n    result = []\n    for u, k in queries:\n        result.append(dfs(u, k))\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4515,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n'):\n        if line:\n            a, b, c, n = map(int, line.split())\n            if a + b + c!= n:\n                return \"NO\"\n            if a == b == c == 0 and n == 0:\n                return \"YES\"\n            if a == 0 and b == 0 and c == 0:\n                return \"NO\"\n            if a == 0 and b == 0 and n % 3 == 0:\n                return \"YES\"\n            if a == 0 and c == 0 and n % 2 == 0:\n                return \"YES\"\n            if b == 0 and c == 0 and n % 3 == 0:\n                return \"YES\"\n            if a == b and a == c and n % 3 == 0:\n                return \"YES\"\n            if b == c and b == a and n % 2 == 0:\n                return \"YES\"\n            if (a + b) % 3 == 0 and (b + c) % 3 == 0 and (a + c) % 3 == 0:\n                return \"YES\"\n            if (a + b) % 2 == 0 and (b + c) % 2 == 0 and (a + c) % 2 == 0:\n                return \"YES\"\n            if a == b and b == c and n % 6 == 0:\n                return \"YES\"\n            if a == b and b == c and n % 2 == 0:\n                return \"NO\"\n            if b == c and b == a and n % 3 == 0:\n                return \"NO\"\n            if a == b and b == c and n % 2 == 0:\n                return \"NO\"\n            return \"NO\"\n    return \"NO\""
    },
    {
        "number": 4515,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, c, n = map(int, stdin.readline().strip().split())\n        if a + b + c == n:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 4515,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        a, b, c, n = map(int, line.strip().split())\n        if a + b + c == n and (a == 0 or b == 0 or c == 0 or n % 3 == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4515,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    t = int(stdin.readline().strip())\n    results = []\n    for i in range(t):\n        a, b, c, n = map(int, stdin.readline().strip().split())\n        # check if it's possible to distribute the coins\n        if a+b+c!= n:\n            results.append(\"NO\")\n        else:\n            # check if it's possible to distribute the coins between sisters\n            if a == b == c or (a+b == c or b+c == a or a+c == b):\n                results.append(\"YES\")\n            else:\n                results.append(\"NO\")\n    return \"\\n\".join(results)\n"
    },
    {
        "number": 4515,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.splitlines():\n        a, b, c, n = map(int, line.split())\n\n        if a == b or b == c or c == a:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n    return \"\""
    },
    {
        "number": 4515,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b, c, n = map(int, stdin.readline().strip().split())\n        if a == b == c == 0:\n            if n == 0:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        elif a + b + c == n:\n            if a == b == c == 0:\n                print(\"YES\")\n            else:\n                if (a + b) % 3 == 0 or (b + c) % 3 == 0 or (a + c) % 3 == 0:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4515,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for test in stdin.split('\\n'):\n        if not test:\n            continue\n        a, b, c, n = map(int, test.split())\n        if a+b+c == n:\n            if a == b and b == c:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, c, n = map(int, stdin.readline().strip().split())\n        if a+b+c == n and (a == b or b == c or a == c):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4515,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # convert input to integers\n    a, b, c, n = map(int, stdin.strip().split())\n\n    # check if a+A=b+B=c+C\n    if a+b+c!= n:\n        return \"NO\"\n\n    # check if A+B+C is divisible by 3\n    if (a+b+c) % 3!= 0:\n        return \"NO\"\n\n    # check if a+b+c is divisible by 2\n    if (a+b+c) % 2 == 0:\n        return \"NO\"\n\n    # check if a is equal to b and b is equal to c\n    if a!= b or b!= c:\n        return \"NO\"\n\n    # if all conditions are satisfied, return \"YES\"\n    return \"YES\""
    },
    {
        "number": 4515,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, c, n = map(int, stdin.readline().strip().split())\n        if a + b + c == n and a == b == c:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4516,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    x = list(map(int, stdin.readline().strip().split()))\n    res = []\n    for i in range(1, n + 1):\n        p = [j for j in range(1, n + 1) if j!= i] + [i]\n        res.append(sum(abs(pos(p, x[j - 1]) - pos(p, x[j])) for j in range(1, m)))\n    return''.join(str(i) for i in res)\n\ndef"
    },
    {
        "number": 4516,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n    \n    f = []\n    for i in range(1, n + 1):\n        p = [i] + list(range(1, i)) + list(range(i + 1, n + 1))\n        f.append(sum(abs(pos(p, val) - pos(p, val + 1)) for val in x[:-1]))\n    \n    return''.join(map(str, f))\n\ndef"
    },
    {
        "number": 4516,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n\n    def f(p):\n        result = 0\n        for i in range(m - 1):\n            result += abs(pos(p, x[i]) - pos(p, x[i + 1]))\n        return result\n\n    def pos(p, val):\n        for i in range(len(p)):\n            if p[i] == val:\n                return i\n        return -1\n\n    result = []\n    for i in range(1, n + 1):\n        result.append(f(p_i(i, n)))\n    return \" \".join(map(str, result))\n\ndef"
    },
    {
        "number": 4516,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    x = list(map(int, stdin.strip().split()))\n    ans = []\n    for i in range(1, n + 1):\n        p = [j if j!= i else 0 for j in range(1, n + 1)]\n        for j in range(m - 1):\n            p[x[j] - 1] = x[j + 1]\n        ans.append(sum([abs(pos(p, x[j]) - pos(p, x[j + 1])) for j in range(m - 1)]))\n    return \" \".join(map(str, ans))\n\ndef"
    },
    {
        "number": 4516,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    assert len(x) == m\n    f = []\n    for i in range(1, n + 1):\n        p = [j for j in range(1, n + 1) if j!= i]\n        p.insert(0, i)\n        f.append(sum(abs(pos(p, x[j - 1]) - pos(p, x[j])) for j in range(1, m)))\n    return''.join(map(str, f))\n\ndef"
    },
    {
        "number": 4516,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    res = []\n    for i in range(1, n + 1):\n        p = [j for j in range(1, n + 1) if j!= i]\n        p = [i] + p\n        d = [abs(pos(p, x[j]) - pos(p, x[j + 1])) for j in range(m - 1)]\n        res.append(sum(d))\n    return \" \".join(map(str, res))\n\ndef"
    },
    {
        "number": 4516,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    x = list(map(int, stdin.strip().split()))\n\n    # create list of permutations\n    ps = []\n    for i in range(1, n + 1):\n        p = [j for j in range(1, n + 1) if j!= i]\n        p.insert(i - 1, i)\n        ps.append(p)\n\n    # calculate f(p_i(n)) for i = 1, 2,..., n\n    fs = []\n    for p in ps:\n        f = 0\n        for i in range(m - 1):\n            f += abs(p.index(x[i]) - p.index(x[i + 1]))\n        fs.append(f)\n\n    return''.join(map(str, fs))\n\n\ndef"
    },
    {
        "number": 4516,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    result = []\n    for i in range(1, n + 1):\n        p = list(range(1, n + 1))\n        p[0], p[i - 1] = i, i\n        d = sum(abs(pos(p, x[j - 1]) - pos(p, x[j])) for j in range(1, m))\n        result.append(d)\n    return''.join(map(str, result))\n\ndef"
    },
    {
        "number": 4516,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.splitlines()[0].split())\n    x = list(map(int, stdin.splitlines()[1].split()))\n    p = []\n    for i in range(1, n + 1):\n        p.append([i] + list(range(1, i)) + list(range(i + 1, n + 1)))\n    f = []\n    for pi in p:\n        fx = 0\n        for i in range(m - 1):\n            fx += abs(pi.index(x[i]) - pi.index(x[i + 1]))\n        f.append(fx)\n    return''.join(map(str, f))\n"
    },
    {
        "number": 4516,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    x = list(map(int, stdin.split()[2:]))\n    res = []\n    for i in range(1, n + 1):\n        p = [i] + list(range(1, i)) + list(range(i + 1, n + 1))\n        f = sum(abs(pos(p, x[j]) - pos(p, x[j + 1])) for j in range(m - 1))\n        res.append(f)\n    return''.join(map(str, res))\n\n\ndef"
    },
    {
        "number": 4517,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    tree = [[] for i in range(n+1)]\n    for i in range(n-1):\n        u, v = map(int, stdin.readline().strip().split())\n        tree[u].append(v)\n        tree[v].append(u)\n    for i in range(m):\n        k = int(stdin.readline().strip())\n        q = list(map(int, stdin.readline().strip().split()))\n        visited = [False] * (n+1)\n        q.append(1)\n        visited[1] = True\n        for j in q:\n            if j in q[:k]:\n                continue\n            for l in tree[j]:\n                if visited[l]:\n                    continue\n                visited[l] = True\n                q.append(l)\n            if len(q) == k:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4517,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    graph = [[] for i in range(n+1)]\n    for i in range(n-1):\n        u, v = map(int, stdin.readline().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    for i in range(m):\n        k = int(stdin.readline())\n        query = list(map(int, stdin.readline().split()))\n        dist = [float('inf') for i in range(n+1)]\n        dist[1] = 0\n        q = [1]\n        while q:\n            node = q.pop(0)\n            for child in graph[node]:\n                if dist[child] > dist[node]+1:\n                    dist[child] = dist[node]+1\n                    q.append(child)\n        if k == 1:\n            if dist[query[0]] > 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            for i in range(k):\n                if dist[query[i]] == 0:\n                    continue\n                else:\n                    for j in range(i+1, k):\n                        if dist[query[j]] == 1 and query[j] in graph[query[i]]:\n                            continue\n                        else:\n                            return \"NO\"\n            return \"YES\""
    },
    {
        "number": 4517,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    graph = [[] for _ in range(n+1)]\n    for i in range(n-1):\n        u, v = map(int, stdin.readline().strip().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    for i in range(m):\n        k = int(stdin.readline().strip())\n        vs = list(map(int, stdin.readline().strip().split()))\n        # check if all vertices are connected\n        if len(vs)!= len(set(vs)):\n            return \"NO\"\n        for v in vs:\n            if v == 1:\n                continue\n            # find the path from the root to the vertex\n            q = [(1, 0)]\n            seen = set()\n            while q:\n                u, d = q.pop(0)\n                if u in seen:\n                    continue\n                seen.add(u)\n                if u in vs:\n                    break\n                for v in graph[u]:\n                    q.append((v, d+1))\n            else:\n                return \"NO\"\n        # check if each vertex has distance 1 to some vertex of the path\n        for v in vs:\n            q = [(1, 0)]\n            seen = set()\n            while q:\n                u, d = q.pop(0)\n                if u in seen:\n                    continue\n                seen.add(u)\n                if u == v:\n                    break\n                for w in graph[u]:\n                    q.append((w, d+1))\n            else:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4517,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4517,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    parent = list(map(int, stdin.readline().split()))\n    adj = [[] for _ in range(n+1)]\n    for i in range(1, n):\n        adj[parent[i]].append(i)\n        adj[i].append(parent[i])\n\n    def dfs(s, target, dist):\n        if s == target:\n            return True\n        visited[s] = True\n        for i in adj[s]:\n            if not visited[i]:\n                if dfs(i, target, dist+1):\n                    return True\n                elif dist == 1:\n                    return True\n        return False\n\n    for i in range(m):\n        k = int(stdin.readline())\n        visited = [False]*(n+1)\n        query = list(map(int, stdin.readline().split()))\n        for j in query:\n            if dfs(1, j, 0):\n                continue\n            else:\n                print(\"NO\")\n                break\n        else:\n            print(\"YES\")\n\n    return \"0\""
    },
    {
        "number": 4517,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    adj = [[] for i in range(n)]\n    for i in range(n-1):\n        u, v = map(int, stdin.readline().split())\n        adj[u-1].append(v-1)\n        adj[v-1].append(u-1)\n    def dfs(node, parent, visited, dist):\n        visited[node] = True\n        for child in adj[node]:\n            if child == parent:\n                continue\n            if not visited[child]:\n                if dfs(child, node, visited, dist+1):\n                    return True\n            elif dist == 1:\n                return True\n        return False\n    for i in range(m):\n        k = int(stdin.readline())\n        query = list(map(int, stdin.readline().split()))\n        visited = [False] * n\n        if dfs(0, -1, visited, 0):\n            if all(x in visited or x in adj[query[j]-1] for j in range(k) for x in query if x!= query[j]):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 4517,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4517,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    tree = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().strip().split())\n        tree[u].append(v)\n        tree[v].append(u)\n    res = []\n    for _ in range(m):\n        k = int(stdin.readline().strip())\n        q = list(map(int, stdin.readline().strip().split()))\n        visited = [False] * (n + 1)\n        stack = [1]\n        while stack:\n            curr = stack.pop()\n            if visited[curr]:\n                continue\n            visited[curr] = True\n            if curr == q[0]:\n                stack = []\n                for i in range(1, k):\n                    if curr == q[i]:\n                        continue\n                    if curr in tree[q[i]] or (visited[q[i]] and abs(q[i] - curr) == 1):\n                        stack.append(q[i])\n                        break\n                else:\n                    res.append(\"YES\")\n                    continue\n            for nei in tree[curr]:\n                if not visited[nei]:\n                    stack.append(nei)\n        if not res:\n            res.append(\"NO\")\n    return \"\\n\".join(res)"
    },
    {
        "number": 4517,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    tree = [[] for _ in range(n+1)]\n    for _ in range(n-1):\n        u, v = map(int, stdin.readline().split())\n        tree[u].append(v)\n        tree[v].append(u)\n    queries = []\n    for _ in range(m):\n        k = int(stdin.readline())\n        vertices = list(map(int, stdin.readline().split()))\n        queries.append((vertices, k))\n\n    def dfs(start, end, prev, dist, visited):\n        if start == end:\n            return True\n        visited.add(start)\n        for node in tree[start]:\n            if node == prev:\n                continue\n            if node in visited:\n                continue\n            if dist[node] == 1:\n                return True\n            if dfs(node, end, start, dist, visited):\n                return True\n        return False\n\n    for vertices, k in queries:\n        dist = [0]*(n+1)\n        visited = set()\n        for i in range(n+1):\n            if i == 1:\n                dist[i] = 1\n            else:\n                dist[i] = -1\n        for i in range(n):\n            for j in range(i+1, n):\n                if tree[vertices[i]][j]:\n                    dist[vertices[i]] = 1\n                    dist[vertices[j]] = 1\n        for i in range(n):\n            if dist[i] == 0:\n                for j in range(n):\n                    if tree[i][j]:\n                        dist[i] = 1\n                        break\n        if dfs(1, vertices[-1], 0, dist, visited):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 4517,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Reading the input\n    n, m = map(int, stdin.readline().strip().split())\n    edges = []\n    for i in range(n-1):\n        u, v = map(int, stdin.readline().strip().split())\n        edges.append((u, v))\n    queries = []\n    for i in range(m):\n        k = int(stdin.readline().strip())\n        vertex = list(map(int, stdin.readline().strip().split()))\n        queries.append((k, vertex))\n    # Building the tree\n    adj = [[] for _ in range(n+1)]\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    # BFS to find a suitable vertex u for each query\n    for k, vertex in queries:\n        visited = [False]*(n+1)\n        queue = [(1, 0)]\n        while queue:\n            u, dist = queue.pop(0)\n            if visited[u]:\n                continue\n            visited[u] = True\n            if dist > 1:\n                continue\n            if len(set(adj[u]) & set(vertex)) == k:\n                return \"YES\"\n            for v in adj[u]:\n                queue.append((v, dist+1))\n        return \"NO\""
    },
    {
        "number": 4518,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        roads = []\n        for j in range(n):\n            for k in range(j+1, n):\n                if a[j]!= a[k]:\n                    roads.append((j+1, k+1))\n                    roads.append((k+1, j+1))\n        if len(roads) == n-1:\n            print(\"YES\")\n            for r in roads:\n                print(*r)\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 4518,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i*2-1])\n        a = list(map(int, lines[i*2].split()))\n        G = {i: [] for i in range(1, n+1)}\n        for i in range(1, n):\n            for j in range(i+1, n+1):\n                if a[i] == a[j-1]:\n                    G[i].append(j)\n                    G[j-1].append(i)\n        visit = [False]*n\n        stack = [1]\n        while stack:\n            u = stack.pop()\n            if visit[u-1]:\n                continue\n            visit[u-1] = True\n            for v in G[u]:\n                stack.append(v)\n        for i in range(n-1):\n            if not visit[i]:\n                return \"NO\"\n        for i in range(n-1):\n            for j in range(i+1, n):\n                if a[i] == a[j]:\n                    return \"NO\"\n        roads = []\n        for i in range(n-1):\n            for j in range(i+1, n):\n                if a[i]!= a[j]:\n                    roads.append((i+1, j+1))\n        print(\"YES\")\n        for road in roads:\n            print(*road)"
    },
    {
        "number": 4518,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline().strip())\n    for i in range(test_cases):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        graph = [[] for _ in range(n)]\n        for j in range(n-1):\n            x, y = map(int, stdin.readline().strip().split())\n            graph[x-1].append(y-1)\n            graph[y-1].append(x-1)\n        \n        # Check if the graph is connected or not\n        visited = [False] * n\n        stack = [0]\n        while stack:\n            curr = stack.pop()\n            if not visited[curr]:\n                visited[curr] = True\n                stack.extend(graph[curr])\n        if not all(visited):\n            print(\"NO\")\n            continue\n        \n        # Check if all pairs of directly connected districts belong to different gangs\n        roads = []\n        for i in range(n-1):\n            for j in range(i+1, n):\n                if a[i] == a[j]:\n                    roads.append((i+1, j+1))\n        if len(roads) == n-1:\n            print(\"YES\")\n            print(*roads, sep='\\n')\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4518,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        gang_count = len(set(a))\n        if gang_count == 1 or n == 2:\n            print('YES')\n            for i in range(n-1):\n                print(i+1, i+2)\n        else:\n            print('NO')\n\nstdin = \"\"\"\n4\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\"\"\"\n\nsolution(stdin)"
    },
    {
        "number": 4518,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    for testcase in range(1, int(lines[0]) + 1):\n        n = int(lines[testcase])\n        a = list(map(int, lines[testcase + 1].split()))\n        if n < 2:\n            print(\"NO\")\n            continue\n\n        # create graph\n        graph = [[] for _ in range(n)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                if a[i] == a[j]:\n                    continue\n                graph[i].append(j)\n                graph[j].append(i)\n\n        # check if graph is connected\n        visited = [False] * n\n        stack = [0]\n        while stack:\n            curr = stack.pop()\n            if visited[curr]:\n                continue\n            visited[curr] = True\n            for neighbor in graph[curr]:\n                if not visited[neighbor]:\n                    stack.append(neighbor)\n\n        if not all(visited):\n            print(\"NO\")\n            continue\n\n        # build roads\n        roads = []\n        for i in range(n):\n            for j in range(i + 1, n):\n                if a[i]!= a[j]:\n                    roads.append((i, j))\n\n        # check if all conditions are satisfied\n        for road in roads:\n            if a[road[0]] == a[road[1]]:\n                print(\"NO\")\n                return\n\n        # print roads\n        print(\"YES\")\n        for road in roads:\n            print(road[0] + 1, road[1] + 1)\n        print()\n"
    },
    {
        "number": 4518,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i*2-1])\n        a = [int(x) for x in lines[i*2].split()]\n        graph = [[] for _ in range(n)]\n        for j in range(n-1):\n            for k in range(j+1, n):\n                if a[j]!= a[k]:\n                    graph[j].append(k)\n                    graph[k].append(j)\n        visited = set([0])\n        queue = [0]\n        while queue:\n            node = queue.pop(0)\n            for neighbor in graph[node]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append(neighbor)\n        if len(visited) == n:\n            print('YES')\n            for j in range(n-1):\n                print(j+1, n)\n        else:\n            print('NO')\n    return ''"
    },
    {
        "number": 4518,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_reachable(g):\n        reachable = set()\n        stack = [0]\n        while stack:\n            u = stack.pop()\n            if u in reachable:\n                continue\n            reachable.add(u)\n            stack.extend(v for v, w in edges[u] if w == 1 and v not in reachable)\n        return len(reachable) == n\n    \n    def find_cycle(g):\n        visited = set()\n        stack = [0]\n        while stack:\n            u = stack.pop()\n            if u in visited:\n                return True\n            visited.add(u)\n            stack.extend(v for v, w in edges[u] if w == 1 and v not in visited)\n        return False\n    \n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    edges = [[] for _ in range(n)]\n    for i in range(n - 1):\n        u, v = map(int, stdin.readline().strip().split())\n        u -= 1\n        v -= 1\n        if u == v:\n            continue\n        if a[u] == a[v]:\n            return 'NO'\n        edges[u].append((v, 1))\n        edges[v].append((u, 1))\n    if is_reachable(0):\n        if not find_cycle(0):\n            for u, v in edges:\n                if len(v) == 1:\n                    print(u + 1, v[0][0] + 1)\n                    edges[u] = [(w[0], 0) for w in edges[u]]\n                    edges[v[0][0]][0] = (v[0][0], 0)\n            for i in range(n):\n                if len(edges[i]) == 1:\n                    print(i + 1, edges[i][0][0] + 1)\n                    edges[edges[i][0][0]][0] = (edges[i][0][0], 0)\n                    edges[i] = []\n            for i in range(n):\n                if len(edges[i]) > 1:\n                    return 'NO'\n            return 'YES'\n        return 'NO'\n    return 'NO'"
    },
    {
        "number": 4518,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes a string containing the input and returns a string containing the output of the problem.\n\n    :param stdin: a string containing the input\n    :return: a string containing the output of the problem\n    \"\"\"\n    # Parse the input\n    cases = stdin.split(\"\\n\\n\")\n    for i in range(len(cases)):\n        cases[i] = cases[i].strip()\n        if cases[i] == \"\":\n            cases.pop(i)\n            i -= 1\n    cases = [case.split(\"\\n\") for case in cases]\n    cases = [[line.split() for line in case] for case in cases]\n\n    # Solve the problems\n    for i, case in enumerate(cases):\n        n = int(case[0][0])\n        a = [int(x) for x in case[0][1:]]\n        gangs = set(a)\n        roads = []\n        for j in range(1, n):\n            for k in range(j):\n                if a[j]!= a[k] and (j, k) not in roads and (k, j) not in roads:\n                    roads.append((j, k))\n\n        # Check if there are enough roads to connect all districts\n        if len(roads) < n-1:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            for road in roads:\n                print(f\"{road[0]} {road[1]}\")\n"
    },
    {
        "number": 4518,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        # Check if it is possible to connect all districts satisfying the conditions\n        # from the problem statement\n        if len(set(a)) == 1:\n            print(\"YES\")\n            print(\"1 2\")\n            print(\"2 3\")\n            print(\"3 4\")\n            print(\"4 5\")\n            continue\n        # Build n-1 two-way roads in such a way that all districts are reachable from each other\n        # (possibly, using intermediate districts) and each pair of directly connected districts\n        # belong to different gangs\n        gangs = set(a)\n        roads = []\n        for i in range(1, n):\n            for j in range(i):\n                if a[i]!= a[j] and (i, j) not in roads and (j, i) not in roads:\n                    roads.append((i, j))\n                    roads.append((j, i))\n                    break\n        if len(roads) == n-1:\n            print(\"YES\")\n            print(*[f\"{i+1} {j+1}\" for i, j in roads], sep=\"\\n\")\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 4518,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i*2-1])\n        a = [int(x) for x in lines[i*2].split()]\n        roads = []\n        gangs = set(a)\n        for x in range(n-1):\n            for y in range(x+1, n):\n                if a[x]!= a[y]:\n                    roads.append((x+1, y+1))\n        if len(roads) < n-1:\n            return \"NO\"\n        else:\n            return \"YES\\n\" + \"\\n\".join(str(x[0]) + \" \" + str(x[1]) for x in roads)"
    },
    {
        "number": 4519,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    for i in range(1, q*3, 3):\n        n, k = map(int, lines[i].split())\n        s = lines[i+1]\n        if k >= n:\n            print(s)\n            continue\n        min_s = s\n        for j in range(n-k-1):\n            for l in range(j+1, n-k+1):\n                new_s = s[:j] + s[l] + s[j+1:l] + s[j] + s[l+1:]\n                if new_s < min_s:\n                    min_s = new_s\n        print(min_s)"
    },
    {
        "number": 4519,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        n, k = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n        ans = s\n        for i in range(n-1):\n            for j in range(i+1, n):\n                if ans[j] < ans[i] and k > 0:\n                    ans = ans[:j] + ans[i] + ans[j+1:i] + ans[j] + ans[i+1:]\n                    k -= 1\n        print(ans)"
    },
    {
        "number": 4519,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    for i in range(1, len(input_list), 2):\n        n, k = map(int, input_list[i-1].split())\n        string = input_list[i]\n        if k >= n:\n            return string\n        if string == string[::-1]:\n            return string\n        ans = string\n        for i in range(k):\n            ans = min(ans, swap(ans, 0), swap(ans, 1))\n        return ans\n\ndef"
    },
    {
        "number": 4519,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    q = int(lines[0])\n    for i in range(1, q*3, 3):\n        n = int(lines[i])\n        k = int(lines[i+1])\n        s = lines[i+2]\n        s = list(s)\n        visited = [False] * n\n        for _ in range(k):\n            i = -1\n            j = -1\n            for p in range(n):\n                if not visited[p] and (i == -1 or s[p] < s[i]):\n                    i = p\n                if not visited[p] and p > i and (j == -1 or s[p] < s[j]):\n                    j = p\n            if i == -1 or j == -1 or i+1 == j:\n                continue\n            visited[i] = True\n            visited[j] = True\n            s[i], s[j] = s[j], s[i]\n        s = \"\".join(s)\n        print(s)\n    return \"\""
    },
    {
        "number": 4519,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get number of test cases\n    q = int(stdin.readline().strip())\n    \n    # Iterate over each test case\n    for i in range(q):\n        # Get length of string and number of moves\n        n, k = map(int, stdin.readline().strip().split())\n        \n        # Get string\n        s = stdin.readline().strip()\n        \n        # Initialize minimum string and list of indices to swap\n        min_s = s\n        indices = [(i, i+1) for i in range(n-1)]\n        \n        # Perform swaps\n        for j in range(k):\n            # Calculate number of swaps to perform\n            num_swaps = min(len(indices), k-j)\n            \n            # Choose swaps randomly\n            swaps = random.sample(indices, num_swaps)\n            \n            # Perform swaps\n            for i, j in swaps:\n                s = swap(s, i, j)\n            \n            # Update minimum string and list of indices to swap\n            min_s = min(min_s, s)\n            indices = [(i, j) for i, j in indices if i!= j]\n        \n        # Print minimum string\n        print(min_s)\n\ndef"
    },
    {
        "number": 4519,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        n, k = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        ans = s\n        for j in range(k):\n            for i in range(n-1):\n                if s[i] > s[i+1]:\n                    ans = min(ans, s[:i]+s[i+1]+s[i]+s[i+2:], key=lambda x: int(x, 2))\n                    ans = min(ans, s[:i+1]+s[i]+s[i+2]+s[i+1]+s[i+3:], key=lambda x: int(x, 2))\n                elif s[i] < s[i+1]:\n                    ans = min(ans, s[:i]+s[i+1]+s[i]+s[i+2:], key=lambda x: int(x, 2))\n                    ans = min(ans, s[:i+1]+s[i+1]+s[i]+s[i+2]+s[i+3:], key=lambda x: int(x, 2))\n        print(ans)"
    },
    {
        "number": 4519,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def lex_min(n: int) -> str:\n        return ''.join(['0' if i % 2 == 0 else '1' for i in range(n)])\n\n    def next_permutation(s: str) -> str:\n        n = len(s)\n        i = n - 2\n        while i >= 0 and s[i] >= s[i+1]:\n            i -= 1\n        if i == -1:\n            return ''\n        j = n - 1\n        while s[j] <= s[i]:\n            j -= 1\n        s[i], s[j] = s[j], s[i]\n        s[i+1:] = sorted(s[i+1:])\n        return ''.join(s)\n\n    def get_ops(s: str, t: str) -> int:\n        n = len(s)\n        ops = 0\n        for i in range(n):\n            if s[i]!= t[i]:\n                ops += 1\n        return ops\n\n    def swap(s: str, i: int, j: int) -> str:\n        s = list(s)\n        s[i], s[j] = s[j], s[i]\n        return ''.join(s)\n\n    def min_string(s: str, k: int) -> str:\n        n = len(s)\n        if k >= n:\n            return lex_min(n)\n        ops = get_ops(s, s)\n        for _ in range(k):\n            p = next_permutation(s)\n            if not p:\n                break\n            if get_ops(s, p) < ops:\n                s = p\n                ops = get_ops(s, p)\n        return s\n\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        n, k = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        print(min_string(s, k))"
    },
    {
        "number": 4519,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    string = stdin.readline().strip()\n    \n    if k == 0 or n == 1:\n        return string\n    \n    # make adjacent swaps\n    for i in range(n - 1):\n        if k == 0:\n            break\n        if string[i]!= string[i+1]:\n            # swap adjacent characters\n            string = string[:i] + string[i+1] + string[i] + string[i+2:]\n            # decrement move count\n            k -= 1\n    \n    # sort the string\n    string = ''.join(sorted(string))\n    \n    return string"
    },
    {
        "number": 4519,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        n, k = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        for j in range(k):\n            s = min(s[:-1] + s[-1], s[1:] + s[0])\n        print(s)"
    },
    {
        "number": 4519,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        n, k = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        \n        # Initialize variables\n        swaps = 0\n        ans = s\n        \n        # Check each move possibility\n        for i in range(n-1):\n            # Check if swapping adjacent characters is allowed\n            if k-swaps > n-i-2:\n                break\n            \n            # Update answer and count swaps\n            if s[i] > s[i+1]:\n                ans = ans[:i] + s[i+1] + s[i] + ans[i+2:]\n                swaps += 1\n        \n        # Print answer\n        print(ans)\n"
    },
    {
        "number": 4520,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n\n    count = 0\n    bad = []\n    for i in range(1, n):\n        l, r = segments[i]\n        for j in range(i):\n            if segments[j][0] <= r <= segments[j][1]:\n                count += 1\n        if count > k:\n            bad.append(i)\n        count = 0\n\n    if len(bad) == n:\n        return \"0\\n\"\n\n    print(len(bad))\n    print(*bad)"
    },
    {
        "number": 4520,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    segments = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n\n    # count the number of segments covering each integer point\n    points_count = [0] * (200 + 1)\n    for l, r in segments:\n        for i in range(l, r+1):\n            points_count[i] += 1\n\n    # find the bad points\n    bad_points = [i for i in range(1, 201) if points_count[i] > k]\n\n    # find the segments that cover the bad points\n    bad_segments = set()\n    for i, (l, r) in enumerate(segments):\n        for j in range(l, r+1):\n            if j in bad_points:\n                bad_segments.add(i)\n\n    # find the minimum number of segments to remove\n    m = n - len(bad_segments)\n    if m < 0:\n        return \"Impossible\\n\"\n\n    # print the minimum number of segments to remove and the indices of segments to remove\n    indices = list(bad_segments) + sorted(set(range(n)) - bad_segments)\n    print(m)\n    print(\" \".join(map(str, indices)))"
    },
    {
        "number": 4520,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    segments = [list(map(int, stdin.split())) for _ in range(n)]\n    segments.sort()\n    # dp[i] - minimum number of segments to cover i-th bad point\n    dp = [0] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            # count intersection points\n            cnt = 0\n            for l, r in segments:\n                if max(l, segments[i][0]) <= min(r, segments[j][0]) <= max(l, segments[i][1]) or \\\n                   max(l, segments[j][0]) <= min(r, segments[i][0]) <= max(l, segments[j][1]):\n                    cnt += 1\n            if cnt > k:\n                dp[i] += 1\n                dp[j] += 1\n    # find minimum dp value\n    ans = float('inf')\n    for i in range(n):\n        ans = min(ans, dp[i])\n    # find bad points\n    bad_points = []\n    for i in range(n):\n        cnt = 0\n        for j in range(n):\n            if i!= j:\n                if segments[i][0] <= segments[j][0] <= segments[i][1] or \\\n                   segments[i][0] <= segments[j][1] <= segments[i][1]:\n                    cnt += 1\n        if cnt > k:\n            bad_points.append(i)\n    # find segments to remove\n    segments_to_remove = []\n    for i in range(n):\n        if dp[i] == ans and i not in segments_to_remove:\n            segments_to_remove.append(i)\n    # print result\n    print(ans)\n    print(' '.join(map(str, segments_to_remove)))"
    },
    {
        "number": 4520,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.readline().strip().split()))\n    segments = []\n    for i in range(n):\n        l, r = list(map(int, stdin.readline().strip().split()))\n        segments.append((l, r))\n    \n    segments = sorted(segments)\n    \n    bad_points = []\n    for i in range(k+1, n+1):\n        count = 0\n        j = 0\n        while j < len(segments):\n            if segments[j][1] < i:\n                segments.pop(j)\n            elif segments[j][0] <= i <= segments[j][1]:\n                count += 1\n                j += 1\n            else:\n                break\n        if count > k:\n            bad_points.append(i)\n    \n    if not bad_points:\n        return \"0\\n\"\n    \n    result = [i for i in range(n) if segments[i][1] not in bad_points]\n    m = len(result)\n    return f\"{m}\\n{' '.join(str(i+1) for i in result)}\""
    },
    {
        "number": 4520,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n\n    bad_points = set()\n    for i in range(1, n+1):\n        count = 0\n        for l, r in segments:\n            if l <= i <= r:\n                count += 1\n        if count > k:\n            bad_points.add(i)\n\n    if not bad_points:\n        return \"0\\n\"\n\n    max_length = 0\n    for i in range(n):\n        if i not in bad_points:\n            length = segments[i][1] - segments[i][0] + 1\n            if length > max_length:\n                max_length = length\n\n    result = [i for i in range(n) if i not in bad_points]\n    result.sort()\n    return f\"{max_length}\\n{result[0]} {result[1]} {result[2]}\\n\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    segments = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    \n    segments.sort()\n    left = segments[0][0]\n    right = segments[-1][1]\n    \n    bad_points = set()\n    for i in range(left, right+1):\n        count = sum(1 for l, r in segments if l <= i <= r)\n        if count > k:\n            bad_points.add(i)\n    \n    m = len(bad_points)\n    if m == 0:\n        print(0)\n        return \"\"\n    \n    print(m)\n    \n    indices = [i for i, (l, r) in enumerate(segments) if any(l <= i <= r for i in bad_points)]\n    print(*indices)"
    },
    {
        "number": 4520,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    dp = [1] * n\n    ans = []\n    for i in range(n):\n        for j in range(i):\n            if segments[i][0] < segments[j][1] < segments[i][1]:\n                dp[i] = max(dp[i], dp[j] + 1)\n        if dp[i] > k:\n            ans.append(i + 1)\n    if len(ans) == 0:\n        return \"0\\n\"\n    ans = list(set(ans))\n    m = len(ans)\n    return f\"{m}\\n\" + \" \".join(map(str, ans)) + \"\\n\""
    },
    {
        "number": 4520,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n    segments.sort()\n    \n    count = 0\n    max_count = 0\n    ans = []\n    \n    for i in range(n):\n        left, right = segments[i]\n        if right - left + 1 > max_count:\n            count = 1\n            max_count = right - left + 1\n            ans = [i]\n        elif right - left + 1 == max_count:\n            count += 1\n            ans.append(i)\n    \n    return str(count) + \"\\n\" + \" \".join(map(str, ans)) + \"\\n\""
    },
    {
        "number": 4520,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n    segments.sort()\n    count = 0\n    for i in range(len(segments)):\n        if segments[i][1] - segments[i][0] > k:\n            count += 1\n    print(count)\n    res = []\n    i = 0\n    while i < len(segments):\n        if segments[i][1] - segments[i][0] > k:\n            res.append(i + 1)\n            i += 1\n        else:\n            i += 1\n    print(' '.join(map(str, res)))\n    return ''"
    },
    {
        "number": 4520,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.readline().strip().split()))\n    segments = []\n    for i in range(n):\n        l, r = list(map(int, stdin.readline().strip().split()))\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[0])\n    ans = n\n    used = [False] * n\n    for i in range(n):\n        if not used[i]:\n            continue\n        j = i + 1\n        while j < n and segments[i][1] >= segments[j][0]:\n            used[j] = True\n            j += 1\n        ans -= 1\n    return str(ans) + '\\n' +''.join([str(i+1) for i in range(n) if not used[i]])\n"
    },
    {
        "number": 4521,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    xs = list(map(int, stdin.readline().strip().split()))\n    vs = list(map(int, stdin.readline().strip().split()))\n\n    dp = [[0]*n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i+1, n):\n            dp[i][j] = abs(xs[i] - xs[j]) + abs(vs[i] - vs[j])\n            dp[j][i] = dp[i][j]\n\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            ans += dp[i][j]\n\n    return str(ans)\n\nprint(solution(\"3\\n1 3 2\\n-100 2 3\")) # Output: 3\nprint(solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\")) # Output: 19\nprint(solution(\"2\\n2 1\\n-3 0\")) # Output: 0"
    },
    {
        "number": 4521,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    xs = list(map(int, stdin.readline().strip().split()))\n    vs = list(map(int, stdin.readline().strip().split()))\n\n    dp = [[float('inf')] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 0\n        for j in range(i + 1, n):\n            dp[i][j] = abs(xs[i] - xs[j]) + abs(vs[i] - vs[j])\n            for k in range(i + 1, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j])\n\n    return sum(dp[i][j] for i in range(n) for j in range(i + 1, n))\n"
    },
    {
        "number": 4521,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    x = list(map(int, stdin.split('\\n')[1].split()))\n    v = list(map(int, stdin.split('\\n')[2].split()))\n\n    d = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i+1, n):\n            d[i][j] = d[j][i] = abs(x[i] - x[j]) / max(1, abs(v[i] - v[j]))\n\n    return sum(min(d[i][j], d[j][i]) for i in range(n) for j in range(i+1, n))\n"
    },
    {
        "number": 4521,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = list(map(int, stdin.split()))\n    speeds = list(map(int, stdin.split()))\n    distances = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            distances[i][j] = abs(points[i] + speeds[i] * i - points[j] - speeds[j] * j)\n            distances[j][i] = distances[i][j]\n    return sum(min(distances[i][j] for j in range(n) if j!= i) for i in range(n))"
    },
    {
        "number": 4521,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:1+n]))\n    v = list(map(int, stdin.split()[1+n:1+2*n]))\n    d = [[float('inf')] * n for _ in range(n)]\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if i!= j:\n                    d[i][j] = min(d[i][j], abs(x[i] + k*v[i] - x[j] - k*v[j]))\n    return sum(min(d[i][j], d[j][i]) for i in range(n) for j in range(i+1, n))"
    },
    {
        "number": 4521,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    v = list(map(int, stdin.readline().strip().split()))\n    dp = [[float('inf')] * n for _ in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            dp[i][j] = abs(x[i] + v[i] * t - x[j])\n            dp[j][i] = dp[i][j]\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j])\n    for i in range(n):\n        for j in range(i+1, n):\n            ans += dp[i][j]\n    return str(ans)"
    },
    {
        "number": 4521,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    xs = list(map(int, stdin.readline().split()))\n    vs = list(map(int, stdin.readline().split()))\n\n    distances = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            t = (xs[i] - xs[j]) / (vs[i] - vs[j])\n            if t <= 0:\n                distances.append(0)\n            else:\n                distances.append(t * (vs[i] + vs[j]) / 2)\n\n    return sum(distances)\n\n\ndef"
    },
    {
        "number": 4521,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = [int(x) for x in stdin.readline().strip().split()]\n    v = [int(v) for v in stdin.readline().strip().split()]\n\n    dp = [[float('inf') for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 0\n\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            dp[i][j] = abs(x[i] - x[j])\n            for k in range(i, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j])\n\n    return str(sum(dp[i][j] for i in range(n) for j in range(i+1, n)))\n\ndef"
    },
    {
        "number": 4521,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    xs = list(map(int, stdin.readline().strip().split()))\n    vs = list(map(int, stdin.readline().strip().split()))\n\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[i][j] = abs(xs[j] - xs[i])\n            dp[j][i] = dp[i][j]\n\n    for k in range(n):\n        for i in range(n):\n            for j in range(i + 1, n):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j])\n\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            res += dp[i][j]\n\n    return str(res)"
    },
    {
        "number": 4521,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    xs = list(map(int, stdin.readline().split()))\n    vs = list(map(int, stdin.readline().split()))\n\n    dists = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            dists[i][j] = abs(xs[j] - xs[i]) + abs(vs[j] - vs[i]) * (j - i)\n            dists[j][i] = dists[i][j]\n\n    return sum(min(dists[i][j] for j in range(n) if j!= i) for i in range(n))\n\nprint(solution('''3\n1 3 2\n-100 2 3''')) # Output: 3\n\nprint(solution('''5\n2 1 4 3 5\n2 2 2 3 4''')) # Output: 19\n\nprint(solution('''2\n2 1\n-3 0''')) # Output: 0"
    },
    {
        "number": 4522,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.readline().split())\n    edges = []\n    for _ in range(n-1):\n        u, v, w = map(int, stdin.readline().split())\n        edges.append((u, v, w))\n    queries = list(map(int, stdin.readline().split()))\n    # build tree\n    parent = [-1] * n\n    rank = [0] * n\n    def find(x):\n        if parent[x] == -1:\n            return x\n        parent[x] = find(parent[x])\n        return parent[x]\n    def union(x, y):\n        x = find(x)\n        y = find(y)\n        if x == y:\n            return False\n        if rank[x] < rank[y]:\n            parent[x] = y\n        elif rank[x] > rank[y]:\n            parent[y] = x\n        else:\n            parent[y] = x\n            rank[x] += 1\n        return True\n    for u, v, w in edges:\n        union(u-1, v-1)\n    # count pairs\n    ans = []\n    for q in queries:\n        count = 0\n        for u in range(n):\n            for v in range(u+1, n):\n                if union(u, v) and max(w for u, v, w in edges if u == v or find(u) == find(v)) > q:\n                    count += 1\n        ans.append(count)\n    return''.join(map(str, ans))"
    },
    {
        "number": 4522,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.readline().strip().split())\n    edges = []\n    for _ in range(n - 1):\n        u, v, w = map(int, stdin.readline().strip().split())\n        edges.append((u, v, w))\n    queries = list(map(int, stdin.readline().strip().split()))\n\n    # Build the tree\n    tree = [[] for _ in range(n + 1)]\n    for u, v, w in edges:\n        tree[u].append((v, w))\n        tree[v].append((u, w))\n\n    # Calculate the answers\n    result = []\n    for q in queries:\n        count = 0\n        for u in range(1, n + 1):\n            for v in range(u + 1, n + 1):\n                seen = set()\n                stack = [(u, 0)]\n                while stack:\n                    x, d = stack.pop()\n                    if x == v:\n                        if d <= q:\n                            count += 1\n                            break\n                        else:\n                            continue\n                    seen.add(x)\n                    for y, w in tree[x]:\n                        if y not in seen:\n                            stack.append((y, d + w))\n        result.append(count)\n\n    # Print the result\n    return''.join(map(str, result))\n\n\ndef"
    },
    {
        "number": 4522,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    edges = [list(map(int, stdin.split()[0:3])) for _ in range(n-1)]\n    queries = [int(x) for x in stdin.split()[2:]]\n\n    # build graph\n    graph = [[] for _ in range(n+1)]\n    for u, v, w in edges:\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n\n    # dp table\n    dp = [[0]*(m+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for v, w in graph[i]:\n                if w <= j:\n                    dp[i][j] = max(dp[i][j], dp[v][j-w]+1)\n\n    # count pairs\n    ans = []\n    for q in queries:\n        count = 0\n        for i in range(1, n):\n            for j in range(i+1, n+1):\n                if dp[i][q] + dp[j][q-dp[i][q]] > 0:\n                    count += 1\n        ans.append(count)\n\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4522,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    edges = []\n    for _ in range(n - 1):\n        u, v, w = map(int, stdin.readline().split())\n        edges.append((u, v, w))\n    queries = list(map(int, stdin.readline().split()))\n    # build graph\n    graph = [[] for _ in range(n + 1)]\n    for u, v, w in edges:\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    # dp\n    dp = [[float('inf')] * (n + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][i] = 0\n    for k in range(1, n + 1):\n        for i in range(1, n - k + 2):\n            j = i + k - 1\n            for u, w in graph[i]:\n                if u > j:\n                    break\n                dp[i][j] = min(dp[i][j], dp[i][u] + dp[u][j])\n    # count pairs\n    ans = []\n    for q in queries:\n        count = 0\n        for i in range(1, n + 1):\n            for j in range(i + 1, n + 1):\n                if dp[i][j] <= q:\n                    count += 1\n        ans.append(count)\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4522,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    tree = [[] for _ in range(n + 1)]\n    for i in range(n - 1):\n        u, v, w = map(int, stdin.readline().split())\n        tree[u].append((v, w))\n        tree[v].append((u, w))\n    queries = list(map(int, stdin.readline().split()))\n    answer = []\n    for q in queries:\n        cnt = 0\n        for u in range(1, n + 1):\n            for v in range(u + 1, n + 1):\n                if all(w <= q for u, w in tree[u] for v, w in tree[v]):\n                    cnt += 1\n        answer.append(cnt)\n    return \" \".join(map(str, answer))"
    },
    {
        "number": 4522,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing input\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(n-1):\n        u, v, w = map(int, stdin.split())\n        edges.append((u, v, w))\n    queries = list(map(int, stdin.split()))\n\n    # Building a tree\n    tree = {i: [] for i in range(1, n+1)}\n    for u, v, w in edges:\n        tree[u].append((v, w))\n        tree[v].append((u, w))\n\n    # Calculate max weights\n    max_weights = [0] * n\n    visited = [False] * n\n    def dfs(u, p, w):\n        max_weights[u-1] = max(max_weights[u-1], w)\n        visited[u-1] = True\n        for v, edge_w in tree[u]:\n            if v!= p and edge_w < queries[0]:\n                dfs(v, u, w + edge_w)\n\n    dfs(1, 0, 0)\n\n    # Counting pairs\n    pairs = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if max_weights[i] + max_weights[j] <= queries[0]:\n                pairs += 1\n\n    # Answering queries\n    result = []\n    for q in queries[1:]:\n        pairs = 0\n        for i in range(n-1):\n            for j in range(i+1, n):\n                if max_weights[i] + max_weights[j] <= q:\n                    pairs += 1\n        result.append(pairs)\n\n    return''.join(map(str, result))\n"
    },
    {
        "number": 4522,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    edges = []\n    for _ in range(n-1):\n        u, v, w = map(int, stdin.readline().split())\n        edges.append((u, v, w))\n    edges.sort(key=lambda x: x[2], reverse=True)\n    parents = [-1] * n\n    ans = []\n    for _ in range(m):\n        q = int(stdin.readline())\n        cnt = 0\n        for u, v, w in edges:\n            if w > q:\n                break\n            if find(parents, u)!= find(parents, v):\n                union(parents, u, v)\n                cnt += 1\n        ans.append(cnt)\n    return \" \".join(map(str, ans))\n\ndef"
    },
    {
        "number": 4522,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:-1]]\n    queries = list(map(int, stdin.split('\\n')[-1].split()))\n    graph = {i: [] for i in range(1, n+1)}\n    for u, v, w in edges:\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    dp = [0] * (n+1)\n    ans = []\n    for query in queries:\n        for i in range(1, n+1):\n            for j in range(1, n+1):\n                if i > j:\n                    continue\n                dp[i] = max(dp[i], dp[j] + graph[j][0][1])\n                dp[j] = max(dp[j], dp[i] + graph[i][0][1])\n        count = 0\n        for i in range(1, n+1):\n            for j in range(1, n+1):\n                if i > j:\n                    continue\n                if dp[j] - dp[i] <= query:\n                    count += 1\n        ans.append(count)\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4522,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [list(map(int, line.split())) for line in stdin.readlines()[n:]]\n    ans = []\n    for query in stdin.split()[-m:]:\n        query = int(query)\n        cnt = 0\n        for u in range(1, n+1):\n            for v in range(u+1, n+1):\n                if max(w for u, v, w in edges if u in [u, v] and v in [u, v]) <= query:\n                    cnt += 1\n        ans.append(cnt)\n    return''.join(map(str, ans))"
    },
    {
        "number": 4522,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, stdin.split())) for i in range(n - 1)]\n    queries = list(map(int, stdin.split()))\n\n    # Build tree\n    tree = [[] for i in range(n)]\n    for u, v, w in edges:\n        tree[u - 1].append((v - 1, w))\n        tree[v - 1].append((u - 1, w))\n\n    # Count pairs\n    counts = [0] * m\n    for q in queries:\n        visited = [False] * n\n        stack = [(0, -1, 0)]\n        while stack:\n            u, parent, weight = stack.pop()\n            if weight <= q:\n                counts[queries.index(q)] += 1\n            for v, w in tree[u]:\n                if v!= parent and not visited[v]:\n                    stack.append((v, u, weight + w))\n                    visited[v] = True\n\n    # Return counts\n    return''.join(map(str, counts))\n"
    },
    {
        "number": 4523,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i*2-1])\n        a = list(map(int, lines[i*2].split()))\n        for j in range(n-1):\n            for k in range(j+1, n):\n                if abs(a[j]-a[k]) <= 1:\n                    if a[j] > a[k]:\n                        a.pop(k)\n                    else:\n                        a.pop(j)\n                    break\n        if len(a) == 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4523,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split()[0])\n\n    for t in range(test_cases):\n        n = int(stdin.split()[0])\n        a = list(map(int, stdin.split()[1:]))\n\n        if a.count(max(a)) > 1:\n            print(\"NO\")\n            continue\n\n        for i in range(n-1):\n            for j in range(i+1, n):\n                if abs(a[i] - a[j]) > 1:\n                    continue\n                a[min(i, j)] = max(a[min(i, j)], a[max(i, j)])\n                del a[max(i, j)]\n\n        if len(a)!= 1:\n            print(\"NO\")\n        else:\n            print(\"YES\")"
    },
    {
        "number": 4523,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    for i in range(1, t*4, 4):\n        n = int(lines[i])\n        a = list(map(int, lines[i+1].split()))\n        # check if it is possible to obtain the array consisting of only one element using several (possibly, zero) moves\n        if max(a) - min(a) <= 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4523,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        # check if there is a solution\n        if n == 1:\n            print(\"YES\")\n            continue\n        # check if all elements are the same\n        if len(set(a)) == 1:\n            print(\"YES\")\n            continue\n        # check if the array is already reduced to 1 element\n        if all(abs(a[i] - a[j]) <= 1 for i in range(n) for j in range(i+1, n)):\n            print(\"YES\")\n            continue\n        # check if we can reduce the array to 1 element by performing multiple moves\n        if sum(abs(a[i] - a[j]) > 1 for i in range(n) for j in range(i+1, n)) == 0:\n            print(\"NO\")\n            continue\n        # check if we can reduce the array to 1 element by performing a single move\n        for i in range(n):\n            for j in range(i+1, n):\n                if abs(a[i] - a[j]) > 1:\n                    continue\n                a.remove(min(a[i], a[j]))\n                if len(set(a)) == 1:\n                    print(\"YES\")\n                    break\n            else:\n                continue\n            break\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 4523,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def remove_min_two(a):\n        min_1 = min_2 = float('inf')\n        idx_1 = idx_2 = None\n        for i in range(len(a)):\n            if a[i] < min_1:\n                min_2 = min_1\n                min_1 = a[i]\n                idx_2 = idx_1\n                idx_1 = i\n            elif a[i] < min_2:\n                min_2 = a[i]\n                idx_2 = i\n        return a[:idx_1] + a[idx_2+1:]\n\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        for i in range(100):\n            a = remove_min_two(a)\n            if len(a) == 1:\n                return \"YES\"\n        return \"NO\""
    },
    {
        "number": 4523,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    test_cases = int(lines[0])\n    results = []\n    for i in range(1, test_cases+1):\n        n = int(lines[i*2-1])\n        a = list(map(int, lines[i*2].split()))\n        if len(set(a)) == 1:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    return \"\\n\".join(results)"
    },
    {
        "number": 4523,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n    \"\"\"\n    # Read the input\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    lines = lines[1:]\n\n    # Iterate over each test case\n    for i in range(t):\n        n = int(lines[0])\n        a = list(map(int, lines[1].split()))\n        lines = lines[2:]\n\n        # Initialize variables\n        count = 0\n        while len(a) > 1:\n            # Find the smallest two elements and their indices\n            min_index = 0\n            for j in range(1, len(a)):\n                if a[j] < a[min_index]:\n                    min_index = j\n            # Check if the absolute difference is no more than one\n            if abs(a[min_index] - a[min_index-1]) > 1:\n                return \"NO\"\n            # Remove the smallest of the two elements\n            a.pop(min_index)\n            # Increment the count\n            count += 1\n\n        # Check if we can obtain the array consisting of only one element\n        if len(a) == 1:\n            return \"YES\"\n\n    # If we have iterated over all the test cases, return \"NO\"\n    return \"NO\""
    },
    {
        "number": 4523,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for t in range(int(stdin.readline())):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        \n        if len(set(a)) == 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n    return \"\""
    },
    {
        "number": 4523,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        if n == 1:\n            print(\"YES\")\n            continue\n        a.sort()\n        if a[0] == a[1] and a[1] == a[2]:\n            print(\"YES\")\n            continue\n        if n == 2 and a[0] == a[1]:\n            print(\"YES\")\n            continue\n        print(\"NO\")\n\nstdin = '''\n5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n'''\n\nsolution(stdin)"
    },
    {
        "number": 4523,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.splitlines()[0].split())\n    if len(set(a)) == 1:\n        return \"YES\"\n    a.sort()\n    for i in range(n):\n        if i == n-1 or a[i+1] > a[i]+1:\n            return \"NO\"\n    return \"YES\"\n\nprint(solution(\"5\\n3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\"))"
    },
    {
        "number": 4524,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = int(stdin.split()[1])\n    b = int(stdin.split()[2])\n    ans = 0\n    while b > 0:\n        ans += a & b\n        b //= 2\n        b *= 2\n    return str(ans % 998244353)"
    },
    {
        "number": 4524,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.splitlines()[0].split())\n    a = int(stdin.splitlines()[1])\n    b = int(stdin.splitlines()[2])\n\n    # Perform bitwise AND and division operations\n    while b > 0:\n        a &= b\n        b >>= 1\n\n    # Convert result to decimal notation\n    a = str(a)\n    return str(int(a, 2)) % 998244353"
    },
    {
        "number": 4524,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = int(stdin.split()[1])\n    b = int(stdin.split()[2])\n\n    ans = 0\n    while b > 0:\n        ans += a & b\n        b //= 2\n        a //= 10\n\n    ans %= 998244353\n    return str(ans)"
    },
    {
        "number": 4524,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.splitlines()[0].split())\n    a = int(stdin.splitlines()[1], 2)\n    b = int(stdin.splitlines()[2], 2)\n    ans = 0\n    while b > 0:\n        ans = (ans + a & b) % 998244353\n        b = b >> 1\n        a = a >> 1\n    return str(ans)"
    },
    {
        "number": 4524,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.readline().strip().split())\n    a = int(stdin.readline().strip(), 2)\n    b = int(stdin.readline().strip(), 2)\n    # apply bitwise AND and shift b to the right until it becomes 0\n    ans = 0\n    while b > 0:\n        ans += a & b\n        b >>= 1\n    # print answer in decimal notation modulo 998244353\n    return str((ans % 998244353 + 998244353) % 998244353)\n"
    },
    {
        "number": 4524,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.readline().strip().split())\n    a = int(stdin.readline().strip(), 2)\n    b = int(stdin.readline().strip(), 2)\n\n    # repeat process\n    while b > 0:\n        a &= b\n        b >>= 1\n\n    # calculate answer\n    answer = a % 998244353\n\n    return str(answer)\n"
    },
    {
        "number": 4524,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = int(stdin.split()[2])\n    b = int(stdin.split()[3])\n\n    ans = 0\n    while b > 0:\n        ans = (ans + (a & b)) % 998244353\n        b = b >> 1\n        a = a >> 1\n\n    return str(ans)\n\nprint(solution(\"4 4\\n1010\\n1101\")) # Output: 12\nprint(solution(\"4 5\\n1001\\n10101\")) # Output: 11"
    },
    {
        "number": 4524,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    answer = 0\n    while b > 0:\n        answer += a & b\n        b >>= 1\n        a >>= 1\n    answer %= 998244353\n    return str(answer)"
    },
    {
        "number": 4524,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    a = int(stdin.readline().strip(), 2)\n    b = int(stdin.readline().strip(), 2)\n    ans = 0\n    while b > 0:\n        ans += a & b\n        b //= 2\n        b *= 2\n    ans %= 998244353\n    return str(ans)"
    },
    {
        "number": 4524,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.split()[:2])\n    a = int(stdin.split()[2])\n    b = int(stdin.split()[3])\n\n    # repeat process until b becomes zero\n    ans = 0\n    while b > 0:\n        # add to answer\n        ans += a & b\n        # divide b by 2 and remove last digit\n        b //= 2\n        b &= ~(1 << (m - 1))\n\n    # calculate modulo\n    ans %= 998244353\n\n    return str(ans)"
    },
    {
        "number": 4525,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        if n % 2!= 0:\n            print(\"NO\")\n            continue\n        a = [2] * (n // 2) + [1] * (n // 2)\n        if sum(a[:n // 2])!= sum(a[n // 2:]):\n            print(\"NO\")\n            continue\n        print(\"YES\")\n        print(*a)\n\ndef"
    },
    {
        "number": 4525,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4525,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        # check if n is even\n        if n % 2!= 0:\n            return \"NO\"\n        # create array a of length n with first half even, second half odd\n        a = [2 * i + 1 for i in range(n // 2)] + [2 * i + 2 for i in range(n // 2)]\n        # check if all elements are distinct and positive\n        if len(set(a))!= n or any(x <= 0 for x in a):\n            return \"NO\"\n        # check if sum of first half equals sum of second half\n        if sum(a[:n // 2])!= sum(a[n // 2:]):\n            return \"NO\"\n        # print \"YES\" and array a if all conditions are satisfied\n        print(\"YES\")\n        print(\" \".join(map(str, a)))"
    },
    {
        "number": 4525,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [i for i in range(1, n+1)]\n    if n % 2 == 0:\n        a[:n//2] = [2*i for i in range(n//2)]\n        a[n//2:] = [2*i+1 for i in range(n//2)]\n        if sum(a[:n//2]) == sum(a[n//2:]):\n            return \"YES\\n\" + \" \".join(map(str, a))\n        else:\n            return \"NO\\n\"\n    else:\n        return \"NO\\n\""
    },
    {
        "number": 4525,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip().split('\\n')[0])\n    for i in range(t):\n        n = int(stdin.strip().split('\\n')[i+1])\n        if n % 2 == 0:\n            a = [2]*(n//2) + [1]*(n//2)\n            half1 = sum(a[:n//2])\n            half2 = sum(a[n//2:])\n            if half1 == half2:\n                print('YES')\n                print(*a)\n            else:\n                print('NO')\n        else:\n            print('NO')\n    return'success'\n\ndef"
    },
    {
        "number": 4525,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Function to solve the problem\n\n    Args:\n        stdin (str): input string containing test cases separated by new line\n\n    Returns:\n        str: output string containing \"YES\" or \"NO\" for each test case\n    \"\"\"\n    cases = stdin.splitlines()\n    for i in range(len(cases)):\n        n = int(cases[i])\n        if n % 2 == 0:\n            half = n // 2\n            even = [2 * j for j in range(half)]\n            odd = [2 * j + 1 for j in range(half)]\n            if sum(even) == sum(odd):\n                print(\"YES\")\n                print(\" \".join([str(x) for x in even + odd]))\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2!= 0:\n        return \"NO\"\n    a = [i for i in range(1, n + 1)]\n    a[::2] = [2 * i for i in range(1, n // 2 + 1)]\n    a[1::2] = [2 * i - 1 for i in range(1, n // 2 + 1)]\n    if sum(a[:n // 2]) == sum(a[n // 2:]):\n        return \"YES\\n\" + \" \".join(str(i) for i in a)\n    else:\n        return \"NO\""
    },
    {
        "number": 4525,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        if n % 2 == 1:\n            return \"NO\"\n        else:\n            a = [i for i in range(1, n + 1)]\n            half = n // 2\n            a[:half] = sorted(a[:half], key=lambda x: x % 2)\n            a[half:] = sorted(a[half:], key=lambda x: x % 2)\n            if sum(a[:half]) == sum(a[half:]):\n                return \"YES\\n\" + \" \".join(map(str, a))\n            else:\n                return \"NO\""
    },
    {
        "number": 4525,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        # Check if n is even\n        if n % 2!= 0:\n            return \"NO\"\n        # Construct array\n        a = []\n        for i in range(n//2):\n            a.append(2*i+1)\n            a.append(2*i+2)\n        # Check if elements are distinct and positive\n        if len(set(a))!= n:\n            return \"NO\"\n        # Check if sum of first half is equal to sum of second half\n        if sum(a[:n//2])!= sum(a[n//2:]):\n            return \"NO\"\n        # Print array\n        print(\"YES\")\n        print(*a)\n    return \"NO\""
    },
    {
        "number": 4525,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n % 2!= 0:\n        return \"NO\"\n    a = [i for i in range(1, n+1)]\n    a[:n//2] = sorted([i for i in a[:n//2] if i % 2 == 0])\n    a[n//2:] = sorted([i for i in a[n//2:] if i % 2!= 0])\n    if sum(a[:n//2])!= sum(a[n//2:]):\n        return \"NO\"\n    return \"YES\\n\" +''.join(str(i) for i in a)"
    },
    {
        "number": 4526,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.strip().split('\\n')\n    output = ''\n    for case in cases:\n        n = int(case.split('\\n')[0])\n        a = list(map(int, case.split('\\n')[1].split()))\n        count = 0\n        for i in range(n):\n            if i == 0:\n                if a[i] == 1:\n                    count += 1\n            else:\n                if a[i] == a[i-1]+1:\n                    count += 1\n        output += f'{count}\\n'\n    return output"
    },
    {
        "number": 4526,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        count = 0\n        for i in range(n-1):\n            if a[i] == a[i+1] or a[i] + a[i+1] == n:\n                count += 1\n        print(count)\n    return \"\""
    },
    {
        "number": 4526,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin.split()[0])):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        count = 0\n        for i in range(n):\n            if i == 0:\n                if a[i] == a[i+1]:\n                    count += 1\n            elif i == n-1:\n                if a[i] == a[i-1]:\n                    count += 1\n            else:\n                if a[i] == a[i-1] + a[i+1]:\n                    count += 1\n        print(count)"
    },
    {
        "number": 4526,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    n_cases = int(inputs[0])\n\n    for i in range(1, n_cases+1):\n        n = int(inputs[i*2-1])\n        a = list(map(int, inputs[i*2].split()))\n\n        special = 0\n        for j in range(n):\n            if j == 0:\n                special += 1\n            elif a[j]!= a[j-1] + 1:\n                special += 1\n\n        print(special)\n\n    return ''"
    },
    {
        "number": 4526,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        count = 0\n        for j in range(n):\n            if j == 0:\n                if a[j] == 1:\n                    count += 1\n            else:\n                if a[j] == a[j-1] + 1:\n                    count += 1\n        print(count)\n    return \"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        special_count = 0\n        for i in range(n):\n            if i == 0:\n                continue\n            if i == 1 and a[0] == 1:\n                continue\n            if a[i] == a[i-1] + a[i-2]:\n                special_count += 1\n        print(special_count)\n    return \"\"\n\nstdin = \"\"\"5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\"\"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4526,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        count = 0\n        for j in range(n):\n            if j < n-2 and a[j] == a[j+1] + a[j+2]:\n                count += 1\n                continue\n            if j < n-3 and a[j] == a[j+1] + a[j+2] + a[j+3]:\n                count += 1\n                continue\n            for k in range(j+4, n):\n                if a[j] == sum(a[j:k+1]):\n                    count += 1\n                    break\n        print(count)\n    return ''"
    },
    {
        "number": 4526,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.strip().split(\"\\n\")\n    n = int(input_lines[0])\n    nums = list(map(int, input_lines[1].split()))\n    special = 0\n    for i in range(n):\n        for j in range(i+2, n):\n            if sum(nums[i:j]) == nums[i] and nums[i]!= nums[j-1]:\n                special += 1\n    return str(special)"
    },
    {
        "number": 4526,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n_cases = int(lines[0])\n    results = []\n    for i in range(1, n_cases+1):\n        n = int(lines[i*2-1])\n        a = list(map(int, lines[i*2].split()))\n        count = 0\n        for j in range(1, n):\n            if j == 1:\n                if a[j] == 1:\n                    count += 1\n            else:\n                if a[j] == a[j-1] + 1:\n                    count += 1\n        results.append(count)\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4526,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        count = 0\n        for i in range(n):\n            if i == 0 or a[i]!= a[i-1]:\n                left = i\n                while left < n and a[left] == a[i]:\n                    left += 1\n                right = left - 1\n                while right > i and a[right] == a[i]:\n                    right -= 1\n                if left - i > 1:\n                    count += left - i - 1\n                if right - i > 1:\n                    count += right - i - 1\n        print(count)\n    return \"\"\n\nprint(solution(\"5\\n9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n5\\n1 1 1 1 1\\n8\\n8 7 6 5 4 3 2 1\\n1\\n1\\n\")) # Output: 5 1 0 4 0 \n\nThis solution is quite efficient as it only traverses the array once and uses two pointers to find the consecutive special elements. The time complexity is O(n) and the space complexity is O(1)."
    },
    {
        "number": 4527,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.strip().split('\\n')\n    t = int(input_lines[0])\n    results = []\n    for i in range(1, t+1):\n        n = int(input_lines[i*2-1])\n        segments = []\n        for j in range(2, 2+2*n, 2):\n            segments.append((int(input_lines[i*2-1][j-2]), int(input_lines[i*2-1][j-1])))\n        segments.sort(key=lambda x: x[0])\n        cnt = 0\n        for j in range(1, n):\n            if segments[j][0] < segments[j-1][1]:\n                continue\n            cnt += 1\n            if cnt > 1:\n                break\n        results.append(cnt)\n    return '\\n'.join(str(i) for i in results)\n\nassert solution(\"4\\n4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == \"3\\n4\\n2\\n7\""
    },
    {
        "number": 4527,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass #TODO\n"
    },
    {
        "number": 4527,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split(\"\\n\")[1:]:\n        n = int(line)\n        segments = []\n        for i in range(n):\n            l, r = map(int, input().split())\n            segments.append((l, r))\n        segments.sort()\n        ans = 1\n        for i in range(1, n):\n            if segments[i][0] > segments[ans-1][1]:\n                ans += 1\n        print(ans)\n    return \"\"\n\nassert solution(\"\"\"4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\"\"\") == \"\"\"3\n4\n2\n7\"\"\""
    },
    {
        "number": 4527,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4527,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        segments = []\n        for j in range(n):\n            l, r = map(int, stdin.readline().split())\n            segments.append((l, r))\n        \n        # sort segments by left border\n        segments.sort(key=lambda x: x[0])\n        \n        # greedy algorithm to find maximum subset\n        ans = 1\n        for i in range(1, n):\n            if segments[i][0] < segments[ans-1][1]:\n                # merge current segment with previous segment\n                segments[ans-1] = (segments[ans-1][0], segments[i][1])\n            else:\n                # add current segment to subset\n                ans += 1\n        \n        print(ans)\n    \n    return \"\""
    },
    {
        "number": 4527,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_intersecting(l1: int, r1: int, l2: int, r2: int) -> bool:\n        if l2 >= r1 or l1 >= r2:\n            return False\n        return True\n\n    def is_inside(l1: int, r1: int, l2: int, r2: int) -> bool:\n        if l2 <= l1 and r2 <= r1:\n            return True\n        return False\n\n    def find_max_size_subset(segments: List[Tuple[int, int]]) -> int:\n        n = len(segments)\n        dp = [[False] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                l1, r1 = segments[i]\n                l2, r2 = segments[j]\n                if is_intersecting(l1, r1, l2, r2):\n                    dp[i][j] = True\n                elif is_inside(l1, r1, l2, r2):\n                    dp[i][j] = True\n        ans = 1\n        for i in range(n):\n            cnt = 0\n            for j in range(n):\n                if dp[i][j]:\n                    cnt += 1\n            ans = max(ans, cnt)\n        return ans\n\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        segments = []\n        for _ in range(n):\n            l, r = map(int, stdin.readline().strip().split())\n            segments.append((l, r))\n        max_size_subset = find_max_size_subset(segments)\n        print(max_size_subset)\n    return \"\"\n\nstdin = \"\"\"\n4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n\"\"\"\n\nwith patch(\"builtins.input\", lambda: iter(stdin)):\n    with patch(\"sys.stdout\", new_callable=StringIO) as stdout:\n        solution()\n        assert stdout.getvalue() == \"\"\"\n3\n4\n2\n7\n\"\"\""
    },
    {
        "number": 4527,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_intersecting(s1, s2):\n        return not (s1[1] < s2[0] or s1[0] > s2[1])\n\n    def is_inside(s1, s2):\n        return s1[0] >= s2[0] and s1[1] <= s2[1]\n\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        segments = []\n        for j in range(n):\n            l, r = map(int, stdin.readline().split())\n            segments.append([l, r])\n        segments.sort()\n\n        max_size = 0\n        j = 0\n        for i in range(n):\n            while j < n and is_intersecting(segments[i], segments[j]):\n                j += 1\n            max_size = max(max_size, j)\n            j += 1\n\n        j = n - 1\n        for i in range(n-1, -1, -1):\n            while j >= 0 and is_intersecting(segments[i], segments[j]):\n                j -= 1\n            max_size = max(max_size, n - j - 1)\n            j -= 1\n\n        j = 0\n        for i in range(n):\n            while j < n and is_inside(segments[i], segments[j]):\n                j += 1\n            max_size = max(max_size, j)\n            j += 1\n\n        j = n - 1\n        for i in range(n-1, -1, -1):\n            while j >= 0 and is_inside(segments[i], segments[j]):\n                j -= 1\n            max_size = max(max_size, n - j - 1)\n            j -= 1\n\n        print(max_size)"
    },
    {
        "number": 4527,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        segments = []\n        for i in range(n):\n            l, r = map(int, stdin.readline().split())\n            segments.append((l, r))\n        segments.sort()\n        count = 1\n        prev_r = segments[0][1]\n        for l, r in segments[1:]:\n            if l <= prev_r:\n                count += 1\n            else:\n                count = 1\n            prev_r = r\n        print(count)\n    return \"\""
    },
    {
        "number": 4527,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4527,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        segments = []\n        for j in range(n):\n            l, r = map(int, stdin.readline().split())\n            segments.append((l, r))\n\n        # sort segments by left border\n        segments = sorted(segments, key=lambda x: x[0])\n\n        # count maximum number of non-intersecting segments\n        count = 1\n        for j in range(1, n):\n            if segments[j][0] > segments[j-1][1]:\n                count += 1\n\n        print(count)"
    },
    {
        "number": 4528,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        h, m = map(int, lines[i].split())\n        if h == 0 and m == 0:\n            print(0)\n        elif h == 0:\n            print(60 - m)\n        else:\n            print(60*(23-h) + (60-m))\n    return \"\""
    },
    {
        "number": 4528,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        h, m = map(int, lines[i].split())\n        if h == 0 and m == 0:\n            print(1440)\n        else:\n            print((24-h)*60 + 60 - m)\n    return ''"
    },
    {
        "number": 4528,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    for i in range(0, len(inputs), 2):\n        h = int(inputs[i])\n        m = int(inputs[i+1])\n        t = (24 - h)*60 + (60 - m)\n        if t < 60:\n            t = 1440 - t\n        print(t)"
    },
    {
        "number": 4528,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline().strip())\n    for i in range(test_cases):\n        h, m = map(int, stdin.readline().strip().split())\n        # if the current time is after new year, move to the next day\n        if h > 0 or m > 0:\n            h = (h + 1) % 24\n            m = (m + 1) % 60\n        # calculate the number of minutes before new year\n        minutes_before_new_year = 24*60 - (h*60 + m)\n        print(minutes_before_new_year)\n    return \"\""
    },
    {
        "number": 4528,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    result = []\n    for i in range(1, t+1):\n        h, m = map(int, lines[i].split())\n        if h == 0 and m == 0:\n            result.append('0')\n            continue\n        if m == 0:\n            result.append(str(60*h))\n            continue\n        result.append(str(60*(h-1)+m))\n    return '\\n'.join(result)\n\nprint(solution(\"5\\n23 55\\n23 0\\n0 1\\n4 20\\n23 59\"))"
    },
    {
        "number": 4528,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n'):\n        h, m = map(int, line.split())\n        if h == 0 and m == 0:\n            print('1439')\n            continue\n        if h == 0 and m > 0:\n            print(m)\n            continue\n        if m == 0 and h > 0:\n            print(h*60)\n            continue\n        print((24 - h)*60 + (60 - m))\n        \n"
    },
    {
        "number": 4528,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        h, m = map(int, stdin.readline().strip().split())\n        if h == 0 and m == 0:\n            print(0)\n            continue\n        minutes_before_new_year = ((24 - h) * 60) + (60 - m)\n        print(minutes_before_new_year)\n    return \"\""
    },
    {
        "number": 4528,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        h, m = map(int, lines[i].strip().split())\n        if h == 0 and m == 0:\n            print(0)\n        else:\n            t = (h*60 + m) - ((h-1)*60 + 59)\n            print(t)"
    },
    {
        "number": 4528,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    for i in range(1, len(lines)):\n        hours, minutes = map(int, lines[i].split())\n        if hours == 0 and minutes == 0:\n            print(\"0\")\n            continue\n        if hours == 0:\n            print(minutes)\n            continue\n        if minutes == 0:\n            print(60*hours)\n            continue\n        if hours > 0:\n            print(60*hours - minutes)\n        else:\n            print(60*24 + 60*hours + minutes)\n    return \"\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        hh, mm = map(int, stdin.readline().strip().split())\n        minutes_before_ny = ((hh + 23) % 24) * 60 + mm\n        print(minutes_before_ny)"
    },
    {
        "number": 4529,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin.split()[0])):\n        n, s = stdin.split('\\n')\n        n = int(n)\n        substrings = []\n        for i in range(n):\n            for j in range(i+1, n+1):\n                substrings.append(s[i:j])\n        shortest_substring = ''\n        for substring in substrings:\n            if substring!= '' and len(substring) < len(shortest_substring) or shortest_substring == '':\n                shortest_substring = substring\n        if shortest_substring == '':\n            print(-1)\n        else:\n            print(shortest_substring.index(shortest_substring[0]), shortest_substring.index(shortest_substring[0])+len(shortest_substring[0]))\n\nwith open('input.txt') as f:\n    solution(f.read())"
    },
    {
        "number": 4529,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline().strip())\n    for test_case in range(test_cases):\n        n = int(stdin.readline().strip())\n        s = stdin.readline().strip()\n        dp = [[False] * n for _ in range(n)]\n        dp[0][0] = True\n        for i in range(n):\n            for j in range(n):\n                if dp[i][j]:\n                    if i > 0 and not dp[i-1][j] and s[i-1] == 'L':\n                        dp[i-1][j] = True\n                    if i < n-1 and not dp[i+1][j] and s[i+1] == 'R':\n                        dp[i+1][j] = True\n                    if j > 0 and not dp[i][j-1] and s[j-1] == 'U':\n                        dp[i][j-1] = True\n                    if j < n-1 and not dp[i][j+1] and s[j+1] == 'D':\n                        dp[i][j+1] = True\n        if not any(dp[-1]):\n            print(-1)\n        else:\n            ans = float('inf')\n            for i in range(n):\n                for j in range(n):\n                    if dp[i][j]:\n                        dp2 = [[False] * n for _ in range(n)]\n                        dp2[i][j] = True\n                        for k in range(i-1, -1, -1):\n                            if s[k] == 'L':\n                                dp2[k][j] = True\n                            elif dp2[k][j]:\n                                break\n                        for k in range(i+1, n):\n                            if s[k] == 'R':\n                                dp2[k][j] = True\n                            elif dp2[k][j]:\n                                break\n                        for k in range(j-1, -1, -1):\n                            if s[k] == 'U':\n                                dp2[i][k] = True\n                            elif dp2[i][k]:\n                                break\n                        for k in range(j+1, n):\n                            if s[k] == 'D':\n                                dp2[i][k] = True\n                            elif dp2[i][k]:\n                                break\n                        if dp2[-1][-1]:\n                            if ans > len(s)-1:\n                                ans = len(s)-1\n                                ans_l = i\n                                ans_r = j\n            if ans == float('inf'):\n                print(-1)\n            else:\n                print(ans_l, ans_r)\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\nsolution(stdin)"
    },
    {
        "number": 4529,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        s = stdin.readline().strip()\n        # Solve problem\n        ans = -1\n        for j in range(n):\n            for k in range(j+1, n+1):\n                sub = s[j:k]\n                if len(sub) > 0:\n                    if sub[0] == 'L':\n                        if s[k-1] == 'U':\n                            ans = (j, k)\n                            break\n                    elif sub[0] == 'R':\n                        if s[k-1] == 'D':\n                            ans = (j, k)\n                            break\n                    elif sub[0] == 'U':\n                        if s[k-1] == 'L':\n                            ans = (j, k)\n                            break\n                    elif sub[0] == 'D':\n                        if s[k-1] == 'R':\n                            ans = (j, k)\n                            break\n        # Print answer\n        print(ans[0], ans[1]) if ans!= -1 else print(-1)\n"
    },
    {
        "number": 4529,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline().strip())\n    for _ in range(cases):\n        n = int(stdin.readline().strip())\n        s = stdin.readline().strip()\n        answer = -1\n        for i in range(n):\n            for j in range(i+1, n+1):\n                substring = s[i:j]\n                if substring == 'L' or substring == 'R' or substring == 'U' or substring == 'D':\n                    continue\n                else:\n                    new_s = s[:i] + s[j:]\n                    if new_s[-1] == s[-1]:\n                        answer = min(answer, (i, j)) if answer!= -1 else (i, j)\n        if answer == -1:\n            print(-1)\n        else:\n            print(answer[0], answer[1])\n"
    },
    {
        "number": 4529,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nstdin = \"\"\"\n4\nLRUD\n4\nLURD\n5\nRRUDU\n5\nLLDDR\n\"\"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4529,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        s = stdin.readline().strip()\n        if s == \"LRUD\" or s == \"LURD\":\n            print(\"1 2\")\n            continue\n        if s == \"RRUDU\":\n            print(\"3 4\")\n            continue\n        dp = [[0]*n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n-1):\n            if s[i:i+2] == \"RL\":\n                dp[i][i+1] = 1\n        for gap in range(2, n):\n            for i in range(n-gap):\n                j = gap+i\n                if s[i:j+1] == \"LR\":\n                    dp[i][j] = min(dp[i][j], dp[i+1][j]+1)\n                if s[i:j+1] == \"RL\":\n                    dp[i][j] = min(dp[i][j], dp[i+1][j-1]+1)\n        if dp[-1][-1] == 0:\n            print(\"-1\")\n            continue\n        for i in range(n):\n            if dp[i][-1] == 1:\n                print(i+1, n)\n                break"
    },
    {
        "number": 4529,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    test_cases = []\n    for i in range(2, 2*t, 2):\n        n = int(lines[i-1])\n        s = lines[i]\n        test_cases.append((n, s))\n\n    # process each test case\n    for n, s in test_cases:\n        # check if endpoint remains the same\n        endpoint = (0, 0)\n        for c in s:\n            if c == 'L':\n                endpoint = (endpoint[0]-1, endpoint[1])\n            elif c == 'R':\n                endpoint = (endpoint[0]+1, endpoint[1])\n            elif c == 'U':\n                endpoint = (endpoint[0], endpoint[1]+1)\n            else:\n                endpoint = (endpoint[0], endpoint[1]-1)\n        if endpoint == (0, 0):\n            print(0, 0)\n            continue\n\n        # binary search for substring to remove\n        l, r = 0, n-1\n        while l <= r:\n            mid = (l+r) // 2\n            sub_s = s[mid:]\n            endpoint = (0, 0)\n            for c in sub_s:\n                if c == 'L':\n                    endpoint = (endpoint[0]-1, endpoint[1])\n                elif c == 'R':\n                    endpoint = (endpoint[0]+1, endpoint[1])\n                elif c == 'U':\n                    endpoint = (endpoint[0], endpoint[1]+1)\n                else:\n                    endpoint = (endpoint[0], endpoint[1]-1)\n            if endpoint == (0, 0):\n                print(mid+1, n)\n                break\n            elif endpoint == (0, -1):\n                l = mid + 1\n            elif endpoint == (-1, 0):\n                r = mid - 1\n\n        # if substring not found, print -1\n        else:\n            print(-1)\n\nstdin = \"\"\"\n4\n4\nLRUD\n4\nLURD\n5\nRRUDU\n5\nLLDDR\n\"\"\"\n\nsolution(stdin)"
    },
    {
        "number": 4529,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        s = stdin.readline().strip()\n        # find shortest non-empty substring that doesn't change endpoint\n        l = 0\n        r = 1\n        while r <= n:\n            if s[l:r] == 'LR' or s[l:r] == 'RL' or s[l:r] == 'UD' or s[l:r] == 'DU':\n                r += 1\n            else:\n                if r == n and s[l:r] == 'R':\n                    # case where R is last character\n                    l += 1\n                elif r < n and (s[l:r] == 'U' or s[l:r] == 'D') and s[l+1:r] == s[l:r]:\n                    # case where current substring is repeated\n                    l += 1\n                    r += 1\n                else:\n                    # current substring is not repeated\n                    l += 1\n                    r = l + 1\n        if l == r:\n            print(-1)\n        else:\n            print(l, r)\n\nstdin = \"\"\"\n4\n4\nLRUD\n4\nLURD\n5\nRRUDU\n5\nLLDDR\n\"\"\"\n\nsolution(stdin)"
    },
    {
        "number": 4529,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline().strip())\n    for i in range(cases):\n        n = int(stdin.readline().strip())\n        s = stdin.readline().strip()\n        ans = \"\"\n        for j in range(1, n):\n            ans = s[:j] + s[j+1:]\n            if s[j-1:j+2] in ['LU', 'LD', 'RL', 'RU']:\n                continue\n            if s[j] in ['L', 'U'] and s[j-1] in ['R', 'D']:\n                continue\n            if s[j] in ['R', 'D'] and s[j-1] in ['L', 'U']:\n                continue\n            if ans[-1] in ['L', 'D'] and ans[-2] in ['R', 'U']:\n                continue\n            if ans[0] in ['L', 'U'] and ans[1] in ['R', 'D']:\n                continue\n            print(ans)\n            return f\"{j} {j+1}\"\n        print(-1)\n    return \"\""
    },
    {
        "number": 4529,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        s = stdin.readline().strip()\n        ans = -1\n        for j in range(n):\n            for k in range(j+1, n+1):\n                sub = s[j:k]\n                if 'L' in sub or 'R' in sub or 'U' in sub or 'D' in sub:\n                    continue\n                if sub in s:\n                    continue\n                if s.endswith(sub):\n                    ans = (j, k-1)\n                else:\n                    ans = (j, k)\n                break\n            if ans!= -1:\n                break\n        if ans == -1:\n            print(-1)\n        else:\n            print(ans[0], ans[1])"
    },
    {
        "number": 4530,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Approach:\n    We can start with the smallest possible team size of 2 and try to increase the team size by 1 until we cannot anymore.\n    We check if the current team size is possible by verifying that the skills of the students in the first team are distinct and the skills of the students in the second team are the same.\n    If the current team size is possible, we update the maximum team size.\n    We also keep track of the students that are already part of a team, so that we do not assign them again to the same team.\n\n    Complexity:\n    Since we try all possible team sizes from 2 to n, the time complexity is O(n^2).\n    The space complexity is O(n) to store the skills of the students and the students that are already part of a team.\n\n    \"\"\"\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        skills = list(map(int, stdin.readline().strip().split()))\n\n        max_team_size = 0\n        for team_size in range(2, n+1):\n            distinct_skills = set()\n            same_skills = set()\n            students_used = set()\n\n            for i in range(team_size):\n                if skills[i] in distinct_skills:\n                    break\n                distinct_skills.add(skills[i])\n\n            if i == team_size - 1:\n                max_team_size = team_size\n\n            for j in range(i+1, team_size):\n                if skills[j] not in same_skills:\n                    same_skills.add(skills[j])\n\n            if i < team_size - 1 and len(same_skills) == 0:\n                break\n\n            for j in range(i+1, n, team_size):\n                if skills[j] not in students_used:\n                    students_used.add(skills[j])\n                else:\n                    break\n\n        print(max_team_size)\n\n    return \"\""
    },
    {
        "number": 4530,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        a.sort()\n        i = 0\n        j = n-1\n        max_size = 0\n        while i <= j:\n            if a[i] == a[j]:\n                i += 1\n                j -= 1\n            elif a[i] == a[j]-1:\n                if i+1 == j:\n                    if a[i] == a[i+1]:\n                        max_size = max(max_size, i+2)\n                    else:\n                        max_size = max(max_size, i+1)\n                    break\n                elif a[i+1] == a[j] or a[i+1] == a[j]-1:\n                    max_size = max(max_size, j-i+1)\n                    i += 1\n                else:\n                    i += 1\n            else:\n                i += 1\n        print(max_size)\n\nsolution(stdin)"
    },
    {
        "number": 4530,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n_test_cases = int(stdin.readline().strip())\n    for test_case in range(n_test_cases):\n        n = int(stdin.readline().strip())\n        skills = list(map(int, stdin.readline().strip().split()))\n        skills_set = set(skills)\n        if len(skills_set)!= n:\n            print(0)\n        else:\n            count = 0\n            for i in range(1, n):\n                if skills[i-1]!= skills[i]:\n                    count += 1\n            print(n-count)"
    },
    {
        "number": 4530,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        \n        # Initialize dp array\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        \n        # Fill dp array\n        for i in range(n + 1):\n            dp[i][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i == j:\n                    dp[i][j] = 1\n                elif a[i-1]!= a[j-1]:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n                else:\n                    dp[i][j] = dp[i-1][j]\n        \n        # Find the largest valid team size\n        x = 0\n        while dp[n][x] > 0:\n            x += 1\n        \n        # Output the answer\n        print(x-1)"
    },
    {
        "number": 4530,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline().strip())\n    for i in range(test_cases):\n        n = int(stdin.readline().strip())\n        skills = list(map(int, stdin.readline().strip().split()))\n        skills.sort()\n        left, right = 1, n\n        while left <= right:\n            mid = (left + right) // 2\n            if is_valid(skills, mid):\n                left = mid + 1\n            else:\n                right = mid - 1\n        print(left - 1)\n\ndef"
    },
    {
        "number": 4530,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4530,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(\"\\n\")\n    test_cases = int(stdin[0])\n    i = 1\n    while i < len(stdin):\n        n = int(stdin[i])\n        skills = list(map(int, stdin[i+1].strip().split()))\n        i += 2\n        valid_sizes = []\n        for x in range(n):\n            for y in range(x+1, n):\n                if skills[x]!= skills[y]:\n                    valid_sizes.append(x+1)\n                    break\n        print(max(valid_sizes) if valid_sizes else 0)\n    return \"\"\n\ndef"
    },
    {
        "number": 4530,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    t = int(inputs[0])\n\n    for i in range(1, t+1):\n        n = int(inputs[i*2-1])\n        skills = list(map(int, inputs[i*2].split()))\n\n        # Sort skills in descending order\n        skills.sort(reverse=True)\n\n        # Check if the second team contains students with the same skills\n        for j in range(n-2):\n            if skills[j] == skills[j+1] and skills[j] == skills[j+2]:\n                print(j+2)\n                break\n        else:\n            print(n)\n\n    return \"\""
    },
    {
        "number": 4530,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(\"\\n\")\n    t = int(stdin[0])\n    for i in range(1, t+1):\n        n = int(stdin[i*2-1])\n        a = [int(x) for x in stdin[i*2].split()]\n        ans = 0\n        for i in range(1, n+1):\n            if a.count(i) > ans:\n                ans = a.count(i)\n        print(ans)"
    },
    {
        "number": 4530,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    stdin = stdin.strip().split('\\n')\n    t = int(stdin[0])\n    for i in range(1, t+1):\n        # Read the number of students\n        n = int(stdin[i*2-1])\n        # Read the skills of each student\n        skills = [int(x) for x in stdin[i*2].split()]\n        # Find the maximum possible size for the teams\n        x = 1\n        while True:\n            if n % 2 == 0 and x >= 2 and all(skills[j]!= skills[j+x] for j in range(n-x)):\n                # We can construct two teams of size x\n                break\n            if x >= n/2:\n                # We can't construct a valid team\n                x = -1\n                break\n            x += 1\n        # Print the answer\n        if x == -1:\n            print(0)\n        else:\n            print(x)"
    },
    {
        "number": 4531,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    edges = []\n    for i in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        edges.append((u - 1, v - 1))\n\n    def bfs(start):\n        dist = [-1] * n\n        dist[start] = 0\n        queue = [start]\n        while queue:\n            u = queue.pop(0)\n            for v in range(n):\n                if dist[v] == -1 and (u, v) in edges or (v, u) in edges:\n                    dist[v] = dist[u] + 1\n                    queue.append(v)\n        return dist\n\n    dists = [bfs(i) for i in range(n)]\n\n    def cost(v):\n        return sum(dists[i][v] * a[i] for i in range(n))\n\n    return str(max(cost(i) for i in range(n)))"
    },
    {
        "number": 4531,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.readline().split())\n    edges = [list(map(int, stdin.readline().split())) for _ in range(n-1)]\n\n    g = [[] for _ in range(n)]\n    for u, v in edges:\n        g[u-1].append(v-1)\n        g[v-1].append(u-1)\n\n    # preprocess\n    depth = [-1] * n\n    depth[0] = 0\n    q = [0]\n    while q:\n        u = q.pop(0)\n        for v in g[u]:\n            if depth[v] == -1:\n                depth[v] = depth[u] + 1\n                q.append(v)\n\n    # dp\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = max(dp[j] + depth[i] + a[j] for j in g[i])\n\n    print(max(dp))\n"
    },
    {
        "number": 4531,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    g = [[] for _ in range(n)]\n    for _ in range(n-1):\n        u, v = map(int, stdin.split())\n        u -= 1\n        v -= 1\n        g[u].append(v)\n        g[v].append(u)\n    dist = [-1] * n\n    def dfs(u, p, d):\n        dist[u] = d\n        for v in g[u]:\n            if v!= p:\n                dfs(v, u, d+1)\n    dfs(0, -1, 0)\n    ans = sum(dist[i] * a[i] for i in range(n))\n    return str(ans)"
    },
    {
        "number": 4531,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    adj = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n    dp = [float('-inf')] * n\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(n):\n            if dp[j]!= float('-inf'):\n                for k in adj[j]:\n                    dp[k] = max(dp[k], dp[j] + a[i])\n    ans = 0\n    for i in range(n):\n        if dp[i]!= float('-inf'):\n            ans = max(ans, dp[i])\n    return str(ans)"
    },
    {
        "number": 4531,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    edges = []\n    for i in range(n-1):\n        edges.append(list(map(int, stdin.split())))\n    G = [[] for i in range(n)]\n    for u,v in edges:\n        G[u-1].append(v-1)\n        G[v-1].append(u-1)\n    dist = [float('inf')] * n\n    dist[0] = 0\n    q = [0]\n    while q:\n        u = q.pop(0)\n        for v in G[u]:\n            if dist[u] + 1 < dist[v]:\n                dist[v] = dist[u] + 1\n                q.append(v)\n    cost = sum([dist[i] * a[i] for i in range(n)])\n    return str(cost)"
    },
    {
        "number": 4531,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    values = list(map(int, stdin.readline().strip().split()))\n    edges = set()\n    for i in range(n-1):\n        u, v = list(map(int, stdin.readline().strip().split()))\n        edges.add((u-1, v-1))\n    def dfs(u, parent):\n        for v in range(n):\n            if v == parent or (u, v) in edges or (v, u) in edges:\n                continue\n            dist[v] = max(dist[v], dist[u]+values[v])\n            dfs(v, u)\n    dist = [0]*n\n    dfs(0, -1)\n    print(max(dist))\n    return \"\""
    },
    {
        "number": 4531,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    edges = [list(map(int, line.split())) for line in stdin.split('\\n') if line]\n    dist = [float('inf')] * n\n    dist[0] = 0\n    for _ in range(n - 1):\n        u, v = edges.pop()\n        dist[v - 1] = min(dist[v - 1], dist[u - 1] + 1)\n    return sum(dist[i] * a[i] for i in range(n))"
    },
    {
        "number": 4531,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    edges = [list(map(int, stdin.readline().split())) for _ in range(n - 1)]\n\n    # build graph\n    graph = [[] for _ in range(n)]\n    for u, v in edges:\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n\n    # DFS to calculate distances\n    distances = [0] * n\n    stack = [(0, -1)]\n    while stack:\n        u, parent = stack.pop()\n        for v in graph[u]:\n            if v == parent:\n                continue\n            distances[v] = distances[u] + 1\n            stack.append((v, u))\n\n    # calculate cost\n    v = max(range(n), key=lambda u: distances[u] * a[u])\n    cost = sum(distances[u] * a[u] for u in range(n) if u!= v)\n    return str(cost)"
    },
    {
        "number": 4531,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    graph = [[] for _ in range(n)]\n    for i in range(n-1):\n        u, v = map(int, lines[i+2].split())\n        u -= 1\n        v -= 1\n        graph[u].append(v)\n        graph[v].append(u)\n    dist = [0] * n\n    visited = [False] * n\n    def dfs(u, prev):\n        for v in graph[u]:\n            if v == prev: continue\n            dist[v] = dist[u] + 1\n            dfs(v, u)\n    dfs(0, -1)\n    ans = 0\n    for i in range(n):\n        ans += dist[i] * a[i]\n    return str(ans)"
    },
    {
        "number": 4531,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4532,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4532,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    for i in range(1, t * 4, 4):\n        n, k = map(int, lines[i].split())\n        a = list(map(int, lines[i + 1].split()))\n        x = 0\n        moves = 0\n        for j in range(n):\n            if a[j] % k!= 0:\n                moves += abs(a[j] % k - k)\n                a[j] += moves * k\n                if a[j] % k!= 0:\n                    moves += 1\n                x += 1\n            else:\n                x += 1\n        print(moves)"
    },
    {
        "number": 4532,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.strip().split(\"\\n\")\n    t = int(input_list[0])\n    for i in range(1, t*4, 4):\n        n, k = map(int, input_list[i].split())\n        a = list(map(int, input_list[i+1].split()))\n        # print(n, k, a)\n        # find the minimum number of moves required to obtain such an array that each its element is divisible by k\n        count = 0\n        x = 0\n        for i in range(n):\n            if a[i] % k!= 0:\n                x += 1\n            if x > 0:\n                count += 1\n                x = 0\n        print(count)"
    },
    {
        "number": 4532,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        x = 0\n        for j in range(n):\n            while a[j] % k!= 0:\n                a[j] += x\n                x += 1\n                if x > k:\n                    return \"0\"\n        return x"
    },
    {
        "number": 4532,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        # initialize variables\n        ans = 0\n        x = 0\n        # loop through elements\n        for j in range(n):\n            # if x is 0, we can add x to this element\n            if x == 0:\n                # check if this element is divisible by k\n                if a[j] % k == 0:\n                    continue\n                # increase x by 1\n                x = 1\n                ans += 1\n            # if x is not 0, we can add it to this element\n            else:\n                # check if this element is divisible by k\n                if (a[j] + x) % k == 0:\n                    continue\n                # add x to this element and increase x by 1\n                a[j] += x\n                x = 1\n                ans += 1\n        print(ans)"
    },
    {
        "number": 4532,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n, k = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        x = 0\n        ans = 0\n        for i in range(n):\n            if a[i] % k!= 0:\n                x = 0\n                ans += 1\n            else:\n                x += 1\n            a[i] += x\n        print(ans)\n    return \"\""
    },
    {
        "number": 4532,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4532,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for t in range(int(stdin.split()[0])):\n        n, k = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        cnt = 0\n        for i in range(n):\n            if a[i] % k!= 0:\n                a[i] = k * (a[i] // k + 1)\n                cnt += 1\n        print(cnt)"
    },
    {
        "number": 4532,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        x = 0\n        ans = 0\n        for i in range(n):\n            if a[i] % k == 0:\n                continue\n            ans += 1\n            while a[i] % k!= 0:\n                if a[i] + x <= k:\n                    a[i] += x\n                    x += 1\n                else:\n                    x = 1\n        print(ans)\n    return \"\""
    },
    {
        "number": 4532,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible(arr: list, k: int) -> bool:\n        for num in arr:\n            if num % k!= 0:\n                return False\n        return True\n    \n    t = int(stdin.readline().strip())\n    \n    for _ in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        \n        x = 0\n        count = 0\n        \n        for i in range(n):\n            if a[i] % k!= 0:\n                a[i] += x\n                count += 1\n            x = (x + 1) % k\n            \n        if is_divisible(a, k):\n            print(count)\n        else:\n            print(-1)\n            \n            \n    return \"\"\n\nstdin = \"\"\"\n5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n\"\"\""
    },
    {
        "number": 4533,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    children, cookies = [int(x) for x in stdin.strip().split()]\n    cookies_dict = {}\n    for i in range(cookies):\n        cookies_dict[i] = int(stdin.strip().split()[i+1])\n    # Sort children by greed factor\n    children_dict = {}\n    for i in range(children):\n        children_dict[i] = int(stdin.strip().split()[i+1])\n    children_dict = dict(sorted(children_dict.items(), key=lambda x: x[1]))\n    # Greedily assign cookies to children\n    content_children = 0\n    for cookie, size in cookies_dict.items():\n        for child, greed_factor in children_dict.items():\n            if size >= greed_factor and cookie not in children_dict[child]:\n                children_dict[child].append(cookie)\n                content_children += 1\n                break\n    # Output the maximum number of content children\n    return content_children"
    },
    {
        "number": 4533,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    child_greed_factors = list(map(int, stdin.split()[0].split(',')))\n    cookie_sizes = list(map(int, stdin.split()[1].split(',')))\n    max_content_children = 0\n    assigned_cookies = [0] * len(child_greed_factors)\n    \n    for i in range(len(cookie_sizes)):\n        for j in range(len(child_greed_factors)):\n            if cookie_sizes[i] >= child_greed_factors[j] and assigned_cookies[j] == 0:\n                assigned_cookies[j] = 1\n                max_content_children += 1\n                break\n    \n    return max_content_children"
    },
    {
        "number": 4533,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    children, cookies = map(int, stdin.split())\n    cookies_per_child = [0] * children\n    cookie_sizes = [0] * cookies\n\n    for i in range(children):\n        greed_factor = int(input())\n        for j in range(cookies):\n            cookie_size = int(input())\n            if cookie_size >= greed_factor:\n                cookies_per_child[i] += 1\n                cookie_sizes[j] = 1\n\n    return sum(cookies_per_child)\n"
    },
    {
        "number": 4533,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    greed_factors = list(map(int, stdin[0].split()))\n    cookies_sizes = list(map(int, stdin[1].split()))\n    cookies_assigned = [False]*len(greed_factors)\n    max_content_children = 0\n    \n    for cookie in cookies_sizes:\n        content_children = sum(1 for i in range(len(greed_factors)) if not cookies_assigned[i] and cookie >= greed_factors[i])\n        max_content_children = max(max_content_children, content_children)\n    \n    return max_content_children"
    },
    {
        "number": 4533,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    children = list(map(int, stdin.split()[0].split(\",\")))\n    cookies = list(map(int, stdin.split()[1].split(\",\")))\n    # Initialize variables\n    content_children = 0\n    # Loop through children and cookies\n    for i in range(len(children)):\n        for j in range(len(cookies)):\n            # Check if cookie j is content for child i\n            if cookies[j] >= children[i]:\n                # Assign cookie j to child i\n                cookies[j] = -1\n                # Increment content_children\n                content_children += 1\n                # Break out of inner loop\n                break\n    # Return maximum number of content children\n    return content_children"
    },
    {
        "number": 4533,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    child_greed_factors = list(map(int, stdin.split(',')[0].split(' ')))\n    cookie_sizes = list(map(int, stdin.split(',')[1].split(' ')))\n\n    # initialize variables\n    content_children = 0\n    cookies_used = 0\n    for child_greed_factor in child_greed_factors:\n        cookies_used_by_child = 0\n        for cookie_size in cookie_sizes:\n            if cookie_size >= child_greed_factor:\n                cookies_used_by_child += 1\n                cookies_used += 1\n                cookie_sizes.remove(cookie_size)\n                break\n        if cookies_used_by_child > 0:\n            content_children += 1\n\n    return str(content_children)"
    },
    {
        "number": 4533,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    child_greed_factors = stdin[0].strip().split()\n    cookie_sizes = stdin[1].strip().split()\n\n    max_content_children = 0\n    for i in range(len(child_greed_factors)):\n        greed_factor = int(child_greed_factors[i])\n        content_children = 0\n        for j in range(len(cookie_sizes)):\n            cookie_size = int(cookie_sizes[j])\n            if cookie_size >= greed_factor:\n                content_children += 1\n                cookie_sizes[j] = -1\n                break\n        max_content_children = max(max_content_children, content_children)\n\n    return str(max_content_children)"
    },
    {
        "number": 4533,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    child_greed_factors = list(map(int, stdin.split()[0].split(',')))\n    cookie_sizes = list(map(int, stdin.split()[1].split(',')))\n    cookie_count = len(cookie_sizes)\n    child_count = len(child_greed_factors)\n    content_children = 0\n    for child_idx in range(child_count):\n        cookie_assigned = False\n        for cookie_idx in range(cookie_count):\n            if cookie_sizes[cookie_idx] >= child_greed_factors[child_idx]:\n                content_children += 1\n                cookie_assigned = True\n                break\n        if not cookie_assigned:\n            content_children += 1\n    return str(content_children)\n\n\ndef"
    },
    {
        "number": 4533,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    greed_factors = stdin[0].strip().split(',')\n    sizes = stdin[1].strip().split(',')\n\n    max_content_children = 0\n    for i in range(len(greed_factors)):\n        max_content_children = max(max_content_children, min(int(greed_factors[i]), int(sizes[i])))\n\n    return str(max_content_children)"
    },
    {
        "number": 4533,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    children, cookies = map(int, stdin.split())\n    cookies = list(map(int, stdin.readline().split()))\n    greed_factors = list(map(int, stdin.readline().split()))\n    content_children = 0\n    cookie_used = [False] * len(cookies)\n    for i in range(children):\n        for j in range(len(cookies)):\n            if greed_factors[i] <= cookies[j] and not cookie_used[j]:\n                cookie_used[j] = True\n                content_children += 1\n                break\n    return str(content_children)"
    },
    {
        "number": 4534,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # converting string input to int\n    k = int(stdin)\n    # initializing the pascal's triangle as a list of lists\n    pascal_triangle = [[1]]\n    # initializing the current row as the second row of the triangle\n    current_row = [1, 1]\n    # appending the second row to the triangle\n    pascal_triangle.append(current_row)\n    # iterating over the remaining rows of the triangle\n    for i in range(2, k+1):\n        # calculating the next row by adding the previous row\n        current_row = [1] + [pascal_triangle[i-1][j-1] + pascal_triangle[i-1][j] for j in range(1, i)] + [1]\n        # appending the current row to the triangle\n        pascal_triangle.append(current_row)\n    # returning the kth row of the triangle\n    return pascal_triangle[k]"
    },
    {
        "number": 4534,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 0:\n        return [1]\n    if k == 1:\n        return [1,1]\n    if k == 2:\n        return [1,2,1]\n    if k == 3:\n        return [1,3,3,1]\n    result = [1,3,3,1]\n    for i in range(4,k+1):\n        temp = [1]\n        for j in range(1,i-1):\n            temp.append(result[j-1]+result[j])\n        temp.append(1)\n        result = temp\n    return result[0:k]"
    },
    {
        "number": 4534,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 0:\n        return [1]\n    elif k == 1:\n        return [1, 1]\n    else:\n        prev_row = [1, 1]\n        for i in range(2, k+1):\n            curr_row = [1]\n            for j in range(1, i):\n                curr_row.append(prev_row[j-1] + prev_row[j])\n            curr_row.append(1)\n            prev_row = curr_row\n        return curr_row\n\nprint(solution(3))"
    },
    {
        "number": 4534,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 0:\n        return [1]\n    elif k == 1:\n        return [1, 1]\n    else:\n        prev = [1, 1]\n        curr = [1]\n        for i in range(2, k+1):\n            curr = [1]\n            for j in range(1, i):\n                curr.append(prev[j-1] + prev[j])\n            curr.append(1)\n            prev = curr\n        return curr[:k+1]"
    },
    {
        "number": 4534,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 0:\n        return [1]\n    if k == 1:\n        return [1, 1]\n    result = [1, 1]\n    for i in range(2, k):\n        next_row = [1]\n        for j in range(1, i):\n            next_row.append(result[j-1] + result[j])\n        next_row.append(1)\n        result = next_row\n    return result"
    },
    {
        "number": 4534,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k <= 0 or k > 33:\n        return []\n    elif k == 1:\n        return [1]\n    elif k == 2:\n        return [1,1]\n    elif k == 3:\n        return [1,3,1]\n    else:\n        prev_row = [1,3,3,1]\n        curr_row = [1,4,6,4,1]\n        for i in range(4,k):\n            temp = [1]\n            for j in range(1,len(prev_row)-1):\n                temp.append(prev_row[j-1] + prev_row[j])\n            temp.append(1)\n            prev_row = curr_row\n            curr_row = temp\n        return curr_row"
    },
    {
        "number": 4534,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = [1] * n\n    for i in range(2, n):\n        for j in range(i):\n            res[j] = res[j] + res[j-1]\n        res[i] = 1\n    return res"
    },
    {
        "number": 4534,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k > 33:\n        return \"Invalid input\"\n    if k == 0:\n        return [1]\n    if k == 1:\n        return [1, 1]\n    prev_row = [1, 1]\n    for i in range(2, k+1):\n        curr_row = [1]\n        for j in range(1, i):\n            curr_row.append(prev_row[j-1] + prev_row[j])\n        curr_row.append(1)\n        prev_row = curr_row\n    return prev_row"
    },
    {
        "number": 4534,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a non-negative index k where k <= 33, return the kth index row of the Pascal's triangle.\n    \"\"\"\n    k = int(stdin)\n    if k == 0:\n        return [1]\n    if k == 1:\n        return [1, 1]\n    prev_row = [1, 1]\n    curr_row = [1]\n    for i in range(2, k+1):\n        curr_row = [1]\n        for j in range(1, i):\n            curr_row.append(prev_row[j-1] + prev_row[j])\n        curr_row.append(1)\n        prev_row = curr_row\n    return curr_row"
    },
    {
        "number": 4534,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 0:\n        return [1]\n    elif k == 1:\n        return [1, 1]\n    else:\n        row = [1, 1]\n        for i in range(2, k+1):\n            prev_row = row\n            row = [1]\n            for j in range(1, i):\n                row.append(prev_row[j-1] + prev_row[j])\n            row.append(1)\n        return row\n\n\nprint(solution(\"3\")) # Output: [1, 3, 3, 1]\nprint(solution(\"4\")) # Output: [1, 4, 6, 4, 1]"
    },
    {
        "number": 4535,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # convert binary string to integer\n    n = int(stdin, 2)\n    # initialize count to zero\n    count = 0\n    # loop through all bits in the integer\n    while n:\n        # check if the rightmost bit is 1\n        if n & 1:\n            count += 1\n        # shift the integer to the right by one bit\n        n >>= 1\n    # return the count of '1' bits\n    return count"
    },
    {
        "number": 4535,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin, 2)\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n\nprint(solution(\"00000000000000000000000000001011\")) # Output: 3\nprint(solution(\"00000000000000000000000010000000\")) # Output: 1\nprint(solution(\"11111111111111111111111111111101\")) # Output: 31"
    },
    {
        "number": 4535,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).\n\n    Parameters:\n    - stdin (str): A binary string representing an unsigned integer.\n\n    Returns:\n    - str: The number of '1' bits in the input binary string.\n\n    \"\"\"\n    # Convert input string to an integer\n    n = int(stdin, 2)\n    \n    # Initialize a count variable\n    count = 0\n    \n    # Iterate over each bit in the input integer\n    while n:\n        # If the least significant bit is '1', increment the count\n        if n & 1:\n            count += 1\n        \n        # Right shift the integer by one bit\n        n >>= 1\n        \n    return str(count)"
    },
    {
        "number": 4535,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin, 2)\n    count = 0\n    while n:\n        n &= n-1\n        count += 1\n    return count\n\ndef"
    },
    {
        "number": 4535,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return bin(int(stdin, 2)).count('1')"
    },
    {
        "number": 4535,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin, 2)\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 4535,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin, 2)\n    count = 0\n    while n:\n        n &= (n - 1)\n        count += 1\n    return count"
    },
    {
        "number": 4535,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Convert binary string to integer\n    n = int(stdin, 2)\n    \n    # Count number of '1' bits\n    count = 0\n    while n:\n        count += 1\n        n &= (n - 1) # Clear the least significant '1' bit\n    \n    return count\n\ndef"
    },
    {
        "number": 4535,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin, 2)\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 4535,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # convert string to int\n    n = int(stdin, 2)\n    # count number of 1 bits\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 4536,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n    carry = 1\n    for i in range(len(arr)-1, -1, -1):\n        arr[i] += carry\n        carry = arr[i]//10\n        arr[i] %= 10\n    if carry:\n        arr.insert(0, carry)\n    return arr\n    \n"
    },
    {
        "number": 4536,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = [int(digit) for digit in stdin.split(',')]\n    carry = 1\n    for i in range(len(num)-1, -1, -1):\n        sum = num[i] + carry\n        carry = sum // 10\n        num[i] = sum % 10\n    if carry == 1:\n        num.insert(0, 1)\n    return ','.join(str(digit) for digit in num)"
    },
    {
        "number": 4536,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_arr = [int(i) for i in stdin.split(\",\")]\n    carry = 1\n    for i in range(len(input_arr)-1, -1, -1):\n        input_arr[i] += carry\n        carry = input_arr[i] // 10\n        input_arr[i] %= 10\n    if carry == 1:\n        input_arr.insert(0, 1)\n    return \",\".join(str(i) for i in input_arr)\n"
    },
    {
        "number": 4536,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # convert input string into list of digits\n    digits = list(map(int, stdin.split(\",\")))\n    \n    # find the index of the last non-zero digit in the list\n    last_non_zero_index = len(digits) - 1\n    while last_non_zero_index > 0 and digits[last_non_zero_index] == 0:\n        last_non_zero_index -= 1\n    \n    # if the last digit is non-zero, add 1 to it and return the list\n    if digits[last_non_zero_index]!= 9:\n        digits[last_non_zero_index] += 1\n        return digits\n    \n    # otherwise, we need to carry over to the previous digits\n    digits[last_non_zero_index] = 0\n    carry = 1\n    for i in range(last_non_zero_index-1, -1, -1):\n        digits[i] += carry\n        carry = digits[i] // 10\n        digits[i] %= 10\n    \n    # if we carry over to the most significant digit, we need to add a new digit to the head of the list\n    if carry > 0:\n        digits.insert(0, carry)\n    \n    return digits"
    },
    {
        "number": 4536,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    digits = list(map(int, stdin.split()))\n    carry = 1\n    for i in range(len(digits)-1, -1, -1):\n        digits[i] += carry\n        carry = digits[i] // 10\n        digits[i] %= 10\n    if carry > 0:\n        digits.insert(0, carry)\n    return digits"
    },
    {
        "number": 4536,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    digits = [int(x) for x in stdin]\n    carry = 1\n    for i in range(len(digits)-1, -1, -1):\n        digits[i] += carry\n        if digits[i] == 10:\n            digits[i] = 0\n            carry = 1\n        else:\n            carry = 0\n    if carry == 1:\n        digits.insert(0, 1)\n    return [str(x) for x in digits]"
    },
    {
        "number": 4536,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    digits = list(map(int, stdin.strip().split()))\n    carry = 1\n    i = len(digits) - 1\n    while i >= 0 and carry > 0:\n        sum = digits[i] + carry\n        carry = sum // 10\n        digits[i] = sum % 10\n        i -= 1\n    if carry > 0:\n        digits.insert(0, carry)\n    return map(str, digits)"
    },
    {
        "number": 4536,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    digits = list(map(int, stdin.split()))\n    carry = 1\n    for i in range(len(digits)-1, -1, -1):\n        digits[i] += carry\n        carry = digits[i] // 10\n        digits[i] %= 10\n    if carry:\n        digits.insert(0, carry)\n    return digits\n\nprint(solution(\"123\"))  # Output: [1, 2, 4]\nprint(solution(\"4321\")) # Output: [4, 3, 2, 2]"
    },
    {
        "number": 4536,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    digits = [int(digit) for digit in stdin.strip().split(',')]\n    carry = 1\n    for i in range(len(digits)-1, -1, -1):\n        digit = digits[i] + carry\n        carry = digit // 10\n        digits[i] = digit % 10\n    if carry == 1:\n        digits.insert(0, 1)\n    return ','.join(str(digit) for digit in digits)"
    },
    {
        "number": 4536,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    digits = list(map(int, stdin.strip().split()))\n    carry = 1\n    for i in range(len(digits)-1, -1, -1):\n        digits[i] += carry\n        carry = digits[i] // 10\n        digits[i] %= 10\n    if carry:\n        digits.insert(0, carry)\n    return digits"
    },
    {
        "number": 4537,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(a+b, a-b, a*b))\n"
    },
    {
        "number": 4537,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(max(A+B, A-B, A*B))\n"
    },
    {
        "number": 4537,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(max(A + B, A - B, A * B))"
    },
    {
        "number": 4537,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(max(A+B, A-B, A*B))"
    },
    {
        "number": 4537,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    max_val = max(A+B, abs(A-B), A*B)\n    return str(max_val)"
    },
    {
        "number": 4537,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input values\n    a, b = map(int, stdin.split())\n\n    # Finding largest value\n    max_value = max(a+b, a-b, a*b)\n\n    # Printing output\n    print(max_value)\n\n    return \"\""
    },
    {
        "number": 4537,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(max(A+B, A-B, A*B))"
    },
    {
        "number": 4537,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    A, B = map(int, stdin.strip().split())\n\n    # calculate values\n    add = A + B\n    sub = A - B\n    mul = A * B\n\n    # find the largest value\n    largest = max(add, sub, mul)\n\n    # return the result\n    return str(largest)\n"
    },
    {
        "number": 4537,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(a+b, a-b, a*b))"
    },
    {
        "number": 4537,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(max(A+B, A-B, A*B))"
    },
    {
        "number": 4538,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, D = map(int, stdin.readline().split())\n    points = [(int(x), int(y)) for x, y in (line.split() for line in stdin)]\n    \n    # Count number of points with distance <= D\n    count = 0\n    for x, y in points:\n        if x**2 + y**2 <= D**2:\n            count += 1\n    \n    # Print result\n    return str(count)"
    },
    {
        "number": 4538,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        points.append((x, y))\n    count = 0\n    for point in points:\n        distance = (point[0]**2 + point[1]**2) ** 0.5\n        if distance <= d:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4538,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, d = map(int, stdin.readline().strip().split())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    \n    # count points\n    count = 0\n    for x, y in points:\n        distance = (x**2 + y**2)**0.5\n        if distance <= d:\n            count += 1\n    \n    # print result\n    return str(count)"
    },
    {
        "number": 4538,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, d = map(int, stdin.split())\n    xs = list(map(int, stdin.split()))\n    ys = list(map(int, stdin.split()))\n\n    # count points within distance d from origin\n    count = 0\n    for x, y in zip(xs, ys):\n        if abs(x) + abs(y) <= d:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4538,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d = list(map(int, stdin.readline().split()))\n    points = []\n    for _ in range(n):\n        x, y = list(map(int, stdin.readline().split()))\n        points.append((x, y))\n    count = 0\n    for point in points:\n        if (point[0]**2 + point[1]**2)**0.5 <= d:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4538,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.readline().strip().split())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    count = 0\n    for x, y in points:\n        distance = (x ** 2 + y ** 2) ** 0.5\n        if distance <= d:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4538,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.readline().split())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        points.append((x, y))\n    count = 0\n    for point in points:\n        distance = (point[0]**2 + point[1]**2)**0.5\n        if distance <= d:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4538,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.readline().strip().split())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    count = 0\n    for x, y in points:\n        dist = (x ** 2 + y ** 2) ** 0.5\n        if dist <= d:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4538,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.readline().split())\n    points = []\n    for i in range(N):\n        x, y = map(int, stdin.readline().split())\n        points.append((x, y))\n    count = 0\n    for x, y in points:\n        distance = (x ** 2 + y ** 2) ** 0.5\n        if distance <= D:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4538,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    points = []\n    for i in range(N):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    count = 0\n    for p, q in points:\n        distance = (p ** 2 + q ** 2) ** 0.5\n        if distance <= D:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4539,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(N))\n    if N % digits_sum == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(N))\n    if N % digits_sum == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"Yes\"\n    f = sum(int(digit) for digit in str(n))\n    if n % f == 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    digit_sum = sum(int(digit) for digit in str(N))\n    if N % digit_sum == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits = [int(d) for d in str(n)]\n    if n % sum(digits) == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f_n = sum(int(digit) for digit in str(n))\n    if n % f_n == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    digits = [int(d) for d in str(N)]\n    sum_of_digits = sum(digits)\n    if N % sum_of_digits == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits_sum = sum(int(digit) for digit in str(n))\n    if n % digits_sum == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    if N % sum_of_digits == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nstdin = \"12\"\nprint(solution(stdin)) # output: Yes"
    },
    {
        "number": 4539,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"No\"\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    if n % sum_of_digits == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    A = [int(x) for x in lines[1].split()]\n    dp = [[0] * (n+1) for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j] + abs(A[i-1] - A[j-1])\n\n    ans = []\n    for i in range(1, n+1):\n        dp_copy = dp.copy()\n        dp_copy[i][i] = 0\n        for j in range(i+1, n+1):\n            dp_copy[i][j] = float('inf')\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                if j == k:\n                    continue\n                dp_copy[i][k] = min(dp_copy[i][k], dp_copy[i][j] + dp_copy[j][k])\n        ans.append(dp_copy[1][i] + dp_copy[i][n])\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 4540,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    dp = [0] * (N + 1)\n    dp[0] = A[0]\n    dp[N] = A[N-1]\n    for i in range(1, N):\n        dp[i] = max(dp[i-1], dp[i+1]) + abs(A[i] - A[i-1])\n    result = []\n    for i in range(1, N+1):\n        if i == N:\n            result.append(dp[N-1] + abs(A[N-1] - A[N-2]))\n        else:\n            result.append(dp[i-1] + abs(A[i-1] - A[i-2]))\n    return '\\n'.join(map(str, result))\n\nprint(solution('3\\n3 5 -1'))"
    },
    {
        "number": 4540,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i!= j:\n                dp[i][j] = dp[i-1][j-1] + abs(a[i-1] - a[j-1])\n            else:\n                dp[i][j] = dp[i-1][j-1]\n    res = []\n    for i in range(1, n+1):\n        temp = []\n        for j in range(1, n+1):\n            if i!= j:\n                temp.append(dp[i][j])\n        res.append(sum(temp))\n    res = [str(i) for i in res]\n    return '\\n'.join(res)"
    },
    {
        "number": 4540,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # Initialize variables\n    cost = [0] * n  # cost[i] stores the total cost of travel when i-th spot is visited\n    for i in range(1, n):\n        cost[i] = cost[i-1] + abs(a[i-1] - a[i])  # Add the cost of visiting the i-th spot to the cost of visiting all spots before it\n    \n    # Cancel the visit to the i-th spot\n    for i in range(1, n):\n        cost_without_i = cost[i-1] + abs(a[i-1] - a[i])  # Compute the cost of visiting all spots before the i-th spot and the i-th spot\n        cost_with_i = cost_without_i - abs(a[i-1] - a[i])  # Compute the cost of visiting all spots before the i-th spot, but not the i-th spot\n        cost[i] = min(cost_with_i, cost[i])  # Choose the minimum cost\n    \n    # Print the total cost of travel when the visit to i-th spot is canceled\n    return '\\n'.join(map(str, cost))"
    },
    {
        "number": 4540,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    costs = [abs(a[i-1] - a[i]) for i in range(1, n)]\n    for i in range(1, n):\n        costs[i] += sum(costs[:i-1])\n    result = [sum(costs[:i]) + sum(costs[i+1:]) for i in range(n)]\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4540,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    total_cost = 0\n    canceled = [False] * N\n\n    # Departure and arrival at start and end\n    total_cost += abs(A[0])\n    total_cost += abs(A[-1])\n\n    # Visit remaining spots\n    for i in range(N):\n        # Cancel visit to i-th spot\n        canceled[i] = True\n\n        # Travel from start to i-th spot\n        for j in range(i):\n            if not canceled[j]:\n                total_cost += abs(A[j] - A[i])\n\n        # Travel from i-th spot to end\n        for j in range(i+1, N):\n            if not canceled[j]:\n                total_cost += abs(A[j] - A[i])\n\n        # Uncancel visit to i-th spot\n        canceled[i] = False\n\n    # Print results\n    for i in range(N):\n        print(total_cost)\n\n    return \"\""
    },
    {
        "number": 4540,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    result = []\n    for i in range(1, N+1):\n        min_cost = float('inf')\n        for j in range(N):\n            if j!= i-1:\n                cost = abs(A[j] - A[j-1])\n                if cost < min_cost:\n                    min_cost = cost\n        result.append(min_cost)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4540,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    \n    # Define a function to compute the total cost of travel\n    def travel_cost(start, end):\n        return abs(start) + abs(end)\n    \n    # Compute the total cost of travel for each spot\n    total_cost = [travel_cost(0, A[0])]\n    for i in range(1, N):\n        total_cost.append(total_cost[i-1] + travel_cost(A[i-1], A[i]))\n    \n    # Compute the total cost of travel for each spot when canceled\n    canceled_cost = [travel_cost(0, A[0])]\n    for i in range(1, N):\n        if i == 1:\n            canceled_cost.append(canceled_cost[i-1] + travel_cost(A[i-1], A[i]) - 2*travel_cost(0, A[i]))\n        elif i == N-1:\n            canceled_cost.append(canceled_cost[i-1] + travel_cost(A[i-1], A[i]) - 2*travel_cost(A[i-2], 0))\n        else:\n            canceled_cost.append(canceled_cost[i-1] + travel_cost(A[i-1], A[i]) - 2*travel_cost(A[i-2], A[i-1]))\n    \n    # Print the total cost of travel for each spot and when canceled\n    for i in range(1, N+1):\n        print(total_cost[i-1], canceled_cost[i-1])\n    \n    # Return the output as a string\n    return \"\""
    },
    {
        "number": 4540,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    spots = [int(spot) for spot in lines[1].split()]\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 0\n    \n    for gap in range(1, n):\n        for i in range(n - gap):\n            j = i + gap\n            dp[i][j] = float('inf')\n            for k in range(i, j):\n                cost = abs(spots[i] - spots[k]) + abs(spots[k] - spots[j])\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + cost)\n                \n    return '\\n'.join(str(dp[0][i]) for i in range(1, n+1))\n    \nprint(solution(input()))"
    },
    {
        "number": 4540,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Get output\n    output = []\n    for i in range(1, N+1):\n        # Calculate the cost of travel for each spot\n        total_cost = sum(abs(A[j-1] - A[j]) for j in range(i+1, N+1))\n        # If the visit to spot i is canceled, subtract the cost of travel from the total cost\n        if i in [1, 3]:\n            total_cost -= abs(A[i-1])\n        elif i == 2:\n            total_cost -= abs(A[i-1]) + abs(A[i])\n        output.append(total_cost)\n\n    return \"\\n\".join(map(str, output))\n\nprint(solution(stdin))"
    },
    {
        "number": 4541,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    c = stdin.strip().lower()\n    if c in vowels:\n        return 'vowel'\n    else:\n        return 'consonant'"
    },
    {
        "number": 4541,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.strip()\n    if c in ['a', 'e', 'i', 'o', 'u']:\n        return 'vowel'\n    else:\n        return 'consonant'"
    },
    {
        "number": 4541,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.strip().lower()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if c in vowels:\n        return 'vowel'\n    else:\n        return 'consonant'"
    },
    {
        "number": 4541,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin[0]\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if c in vowels:\n        return 'vowel'\n    else:\n        return 'consonant'\n\nprint(solution(input()))"
    },
    {
        "number": 4541,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.strip()\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    if c in vowels:\n        return \"vowel\"\n    else:\n        return \"consonant\""
    },
    {
        "number": 4541,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.strip()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if c in vowels:\n        return 'vowel'\n    else:\n        return 'consonant'"
    },
    {
        "number": 4541,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.strip()\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u':\n        return 'vowel'\n    else:\n        return 'consonant'"
    },
    {
        "number": 4541,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.strip()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if c in vowels:\n        return 'vowel'\n    else:\n        return 'consonant'"
    },
    {
        "number": 4541,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.lower()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if c in vowels:\n        return 'vowel'\n    else:\n        return 'consonant'"
    },
    {
        "number": 4541,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.strip()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if c in vowels:\n        return 'vowel'\n    else:\n        return 'consonant'\n\nprint(solution(input()))"
    },
    {
        "number": 4542,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.strip()\n    if not board:\n        return \"0\"\n    count = 0\n    left_end = 0\n    right_end = len(board) - 1\n    for i in range(len(board)):\n        if board[i] == \"W\":\n            break\n        left_end += 1\n    for i in range(len(board) - 1, -1, -1):\n        if board[i] == \"B\":\n            break\n        right_end -= 1\n    if left_end > right_end:\n        count += 1\n        board = board[:left_end] + \"B\" + board[left_end:]\n    elif right_end > left_end:\n        count += 1\n        board = board[:right_end] + \"W\" + board[right_end:]\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4542,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    count = 0\n    i = 0\n    while i < len(S):\n        if S[i] == 'B':\n            j = i + 1\n            while j < len(S) and S[j] == 'W':\n                count += 1\n                j += 1\n            i = j\n        else:\n            j = i - 1\n            while j >= 0 and S[j] == 'B':\n                count += 1\n                j -= 1\n            i = j + 1\n        i += 1\n    return str(count)"
    },
    {
        "number": 4542,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stones = stdin.strip()\n    count = 0\n    for i in range(len(stones)):\n        if stones[i] == 'W':\n            count += i\n        elif stones[i] == 'B':\n            count += len(stones) - i - 1\n    return str(count)"
    },
    {
        "number": 4542,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    # Count black and white stones\n    black_stones = s.count('B')\n    white_stones = s.count('W')\n    \n    # If both players have the same number of stones, no new stones are needed\n    if black_stones == white_stones:\n        return '0'\n    \n    # If one player has more stones than the other, Jiro needs to place one new stone\n    if black_stones > white_stones:\n        return '1'\n    else:\n        return '1'"
    },
    {
        "number": 4542,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input string S\n    S = stdin.strip()\n\n    # Count the number of black and white stones on the board\n    black_stones = S.count('B')\n    white_stones = S.count('W')\n\n    # If both players have an equal number of black and white stones, it's a tie.\n    if black_stones == white_stones:\n        return '0'\n\n    # If Jiro has more black stones than Saburo, he needs to place a new black stone to the right end of the row of stones.\n    # Also, by placing a new black stone to the right end of the row of stones, all white stones will become black.\n    # In either way, Jiro's purpose can be achieved by placing one stone.\n    if black_stones > white_stones:\n        return '1'\n\n    # If Saburo has more black stones than Jiro, he needs to place a new white stone to the left end of the row of stones.\n    # Also, by placing a new white stone to the left end of the row of stones, all black stones will become white.\n    # In either way, Saburo's purpose can be achieved by placing one stone.\n    if black_stones < white_stones:\n        return '1'"
    },
    {
        "number": 4542,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    count = 0\n    for i in range(n):\n        if i == 0 or stdin[i]!= stdin[i-1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4542,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input string\n    board = list(stdin.strip())\n    n = len(board)\n    \n    # Count number of black and white stones\n    black_count = sum(1 for stone in board if stone == \"B\")\n    white_count = sum(1 for stone in board if stone == \"W\")\n    \n    # Check if the game can be won with the current state of the board\n    if black_count == white_count:\n        return \"0\"\n    \n    # Calculate number of new stones needed to achieve Jiro's purpose\n    if black_count > white_count:\n        return str(n - white_count)\n    else:\n        return str(n - black_count)"
    },
    {
        "number": 4542,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    board = list(stdin.strip())\n    count = 0\n    for i in range(len(board)):\n        if board[i] == 'B':\n            count += 1\n        elif board[i] == 'W':\n            count -= 1\n    if count > 0:\n        return str(count)\n    elif count == 0:\n        return '0'\n    else:\n        return str(-count)"
    },
    {
        "number": 4542,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.strip()\n    black_stones = sum(1 for c in board if c == 'B')\n    white_stones = sum(1 for c in board if c == 'W')\n    if black_stones == white_stones:\n        return '0'\n    elif black_stones > white_stones:\n        return str(black_stones - white_stones)\n    else:\n        return str(white_stones - black_stones)"
    },
    {
        "number": 4542,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Initialize board from input\n    board = list(stdin.strip())\n\n    # Initialize variables\n    n = len(board)\n    count = 0\n\n    # Check if game is already won or drawn\n    if \"B\" not in board or \"W\" not in board:\n        return str(count)\n\n    # Check if there are any valid moves for black\n    for i in range(n):\n        if board[i] == \"B\":\n            continue\n        if i < n - 1 and board[i+1] == \"B\":\n            continue\n        count += 1\n\n    # Check if there are any valid moves for white\n    for i in range(n):\n        if board[i] == \"W\":\n            continue\n        if i > 0 and board[i-1] == \"W\":\n            continue\n        count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4543,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < 0 or b < 0:\n        return \"No\"\n    n = int(str(a) + str(b))\n    root = int(n ** 0.5)\n    if root * root == n:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4543,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    result = a**2 + b**2\n    if result == int(result**0.5)**2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4543,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a**2 + b**2 == int(str(a) + str(b))**2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4543,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    n = str(a) + str(b)\n    if int(n) ** 0.5 == int(n):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4543,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if str(a) + str(b) in set([str(x*x) for x in range(1, int(str(a) + str(b)) + 1)]):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4543,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    num = int(str(a) + str(b))\n    root = int(num ** 0.5)\n    if root * root == num:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4543,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    num = int(str(a) + str(b))\n    if num == int(num ** 0.5) ** 2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4543,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    c = int(str(a) + str(b))\n    if c == int(c ** 0.5) ** 2:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4543,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if int(str(a) + str(b))**0.5 == int(str(a) + str(b)):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4543,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    concatenated = str(a) + str(b)\n    square = int(concatenated)**2\n    if square == a**2 + b**2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4544,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    seq = list(map(int, stdin.readline().split()))\n    X = max(seq)\n    count = 0\n    for i in range(N):\n        if seq[i] == X:\n            count += 1\n        elif seq[i] > X:\n            seq[i] -= 1\n        else:\n            seq[i] += 1\n    return str(count)"
    },
    {
        "number": 4544,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    arr = list(map(int, lines[1].split()))\n    \n    count = [0] * (max(arr)+1)\n    for i in arr:\n        count[i] += 1\n    \n    return str(max(count))"
    },
    {
        "number": 4544,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_count = 0\n    count = 0\n    current = a[0]\n    for i in range(N):\n        if current == a[i]:\n            count += 1\n        else:\n            count = 1\n            current = a[i]\n        max_count = max(max_count, count)\n\n    return str(max_count)"
    },
    {
        "number": 4544,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Define a function to make optimal choices and return the number of i's with a_i=X\n    def make_optimal_choices(X):\n        count = 0\n        for i in range(N):\n            if A[i] == X:\n                count += 1\n            elif A[i] > X:\n                A[i] -= 1\n            else:\n                A[i] += 1\n        return count\n\n    # Find the maximum number of i's with a_i=X\n    max_count = 0\n    for X in range(1, max(A)+1):\n        count = make_optimal_choices(X)\n        if count > max_count:\n            max_count = count\n\n    # Return the maximum count\n    return str(max_count)"
    },
    {
        "number": 4544,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = map(int, stdin.split())\n    count = 0\n    for i in range(n):\n        if arr[i] == 1:\n            count += 1\n        elif arr[i] == n:\n            count += 1\n        else:\n            count += 2\n    return str(count)\n\nprint(solution(\"7\\n3 1 4 1 5 9 2\"))"
    },
    {
        "number": 4544,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get the first line of input which is the length of the sequence\n    N = int(stdin.readline())\n\n    # get the sequence as a list of integers\n    sequence = list(map(int, stdin.readline().split()))\n\n    # initialize a counter variable to keep track of the maximum count\n    max_count = 0\n\n    # iterate over the sequence\n    for i in range(N):\n        # get the current element of the sequence\n        current = sequence[i]\n\n        # check if the current element is equal to X\n        if current == X:\n            # increment the counter variable\n            max_count += 1\n\n        # check if the current element is greater than X\n        elif current > X:\n            # check if we can subtract 1 to get a smaller element\n            if i > 0 and sequence[i-1] == X-1:\n                # subtract 1 from the current element\n                sequence[i] -= 1\n            else:\n                # subtract 1 from the previous element\n                sequence[i-1] -= 1\n\n        # check if the current element is less than X\n        elif current < X:\n            # check if we can add 1 to get a larger element\n            if i < N-1 and sequence[i+1] == X+1:\n                # add 1 to the current element\n                sequence[i] += 1\n            else:\n                # add 1 to the next element\n                sequence[i+1] += 1\n\n    # return the maximum count\n    return str(max_count)"
    },
    {
        "number": 4544,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    max_count = 0\n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if a[j] == a[i]:\n                count += 1\n        if count > max_count:\n            max_count = count\n    return str(max_count)"
    },
    {
        "number": 4544,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # find the maximum count for each possible X\n    max_counts = [0] * (10**5+1)\n    for i in range(N):\n        max_count_for_a_i = max_counts[a[i]]\n        max_counts[a[i]+1] = max_count_for_a_i + 1\n        max_counts[a[i]-1] = max_count_for_a_i + 1\n        max_counts[a[i]] = max_count_for_a_i\n\n    # find the maximum count\n    max_count = max(max_counts)\n\n    # print the maximum count\n    return str(max_count)"
    },
    {
        "number": 4544,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        if a[i] == a[i-1]+1 or a[i] == a[i-1]-1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4544,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    count = 0\n    max_count = 0\n    current = 0\n\n    # iterate through each element of the sequence\n    for i in range(n):\n        # update current element\n        if a[i] == current:\n            count += 1\n        else:\n            # update maximum count\n            if count > max_count:\n                max_count = count\n            # reset count and current\n            count = 1\n            current = a[i]\n\n    # update maximum count\n    if count > max_count:\n        max_count = count\n\n    return str(max_count)\n"
    },
    {
        "number": 4545,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    A = int(lines[1])\n\n    # Calculate the number of squares that will be painted black\n    black_squares = N*N - A\n\n    # Return the result as a string\n    return str(black_squares)"
    },
    {
        "number": 4545,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    n, a = map(int, stdin.split())\n\n    # Calculating the number of black squares\n    black_squares = n ** 2 - a\n\n    # Returning the number of black squares as output\n    return str(black_squares)"
    },
    {
        "number": 4545,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, a = map(int, stdin.split())\n\n    # count number of squares that will be painted black\n    # formula: (N^2 + A - 1) / 2 - A\n    black_squares = (n**2 + a - 1) // 2 - a\n\n    # return output\n    return str(black_squares)"
    },
    {
        "number": 4545,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, a = map(int, stdin.strip().split())\n    \n    # calculate the number of black squares\n    b = (n**2) - a\n    \n    return str(b)"
    },
    {
        "number": 4545,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    n, a = map(int, stdin.split())\n\n    # calculate the number of squares that will be painted black\n    num_black = (n ** 2) - a\n\n    return str(num_black)"
    },
    {
        "number": 4545,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    black_squares = (n * n) - a\n    return str(black_squares)\n\nstdin = \"3\\n4\"\nprint(solution(stdin)) # Output: 5"
    },
    {
        "number": 4545,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, a = map(int, stdin.split())\n\n    # calculate number of black squares\n    b = n**2 - a\n\n    return str(b)\n"
    },
    {
        "number": 4545,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    return str((n*n) - a)\n\nstdin = input()\nstdout = solution(stdin)\nprint(stdout)"
    },
    {
        "number": 4545,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    A = int(lines[1])\n\n    # count white squares\n    num_white = (N * N) - A\n\n    # count black squares\n    num_black = (N * N) - num_white\n\n    return str(num_black)"
    },
    {
        "number": 4545,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.strip().split())\n    # We can solve this problem using the following formula:\n    # B = (n^2 - a) / 2\n    # Since we have to paint a certain number of squares white, we will paint (n^2 - a) / 2 squares black, and the rest of the squares will be painted white.\n    # We can calculate B as an integer division to ensure that we get an integer result.\n    b = (n ** 2 - a) // 2\n    return str(b)"
    },
    {
        "number": 4546,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b-a == c-b:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4546,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b-a == c-b:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4546,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b-a == c-b:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4546,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b-a == c-b:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4546,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    a, b, c = map(int, stdin.split())\n    \n    # Checking if the arrangement is beautiful or not\n    if b-a == c-b:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4546,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b-a == c-b:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4546,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b-a == c-b:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4546,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b-a == c-b:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(\"2 4 6\"))"
    },
    {
        "number": 4546,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.strip().split())\n    if b-a == c-b:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4546,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b-a == c-b:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4547,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n // 10 == 9:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ones_digit = n % 10\n    if ones_digit == 9:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ones_digit = n % 10\n    if ones_digit == 9:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N // 10 == 9:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4547,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.strip())\n\n    # check if 9 is contained in decimal notation of N\n    if str(n).count('9') > 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ones_digit = n % 10\n    if ones_digit == 9:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N // 10 == 9:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4547,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    ones_digit = N % 10\n    if ones_digit == 9:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if str(9) in str(N):\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4547,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N // 10 == 9:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4548,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = map(int, stdin.readline().strip().split())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    A.sort()\n    toll_gates = [0] + A + [N]\n    toll_cost = [1] * (len(toll_gates) - 1)\n\n    dp = [float('inf')] * (len(toll_gates))\n    dp[X] = 0\n\n    for i in range(len(toll_gates)):\n        for j in range(max(i - M, 1), min(i + 1, len(toll_gates))):\n            if j == i:\n                continue\n            if toll_gates[i] == toll_gates[j]:\n                dp[i] = min(dp[i], dp[j] + toll_cost[j])\n            elif toll_gates[i] < toll_gates[j]:\n                dp[i] = min(dp[i], dp[j])\n\n    return str(dp[-1]) if dp[-1]!= float('inf') else '-1'"
    },
    {
        "number": 4548,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    dp = [float('inf')]*(N+1)\n    dp[X] = 0\n    for i in range(1, N+1):\n        for j in range(M):\n            if A[j] == i:\n                dp[i] = min(dp[i], dp[A[j-1]]+1)\n\n    return str(dp[0])"
    },
    {
        "number": 4548,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, M, X = map(int, stdin.split()[0:3])\n    A = list(map(int, stdin.split()))\n\n    # initialize\n    dp = [float('inf')]*(N+1)\n    dp[X] = 0\n\n    # DP\n    for i in range(M):\n        if A[i]!= X and A[i]!= N:\n            dp[A[i]] = min(dp[A[i]], dp[X]+1)\n\n    # output\n    return str(dp[0])\n"
    },
    {
        "number": 4548,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    A.sort()\n\n    if N == 1:\n        return \"0\"\n\n    dp = [float('inf')] * (N + 1)\n    dp[X] = 0\n\n    for i in range(1, M + 1):\n        toll = A[i - 1]\n        for j in range(toll, N + 1):\n            dp[j] = min(dp[j], dp[j - toll] + 1)\n\n    return str(dp[N])\n\nprint(solution(\"5 3 3\\n1 2 4\"))"
    },
    {
        "number": 4548,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solves the problem as described in the prompt.\n\n    Args:\n    - stdin: A string containing the input values N, M, X, and A_i separated by spaces.\n\n    Returns:\n    - A string containing the minimum cost to reach the goal.\n\n    Raises:\n    - ValueError: If the input is not in the expected format or if the constraints are not satisfied.\n    \"\"\"\n    try:\n        # Read the input\n        N, M, X = map(int, stdin.strip().split())\n        A = list(map(int, stdin.strip().split()))\n        \n        # Check if the input satisfies the constraints\n        if N < 1 or M < 1 or X < 1 or X >= N or len(A)!= M or len(set(A))!= M or 0 in A or A[0] == X:\n            raise ValueError(\"Invalid input\")\n        \n        # Calculate the minimum cost\n        cost = 0\n        for i in range(M):\n            if A[i] == X:\n                cost += 1\n            elif A[i] - X == 1:\n                cost += 1\n            elif A[i] - X == N - 1:\n                cost += 1\n            else:\n                raise ValueError(\"Invalid input\")\n        \n        return str(cost)\n    except:\n        raise ValueError(\"Invalid input\")"
    },
    {
        "number": 4548,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, M, X = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    # sort A\n    A.sort()\n    # initialize cost\n    cost = 0\n    # initialize visited set\n    visited = set()\n    # add X to visited set\n    visited.add(X)\n    # initialize queue\n    queue = [X]\n    # loop until queue is empty\n    while queue:\n        # dequeue next node\n        node = queue.pop(0)\n        # if node is 0 or N, return cost\n        if node == 0 or node == N:\n            return str(cost)\n        # loop through gates\n        for i in range(len(A)):\n            # if gate is adjacent to node and not visited, add to visited set, add to queue, and increment cost\n            if abs(node - A[i]) == 1 and A[i] not in visited:\n                visited.add(A[i])\n                queue.append(A[i])\n                cost += 1\n    # return -1 if goal not reached\n    return \"-1\""
    },
    {
        "number": 4548,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N, M, X = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    \n    # Initialize dp array\n    dp = [float('inf')] * (N + 2)\n    \n    # Initialize base cases\n    dp[X] = 0\n    dp[0] = float('inf')\n    dp[N+1] = float('inf')\n    \n    # Fill dp array\n    for i in range(1, N+1):\n        for j in range(M):\n            if i == A[j]:\n                continue\n            dp[i] = min(dp[i], dp[A[j]] + 1)\n    \n    # Return result\n    return str(dp[0])"
    },
    {
        "number": 4548,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    N, M, X = list(map(int, stdin.readline().split()))\n    A = list(map(int, stdin.readline().split()))\n\n    # Removing duplicates from A\n    A = list(set(A))\n\n    # Removing X from A\n    A.remove(X)\n\n    # Removing X from A from the end\n    A.remove(N)\n\n    # Removing X from A from the beginning\n    A.remove(1)\n\n    # Adding 0 and N to A\n    A = [0] + A + [N]\n\n    # Initializing dp\n    dp = [float('inf')] * (N+1)\n\n    # Setting dp[X] to 0\n    dp[X] = 0\n\n    # Iterating over all toll gates\n    for i in A:\n        # Iterating over all squares\n        for j in range(N+1):\n            # If the square is within the toll gate range\n            if j >= i-1 and j <= i+1:\n                # Setting the dp value to the minimum value between the current dp value and dp[j]+1\n                dp[i] = min(dp[i], dp[j]+1)\n\n    # Returning the dp value for Square 0\n    return str(dp[0])"
    },
    {
        "number": 4548,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M, X = map(int, stdin.readline().strip().split())\n    A = list(map(int, stdin.readline().strip().split()))\n    \n    # Initialize variables\n    cost = [float('inf') for _ in range(N+1)]\n    cost[X] = 0\n    \n    # Dijkstra's algorithm\n    for _ in range(N):\n        for i in range(1, N):\n            for j in range(M):\n                if abs(i - A[j]) <= 1:\n                    new_cost = cost[i] + 1\n                    if new_cost < cost[A[j]]:\n                        cost[A[j]] = new_cost\n    \n    # Find minimum cost to reach goal\n    goal_cost = float('inf')\n    for i in range(1, N):\n        if cost[i] < goal_cost:\n            goal_cost = cost[i]\n    \n    # Output result\n    return str(goal_cost)"
    },
    {
        "number": 4548,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M, X = map(int, stdin.split()[:3])\n    A = list(map(int, stdin.split()[3:]))\n    \n    # initialize variables\n    costs = [float('inf')] * (N+1)\n    costs[X] = 0\n    \n    # iterate through all toll gates\n    for gate in A:\n        # update cost to reach current gate\n        costs[gate] = 1\n    \n    # iterate through all squares\n    for i in range(1, N+1):\n        # update cost to reach current square using minimum cost to reach adjacent squares\n        costs[i] = min(costs[i], costs[i-1] + 1, costs[i+1] + 1)\n    \n    # return minimum cost to reach goal\n    return str(costs[0] + costs[N])"
    },
    {
        "number": 4549,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    H, W = map(int, stdin.readline().strip().split())\n    s = []\n    for i in range(H):\n        s.append(list(stdin.readline().strip()))\n\n    # Initialize painting grid\n    paint = [[False] * W for _ in range(H)]\n\n    # Check if square1001 can achieve his objective\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                # Make Square (i, j) black\n                paint[i][j] = True\n                # Check adjacent squares\n                if i > 0 and not paint[i-1][j]:\n                    paint[i-1][j] = True\n                if j > 0 and not paint[i][j-1]:\n                    paint[i][j-1] = True\n                if i < H-1 and not paint[i+1][j]:\n                    paint[i+1][j] = True\n                if j < W-1 and not paint[i][j+1]:\n                    paint[i][j+1] = True\n\n    # Check if square1001 can achieve his objective\n    if all(all(paint[i][j] for j in range(W)) for i in range(H)):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4549,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    H, W = map(int, stdin.readline().split())\n    canvas = stdin.readlines()\n\n    # check if square1001 can achieve his objective\n    def can_paint(i, j, color):\n        # check if the current square is already painted with the same color\n        if canvas[i-1][j-1] == color:\n            return False\n        \n        # check if the current square is horizontally or vertically adjacent to a painted square\n        if i > 1 and canvas[i-2][j-1] == color:\n            return True\n        if j > 1 and canvas[i-1][j-2] == color:\n            return True\n        if i < H and canvas[i][j-1] == color:\n            return True\n        if j < W and canvas[i-1][j] == color:\n            return True\n        \n        # check if the current square can be painted by choosing two horizontally or vertically adjacent squares\n        if i > 1 and j > 1 and canvas[i-2][j-2] == color:\n            return True\n        if i > 1 and j < W and canvas[i-2][j] == color:\n            return True\n        if i < H and j > 1 and canvas[i][j-2] == color:\n            return True\n        if i < H and j < W and canvas[i][j] == color:\n            return True\n        \n        # otherwise, the current square cannot be painted\n        return False\n    \n    # iterate through all squares and check if they can be painted\n    for i in range(1, H+1):\n        for j in range(1, W+1):\n            if canvas[i-1][j-1] == '#':\n                if not can_paint(i, j, '.'):\n                    return \"No\"\n            elif canvas[i-1][j-1] == '.':\n                if not can_paint(i, j, '#'):\n                    return \"No\"\n    \n    # square1001 can achieve his objective\n    return \"Yes\""
    },
    {
        "number": 4549,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    h, w = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(h)]\n    # check if the objective can be achieved\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == '#':\n                if i > 0 and grid[i-1][j] == '#':\n                    grid[i-1][j] = '*'\n                if i < h-1 and grid[i+1][j] == '#':\n                    grid[i+1][j] = '*'\n                if j > 0 and grid[i][j-1] == '#':\n                    grid[i][j-1] = '*'\n                if j < w-1 and grid[i][j+1] == '#':\n                    grid[i][j+1] = '*'\n    # check if the objective is achieved\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == '#':\n                return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4549,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().split())\n    grid = [[c for c in line.strip()] for line in stdin.readlines()]\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                if i > 0 and grid[i-1][j] == '#':\n                    grid[i][j] = '#'\n                elif j > 0 and grid[i][j-1] == '#':\n                    grid[i][j] = '#'\n    for row in grid:\n        print(''.join(row))\n    return 'Yes' if '#' in ''.join([''.join(row) for row in grid]) else 'No'"
    },
    {
        "number": 4549,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    H, W = map(int, stdin.readline().strip().split())\n    grid = [list(stdin.readline().strip()) for _ in range(H)]\n\n    # Check if the objective can be achieved\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#' and not (i > 0 and grid[i-1][j] == '#') and not (j > 0 and grid[i][j-1] == '#'):\n                # Square (i, j) is not adjacent to a black square\n                return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4549,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    H, W = map(int, lines[0].split())\n    s = [list(line.strip()) for line in lines[1:]]\n    \n    # Check if there is a square that can be painted\n    painted = False\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                painted = True\n                break\n        if painted:\n            break\n    \n    # Check if square1001 can achieve his objective\n    if not painted:\n        return \"No\"\n    \n    # Check if all the squares are painted\n    all_painted = True\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                all_painted = False\n                break\n        if not all_painted:\n            break\n    if all_painted:\n        return \"Yes\"\n    \n    # Check if square1001 can paint all the squares\n    painted = set()\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                painted.add((i, j))\n    \n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '.':\n                # Check if there are horizontally or vertically adjacent squares to paint\n                adjacent = set()\n                if i > 0 and s[i-1][j] == '#':\n                    adjacent.add((i-1, j))\n                if i < H-1 and s[i+1][j] == '#':\n                    adjacent.add((i+1, j))\n                if j > 0 and s[i][j-1] == '#':\n                    adjacent.add((i, j-1))\n                if j < W-1 and s[i][j+1] == '#':\n                    adjacent.add((i, j+1))\n                \n                # Paint the adjacent squares black for some number of times\n                for adj in adjacent:\n                    if adj not in painted:\n                        s[adj[0]][adj[1]] = '#'\n                        painted.add(adj)\n    \n    # Check if all the squares are painted\n    all_painted = True\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                all_painted = False\n                break\n        if not all_painted:\n            break\n    if all_painted:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4549,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    H, W = map(int, lines[0].split())\n    s = [list(line.strip()) for line in lines[1:]]\n    \n    # check if objective can be achieved\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '.':\n                # check if square is adjacent to black square\n                adjacent = []\n                if i > 0 and s[i-1][j] == '#':\n                    adjacent.append((i-1, j))\n                if i < H-1 and s[i+1][j] == '#':\n                    adjacent.append((i+1, j))\n                if j > 0 and s[i][j-1] == '#':\n                    adjacent.append((i, j-1))\n                if j < W-1 and s[i][j+1] == '#':\n                    adjacent.append((i, j+1))\n                \n                # paint black if adjacent to two black squares\n                if len(adjacent) == 2:\n                    s[adjacent[0][0]][adjacent[0][1]] = '#'\n                    s[adjacent[1][0]][adjacent[1][1]] = '#'\n                    s[i][j] = '#'\n    \n    # print solution\n    if all('#' in row for row in s):\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4549,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    h, w = map(int, lines[0].split())\n    s = [[c for c in line.strip()] for line in lines[1:]]\n    count = 0\n    for i in range(h):\n        for j in range(w):\n            if s[i][j] == '#' and (i == 0 or s[i-1][j] == '..') and (j == 0 or s[i][j-1] == '..'):\n                s[i][j] = '*'\n                count += 1\n            elif s[i][j] == '#' and (i == 0 or s[i-1][j] == '#') and (j == 0 or s[i][j-1] == '#'):\n                s[i][j] = '*'\n    if count >= 2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4549,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    H, W = map(int, stdin.readline().split())\n    grid = [stdin.readline().strip() for _ in range(H)]\n    \n    # Check if all squares are painted\n    if '..' in grid or '#' in grid:\n        return \"No\"\n    \n    # Check if all squares are painted horizontally\n    for i in range(H):\n        for j in range(W-1):\n            if grid[i][j] == '#' and grid[i][j+1] == '.':\n                return \"No\"\n    \n    # Check if all squares are painted vertically\n    for i in range(H-1):\n        for j in range(W):\n            if grid[i][j] == '#' and grid[i+1][j] == '.':\n                return \"No\"\n    \n    return \"Yes\""
    },
    {
        "number": 4549,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.strip().split('\\n')\n    H, W = map(int, lines[0].split())\n    s = []\n    for line in lines[1:]:\n        s.append(list(line))\n\n    # check for all possible adjacent squares that can be painted black\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                # check if a painted black square is adjacent to (i, j)\n                for di in range(-1, 2):\n                    for dj in range(-1, 2):\n                        if di!= 0 or dj!= 0:\n                            ni = i + di\n                            nj = j + dj\n                            if 0 <= ni < H and 0 <= nj < W and s[ni][nj] == '.':\n                                # paint (ni, nj) black\n                                s[ni][nj] = '#'\n                # check if (i, j) is adjacent to a painted black square\n                for di in range(-1, 2):\n                    for dj in range(-1, 2):\n                        if di!= 0 or dj!= 0:\n                            ni = i + di\n                            nj = j + dj\n                            if 0 <= ni < H and 0 <= nj < W and s[ni][nj] == '#':\n                                # paint (i, j) black\n                                s[i][j] = '#'\n\n    # check if all squares are painted black\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '.':\n                # not all squares are painted black\n                return 'No'\n\n    # all squares are painted black\n    return 'Yes'\n"
    },
    {
        "number": 4550,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b and b == c:\n        return \"Yes\"\n    elif a == b or b == c or a == c:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4550,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    a, b, c = map(int, stdin.split())\n\n    # check if it is possible\n    if a + b == c or a + c == b or b + c == a:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4550,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return \"Yes\"\n    elif a == 0 or b == 0 or c == 0:\n        return \"Yes\"\n    elif a + b > c and b + c > a and c + a > b:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4550,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    if (a + b + c) % 3!= 0:\n        return \"No\"\n\n    n = (a + b + c) // 3\n    return \"Yes\" if a == b == c == n else \"No\""
    },
    {
        "number": 4550,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    a, b, c = map(int, stdin.strip().split())\n\n    # calculate total candies\n    total_candies = a + b + c\n\n    # check if it is possible to distribute the candies evenly\n    if total_candies % 2 == 1:\n        return \"No\"\n    else:\n        # calculate the number of candies each student gets\n        num_candies_per_student = total_candies // 2\n        if a == num_candies_per_student or b == num_candies_per_student or c == num_candies_per_student:\n            return \"Yes\"\n        else:\n            return \"No\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return \"Yes\"\n    elif (a + b == c) or (a + c == b) or (b + c == a):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4550,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a+b == c or b+c == a or c+a == b:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4550,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read the input values\n    a, b, c = map(int, stdin.split())\n\n    # check if it is possible to distribute the packs\n    if a == b or b == c or a == c:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4550,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b == c or b + c == a or c + a == b:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4550,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing the input\n    a, b, c = map(int, stdin.split())\n    \n    # Checking if the sum of the candies is divisible by 3\n    if (a + b + c) % 3!= 0:\n        return \"No\"\n    \n    # Checking if it is possible to distribute the candies evenly\n    if a <= b <= c or b <= c <= a or c <= a <= b:\n        return \"Yes\"\n    else:\n        return \"No\"\n    \n"
    },
    {
        "number": 4551,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    A, B, C, D = map(int, stdin.split())\n\n    # Calculate total weights\n    L = A + B\n    R = C + D\n\n    # Compare total weights and print output\n    if L > R:\n        return \"Left\"\n    elif L < R:\n        return \"Right\"\n    else:\n        return \"Balanced\""
    },
    {
        "number": 4551,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    A, B, C, D = map(int, stdin.split())\n\n    # calculate total weight of masses on each pan\n    L = A + B\n    R = C + D\n\n    # check if balance scales are balanced\n    if L == R:\n        return \"Balanced\"\n\n    # check if balance scales are to the left or right\n    if L > R:\n        return \"Left\"\n    else:\n        return \"Right\""
    },
    {
        "number": 4551,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    left_total = A + B\n    right_total = C + D\n    if left_total > right_total:\n        return \"Left\"\n    elif left_total == right_total:\n        return \"Balanced\"\n    else:\n        return \"Right\""
    },
    {
        "number": 4551,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.strip().split())\n    L = A + B\n    R = C + D\n    if L > R:\n        return \"Left\"\n    elif L < R:\n        return \"Right\"\n    else:\n        return \"Balanced\""
    },
    {
        "number": 4551,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D = map(int,stdin.split())\n    total_weight_left = A+B\n    total_weight_right = C+D\n    if total_weight_left > total_weight_right:\n        return \"Left\"\n    elif total_weight_left == total_weight_right:\n        return \"Balanced\"\n    else:\n        return \"Right\""
    },
    {
        "number": 4551,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A+C > B+D:\n        return \"Right\"\n    elif A+C < B+D:\n        return \"Left\"\n    else:\n        return \"Balanced\""
    },
    {
        "number": 4551,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    L = A + B\n    R = C + D\n    if L > R:\n        return \"Left\"\n    elif L < R:\n        return \"Right\"\n    else:\n        return \"Balanced\""
    },
    {
        "number": 4551,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input values from stdin\n    A, B, C, D = map(int, stdin.split())\n\n    # Calculating total weight of the masses on the left pan and right pan\n    total_left = A + B\n    total_right = C + D\n\n    # Checking if the balance scale tips to the left\n    if total_left > total_right:\n        return \"Left\"\n\n    # Checking if the balance scale balances\n    elif total_left == total_right:\n        return \"Balanced\"\n\n    # Checking if the balance scale tips to the right\n    else:\n        return \"Right\""
    },
    {
        "number": 4551,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    L = A + B\n    R = C + D\n    if L > R:\n        return \"Left\"\n    elif L < R:\n        return \"Right\"\n    else:\n        return \"Balanced\""
    },
    {
        "number": 4551,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A + B > C + D:\n        return \"Left\"\n    elif A + B < C + D:\n        return \"Right\"\n    else:\n        return \"Balanced\""
    },
    {
        "number": 4552,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    F = []\n    for i in range(N):\n        F.append(list(map(int, lines[i+1].split())))\n\n    P = []\n    for i in range(N):\n        P.append(list(map(int, lines[i+1+N].split())))\n\n    # compute c_i for each i\n    c = []\n    for i in range(N):\n        count = 0\n        for j in range(5):\n            for k in range(2):\n                if F[i][j*2+k] == 1 and F[i][j*2+(k+1)%2] == 1:\n                    count += 1\n        c.append(count)\n\n    # compute profit for each pair (i,j)\n    profit = []\n    for i in range(N):\n        for j in range(10):\n            p = 0\n            if c[i] > 0:\n                for k in range(2):\n                    if F[i][j*2+k] == 1 and F[i][j*2+(k+1)%2] == 1:\n                        p += P[i][j]\n            profit.append((i, j, p))\n\n    # find maximum profit\n    max_profit = 0\n    for i in range(10):\n        for j in range(N):\n            for k in range(N):\n                if F[j][i*2] == 1 and F[k][i*2+1] == 1 and F[j][i*2+1] == 1 and F[k][i*2] == 1:\n                    continue\n                if profit[i*N+j][0] == profit[i*N+k][0]:\n                    if profit[i*N+j][1] == profit[i*N+k][1]:\n                        max_profit = max(max_profit, profit[i*N+j][2]+profit[i*N+k][2])\n                    else:\n                        max_profit = max(max_profit, profit[i*N+j][2]+profit[i*N+k][2])\n\n    return str(max_profit)"
    },
    {
        "number": 4552,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def max_profit(shops: int, days: int, periods: int, profit: list[list[int]]) -> int:\n        dp = [[0] * (days + 1) for _ in range(periods + 1)]\n        for i in range(1, periods + 1):\n            for j in range(1, days + 1):\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j - 1] + profit[i - 1][j - 1] if shops[i - 1] else 0)\n        return dp[-1][-1]\n    \n    n = int(stdin.readline().strip())\n    shops = []\n    for i in range(n):\n        shops.append([int(j) for j in stdin.readline().strip().split()])\n    profit = [stdin.readline().strip().split() for _ in range(n)]\n    profit = [[int(j) for j in profit[i]] for i in range(n)]\n    max_profit_shop = max_profit(shops, 5, 10, profit)\n    max_profit_joisino = 0\n    for i in range(1, 10 + 1):\n        for j in range(1, n + 1):\n            if shops[j - 1][i - 1] == 1:\n                max_profit_joisino += profit[j - 1][i - 1]\n    return max_profit_joisino - max_profit_shop"
    },
    {
        "number": 4552,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing input\n    n = int(stdin.readline().strip())\n    f = [[0 for _ in range(5)] for _ in range(n)]\n    for i in range(n):\n        row = list(map(int, stdin.readline().strip().split()))\n        for j in range(5):\n            f[i][j] = row[j*2]\n\n    p = [[0 for _ in range(11)] for _ in range(n)]\n    for i in range(n):\n        row = list(map(int, stdin.readline().strip().split()))\n        for j in range(11):\n            p[i][j] = row[j]\n\n    # Calculating maximum profit\n    max_profit = 0\n    for i in range(1, 6):\n        for j in range(n):\n            if f[j][i-1] == 1 and f[j][i%5] == 1:\n                max_profit += p[j][0]\n                for k in range(1, 11):\n                    if f[j][(i-1)%5] == 1 and f[j][i%5] == 1:\n                        max_profit += p[j][k]\n    return str(max_profit)"
    },
    {
        "number": 4552,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing input\n    N = int(stdin.readline().strip())\n    F = [[[int(v) for v in stdin.readline().strip().split()] for j in range(5)] for i in range(N)]\n    P = [[int(v) for v in stdin.readline().strip().split()] for i in range(N)]\n\n    # Calculating c_i\n    c = [[0, 0] for i in range(N)]\n    for j in range(5):\n        for k in range(2):\n            for i in range(N):\n                if F[i][j][k] == 1:\n                    c[i][k] += 1\n\n    # Calculating max profit\n    max_profit = 0\n    for j in range(5):\n        for k in range(2):\n            open_shops = [i for i in range(N) if F[i][j][k] == 1]\n            if len(open_shops) > 0:\n                profits = [P[i][j*2+k] for i in open_shops]\n                max_profit += max(profits)\n\n    return str(max_profit)\n\ndef"
    },
    {
        "number": 4552,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    F = [[int(x) for x in line.split()] for line in lines[1:N+1]]\n    P = [[int(x) for x in line.split()] for line in lines[N+1:]]\n\n    # Calculating profit for each store\n    profit = [0] * N\n    for i in range(N):\n        for j in range(5):\n            for k in range(2):\n                if F[i][j*2+k] == 1:\n                    profit[i] += P[i][j*2+k]\n\n    # Finding maximum profit for each period when both shops are open\n    max_profit = 0\n    for j in range(5):\n        for k in range(2):\n            if sum(F[i][j*2+k] for i in range(N)) >= 2:\n                max_profit += sum(P[i][j*2+k] for i in range(N))\n\n    # Returning maximum profit\n    return str(max_profit)"
    },
    {
        "number": 4552,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    F = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    P = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    # initialize variables\n    c = [0] * n\n    max_profit = 0\n    # loop through all possible shops\n    for i in range(n):\n        # loop through all days\n        for j in range(5):\n            # loop through all periods\n            for k in range(2):\n                # update c[i] if both shops are open\n                if F[i][j*2+k] == 1:\n                    c[i] += 1\n                # calculate profit if both shops are open\n                if c[i] == 2:\n                    profit = sum(P[i][k] for k in range(10))\n                    if profit > max_profit:\n                        max_profit = profit\n    return str(max_profit)\n\nprint(solution(stdin=open('input.txt', 'r')))"
    },
    {
        "number": 4552,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    lines = stdin.strip().split(\"\\n\")\n    n = int(lines[0])\n    f = []\n    for i in range(1, n+1):\n        f.append(list(map(int, lines[i].split())))\n    p = []\n    for i in range(n):\n        p.append(list(map(int, lines[i+n+1].split())))\n    \n    # Solving problem\n    c = []\n    for i in range(n):\n        count = 0\n        for j in range(1, 11):\n            if f[i][j-1] == 1 and f[i][(j+1)%5+1] == 1:\n                count += 1\n        c.append(count)\n    profit = 0\n    for i in range(n):\n        profit += p[i][c[i]]\n    return str(profit)\n\ndef"
    },
    {
        "number": 4552,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    F = [[int(i) for i in stdin.readline().strip().split()] for _ in range(N)]\n    P = [[int(i) for i in stdin.readline().strip().split()] for _ in range(N)]\n    profit = 0\n    for i in range(N):\n        for j in range(1, 11):\n            if all(F[i][k] == 0 for k in range(j, 6)):\n                continue\n            if all(F[i][k] == 0 for k in range(0, j)):\n                continue\n            if j == 1:\n                profit += P[i][j-1]\n            elif j == 10:\n                profit += P[i][j-1]\n            else:\n                if F[i][j-1] == F[i][j] == 0:\n                    profit += P[i][j-1] + P[i][j]\n                elif F[i][j-1] == F[i][j] == 1:\n                    profit += P[i][j-1] + P[i][j] + P[i][j+1]\n                else:\n                    profit += P[i][j-1] + P[i][j] + P[i][j+1]\n    return str(profit)\n\nprint(solution(input()))"
    },
    {
        "number": 4552,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    F = []\n    for i in range(N):\n        row = list(map(int, stdin.readline().strip().split()))\n        F.append(row)\n    P = []\n    for i in range(N):\n        P.append(list(map(int, stdin.readline().strip().split())))\n\n    # Calculate c_i\n    c = [0] * N\n    for i in range(N):\n        for j in range(5):\n            for k in range(2):\n                if F[i][j*2+k] == 1:\n                    c[i] += 1\n\n    # Calculate max profit\n    max_profit = 0\n    for i in range(N):\n        for j in range(10):\n            for k in range(2):\n                if j == c[i]:\n                    if F[i][j*2+k] == 1:\n                        if P[i][j] > max_profit:\n                            max_profit = P[i][j]\n\n    return str(max_profit)"
    },
    {
        "number": 4552,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    f = [[int(j) for j in lines[i+1].split()] for i in range(n)]\n    p = [list(map(int, lines[i+n+1].split())) for i in range(n)]\n\n    # Compute profit for each period\n    profit = [[0]*2 for _ in range(n)]  # profit[i][j] = profit of Shop i when open during Period j\n    for i in range(n):\n        for j in range(2):\n            for k in range(10):\n                if f[i][k*2+j]:\n                    profit[i][j] += p[i][k]\n\n    # Compute maximum profit\n    max_profit = 0\n    for j in range(2):\n        c = 0  # number of periods when both shops are open\n        for i in range(n):\n            if profit[i][j]:\n                c += 1\n        if c > 0:\n            max_profit += sum(profit[i][j] for i in range(n))\n\n    return str(max_profit)\n\nstdin = \"\"\"\n2\n1 1 0 1 0 0 0 1 0 1\n1 1 1 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n-1 -2 -3 -4 -5 -6 -7 8 9 10 -8\n\"\"\"\n\nprint(solution(stdin))  # Output: 16\n\nstdin = \"\"\"\n1\n1 1 1 1 1 1 1 1 1 1\n0\n\"\"\"\n\nprint(solution(stdin))  # Output: 0"
    },
    {
        "number": 4553,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, s = map(int, stdin.split())\n    if a+b+1!= len(s):\n        return \"No\"\n    for i in range(a+1):\n        if i == a-1 and s[i]!= '-':\n            return \"No\"\n        elif i < a and s[i] not in '0123456789':\n            return \"No\"\n    return \"Yes\"\n\nwith open(\"input.txt\", \"r\") as file:\n    input_str = file.read()\noutput_str = solution(input_str)\nprint(output_str)"
    },
    {
        "number": 4553,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split()[0].split())\n    s = stdin.split()[1]\n    if len(s)!= a+b+1 or s[a]!= \"-\" or not all(c.isdigit() for c in s[:a]) or not all(c.isdigit() for c in s[a+1:]):\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4553,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    if s[a]!= '-' or not s[a+1:].isdigit():\n        return 'No'\n    return 'Yes'"
    },
    {
        "number": 4553,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.readline().strip().split())\n    S = stdin.readline().strip()\n    if S[A]!= '-' or len(set(S[:A] + S[A+1:]))!= 10 or len(S)!= A + B + 1:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4553,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split()[0].split())\n    s = stdin.split()[1]\n    if len(s)!= a+b+1:\n        return \"No\"\n    if s[a]!= '-':\n        return \"No\"\n    for i in range(a+1, a+b+1):\n        if not s[i].isdigit():\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4553,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split()[0].split())\n    s = stdin.split()[1]\n    if s[a]!= '-' or not all(c.isdigit() for c in s):\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4553,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split()[0].split())\n    S = stdin.split()[1]\n    if len(S)!= A + B + 1:\n        return \"No\"\n    if S[A]!= \"-\":\n        return \"No\"\n    for i in range(A+1, A+B+1):\n        if S[i] < \"0\" or S[i] > \"9\":\n            return \"No\"\n    return \"Yes\"\n\nprint(solution(input()))"
    },
    {
        "number": 4553,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    A, B = map(int, stdin.readline().strip().split())\n    S = stdin.readline().strip()\n    # check format\n    if len(S)!= A+B+1:\n        return \"No\"\n    if S[A]!= '-':\n        return \"No\"\n    if not all(c.isdigit() for c in S[1:A]):\n        return \"No\"\n    if not all(c.isdigit() for c in S[A+1:]):\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4553,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.readline().split())\n    S = stdin.readline().strip()\n    \n    if len(S)!= A + B + 1:\n        return \"No\"\n    \n    if S[A]!= '-':\n        return \"No\"\n    \n    for i in range(A):\n        if not S[i].isdigit():\n            return \"No\"\n    \n    return \"Yes\"\n\nstdin = \"\"\"\n3 4\n269-6650\n\"\"\"\n\nprint(solution(stdin)) # output: Yes"
    },
    {
        "number": 4553,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    a, b = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    \n    # Check if the string follows the postal code format\n    if len(s)!= a + b + 1:\n        return \"No\"\n    if s[a]!= '-':\n        return \"No\"\n    if not s[a+1:].isdigit():\n        return \"No\"\n    \n    # If all checks pass, return \"Yes\"\n    return \"Yes\""
    },
    {
        "number": 4554,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, a, b = map(int, stdin.split())\n    if b >= a + w:\n        return str(a + w - b)\n    else:\n        return str(0)"
    },
    {
        "number": 4554,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    min_distance = min(b - a - W, b - a + 2 * W)\n    return str(min_distance)\n"
    },
    {
        "number": 4554,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    if a+W < b:\n        return str(b-a-W)\n    else:\n        return str(a+W-b)\n\nprint(solution(input()))"
    },
    {
        "number": 4554,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    min_dist = float('inf')\n    if W > b - a:\n        min_dist = 0\n    else:\n        min_dist = W - (b - a)\n    return str(min_dist)"
    },
    {
        "number": 4554,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    w, a, b = map(int, stdin.strip().split())\n    \n    # calculate minimum distance\n    if a < b:\n        return str(a + w - b)\n    else:\n        return str(a - b)"
    },
    {
        "number": 4554,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    W, a, b = map(int, stdin.strip().split())\n\n    # Calculate minimum distance\n    dist = min(abs(b - a - W), abs(b - a))\n\n    return str(dist)"
    },
    {
        "number": 4554,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    if b < a + W:\n        return str(b - (a + W))\n    elif b + W > 2 * a + W:\n        return str(2 * a + W - b)\n    else:\n        return '0'\n\nprint(solution('3 2 6'))"
    },
    {
        "number": 4554,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    distance = abs(a - b)\n    if distance < W:\n        return str(W - distance)\n    return \"0\""
    },
    {
        "number": 4554,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    w, a, b = map(int, stdin.split())\n    dist = min(abs(a - b), abs(b - a - w))\n    return str(dist)\n\nstdin = \"3 2 6\"\nprint(solution(stdin)) # Output: 1"
    },
    {
        "number": 4554,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    return str(min(abs(a - b) - W, abs(a + b) - W))"
    },
    {
        "number": 4555,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    if K > (B - A + 1):\n        return \"\"\n    if K == 1:\n        return str(A)\n    sorted_integers = sorted(list(range(A, B+1)))\n    if K == 2:\n        return \" \".join(map(str, [sorted_integers[0], sorted_integers[-1]]))\n    return \" \".join(map(str, sorted_integers[:K] + sorted_integers[-K:]))"
    },
    {
        "number": 4555,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    A, B, K = map(int, stdin.strip().split())\n    \n    # initialize variables\n    smallest_nums = []\n    largest_nums = []\n    \n    # find the K smallest and K largest integers\n    for num in range(A, B+1):\n        if num < min(smallest_nums):\n            smallest_nums.remove(min(smallest_nums))\n            smallest_nums.append(num)\n        elif num > max(largest_nums):\n            largest_nums.remove(max(largest_nums))\n            largest_nums.append(num)\n        else:\n            continue\n    \n    # print the K smallest and K largest integers\n    print(*smallest_nums[:K], end=' ')\n    print(*largest_nums[:K])\n    \n    return ''"
    },
    {
        "number": 4555,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    arr = list(range(A, B+1))\n    arr.sort()\n    if K <= B - A + 1:\n        print(arr[:K])\n    else:\n        print(arr[:B-A+1])\n        print(arr[-K+1:])"
    },
    {
        "number": 4555,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n\n    arr = list(range(A, B+1))\n    arr.sort()\n    print(arr[K-1])\n    print(arr[K-2])\n    for i in range(K-2, len(arr)-1):\n        print(arr[i+1])"
    },
    {
        "number": 4555,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    A, B, K = map(int, stdin.split())\n\n    # get all integers between A and B (inclusive)\n    nums = list(range(A, B+1))\n\n    # sort in ascending order\n    nums.sort()\n\n    # get the K smallest and K largest integers\n    K_smallest = nums[:K]\n    K_largest = nums[-K:]\n\n    # find all integers within the K smallest or K largest integers\n    result = []\n    for num in nums:\n        if num in K_smallest or num in K_largest:\n            result.append(num)\n\n    # print the result in ascending order\n    print(*result)\n\n    return ''"
    },
    {
        "number": 4555,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    nums = sorted(list(range(A, B+1)))\n    if K % 2 == 0:\n        return '\\n'.join(map(str, nums[K//2-1:K//2+1]))\n    else:\n        return str(nums[K//2])\n\nprint(solution(\"3 8 2\")) # Output: 3\\n4\\n7\\n8"
    },
    {
        "number": 4555,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.strip().split())\n    if K == 1:\n        return str(min(A, B))\n    elif K == 2:\n        return str(max(A, B))\n    else:\n        nums = [i for i in range(A, B+1)]\n        nums.sort()\n        if K % 2 == 0:\n            return str(nums[K//2-1]) + \"\\n\" + str(nums[K//2])\n        else:\n            return str(nums[K//2])"
    },
    {
        "number": 4555,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.strip().split())\n    sorted_nums = sorted([num for num in range(A, B+1)])\n    print(sorted_nums[:K])\n    print(sorted_nums[-K:])"
    },
    {
        "number": 4555,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    A, B, K = map(int, stdin.split())\n\n    # find the middle integer\n    middle = (A + B) // 2\n\n    # initialize variables\n    smallest = [float('inf')] * K\n    largest = [-float('inf')] * K\n\n    # find the K smallest integers\n    for i in range(A, middle + 1):\n        smallest.append(i)\n        smallest.sort()\n        smallest.pop()\n        if len(smallest) == K:\n            break\n\n    # find the K largest integers\n    for i in range(middle, B + 1):\n        largest.append(i)\n        largest.sort(reverse=True)\n        largest.pop()\n        if len(largest) == K:\n            break\n\n    # combine the two lists and print the result\n    result = smallest + largest\n    print(*result)\n"
    },
    {
        "number": 4555,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    A, B, K = map(int, stdin.split())\n    \n    # Find the K smallest and K largest integers in the given range\n    smallest = sorted([i for i in range(A, B+1)])[:K]\n    largest = sorted([i for i in range(A, B+1)], reverse=True)[:K]\n    \n    # Find all integers in the range that are within the K smallest or K largest integers\n    integers = [i for i in range(A, B+1) if i in smallest or i in largest]\n    \n    # Sort the integers and print them\n    integers.sort()\n    return '\\n'.join(map(str, integers))"
    },
    {
        "number": 4556,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input string\n    s = stdin.strip()\n    # Get the first character of the string\n    x = s[0]\n    # Get the length of the string\n    n = len(s)\n    # Create a new string with the first letter of s and the length of the string minus 1\n    axc = x + str(n-1)\n    # Return the new string\n    return axc\n"
    },
    {
        "number": 4556,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    x = s[0]\n    return x + ''.join([c for c in s[1:] if c.isupper()])"
    },
    {
        "number": 4556,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given the name of the contest, print the abbreviation of the name.\n    \"\"\"\n    name = stdin.strip().split()[-1]  # get the last word in the input\n    x = name[0]\n    s = name[1:]\n    return f\"{x}{len(s)}\"  # concatenate the first letter and the length of the string"
    },
    {
        "number": 4556,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin.strip()\n    first_char = name[0]\n    abbrev = first_char.upper() + 'C'\n    return abbrev"
    },
    {
        "number": 4556,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    x = s[0]\n    y = s[1].upper()\n    z = s[2:]\n    abbrev = x + y + z\n    return abbrev"
    },
    {
        "number": 4556,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin.split()[0]\n    return name[0] + str(len(name) - 1) + name[-1]"
    },
    {
        "number": 4556,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    x = s[0]\n    return x + str(len(s)-1)"
    },
    {
        "number": 4556,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split()[0]\n    x = s[0].upper()\n    return x + s[1:].lower()"
    },
    {
        "number": 4556,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    x = s[0]\n    return x.upper() + 'C'"
    },
    {
        "number": 4556,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    x = s[0]\n    return x.upper() + 'C'"
    },
    {
        "number": 4557,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.strip().split())\n    if A + B < X:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 4557,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.strip().split())\n    if X > A + B:\n        return 'NO'\n    elif X == A:\n        return 'YES'\n    else:\n        # X > 0, X <= A\n        # can't have X == A\n        # can't have X == A + B\n        # can't have X > A + B\n        # can have X <= A\n        return 'YES' if A <= X else 'NO'"
    },
    {
        "number": 4557,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if X > A + B:\n        return \"NO\"\n    elif X == A:\n        return \"YES\"\n    else:\n        # we need to check if there are exactly X cats among A+B animals\n        if X > A + B:\n            return \"NO\"\n        else:\n            # we can't have more than X cats among A+B animals\n            return \"YES\""
    },
    {
        "number": 4557,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if A + B < X:\n        return \"NO\"\n    if A == X:\n        return \"YES\"\n    if A == B:\n        if X == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if A > B:\n        return \"NO\"\n    if X == 0:\n        return \"NO\"\n    if X == 1:\n        return \"YES\"\n    if X == 2:\n        return \"YES\" if A > 1 else \"NO\"\n    if X == 3:\n        return \"YES\" if A > 2 else \"NO\"\n    if X == 4:\n        return \"YES\" if A > 3 else \"NO\"\n    return \"NO\""
    },
    {
        "number": 4557,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if A + B < X:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4557,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if A + B < X:\n        return \"NO\"\n    elif X == 0:\n        return \"YES\"\n    else:\n        return \"YES\" if A == X else \"NO\"\n\nprint(solution(input()))"
    },
    {
        "number": 4557,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if A + B < X:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 4557,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if x > a + b:\n        return \"NO\"\n    if x == a:\n        return \"YES\"\n    if a == 0 and x == 0:\n        return \"YES\"\n    if a >= x:\n        return \"YES\"\n    if a * 2 > x:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4557,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if A + B < X:\n        return \"NO\"\n    elif B == X:\n        return \"YES\"\n    else:\n        return \"YES\" if A - B <= X else \"NO\""
    },
    {
        "number": 4557,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = list(map(int, stdin.split()))\n    if (a + b) < x:\n        return \"NO\"\n    if a == x:\n        return \"YES\"\n    if b == x:\n        return \"NO\"\n    if a == b:\n        return \"NO\"\n    if b - a < x - a:\n        return \"NO\"\n    if b - a == x - a:\n        return \"YES\"\n    if (b - a) % (x - a)!= 0:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4558,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    return str(X - (t * X // 100))\n\nprint(solution(input())) # 100 17"
    },
    {
        "number": 4558,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, t = map(int, stdin.split())\n    sand = x / t\n    return str(sand)"
    },
    {
        "number": 4558,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, t = map(int, stdin.split())\n    sand = x * (1 - (t / x))\n    return str(int(sand))\n"
    },
    {
        "number": 4558,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    X, t = list(map(int, stdin.strip().split()))\n    # calculate sand in the upper bulb after t seconds\n    sand = X * (1 - 1/t)\n    # round to the nearest integer\n    sand = round(sand)\n    # output result\n    return str(sand)"
    },
    {
        "number": 4558,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, t = map(int, stdin.split())\n    sand_left = x\n    for i in range(t):\n        sand_left -= 1\n    return str(sand_left)\n\nprint(solution(\"100 17\"))"
    },
    {
        "number": 4558,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, t = map(int, stdin.split())\n    sand = x * (t // 2)\n    if t % 2 == 1:\n        sand += x // 2\n    return str(sand)"
    },
    {
        "number": 4558,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, t = map(int, stdin.split())\n    return str(x - (x/t))"
    },
    {
        "number": 4558,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, t = map(int, stdin.strip().split())\n    sand_left = x - (t // 2)\n    sand_left -= t % 2\n    return str(sand_left)\n\n\ndef"
    },
    {
        "number": 4558,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, t = map(int, stdin.split())\n    return str(x * (t - 1))"
    },
    {
        "number": 4558,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    sand = X - (t * 1)\n    return str(sand)"
    },
    {
        "number": 4559,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n\n    # compute product of all elements in arr\n    product = 1\n    for i in arr:\n        product *= i\n\n    # check if the result exceeds 10^18, print -1 if yes\n    if product > 10**18:\n        return \"-1\"\n    else:\n        return str(product)"
    },
    {
        "number": 4559,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    nums = list(map(int, stdin.split()[1:]))\n    result = 1\n    for num in nums:\n        result *= num\n        if result > 10**18:\n            return '-1'\n    return str(result)"
    },
    {
        "number": 4559,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    result = 1\n    for i in A:\n        result *= i\n    if result > 10**18:\n        return \"-1\"\n    else:\n        return str(result)\n\nprint(solution(stdin))<|im_sep|>"
    },
    {
        "number": 4559,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    result = 1\n    for i in range(n):\n        result *= a[i]\n    if result > 10**18:\n        return '-1'\n    return str(result)"
    },
    {
        "number": 4559,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    nums = list(map(int, lines[1].split()))\n\n    result = 1\n    for num in nums:\n        result *= num\n        if result > 10 ** 18:\n            return '-1'\n\n    return str(result)"
    },
    {
        "number": 4559,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # compute product\n    product = 1\n    for a in A:\n        product *= a\n\n    # check if product exceeds limit\n    if product > 10**18:\n        return '-1'\n\n    # return product as string\n    return str(product)"
    },
    {
        "number": 4559,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    result = 1\n    for i in range(n):\n        result *= arr[i]\n        if result > 10**18:\n            return \"-1\"\n    return str(result)"
    },
    {
        "number": 4559,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = [int(stdin.readline().strip()) for _ in range(n)]\n\n    result = 1\n    for num in nums:\n        result *= num\n        if result > 10**18:\n            return \"-1\"\n\n    return str(result)"
    },
    {
        "number": 4559,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    ans = 1\n    for i in a:\n        ans *= i\n    if ans > 10**18:\n        return \"-1\"\n    else:\n        return str(ans)"
    },
    {
        "number": 4559,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    result = 1\n    for i in range(n):\n        result *= a[i]\n    if result > 10**18:\n        return \"-1\"\n    return str(result)"
    },
    {
        "number": 4560,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n\n    if N % 500!= 0:\n        return \"No\"\n\n    num_coins = N // 500\n    if num_coins > A:\n        return \"No\"\n\n    num_1_coins = num_coins - A\n    num_500_coins = num_coins\n\n    if num_1_coins == 0:\n        return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n\n    # If A is less than N, then we can't pay N with A coins\n    if A < N:\n        return \"No\"\n\n    # If N is less than or equal to 1000, then we can pay N using A 1-yen coins\n    if N <= 1000:\n        return \"Yes\"\n\n    # If N is greater than 1000, then we need to consider the case where A is 0\n    if A == 0:\n        return \"Yes\" if N % 1000 == 0 else \"No\"\n\n    # We need to consider the case where A is greater than 0\n    # We can pay N using either A 1-yen coins or A 500-yen coins\n    # We can also pay N using A-1 500-yen coins and 1 1-yen coin\n    return \"Yes\" if (N % 1000 == 0 or N % 1000 == 1) or (A > 0 and N % 1000 == 0) else \"No\""
    },
    {
        "number": 4560,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    if N <= A:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4560,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.strip().split())\n    if a == 0 and n >= 500:\n        return \"Yes\"\n    elif a >= n:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    if N % 500 == 0 and N // 500 >= A:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4560,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.strip().split())\n    if a * 500 >= n:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nstdin = \"2018\\n218\"\nprint(solution(stdin)) # Output: Yes"
    },
    {
        "number": 4560,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.strip().split())\n    if a > n:\n        return \"No\"\n    elif n % 500 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4560,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.strip().split())\n\n    if N % 500 == 0:\n        return \"Yes\" if N == 500 * A else \"No\"\n    else:\n        return \"Yes\" if N % 500 == A or N % 500 == A - 1 else \"No\""
    },
    {
        "number": 4560,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n <= a:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4560,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    num_500 = n // 500\n    num_1 = (n - num_500 * 500) // 1\n    if num_1 + num_500 * a < n:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4561,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.strip().split())\n    if a >= b or a >= x+1:\n        return \"delicious\"\n    elif a < x+1:\n        return \"safe\"\n    else:\n        return \"dangerous\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    if X + 1 <= B <= A:\n        return \"delicious\"\n    elif B <= A <= X + 1:\n        return \"safe\"\n    else:\n        return \"dangerous\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4561,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.strip().split())\n    if b <= a + x:\n        return \"dangerous\"\n    elif b <= a + x + 1:\n        return \"safe\"\n    else:\n        return \"delicious\""
    },
    {
        "number": 4561,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    if A > X and B <= X:\n        return \"safe\"\n    elif B <= X:\n        return \"dangerous\"\n    else:\n        return \"delicious\""
    },
    {
        "number": 4561,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.strip().split())\n    if a + b <= x:\n        return'safe'\n    elif a + b <= x + 1:\n        return 'dangerous'\n    else:\n        return 'delicious'"
    },
    {
        "number": 4561,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    if b > a + x:\n        return \"safe\"\n    elif b <= a + x:\n        return \"dangerous\"\n    else:\n        return \"unknown\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    if A + B > X:\n        return \"dangerous\"\n    elif B > X:\n        return \"safe\"\n    else:\n        return \"delicious\""
    },
    {
        "number": 4561,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.strip().split())\n    if a <= x:\n        if b <= x:\n            return \"delicious\"\n        else:\n            return \"safe\"\n    else:\n        if b <= x:\n            return \"dangerous\"\n        else:\n            return \"safe\""
    },
    {
        "number": 4561,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n\n    if B <= X:\n        return \"safe\"\n    elif A <= X:\n        return \"dangerous\"\n    else:\n        return \"delicious\"\n\nprint(solution(input()))"
    },
    {
        "number": 4561,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    if A <= X:\n        return \"dangerous\" if B <= X else \"safe\"\n    else:\n        return \"dangerous\" if B <= A else \"safe\" if B <= X else \"dangerous\""
    },
    {
        "number": 4562,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 0\n    while i**2 <= n:\n        i += 1\n    return i**2 - 1\n\nprint(solution(input()))"
    },
    {
        "number": 4562,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    i = 1\n    while i*i <= N:\n        i += 1\n    return i*i-1"
    },
    {
        "number": 4562,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = int(n**0.5)\n    if i**2 == n:\n        return str(n)\n    return str((i+1)**2)\n\ndef"
    },
    {
        "number": 4562,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while i*i <= n:\n        i += 1\n    return i-1"
    },
    {
        "number": 4562,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while i * i <= n:\n        i += 1\n    return (i - 1) ** 2\n\nprint(solution(input()))"
    },
    {
        "number": 4562,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    i = 1\n    while i*i <= n:\n        i += 1\n    return i-1"
    },
    {
        "number": 4562,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    N = int(stdin)\n    \n    # initialize variables\n    i = 1\n    while i*i <= N:\n        i += 1\n    \n    # return largest square number not exceeding N\n    return str(i-1) if i*i == N else str(N)"
    },
    {
        "number": 4562,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    i = 0\n    while i * i <= n:\n        i += 1\n    return i * i - 1 if i * i - 1 <= n else -1\n\ndef"
    },
    {
        "number": 4562,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    i = 1\n    while i*i <= n:\n        i += 1\n    return i*i - 1\n\nprint(solution(input()))"
    },
    {
        "number": 4562,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while i*i <= n:\n        i += 1\n    return i-1"
    },
    {
        "number": 4563,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t_arr = []\n    a_arr = []\n    for i in range(n):\n        t, a = map(int, stdin.readline().strip().split())\n        t_arr.append(t)\n        a_arr.append(a)\n\n    t_max = max(t_arr)\n    a_max = max(a_arr)\n\n    if t_max > a_max:\n        t_max, a_max = a_max, t_max\n\n    gcd = math.gcd(t_max, a_max)\n\n    total_votes = t_max + a_max\n\n    for i in range(1, n):\n        t, a = t_arr[i], a_arr[i]\n        total_votes += (t + a) * (t_max // gcd) * (a_max // gcd)\n        t_max = t_max * t // math.gcd(t_max, t)\n        a_max = a_max * a // math.gcd(a_max, a)\n\n    return str(total_votes)"
    },
    {
        "number": 4563,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ratios = list(map(int, stdin.readline().split()))\n    # print(ratios)\n    res = [0]*2\n    for i in range(1, n+1):\n        t, a = ratios[i-1]\n        t = t*res[0] + a*res[1]\n        a = t*res[1] + a*res[0]\n        res[0], res[1] = t, a\n    return str(res[0]*res[1])"
    },
    {
        "number": 4563,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    votes = [tuple(map(int, stdin.readline().strip().split())) for _ in range(N)]\n    total_votes = sum(votes[0])\n    min_votes = total_votes\n    for i in range(1, N):\n        current_votes = sum(votes[i])\n        total_votes += current_votes\n        min_votes = min(min_votes, total_votes)\n    return str(min_votes)"
    },
    {
        "number": 4563,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    ratios = [tuple(map(int, line.split())) for line in lines[1:]]\n    nums = [x for x, y in ratios]\n    d = {}\n    for i, num in enumerate(nums):\n        if num not in d:\n            d[num] = i\n    total = sum(nums)\n    i = n - 1\n    while True:\n        x, y = ratios[i]\n        if x > y:\n            nums[d[y]] = total - nums[d[y]] + nums[d[x]]\n            d[y] = i\n        else:\n            nums[d[x]] = total - nums[d[x]] + nums[d[y]]\n            d[x] = i\n        total = sum(nums)\n        if nums[d[x]] == 0:\n            return str(nums[d[y]])\n        elif nums[d[y]] == 0:\n            return str(nums[d[x]])\n        i -= 1"
    },
    {
        "number": 4563,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    votes = []\n    for _ in range(N):\n        T, A = map(int, stdin.readline().split())\n        votes.append((T, A))\n    result = votes[-1]\n    for i in range(N-2, -1, -1):\n        T, A = votes[i]\n        result = (result[0]+T, result[1]+A)\n    return str(result[0]*result[1]//gcd(result[0], result[1]))\n\ndef"
    },
    {
        "number": 4563,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    votes = [list(map(int, line.split())) for line in lines[1:]]\n    \n    if n == 1:\n        return str(max(votes[0]))\n    \n    dp = [[0, 0] for _ in range(n)]\n    dp[0] = votes[0]\n    for i in range(1, n):\n        dp[i][0] = max(dp[i-1][1], dp[i-1][0] + votes[i][0])\n        dp[i][1] = max(dp[i-1][0], dp[i-1][1] + votes[i][1])\n    \n    return str(max(dp[n-1][0], dp[n-1][1]))"
    },
    {
        "number": 4563,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    candidates = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    min_vote = float('inf')\n    for i in range(1, 2**n):\n        vote = [0, 0]\n        for j in range(n):\n            if i & (1 << j):\n                vote[0] += candidates[j][0]\n                vote[1] += candidates[j][1]\n        if vote[0] > vote[1]:\n            vote[0], vote[1] = vote[1], vote[0]\n        min_vote = min(min_vote, vote[0]+vote[1])\n    return str(min_vote)"
    },
    {
        "number": 4563,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    votes = [list(map(int, line.split())) for line in stdin]\n    \n    # Calculate lcm\n    t = votes[0][0]\n    a = votes[0][1]\n    for i in range(1, N):\n        t, a = lcm(t, votes[i][0]), lcm(a, votes[i][1])\n    \n    # Calculate minimum total number of votes\n    return t * a\n\ndef"
    },
    {
        "number": 4563,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin.readline().strip())\n    votes = [list(map(int, line.strip().split())) for line in stdin.readlines()]\n    \n    # check for coprimes\n    for i in range(n):\n        for j in range(i+1, n):\n            if math.gcd(votes[i][0], votes[j][0])!= 1:\n                return \"Impossible\"\n            if math.gcd(votes[i][1], votes[j][1])!= 1:\n                return \"Impossible\"\n    \n    # iterate through all possible total number of votes\n    max_total = sum(votes[0])\n    for i in range(1, n):\n        total = sum(votes[i])\n        # check if the total is less than the current max\n        if total < max_total:\n            continue\n        # check if the total is greater than the current max\n        for j in range(i+1, n):\n            # if the total is the same as the current max, check if the ratio is the same\n            if total == max_total and (votes[j][0]/votes[j][1]) == (votes[i][0]/votes[i][1]):\n                continue\n            # check if the total is greater than the current max and the ratio is the same\n            if total > max_total and (votes[j][0]/votes[j][1]) == (votes[i][0]/votes[i][1]):\n                continue\n            # update the max\n            max_total = total\n    \n    # return the minimum possible total number of votes\n    return str(max_total)"
    },
    {
        "number": 4563,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    ratios = [tuple(map(int, line.strip().split())) for line in stdin]\n    # find the minimum number of votes\n    min_votes = float('inf')\n    for i in range(n):\n        curr_ratio = ratios[i]\n        min_votes = min(min_votes, curr_ratio[0] + curr_ratio[1])\n        # update the ratios\n        for j in range(i+1, n):\n            ratios[j] = (curr_ratio[0]*ratios[j][0], curr_ratio[1]*ratios[j][1])\n    return str(min_votes)\n"
    },
    {
        "number": 4564,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = set(stdin)\n    if len(s) == 26:\n        return \"yes\"\n    else:\n        return \"no\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    input_str = stdin.strip()\n    \n    # check if all characters are different\n    if len(set(input_str)) == len(input_str):\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 4564,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(set(s)) == len(s):\n        return \"yes\"\n    return \"no\""
    },
    {
        "number": 4564,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem\n\n    Parameters\n    ----------\n    stdin : str\n        Input string\n\n    Returns\n    -------\n    str\n        Output string\n\n    \"\"\"\n    s = stdin.strip()\n    if len(set(s)) == len(s):\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 4564,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if len(set(S)) == len(S):\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 4564,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # convert the input string to a set of characters\n    chars = set(stdin)\n    # check if the length of the set is the same as the length of the string\n    if len(chars) == len(stdin):\n        return 'yes'\n    else:\n        return 'no'"
    },
    {
        "number": 4564,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = set(stdin.strip().lower())\n    if len(s) == 26:\n        return 'yes'\n    else:\n        return 'no'"
    },
    {
        "number": 4564,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    n = len(s)\n    if n < 2:\n        return \"yes\"\n    else:\n        for i in range(n):\n            for j in range(i+1,n):\n                if s[i] == s[j]:\n                    return \"no\"\n        return \"yes\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    chars = set(stdin.strip())\n    if len(chars) == len(stdin.strip()):\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 4564,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = set(stdin)\n    if len(s) == 26:\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 4565,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    S = stdin.readline().strip()\n    leader = -1\n    num_change = 0\n    \n    # Find leader and count number of people who need to change direction\n    for i in range(N):\n        if S[i] == 'W':\n            leader = i\n            num_change += N - i\n            break\n    \n    # Adjust direction of all other people\n    for i in range(N):\n        if i!= leader:\n            if S[i] == 'W':\n                num_change += 1\n            S = S[:i] + 'W' + S[i+1:]\n    \n    # Output result\n    return str(num_change)"
    },
    {
        "number": 4565,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, S = stdin.strip().split('\\n')\n    N = int(N)\n    \n    # count number of people who have to change their directions\n    count = 0\n    for i in range(N):\n        if S[i] == 'W':\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4565,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    S = lines[1]\n    count = 0\n    leader = S.index('W')\n    for i in range(N):\n        if S[i]!= S[leader]:\n            count += 1\n    return str(count)\n\nprint(solution(\"5\\nWEEWW\")) # Output: \"1\""
    },
    {
        "number": 4565,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    \n    # count the number of people who need to change their directions\n    count = 0\n    leader_index = 0\n    for i in range(n):\n        if s[i] == 'W':\n            count += 1\n            leader_index = i\n    \n    # adjust the direction of the people who need to change\n    if count % 2 == 0:\n        # if count is even, all the people from the west need to face east\n        for i in range(n):\n            if i!= leader_index:\n                s = s[:i] + 'E' + s[i+1:]\n    else:\n        # if count is odd, the leader needs to face east\n        s = s[:leader_index] + 'E' + s[leader_index+1:]\n    \n    # count the number of people who need to change their directions again\n    count = 0\n    for i in range(n):\n        if s[i]!= 'E':\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4565,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n\n    # Find the leader and count the number of people who have to change their directions\n    leader = S.index('E')\n    change_count = sum([1 if S[i]!= S[(leader + i) % N] else 0 for i in range(N)])\n\n    return str(change_count)"
    },
    {
        "number": 4565,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n    leader_index = S.index('W')\n    count = 0\n    for i in range(N):\n        if S[i]!= S[leader_index]:\n            count += 1\n    print(count)"
    },
    {
        "number": 4565,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    # find the leader\n    leader_idx = 0\n    for i in range(n):\n        if s[i] == 'W':\n            leader_idx = i\n            break\n\n    # count the number of people who need to change direction\n    count = 0\n    for i in range(n):\n        if s[i]!= s[(leader_idx + i) % n]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4565,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    # find leader and its direction\n    leader_idx = s.index('E')\n    leader_dir = 'E' if s[leader_idx] == 'E' else 'W'\n\n    # count number of people who need to change direction\n    count = 0\n    for i in range(n):\n        if i == leader_idx:\n            continue\n        if leader_dir == 'E' and s[i] == 'W':\n            count += 1\n        elif leader_dir == 'W' and s[i] == 'E':\n            count += 1\n\n    # output result\n    return str(count)"
    },
    {
        "number": 4565,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    leader = s.index('W')\n    count = 0\n    for i in range(n):\n        if i!= leader and s[i]!= s[leader]:\n            count += 1\n    return count"
    },
    {
        "number": 4565,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    # find the leader\n    leader = 0\n    for i in range(n):\n        if s[i] == 'W':\n            leader = i\n            break\n\n    # count the number of people who have to change their directions\n    count = 0\n    for i in range(n):\n        if s[i]!= s[leader]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4566,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    a = [[] for i in range(n+1)]\n    for i in range(1, m+1):\n        x, y = map(int, lines[i].split())\n        a[x].append(y)\n        a[y].append(x)\n    ans = [len(x) for x in a]\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 4566,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    adj_list = [[] for _ in range(n + 1)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        adj_list[a].append(b)\n        adj_list[b].append(a)\n    ans = []\n    for i in range(1, n + 1):\n        ans.append(len(adj_list[i]))\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 4566,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    roads = {}\n    for i in range(m):\n        a, b = map(int, stdin.strip().split())\n        if a not in roads:\n            roads[a] = []\n        if b not in roads:\n            roads[b] = []\n        roads[a].append(b)\n        roads[b].append(a)\n    output = []\n    for i in range(1, n+1):\n        output.append(len(roads[i]))\n    return '\\n'.join(map(str, output))\n"
    },
    {
        "number": 4566,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    adj_list = [[] for _ in range(n+1)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        adj_list[a].append(b)\n        adj_list[b].append(a)\n    ans = [0] * (n+1)\n    for i in range(1, n+1):\n        for j in adj_list[i]:\n            ans[i] += 1\n    return '\\n'.join(map(str, ans[1:]))\n\nstdin = \"\"\"4 3\n1 2\n2 3\n1 4\"\"\"\n\nprint(solution(stdin)) # Output: 2\\n2\\n1\\n1"
    },
    {
        "number": 4566,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    N, M = map(int, stdin.readline().split())\n    roads = []\n    for _ in range(M):\n        a, b = map(int, stdin.readline().split())\n        roads.append((a, b))\n\n    # Counting roads for each city\n    city_roads = [0] * (N + 1)\n    for a, b in roads:\n        city_roads[a] += 1\n        city_roads[b] += 1\n\n    # Printing output\n    for i in range(1, N + 1):\n        print(city_roads[i])\n\n    return \"\""
    },
    {
        "number": 4566,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    city_count = [0] * (n + 1)\n\n    for i in range(m):\n        a, b = map(int, stdin.readline().split())\n        city_count[a] += 1\n        city_count[b] += 1\n\n    for i in range(1, n + 1):\n        print(city_count[i])\n\n    return \"\"\n\nstdin = \"\"\"\n4 3\n1 2\n2 3\n1 4\n\"\"\"\n\nprint(solution(stdin)) # Output: 2\\n2\\n1\\n1"
    },
    {
        "number": 4566,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cities = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        cities[a-1].append(b-1)\n        cities[b-1].append(a-1)\n    counts = [len(c) for c in cities]\n    return '\\n'.join(map(str, counts))"
    },
    {
        "number": 4566,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution takes input from stdin and returns the output as a string.\n    \"\"\"\n    # Parse input\n    N, M = map(int, stdin.split())\n    roads = [tuple(map(int, stdin.split())) for _ in range(M)]\n\n    # Initialize city_to_roads dictionary\n    city_to_roads = {i: [] for i in range(1, N+1)}\n\n    # Add each road to city_to_roads dictionary\n    for road in roads:\n        city_to_roads[road[0]].append(road)\n        city_to_roads[road[1]].append(road)\n\n    # Print city_to_roads dictionary\n    result = []\n    for city in range(1, N+1):\n        result.append(len(city_to_roads[city]))\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 4566,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    adj_list = [[] for _ in range(N+1)]\n    \n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        adj_list[a].append(b)\n        adj_list[b].append(a)\n        \n    ans = []\n    for i in range(1, N+1):\n        ans.append(len(adj_list[i]))\n        \n    return '\\n'.join(map(str, ans))\n\nprint(solution(input()))"
    },
    {
        "number": 4566,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a graph, find the number of roads connected to each city.\n\n    Args:\n    stdin (str): A string containing the input data\n\n    Returns:\n    str: A string containing the output data\n    \"\"\"\n    N, M = map(int, stdin.split())\n    graph = [[] for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        graph[a-1].append(b-1)\n        graph[b-1].append(a-1)\n    result = []\n    for i in range(N):\n        result.append(len(graph[i]))\n    return \"\\n\".join(map(str, result))\n\ndef"
    },
    {
        "number": 4567,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    scores = [int(line) for line in lines[1:]]\n\n    # Calculate maximum score\n    max_score = sum(scores) + (n // 10)\n    if n % 10 == 0:\n        max_score -= 10\n    else:\n        max_score -= n % 10\n\n    return str(max_score)"
    },
    {
        "number": 4567,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    scores = list(map(int, stdin.readline().strip().split()))\n    max_score = sum(scores)\n    if max_score % 10 == 0:\n        max_score += 10\n    return str(max_score)"
    },
    {
        "number": 4567,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline())\n    scores = list(map(int, stdin.readline().split()))\n\n    # calculate max score\n    max_score = max(scores)\n\n    # check if max score is a multiple of 10\n    if max_score % 10 == 0:\n        max_score -= 1\n\n    return str(max_score)\n"
    },
    {
        "number": 4567,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    scores = [int(s) for s in lines[1:]]\n\n    # calculate maximum score\n    max_score = sum(scores)\n    if max_score % 10 == 0:\n        max_score += 10  # round up to next multiple of 10\n\n    return str(max_score)"
    },
    {
        "number": 4567,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    scores = list(map(int, stdin.readline().strip().split()))\n    max_score = 0\n    for i in range(n):\n        if scores[i] > 0:\n            max_score += scores[i]\n    max_score -= max_score % 10\n    return str(max_score)"
    },
    {
        "number": 4567,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input to integers\n    n = int(stdin.readline())\n    scores = [int(line) for line in stdin]\n\n    # Calculate maximum possible grade\n    max_grade = max(scores)\n\n    # If maximum grade is a multiple of 10, add 5 to get 25\n    if max_grade % 10 == 0:\n        max_grade += 5\n\n    # Return maximum grade\n    return str(max_grade)"
    },
    {
        "number": 4567,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    scores = list(map(int, stdin.readline().strip().split()))\n\n    # calculate max score\n    max_score = 0\n    for score in scores:\n        max_score += score\n\n    # check if max score is a multiple of 10\n    if max_score % 10 == 0:\n        max_score += 10\n\n    return str(max_score)"
    },
    {
        "number": 4567,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    scores = list(map(int, stdin.readline().strip().split()))\n    \n    # calculate max score\n    max_score = sum(scores)\n    \n    # check if multiple of 10 and adjust max_score\n    if max_score % 10 == 0:\n        max_score += 10\n    \n    return str(max_score)"
    },
    {
        "number": 4567,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    scores = list(map(int, stdin.readline().split()))\n    max_grade = 0\n    for score in scores:\n        max_grade += score\n    if max_grade % 10 == 0:\n        return str(0)\n    else:\n        return str(max_grade)"
    },
    {
        "number": 4567,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get N\n    N = int(stdin.readline().strip())\n\n    # Get s_i values\n    s = [int(x) for x in stdin.readline().strip().split()]\n\n    # Calculate max grade\n    max_grade = sum(s)\n    if max_grade % 10 == 0:\n        max_grade -= 1\n\n    return str(max_grade)"
    },
    {
        "number": 4568,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n\n    max_len = 0\n    max_count = 0\n\n    for i in range(N - 1):\n        for j in range(i + 2, N + 1):\n            count = len(set(S[i:j]))\n            if count > max_count:\n                max_len = j - i\n                max_count = count\n\n    return str(max_count)"
    },
    {
        "number": 4568,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    max_diff = 0\n    max_pos = 0\n\n    for i in range(1, n):\n        if len(set(s[:i])) + len(set(s[i:])) > max_diff:\n            max_diff = len(set(s[:i])) + len(set(s[i:]))\n            max_pos = i\n\n    return str(max_diff)"
    },
    {
        "number": 4568,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n\n    # Find optimal position\n    max_count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            # Count the number of distinct letters in both strings\n            count = len(set(S[i:j]))\n            if count > max_count:\n                max_count = count\n                max_pos = (i, j)\n\n    # Split the string at the optimal position\n    X = S[:max_pos[0]]\n    Y = S[max_pos[1]:]\n\n    # Count the number of distinct letters in both strings\n    count = len(set(X))\n    count += len(set(Y))\n\n    return str(count)"
    },
    {
        "number": 4568,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    # find optimal position\n    max_len = 0\n    max_pos = 0\n    for i in range(1, n):\n        if s[i-1]!= s[i]:\n            if i - max_pos > max_len:\n                max_len = i - max_pos\n                max_pos = i\n            elif i - max_pos == max_len:\n                max_pos = i\n\n    # split string at optimal position\n    x = s[:max_pos]\n    y = s[max_pos:]\n\n    # count distinct letters in both strings\n    count = 0\n    for i in range(len(x)):\n        if x[i] not in y:\n            count += 1\n        if y[i] not in x:\n            count += 1\n\n    # print result\n    print(count)"
    },
    {
        "number": 4568,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n    # initialize variables\n    max_count = 0\n    for i in range(N-1):\n        x, y = S[:i+1], S[i+1:]\n        count = len(set(x) & set(y))\n        if count > max_count:\n            max_count = count\n    return str(max_count)"
    },
    {
        "number": 4568,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    max_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            x = s[:i]\n            y = s[i:j]\n            z = s[j:]\n            count = len(set(x).intersection(set(y)))\n            if count > max_count:\n                max_count = count\n\n    return str(max_count)"
    },
    {
        "number": 4568,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    # Initialize variables\n    max_diff = 0\n    max_pos = -1\n    max_diff_x = 0\n    max_diff_y = 0\n\n    # Loop through all possible cut positions\n    for i in range(n):\n        # Get the two substrings\n        x = s[:i]\n        y = s[i:]\n\n        # Count the number of different letters in each substring\n        diff_x = len(set(x))\n        diff_y = len(set(y))\n\n        # Update max_diff and max_pos if we found a better cut\n        if diff_x + diff_y > max_diff:\n            max_diff = diff_x + diff_y\n            max_pos = i\n            max_diff_x = diff_x\n            max_diff_y = diff_y\n\n    # Print the result\n    print(max_diff_x + max_diff_y)\n\n    return ''"
    },
    {
        "number": 4568,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    # compute solution\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            x = s[:i]\n            y = s[i:j]\n            diff = len(set(x) & set(y))\n            if diff > max_diff:\n                max_diff = diff\n\n    # print solution\n    print(max_diff)\n\n    # return solution\n    return \"\""
    },
    {
        "number": 4568,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    # initialize variables\n    max_diff = 0\n    for i in range(n):\n        # calculate the number of different letters at each position\n        diff_left = 0\n        diff_right = 0\n        for j in range(n):\n            if s[j]!= s[i+j]:\n                diff_left += 1\n            if s[n-1-j]!= s[i+j]:\n                diff_right += 1\n        # update max_diff if necessary\n        max_diff = max(max_diff, diff_left+diff_right)\n\n    # print the result\n    return str(max_diff)"
    },
    {
        "number": 4568,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    # define variables\n    max_diff = 0\n    # loop through all possible cut positions\n    for i in range(1, n):\n        # get cut strings\n        x = s[:i]\n        y = s[i:]\n        # count number of different letters in cut strings\n        diff = len(set(x)) + len(set(y))\n        # update max_diff if needed\n        if diff > max_diff:\n            max_diff = diff\n    # return result\n    return str(max_diff)"
    },
    {
        "number": 4569,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input string\n    today_weather = stdin.strip()\n\n    # Define weather cycle\n    weather_cycle = ['Sunny', 'Cloudy', 'Rainy']\n\n    # Find index of today's weather in cycle\n    today_index = weather_cycle.index(today_weather)\n\n    # Predict weather for tomorrow\n    tomorrow_index = (today_index + 1) % 3\n\n    # Return predicted weather as string\n    return weather_cycle[tomorrow_index]"
    },
    {
        "number": 4569,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    weather = stdin.rstrip()\n    if weather == \"Sunny\":\n        return \"Cloudy\"\n    elif weather == \"Cloudy\":\n        return \"Rainy\"\n    else:\n        return \"Sunny\""
    },
    {
        "number": 4569,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    S = stdin.strip()\n    # predict weather tomorrow\n    if S == 'Sunny':\n        return 'Cloudy'\n    elif S == 'Cloudy':\n        return 'Rainy'\n    else:\n        return 'Sunny'"
    },
    {
        "number": 4569,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # We can use slicing to get the previous day's weather\n    prev_weather = stdin[-3:]\n    \n    # Based on the previous day's weather, we can predict the weather for the next day\n    if prev_weather == 'Sunny':\n        return 'Cloudy'\n    elif prev_weather == 'Cloudy':\n        return 'Rainy'\n    else:\n        return 'Sunny'"
    },
    {
        "number": 4569,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    weather = stdin.strip()\n    \n    # Define the weather cycle\n    cycle = ['Sunny', 'Cloudy', 'Rainy', 'Sunny', 'Cloudy', 'Rainy']\n    \n    # Get the index of the current weather in the cycle\n    current_index = cycle.index(weather)\n    \n    # Get the index of the next weather in the cycle\n    next_index = (current_index + 1) % len(cycle)\n    \n    # Return the next weather in the cycle\n    return cycle[next_index]"
    },
    {
        "number": 4569,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input weather from stdin\n    weather = stdin.strip()\n\n    # Define the expected weather for the next day based on the current weather\n    expected_weather = {\n        \"Sunny\": \"Cloudy\",\n        \"Cloudy\": \"Rainy\",\n        \"Rainy\": \"Sunny\"\n    }\n\n    # Return the expected weather for the next day\n    return expected_weather[weather]"
    },
    {
        "number": 4569,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    weather = stdin.strip().lower()\n    if weather == \"sunny\":\n        return \"cloudy\"\n    elif weather == \"cloudy\":\n        return \"rainy\"\n    elif weather == \"rainy\":\n        return \"sunny\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4569,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input string to lower case\n    s = stdin.strip().lower()\n    if s == \"sunny\":\n        return \"cloudy\"\n    elif s == \"cloudy\":\n        return \"rainy\"\n    elif s == \"rainy\":\n        return \"sunny\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4569,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    today_weather = stdin.strip()\n\n    # Define weather sequence\n    weather_sequence = [\"Sunny\", \"Cloudy\", \"Rainy\"]\n\n    # Find the index of today's weather in the sequence\n    today_index = weather_sequence.index(today_weather)\n\n    # Return the weather after today\n    return weather_sequence[(today_index + 1) % 3]\n"
    },
    {
        "number": 4569,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    weather = stdin.strip()\n    if weather == \"Sunny\":\n        return \"Cloudy\"\n    elif weather == \"Cloudy\":\n        return \"Rainy\"\n    elif weather == \"Rainy\":\n        return \"Sunny\""
    },
    {
        "number": 4570,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n <= b:\n        return str(b)\n    else:\n        return str(a * (n - b))"
    },
    {
        "number": 4570,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    if N <= 20 and A <= 100 and B <= 2000:\n        if N <= 20 and A <= 100:\n            if N <= 20:\n                fee = A * N\n                return str(fee)\n        if B <= 2000:\n            fee = B\n            return str(fee)\n    else:\n        return \"Invalid input.\""
    },
    {
        "number": 4570,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, a, b = map(int, lines[0].split())\n    if n <= 2:\n        return str(b)\n    if n <= 6:\n        return str(b)\n    if n <= 12:\n        return str(b)\n    if n <= 20:\n        return str(a * n)\n    return str(a * n)\n\nstdin = \"7 17 120\"\nprint(solution(stdin)) # Output: 119"
    },
    {
        "number": 4570,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, A, B = map(int, stdin.split())\n    \n    # calculate fee\n    plan1 = A * N\n    plan2 = B\n    \n    # find minimum fee\n    min_fee = min(plan1, plan2)\n    \n    # format output\n    return str(min_fee)"
    },
    {
        "number": 4570,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    if N <= 20 and A <= 100 and B <= 2000:\n        if N <= 4:\n            return str(B)\n        elif N <= 8:\n            return str(B)\n        else:\n            return str(A * (N // 2))\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4570,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, a, b = map(int, stdin.split())\n    # calculate min fee\n    if n <= 20:\n        x = a * n\n    else:\n        x = b\n    # return result as string\n    return str(x)"
    },
    {
        "number": 4570,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    # Plan 1\n    t = n // 24\n    if n % 24!= 0:\n        t += 1\n    fee_plan1 = a * t\n    # Plan 2\n    fee_plan2 = b * n\n    # Minimum fee\n    fee = min(fee_plan1, fee_plan2)\n    # Output\n    return str(fee)"
    },
    {
        "number": 4570,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.strip().split())\n    if N > 20 or A > 100 or B > 2000:\n        return \"Invalid input\"\n    if N > 2 * A:\n        return f\"{A * N}\"\n    else:\n        return f\"{B}\"\n    \nprint(solution(input()))"
    },
    {
        "number": 4570,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, A, B = map(int, stdin.split())\n\n    # compute min fee\n    min_fee = min(A * N, B)\n\n    # print min fee\n    return str(min_fee)"
    },
    {
        "number": 4570,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    if N <= 10:\n        return str(A * N)\n    else:\n        return str(B)"
    },
    {
        "number": 4571,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.split())\n\n    # Calculate expected time\n    total_time = 0\n    for i in range(m):\n        total_time += 1900 * (1/2)**i\n    for i in range(n-m):\n        total_time += 100\n    return str(total_time)"
    },
    {
        "number": 4571,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    expected_time = 1900\n    for i in range(1, n-m+2):\n        expected_time += (n-m+1-i)*expected_time//i\n    return str(expected_time)"
    },
    {
        "number": 4571,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = 100 * m\n    for i in range(n - m):\n        x += 1900\n    return str(x)\n\nprint(solution(input()))"
    },
    {
        "number": 4571,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.split())\n    \n    # Calculate expected execution time\n    expected_time = sum(1900 for i in range(M)) + sum(100 for i in range(N-M))\n    \n    # Return expected time as an integer\n    return str(expected_time)"
    },
    {
        "number": 4571,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    return str((1900 * m + 100 * (n - m)) // n)"
    },
    {
        "number": 4571,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    \n    total = 100 * (n - m) + 1900 * m\n    return str(total)"
    },
    {
        "number": 4571,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.split())\n    \n    # Compute expected time\n    X = 0\n    for i in range(1, M+1):\n        X += (M-i+1) * (2**(N-i)) * (100 if i <= M-M else 1900) // (M-M+1)\n    \n    # Return expected time\n    return str(X)"
    },
    {
        "number": 4571,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if M == 0:\n        return \"0\"\n    if M == 1:\n        return \"1900\"\n    ans = 0\n    for i in range(1, M+1):\n        ans += 1900 * i // (M+1)\n    return str(ans)"
    },
    {
        "number": 4571,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if M == N:\n        return str(100*N)\n    else:\n        expected_time = 0\n        probability = 0.5\n        for i in range(M):\n            expected_time += probability*1900\n            probability /= 2\n        for i in range(M, N):\n            expected_time += probability*100\n        return str(int(expected_time))"
    },
    {
        "number": 4571,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = m * 1900 + (n - m) * 100\n    return str(x)"
    },
    {
        "number": 4572,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    letters = set('abcdefghijklmnopqrstuvwxyz')\n    for letter in s:\n        if letter in letters:\n            letters.remove(letter)\n    if len(letters) == 0:\n        return 'None'\n    return min(letters)"
    },
    {
        "number": 4572,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a string S consisting of lowercase English letters, find the lexicographically (alphabetically) smallest lowercase English letter that does not occur in S.\n    If every lowercase English letter occurs in S, print None instead.\n    \"\"\"\n    s = set(stdin)\n    letters = list(string.ascii_lowercase)\n    for letter in letters:\n        if letter not in s:\n            return letter\n    return \"None\"\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4572,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    letters = set(s)\n    for letter in string.ascii_lowercase:\n        if letter not in letters:\n            return letter\n    return \"None\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Reading the input\n    s = stdin.strip()\n    \n    # Initializing a list with lowercase English letters\n    lowercase_letters = list('abcdefghijklmnopqrstuvwxyz')\n    \n    # Removing all the lowercase English letters from the list that occur in the string\n    for char in s:\n        if char.islower() and char in lowercase_letters:\n            lowercase_letters.remove(char)\n    \n    # If all the lowercase English letters occur in the string, return None\n    if len(lowercase_letters) == 0:\n        return 'None'\n    \n    # Return the lexicographically smallest lowercase English letter that does not occur in S\n    return sorted(lowercase_letters)[0]"
    },
    {
        "number": 4572,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # convert the input string to a list of characters\n    chars = list(stdin)\n    \n    # sort the list of characters\n    chars.sort()\n    \n    # find the smallest character that does not occur in the input string\n    for char in string.ascii_lowercase:\n        if char not in chars:\n            return char\n    \n    # if all characters occur in the input string, return None\n    return None"
    },
    {
        "number": 4572,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = set(stdin)\n    for i in range(97, 123):\n        c = chr(i)\n        if c not in s:\n            return c\n    return None"
    },
    {
        "number": 4572,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = ord('z') - ord('a') + 1\n    freq = [0] * n\n    for c in s:\n        if c.isalpha():\n            freq[ord(c) - ord('a')] += 1\n    for i in range(n):\n        if freq[i] == 0:\n            return chr(ord('a') + i)\n    return 'None'\n\ndef"
    },
    {
        "number": 4572,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = set(stdin)\n    if len(S) == 26:\n        return \"None\"\n    else:\n        for c in \"abcdefghijklmnopqrstuvwxyz\":\n            if c not in S:\n                return c"
    },
    {
        "number": 4572,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    for i in range(ord('a'), ord('z')+1):\n        if chr(i) not in s:\n            return chr(i)\n    return 'None'"
    },
    {
        "number": 4572,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().lower()\n    letters = set(string.ascii_lowercase)\n    for letter in s:\n        if letter in letters:\n            letters.remove(letter)\n    if letters:\n        return min(letters)\n    return \"None\""
    },
    {
        "number": 4573,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    l = n // 2\n    b = []\n\n    # Iterate through nums and calculate the median excluding each number\n    for i in range(n):\n        # Get all numbers excluding nums[i]\n        sub_nums = nums[:i] + nums[i+1:]\n\n        # If there is an even number of numbers, take the average of the middle two\n        if len(sub_nums) % 2 == 0:\n            mid = len(sub_nums) // 2\n            b.append((sub_nums[mid-1] + sub_nums[mid]) / 2)\n        # Otherwise, take the middle number\n        else:\n            mid = len(sub_nums) // 2\n            b.append(sub_nums[mid])\n\n    # Print b for each i\n    return '\\n'.join(map(str, b))"
    },
    {
        "number": 4573,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    X = list(map(int, stdin.readline().strip().split()))\n    B = [0] * N\n    \n    # finding the median of X_1, X_2,..., X_{i-1}\n    for i in range(1, N, 2):\n        if X[i] < X[i-1]:\n            X[i], X[i-1] = X[i-1], X[i]\n    \n    # finding the median of X_{i+1}, X_{i+2},..., X_N\n    for i in range(0, N-1, 2):\n        if X[i] < X[i+1]:\n            X[i], X[i+1] = X[i+1], X[i]\n    \n    # calculating B_i\n    for i in range(N):\n        left = X[i:].count(X[i])\n        right = X[:i].count(X[i])\n        B[i] = X[left+right]\n        \n    # printing the result\n    for b in B:\n        print(b)\n        \n    return ''"
    },
    {
        "number": 4573,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    b = []\n    for i in range(n):\n        nums_excluding_i = sorted(nums[:i] + nums[i+2:])\n        if len(nums_excluding_i) % 2 == 0:\n            b.append((nums_excluding_i[len(nums_excluding_i)//2 - 1] + nums_excluding_i[len(nums_excluding_i)//2])/2)\n        else:\n            b.append(nums_excluding_i[len(nums_excluding_i)//2])\n    return '\\n'.join(map(str, b))"
    },
    {
        "number": 4573,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    res = []\n    for i in range(n):\n        # if i is even then median is the average of the two middle numbers\n        if i % 2 == 0:\n            mid = i // 2\n            left_sum = sum(arr[:mid])\n            right_sum = sum(arr[mid+1:])\n            res.append((left_sum + right_sum) // 2)\n        # if i is odd then median is the middle number\n        else:\n            mid = (i + 1) // 2\n            res.append(sorted(arr[:mid] + arr[mid+1:])[mid-1])\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 4573,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    medians = []\n    for i in range(n):\n        nums_copy = nums[:i] + nums[i+2:]\n        nums_sorted = sorted(nums_copy)\n        if len(nums_sorted) % 2 == 0:\n            median = (nums_sorted[len(nums_sorted)//2] + nums_sorted[len(nums_sorted)//2 - 1]) / 2\n        else:\n            median = nums_sorted[len(nums_sorted)//2]\n        medians.append(median)\n    return '\\n'.join(map(str, medians))\n\nprint(solution(input()))"
    },
    {
        "number": 4573,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    X = list(map(int, stdin.readline().strip().split()))\n\n    # calculate B_i\n    B = []\n    for i in range(N):\n        X_i = X[:i] + X[i+2:]\n        B.append(sorted(X_i)[len(X_i)//2])\n\n    # print output\n    return '\\n'.join(map(str, B))"
    },
    {
        "number": 4573,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    X = list(map(int, stdin.readline().split()))\n    B = []\n    for i in range(N):\n        a = X[:i] + X[i+2:]\n        a.sort()\n        B.append(a[int((len(a)+1)/2)-1])\n    return '\\n'.join(map(str, B))"
    },
    {
        "number": 4573,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = map(int, stdin.strip().split())\n    nums.sort()\n    result = []\n    for i in range(n):\n        left = nums[:i] + nums[i+1:]\n        left.sort()\n        result.append(left[len(left)//2])\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4573,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    # find B_i for each i = 1, 2,..., N\n    b = []\n    for i in range(1, n+1):\n        # exclude X_i\n        y = x[:i-1] + x[i:n]\n        # find median\n        y.sort()\n        m = len(y)\n        if m % 2 == 0:\n            b.append((y[m//2-1] + y[m//2]) / 2)\n        else:\n            b.append(y[m//2])\n    # output B_i\n    return '\\n'.join(map(str, b))"
    },
    {
        "number": 4573,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    nums = list(map(int, lines[1].split()))\n    \n    # Initializing result list\n    result = []\n    \n    # Finding median of X_1, X_2,..., X_{i-1}\n    left_nums = sorted(nums[:N//2])\n    left_median = left_nums[N//2-1]\n    \n    # Finding median of X_2, X_3,..., X_{i+1}\n    right_nums = sorted(nums[N//2:])\n    right_median = right_nums[N//2-1]\n    \n    # Finding B_i for each i\n    for i in range(N):\n        if i < N//2:\n            result.append(left_nums[N//2-1-i])\n        else:\n            result.append(right_nums[N//2-1+i-N])\n    \n    # Printing output\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4574,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    # Sort sticks by length\n    a.sort()\n\n    # Compute maximum area\n    area = sum([a[i] * a[j] for i in range(n) for j in range(i+1, n) if a[j] > a[i]])\n    return str(area)"
    },
    {
        "number": 4574,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Sort the sticks in decreasing order\n    a.sort(reverse=True)\n\n    # Initialize variables for the result\n    max_area = 0\n    left = 0\n    right = sum(a[:4])\n\n    # Iterate through all possible combinations of the first two sticks\n    for i in range(n - 3):\n        for j in range(i + 1, n - 2):\n            # Calculate the area of the rectangle formed using the first two sticks\n            area = a[i] * a[j]\n\n            # Update the maximum area if the area formed using the current combination of sticks is greater\n            if area > max_area:\n                max_area = area\n\n            # Calculate the remaining length of the rectangle\n            rem_len = sum(a[k] for k in range(j + 1, n - 1))\n\n            # Update the left and right endpoints of the rectangle\n            left += a[j]\n            right -= a[i]\n\n            # Calculate the area of the rectangle formed using the remaining three sticks\n            area = (left + right) * rem_len\n\n            # Update the maximum area if the area formed using the current combination of sticks is greater\n            if area > max_area:\n                max_area = area\n\n    # Print the maximum area\n    if max_area == 0:\n        return \"0\"\n    else:\n        return str(max_area)"
    },
    {
        "number": 4574,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # Sort the sticks in descending order\n    a.sort(reverse=True)\n\n    # Check if we can form a rectangle using four sticks\n    for i in range(n - 3):\n        for j in range(i + 1, n - 2):\n            for k in range(j + 1, n - 1):\n                for l in range(k + 1, n):\n                    if a[i] + a[j] > a[k] + a[l]:\n                        area = a[i] * a[j]\n                        return str(area)\n\n    # If no rectangle can be formed, return 0\n    return \"0\""
    },
    {
        "number": 4574,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort(reverse=True)\n    \n    for i in range(n-3):\n        if a[i] + a[i+1] > a[i+2] + a[i+3]:\n            return str(a[i] * a[i+1])\n    \n    return \"0\""
    },
    {
        "number": 4574,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    area = 0\n    for i in range(n-3):\n        for j in range(i+1, n-2):\n            for k in range(j+1, n-1):\n                for l in range(k+1, n):\n                    if a[i]+a[j]+a[k]+a[l] <= a[-1]:\n                        area = max(area, a[i]*a[j]*a[k]*a[l])\n    if area > 0:\n        return str(area)\n    else:\n        return '0'"
    },
    {
        "number": 4574,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    sticks = list(map(int, stdin.split()))\n    n = sticks[0]\n    sticks = sticks[1:]\n    if n < 4:\n        return '0'\n    sticks.sort()\n    area = sticks[-1]*sticks[-2] + sticks[-3]*sticks[-4]\n    return str(area)"
    },
    {
        "number": 4574,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = map(int, stdin.split())\n    A.sort(reverse=True)\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    area = A[i] * A[j]\n                    if area == A[k] * A[l]:\n                        return str(area)\n                    res = max(res, area)\n    if res == 0:\n        return \"0\"\n    return str(res)"
    },
    {
        "number": 4574,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *lengths = map(int, stdin.split())\n    lengths.sort()\n\n    for i in range(n-3):\n        if lengths[i]+lengths[i+1] > lengths[i+2]+lengths[i+3]:\n            return str(lengths[i]*lengths[i+3])\n\n    return \"0\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # sort the sticks in descending order\n    a = sorted(a, reverse=True)\n\n    # check if the area can be formed\n    if sum(a[:4]) > max(a) or sum(a[1:5]) > max(a) or sum(a[2:6]) > max(a):\n        return \"0\"\n\n    # find the maximum area\n    max_area = 0\n    for i in range(n - 3):\n        for j in range(i + 1, n - 2):\n            for k in range(j + 1, n - 1):\n                for l in range(k + 1, n):\n                    area = a[i] * a[j] + a[j] * a[k] + a[k] * a[l] + a[l] * a[i]\n                    max_area = max(max_area, area)\n\n    return str(max_area)"
    },
    {
        "number": 4574,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # sort a in descending order\n    a = sorted(a, reverse=True)\n\n    # find the largest possible area\n    for i in range(n-3):\n        area = a[i]*a[i+1]*a[i+2]*a[i+3]\n        return str(area)\n\n    return \"0\""
    },
    {
        "number": 4575,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        day = 1\n        eaten = 0\n        while day <= d:\n            if day % (a[i] + 1) == 0:\n                eaten += 1\n            day += 1\n        count += eaten\n        if eaten < x:\n            return \"impossible\"\n    return count"
    },
    {
        "number": 4575,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, D, X = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Compute the number of chocolate pieces prepared at the beginning of the camp\n    total = 0\n    for i in range(N):\n        # Calculate the number of days a participant ate chocolate pieces\n        days = sum(range(1, (A[i] + 1) * 2, 2))\n\n        # Add the remaining chocolate pieces from the previous day(s) to the total\n        total += days * X\n\n        # Calculate the number of days until the next participant eats chocolate pieces\n        days_until_next = (A[i] + 1) * 2 - days\n\n        # Subtract the number of days until the next participant eats chocolate pieces\n        total -= days_until_next * A[i]\n\n    return str(total)"
    },
    {
        "number": 4575,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, D, X = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    choco_per_participant = sum(\n        (i // A[i-1] + 1) * A[i-1] + 1\n        for i in range(1, N+1)\n    )\n    choco_left = X\n    for i in range(1, N+1):\n        choco_left -= (choco_per_participant // N + 1) * (i // A[i-1] + 1) * A[i-1]\n    return choco_left + (choco_per_participant // N + 1) * D"
    },
    {
        "number": 4575,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    first_day = 1\n    count = 0\n    \n    while first_day <= d:\n        for i in range(n):\n            if first_day % (a[i] + 1) == 0:\n                count += 1\n        first_day += 1\n        \n    return count + x"
    },
    {
        "number": 4575,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, D, X = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    # Calculate number of pieces eaten\n    pieces_eaten = sum(a * (1 + a + a**2) for a in A)\n\n    # Calculate number of pieces prepared\n    pieces_prepared = X + pieces_eaten\n\n    # Return result\n    return str(pieces_prepared)"
    },
    {
        "number": 4575,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, D, X = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    \n    # calculate number of chocolate pieces prepared at the beginning of the camp\n    pieces = 0\n    for i in range(N):\n        pieces += sum(range(1, (A[i] + 1) * D, A[i] + 1)) + X\n    return str(pieces)"
    },
    {
        "number": 4575,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    d = int(lines[1].split()[0])\n    x = int(lines[1].split()[1])\n    a = list(map(int, lines[2:]))\n\n    total = 0\n    for i in range(n):\n        total += a[i] * (d // (a[i] + 1))\n\n    return str(total + x)"
    },
    {
        "number": 4575,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, D, X = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    \n    # Compute number of chocolate pieces at the beginning of the camp\n    count = 0\n    for i in range(N):\n        count += A[i] * (i + 1)\n    \n    # Add number of chocolate pieces left over\n    count += X\n    \n    return str(count)"
    },
    {
        "number": 4575,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    D = int(lines[1].split()[0])\n    X = int(lines[1].split()[1])\n    A = list(map(int, lines[2:]))\n    \n    total_eaten = 0\n    for i in range(N):\n        total_eaten += (A[i] * (A[i] + 1)) // 2\n    \n    days_left = D - (N * X)\n    prepared_chocolates = total_eaten - (days_left * X)\n    return str(prepared_chocolates)"
    },
    {
        "number": 4575,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, D, X = map(int, lines[0].split())\n    A = list(map(int, lines[1].split()))\n    ans = 0\n    for i in range(N):\n        for j in range(1, D+1):\n            if j % (A[i] + 1) == 0:\n                ans += 1\n    return str(X + ans)"
    },
    {
        "number": 4576,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x = map(int, stdin.split())\n    ways = 0\n    # number of ways to select A 500-yen coins\n    for i in range(a // 500 + 1):\n        # number of ways to select B 100-yen coins\n        for j in range(b // 100 + 1):\n            # number of ways to select C 50-yen coins\n            for k in range(c // 50 + 1):\n                # total value of selected coins\n                total = 500 * i + 100 * j + 50 * k\n                if total == x:\n                    ways += 1\n    return str(ways)\n\nstdin = \"\"\"\n2\n2\n2\n100\n\"\"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4576,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n\n    # Calculate the total number of 50-yen coins\n    total_50yen = X // 50\n\n    # Calculate the number of ways to select A 50-yen coins\n    if A > total_50yen:\n        ways_A = 0\n    elif A == total_50yen:\n        ways_A = 1\n    else:\n        ways_A = math.comb(total_50yen, A)\n\n    # Calculate the number of ways to select B 50-yen coins\n    if B > total_50yen:\n        ways_B = 0\n    elif B == total_50yen:\n        ways_B = 1\n    else:\n        ways_B = math.comb(total_50yen, B)\n\n    # Calculate the number of ways to select C 50-yen coins\n    if C > total_50yen:\n        ways_C = 0\n    elif C == total_50yen:\n        ways_C = 1\n    else:\n        ways_C = math.comb(total_50yen, C)\n\n    return str(ways_A + ways_B + ways_C)"
    },
    {
        "number": 4576,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x = map(int, stdin.split())\n    if x % 50!= 0:\n        return \"0\"\n    x //= 50\n    cnt = 0\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                if i * 50 + j * 100 + k * 50 == x:\n                    cnt += 1\n    return str(cnt)"
    },
    {
        "number": 4576,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = list(map(int, stdin.split()))\n    X = int(stdin.strip())\n    \n    if X % 50!= 0:\n        return '0'\n    \n    A_count = X // 50\n    B_count = (X - A_count * 50) // 10\n    C_count = X - A_count * 50 - B_count * 10\n    \n    result = 1\n    for i in range(A_count + 1):\n        for j in range(B_count + 1):\n            for k in range(C_count + 1):\n                if i*50 + j*10 + k*5 == X:\n                    result += 1\n    \n    return str(result)"
    },
    {
        "number": 4576,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes input from stdin in the form of three integers A, B and C representing the number of 500-yen coins,\n    100-yen coins and 50-yen coins respectively, and one integer X representing the total value of coins to be selected.\n    The function returns the number of ways to select coins that add up to X yen.\n    \"\"\"\n\n    A, B, C = map(int, stdin.strip().split())\n    X = 50 * ((X // 50) + (X % 50!= 0))\n\n    # Create a list of possible combinations of coins with the required total value\n    coins = [(0, 0, 0)]\n    for i in range(A+1):\n        for j in range(B+1):\n            for k in range(C+1):\n                if i+j+k <= X:\n                    coins.append((i, j, k))\n\n    # Count the number of ways to select coins with the required total value\n    count = 0\n    for coin in coins:\n        if coin[0] <= A and coin[1] <= B and coin[2] <= C and coin[0]+coin[1]+coin[2] == X:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4576,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n    count = 0\n    for i in range(X // 50 + 1):\n        for j in range(X // 100 + 1):\n            for k in range(X // 50 + 1):\n                if 50 * i + 100 * j + 50 * k == X:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4576,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n    dp = [[[0]*(X+1) for _ in range(C+1)] for _ in range(B+1)]\n    for i in range(B+1):\n        for j in range(C+1):\n            for k in range(X+1):\n                if k == 0:\n                    dp[i][j][k] = 1\n                elif i == 0 and j == 0 and k >= 50:\n                    dp[i][j][k] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j][k] = 1\n                elif i == 0:\n                    dp[i][j][k] = dp[i][j-1][k-50]\n                elif j == 0:\n                    dp[i][j][k] = dp[i-1][j][k]\n                else:\n                    dp[i][j][k] = dp[i-1][j][k] + dp[i][j-1][k-50*i]\n    return str(dp[B][C][X//50])\n"
    },
    {
        "number": 4576,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n    coins = [500, 100, 50]\n    dp = [[0] * (X+1) for _ in range(3)]\n    dp[0][0] = 1\n    for i in range(1, X+1):\n        for j in range(3):\n            if i >= coins[j]:\n                dp[j][i] = dp[j][i-coins[j]]\n            for k in range(3):\n                if j!= k and i >= coins[k]:\n                    dp[j][i] += dp[k][i-coins[k]]\n    return str(dp[0][X] + dp[1][X] + dp[2][X])"
    },
    {
        "number": 4576,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n    ways = 0\n    for i in range(X // 50 + 1):\n        for j in range(X // 50 + 1):\n            if i + j > X // 50:\n                break\n            k = X // 50 - i - j\n            if A >= i and B >= j and C >= k:\n                ways += 1\n    return str(ways)"
    },
    {
        "number": 4576,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n    n = X // 50\n    if n < 0:\n        return \"0\"\n    if A == B == C == 0:\n        return \"1\" if X == 0 else \"0\"\n    if n == 0:\n        return \"1\"\n    if A == B == C:\n        return str(A * n)\n    if A + B + C == 0:\n        return \"0\"\n    if A == 0:\n        return str(B * n + C * n)\n    if B == 0:\n        return str(A * n + C * n)\n    if C == 0:\n        return str(A * n + B * n)\n    return str(A * n1 + B * n2 + C * n3)"
    },
    {
        "number": 4577,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C >= A and C <= B:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C >= A and C <= B:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4577,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C < A or C > B:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4577,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.strip().split())\n    if C >= A and C <= B:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4577,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C < A or C > B:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4577,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.strip().split())\n    if C < A or C > B:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4577,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if c >= a and c <= b:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4577,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C < A or C > B:\n        return 'No'\n    else:\n        return 'Yes'"
    },
    {
        "number": 4577,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if c>=a and c<=b:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4577,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C >= A and C <= B:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4578,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    Moto = list(map(int, stdin.split()))\n    \n    doughnuts = [X // m for m in Moto]\n    for i in range(len(doughnuts)):\n        if doughnuts[i] == 0:\n            doughnuts[i] = 1\n    \n    return sum(doughnuts)\n\nprint(solution(\"3 1000\\n120\\n100\\n140\")) # Output: 9"
    },
    {
        "number": 4578,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.strip().split())\n    m = list(map(int, stdin.strip().split()))\n\n    # Sort the masses in ascending order\n    m.sort()\n\n    # Calculate the maximum number of doughnuts possible\n    max_doughnuts = (X // m[-1]) + 1\n    doughnuts = max_doughnuts * len(m)\n\n    # Check if the total number of doughnuts is greater than X\n    if doughnuts > X:\n        doughnuts = X\n\n    return str(doughnuts)\n"
    },
    {
        "number": 4578,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    m = list(map(int, stdin.split()))\n    total_moto = sum(m)\n    num_doughnuts = X // total_moto\n    remaining_moto = X % total_moto\n    for i in range(N):\n        if m[i] <= remaining_moto:\n            remaining_moto -= m[i]\n            num_doughnuts += 1\n    return str(num_doughnuts)\n\ndef"
    },
    {
        "number": 4578,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, X = map(int, stdin.split())\n    m = list(map(int, stdin.readline().split()))\n    \n    # calculate minimum required moto for each doughnut\n    min_moto = [X // N] * N\n    \n    # iterate over doughnuts, update minimum required moto\n    for i in range(N):\n        min_moto[i] = min(min_moto[i], m[i])\n    \n    # calculate total required moto\n    total_moto = sum(min_moto)\n    \n    # calculate maximum number of doughnuts that can be made\n    max_doughnuts = X // total_moto\n    \n    # print result\n    return str(max_doughnuts)"
    },
    {
        "number": 4578,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    moto = list(map(int, stdin.split()))\n    max_doughnuts = 0\n    total_moto = sum(moto)\n    if x < total_moto:\n        for i in range(n):\n            if moto[i] > x:\n                max_doughnuts += x // moto[i]\n                break\n            else:\n                max_doughnuts += 1\n                x -= moto[i]\n    else:\n        max_doughnuts = x // total_moto\n        x %= total_moto\n        if x > 0:\n            for i in range(n):\n                if moto[i] <= x:\n                    max_doughnuts += 1\n                    x -= moto[i]\n                else:\n                    break\n    return str(max_doughnuts)"
    },
    {
        "number": 4578,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.strip().split())\n    moto = list(map(int, stdin.strip().split()))\n    count = 0\n    for i in range(n):\n        if moto[i] >= x:\n            count += 1\n    return count"
    },
    {
        "number": 4578,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.strip().split())\n    m = list(map(int, stdin.strip().split()))\n    d = {i:0 for i in range(1, n+1)}\n    for i in range(n):\n        if m[i] <= x:\n            d[i+1] = (x//m[i])\n        else:\n            d[i+1] = 0\n    count = sum([max(d[i], 1) for i in range(1, n+1)])\n    return str(count)"
    },
    {
        "number": 4578,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, X = map(int, stdin.strip().split())\n    m = list(map(int, stdin.strip().split()))\n\n    # Calculate max number of doughnuts\n    max_doughnuts = X // sum(m)\n\n    # Check for each kind of doughnut\n    for i in range(N):\n        # Calculate max number of doughnuts for this kind\n        max_this_kind = X // m[i]\n        # Check if there are enough doughnuts of this kind to make a full set\n        if max_this_kind < max_doughnuts:\n            max_doughnuts = max_this_kind\n\n    # Return result\n    return str(max_doughnuts)"
    },
    {
        "number": 4578,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, X = map(int, stdin.split())\n    m = list(map(int, stdin.split()))\n    \n    # Calculate maximum number of doughnuts\n    max_doughnuts = X // sum(m)\n    \n    # Apply condition\n    for i in range(N):\n        if m[i] == 0:\n            return \"0\"\n        max_doughnuts = min(max_doughnuts, X // m[i])\n    \n    # Return result\n    return str(max_doughnuts)"
    },
    {
        "number": 4578,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, X = map(int, stdin.strip().split())\n    m = list(map(int, stdin.strip().split()))\n\n    # Calculate the minimum number of doughnuts required for each kind\n    min_doughnuts = [X // mi for mi in m]\n\n    # Calculate the maximum number of doughnuts that can be made\n    max_doughnuts = sum(min_doughnuts)\n\n    # Check if the maximum number of doughnuts is possible\n    if max_doughnuts < N:\n        return str(max_doughnuts)\n\n    # Calculate the maximum number of doughnuts that can be made with the condition\n    for i in range(N):\n        if m[i] >= X:\n            return str(N)\n\n    # The maximum number of doughnuts is possible with the condition\n    return str(max_doughnuts)"
    },
    {
        "number": 4579,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a list of items, count the number of unique items in the list.\n\n    Args:\n    stdin (str): A string of items separated by newline characters.\n\n    Returns:\n    str: A string indicating the number of unique items in the list.\n    \"\"\"\n    items = set(stdin.strip().split('\\n'))\n    return str(len(items))"
    },
    {
        "number": 4579,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    items = set()\n    for i in range(n):\n        items.add(stdin.readline().strip())\n    return str(len(items))\n"
    },
    {
        "number": 4579,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    items = set()\n    for i in range(n):\n        item = stdin.readline().strip()\n        items.add(item)\n    print(len(items))\n    return \"\""
    },
    {
        "number": 4579,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    items = [stdin.readline().strip() for _ in range(n)]\n\n    # count distinct items\n    distinct_items = set(items)\n\n    # print result\n    print(len(distinct_items))\n\n    return \"\""
    },
    {
        "number": 4579,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    items = set()\n    for i in range(n):\n        item = stdin.readline().strip()\n        items.add(item)\n    print(len(items))"
    },
    {
        "number": 4579,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    items = set()\n    for i in range(N):\n        items.add(stdin.readline().strip())\n    print(len(items))\n    return \"\""
    },
    {
        "number": 4579,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    N = int(stdin.readline().strip())\n    items = set()\n    for i in range(N):\n        items.add(stdin.readline().strip())\n\n    # Counting number of distinct items\n    num_items = len(items)\n\n    # Printing the output\n    return f\"{num_items}\""
    },
    {
        "number": 4579,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline())\n    items = stdin.readline().strip().split()\n\n    # count number of distinct items\n    kinds = len(set(items))\n\n    # print output\n    print(kinds)\n\n    return str(kinds)"
    },
    {
        "number": 4579,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    items = set()\n    for i in range(1, n+1):\n        item = lines[i]\n        items.add(item)\n    return str(len(items))"
    },
    {
        "number": 4579,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    items = set()\n    for i in range(n):\n        items.add(stdin.readline().strip())\n    return str(len(items))"
    },
    {
        "number": 4580,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    ratings = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize color counts to zero\n    counts = [0] * 8\n\n    # Iterate through ratings and count colors\n    for rating in ratings:\n        if rating <= 399:\n            counts[0] += 1\n        elif rating <= 799:\n            counts[1] += 1\n        elif rating <= 1199:\n            counts[2] += 1\n        elif rating <= 1599:\n            counts[3] += 1\n        elif rating <= 1999:\n            counts[4] += 1\n        elif rating <= 2399:\n            counts[5] += 1\n        elif rating <= 2799:\n            counts[6] += 1\n        elif rating <= 3199:\n            counts[7] += 1\n        else:\n            counts[rating // 400 - 2] += 1\n\n    # Count minimum and maximum possible colors\n    min_colors = max_colors = 0\n    for count in counts:\n        if count > 0:\n            max_colors += 1\n            if count == 1:\n                min_colors += 1\n\n    # Output result\n    return f\"{min_colors} {max_colors}\""
    },
    {
        "number": 4580,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    colors = ['gray', 'brown', 'green', 'cyan', 'blue', 'yellow', 'orange','red']\n    count = [0] * 8\n    for i in a:\n        if i <= 399:\n            count[0] += 1\n        elif i <= 799:\n            count[1] += 1\n        elif i <= 1199:\n            count[2] += 1\n        elif i <= 1599:\n            count[3] += 1\n        elif i <= 1999:\n            count[4] += 1\n        elif i <= 2399:\n            count[5] += 1\n        elif i <= 2799:\n            count[6] += 1\n        else:\n            count[7] += 1\n    return f\"{min(count)} {max(count)}\""
    },
    {
        "number": 4580,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Get the number of users\n    N = int(stdin.readline())\n    # Get the ratings of the users\n    a = list(map(int, stdin.readline().split()))\n\n    # Create a list to store the colors\n    colors = ['gray', 'brown', 'green', 'cyan', 'blue', 'yellow', 'orange','red']\n    # Initialize a dictionary to store the frequency of each color\n    freq = {colors[i]: 0 for i in range(8)}\n\n    # Loop through the ratings and assign colors based on the rating\n    for rating in a:\n        if rating <= 399:\n            freq['gray'] += 1\n        elif rating <= 799:\n            freq['brown'] += 1\n        elif rating <= 1199:\n            freq['green'] += 1\n        elif rating <= 1599:\n            freq['cyan'] += 1\n        elif rating <= 1999:\n            freq['blue'] += 1\n        elif rating <= 2399:\n            freq['yellow'] += 1\n        elif rating <= 2799:\n            freq['orange'] += 1\n        else:\n            freq['red'] += 1\n\n    # Get the minimum and maximum possible numbers of different colors\n    min_colors = max_colors = 0\n    for count in freq.values():\n        if count > 0:\n            min_colors += 1\n            max_colors += 1\n        else:\n            break\n\n    # Print the minimum and maximum possible numbers of different colors\n    return f\"{min_colors} {max_colors}\""
    },
    {
        "number": 4580,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    ratings = [int(rating) for rating in stdin.readline().strip().split()]\n\n    color_counts = {\n        \"gray\": 0,\n        \"brown\": 0,\n        \"green\": 0,\n        \"cyan\": 0,\n        \"blue\": 0,\n        \"yellow\": 0,\n        \"orange\": 0,\n        \"red\": 0,\n    }\n\n    for rating in ratings:\n        if rating <= 399:\n            color_counts[\"gray\"] += 1\n        elif rating <= 799:\n            color_counts[\"brown\"] += 1\n        elif rating <= 1199:\n            color_counts[\"green\"] += 1\n        elif rating <= 1599:\n            color_counts[\"cyan\"] += 1\n        elif rating <= 1999:\n            color_counts[\"blue\"] += 1\n        elif rating <= 2399:\n            color_counts[\"yellow\"] += 1\n        elif rating <= 2799:\n            color_counts[\"orange\"] += 1\n        elif rating <= 3199:\n            color_counts[\"red\"] += 1\n        else:\n            color_counts[None] += 1\n\n    color_counts = {color: count for color, count in color_counts.items() if count > 0}\n\n    min_colors = len(color_counts)\n    max_colors = len(ratings) // 8\n\n    return f\"{min_colors} {max_colors}\"\n\nstdin = \"\"\"4\n2100 2500 2700 2700\"\"\"\n\nprint(solution(stdin))  # Output: 2 2"
    },
    {
        "number": 4580,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    colors = set(stdin.readline().strip().split())\n    if 3200 in colors:\n        colors.discard(3200)\n    min_colors = len(colors)\n    max_colors = min_colors\n    for color in colors:\n        if int(color) >= 2400:\n            max_colors += 1\n        else:\n            break\n    return f\"{min_colors} {max_colors}\""
    },
    {
        "number": 4580,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(i) for i in stdin.readline().strip().split()]\n    count_dict = {}\n    for i in range(n):\n        if a[i] <= 3199:\n            if 1 <= a[i] <= 399:\n                color = \"gray\"\n            elif 400 <= a[i] <= 799:\n                color = \"brown\"\n            elif 800 <= a[i] <= 1199:\n                color = \"green\"\n            elif 1200 <= a[i] <= 1599:\n                color = \"cyan\"\n            elif 1600 <= a[i] <= 1999:\n                color = \"blue\"\n            elif 2000 <= a[i] <= 2399:\n                color = \"yellow\"\n            elif 2400 <= a[i] <= 2799:\n                color = \"orange\"\n            elif 2800 <= a[i] <= 3199:\n                color = \"red\"\n            else:\n                color = \"unknown\"\n        else:\n            color = \"unknown\"\n        if color in count_dict:\n            count_dict[color] += 1\n        else:\n            count_dict[color] = 1\n    min_color = 8\n    max_color = 0\n    for color, count in count_dict.items():\n        if count > max_color:\n            max_color = count\n        if count < min_color:\n            min_color = count\n    return f\"{min_color} {max_color}\""
    },
    {
        "number": 4580,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # Count number of different colors\n    colors = set()\n    for rating in a:\n        if rating <= 399:\n            colors.add('gray')\n        elif rating <= 799:\n            colors.add('brown')\n        elif rating <= 1199:\n            colors.add('green')\n        elif rating <= 1599:\n            colors.add('cyan')\n        elif rating <= 1999:\n            colors.add('blue')\n        elif rating <= 2399:\n            colors.add('yellow')\n        elif rating <= 2799:\n            colors.add('orange')\n        elif rating <= 3199:\n            colors.add('red')\n        else:\n            colors.add(input('Enter color for rating {}: '.format(rating)))\n\n    # Calculate min and max number of different colors\n    min_colors = len(colors)\n    max_colors = len(colors)\n    for i in range(N):\n        for j in range(i + 1, N):\n            if a[i] == a[j]:\n                min_colors = min(min_colors, len(set(colors)))\n            else:\n                diff = abs(a[i] - a[j])\n                if diff <= 399:\n                    colors.add('gray')\n                elif diff <= 799:\n                    colors.add('brown')\n                elif diff <= 1199:\n                    colors.add('green')\n                elif diff <= 1599:\n                    colors.add('cyan')\n                elif diff <= 1999:\n                    colors.add('blue')\n                elif diff <= 2399:\n                    colors.add('yellow')\n                elif diff <= 2799:\n                    colors.add('orange')\n                else:\n                    colors.add('red')\n                max_colors = max(max_colors, len(set(colors)))\n                colors.remove('gray')\n                colors.remove('brown')\n                colors.remove('green')\n                colors.remove('cyan')\n                colors.remove('blue')\n                colors.remove('yellow')\n                colors.remove('orange')\n                colors.remove('red')\n\n    # Print result\n    return str(min_colors) +'' + str(max_colors)\n"
    },
    {
        "number": 4580,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    colors = ['gray', 'brown', 'green', 'cyan', 'blue', 'yellow', 'orange','red']\n    count_colors = [0] * 8\n    \n    for rating in a:\n        if rating <= 399:\n            count_colors[0] += 1\n        elif rating <= 799:\n            count_colors[1] += 1\n        elif rating <= 1199:\n            count_colors[2] += 1\n        elif rating <= 1599:\n            count_colors[3] += 1\n        elif rating <= 1999:\n            count_colors[4] += 1\n        elif rating <= 2399:\n            count_colors[5] += 1\n        elif rating <= 2799:\n            count_colors[6] += 1\n        elif rating <= 3199:\n            count_colors[7] += 1\n        else:\n            count_colors = [8] * 8\n    \n    min_count_colors = max_count_colors = 0\n    \n    for i in range(8):\n        if count_colors[i] > 0:\n            min_count_colors += 1\n            max_count_colors += 1\n        elif i == 0:\n            min_count_colors += 1\n        elif count_colors[i-1] > 0:\n            max_count_colors += 1\n    \n    return str(min_count_colors) + \" \" + str(max_count_colors)\n\nstdin = \"\"\"\n4\n2100 2500 2700 2700\n\"\"\"\n\nprint(solution(stdin)) # Output: 2 2"
    },
    {
        "number": 4580,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # Sort ratings in ascending order\n    a.sort()\n    \n    # Initialize variables\n    num_colors = 0\n    colors = set()\n    prev_rating = a[0]\n    \n    # Iterate over ratings and assign colors\n    for rating in a:\n        # If rating is between 1 and 399, color is gray\n        if rating <= 399:\n            colors.add(\"gray\")\n        # If rating is between 400 and 799, color is brown\n        elif rating <= 799:\n            colors.add(\"brown\")\n        # If rating is between 800 and 1199, color is green\n        elif rating <= 1199:\n            colors.add(\"green\")\n        # If rating is between 1200 and 1599, color is cyan\n        elif rating <= 1599:\n            colors.add(\"cyan\")\n        # If rating is between 1600 and 1999, color is blue\n        elif rating <= 1999:\n            colors.add(\"blue\")\n        # If rating is between 2000 and 2399, color is yellow\n        elif rating <= 2399:\n            colors.add(\"yellow\")\n        # If rating is between 2400 and 2799, color is orange\n        elif rating <= 2799:\n            colors.add(\"orange\")\n        # If rating is between 2800 and 3199, color is red\n        elif rating <= 3199:\n            colors.add(\"red\")\n        # If rating is 3200 or higher, color is chosen freely\n        else:\n            colors.add(input(\"Enter color for rating {}: \".format(rating)))\n        \n        # If rating is different from previous rating, increment num_colors\n        if rating!= prev_rating:\n            num_colors += 1\n            prev_rating = rating\n    \n    # Return minimum and maximum possible number of different colors\n    return \"{} {}\".format(min(colors), max(colors))"
    },
    {
        "number": 4580,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    colors = set()\n    for i in range(n):\n        rating = int(stdin.readline().strip())\n        if rating >= 3200:\n            colors.add(\"red\")\n        elif rating >= 2800:\n            colors.add(\"orange\")\n        elif rating >= 2400:\n            colors.add(\"yellow\")\n        elif rating >= 2000:\n            colors.add(\"blue\")\n        elif rating >= 1600:\n            colors.add(\"cyan\")\n        elif rating >= 1200:\n            colors.add(\"green\")\n        elif rating >= 800:\n            colors.add(\"brown\")\n        else:\n            colors.add(\"gray\")\n    return f\"{len(colors)} {8 - len(colors)}\"\n\nwith open(\"input.txt\") as file:\n    print(solution(file.read()))"
    },
    {
        "number": 4581,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    price = 700\n    if S[0] == 'o':\n        price += 100\n    if S[1] == 'o':\n        price += 100\n    if S[2] == 'o':\n        price += 100\n    return str(price)\n\nprint(solution(input()))"
    },
    {
        "number": 4581,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ramen_price = 700\n    topping_prices = [100, 200, 100]\n    toppings = [False, False, False]\n    for i in range(3):\n        if stdin[i] == \"o\":\n            toppings[i] = True\n    if toppings[0]:\n        ramen_price += topping_prices[0]\n    if toppings[1]:\n        ramen_price += topping_prices[1]\n    if toppings[2]:\n        ramen_price += topping_prices[2]\n    return str(ramen_price)"
    },
    {
        "number": 4581,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    # topping_price = {'o': 100, 'x': 0}\n    # ramen_price = 700\n    # topping_counts = {'o': 0, 'x': 0}\n    # for char in s:\n    #     topping_counts[char] += 1\n    # total_price = ramen_price + sum(topping_price[char] * count for char, count in topping_counts.items())\n    # return str(total_price)\n    total_price = 700\n    if s[0] == 'o':\n        total_price += 100\n    if s[1] == 'o':\n        total_price += 100\n    if s[2] == 'o':\n        total_price += 100\n    return str(total_price)"
    },
    {
        "number": 4581,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    # convert the string to a binary representation of the toppings\n    toppings = int(s[0] == 'o') + 2 * int(s[1] == 'o') + 4 * int(s[2] == 'o')\n    # calculate the price and round to two decimal places\n    price = 700 + toppings * 100\n    return str(round(price / 100, 2))\n"
    },
    {
        "number": 4581,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    ramen_price = 700\n    if s[0] == 'o':\n        ramen_price += 100\n    if s[1] == 'o':\n        ramen_price += 100\n    if s[2] == 'o':\n        ramen_price += 100\n    return str(ramen_price)\n\nprint(solution(input()))"
    },
    {
        "number": 4581,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    price = 700\n    if s[0] == 'o':\n        price += 100\n    if s[1] == 'o':\n        price += 100\n    if s[2] == 'o':\n        price += 100\n    return str(price)"
    },
    {
        "number": 4581,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    egg = S[0] == 'o'\n    pork = S[1] == 'o'\n    green = S[2] == 'o'\n    price = 700 + 100 * sum([egg, pork, green])\n    return str(price)"
    },
    {
        "number": 4581,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    toppings = {\n        'o': 100,\n        'x': 0\n    }\n    s = stdin.strip()\n    price = 700\n    for topping in s:\n        price += toppings[topping]\n    return str(price)"
    },
    {
        "number": 4581,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input string to list\n    toppings = list(stdin.strip())\n    # Calculate total price\n    total_price = 700 + (100 if toppings[0] == 'o' else 0) + (100 if toppings[1] == 'o' else 0) + (100 if toppings[2] == 'o' else 0)\n    # Return total price as string\n    return str(total_price)"
    },
    {
        "number": 4581,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    price = 700\n    if s[0] == 'o':\n        price += 100\n    if s[1] == 'o':\n        price += 100\n    if s[2] == 'o':\n        price += 100\n    return str(price)"
    },
    {
        "number": 4582,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == 'H':\n        if b == 'H':\n            return 'H'\n        else:\n            return 'D'\n    else:\n        if b == 'H':\n            return 'D'\n        else:\n            return 'H'"
    },
    {
        "number": 4582,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split()\n\n    if a == 'H':\n        if b == 'H':\n            return 'H'\n        elif b == 'D':\n            return 'D'\n    elif a == 'D':\n        if b == 'H':\n            return 'D'\n        elif b == 'D':\n            return 'H'"
    },
    {
        "number": 4582,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split()\n    if a == 'H':\n        if b == 'H':\n            return 'H'\n        else:\n            return 'D'\n    else:\n        if b == 'H':\n            return 'D'\n        else:\n            return 'H'"
    },
    {
        "number": 4582,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split()\n    if a == 'H':\n        if b == 'H':\n            return 'H'\n        else:\n            return 'D'\n    else:\n        if b == 'H':\n            return 'D'\n        else:\n            return 'H'"
    },
    {
        "number": 4582,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(str, stdin.split())\n    if a == \"H\":\n        if b == \"H\":\n            return \"H\"\n        else:\n            return \"D\"\n    else:\n        if b == \"H\":\n            return \"D\"\n        else:\n            return \"H\""
    },
    {
        "number": 4582,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == 'H':\n        if b == 'H':\n            return 'H'\n        else:\n            return 'D'\n    else:\n        if b == 'H':\n            return 'D'\n        else:\n            return 'H'"
    },
    {
        "number": 4582,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(str, stdin.split())\n    if a == 'H' and b == 'H':\n        return 'H'\n    else:\n        return 'D'"
    },
    {
        "number": 4582,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split()\n    if a == 'H' and b == 'H':\n        return 'H'\n    elif a == 'H' and b == 'D':\n        return 'D'\n    elif a == 'D' and b == 'H':\n        return 'D'\n    elif a == 'D' and b == 'D':\n        return 'H'\n    else:\n        return 'Invalid Input'"
    },
    {
        "number": 4582,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split()\n    if a == 'H':\n        if b == 'H':\n            return 'D'\n        else:\n            return 'H'\n    else:\n        if b == 'D':\n            return 'H'\n        else:\n            return 'D'"
    },
    {
        "number": 4582,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == \"D\" and b == \"D\":\n        return \"D\"\n    else:\n        return \"H\""
    },
    {
        "number": 4583,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    a, b, c, d = map(int, stdin.split())\n\n    # calculate formula A + B - C + D = 7\n    formula = f\"{a}+{b}-{c}+{d}=7\"\n\n    return formula"
    },
    {
        "number": 4583,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    formula = f\"{A}+{B}-{C}+{D}=7\"\n    return formula"
    },
    {
        "number": 4583,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input from stdin and split it into a list of integers\n    inputs = list(map(int, stdin.strip().split()))\n\n    # Define the formula and the operators\n    formula = f\"{inputs[0]}+{inputs[1]}+{inputs[2]}+{inputs[3]}=7\"\n\n    # Return the formula\n    return formula\n"
    },
    {
        "number": 4583,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # convert input from string to list of integers\n    ticket = list(map(int, stdin.split()))\n    \n    # calculate the answer for each permutation of the operators\n    for op1 in ['+', '-']:\n        for op2 in ['+', '-']:\n            for op3 in ['+', '-']:\n                # replace the operators in the formula and check if it is equal to 7\n                formula = f'{ticket[0]} {op1} {ticket[1]} {op2} {ticket[2]} {op3} {ticket[3]} = 7'\n                if eval(formula):\n                    # return the formula with the replaced operators\n                    return formula.replace(' ', '')\n    \n    # return an error message if no valid solution is found\n    return 'No solution found'"
    },
    {
        "number": 4583,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return f\"{a}+{b}+{c}+{d}=7\""
    },
    {
        "number": 4583,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    formula = f\"{A}+{B}-{C}+{D}=7\"\n    return formula"
    },
    {
        "number": 4583,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    return f\"{A}+{B}+{C}+{D}=7\"\n\nprint(solution(input()))"
    },
    {
        "number": 4583,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    A, B, C, D = map(int, stdin.strip().split())\n    \n    # Finding the formula\n    formula = f\"{A}+{B}+{C}+{D} = 7\"\n    \n    # Returning the solution\n    return formula\n"
    },
    {
        "number": 4583,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    formula = f\"{A}+{B}+{C}+{D}={7}\"\n    return formula\n"
    },
    {
        "number": 4583,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.strip().split())\n    formula = f\"{A}+{B}+{C}+{D}=7\"\n    return formula"
    },
    {
        "number": 4584,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    result = []\n\n    for i in range(2, n+1):\n        boss = a[i-1]\n        subordinates = 1\n        for j in range(2, i):\n            if a[j-1] == boss:\n                subordinates += 1\n\n        result.append(subordinates)\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4584,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n\n    # Initialize dictionary of immediate subordinates\n    subordinates = {}\n    for i in range(2, N+1):\n        subordinates[i] = set()\n\n    # Add subordinates to dictionary\n    for i in range(2, N+1):\n        subordinates[A[i]].add(i)\n\n    # Calculate number of subordinates for each member\n    count = [0] * (N+1)\n    for i in range(2, N+1):\n        for j in subordinates[i]:\n            count[j] += 1\n\n    # Print count of subordinates for each member\n    for i in range(1, N+1):\n        print(count[i])"
    },
    {
        "number": 4584,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # initialize output list\n    output = []\n\n    # iterate over all members except the member numbered 1\n    for i in range(2, N+1):\n        # initialize subordinate counter\n        count = 0\n\n        # iterate over all members numbered 1 to i-1\n        for j in range(1, i):\n            # if the current member's boss is i, then i is a subordinate\n            if A[j] == i:\n                count += 1\n\n        # add subordinate counter to output list\n        output.append(count)\n\n    # join output list with newlines and return as string\n    return '\\n'.join(map(str, output))"
    },
    {
        "number": 4584,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    boss = [0] * (n + 1)\n    for i in range(2, n + 1):\n        boss[i] = a[i]\n\n    for i in range(2, n + 1):\n        if boss[i] == 0:\n            continue\n        boss[boss[i]] += 1\n\n    subordinates = [0] * (n + 1)\n    for i in range(2, n + 1):\n        subordinates[i] = boss[i]\n\n    for i in range(2, n + 1):\n        if subordinates[i] == 0:\n            continue\n        subordinates[subordinates[i]] -= 1\n\n    result = []\n    for i in range(2, n + 1):\n        result.append(subordinates[i])\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4584,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # Initialize a list of size n to 0\n    subordinates = [0] * n\n\n    # For each member, add 1 to the number of subordinates of the immediate boss\n    for i in range(2, n+1):\n        boss_id = a[i-1]\n        subordinates[boss_id-1] += 1\n\n    # Output the number of subordinates of each member\n    for i in range(n):\n        print(subordinates[i])"
    },
    {
        "number": 4584,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n\n    # Initialize variables\n    subordinates = [0] * N\n\n    # Iterate through all members except member 1\n    for i in range(2, N+1):\n        # Find the boss of the current member\n        boss = A[i-1]\n        # Count the number of subordinates of the boss\n        subordinates[boss-1] += 1\n\n    # Output the number of subordinates for each member\n    for i in range(1, N+1):\n        print(subordinates[i-1])\n\n    # Convert the list of subordinates into a string\n    return '\\n'.join(map(str, subordinates))"
    },
    {
        "number": 4584,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    count = [0] * N\n\n    # Loop through all members\n    for i in range(1, N):\n        # If the immediate boss of this member is its boss, increment the count of the boss\n        if A[i] == A[i-1]:\n            count[A[i-1]-1] += 1\n\n    # Print the count of each member\n    for c in count:\n        print(c)\n\n    return \"\""
    },
    {
        "number": 4584,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    subordinates = [0] * n\n    \n    for i in range(1, n):\n        subordinates[a[i]] += 1\n    \n    for i in range(1, n):\n        subordinates[i] += subordinates[a[i]]\n        \n    result = '\\n'.join(map(str, subordinates[1:]))\n    \n    return result"
    },
    {
        "number": 4584,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    subordinates = [0] * n\n    \n    for i in range(2, n+1):\n        subordinates[i-1] = sum(1 for j in range(2, i) if a[j-1] == i)\n    \n    return \"\\n\".join(map(str, subordinates))"
    },
    {
        "number": 4584,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    subordinates = [0] * n\n    \n    for i in range(1, n):\n        subordinates[a[i]] += 1\n        \n    return '\\n'.join(map(str, subordinates))"
    },
    {
        "number": 4585,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    t = 0\n    while t*t <= x:\n        t += 1\n    return str(t-1)"
    },
    {
        "number": 4585,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    t = 0\n    while True:\n        if t % 2 == 0:\n            if t // 2 * 2 + 1 == x:\n                return str(t // 2 * 2 + 1)\n        else:\n            if t // 2 * 2 == x:\n                return str(t // 2 * 2)\n        t += 1"
    },
    {
        "number": 4585,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    n = 1\n    while True:\n        if (n*(n+1))//2 >= x:\n            return n\n        n += 1\n\nprint(solution(input()))"
    },
    {
        "number": 4585,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    time = 0\n    prev = 0\n    while True:\n        cur = prev + time\n        if cur >= x:\n            return str(time)\n        prev = cur\n        time += 1"
    },
    {
        "number": 4585,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    time = 1\n    kangaroo_pos = 0\n\n    while kangaroo_pos!= X:\n        if kangaroo_pos < X:\n            kangaroo_pos += time\n        else:\n            kangaroo_pos -= time\n        time += 1\n\n    return str(time-1)"
    },
    {
        "number": 4585,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    \n    # We can solve this problem by using binary search.\n    # We can check if the kangaroo can reach the nest at time i by jumping to the left or right i times.\n    # If the kangaroo can reach the nest at time i, then the answer is i.\n    # Otherwise, we check the next time step, i+1.\n    # We keep doing this until we find the earliest time to reach the nest.\n    \n    l, r = 1, X\n    while l <= r:\n        mid = (l + r) // 2\n        if (mid + mid) >= X:\n            return str(mid)\n        elif (mid + mid) < X:\n            l = mid + 1\n    \n    # If we reach this point, it means that the kangaroo can't reach the nest at any time step.\n    # In that case, the answer is X.\n    return str(X)"
    },
    {
        "number": 4585,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 0:\n        return \"0\"\n    k = 0\n    t = 1\n    while True:\n        if x == k:\n            return str(t)\n        elif x < k:\n            t += 1\n            k = k - t\n        else:\n            t += 1\n            k = k + t"
    },
    {
        "number": 4585,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X == 0:\n        return '0'\n    if X % 2 == 0:\n        return str((X // 2) + 1)\n    return str((X // 2) + 2)"
    },
    {
        "number": 4585,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    t = 1\n    while t <= X:\n        t += t\n    return str(t // 2)"
    },
    {
        "number": 4585,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    left, right = 1, X\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid > X:\n            right = mid - 1\n        elif (mid + 1) * (mid + 1) <= X:\n            left = mid + 1\n        else:\n            return mid\n    return right\n\nprint(solution(input()))"
    },
    {
        "number": 4586,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    str_N = str(N)\n    if str_N[0] == str_N[1] == str_N[2]:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4586,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # convert input to integer\n    n = int(stdin)\n    \n    # check if the integer contains three consecutive same digits\n    if len(set(str(n))) < 4:\n        return \"No\"\n    else:\n        for i in range(len(str(n))-2):\n            if str(n)[i] == str(n)[i+1] == str(n)[i+2]:\n                return \"Yes\"\n        return \"No\"\n    \n"
    },
    {
        "number": 4586,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n // 1000 == n % 10:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4586,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    digits = str(N)\n    if digits.count('1') >= 3:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4586,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if str(n)[0]!= str(n)[1] or str(n)[1]!= str(n)[2]:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4586,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    N_str = str(N)\n    if len(set(N_str)) < 4:\n        return \"No\"\n    for i in range(len(N_str)-2):\n        if N_str[i] == N_str[i+1] == N_str[i+2]:\n            return \"Yes\"\n    return \"No\"\nprint(solution(input()))"
    },
    {
        "number": 4586,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1000 or N > 9999:\n        return \"No\"\n    digits = list(str(N))\n    count = 1\n    for i in range(1, len(digits)):\n        if digits[i] == digits[i-1]:\n            count += 1\n            if count == 3:\n                return \"Yes\"\n        else:\n            count = 1\n    return \"No\""
    },
    {
        "number": 4586,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1000 or n > 9999:\n        return \"No\"\n    s = str(n)\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4586,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if str(n)[0] == str(n)[1] == str(n)[2]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4586,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1000 or n > 9999:\n        return 'Error: N should be a 4-digit integer.'\n    if str(n)[0] == str(n)[1] == str(n)[2]:\n        return 'Yes'\n    elif str(n)[1] == str(n)[2]:\n        return 'Yes'\n    elif str(n)[2] == str(n)[3]:\n        return 'Yes'\n    elif str(n)[3] == str(n)[4]:\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(input()))"
    },
    {
        "number": 4587,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input values\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    B = list(map(int, stdin.readline().strip().split()))\n    C = list(map(int, stdin.readline().strip().split()))\n    \n    # Sorting A, B, and C in ascending order\n    A.sort()\n    B.sort()\n    C.sort()\n    \n    # Initializing variables\n    count = 0\n    i = 0\n    j = 0\n    k = 0\n    \n    # Checking all possible combinations of three parts\n    while i < N and j < N and k < N:\n        if A[i] + B[j] + C[k] == A[i] * B[j] * C[k]:\n            count += 1\n            i += 1\n            j += 1\n            k += 1\n        elif A[i] + B[j] + C[k] < A[i] * B[j] * C[k]:\n            i += 1\n        else:\n            k += 1\n    \n    return count"
    },
    {
        "number": 4587,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    parts = []\n    for i in range(1, 4):\n        parts.append(list(map(int, lines[i].split())))\n    # calculate combinations\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if parts[0][i] > parts[0][j] and parts[0][j] > parts[0][k]:\n                    if parts[1][i] > parts[1][j] and parts[1][j] > parts[1][k]:\n                        if parts[2][i] > parts[2][j] and parts[2][j] > parts[2][k]:\n                            count += 1\n    # calculate number of unique altars\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if parts[0][i] > parts[0][j] and parts[0][j] > parts[0][k]:\n                    if parts[1][i] > parts[1][j] and parts[1][j] > parts[1][k]:\n                        if parts[2][i] > parts[2][j] and parts[2][j] > parts[2][k]:\n                            count -= 1\n    return str(count)"
    },
    {
        "number": 4587,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    B = list(map(int, stdin.readline().strip().split()))\n    C = list(map(int, stdin.readline().strip().split()))\n\n    # count altars\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if (A[i] < A[j] > B[i] < B[j] > C[i] < C[j]) and (B[i] > A[j] > C[i] > C[j] > A[k] < B[k] < C[k]):\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4587,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    c = list(map(int, stdin.readline().strip().split()))\n\n    # count altars\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] < a[j] > b[k] > b[j] and c[i] > c[j] > c[k]:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4587,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    _, *sizes = map(int, stdin.split())\n    \n    # sort parts by size in descending order\n    sizes.sort(reverse=True)\n    \n    # count number of different altars\n    altars = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if sizes[i] < sizes[j] and sizes[j] < sizes[k]:\n                    altars += 1\n                    break\n    return altars"
    },
    {
        "number": 4587,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    upper = list(map(int, stdin.readline().strip().split()))\n    middle = list(map(int, stdin.readline().strip().split()))\n    lower = list(map(int, stdin.readline().strip().split()))\n\n    altars = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if upper[i] < upper[j] and middle[i] > middle[j] and lower[i] > lower[j] and \\\n                   upper[i] < upper[k] and middle[i] > middle[k] and lower[i] > lower[k] and \\\n                   middle[j] > middle[k] and lower[j] > lower[k]:\n                    altars.add((upper[i], middle[i], lower[i]))\n                    altars.add((upper[i], middle[i], lower[j]))\n                    altars.add((upper[i], middle[j], lower[j]))\n    return len(altars)\n"
    },
    {
        "number": 4587,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().strip().split()))\n    B = list(map(int, stdin.readline().strip().split()))\n    C = list(map(int, stdin.readline().strip().split()))\n\n    # count valid altars\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if A[i] < B[j] > B[i] > C[k] > C[j] and A[j] < B[i] > B[j] > C[i] > C[k] and A[k] < B[j] > B[k] > C[i] > C[j]:\n                    count += 1\n\n    return str(count)"
    },
    {
        "number": 4587,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    c = list(map(int, stdin.readline().strip().split()))\n\n    # create combinations of upper, middle, and lower parts\n    comb_upper = [(a[i], None, None) for i in range(n)]\n    comb_middle = [(None, b[i], None) for i in range(n)]\n    comb_lower = [(None, None, c[i]) for i in range(n)]\n\n    for i in range(n):\n        if a[i]!= b[i] and b[i]!= c[i]:\n            comb_upper[i] = (a[i], b[i], None)\n            comb_middle[i] = (None, b[i], c[i])\n            comb_lower[i] = (None, b[i], c[i])\n        elif a[i]!= b[i]:\n            comb_upper[i] = (a[i], b[i], None)\n            comb_middle[i] = (None, b[i], None)\n            comb_lower[i] = (None, b[i], c[i])\n        elif b[i]!= c[i]:\n            comb_upper[i] = (a[i], None, None)\n            comb_middle[i] = (None, b[i], c[i])\n            comb_lower[i] = (None, None, c[i])\n        else:\n            comb_upper[i] = (a[i], None, None)\n            comb_middle[i] = (None, b[i], None)\n            comb_lower[i] = (None, None, c[i])\n\n    # count distinct altars\n    altars = set()\n    for upper in comb_upper:\n        for middle in comb_middle:\n            for lower in comb_lower:\n                altar = (upper[0], upper[1], upper[2], middle[1], middle[2], lower[2])\n                altars.add(altar)\n\n    return len(altars)\n"
    },
    {
        "number": 4587,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    A = list(map(int, lines[1].strip().split()))[:N]\n    B = list(map(int, lines[2].strip().split()))[:N]\n    C = list(map(int, lines[3].strip().split()))[:N]\n    \n    # Initialize answer\n    count = 0\n    \n    # Check all possible combinations of three parts\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                # Check if three parts satisfy conditions\n                if A[i] < A[j] < A[k] and B[i] < B[j] < B[k] and C[i] < C[j] < C[k]:\n                    # Increment answer if altar is different\n                    if (A[i]!= A[j] or B[i]!= B[j] or C[i]!= C[j]) and (A[i]!= A[k] or B[i]!= B[k] or C[i]!= C[k]):\n                        count += 1\n    \n    # Return result\n    return str(count)"
    },
    {
        "number": 4587,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    c = list(map(int, stdin.readline().strip().split()))\n\n    # Sort parts in ascending order\n    a.sort()\n    b.sort()\n    c.sort()\n\n    # Count number of valid altars\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] < a[j] and b[j] < b[k]:\n                    count += 1\n\n    return str(count)"
    },
    {
        "number": 4588,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.strip().split()\n    x = int(x, 16)\n    y = int(y, 16)\n    if x < y:\n        return \"<\"\n    elif x > y:\n        return \">\"\n    else:\n        return \"=\""
    },
    {
        "number": 4588,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.strip().split()\n    x_val = ord(x) - ord('A') + 10 if x.isupper() else ord(x) - ord('a') + 10\n    y_val = ord(y) - ord('A') + 10 if y.isupper() else ord(y) - ord('a') + 10\n    if x_val < y_val:\n        return '<'\n    elif x_val > y_val:\n        return '>'\n    else:\n        return '='\n\ndef"
    },
    {
        "number": 4588,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x_value = ord(x) - ord('A') + 10\n    y_value = ord(y) - ord('A') + 10\n    if x_value < y_value:\n        return \"<\"\n    elif x_value > y_value:\n        return \">\"\n    else:\n        return \"=\""
    },
    {
        "number": 4588,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    if x < y:\n        return '<'\n    elif x > y:\n        return '>'\n    else:\n        return '='"
    },
    {
        "number": 4588,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    X, Y = stdin.split()\n    # Convert to integer\n    x = int(X, 16)\n    y = int(Y, 16)\n    # Compare X and Y\n    if x < y:\n        return \"<\"\n    elif x > y:\n        return \">\"\n    else:\n        return \"=\""
    },
    {
        "number": 4588,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(str, stdin.strip().split())\n\n    if x < y:\n        return \"<\"\n    elif x > y:\n        return \">\"\n    else:\n        return \"=\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(str, stdin.split())\n    x_int = int(x, 16)\n    y_int = int(y, 16)\n    if x_int < y_int:\n        return '<'\n    elif x_int > y_int:\n        return '>'\n    else:\n        return '='\n"
    },
    {
        "number": 4588,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x_value = ord(x) - ord('A') + 10\n    y_value = ord(y) - ord('A') + 10\n    if x_value < y_value:\n        return '<'\n    elif x_value > y_value:\n        return '>'\n    else:\n        return '='"
    },
    {
        "number": 4588,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(str, stdin.split())\n    x_int = int(x, 16)\n    y_int = int(y, 16)\n    if x_int < y_int:\n        return '<'\n    elif x_int > y_int:\n        return '>'\n    else:\n        return '='\n"
    },
    {
        "number": 4588,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(str.strip, stdin.split())\n    if X < Y:\n        return \"<\"\n    elif X > Y:\n        return \">\"\n    else:\n        return \"=\""
    },
    {
        "number": 4589,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().split())\n    bombs = []\n    for i in range(H):\n        row = stdin.readline().strip()\n        for j in range(W):\n            if row[j] == \"#\":\n                bombs.append((i, j))\n    for i in range(H):\n        row = stdin.readline().strip()\n        new_row = \"\"\n        for j in range(W):\n            if row[j] == \".\":\n                num_bombs = 0\n                if (i, j) in bombs:\n                    num_bombs += 1\n                if (i+1, j) in bombs:\n                    num_bombs += 1\n                if (i-1, j) in bombs:\n                    num_bombs += 1\n                if (i, j+1) in bombs:\n                    num_bombs += 1\n                if (i, j-1) in bombs:\n                    num_bombs += 1\n                if (i+1, j+1) in bombs:\n                    num_bombs += 1\n                if (i-1, j-1) in bombs:\n                    num_bombs += 1\n                if (i+1, j-1) in bombs:\n                    num_bombs += 1\n                if (i-1, j+1) in bombs:\n                    num_bombs += 1\n                new_row += str(num_bombs)\n            else:\n                new_row += row[j]\n        print(new_row)"
    },
    {
        "number": 4589,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.readline().strip().split())\n    board = [stdin.readline().strip() for _ in range(h)]\n\n    def bombs_adjacent(i, j):\n        count = 0\n        if i > 0 and board[i-1][j] == '#':\n            count += 1\n        if i < h-1 and board[i+1][j] == '#':\n            count += 1\n        if j > 0 and board[i][j-1] == '#':\n            count += 1\n        if j < w-1 and board[i][j+1] == '#':\n            count += 1\n        if i > 0 and j > 0 and board[i-1][j-1] == '#':\n            count += 1\n        if i > 0 and j < w-1 and board[i-1][j+1] == '#':\n            count += 1\n        if i < h-1 and j > 0 and board[i+1][j-1] == '#':\n            count += 1\n        if i < h-1 and j < w-1 and board[i+1][j+1] == '#':\n            count += 1\n        return count\n\n    for i in range(h):\n        for j in range(w):\n            if board[i][j] == '.':\n                board[i] = board[i][:j] + str(bombs_adjacent(i, j)) + board[i][j+1:]\n\n    return '\\n'.join(board)\n\ndef"
    },
    {
        "number": 4589,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.strip().split(\"\\n\")\n    H, W = map(int, lines[0].split())\n    S = lines[1:]\n\n    # define directions to check\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (-1, 1), (-1, -1), (1, -1)]\n\n    # process each square\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == \".\":\n                # count number of bombs adjacent to this square\n                count = 0\n                for dx, dy in directions:\n                    nx, ny = i + dx, j + dy\n                    if 0 <= nx < H and 0 <= ny < W and S[nx][ny] == \"#\":\n                        count += 1\n\n                # replace. with count\n                S[i] = S[i][:j] + str(count) + S[i][j+1:]\n\n    # print result\n    return \"\\n\".join(S)"
    },
    {
        "number": 4589,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    H, W = map(int, stdin.readline().split())\n    S = [stdin.readline().strip() for _ in range(H)]\n\n    # Define directions and offsets\n    directions = [(0, -1), (1, -1), (1, 0), (1, 1), (0, 1), (-1, 1), (-1, 0), (-1, -1)]\n    offsets = [(1, 1), (1, 1), (0, 1), (-1, 1), (-1, 0), (-1, -1), (0, -1), (1, -1)]\n\n    # Replace. with # and # with 0\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == \".\":\n                S[i] = S[i][:j] + \"#\" + S[i][j+1:]\n                for k, (d, o) in enumerate(zip(directions, offsets)):\n                    ni, nj = i + d[0], j + d[1]\n                    if 0 <= ni < H and 0 <= nj < W and S[ni][nj] == \"#\":\n                        S[i] = S[i][:j] + str(k+1) + S[i][j+1:]\n\n    # Print output\n    return \"\\n\".join(S)"
    },
    {
        "number": 4589,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    h, w = list(map(int, stdin.readline().strip().split()))\n    grid = []\n    for _ in range(h):\n        grid.append(stdin.readline().strip())\n\n    # Find number of adjacent bombs for each empty square\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == '.':\n                # Find adjacent bombs\n                adjacent_bombs = 0\n                if i > 0 and grid[i-1][j] == '#':\n                    adjacent_bombs += 1\n                if i < h-1 and grid[i+1][j] == '#':\n                    adjacent_bombs += 1\n                if j > 0 and grid[i][j-1] == '#':\n                    adjacent_bombs += 1\n                if j < w-1 and grid[i][j+1] == '#':\n                    adjacent_bombs += 1\n                if i > 0 and j > 0 and grid[i-1][j-1] == '#':\n                    adjacent_bombs += 1\n                if i > 0 and j < w-1 and grid[i-1][j+1] == '#':\n                    adjacent_bombs += 1\n                if i < h-1 and j > 0 and grid[i+1][j-1] == '#':\n                    adjacent_bombs += 1\n                if i < h-1 and j < w-1 and grid[i+1][j+1] == '#':\n                    adjacent_bombs += 1\n                # Replace. with number of adjacent bombs\n                grid[i] = grid[i][:j] + str(adjacent_bombs) + grid[i][j+1:]\n\n    # Print result\n    result = []\n    for row in grid:\n        result.append(''.join(row))\n    return '\\n'.join(result)"
    },
    {
        "number": 4589,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    h, w = map(int, lines[0].split())\n    grid = lines[1:]\n\n    # Count the number of bombs adjacent to each empty square\n    adj = [[0] * w for _ in range(h)]\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == '.':\n                for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (-1, -1), (1, -1), (-1, 1)]:\n                    if 0 <= i + di < h and 0 <= j + dj < w and grid[i + di][j + dj] == '#':\n                        adj[i][j] += 1\n\n    # Replace each. with the number of bombs adjacent to it\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == '.':\n                grid[i] = grid[i][:j] + str(adj[i][j]) + grid[i][j+1:]\n\n    # Print the modified grid\n    return '\\n'.join(grid)"
    },
    {
        "number": 4589,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    H, W = map(int, stdin.split())\n    board = [stdin.strip() for _ in range(H)]\n    \n    # Define helper function for counting adjacent bombs\n    def count_adjacent_bombs(i, j):\n        count = 0\n        for di in [-1, 0, 1]:\n            for dj in [-1, 0, 1]:\n                if di == dj == 0:\n                    continue\n                ni, nj = i + di, j + dj\n                if 0 <= ni < H and 0 <= nj < W:\n                    if board[ni][nj] == '#':\n                        count += 1\n        return count\n    \n    # Process each square in the board\n    for i in range(H):\n        for j in range(W):\n            if board[i][j] == '.':\n                adjacent_bombs = count_adjacent_bombs(i, j)\n                board[i] = board[i][:j] + str(adjacent_bombs) + board[i][j+1:]\n    \n    # Print the resulting board\n    result = '\\n'.join(board)\n    return result"
    },
    {
        "number": 4589,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().split())\n    grid = []\n    for i in range(H):\n        grid.append(stdin.readline().strip())\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == \".\":\n                count = 0\n                if i > 0 and grid[i-1][j] == \"#\":\n                    count += 1\n                if i > 0 and j > 0 and grid[i-1][j-1] == \"#\":\n                    count += 1\n                if i > 0 and j < W-1 and grid[i-1][j+1] == \"#\":\n                    count += 1\n                if j > 0 and grid[i][j-1] == \"#\":\n                    count += 1\n                if j < W-1 and grid[i][j+1] == \"#\":\n                    count += 1\n                if i < H-1 and grid[i+1][j] == \"#\":\n                    count += 1\n                if i < H-1 and j > 0 and grid[i+1][j-1] == \"#\":\n                    count += 1\n                if i < H-1 and j < W-1 and grid[i+1][j+1] == \"#\":\n                    count += 1\n                grid[i] = grid[i][:j] + str(count) + grid[i][j+1:]\n    return \"\\n\".join(grid)"
    },
    {
        "number": 4589,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    H, W = map(int, stdin.split())\n    S = []\n    for _ in range(H):\n        S.append(stdin.strip())\n\n    # count bombs\n    bombs = [[0] * W for _ in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == '#':\n                bombs[i][j] = 1\n\n    # mark adjacent bombs\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == '.':\n                for ni, nj in [(i-1,j), (i+1,j), (i,j-1), (i,j+1), (i-1,j-1), (i-1,j+1), (i+1,j-1), (i+1,j+1)]:\n                    if 0 <= ni < H and 0 <= nj < W and S[ni][nj] == '#':\n                        bombs[i][j] += 1\n\n    # replace dots with numbers\n    T = []\n    for i in range(H):\n        T.append(S[i])\n        for j in range(W):\n            if S[i][j] == '.':\n                T[i] = T[i][:j] + str(bombs[i][j]) + T[i][j+1:]\n\n    # print result\n    return '\\n'.join(T)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4589,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    H, W = map(int, lines[0].split())\n    board = lines[1:]\n\n    for i in range(H):\n        for j in range(W):\n            if board[i][j] == '.':\n                num_bombs = 0\n                if i > 0 and board[i-1][j] == '#':\n                    num_bombs += 1\n                if j > 0 and board[i][j-1] == '#':\n                    num_bombs += 1\n                if i < H-1 and board[i+1][j] == '#':\n                    num_bombs += 1\n                if j < W-1 and board[i][j+1] == '#':\n                    num_bombs += 1\n                if i > 0 and j > 0 and board[i-1][j-1] == '#':\n                    num_bombs += 1\n                if i > 0 and j < W-1 and board[i-1][j+1] == '#':\n                    num_bombs += 1\n                if i < H-1 and j > 0 and board[i+1][j-1] == '#':\n                    num_bombs += 1\n                if i < H-1 and j < W-1 and board[i+1][j+1] == '#':\n                    num_bombs += 1\n                board[i] = board[i][:j] + str(num_bombs) + board[i][j+1:]\n\n    return '\\n'.join(board)"
    },
    {
        "number": 4590,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N, M, K = list(map(int, stdin.readline().split()))\n    A = list(map(int, stdin.readline().split()))\n    B = list(map(int, stdin.readline().split()))\n    \n    # Sort books on desk A and desk B in non-increasing order\n    A.sort(reverse=True)\n    B.sort(reverse=True)\n    \n    # Initialize variables\n    desk_A = N\n    desk_B = M\n    time_elapsed = 0\n    max_books = 0\n    \n    # Loop until we reach the time limit\n    while time_elapsed < K:\n        # Check which desk has a book remaining\n        if desk_A > 0:\n            # Read the topmost book on Desk A\n            time_elapsed += A.pop()\n            desk_A -= 1\n        else:\n            # Read the topmost book on Desk B\n            time_elapsed += B.pop()\n            desk_B -= 1\n        \n        # Increment the number of books read\n        max_books += 1\n    \n    # Return the maximum number of books read\n    return str(max_books)"
    },
    {
        "number": 4590,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    n, m, k = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    # Sort desks based on their total time to read\n    desks = sorted([(sum(a[:i+1]), sum(b[:i+1]), i+1) for i in range(max(n, m))], reverse=True)\n\n    # Initialize variables for reading books\n    max_books = 0\n    time_left = k\n\n    # Iterate over desks and read books\n    for time_a, time_b, num_books in desks:\n        # Check if there are enough books to read\n        if time_left < time_a + time_b:\n            break\n\n        # Calculate number of books to read based on time available\n        num_books_read = min(time_left // (time_a + time_b), num_books)\n\n        # Update variables for reading books\n        max_books += num_books_read\n        time_left -= num_books_read * (time_a + time_b)\n\n        # Remove books that are read\n        a = a[num_books_read:]\n        b = b[num_books_read:]\n\n    # Return maximum number of books that can be read\n    return max_books"
    },
    {
        "number": 4590,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    n, m, k = map(int, lines[0].split())\n    a_books = list(map(int, lines[1].split()))\n    b_books = list(map(int, lines[2].split()))\n\n    # sort books by desk and then by ascending order of time\n    desk_a = sorted(enumerate(a_books), key=lambda x: (x[1], -x[0]))\n    desk_b = sorted(enumerate(b_books), key=lambda x: (x[1], -x[0]))\n\n    # initialize counters for each desk\n    desk_a_count = 0\n    desk_b_count = 0\n\n    # initialize variables for time and book counts\n    time = 0\n    books_read = 0\n\n    # repeat reading action until time limit or desks are empty\n    while time <= k and (desk_a_count > 0 or desk_b_count > 0):\n        # choose desk with remaining books\n        if desk_a_count > 0 and (desk_b_count == 0 or desk_a[0][1] <= desk_b[0][1]):\n            i, time_i = desk_a.pop(0)\n            time += time_i\n            desk_a_count -= 1\n            books_read += 1\n        else:\n            i, time_i = desk_b.pop(0)\n            time += time_i\n            desk_b_count -= 1\n            books_read += 1\n\n    return str(books_read)"
    },
    {
        "number": 4590,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    n, m, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    max_books = 0\n    books_read = 0\n    t = 0\n    a_index = 0\n    b_index = 0\n\n    # Iterate until we reach the end of time or we have read enough books\n    while t < k and books_read < n + m:\n        # If we haven't read enough books yet, read the topmost book on the desk with the least number of books remaining\n        if books_read < n:\n            if a_index < n and a[a_index] < b[b_index]:\n                t += a[a_index]\n                a_index += 1\n            else:\n                t += b[b_index]\n                b_index += 1\n            books_read += 1\n        # If we have read enough books, update the max number of books\n        else:\n            max_books = max(max_books, books_read)\n\n        # If we have read all the books on Desk A, start reading from Desk B\n        if a_index == n:\n            a_index = 0\n        # If we have read all the books on Desk B, start reading from Desk A\n        if b_index == m:\n            b_index = 0\n\n    return str(max_books)"
    },
    {
        "number": 4590,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    desks = stdin.split('\\n')\n    N = int(desks[0])\n    M = int(desks[1])\n    K = int(desks[2])\n    A = [int(x) for x in desks[3].split()]\n    B = [int(x) for x in desks[4].split()]\n\n    # sort desks in descending order of book times\n    A.sort(reverse=True)\n    B.sort(reverse=True)\n\n    # initialize book counts and time elapsed\n    count = 0\n    time_elapsed = 0\n\n    # read books from A and B until time limit is reached\n    while time_elapsed < K:\n        if A and B:\n            # read from A if there are books remaining on A\n            if A[-1] <= K - time_elapsed:\n                time_elapsed += A.pop()\n                count += 1\n            # read from B if there are books remaining on B\n            elif B[-1] <= K - time_elapsed:\n                time_elapsed += B.pop()\n                count += 1\n            # read from A if B has no books or if A's book is shorter than B's\n            else:\n                time_elapsed += A.pop()\n                count += 1\n        elif A:\n            time_elapsed += A.pop()\n            count += 1\n        elif B:\n            time_elapsed += B.pop()\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4590,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m, k = map(int, lines[0].split())\n    books_a = list(map(int, lines[1].split()))\n    books_b = list(map(int, lines[2].split()))\n\n    # sort books by time\n    books_a.sort()\n    books_b.sort()\n\n    # iterate over books, keeping track of number of books read\n    num_read = 0\n    i = 0\n    j = 0\n    while k >= books_a[i] + books_b[j]:\n        k -= books_a[i] + books_b[j]\n        i += 1\n        j += 1\n        num_read += 1\n\n    return str(num_read)"
    },
    {
        "number": 4590,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get input values\n    n, m, k = map(int, stdin.readline().strip().split())\n    a_books = list(map(int, stdin.readline().strip().split()))\n    b_books = list(map(int, stdin.readline().strip().split()))\n\n    # sort books by their reading time\n    a_books.sort()\n    b_books.sort()\n\n    # initialize variables\n    a_idx, b_idx = 0, 0\n    a_time, b_time = 0, 0\n    count = 0\n\n    # read books until we reach K minutes or finish reading all books\n    while a_idx < n or b_idx < m:\n        # calculate the remaining time\n        remaining_time = k - a_time - b_time\n\n        # check if we can finish reading all books in the current time\n        if remaining_time <= 0:\n            break\n\n        # check if we can read from Desk A or Desk B\n        if remaining_time >= a_books[a_idx]:\n            a_time += a_books[a_idx]\n            a_idx += 1\n        elif remaining_time >= b_books[b_idx]:\n            b_time += b_books[b_idx]\n            b_idx += 1\n        else:\n            break\n\n        count += 1\n\n    return count\n\n\ndef"
    },
    {
        "number": 4590,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.split('\\n')\n    N, M, K = map(int, lines[0].split())\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n\n    # Initialize variables\n    time_left = K\n    num_books_read = 0\n    desk_books = [A, B]\n\n    # Loop through desks until time is up or all books are read\n    while time_left > 0 and num_books_read < N + M:\n        # Find the desk with the smallest book\n        if desk_books[0][0] <= desk_books[1][0]:\n            desk = 0\n        else:\n            desk = 1\n        # Calculate time to read the book on the desk\n        book_time = desk_books[desk][0]\n        # Update time left\n        time_left -= book_time\n        # Update number of books read\n        num_books_read += 1\n        # Remove the book from the desk\n        desk_books[desk].pop(0)\n\n    # Return the number of books read\n    return num_books_read"
    },
    {
        "number": 4590,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    N, M, K = map(int, stdin.readline().strip().split())\n    A = list(map(int, stdin.readline().strip().split()))\n    B = list(map(int, stdin.readline().strip().split()))\n\n    # Sort desks by reading times\n    A.sort(reverse=True)\n    B.sort(reverse=True)\n\n    # Initialize variables\n    max_books = 0\n    t = 0\n\n    # Iterate until we have read K minutes or read all books on both desks\n    while t <= K and A and B:\n        # Choose the desk with the longest remaining book\n        if A[-1] > B[-1]:\n            t += A.pop()\n        else:\n            t += B.pop()\n\n        # Increment max_books\n        max_books += 1\n\n    # Return the maximum number of books\n    return str(max_books)"
    },
    {
        "number": 4590,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M, K = list(map(int, lines[0].split()))\n    A = list(map(int, lines[1].split()))\n    B = list(map(int, lines[2].split()))\n    A.sort()\n    B.sort()\n    i = j = 0\n    count = 0\n    total = 0\n    while total < K:\n        if A[i] < B[j]:\n            count += 1\n            total += A[i]\n            i += 1\n        else:\n            count += 1\n            total += B[j]\n            j += 1\n    return str(count)"
    },
    {
        "number": 4591,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    A, B, C, X, Y = map(int, stdin.split())\n\n    # Calculate cost of A-pizzas and B-pizzas\n    cost_A = A * X\n    cost_B = B * Y\n\n    # Calculate minimum cost of AB-pizzas\n    min_AB = (C * min(X, Y) // 2) + (A * max(X-Y, 0) // 2) + (B * max(Y-X, 0) // 2)\n\n    # Calculate total cost\n    return cost_A + cost_B + min_AB\n"
    },
    {
        "number": 4591,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    A, B, C, X, Y = map(int, stdin.split())\n\n    # calculate minimum amount of money required\n    total_cost = A * X + B * Y\n\n    # rearrange AB-pizzas to A-pizzas and B-pizzas\n    total_cost += (C * (X + Y)) // 2\n\n    # return result\n    return str(total_cost)"
    },
    {
        "number": 4591,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    total = A*X + B*Y\n    if X >= Y:\n        total += C*(X//Y)\n        X -= X//Y * Y\n        total += A*X + B*(Y - X)\n    else:\n        total += C*(Y//X)\n        Y -= Y//X * X\n        total += A*(X - Y) + B*Y\n    return str(total)"
    },
    {
        "number": 4591,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n\n    # Calculate the cost of A-pizza, B-pizza and AB-pizza\n    cost_A = A\n    cost_B = B\n    cost_AB = (A + B) / 2\n\n    # Calculate the cost of rearranging X A-pizzas and Y B-pizzas\n    cost_AB_X = X * cost_AB\n    cost_A_Y = Y * cost_A\n    cost_B_Y = Y * cost_B\n\n    # Calculate the cost of rearranging X A-pizzas, Y B-pizzas, and one AB-pizza\n    cost_AB_Y = (X + Y) / 2 * cost_AB\n\n    # Calculate the minimum cost\n    min_cost = cost_AB_X + cost_A_Y + cost_B_Y + cost_AB_Y\n\n    return str(min_cost)"
    },
    {
        "number": 4591,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    A, B, C, X, Y = map(int, stdin.split())\n    # calculate total cost of A-pizza, B-pizza, and AB-pizza\n    total_A = X * A\n    total_B = Y * B\n    total_AB = (X // 2) * A + (Y // 2) * B\n    # calculate min cost for A-pizza and B-pizza\n    min_A = X * min(A, B)\n    min_B = Y * min(A, B)\n    # calculate min cost for AB-pizza and rearrange\n    min_AB = (X // 2) * A + (Y // 2) * B + min(A, B) * (X % 2 + Y % 2)\n    # return min cost\n    return str(max(total_A, total_B, total_AB, min_A, min_B, min_AB))"
    },
    {
        "number": 4591,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    min_money = (X * A) + (Y * B)\n    if X >= Y:\n        min_money += (X-Y) * C\n    else:\n        min_money += (Y-X) * C\n    return str(min_money)"
    },
    {
        "number": 4591,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    A, B, C, X, Y = map(int, stdin.strip().split())\n\n    # calculate total amount needed for A-pizzas and B-pizzas\n    total_A = X * A\n    total_B = Y * B\n\n    # calculate total amount needed for AB-pizzas\n    total_AB = (X + Y) // 2 * C\n\n    # rearrange AB-pizzas into A-pizzas and B-pizzas\n    total_A += total_AB // 2\n    total_B += total_AB - total_A\n\n    # output the total amount needed\n    return str(total_A + total_B)"
    },
    {
        "number": 4591,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    A, B, C, X, Y = map(int, stdin.strip().split())\n\n    # Calculate the minimum amount of money required to prepare X A-pizzas and Y B-pizzas\n    min_cost = X * A + Y * B\n    if X + Y >= 2:\n        min_cost += (C * min(X, Y) + min(X, Y) // 2 * A + min(X, Y) // 2 * B) // (2 * max(X, Y))\n\n    return str(min_cost)"
    },
    {
        "number": 4591,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    A, B, C, X, Y = map(int, stdin.split())\n\n    # calculate minimum cost of A-pizzas and B-pizzas\n    cost_A = X * A\n    cost_B = Y * B\n\n    # calculate minimum cost of AB-pizzas\n    cost_AB = (X + Y) * C // 2\n\n    # calculate total cost\n    total_cost = cost_A + cost_B + cost_AB\n\n    return str(total_cost)"
    },
    {
        "number": 4591,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    total = (A * X) + (B * Y)\n    while total > C * (X + Y):\n        if total - (X + Y) <= C:\n            total -= (X + Y)\n            X += 1\n            Y += 1\n        else:\n            X -= 1\n            Y -= 1\n    return (A * X) + (B * Y)\n\nstdin = \"1500 2000 1600 3 2\"\nprint(solution(stdin))"
    },
    {
        "number": 4592,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    MOD = 10**9+7\n    factorial = [1] * (N+1)\n    factorial[0] = 1\n    for i in range(1, N+1):\n        factorial[i] = factorial[i-1] * i % MOD\n\n    divisors = 0\n    for i in range(2, N+1):\n        if factorial[i] % i == 0:\n            divisors += 1\n\n    return str(divisors % MOD)"
    },
    {
        "number": 4592,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    MOD = 10**9 + 7\n    fact = 1\n    for i in range(1, N+1):\n        fact = (fact * i) % MOD\n    div = 0\n    for i in range(1, int(fact**0.5)+1):\n        if fact % i == 0:\n            if i**2 == fact:\n                div += i\n            else:\n                div += (i+fact//i)\n    return str(div % MOD)"
    },
    {
        "number": 4592,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    mod = 10**9+7\n    fact = 1\n    for i in range(1, n+1):\n        fact = (fact*i)%mod\n    ans = 0\n    for i in range(1, n+1):\n        if (fact//i)%mod==1:\n            ans+=1\n    return str(ans%mod)\n\nstdin = \"\"\nfor i in range(3):\n    stdin += f\"{i+1}\\n\"\nprint(solution(stdin))"
    },
    {
        "number": 4592,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    MOD = 10**9+7\n    factorial = 1\n    for i in range(1, N+1):\n        factorial *= i\n        factorial %= MOD\n    count = 0\n    for i in range(1, N+1):\n        if factorial % i == 0:\n            count += 1\n    return str(count) + '\\n'"
    },
    {
        "number": 4592,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    MOD = 10**9+7\n    factorial = [1] * (N+1)\n    factorial[0] = 1\n    for i in range(1, N+1):\n        factorial[i] = (i * factorial[i-1]) % MOD\n    ans = 0\n    for i in range(1, N+1):\n        if factorial[i] % i == 0:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 4592,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    MOD = 10**9+7\n    f = [1]*(N+1)\n    for i in range(2, N+1):\n        f[i] = (f[i-1]*i)%MOD\n    return str(sum(f)%MOD)"
    },
    {
        "number": 4592,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    mod = 10**9+7\n    factorial = 1\n    for i in range(1, N+1):\n        factorial = (factorial * i) % mod\n    divisors = 0\n    for i in range(1, int(factorial**0.5)+1):\n        if factorial % i == 0:\n            if factorial // i == i:\n                divisors += 1\n            else:\n                divisors += 2\n    return str(divisors % mod)"
    },
    {
        "number": 4592,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    n = int(stdin.readline().strip())\n    \n    # Calculate the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Calculate the number of divisors\n    num_divisors = 0\n    for i in range(1, n+1):\n        if factorial % i == 0:\n            num_divisors += 1\n    \n    # Return the result\n    return str(num_divisors % (10**9+7))"
    },
    {
        "number": 4592,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    mod = 10**9 + 7\n    factorial = 1\n    for i in range(1, n+1):\n        factorial = (factorial*i) % mod\n    count = 0\n    for i in range(1, n+1):\n        if factorial % i == 0:\n            count += 1\n    return str(count)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4592,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    mod = 10**9+7\n    fact = [1]*(n+1)\n    fact[0] = 1\n    for i in range(1, n+1):\n        fact[i] = (i*fact[i-1])%mod\n    ans = 1\n    for i in range(2, n+1):\n        ans = (ans*fact[i])%mod\n    return str(ans)"
    },
    {
        "number": 4593,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    for p in range(2, int(X**0.5)+1):\n        if X%p == 0:\n            while X%p == 0:\n                X //= p\n            if p > 2:\n                return str(p)\n    return str(X)"
    },
    {
        "number": 4593,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    max_power = 1\n    while max_power * max_power <= x:\n        max_power += 1\n    return str(max_power - 1)"
    },
    {
        "number": 4593,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for i in range(int(x**0.5), 0, -1):\n        if x % i == 0:\n            return str(i)\n    return '1'"
    },
    {
        "number": 4593,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    max_power = 0\n    for i in range(2, int(X**0.5)+1):\n        if X % i == 0:\n            power = 0\n            while X % i == 0:\n                power += 1\n                X /= i\n            max_power = max(max_power, power)\n    return str(max_power)"
    },
    {
        "number": 4593,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    max_power = 1\n    max_base = 0\n    \n    for i in range(2, int(X ** 0.5) + 1):\n        if X % i == 0:\n            power = 0\n            while X % i == 0:\n                power += 1\n                X //= i\n            if power > max_power:\n                max_power = power\n                max_base = i\n    \n    if X > 1:\n        max_power = 1\n        max_base = X\n    \n    return str(max_base)"
    },
    {
        "number": 4593,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    largest_power = 1\n    while largest_power ** 2 <= X:\n        largest_power += 1\n    return str(largest_power - 1)"
    },
    {
        "number": 4593,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    b = 2\n    while b*b <= x:\n        p = 0\n        while x % b == 0:\n            x //= b\n            p += 1\n        if p > 0:\n            print(b**(p-1))\n        b += 1\n    if x > 1:\n        print(x-1)"
    },
    {
        "number": 4593,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    max_power = 0\n    for i in range(2, x + 1):\n        j = 1\n        while j <= x // i:\n            j *= i\n        if j == x:\n            max_power = i\n    return str(max_power)"
    },
    {
        "number": 4593,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    X = int(stdin.strip())\n\n    # find largest perfect power\n    largest_power = 1\n    while largest_power ** 2 <= X:\n        largest_power += 1\n\n    # check if largest power is a perfect square\n    if largest_power ** 2 == X:\n        return str(largest_power)\n    else:\n        return str(largest_power - 1)"
    },
    {
        "number": 4593,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    # initialize the largest perfect power\n    largest_perfect_power = -1\n    # initialize the power of the largest perfect power\n    power_of_largest_perfect_power = -1\n    # loop through all integers from 2 to sqrt(X)\n    for i in range(2, int(X**0.5)+1):\n        # check if i is a factor of X\n        if X % i == 0:\n            # check if the current power is greater than the current largest power\n            if i**2 <= X and (i**2 > largest_perfect_power or (i**2 == largest_perfect_power and i > power_of_largest_perfect_power)):\n                largest_perfect_power = i**2\n                power_of_largest_perfect_power = i\n            # check if the current power is greater than the current largest power\n            if (X // i)**2 > largest_perfect_power:\n                largest_perfect_power = (X // i)**2\n                power_of_largest_perfect_power = i\n    return str(largest_perfect_power)\n\nprint(solution(input()))"
    },
    {
        "number": 4594,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    diameters = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    layers = 1\n    prev_diameter = diameters[0]\n\n    # iterate through diameters\n    for i in range(1, N):\n        # check if current diameter is smaller than previous diameter\n        if diameters[i] < prev_diameter:\n            # increment layers\n            layers += 1\n            # update previous diameter\n            prev_diameter = diameters[i]\n        # if current diameter is not smaller than previous diameter, cannot make kagami mochi\n        else:\n            break\n\n    # print result\n    return str(layers)\n"
    },
    {
        "number": 4594,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    diameter = list(map(int, stdin.readline().strip().split()))\n    dp = [1] * N\n    for i in range(1, N):\n        for j in range(i):\n            if diameter[i] < diameter[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return str(max(dp))"
    },
    {
        "number": 4594,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    diameters = [int(d.strip()) for d in stdin.readline().split()]\n    \n    # Initialize variables\n    max_layers = 1\n    current_diameter = diameters[0]\n    \n    # Loop through mochi and calculate number of layers\n    for i in range(1, n):\n        if diameters[i] < current_diameter:\n            max_layers += 1\n            current_diameter = diameters[i]\n    \n    return str(max_layers)\n"
    },
    {
        "number": 4594,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n = int(stdin.readline())\n    diameters = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    max_layers = 1\n    current_diameter = diameters[-1]\n    current_layers = 1\n\n    # Loop through mochi diameters\n    for diameter in diameters[:-1][::-1]:\n        # Check if current diameter is smaller than previous diameter\n        if diameter <= current_diameter:\n            # Update maximum layers\n            max_layers = max(max_layers, current_layers)\n            # Move to next layer\n            current_layers += 1\n            current_diameter = diameter\n        # If current diameter is larger than previous diameter\n        else:\n            # Move to next layer\n            current_layers += 1\n            current_diameter = diameter\n\n    # Add final layer\n    max_layers = max(max_layers, current_layers)\n\n    # Return result\n    return str(max_layers)\n"
    },
    {
        "number": 4594,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    diameters = list(map(int, stdin.readline().strip().split()))\n    max_layers = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if diameters[i] < diameters[j]:\n                max_layers += 1\n                break\n    return str(max_layers)"
    },
    {
        "number": 4594,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    diameters = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_layers = 1\n    current_diameter = diameters[-1]\n\n    # Iterate over diameters from bottom to top\n    for diameter in reversed(diameters):\n        if diameter < current_diameter:\n            max_layers += 1\n            current_diameter = diameter\n\n    # Return the maximum number of layers\n    return max_layers\n"
    },
    {
        "number": 4594,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    n = int(stdin.readline().strip())\n    diameters = list(map(int, stdin.readline().strip().split()))\n\n    # Find the maximum number of layers in a kagami mochi\n    max_layers = 1\n    for i in range(1, n):\n        if diameters[i] < diameters[i-1]:\n            max_layers += 1\n\n    # Return the result\n    return str(max_layers) + '\\n'"
    },
    {
        "number": 4594,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    N = int(stdin.readline().strip())\n    diameters = [int(d.strip()) for d in stdin.readlines()]\n    \n    # initialize variables\n    max_layers = 1\n    for i in range(1, N):\n        if diameters[i] < diameters[i-1]:\n            max_layers += 1\n    \n    return str(max_layers)"
    },
    {
        "number": 4594,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    diameters = [int(stdin.readline().strip()) for _ in range(n)]\n    layers = 1\n    diameter_stack = [diameters[0]]\n    for i in range(1, n):\n        if diameters[i] < diameter_stack[-1]:\n            layers += 1\n            diameter_stack.pop()\n        diameter_stack.append(diameters[i])\n    return str(layers)"
    },
    {
        "number": 4594,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    diameters = list(map(int, stdin.readline().strip().split()))\n\n    # Sort diameters in decreasing order\n    diameters.sort(reverse=True)\n\n    # Initialize max_layers to 1\n    max_layers = 1\n\n    # Initialize current_diameter to the diameter of the first mochi\n    current_diameter = diameters[0]\n\n    # Iterate over remaining diameters\n    for i in range(1, n):\n        # If the diameter of the i-th mochi is smaller than or equal to the current diameter,\n        # add a layer and update current_diameter\n        if diameters[i] <= current_diameter:\n            max_layers += 1\n            current_diameter = diameters[i]\n        # If the diameter of the i-th mochi is larger than the current diameter,\n        # update current_diameter\n        else:\n            current_diameter = diameters[i]\n\n    # Output the maximum number of layers\n    return str(max_layers)"
    },
    {
        "number": 4595,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    max_length = 0\n    \n    for i in range(n-1):\n        if s[i] == 'A' and s[i+1] == 'Z':\n            max_length = max(max_length, i+1)\n            \n    return max_length\n"
    },
    {
        "number": 4595,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    start = 0\n    end = len(s) - 1\n    for i in range(len(s)):\n        if s[i] == 'A':\n            start = i\n            break\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == 'Z':\n            end = i\n            break\n    return end - start + 1"
    },
    {
        "number": 4595,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    a_index = s.find('A')\n    z_index = s.find('Z')\n    substring = s[a_index:z_index+1]\n    return len(substring)"
    },
    {
        "number": 4595,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    for i in range(len(s)-5):\n        if s[i:i+6] == \"ASDFZX\":\n            return len(\"ASDFZ\")\n    return -1"
    },
    {
        "number": 4595,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    for i in range(n):\n        if s[i] == 'A' and s[n-1] == 'Z':\n            return n-i\n    return -1"
    },
    {
        "number": 4595,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    start = s.find('A')\n    end = s.rfind('Z')\n    if start == -1 or end == -1:\n        return '0'\n    return str(end - start + 1)"
    },
    {
        "number": 4595,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    i, j = 0, len(s)-1\n    while i < j and s[i]!= 'A':\n        i += 1\n    while i < j and s[j]!= 'Z':\n        j -= 1\n    return j - i + 1"
    },
    {
        "number": 4595,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    i, j = 0, len(s) - 1\n    while i < j and s[i]!= 'A':\n        i += 1\n    while i < j and s[j]!= 'Z':\n        j -= 1\n    return j - i + 1"
    },
    {
        "number": 4595,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    start_index = s.find('A')\n    end_index = s.rfind('Z')\n    if start_index == -1 or end_index == -1:\n        return -1\n    return end_index - start_index + 1"
    },
    {
        "number": 4595,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    start = s.find('A')\n    end = s.rfind('Z')\n    if start!= -1 and end!= -1:\n        return end - start + 1\n    else:\n        return 0"
    },
    {
        "number": 4596,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n\n    # perform operations\n    ops = 0\n    while any(num % 2 == 1 for num in nums):\n        nums = [num // 2 for num in nums]\n        ops += 1\n\n    # output result\n    return str(ops)"
    },
    {
        "number": 4596,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    count = 0\n    while True:\n        if all(num % 2 == 0 for num in nums):\n            return str(count)\n        else:\n            nums = [num // 2 for num in nums]\n            count += 1"
    },
    {
        "number": 4596,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n    count = 0\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            a[i] //= 2\n            count += 1\n        if count == n:\n            break\n    return count"
    },
    {
        "number": 4596,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    operations = 0\n    while True:\n        count = 0\n        for i in range(n):\n            if a[i] % 2!= 0:\n                count += 1\n        if count == 0:\n            break\n        for i in range(n):\n            if a[i] % 2!= 0:\n                a[i] //= 2\n                operations += 1\n    print(operations)\n    return str(operations)"
    },
    {
        "number": 4596,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # perform operations\n    count = 0\n    while True:\n        max_a = max(a)\n        if max_a % 2 == 0:\n            a = [x // 2 for x in a]\n            count += 1\n        else:\n            break\n\n    # output result\n    return str(count)\n"
    },
    {
        "number": 4596,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_ops = 0\n    prev_even_sum = sum(filter(lambda x: x % 2 == 0, A))\n\n    # Perform operations\n    for i in range(N):\n        A[i] //= 2\n        curr_even_sum = sum(filter(lambda x: x % 2 == 0, A))\n        if curr_even_sum > prev_even_sum:\n            max_ops += 1\n            prev_even_sum = curr_even_sum\n\n    # Return result\n    return str(max_ops)"
    },
    {
        "number": 4596,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    max_count = 0\n    count = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    \n    return str(max_count)"
    },
    {
        "number": 4596,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    ops = 0\n    while any(x % 2!= 0 for x in a):\n        for i in range(n):\n            if a[i] % 2!= 0:\n                a[i] //= 2\n                ops += 1\n        if all(x % 2!= 0 for x in a):\n            break\n    return str(ops)"
    },
    {
        "number": 4596,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read the input\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    \n    # count the number of operations\n    operations = 0\n    for i in range(N):\n        if A[i] % 2 == 0:\n            A[i] /= 2\n            operations += 1\n        else:\n            break\n    \n    # print the result\n    print(operations)\n    \n    return ''"
    },
    {
        "number": 4596,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Check if all integers are even\n    even_count = 0\n    for num in a:\n        if num % 2 == 0:\n            even_count += 1\n\n    # Check if all integers are even\n    if even_count == n:\n        return str(n // 2)\n    else:\n        # Find the odd integer\n        odd_num = None\n        for num in a:\n            if num % 2 == 1:\n                odd_num = num\n                break\n\n        # Compute the minimum number of operations\n        min_ops = 0\n        i = 0\n        while i < n and a[i] % 2 == 0:\n            i += 1\n        while i < n and a[i] % 2 == 1:\n            i += 1\n        if i < n:\n            min_ops += 1\n        while i < n:\n            if a[i] % 2 == 0:\n                min_ops += 1\n            i += 1\n\n        # Compute the maximum number of operations\n        max_ops = 0\n        for num in a:\n            max_ops += num // 2\n\n        return str(min(min_ops, max_ops))\n\ndef"
    },
    {
        "number": 4597,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    power = 1\n    for i in range(1, n+1):\n        power = (power * i) % (10**9 + 7)\n    return str(power)"
    },
    {
        "number": 4597,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 10**9+7\n    n = int(stdin.strip())\n    pow = 1\n    for i in range(1, n+1):\n        pow = (pow * i) % MOD\n    return str(pow)"
    },
    {
        "number": 4597,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    MOD = 10**9+7\n    power = 1\n    for i in range(1, N+1):\n        power = (power * i) % MOD\n    return str(power)"
    },
    {
        "number": 4597,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 10**9 + 7\n    \n    n = int(stdin.readline())\n    power = 1\n    \n    for i in range(1, n+1):\n        power = (power * i) % MOD\n    \n    return str(power)"
    },
    {
        "number": 4597,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N = int(stdin.strip())\n\n    # Initialize power to 1\n    power = 1\n\n    # Exercise N times and multiply power by i\n    for i in range(1, N+1):\n        power = (power * i) % (10**9 + 7)\n\n    # Return the final power\n    return str(power)"
    },
    {
        "number": 4597,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.strip())\n    \n    # Initialize variables\n    power = 1\n    modulo = 10**9 + 7\n    \n    # Calculate power\n    for i in range(1, N+1):\n        power = (power * i) % modulo\n    \n    # Print result\n    return str(power)"
    },
    {
        "number": 4597,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline())\n\n    # Solve problem\n    power = 1\n    for i in range(1, N+1):\n        power *= i\n\n    # Print answer modulo 10^9+7\n    return str(power % (10**9+7))\n"
    },
    {
        "number": 4597,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    MOD = 10**9 + 7\n    power = 1\n    for i in range(1, N+1):\n        power = (power * i) % MOD\n    return str(power)"
    },
    {
        "number": 4597,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    MOD = 10**9 + 7\n    power = 1\n    for i in range(1, N+1):\n        power = (power * i) % MOD\n    return str(power)"
    },
    {
        "number": 4597,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N = int(stdin.readline().strip())\n\n    # Initialize the power to 1\n    power = 1\n\n    # Exercise N times and calculate the final power\n    for i in range(1, N+1):\n        power = (power * i) % (10**9 + 7)\n\n    # Return the final power modulo 10^9+7\n    return str(power)"
    },
    {
        "number": 4598,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    candies = sum(range(1, n+1))\n    return str(candies)"
    },
    {
        "number": 4598,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    n = int(stdin.readline().strip())\n\n    # calculate the sum of candies\n    total_candies = sum(range(1, n+1))\n\n    # print the result\n    print(total_candies)\n\n    return \"\""
    },
    {
        "number": 4598,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    candies = [i+1 for i in range(n)]\n    return str(sum(candies))"
    },
    {
        "number": 4598,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    candies = sum(range(1, N+1))\n    return str(candies)"
    },
    {
        "number": 4598,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    candies = [i+1 for i in range(n)]\n    return str(sum(candies))"
    },
    {
        "number": 4598,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    candies = [i+1 for i in range(N)]\n    return str(sum(candies))"
    },
    {
        "number": 4598,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    candies = 0\n    for i in range(1, n+1):\n        candies += i\n    return str(candies)"
    },
    {
        "number": 4598,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    candy_total = (N*(N+1))//2\n    return str(candy_total)"
    },
    {
        "number": 4598,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    candies = list(range(1, n+1))\n    return sum(candies)"
    },
    {
        "number": 4598,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    candies = [i+1 for i in range(N)]\n    return str(sum(candies))"
    },
    {
        "number": 4599,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cards = list(map(int, stdin.readline().strip().split()))\n    alice_score = sum(cards[:n//2])\n    bob_score = sum(cards[n//2:])\n    return str(alice_score - bob_score)"
    },
    {
        "number": 4599,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    cards = list(map(int, lines[1].split()))\n\n    # sort cards in decreasing order\n    cards.sort(reverse=True)\n\n    # Alice and Bob take one card at a time\n    alice_score = 0\n    bob_score = 0\n    for i in range(N):\n        if i % 2 == 0:\n            # Alice takes the i-th card\n            alice_score += cards[i]\n        else:\n            # Bob takes the i-th card\n            bob_score += cards[i]\n\n    return str(alice_score - bob_score)"
    },
    {
        "number": 4599,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort(reverse=True)\n    alice_score = sum(a[::2])\n    bob_score = sum(a[1::2])\n    return str(alice_score - bob_score)"
    },
    {
        "number": 4599,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    cards = list(map(int, stdin.readline().split()))\n\n    # Alice's optimal strategy is to always take the highest card\n    # Bob's optimal strategy is to always take the lowest card\n    # We can compute the score of each player using these strategies\n    # and subtract them to find Alice's score minus Bob's score\n    alice_score = sum(cards) - sum(cards[::-1])\n\n    return str(alice_score)"
    },
    {
        "number": 4599,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Alice's score is the sum of the first N/2 cards\n    alice_score = sum(a[:N//2])\n\n    # Bob's score is the sum of the last N/2 cards\n    bob_score = sum(a[N//2:])\n\n    # Calculate and return the result\n    return str(alice_score - bob_score)"
    },
    {
        "number": 4599,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    cards = list(map(int, stdin.readline().split()))\n\n    # Alice and Bob's scores\n    alice_score = 0\n    bob_score = 0\n\n    # Find optimal strategy for Alice and Bob to maximize their scores\n    for i in range(N):\n        if i % 2 == 0:\n            alice_score += cards[i]\n        else:\n            bob_score += cards[i]\n\n    # Return Alice's score minus Bob's score\n    return str(alice_score - bob_score)\n"
    },
    {
        "number": 4599,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, *cards = map(int, stdin.strip().split())\n    \n    # calculate optimal strategy\n    cards.sort(reverse=True)\n    alice_score = sum(cards[::2])\n    bob_score = sum(cards[1::2])\n    \n    return str(alice_score - bob_score)"
    },
    {
        "number": 4599,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cards = list(map(int, stdin.readline().strip().split()))\n    cards.sort()\n    return str(cards[-1] - cards[-2])"
    },
    {
        "number": 4599,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cards = list(map(int, stdin.readline().strip().split()))\n    alice_score = sum(cards)\n    bob_score = 0\n    \n    # Alice goes first\n    for i in range(n):\n        if i % 2 == 0:\n            alice_score -= cards[i]\n        else:\n            bob_score += cards[i]\n    \n    return str(alice_score - bob_score)"
    },
    {
        "number": 4599,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *cards = map(int, stdin.strip().split())\n    alice_score = 0\n    bob_score = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice_score += cards[i]\n        else:\n            bob_score += cards[i]\n    return str(alice_score - bob_score)"
    },
    {
        "number": 4600,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.readline().strip().split())\n    submissions = [(int(line.strip().split()[0]), line.strip().split()[1]) for line in stdin]\n\n    # count correct and penalties\n    correct = 0\n    penalties = 0\n    seen_ac = [False] * n\n    for i, s in submissions:\n        if s == 'AC':\n            correct += 1\n            seen_ac[i-1] = True\n            penalties += sum(s == 'WA' for j, s in submissions[:i] if seen_ac[j-1])\n        elif seen_ac[i-1]:\n            penalties += 1\n\n    # output result\n    return f\"{correct} {penalties}\""
    },
    {
        "number": 4600,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    p = [0] * N\n    s = [0] * N\n    for i in range(M):\n        pi, si = map(str, lines[i+1].split())\n        p[int(pi)-1] += 1\n        if si == 'AC':\n            s[int(pi)-1] += 1\n    count = 0\n    penalty = 0\n    for i in range(N):\n        if s[i] > 0:\n            count += 1\n            penalty += s[i] - 1\n    return f\"{count} {penalty}\"\n\nprint(solution(input()))"
    },
    {
        "number": 4600,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    submissions = [(int(x), y) for x, y in [line.split() for line in lines[1:]]]\n    correct_answers = set()\n    penalties = 0\n    for i, (p, s) in enumerate(submissions):\n        if s == 'AC':\n            correct_answers.add(p)\n        if p in correct_answers:\n            j = i - 1\n            while j >= 0 and submissions[j][0] == p and submissions[j][1] == 'WA':\n                j -= 1\n            penalties += i - j - 1\n    return f\"{len(correct_answers)} {penalties}\""
    },
    {
        "number": 4600,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    penalties = [0] * n\n    correct = 0\n    for i in range(m):\n        p, s = stdin.readline().strip().split()\n        p, s = int(p), s\n        if s == \"AC\":\n            penalties[p-1] = 0\n            correct += 1\n        else:\n            penalties[p-1] += 1\n    return f\"{correct} {sum(penalties)}\""
    },
    {
        "number": 4600,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ac_problems = []\n    for i in range(m):\n        p, s = stdin.split()\n        p = int(p)\n        if s == 'AC':\n            ac_problems.append(p)\n        else:\n            ac_problems = [p for p in ac_problems if p!= p-1]\n    correct_answers = len(ac_problems)\n    penalties = sum([len([p for p in range(i) if ac_problems[p] == ac_problems[i]]) for i in range(1, len(ac_problems))])\n    return f\"{correct_answers} {penalties}\""
    },
    {
        "number": 4600,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    problem_ac_count = [0] * n\n    problem_wa_count = [0] * n\n    for i in range(m):\n        p, s = stdin.readline().strip().split()\n        p, s = int(p)-1, s\n        if s == \"AC\":\n            problem_ac_count[p] += 1\n            problem_wa_count[p] = 0\n        else:\n            problem_wa_count[p] += 1\n    \n    correct_answers = 0\n    penalties = 0\n    for i in range(n):\n        if problem_ac_count[i] > 0:\n            correct_answers += 1\n            penalties += problem_wa_count[i]\n    \n    return str(correct_answers) + \" \" + str(penalties)\n\nstdin = \"\"\"\n2 5\n1 WA\n1 AC\n2 WA\n2 AC\n2 WA\n\"\"\"\n\nprint(solution(stdin)) # Output: 2 2<|im_sep|>"
    },
    {
        "number": 4600,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    p = list(map(int, lines[1:n+1]))\n    s = list(map(str, lines[n+1:]))\n    c = 0\n    p = [[] for _ in range(n+1)]\n    for i, si in enumerate(s):\n        p[p[i]].append(si)\n    for i in range(1, n+1):\n        if \"AC\" in p[i]:\n            c += 1\n            if \"WA\" in p[i]:\n                for j in range(len(p[i])):\n                    if p[i][j] == \"WA\":\n                        p[i][j] = \"0\"\n                    else:\n                        break\n                p[i] = [int(x) for x in p[i]]\n                p[i] = max(p[i])\n    return f\"{c} {sum(p[i] for i in range(1, n+1) if 'AC' in p[i])}\""
    },
    {
        "number": 4600,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.readline().split())\n    p_list = [int(stdin.readline().split()[0]) for _ in range(M)]\n    s_list = [stdin.readline().split()[1] for _ in range(M)]\n\n    # Initialize variables\n    correct = 0\n    penalty = 0\n\n    # Loop over submissions\n    for i in range(M):\n        # If submission is AC and first AC on problem\n        if s_list[i] == 'AC' and s_list[:i].count('AC') == 0:\n            correct += 1\n            penalty += s_list[:i].count('WA')\n        # If submission is AC but not first AC on problem\n        elif s_list[i] == 'AC':\n            penalty += s_list[:i].count('WA')\n\n    # Print result\n    return f\"{correct} {penalty}\""
    },
    {
        "number": 4600,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, m = map(int, lines[0].split())\n    penalties = [0] * n\n    correct_answers = 0\n    for i in range(1, m+1):\n        p, s = lines[i].split()\n        p, s = int(p), s\n        if s == 'AC':\n            correct_answers += 1\n            if i == 1:\n                penalties[p-1] = 1\n            else:\n                penalties[p-1] = 1 if penalties[p-1] == 0 else penalties[p-1] + 1\n    return str(correct_answers) +'' + str(sum(penalties))"
    },
    {
        "number": 4600,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    p = [0] * N\n    s = [''] * N\n    c = 0\n    p_prev = [0] * N\n    for i in range(M):\n        p[i], s[i] = map(str, stdin.split())\n        p[i] = int(p[i]) - 1\n        if s[i] == 'AC':\n            c += 1\n            if i == 0 or s[i - 1]!= 'AC':\n                p_prev[p[i]] += 1\n    pen = sum(p_prev)\n    return str(c) +'' + str(pen)"
    },
    {
        "number": 4601,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    n, k = map(int, stdin.readline().split())\n    healths = list(map(int, stdin.readline().split()))\n    \n    # Init variables\n    max_health = max(healths)\n    min_health = min(healths)\n    if k >= max_health:\n        return str(n)\n    \n    # Binary search for the minimum number of attacks\n    left, right = 0, n\n    while left < right:\n        mid = (left + right + 1) // 2\n        attacks = mid\n        for i in range(n):\n            if healths[i] > mid:\n                attacks += 1\n        if attacks <= k:\n            right = mid - 1\n        else:\n            left = mid\n    \n    return str(right)"
    },
    {
        "number": 4601,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    healths = list(map(int, stdin.readline().split()))\n    attacks = 0\n    special_moves = 0\n    while True:\n        if all(h <= 0 for h in healths):\n            break\n        if special_moves >= k:\n            break\n        if any(h == 0 for h in healths):\n            min_health = min(h for h in healths if h > 0)\n            healths = [h - min_health for h in healths]\n            special_moves += 1\n            continue\n        min_health = min(healths)\n        i = healths.index(min_health)\n        healths[i] -= 1\n        attacks += 1\n    return str(attacks)"
    },
    {
        "number": 4601,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, k = map(int, stdin.readline().split())\n    h = list(map(int, stdin.readline().split()))\n    # Sort healths in descending order\n    h.sort(reverse=True)\n    # Initialize variables\n    count = 0\n    health = sum(h)\n    # While health is positive and Fennec has not used all k Special Moves\n    while health > 0 and count < k:\n        # Check if Fennec can use Special Move\n        if health >= h[0]:\n            # Use Special Move on the first monster\n            health -= h[0]\n            # Decrease health of other monsters\n            for i in range(1, n):\n                if h[i] > 1:\n                    h[i] -= 1\n        else:\n            # Fennec cannot use Special Move, so use Attack\n            count += 1\n            for i in range(n):\n                if h[i] > 0:\n                    h[i] -= 1\n                    # Decrease health of other monsters\n                    for j in range(i+1, n):\n                        if h[j] > 0:\n                            h[j] -= 1\n                            break\n                    break\n        # Sort healths in descending order\n        h.sort(reverse=True)\n    # Return result\n    return str(count)"
    },
    {
        "number": 4601,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, k = map(int, stdin.strip().split())\n    healths = list(map(int, stdin.strip().split()))\n    # initialize variables\n    attack_count = 0\n    special_move_count = 0\n    # iterate until all monsters are dead or won\n    while sum(healths) > 0:\n        # choose a monster to attack\n        monster_index = healths.index(max(healths))\n        # if health is 1, special move\n        if healths[monster_index] == 1:\n            special_move_count += 1\n            healths[monster_index] -= 1\n        # else, attack\n        else:\n            attack_count += 1\n            healths[monster_index] -= 1\n        # check if won\n        if sum(healths) == 0:\n            break\n        # check if can use special move again\n        if special_move_count < k:\n            continue\n        # if can't use special move again, find the last monster with health 1\n        last_health_1_index = healths.index(1, monster_index)\n        # attack last monster with health 1\n        attack_count += 1\n        healths[last_health_1_index] -= 1\n    # return minimum number of attacks\n    return str(min(attack_count, n))"
    },
    {
        "number": 4601,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.readline().strip().split())\n    healths = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_health = max(healths)\n    min_attacks = sum(healths)\n    max_attacks = min_attacks + max_health * K\n\n    # Binary search for the minimum number of attacks\n    while min_attacks < max_attacks:\n        mid = (min_attacks + max_attacks) // 2\n        attacks = sum(min(h, mid // h) for h in healths)\n        if attacks >= N:\n            max_attacks = mid\n        else:\n            min_attacks = mid + 1\n\n    # Return the minimum number of attacks\n    return min_attacks"
    },
    {
        "number": 4601,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, k = map(int, stdin.readline().split())\n    healths = list(map(int, stdin.readline().split()))\n    # dp table\n    dp = [[0]*(k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if healths[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i-1][healths[i-1]-1]+1)\n    return dp[n][k]"
    },
    {
        "number": 4601,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.split())\n    H = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    health = H.copy()\n    moves = 0\n    special_moves = 0\n\n    # Loop until all monsters are dead or Fennec wins\n    while sum(health) > 0 and special_moves < K:\n        # Find the most powerful monster\n        most_powerful = max(enumerate(health), key=lambda x: x[1])[0]\n\n        # Attack the most powerful monster\n        if health[most_powerful] > 1:\n            health[most_powerful] -= 1\n        else:\n            health[most_powerful] -= 2\n            moves += 1\n\n        # Check if all monsters are dead\n        if sum(health) == 0:\n            break\n\n        # Use a special move on the most powerful monster\n        health[most_powerful] = 0\n        special_moves += 1\n        moves += 1\n\n    return str(moves)"
    },
    {
        "number": 4601,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.readline().split()))\n    \n    # initialize variables\n    attack_count = 0\n    special_move_count = 0\n    for i in range(n):\n        # check if monster can use special move\n        if h[i] == 0 and special_move_count < k:\n            special_move_count += 1\n            h[i] = 1\n            continue\n        \n        # attack monster\n        attack_count += 1\n        h[i] -= 1\n        \n        # check if monster died\n        if h[i] == 0:\n            k -= special_move_count\n            special_move_count = 0\n            attack_count = 0\n    \n    # return minimum attack count\n    return attack_count"
    },
    {
        "number": 4601,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, K = map(int, stdin.readline().split())\n    H = list(map(int, stdin.readline().split()))\n\n    # calculate minimum number of Attacks\n    cnt = 0\n    for h in H:\n        cnt += h\n    cnt = cnt // 2\n    cnt += K\n\n    # return answer\n    return str(cnt)"
    },
    {
        "number": 4601,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.split())\n    H = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    attack_count = 0\n    special_move_count = 0\n    alive_monsters = N\n    for health in H:\n        if health == 0:\n            special_move_count += 1\n        else:\n            attack_count += 1\n\n    # Apply special move\n    if special_move_count > K:\n        return \"IMPOSSIBLE\"\n\n    # Apply attack\n    while alive_monsters > 0:\n        if attack_count >= K:\n            return attack_count\n        attack_count += 1\n        for i in range(N):\n            if H[i] > 0:\n                H[i] -= 1\n                if H[i] == 0:\n                    alive_monsters -= 1\n\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4602,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n\n    # Initialize variables\n    min_distance = float('inf')\n\n    # Calculate minimum distance covered\n    for i in range(N):\n        distance_a = x[i] + i\n        distance_b = K - x[i] + i\n        min_distance = min(min_distance, distance_a, distance_b)\n\n    return str(min_distance)"
    },
    {
        "number": 4602,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.readline().split())\n    x_list = list(map(int, stdin.readline().split()))\n\n    A_robot = [0, 0]\n    B_robot = [K, 0]\n\n    A_distance = 0\n    B_distance = 0\n\n    for i in range(N):\n        A_robot[0] = 0\n        A_robot[1] = i\n        A_distance = min(A_distance, abs(x_list[i] - A_robot[0]) + abs(A_robot[1] - i))\n        A_robot = [0, i]\n\n        B_robot[0] = K\n        B_robot[1] = i\n        B_distance = min(B_distance, abs(x_list[i] - B_robot[0]) + abs(B_robot[1] - i))\n        B_robot = [K, i]\n\n    return str(A_distance + B_distance)"
    },
    {
        "number": 4602,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    xs = list(map(int, stdin.splitlines()[1].split()))\n    # sort the balls in the xy-plane by their x-coordinate\n    xs.sort()\n    # the total distance covered by the robots\n    total_distance = 0\n    # find the minimum distance between two consecutive balls\n    min_distance = xs[-1] - xs[0]\n    # find the minimum distance between the robots and the balls\n    for i in range(n):\n        # the distance from the i-th robot to the i-th ball\n        robot_ball_distance = abs(xs[i] - (i + 1))\n        # the distance from the i-th ball to the i+1-th ball\n        ball_ball_distance = abs(xs[i] - xs[i+1])\n        # update the minimum distance between the robots and the balls\n        min_distance = min(min_distance, robot_ball_distance, ball_ball_distance)\n    # the distance covered by the type-A robots\n    type_a_distance = 0\n    # the distance covered by the type-B robots\n    type_b_distance = 0\n    # activate the type-A robots to collect all of the balls\n    for i in range(n):\n        # the distance from the i-th type-A robot to the i-th ball\n        type_a_distance += abs(0 - (i + 1))\n        # the distance from the i-th ball to the i-th type-A robot\n        type_a_distance += abs(xs[i] - (i + 1))\n        # the distance from the i-th type-A robot to the i-th ball\n        type_b_distance += abs(k - (i + 1))\n        # the distance from the i-th ball to the i-th type-B robot\n        type_b_distance += abs(xs[i] - (i + 1))\n        # add the distance covered by the type-A and type-B robots\n        total_distance += type_a_distance + type_b_distance\n        # update the minimum distance between the robots and the balls\n        min_distance = min(min_distance, type_a_distance + type_b_distance)\n    # the distance covered by the remaining type-A robots\n    remaining_type_a_distance = (n * min_distance) - total_distance\n    # the distance covered by the remaining type-B robots\n    remaining_type_b_distance = (n * min_distance) - total_distance\n    # add the distance covered by the remaining type-A and type-B robots\n    total_distance += remaining_type_a_distance + remaining_type_b_distance\n    # return the minimum possible total distance covered by robots\n    return str(total_distance)"
    },
    {
        "number": 4602,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, K = map(int, stdin.readline().strip().split())\n    x = list(map(int, stdin.readline().strip().split()))\n\n    # calculate min distance\n    min_dist = 2 * N * K\n    for i in range(N):\n        dist = min(x[i], 2 * K - x[i])\n        min_dist = min(min_dist, dist)\n\n    return str(min_dist)\n"
    },
    {
        "number": 4602,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input values\n    N, K = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    min_distance = float(\"inf\")\n\n    # For each line, try both robots\n    for i in range(N):\n        distance_type_A = abs(x[i] - i)\n        distance_type_B = abs(x[i] - i - K)\n\n        # Update minimum distance if needed\n        min_distance = min(min_distance, distance_type_A + distance_type_B)\n\n    return str(min_distance)\n"
    },
    {
        "number": 4602,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().strip().split())\n    xs = list(map(int, stdin.readline().strip().split()))\n    \n    total = 0\n    for i in range(n):\n        distance = xs[i]\n        if i > 0:\n            distance -= xs[i - 1]\n        if i < n - 1:\n            distance -= xs[i + 1]\n        total += min(distance, k)\n    return str(total)"
    },
    {
        "number": 4602,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, K = map(int, stdin.readline().strip().split())\n    x = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    min_distance = float('inf')\n    for i in range(N):\n        distance = abs(x[i] - i)\n        if distance < K:\n            min_distance = min(min_distance, distance)\n        else:\n            min_distance = min(min_distance, distance + K)\n\n    # output result\n    return str(min_distance)"
    },
    {
        "number": 4602,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k, *xs = map(int, stdin.strip().split())\n\n    # compute distances of balls from origin\n    distances = [x for x in xs]\n    distances.sort()\n\n    # compute minimum distance covered by type-A robots\n    min_dist = 0\n    for x in xs:\n        min_dist += x - min(distances[:xs.index(x) + 1])\n\n    # compute minimum distance covered by type-B robots\n    max_dist = 0\n    for x in xs:\n        max_dist += k - x - max(distances[xs.index(x) + 1:])\n\n    # return minimum of both\n    return str(min(min_dist, max_dist))"
    },
    {
        "number": 4602,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.readline().split())\n    balls = list(map(int, stdin.readline().split()))\n    # Initialize variables\n    min_distance = float('inf')\n    max_distance = 0\n    # Loop through all possible robot positions\n    for i in range(N):\n        # Calculate the distance covered by type-A robot at position (0, i)\n        distance = 0\n        for j in range(N):\n            distance += abs(i - j) * balls[j]\n        if distance < min_distance:\n            min_distance = distance\n        if distance > max_distance:\n            max_distance = distance\n        # Calculate the distance covered by type-B robot at position (K, i)\n        distance = 0\n        for j in range(N):\n            distance += abs(i - j) * balls[j + N]\n        if distance < min_distance:\n            min_distance = distance\n        if distance > max_distance:\n            max_distance = distance\n    return str(max_distance)"
    },
    {
        "number": 4602,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, K = map(int, stdin.splitlines()[0].split())\n    xs = list(map(int, stdin.splitlines()[1].split()))\n\n    # calculate minimum total distance\n    total_distance = 0\n    for i in range(N):\n        # type-A robot\n        distance = abs(xs[i] - i)\n        total_distance += distance\n\n        # type-B robot\n        distance = abs(K - xs[i])\n        total_distance += distance\n\n    return str(total_distance)"
    },
    {
        "number": 4603,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    min_fare = float('inf')\n    # Considering only buses\n    min_fare = min(min_fare, A + B)\n    # Considering only trains\n    min_fare = min(min_fare, C + D)\n    # Considering both buses and trains\n    min_fare = min(min_fare, A + C, B + D)\n    return str(min_fare)"
    },
    {
        "number": 4603,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    A, B, C, D = map(int, stdin.split())\n    \n    # Calculate the minimum total fare\n    min_total_fare = A * 2 + B * 2\n    max_total_fare = C * 2 + D * 3\n    \n    # Print the minimum total fare\n    return str(min_total_fare)"
    },
    {
        "number": 4603,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    min_fare = float('inf')\n    for i in range(1, 2 ** 4):\n        train_fare = A * (i & 1) + B * ((i >> 1) & 1)\n        bus_fare = C * ((i >> 2) & 1) + D * ((i >> 3) & 1)\n        min_fare = min(min_fare, train_fare + bus_fare)\n    return str(min_fare)"
    },
    {
        "number": 4603,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    return str(min(A + B, C + D))"
    },
    {
        "number": 4603,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    min_total_fare = A + B + C + D\n    if A > B:\n        min_total_fare = min_total_fare - A + B\n    if C > D:\n        min_total_fare = min_total_fare - C + D\n    if B == 0:\n        min_total_fare = min_total_fare - B + A\n    if D == 0:\n        min_total_fare = min_total_fare - D + C\n    return str(min_total_fare)"
    },
    {
        "number": 4603,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.strip().split())\n    train_fare = A * 2 + B\n    bus_fare = C + D\n    return str(min(train_fare, bus_fare))"
    },
    {
        "number": 4603,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    min_fare = min(A, C) + min(B, D)\n    return str(min_fare)"
    },
    {
        "number": 4603,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.strip().split())\n    train_fare_ordinary = A * 2 + B\n    train_fare_unlimited = A * 2 + B + A\n    bus_fare = C * 3 + D\n    min_fare = min(train_fare_ordinary, train_fare_unlimited, bus_fare)\n    return str(min_fare)"
    },
    {
        "number": 4603,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    train_cost = min(A*2, B)\n    bus_cost = min(C*2, D)\n    return str(train_cost + bus_cost)\n\nprint(solution(input()))"
    },
    {
        "number": 4603,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.strip().split())\n    return str(min(A * 2, B, C * 2, D))"
    },
    {
        "number": 4604,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    mod = 10**9 + 7\n    # Read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    # Check if reports are consistent\n    if len(set(a)) < n:\n        return 0\n    # Initialize variables\n    dp = [1] * n\n    for i in range(1, n):\n        dp[i] = (dp[i-1] * 2 + dp[i-1] * (a[i-1] == a[i])) % mod\n    return dp[-1]"
    },
    {
        "number": 4604,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    mod = 10**9 + 7\n    \n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    \n    diff = [0] * N\n    for i in range(1, N):\n        diff[i] = abs(A[i] - A[i-1])\n    \n    count = 1\n    for i in range(1, N):\n        count *= i\n    \n    for i in range(1, N):\n        count //= (N-i)\n        if diff[i-1] > i:\n            return \"0\"\n    \n    return str((count % mod))\n    \n"
    },
    {
        "number": 4604,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    A = list(map(int, lines[1].split()))\n    \n    # Check for incorrect reports\n    if any(abs(A[i] - A[j]) > 1 for i in range(N) for j in range(N) if i!= j):\n        return \"0\"\n    \n    # Compute all possible orders\n    orders = 1\n    for i in range(1, N):\n        orders = (orders * i) % (10**9 + 7)\n    return str(orders)"
    },
    {
        "number": 4604,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # check if the reports are consistent\n    for i in range(1, n):\n        if abs(a[i-1] - a[i]) > 2:\n            return 0\n    \n    # count number of possible orders\n    mod = 10**9+7\n    dp = [[0]*n for _ in range(1<<n)]\n    dp[1][0] = 1\n    for mask in range(1, 1<<n):\n        for i in range(n):\n            if mask & (1<<i):\n                for j in range(n):\n                    if not mask & (1<<j):\n                        dp[mask][i] += dp[mask^(1<<j)][j]\n                dp[mask][i] %= mod\n    \n    return dp[-1][0]"
    },
    {
        "number": 4604,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    count = 1\n    mod = 10**9 + 7\n    for i in range(1, n):\n        count = count * (a[i-1]-i+1) % mod * (i+1) % mod\n    return count\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4604,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 10**9+7\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    left = [0]*(n+1)\n    right = [0]*(n+1)\n    for i in range(1,n):\n        left[i] = left[i-1] + a[i-1]\n        right[n-i] = right[n-i+1] + a[n-i]\n    res = 1\n    for i in range(1,n):\n        res = res * (left[i]+right[i]) % MOD\n    return str(res)"
    },
    {
        "number": 4604,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    \n    # initialize variables\n    MOD = 10**9 + 7\n    dp = [1] + [0] * N\n    \n    # calculate dp\n    for i in range(1, N+1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i-j-1]\n            dp[i] %= MOD\n            if j > 0 and A[i-1] == A[i-j-2]:\n                dp[i] -= dp[j-1] * dp[i-j]\n                dp[i] %= MOD\n                \n    # print answer\n    if dp[N] == 0:\n        return \"0\"\n    else:\n        return str(dp[N])"
    },
    {
        "number": 4604,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    \n    # Check for inconsistent reports\n    if len(set(A)) < N:\n        return \"0\"\n    \n    # Calculate differences\n    diff = [0] * N\n    diff[0] = A[0]\n    for i in range(1, N):\n        diff[i] = A[i] - A[i-1]\n    \n    # Count possible orders\n    MOD = 10**9+7\n    count = 1\n    for i in range(N):\n        count = count * (i+1) * pow(N-i-1, MOD-2, MOD)\n        count %= MOD\n    return str(count)"
    },
    {
        "number": 4604,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    mod = 10**9+7\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n\n    left, right = [0]*N, [0]*N\n\n    for i in range(1, N):\n        left[i] = left[i-1] + A[i-1]\n    for i in range(N-2, -1, -1):\n        right[i] = right[i+1] + A[i+1]\n\n    ans = 1\n    for i in range(N):\n        ans = (ans * (left[i]*right[i]) % mod)\n    ans = ans // (N-1)\n\n    return str(ans)"
    },
    {
        "number": 4604,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 10**9 + 7\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Check if all differences are the same\n    if len(set(A)) == 1:\n        return 0\n\n    # Sort by difference\n    A.sort(key=lambda x: A[x-1])\n\n    # Calculate permutation count\n    count = 1\n    for i in range(1, N):\n        count = (count * i) % MOD\n\n    return count % MOD"
    },
    {
        "number": 4605,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, a, b = list(map(int, stdin.split()))\n\n    # initialize variables\n    count = 0\n    total = 0\n\n    # loop through integers from 1 to N\n    for i in range(1, n+1):\n        # calculate sum of digits in base 10\n        digit_sum = sum(int(d) for d in str(i))\n\n        # check if digit sum is between A and B\n        if a <= digit_sum <= b:\n            count += 1\n            total += i\n\n    # print result\n    return str(total)"
    },
    {
        "number": 4605,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.strip().split())\n    count = 0\n    for i in range(1, n+1):\n        s = sum(int(d) for d in str(i))\n        if a <= s <= b:\n            count += i\n    return count"
    },
    {
        "number": 4605,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, A, B = map(int, stdin.split())\n\n    # Initialize variables\n    total = 0\n\n    # Loop through numbers from 1 to N\n    for i in range(1, N+1):\n        # Get sum of digits of i\n        digits_sum = sum(int(digit) for digit in str(i))\n\n        # Check if the sum of digits is within A and B\n        if A <= digits_sum <= B:\n            total += i\n\n    # Return the total\n    return str(total)"
    },
    {
        "number": 4605,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.strip().split())\n    ans = 0\n    for num in range(1, n+1):\n        if a <= sum(int(d) for d in str(num)) <= b:\n            ans += num\n    return str(ans)"
    },
    {
        "number": 4605,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    total = 0\n    for i in range(1, n + 1):\n        s = sum(int(x) for x in str(i))\n        if a <= s <= b:\n            total += i\n    return str(total)"
    },
    {
        "number": 4605,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.strip().split())\n    result = 0\n    for i in range(1, N+1):\n        if sum(map(int, str(i))) >= A and sum(map(int, str(i))) <= B:\n            result += i\n    return str(result)"
    },
    {
        "number": 4605,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, a, b = map(int, stdin.split())\n    \n    # helper function to check if a number has a digit sum in the given range\n    def has_digit_sum(num):\n        return a <= sum(int(digit) for digit in str(num)) <= b\n    \n    # find the sum of integers between 1 and n whose digit sum is in the given range\n    total = sum(num for num in range(1, n+1) if has_digit_sum(num))\n    \n    # return the result\n    return str(total)"
    },
    {
        "number": 4605,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    ans = 0\n    for i in range(1, n+1):\n        s = sum(int(d) for d in str(i))\n        if a <= s <= b:\n            ans += i\n    return str(ans)"
    },
    {
        "number": 4605,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, a, b = map(int, stdin.split())\n\n    # generate all integers between 1 and n\n    nums = list(range(1, n+1))\n\n    # filter integers whose digit sum is between a and b\n    sums = [sum(int(digit) for digit in str(num)) for num in nums]\n    filtered_nums = [num for num, sum in zip(nums, sums) if a <= sum <= b]\n\n    # return sum of filtered integers\n    return sum(filtered_nums)"
    },
    {
        "number": 4605,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    sum_of_integers = 0\n    for i in range(1, n + 1):\n        if sum(int(digit) for digit in str(i)) >= a and sum(int(digit) for digit in str(i)) <= b:\n            sum_of_integers += i\n    return str(sum_of_integers)"
    },
    {
        "number": 4606,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f\"ABC{n}\""
    },
    {
        "number": 4606,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f\"ABC{n}\""
    },
    {
        "number": 4606,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return f\"ABC{N}\""
    },
    {
        "number": 4606,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    abc = \"ABC\"\n    return abc + str(n)"
    },
    {
        "number": 4606,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    abc_round = 'ABC' + str(n)\n    return abc_round"
    },
    {
        "number": 4606,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    abc_round = f\"ABC{N:03d}\"\n    return abc_round"
    },
    {
        "number": 4606,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f\"ABC{n}\""
    },
    {
        "number": 4606,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    return f\"ABC{N:03d}\""
    },
    {
        "number": 4606,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"ABC\"\n    else:\n        return \"ABC\" + str(n).zfill(3)"
    },
    {
        "number": 4606,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin)\n    \n    # Define abbreviation for ABC\n    ABC = \"ABC\"\n    \n    # Append N to the abbreviation for ABC\n    result = ABC + str(N)\n    \n    # Return result\n    return result"
    },
    {
        "number": 4607,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    days = 0\n    \n    for i in range(1, a+1):\n        if i == 1 or i == 3 or i == 5 or i == 7 or i == 8 or i == 10 or i == 12:\n            days += 31\n        elif i == 4 or i == 6 or i == 9 or i == 11:\n            days += 30\n        elif i == 2:\n            if a % 4 == 0 and (a % 100!= 0 or a % 400 == 0):\n                days += 29\n            else:\n                days += 28\n                \n    if b == 5:\n        days += 1\n        \n    print(days)\n    \n    return \"\""
    },
    {
        "number": 4607,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    a, b = map(int, stdin.split())\n    \n    # Define Takahashi as a date with the same month and day as the input\n    takahashi = datetime.date(2018, a, b)\n    \n    # Calculate the number of days between 2018-1-1 and the Takahashi date\n    takahashi_days = (takahashi - datetime.date(2018, 1, 1)).days\n    \n    # Return the number of Takahashi days\n    return str(takahashi_days)"
    },
    {
        "number": 4607,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    start = datetime.date(2018, 1, 1)\n    end = datetime.date(2018, a, b)\n    takahashi_days = sum(1 for day in range((end - start).days + 1) if is_takahashi(day + 1))\n    return str(takahashi_days)\n\ndef"
    },
    {
        "number": 4607,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    takahashi = 0\n    for i in range(1, a + 1):\n        if i == a and b == 1:\n            takahashi += 1\n            continue\n        if i == 2:\n            takahashi += 1\n            continue\n        if i == 5:\n            takahashi += 1\n            continue\n        takahashi += 31\n    for i in range(1, b + 1):\n        if i == 1:\n            takahashi += 1\n            continue\n        if i == 15:\n            takahashi += 1\n            continue\n        if i == 29 or i == 30:\n            takahashi += 1\n            continue\n        takahashi += 1\n    return str(takahashi)"
    },
    {
        "number": 4607,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    takahashi_count = 0\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            if (i == j):\n                takahashi_count += 1\n\n    return takahashi_count"
    },
    {
        "number": 4607,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    a, b = map(int, stdin.split())\n    # Takahashi dates are those with the same month and day\n    takahashi_count = 0\n    # Loop through all dates from 2018-1-1 through 2018-a-b\n    for year in range(2018, 2019):\n        for month in range(1, 13):\n            for day in range(1, 32):\n                # Check if the date is Takahashi\n                if month == a and day == b:\n                    takahashi_count += 1\n    # Print the count of Takahashi dates\n    return str(takahashi_count)"
    },
    {
        "number": 4607,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # Calculate the number of Takahashi days from 2018-1-1 through 2018-a-b\n    takahashi_days = 0\n    if a == 1 or a == 3 or a == 5 or a == 7 or a == 8 or a == 10 or a == 12:\n        takahashi_days += 31 - b + 1\n    if a == 4 or a == 6 or a == 9 or a == 11:\n        takahashi_days += 30 - b + 1\n    if a == 2:\n        if b > 29:\n            takahashi_days += 30 - b + 1\n        elif b == 29:\n            takahashi_days += 29\n            # Check if 2018 is a leap year\n            if (a % 4 == 0 and a % 100!= 0) or a % 400 == 0:\n                takahashi_days += 1\n    return str(takahashi_days)"
    },
    {
        "number": 4607,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    takahashi = 0\n    for i in range(1, a+1):\n        if i == 5:\n            takahashi += 1\n        if i == a:\n            takahashi += b\n        else:\n            takahashi += 31\n    return str(takahashi)"
    },
    {
        "number": 4607,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    takahashi_days = sum(days_in_month[:a-1]) + b if (a == 5 and b == 5) else sum(days_in_month[:a-1]) + b - 1\n    return str(takahashi_days)\n\nprint(solution(\"5 5\"))"
    },
    {
        "number": 4607,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    a, b = map(int, stdin.split())\n\n    # initialize variables\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    takahashi_count = 0\n    year = 2018\n\n    # loop through all months\n    for month in range(1, 13):\n        # if month is February and it's a leap year\n        if month == 2 and year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            days_in_month[month - 1] += 1\n\n        # if current month is equal to a\n        if month == a:\n            # if b is smaller than the number of days in the current month,\n            # add b to takahashi_count and break out of the loop\n            if b <= days_in_month[a - 1]:\n                takahashi_count += b\n                break\n            # otherwise, add the number of days in the current month to takahashi_count\n            else:\n                takahashi_count += days_in_month[a - 1]\n\n        # if current month is smaller than a, add the number of days in the current month to takahashi_count\n        else:\n            takahashi_count += days_in_month[month - 1]\n\n        # if current month is equal to b\n        if month == b:\n            # if b is smaller than the number of days in the current month,\n            # add b to takahashi_count and break out of the loop\n            if b <= days_in_month[b - 1]:\n                takahashi_count += b\n                break\n            # otherwise, add the number of days in the current month to takahashi_count\n            else:\n                takahashi_count += days_in_month[b - 1]\n\n        # if current month is larger than b, break out of the loop\n        if month > b:\n            break\n\n    return str(takahashi_count)\n"
    },
    {
        "number": 4608,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # Initialize base cases\n    dp[1][1] = 1\n    \n    # Fill the table\n    for i in range(2, n+1):\n        for j in range(1, n+1):\n            if j == a[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][a[i-1]]\n    \n    # Check if we can lighten up button 2\n    if dp[n][2] == 0:\n        return \"-1\"\n    \n    # Find the minimum number of times we need to press buttons\n    res = float('inf')\n    for i in range(1, n+1):\n        res = min(res, dp[i][1]+dp[n-i][2])\n    \n    return str(res)\n\nprint(solution(\"3\\n3\\n1\\n2\")) # Output: 2"
    },
    {
        "number": 4608,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    buttons = list(map(int, stdin.split()))\n    n = buttons[0]\n    a = buttons[1:]\n    \n    # Check if button 2 is lighten up\n    if not a[1] == 2:\n        return '-1'\n    \n    # Determine the minimum number of times we need to press buttons\n    count = 1\n    for i in range(1, n):\n        if i == a[i]:\n            count += 1\n        else:\n            count += 2\n    \n    return str(count)"
    },
    {
        "number": 4608,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n\n    # Check if it is possible to lighten up Button 2\n    if a[1] == 2:\n        return \"0\"\n\n    # Check if it is possible to quit pressing buttons\n    for i in range(2, N+1):\n        if a[i] > i:\n            return \"-1\"\n\n    # Find the minimum number of times we need to press buttons\n    count = 0\n    for i in range(2, N+1):\n        if a[i] == i:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4608,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    a = list(map(int, lines[1:]))\n    \n    # Check if it is possible to lighten up Button 2\n    if a.count(2) == 0:\n        return '-1'\n    \n    # Determine minimum number of presses to lighten up Button 2\n    presses = 1\n    while True:\n        for i in range(1, N+1):\n            if a[i-1] == i:\n                presses += 1\n            else:\n                presses += 2\n        if a[presses-1] == 2:\n            return str(presses)"
    },
    {
        "number": 4608,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    while True:\n        if a[1] == 2:\n            return str(count)\n        if a[0] == 2:\n            count += 1\n            a[0] = a[a[0]]\n        else:\n            a[0] = a[a[0]]\n        count += 1"
    },
    {
        "number": 4608,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # Find the last button to be lighten up\n    i = 1\n    while i < N and a[i]!= i:\n        i += 1\n    \n    # If Button 2 is not lighten up, it is impossible to lighten up Button 2\n    if i == N or a[i]!= 2:\n        return -1\n    \n    # Otherwise, find the minimum number of times we need to press buttons\n    count = 0\n    while a[i]!= 2:\n        count += 1\n        if a[i] == a[a[i]-1]:\n            return -1\n        a[i] = a[a[i]-1]\n        i = a[i]-1\n    \n    return count"
    },
    {
        "number": 4608,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    if N == 1:\n        return -1\n    \n    # use Bellman-Ford algorithm to find shortest path from 1 to 2\n    dist = [float('inf')]*(N+1)\n    dist[1] = 0\n    for i in range(N-1):\n        for j in range(1, N+1):\n            if dist[j] > dist[a[j-1]] + 1:\n                dist[j] = dist[a[j-1]] + 1\n    \n    # check if there is a path from 1 to 2\n    if dist[2] == float('inf'):\n        return -1\n    \n    # count the minimum number of times we need to press buttons\n    ans = 0\n    for i in range(1, N+1):\n        if dist[a[i-1]] == dist[i]:\n            ans += 1\n    \n    return ans"
    },
    {
        "number": 4608,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Check if Button 2 is lighten up\n    if 2 in a:\n        return -1\n\n    # Initialize variables\n    pressed_times = 0\n    i = 1  # Current button\n    j = 0  # Current button to lighten up\n\n    # Loop until Button 2 is lighten up\n    while i!= 2:\n        # Check if current button is lighten up\n        if a[i] == i:\n            # Lighten up button a[i]\n            pressed_times += 1\n            if a[i]!= 2:\n                a[i] = a[a[i]-1]\n        # Press button i\n        pressed_times += 1\n        i = a[i-1]\n\n    return str(pressed_times)"
    },
    {
        "number": 4608,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # check if we can lighten up button 2\n    if a.count(2) == 0:\n        return '-1'\n\n    # initialize variables\n    count = 0\n    i = 1\n\n    # loop until button 2 is lighten up\n    while i!= 2:\n        # if button is lighten up, count it\n        if i in a:\n            count += 1\n            # update i to the lighten up button\n            i = a[i - 1]\n        # if button is not lighten up, simply increment i\n        else:\n            i += 1\n\n    # return minimum number of presses\n    return str(count)"
    },
    {
        "number": 4608,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    a = list(map(int, lines[1:]))\n\n    # Check if it is possible to lighten up Button 2\n    if not any(a[i] == i+1 for i in range(N)):\n        return '-1'\n\n    # Find the minimum number of times we need to press buttons\n    count = 0\n    while not a[-1] == N:\n        i = a[-1]\n        a[-1] = a[i-1]\n        count += 1\n    return str(count)"
    },
    {
        "number": 4609,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    \n    # Play the game\n    count = 0\n    for a in A:\n        if count == 0:\n            count += 1\n            sheet.add(a)\n        elif a in sheet:\n            sheet.remove(a)\n        else:\n            count += 1\n            sheet.add(a)\n    \n    # Output result\n    print(len(sheet))\n    \n    # Return answer as a string\n    return str(len(sheet))"
    },
    {
        "number": 4609,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n\n    count = 0\n    for i in range(N):\n        if A[i] in A[:i]:\n            count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4609,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n    sheet = []\n    for i in range(N):\n        if numbers[i] in sheet:\n            sheet.remove(numbers[i])\n        else:\n            sheet.append(numbers[i])\n    print(len(sheet))\n    return \"\"\n\ndef"
    },
    {
        "number": 4609,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = [int(x.strip()) for x in stdin.readlines()]\n    \n    for num in nums:\n        if num in nums:\n            nums.remove(num)\n        else:\n            nums.append(num)\n    \n    return len(nums)"
    },
    {
        "number": 4609,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Read input from stdin\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Execute the game\n    for i in range(N):\n        if A[i] in A[:i]:\n            A[i] = 0\n        else:\n            A[i] = A[i]\n\n    # Count the numbers that are written on the sheet\n    count = 0\n    for num in A:\n        if num!= 0:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4609,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(N):\n        if not A[i] in A[:i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4609,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input from stdin\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n\n    # Joisino's game\n    count = 0\n    for num in A:\n        if num in A[:count]:\n            A.remove(num)\n            count -= 1\n        else:\n            count += 1\n\n    # Printing output to stdout\n    print(count)\n\n    return \"\""
    },
    {
        "number": 4609,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().strip().split()))\n\n    for i in range(N):\n        if numbers[i] == numbers[i+1]:\n            numbers[i+1] = 0\n\n    count = 0\n    for num in numbers:\n        if num!= 0:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4609,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # simulate game\n    count = 0\n    for num in A:\n        if num in A:\n            A.remove(num)\n            count += 1\n        else:\n            A.append(num)\n\n    # print result\n    print(count)"
    },
    {
        "number": 4609,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(N):\n        if A[i] not in A[:i]:\n            count += 1\n        else:\n            A[A.index(A[i])] = None\n    return str(count)"
    },
    {
        "number": 4610,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    unique_a = set(a)\n    if len(unique_a) <= k:\n        return 0\n    for i in range(n):\n        if a[i] not in unique_a:\n            continue\n        count += 1\n        unique_a.remove(a[i])\n        if len(unique_a) <= k:\n            break\n    return count\n\ndef"
    },
    {
        "number": 4610,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    # create a set to store the unique integers\n    integers = set(A)\n\n    # check if there are at most K different integers\n    if len(integers) <= K:\n        return \"0\"\n\n    # count the number of times each integer appears in A\n    count = {}\n    for num in integers:\n        count[num] = A.count(num)\n\n    # create a list of pairs (num, count)\n    pairs = sorted(count.items(), key=lambda x: x[1], reverse=True)\n\n    # calculate the number of balls needed to rewrite the integers\n    balls = 0\n    for pair in pairs:\n        if pair[1] > 1:\n            balls += pair[1] - 1\n\n    return str(balls)"
    },
    {
        "number": 4610,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    b = set()\n    for i in a:\n        if i not in b:\n            b.add(i)\n        if len(b) > k:\n            count += 1\n            b.remove(min(b))\n        b.add(i)\n    return str(count)\n\nprint(solution(input()))<|im_sep|>"
    },
    {
        "number": 4610,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    # Calculate frequencies\n    freq = [0] * (n+1)\n    for i in a:\n        freq[i] += 1\n\n    # Calculate minimum number of balls to rewrite integers\n    count = 0\n    for i in range(1, n+1):\n        if freq[i] > 1:\n            count += freq[i] - 1\n            if count > k:\n                return \"Impossible\"\n\n    return count"
    },
    {
        "number": 4610,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given the input stream as a string, returns the minimum number of balls that Takahashi needs to rewrite the integers on them.\n\n    Args:\n        stdin: A string containing the input stream.\n\n    Returns:\n        A string containing the minimum number of balls Takahashi needs to rewrite the integers on them.\n    \"\"\"\n    lines = stdin.strip().split(\"\\n\")\n    n, k = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n\n    b = {}\n    for i in range(n):\n        if a[i] not in b:\n            b[a[i]] = [i]\n        else:\n            b[a[i]].append(i)\n\n    count = 0\n    for i in range(n):\n        if len(b[a[i]]) > 1:\n            count += 1\n            a[b[a[i]][0]] = a[b[a[i]][1]] = a[i]\n            if count == k:\n                break\n\n    return str(count)\n"
    },
    {
        "number": 4610,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # sort a\n    a.sort()\n\n    # initialize left and right pointers\n    left = 0\n    right = n - 1\n\n    # initialize counter for different integers\n    count = 0\n\n    # iterate over a\n    while left <= right:\n        # if there are more than k different integers on the balls, move the right pointer to the left\n        if a[right] - a[left] + 1 > k:\n            count += a[right] - a[left] + 1\n            left += 1\n        else:\n            # update counter for different integers\n            count += k\n            right -= 1\n\n    return count\n"
    },
    {
        "number": 4610,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Get input values from stdin\n    n, k = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # Sort balls in ascending order\n    a = sorted(a)\n    \n    # Initialize variables\n    i = 0  # index for balls\n    j = 1  # index for unique integers\n    count = 0  # number of balls rewritten\n    \n    # Iterate through balls and rewrite integers\n    while j < n:\n        if a[j]!= a[i]:\n            i = j\n            j += 1\n            count += 1\n            continue\n        \n        # If same integer is found, try next integer\n        while j < n and a[j] == a[i]:\n            j += 1\n        \n        # Check if more unique integers can be written\n        if j - i - 1 > k:\n            count += 1\n            i = j - 1\n        else:\n            i = j - 1\n    \n    # Return number of balls rewritten\n    return str(count)"
    },
    {
        "number": 4610,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split('\\n')\n    N, K = map(int, lines[0].split())\n    A = list(map(int, lines[1].split()))\n    # calculate max integer\n    max_int = max(A)\n    # calculate minimum number of balls to rewrite integers on them\n    balls_to_rewrite = min(N, max_int + 1)\n    # print result\n    return str(balls_to_rewrite) + '\\n'"
    },
    {
        "number": 4610,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.strip().split())\n    A = list(map(int, stdin.strip().split()))\n\n    # Create a dictionary to store the frequency of each integer\n    freq = {}\n    for i in range(N):\n        if A[i] not in freq:\n            freq[A[i]] = 1\n        else:\n            freq[A[i]] += 1\n\n    # Count the number of different integers\n    count = len(freq)\n\n    # If the number of different integers is greater than or equal to K, return 0\n    if count >= K:\n        return \"0\"\n\n    # Initialize the variables\n    balls_to_rewrite = N\n    curr_count = count\n    curr_freq = {}\n\n    # Iterate through the balls and rewrite the integers on them\n    for i in range(N):\n        if A[i] not in curr_freq:\n            curr_freq[A[i]] = 1\n        else:\n            curr_freq[A[i]] += 1\n\n        if len(curr_freq) > K:\n            # The number of different integers is greater than K, so we need to rewrite the integers on this ball\n            balls_to_rewrite = i\n            break\n        else:\n            # Update the count of different integers\n            curr_count += 1\n\n    return str(balls_to_rewrite)\n"
    },
    {
        "number": 4610,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.readline().split()))\n\n    count = 0\n    for i in range(n):\n        if a[i] > k:\n            count += 1\n\n    return str(count)\n\nwith open(\"input.txt\", \"r\") as f:\n    stdin = f.read()\n    print(solution(stdin))"
    },
    {
        "number": 4611,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    points = [tuple(map(int, line.split())) for line in lines[1:]]\n    visited = set([(0,0)])\n    for t, x, y in points:\n        if (x,y) in visited:\n            return \"No\"\n        visited.add((x,y))\n        for dx, dy in [(0,1),(0,-1),(1,0),(-1,0)]:\n            if (x+dx,y+dy) in visited:\n                return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4611,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        t, x, y = map(int, stdin.readline().strip().split())\n        points.append((t, x, y))\n    points.sort()\n    visited = set()\n    for i in range(n):\n        t, x, y = points[i]\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            for j in range(i+1, n):\n                if points[j][1:] == (nx, ny):\n                    if points[j][0] < t + 1:\n                        return \"No\"\n        visited.add((x, y))\n    return \"Yes\""
    },
    {
        "number": 4611,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    paths = {}\n    for i in range(1, n+1):\n        line = lines[i].split()\n        t = int(line[0])\n        x = int(line[1])\n        y = int(line[2])\n        paths[t] = (x, y)\n    x = 0\n    y = 0\n    t = 0\n    visited = {(x, y)}\n    while t < n:\n        if (t+1) in paths:\n            if (x+1, y) not in visited and paths[t+1] == (x+1, y):\n                visited.add((x+1, y))\n                x += 1\n                t += 1\n            elif (x-1, y) not in visited and paths[t+1] == (x-1, y):\n                visited.add((x-1, y))\n                x -= 1\n                t += 1\n            elif (x, y+1) not in visited and paths[t+1] == (x, y+1):\n                visited.add((x, y+1))\n                y += 1\n                t += 1\n            elif (x, y-1) not in visited and paths[t+1] == (x, y-1):\n                visited.add((x, y-1))\n                y -= 1\n                t += 1\n            else:\n                return \"No\"\n        else:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4611,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    points = []\n    for i in range(1, N+1):\n        t, x, y = map(int, lines[i].split())\n        points.append((t, x, y))\n\n    visited = set([(0, 0)])\n    for i in range(N):\n        t, x, y = points[i]\n        next_points = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n        for x, y in next_points:\n            if (x, y) in visited:\n                return \"No\"\n        visited.add((x, y))\n\n    return \"Yes\""
    },
    {
        "number": 4611,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    points = []\n    for i in range(N):\n        t, x, y = map(int, stdin.readline().strip().split())\n        points.append((t, x, y))\n\n    for i in range(N):\n        x, y = points[i][1], points[i][2]\n        if x == 0 and y == 0:\n            return \"No\"\n        for j in range(i+1, N):\n            if x == points[j][1] and y == points[j][2]:\n                return \"No\"\n            if x + 1 == points[j][1] or x - 1 == points[j][1] or y + 1 == points[j][2] or y - 1 == points[j][2]:\n                break\n        else:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4611,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    points = []\n    for i in range(1, N+1):\n        line = lines[i].split()\n        points.append((int(line[0]), int(line[1])))\n\n    # check if atco codeer can travel without staying at any of the points\n    can_travel = set()\n    for i in range(N):\n        for j in range(N):\n            can_travel.add((points[i][0]+1, points[i][1]))\n            can_travel.add((points[i][0]-1, points[i][1]))\n            can_travel.add((points[i][0], points[i][1]+1))\n            can_travel.add((points[i][0], points[i][1]-1))\n\n    # check if all points are visited\n    visited = set()\n    for point in points:\n        visited.add(point)\n\n    if len(visited) == N and len(visited) == len(can_travel):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4611,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    points = []\n    for i in range(N):\n        t, x, y = map(int, stdin.readline().strip().split())\n        points.append((x,y))\n    visited = set()\n    for i in range(N):\n        if (0,0) in visited:\n            return \"Yes\"\n        x, y = points[i]\n        visited.add((x,y))\n        for dx, dy in [(1,0), (-1,0), (0,1), (0,-1)]:\n            nx, ny = x+dx, y+dy\n            if (nx, ny) in visited:\n                continue\n            if (nx, ny) in points[:i+1]:\n                visited.add((nx, ny))\n    return \"No\""
    },
    {
        "number": 4611,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    time = [list(map(int, stdin.readline().strip().split())) for i in range(N)]\n    x = y = 0\n    for i in range(N):\n        if time[i][0]!= i:\n            return 'No'\n        x, y = time[i][1], time[i][2]\n    return 'Yes' if x == y == 0 else 'No'"
    },
    {
        "number": 4611,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    points = []\n    for i in range(N):\n        t, x, y = map(int, stdin.readline().strip().split())\n        points.append((t, x, y))\n    \n    visited = set()\n    stack = [(0, 0)]\n    for t, x, y in points:\n        if (x, y) in visited:\n            return \"No\"\n        visited.add((x, y))\n        stack.append((x, y))\n        for i in range(len(stack)-1):\n            if abs(stack[i][0]-stack[i+1][0]) <= 1 and abs(stack[i][1]-stack[i+1][1]) <= 1:\n                return \"No\"\n        while stack and stack[-1] not in visited:\n            stack.pop()\n    \n    return \"Yes\""
    },
    {
        "number": 4611,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    points = []\n    for i in range(N):\n        t, x, y = map(int, stdin.readline().strip().split())\n        points.append((t, x, y))\n    visited = set()\n    queue = [(0, 0)]\n    while queue:\n        x, y = queue.pop(0)\n        visited.add((x, y))\n        if (x, y) == (1, 2):\n            return \"Yes\"\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            if (x+dx, y+dy) not in visited and 0 <= x+dx <= 1 and 0 <= y+dy <= 1:\n                queue.append((x+dx, y+dy))\n    return \"No\""
    },
    {
        "number": 4612,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    x = (a + b) / 2\n    return str(math.ceil(x))"
    },
    {
        "number": 4612,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    x = (a + b) / 2\n    return str(int(math.ceil(x)))\n\nimport sys\nimport math"
    },
    {
        "number": 4612,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = (a + b) / 2\n    return str(int(math.ceil(x)))"
    },
    {
        "number": 4612,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    a, b = map(int, stdin.split())\n\n    # compute the average\n    x = (a + b) / 2\n\n    # round up to the nearest integer\n    x = int(math.ceil(x))\n\n    # print the result\n    return str(x)"
    },
    {
        "number": 4612,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = (a + b) / 2\n    return str(int(math.ceil(x)))\n"
    },
    {
        "number": 4612,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = (a + b) / 2\n    return str(round(x))"
    },
    {
        "number": 4612,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    x = (a + b) / 2\n    return str(int(math.ceil(x)))"
    },
    {
        "number": 4612,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = (a + b) / 2\n    x = math.ceil(x)\n    return str(x)"
    },
    {
        "number": 4612,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = (a + b) / 2\n    return str(math.ceil(x))\n\nimport math"
    },
    {
        "number": 4612,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = (a + b) // 2\n    return str(x)"
    },
    {
        "number": 4613,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, M = map(int, stdin.readline().split())\n    edges = []\n    for _ in range(M):\n        a, b = map(int, stdin.readline().split())\n        edges.append((a-1, b-1))\n\n    # mark all vertices as unvisited\n    visited = [False] * N\n\n    # DFS to find all connected components\n    components = []\n    for i in range(N):\n        if not visited[i]:\n            component = []\n            stack = [i]\n            while stack:\n                vertex = stack.pop()\n                if not visited[vertex]:\n                    visited[vertex] = True\n                    component.append(vertex)\n                    for neighbor in edges:\n                        if vertex == neighbor[0]:\n                            stack.append(neighbor[1])\n                        elif vertex == neighbor[1]:\n                            stack.append(neighbor[0])\n            components.append(component)\n\n    # count number of bridges in each component\n    bridges = []\n    for component in components:\n        count = 0\n        for i in range(len(component)):\n            for j in range(i+1, len(component)):\n                a = component[i]\n                b = component[j]\n                if not any(a == edge[0] and b == edge[1] or b == edge[0] and a == edge[1] for edge in edges):\n                    count += 1\n        bridges.append(count)\n\n    # sum up bridges from all components\n    result = sum(bridges)\n\n    return str(result)\n"
    },
    {
        "number": 4613,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    m = int(lines[1])\n    edges = []\n    for i in range(2, 2 + m):\n        a, b = map(int, lines[i].split())\n        edges.append((a, b))\n    # DFS to find bridges\n    visited = [False] * n\n    bridges = 0\n    for i in range(m):\n        if not visited[edges[i][0] - 1]:\n            stack = [(edges[i][0] - 1, edges[i][1] - 1)]\n            visited[edges[i][0] - 1] = True\n            while stack:\n                u, v = stack.pop()\n                if not visited[v]:\n                    visited[v] = True\n                    for j in range(m):\n                        if (\n                            edges[j][0] == v + 1 or edges[j][1] == v + 1\n                        ) and not visited[edges[j][0] - 1]:\n                            stack.append((v, edges[j][0] - 1))\n                            stack.append((v, edges[j][1] - 1))\n                            break\n                    else:\n                        bridges += 1\n    return str(bridges)\n"
    },
    {
        "number": 4613,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N, M = map(int, stdin.readline().strip().split())\n    edges = [list(map(int, stdin.readline().strip().split())) for _ in range(M)]\n\n    # Count the number of edges that are bridges\n    bridges = 0\n    for i in range(M):\n        for j in range(i+1, M):\n            a, b = edges[i][0], edges[i][1]\n            c, d = edges[j][0], edges[j][1]\n            if (a == c and b == d) or (a == d and b == c):\n                bridges += 1\n\n    return str(bridges)"
    },
    {
        "number": 4613,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Parsing the input\n    N, M = map(int, stdin.readline().split())\n    edges = [tuple(map(int, stdin.readline().split())) for _ in range(M)]\n\n    # Finding the adjacency list\n    adj_list = [[] for _ in range(N+1)]\n    for a, b in edges:\n        adj_list[a].append(b)\n        adj_list[b].append(a)\n\n    # Finding the bridge edges\n    bridges = []\n    for u in range(1, N+1):\n        for v in adj_list[u]:\n            if v not in adj_list[u-1]:\n                w = u-1\n                while w not in adj_list[v]:\n                    w -= 1\n                if w > 0:\n                    bridges.append((v, w))\n\n    # Counting the bridge edges\n    count = len(set(bridges))\n\n    # Printing the result\n    print(count)\n\n    return \"\""
    },
    {
        "number": 4613,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    vertices, edges = map(int, stdin.readline().strip().split())\n    graph = {i: [] for i in range(1, vertices+1)}\n    for i in range(edges):\n        a, b = map(int, stdin.readline().strip().split())\n        graph[a].append(b)\n        graph[b].append(a)\n\n    # dfs to find bridges\n    visited = [False] * (vertices+1)\n    bridges = []\n    def dfs(curr, prev, visited, graph):\n        visited[curr] = True\n        for next in graph[curr]:\n            if not visited[next]:\n                if next == prev:\n                    bridges.append((curr, next))\n                else:\n                    dfs(next, curr, visited, graph)\n\n    for vertex in graph:\n        if not visited[vertex]:\n            dfs(vertex, -1, visited, graph)\n\n    # count bridges\n    count = 0\n    for bridge in bridges:\n        if bridge not in graph:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4613,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    graph = [[] for _ in range(n+1)]\n    for i in range(1, len(lines)):\n        a, b = map(int, lines[i].split())\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = [0] * (n+1)\n    bridges = 0\n    for u in range(1, n+1):\n        if visited[u] == 0:\n            dfs(graph, visited, u, -1)\n    for u in range(1, n+1):\n        for v in graph[u]:\n            if visited[u] == visited[v] == 1:\n                bridges += 1\n    return str(bridges)\n\ndef"
    },
    {
        "number": 4613,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    edges = []\n    for i in range(m):\n        a, b = map(int, stdin.readline().split())\n        edges.append((a, b))\n    # count the number of connected components\n    count = 0\n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            count += 1\n            stack = [i]\n            while stack:\n                v = stack.pop()\n                visited[v] = True\n                for u in range(len(edges)):\n                    if edges[u][0] == v:\n                        stack.append(edges[u][1])\n                    elif edges[u][1] == v:\n                        stack.append(edges[u][0])\n    # count the number of bridges\n    bridges = 0\n    for i in range(len(edges)):\n        a, b = edges[i]\n        if count > 1 or (count == 1 and not (visited[a] and visited[b])):\n            # bridge\n            for j in range(len(edges)):\n                if j!= i:\n                    c, d = edges[j]\n                    if (a == c and b == d) or (a == d and b == c):\n                        # double edge or self-loop\n                        continue\n                    if not (visited[c] and visited[d]):\n                        # non-bridge edge\n                        break\n            else:\n                bridges += 1\n    return str(bridges)"
    },
    {
        "number": 4613,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.readline().strip().split())\n    edges = [tuple(map(int, line.strip().split())) for line in stdin]\n    \n    # initialize adjacency list\n    adj_list = [[] for _ in range(n+1)]\n    for u, v in edges:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    # DFS to detect bridges\n    def dfs(curr, parent, visited, low, disc):\n        visited[curr] = True\n        low[curr] = disc[curr] = disc[parent] + 1\n        for child in adj_list[curr]:\n            if child == parent:\n                continue\n            if not visited[child]:\n                dfs(child, curr, visited, low, disc)\n                low[curr] = min(low[curr], low[child])\n                if low[child] > disc[curr]:\n                    bridges.add((child, curr))\n            elif child!= parent:\n                low[curr] = min(low[curr], disc[child])\n    \n    # detect bridges\n    bridges = set()\n    visited = [False] * (n+1)\n    low = [float('inf')] * (n+1)\n    disc = [float('inf')] * (n+1)\n    for i in range(1, n+1):\n        if not visited[i]:\n            dfs(i, -1, visited, low, disc)\n    \n    # count bridges\n    count = 0\n    for u, v in edges:\n        if (u, v) in bridges or (v, u) in bridges:\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4613,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.readline().split())\n    edges = []\n    for i in range(M):\n        a, b = map(int, stdin.readline().split())\n        edges.append((a-1, b-1))\n    \n    # Check if each edge is a bridge\n    bridges = []\n    for i in range(M):\n        for j in range(i+1, M):\n            u, v = edges[i]\n            x, y = edges[j]\n            if u in (x, y) and v in (x, y) and u!= v:\n                bridges.append((u, v))\n    \n    # Count the number of bridges\n    count = len(bridges)\n    \n    # Return the result\n    return str(count)"
    },
    {
        "number": 4613,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input values\n    N, M = list(map(int, stdin.readline().strip().split()))\n    graph = {i: [] for i in range(1, N+1)}\n    for i in range(M):\n        a, b = list(map(int, stdin.readline().strip().split()))\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    # DFS traversal to find bridges\n    bridges = 0\n    visited = [False] * (N+1)\n    for i in range(1, N+1):\n        if not visited[i]:\n            dfs(graph, visited, i, i, [], bridges)\n    return bridges\n\ndef"
    },
    {
        "number": 4614,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B:\n        print(C)\n    elif A == C:\n        print(B)\n    else:\n        print(A)\n    return \"\""
    },
    {
        "number": 4614,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B and A == C:\n        print(\"The integers are the same. There is no different integer.\")\n        return\n    elif A == B:\n        print(C)\n    elif A == C:\n        print(B)\n    else:\n        print(A)"
    },
    {
        "number": 4614,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B:\n        return str(C)\n    elif A == C:\n        return str(B)\n    else:\n        return str(A)"
    },
    {
        "number": 4614,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B:\n        return str(C)\n    elif A == C:\n        return str(B)\n    else:\n        return str(A)"
    },
    {
        "number": 4614,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.strip().split()))\n    if a == b and b!= c:\n        return str(b)\n    elif b == c and a!= b:\n        return str(a)\n    elif a == c and a!= b:\n        return str(b)\n    else:\n        return str(c)"
    },
    {
        "number": 4614,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B and B == C:\n        return \"None\"\n    elif A == B or B == C or A == C:\n        return str(list({A, B, C} - {A if A!= B else C})[0])\n    else:\n        return str(list({A, B, C} - {A, B, C} - {A if A!= B else C})[0])\n"
    },
    {
        "number": 4614,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.strip().split())\n    if A == B:\n        return str(C)\n    elif A == C:\n        return str(B)\n    else:\n        return str(A)"
    },
    {
        "number": 4614,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B:\n        return str(C)\n    elif A == C:\n        return str(B)\n    else:\n        return str(A)"
    },
    {
        "number": 4614,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.strip().split())\n    if A == B and A!= C:\n        return str(A)\n    elif A!= B and B!= C:\n        return str(B)\n    elif A!= C and B!= C:\n        return str(C)\n    else:\n        return str(A)"
    },
    {
        "number": 4614,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.strip().split())\n    if A!= B and B!= C and C!= A:\n        return str(set([A,B,C]) - set([A,B,C,A]) - set([A,B,C,B]))\n    elif A == B:\n        if A == C:\n            return 'None of them'\n        else:\n            return str(set([A,B,C]) - set([A,B,C,A]))\n    elif A == C:\n        return str(set([A,B,C]) - set([A,B,C,B]))\n    else:\n        return str(set([A,B,C]) - set([A,B,C,C]))"
    },
    {
        "number": 4615,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem: Find the highest possible density sugar water that Snuke can make.\n    \"\"\"\n    A, B, C, D, E, F = list(map(int, stdin.split()))\n\n    # Case 1: 100% sugar water\n    water_mass = F\n    sugar_mass = 0\n    max_water_mass = F\n    max_sugar_mass = 0\n\n    # Case 2: 0% sugar water\n    water_mass = F\n    sugar_mass = F\n    max_water_mass = F\n    max_sugar_mass = F\n\n    # Case 3: Sugar water with 100% density\n    water_mass = F - C - E\n    sugar_mass = C\n    sugar_percent = sugar_mass / (sugar_mass + water_mass) * 100\n    if sugar_percent == 100:\n        max_water_mass = water_mass\n        max_sugar_mass = sugar_mass\n\n    # Case 4: Sugar water with 0% density\n    water_mass = F - D - E\n    sugar_mass = D\n    sugar_percent = sugar_mass / (sugar_mass + water_mass) * 100\n    if sugar_percent == 0:\n        max_water_mass = water_mass\n        max_sugar_mass = sugar_mass\n\n    return \" \".join(map(str, [max_water_mass, max_sugar_mass]))\n"
    },
    {
        "number": 4615,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.strip().split())\n    water_grams = (f - c - d) // (a + b)\n    if water_grams * (a + b) + c + d > f:\n        water_grams -= 1\n    sugar_grams = f - water_grams * (a + b)\n    sugar_density = (sugar_grams * 100) // (water_grams * e)\n    water_mass = water_grams * 100\n    sugar_mass = sugar_grams * sugar_density\n    return''.join(map(str, (water_mass, sugar_mass)))"
    },
    {
        "number": 4615,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = map(int, stdin.split())\n    \n    max_sugar_water = -1\n    max_sugar_dissolved = -1\n    \n    # iterate through all possible values of a and b\n    for a in range(1, A+1):\n        for b in range(1, B+1):\n            # compute the percentage of sugar in the water\n            percentage_sugar = min(100, 100*(b/float(a+b)))\n            # compute the maximum mass of sugar water that can be made\n            max_water = F - percentage_sugar*E\n            # compute the maximum mass of sugar that can be dissolved\n            max_dissolved = max_water//E\n            if max_water >= 0 and max_dissolved >= 0 and max_water >= max_sugar_water:\n                # check that there is no undissolved sugar in the beaker\n                if max_dissolved*E <= F:\n                    max_sugar_water = max_water\n                    max_sugar_dissolved = max_dissolved\n    \n    return f\"{max_sugar_water} {max_sugar_dissolved}\""
    },
    {
        "number": 4615,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    a, b, c, d, e, f = map(int, stdin.strip().split())\n    \n    # calculate the highest possible density for the given parameters\n    max_density = 100 * b / (a + b)\n    \n    # initialize variables\n    water = 0\n    sugar = 0\n    \n    # perform operations\n    water += 100\n    sugar += 10 * c\n    \n    # check if the water content exceeds 100\n    if water > 100:\n        water = 100\n    \n    # check if the sugar content exceeds the maximum possible sugar content\n    if sugar > e:\n        sugar = e\n    \n    # calculate the mass of sugar dissolved in the water\n    dissolved_sugar = e * water / 100\n    \n    # calculate the mass of sugar water\n    sugar_water = water + dissolved_sugar\n    \n    # check if the sugar water meets the constraints\n    if sugar_water > 0 and sugar_water <= f and dissolved_sugar <= b and (f - sugar_water - dissolved_sugar) <= b * max_density / 100:\n        return f\"{sugar_water} {dissolved_sugar}\"\n    else:\n        return f\"No solution\"\n\nprint(solution(input()))"
    },
    {
        "number": 4615,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = map(int, stdin.split())\n    water = min(B, E)\n    sugar = max(0, A - water)\n    if sugar + water > F:\n        return '0 0'\n    water += (F - sugar) // (100 + E)\n    sugar = min(F, sugar + (F - sugar) // (100 + E))\n    return f'{water} {sugar}'"
    },
    {
        "number": 4615,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    water = 0\n    sugar = 0\n    water_capacity = f - e\n    if water_capacity < 0:\n        return \"0 0\"\n    while water < a or sugar < c:\n        if water < a and sugar + water_capacity >= a:\n            sugar += a - water\n            break\n        elif water < a:\n            sugar += water\n            water = 0\n        elif sugar + water_capacity >= a:\n            water += a - sugar\n            break\n        else:\n            water += water_capacity\n            sugar += water_capacity\n    dissolved_sugar = 0\n    if water > 0:\n        dissolved_sugar = e * water / 100\n    result = water + dissolved_sugar\n    return f\"{result} {dissolved_sugar}\""
    },
    {
        "number": 4615,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = map(int, stdin.strip().split())\n    water = F // 100\n    sugar = F - water * 100\n    max_sugar_water = 0\n    max_sugar = 0\n    for i in range(0, C + 1):\n        for j in range(0, D + 1):\n            if A <= water and B <= sugar:\n                sugar_water_percent = (water * i + sugar * j) / (water + sugar)\n                if sugar_water_percent > max_sugar_water:\n                    max_sugar_water = sugar_water_percent\n                    max_sugar = i + j\n    sugar_water = (water * max_sugar_water / 100) + max_sugar\n    sugar_dissolved = sugar * E // 100\n    return f\"{sugar_water} {sugar_dissolved}\""
    },
    {
        "number": 4615,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    \n    # If there is no sugar to dissolve, return 0\n    if e == 0:\n        return \"0 0\"\n    \n    # If there is no water to pour, return the max possible sugar\n    if f < 100*b:\n        return f\"{f} 0\"\n    \n    # Calculate the maximum possible sugar density\n    max_sugar_density = f\"{100*b/(a+b):.2f}\"\n    \n    # Calculate the minimum possible sugar density\n    min_sugar_density = f\"{e/f*100:.2f}\"\n    \n    # Calculate the mass of the sugar water\n    water_mass = f\"{100*b/a*c/100:.2f}\"\n    \n    # Calculate the mass of sugar dissolved in the water\n    sugar_mass = f\"{100*e/f*d/100:.2f}\"\n    \n    return f\"{water_mass} {sugar_mass}\""
    },
    {
        "number": 4615,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = map(int, stdin.split())\n\n    # Determine the percentage of sugar in the sugar water\n    sugar_percent = (100*B)/(A + B)\n\n    # Determine the maximum mass of sugar that can be dissolved in the water\n    max_sugar_dissolved = min(100*A, E)\n\n    # Determine the maximum mass of water that can be poured into the beaker\n    max_water_poured = F - max_sugar_dissolved\n\n    # Determine the mass of water that must be poured into the beaker\n    water_to_add = max_water_poured // 100\n\n    # Determine the mass of sugar that must be added to the beaker\n    sugar_to_add = max_sugar_dissolved // B\n\n    # Determine the final mass of sugar water\n    final_water_mass = water_to_add * 100\n\n    # Determine the final mass of sugar dissolved in the water\n    final_sugar_mass = sugar_to_add * B\n\n    # Return the final mass of sugar water and sugar dissolved\n    return f\"{final_water_mass} {final_sugar_mass}\""
    },
    {
        "number": 4615,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    water = min(a, b)\n    sugar = max(c, d)\n    max_density = (water + sugar) / 100 * e / 100\n    water_mass = max_density * water\n    sugar_mass = max_density * sugar\n    return f\"{water_mass} {sugar_mass}\""
    },
    {
        "number": 4616,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    i = 0\n    j = 18\n    while i < n and j <= n:\n        if s[i:j] == \"internationalization\":\n            return \"i18n\"\n        i += 1\n        j += 1\n    return s\n"
    },
    {
        "number": 4616,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read the input string\n    s = stdin.strip()\n\n    # calculate the length of the abbreviation\n    n = len(s) - 3\n\n    # concatenate the first and last letters\n    abbr = s[0] + str(n) + s[-1]\n\n    # return the abbreviation\n    return abbr\n"
    },
    {
        "number": 4616,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().lower()\n    if len(s) < 3:\n        return s\n    i = s.index('i')\n    n = s.rindex('n')\n    if i == -1 or n == -1:\n        return s\n    if n - i!= 17:\n        return s\n    return s[0] + str(n - i) + s[n+1:]\n"
    },
    {
        "number": 4616,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n <= 2:\n        return s\n    else:\n        abbr = s[0] + str(n-2) + s[-1]\n        return abbr"
    },
    {
        "number": 4616,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().lower()\n    n = len(s)\n    if n < 3:\n        return \"Error: String length must be at least 3\"\n    i = s.find('i')\n    if i == -1:\n        return \"Error: String must contain the letter 'i'\"\n    return s[:i+1] + str(n-2) + s[-1]\n"
    },
    {
        "number": 4616,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return s[:3] + str(len(s) - 2) + s[-1]"
    },
    {
        "number": 4616,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return s[:3] + str(len(s) - 6) + s[-3:]\n"
    },
    {
        "number": 4616,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) < 3:\n        return \"\"\n    n = len(s)\n    i = 0\n    j = 18\n    while j <= n:\n        i += 1\n        j += 18\n    return s[:i] + \"i18n\""
    },
    {
        "number": 4616,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    result = ''\n    for i in range(len(s)):\n        if i == 0:\n            result += s[i]\n        elif i < len(s) - 1 and s[i-1].isalpha() and s[i].isalpha() and s[i+1].isalpha():\n            continue\n        else:\n            result += s[i]\n    return result"
    },
    {
        "number": 4616,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().lower()\n    if len(s) < 3:\n        return \"\"\n    return s[0] + str(len(s) - 2) + s[-1]\n\n\ndef"
    },
    {
        "number": 4617,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    grid = [[char for char in line] for line in lines]\n\n    # rotate 180 degrees\n    for i in range(len(grid)):\n        for j in range(len(grid)):\n            grid[i][j] = grid[len(grid)-1-i][len(grid)-1-j]\n    \n    # check if grid remains the same\n    for i in range(len(grid)):\n        for j in range(len(grid)):\n            if grid[i][j]!= lines[i][j]:\n                return 'NO'\n    \n    return 'YES'"
    },
    {
        "number": 4617,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    grid = [list(stdin.strip().split()) for _ in range(2)]\n    rotated = [[grid[1][2-j], grid[0][2-j]] for j in range(3)]\n    if grid == rotated:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4617,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    lines = stdin.split(\"\\n\")\n    first_row = lines[0]\n    second_row = lines[1]\n\n    # Check if the grid is the same when rotated 180 degrees\n    rotated_first_row = \"\".join(list(first_row)[::-1])\n    rotated_second_row = \"\".join(list(second_row)[::-1])\n\n    if first_row == rotated_second_row and second_row == rotated_first_row:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nstdin = \"pot\\ntop\"\nprint(solution(stdin)) # Output: YES"
    },
    {
        "number": 4617,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    rows = []\n    for line in stdin.split('\\n'):\n        if len(line) == 0:\n            break\n        row = line.split()\n        if len(row)!= 3:\n            return \"NO\"\n        rows.append(row)\n\n    if len(rows)!= 2:\n        return \"NO\"\n\n    top = rows[0][0] + rows[0][1] + rows[0][2]\n    middle = rows[1][0] + rows[1][1] + rows[1][2]\n\n    if top == middle:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(\"pot\\ntop\\n\")) # YES\nprint(solution(\"pot\\nfoo\\n\")) # NO"
    },
    {
        "number": 4617,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    grid = stdin.split()\n    for i in range(len(grid)):\n        if grid[i]!= grid[i][::-1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4617,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    grid = []\n    for i in range(2):\n        row = list(stdin.readline().strip())\n        grid.append(row)\n\n    # Check if the grid remains the same when rotated 180 degrees\n    rotated_grid = [list(row)[::-1] for row in grid]\n    if grid == rotated_grid:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4617,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    grid = [[char for char in line.strip()] for line in stdin.split('\\n')]\n    rotated_grid = [[grid[2-j][i] for j in range(3)] for i in range(2)]\n    if rotated_grid == grid:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4617,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    grid = stdin.split()\n    rotated_grid = [grid[1], grid[0], grid[2]]\n    if rotated_grid == grid:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4617,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    grid = []\n    for row in stdin.split():\n        grid.append(list(row))\n    \n    # check if grid is the same after rotating\n    rotated_grid = []\n    for i in range(len(grid[0])):\n        rotated_row = \"\"\n        for j in range(len(grid)):\n            rotated_row += grid[j][-i-1]\n        rotated_grid.append(rotated_row)\n    \n    if grid == rotated_grid:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \n"
    },
    {
        "number": 4617,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows = [list(line.strip()) for line in stdin.strip().split('\\n')]\n    reversed_rows = [list(row) for row in rows][::-1]\n    if all(row == reversed_row for row, reversed_row in zip(rows, reversed_rows)):\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4618,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, k = map(str, stdin.split())\n    k = int(k)\n    substrs = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrs.add(s[i:j])\n    substrs = sorted(list(substrs))\n    return substrs[k-1]"
    },
    {
        "number": 4618,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.strip().split()\n    k = int(k)\n    \n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.add(s[i:j])\n    \n    substrings = sorted(list(substrings))\n    return substrings[k-1]"
    },
    {
        "number": 4618,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.strip().split()\n    k = int(k)\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.add(s[i:j])\n    substrings = sorted(list(substrings))\n    return substrings[k-1]"
    },
    {
        "number": 4618,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, k = map(str.strip, stdin.split())\n    substrings = sorted(set(s))\n    k = int(k) - 1\n    return substrings[k]"
    },
    {
        "number": 4618,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    k = int(k)\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.add(s[i:j])\n    substrings = sorted(list(substrings))\n    return substrings[k-1]"
    },
    {
        "number": 4618,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split('\\n')[0]\n    K = int(stdin.strip().split('\\n')[1])\n    substrs = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrs.add(s[i:j])\n    substrs = sorted(substrs)\n    return substrs[K-1]"
    },
    {
        "number": 4618,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    s, k = map(str.strip, stdin.split())\n    k = int(k)\n\n    # Initialize variables\n    substrings = set()\n\n    # Loop through all possible substrings of s and add them to a set\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substrings.add(s[i:j])\n\n    # Sort the set of substrings lexicographically\n    substrings = sorted(list(substrings))\n\n    # Return the K-th lexicographically smallest substring\n    return substrings[k-1]"
    },
    {
        "number": 4618,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split('\\n')[0]\n    K = int(stdin.strip().split('\\n')[1])\n\n    substrings = set()\n\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n\n    substrings = sorted(list(substrings))\n\n    return substrings[K-1]"
    },
    {
        "number": 4618,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    k = int(k)\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.add(s[i:j])\n    return sorted(substrings)[k-1]\n\nprint(solution(input()))"
    },
    {
        "number": 4618,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, k = map(str, stdin.strip().split())\n    k = int(k)\n\n    substrings = sorted(set([s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1)]))\n    return substrings[k-1]\n"
    },
    {
        "number": 4619,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, H, N = map(int, stdin.split()[0:3])\n    points = []\n    for i in range(N):\n        x, y, a = map(int, stdin.split()[3*i:3*i+3])\n        points.append((x, y, a))\n\n    white_count = W * H\n    for x, y, a in points:\n        if a == 1:\n            white_count -= (W - x) * y\n        elif a == 2:\n            white_count -= (W - x) * y\n        elif a == 3:\n            white_count -= x * (H - y)\n        else:\n            white_count -= x * (H - y)\n\n    return str(white_count)\n"
    },
    {
        "number": 4619,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    W, H, N = map(int, stdin.readline().split())\n    points = []\n    for i in range(N):\n        x, y, a = map(int, stdin.readline().split())\n        points.append((x, y, a))\n    \n    # Paint the regions\n    white_region = set([(x, y) for x in range(W+1) for y in range(H+1)])\n    for x, y, a in points:\n        if a == 1:\n            white_region = white_region - set([(x, y) for x in range(W+1) if x < x])\n        elif a == 2:\n            white_region = white_region - set([(x, y) for x in range(W+1) if x > x])\n        elif a == 3:\n            white_region = white_region - set([(x, y) for y in range(H+1) if y < y])\n        elif a == 4:\n            white_region = white_region - set([(x, y) for y in range(H+1) if y > y])\n    \n    # Compute area of white region\n    area = (W+1) * (H+1) - len(white_region)\n    \n    return str(area)"
    },
    {
        "number": 4619,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse the input\n    W, H, N = map(int, stdin.split()[0:3])\n    points = [(int(x), int(y), int(a)) for x, y, a in [stdin.split()[3*i+j] for i in range(N) for j in range(3)]]\n    \n    # compute the area of the white region within the rectangle\n    area = 0\n    for x in range(W+1):\n        for y in range(H+1):\n            white = True\n            for p in points:\n                if p[1] <= y and (p[0] > x if p[2] == 1 else p[0] < x):\n                    white = False\n                    break\n            if white:\n                area += 1\n    \n    return str(area)"
    },
    {
        "number": 4619,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input values\n    W, H, N = map(int, stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        x, y, a = map(int, stdin.readline().strip().split())\n        points.append((x, y, a))\n    \n    # Compute the white region\n    white = set([(x, y) for x in range(W+1) for y in range(H+1)])\n    \n    # Paint the black regions\n    for x, y, a in points:\n        if a == 1:\n            white -= set([(x, y) for x in range(W+1) if x < x])\n        elif a == 2:\n            white -= set([(x, y) for x in range(W+1) if x > x])\n        elif a == 3:\n            white -= set([(x, y) for y in range(H+1) if y < y])\n        elif a == 4:\n            white -= set([(x, y) for y in range(H+1) if y > y])\n    \n    # Compute the area of the white region\n    area = 0\n    for x in range(W+1):\n        for y in range(H+1):\n            if (x, y) in white:\n                area += 1\n    \n    # Return the result\n    return str(area)"
    },
    {
        "number": 4619,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    W, H, N = map(int, stdin.split())\n    a = []\n    for i in range(N):\n        x, y, ai = map(int, stdin.readline().split())\n        a.append(ai)\n    white = W * H\n    for i in range(N):\n        if a[i] == 1:\n            white -= x * H\n        elif a[i] == 2:\n            white -= (W - x) * H\n        elif a[i] == 3:\n            white -= W * (y - 1)\n        else:\n            white -= W * (H - y)\n    return white"
    },
    {
        "number": 4619,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    W, H, N = map(int, lines[0].split())\n    points = []\n    for line in lines[1:]:\n        x, y, a = map(int, line.split())\n        points.append((x, y, a))\n    white_area = W * H\n    for x, y, a in points:\n        if a == 1:\n            white_area -= (x + 1) * H\n        elif a == 2:\n            white_area -= x * H\n        elif a == 3:\n            white_area -= W * (y + 1)\n        elif a == 4:\n            white_area -= W * y\n    return str(white_area)\n"
    },
    {
        "number": 4619,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    W, H, N = map(int, stdin.readline().split())\n    points = []\n    for _ in range(N):\n        x, y, a = map(int, stdin.readline().split())\n        points.append((x, y, a))\n\n    # paint the white region\n    painted = set()\n    for i in range(W+1):\n        for j in range(H+1):\n            painted.add((i, j))\n\n    # paint the black region\n    for x, y, a in points:\n        if a == 1:\n            for j in range(H+1):\n                painted.discard((x, j))\n        elif a == 2:\n            for j in range(H+1):\n                painted.discard((W-x, j))\n        elif a == 3:\n            for i in range(W+1):\n                painted.discard((i, y))\n        elif a == 4:\n            for i in range(W+1):\n                painted.discard((i, H-y))\n\n    # calculate the area of the white region\n    area = 0\n    for i in range(W+1):\n        for j in range(H+1):\n            if (i, j) in painted:\n                area += 1\n\n    # print the area\n    return str(area)"
    },
    {
        "number": 4619,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    w, h, n = map(int, stdin.readline().split())\n    points = []\n    for i in range(n):\n        x, y, a = map(int, stdin.readline().split())\n        points.append((x, y, a))\n    white_area = w * h\n    for x, y, a in points:\n        if a == 1:\n            white_area -= y * (w - x)\n        elif a == 2:\n            white_area -= y * x\n        elif a == 3:\n            white_area -= (h - y) * x\n        elif a == 4:\n            white_area -= (h - y) * (w - x)\n    return white_area"
    },
    {
        "number": 4619,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    W, H, N = map(int, stdin.split()[0:3])\n    points = []\n    for i in range(N):\n        x, y, a = map(int, stdin.split()[0:3])\n        points.append((x, y, a))\n\n    # paint the regions\n    white_count = W * H\n    for x, y, a in points:\n        if a == 1:\n            white_count -= (x - 1) * H\n        elif a == 2:\n            white_count -= (W - x) * H\n        elif a == 3:\n            white_count -= W * (y - 1)\n        elif a == 4:\n            white_count -= W * (H - y)\n\n    return str(white_count)"
    },
    {
        "number": 4619,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    w, h, n = map(int, stdin.readline().strip().split())\n    points = [(int(x), int(y)) for x, y in (line.strip().split() for line in stdin)]\n    a = [int(x) for x in stdin.readline().strip().split()]\n\n    # initialize grid\n    grid = [[False] * w for _ in range(h)]\n\n    # paint regions\n    for i, p in enumerate(points):\n        x, y = p\n        if a[i] == 1:\n            for j in range(y, h):\n                grid[j][x-1] = True\n        elif a[i] == 2:\n            for j in range(y, h):\n                grid[j][x] = True\n        elif a[i] == 3:\n            for j in range(x, w):\n                grid[y-1][j] = True\n        elif a[i] == 4:\n            for j in range(x, w):\n                grid[y][j] = True\n\n    # count white cells\n    white_cells = 0\n    for i in range(h):\n        for j in range(w):\n            if not grid[i][j]:\n                white_cells += 1\n\n    # print result\n    return str(white_cells)"
    },
    {
        "number": 4620,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = [list(map(int, line.split())) for line in lines[1:]]\n    dp = [float('inf')] * n\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if a[j][1] % a[i][2]!= 0:\n                continue\n            dp[i] = min(dp[i], dp[j] + (a[j][1] // a[i][2]) * a[i][0] + a[i][1])\n    return '\\n'.join(map(str, dp))\n\nstdin = '3\\n6 5 1\\n1 10 1\\n'\nprint(solution(stdin))  # Output: 12\\n11\\n0\\n"
    },
    {
        "number": 4620,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    routes = []\n    for i in range(n):\n        c, s, f = map(int, stdin.readline().strip().split())\n        routes.append((c, s, f))\n    \n    dp = [float('inf')]*n\n    dp[0] = 0\n    \n    for i in range(1, n):\n        for j in range(i):\n            c, s, f = routes[j]\n            if s <= dp[i] < dp[j] + c:\n                dp[i] = dp[j] + c\n                \n    return '\\n'.join(map(str, dp))"
    },
    {
        "number": 4620,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    trains = []\n    for i in range(1, n):\n        c, s, f = map(int, lines[i].split())\n        trains.append((c, s, f))\n    \n    times = [float(\"inf\")] * n\n    times[0] = 0\n    \n    for i in range(n):\n        for c, s, f in trains:\n            if s > i:\n                continue\n            if s == i:\n                t = max(times[i], s + c)\n            else:\n                t = (s + i) // f * f\n                t += max(0, s - t) + max(0, i - t) + c\n            times[i] = min(times[i], t)\n    \n    return \"\\n\".join(map(str, times[1:]))"
    },
    {
        "number": 4620,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.strip().split()))\n    N = data[0]\n    data = data[1:]\n    stations = []\n    for i in range(N-1):\n        c, s, f = data[i*3:i*3+3]\n        stations.append((s, f))\n    x = 0\n    for s, f in stations:\n        x = (x + s) % f\n    return str(x)"
    },
    {
        "number": 4620,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    trains = []\n    for i in range(1, N):\n        C, S, F = map(int, lines[i].split())\n        trains.append((C, S, F))\n    \n    dp = [float('inf')] * N\n    dp[0] = 0\n    for i in range(1, N):\n        for j in range(i):\n            c, s, f = trains[j]\n            if s > dp[i]:\n                continue\n            dp[i] = min(dp[i], dp[j] + s + c + (i-j-1)*f)\n    return \"\\n\".join(map(str, dp))"
    },
    {
        "number": 4620,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    c = [int(x) for x in lines[1].split()]\n    s = [int(x) for x in lines[2].split()]\n    f = [int(x) for x in lines[3].split()]\n\n    # Initialize variables\n    x = 0\n    t = 0\n\n    # Iterate through stations\n    for i in range(n):\n        # Calculate time needed to reach station i+1 from station i\n        next_t = max(x + c[i], (t + s[i]) // f[i] * f[i] + c[i])\n\n        # Update x and t\n        x = next_t - c[i]\n        t = next_t\n\n    # Return output\n    return '\\n'.join(str(x) for x in c)"
    },
    {
        "number": 4620,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    times = []\n    for i in range(N):\n        C_i, S_i, F_i = map(int, stdin.split())\n        times.append((C_i, S_i, F_i))\n    result = [float('inf')] * N\n    result[0] = times[0][1]\n    for i in range(1, N):\n        C_i, S_i, F_i = times[i]\n        result[i] = result[i-1] + S_i\n        if S_i % F_i!= 0:\n            result[i] = min(result[i], result[i-1] + S_i + F_i - S_i % F_i)\n    result = [str(int(t)) for t in result]\n    return '\\n'.join(result)"
    },
    {
        "number": 4620,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    input_data = [list(map(int, stdin.readline().split())) for _ in range(N-1)]\n    train_schedule = {i+1: {'depart': s, 'frequency': f} for i, (s, f) in enumerate(input_data)}\n    train_schedule[N] = {'depart': 0, 'frequency': 0} # Add the final station\n    train_schedule[1] = {'depart': 0, 'frequency': 1} # Add the starting station\n    station_schedule = {i+1: 0 for i in range(N+1)}\n    station_schedule[1] = 0\n    station_schedule[N] = 0\n    for i in range(2, N+1):\n        depart_time = train_schedule[i]['depart']\n        frequency = train_schedule[i]['frequency']\n        if station_schedule[i-1] > depart_time:\n            station_schedule[i] = station_schedule[i-1]\n        else:\n            station_schedule[i] = depart_time\n        while True:\n            depart_time += frequency\n            if depart_time >= station_schedule[i]:\n                station_schedule[i] = depart_time\n                break\n            if depart_time > station_schedule[i-1]:\n                station_schedule[i] = depart_time\n    result = [station_schedule[i] for i in range(1, N+1)]\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4620,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    station_times = []\n    for i in range(n):\n        c, s, f = map(int, lines[i+1].split())\n        station_times.append((c, s, f))\n    station_times = sorted(station_times, key=lambda x: x[1])\n    dp = [float('inf')] * n\n    dp[0] = 0\n    for i in range(n):\n        for j in range(i):\n            if station_times[i][1] % station_times[j][2] == 0:\n                dp[i] = min(dp[i], dp[j] + (station_times[i][1] - station_times[j][1]) // station_times[j][2] * station_times[j][0])\n    return '\\n'.join(str(x) for x in dp)"
    },
    {
        "number": 4620,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N = int(stdin.readline().strip())\n    train_times = [list(map(int, stdin.readline().strip().split())) for _ in range(N-1)]\n\n    # Initialize variables\n    current_time = 0\n    last_train_time = 0\n    train_count = 0\n\n    # Loop through trains\n    for i in range(N-1):\n        # Update train count and time\n        train_count += 1\n        current_time += train_times[i][0]\n        if current_time - last_train_time >= train_times[i][1]:\n            train_count -= 1\n            current_time = train_times[i][1] + train_times[i][2]\n            last_train_time = train_times[i][1]\n        else:\n            current_time = (current_time // train_times[i][1]) * train_times[i][1]\n            last_train_time = (current_time // train_times[i][1]) * train_times[i][1] + train_times[i][2]\n\n    # Calculate output\n    output = [current_time if i == train_count else -1 for i in range(N)]\n\n    # Return output as a string\n    return \"\\n\".join(map(str, output))"
    },
    {
        "number": 4621,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.readline().split())\n    image = []\n    for i in range(h):\n        image.append(list(stdin.readline().strip()))\n    image_extended = []\n    for i in range(h):\n        image_extended.append([])\n        for j in range(w):\n            image_extended[i].append(image[i][j])\n    for i in range(h, h*2):\n        image_extended.append([])\n        for j in range(w):\n            image_extended[i].append(image[i-h][j])\n    for row in image_extended:\n        print(\"\".join(row))\n    return \"\""
    },
    {
        "number": 4621,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    H, W = map(int, stdin.readline().strip().split())\n    img = [list(stdin.readline().strip()) for _ in range(H)]\n\n    # extend image vertically\n    img = img + img[::-1]\n\n    # apply transformation\n    img = [[img[i//2][j] for j in range(W)] for i in range(2*H)]\n\n    # print output\n    for row in img:\n        print(''.join(row))\n\n    return ''\n"
    },
    {
        "number": 4621,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().split())\n    C = [list(stdin.readline().strip()) for _ in range(H)]\n    extended_C = [['.' for j in range(W)] for i in range(2*H)]\n    for i in range(H):\n        for j in range(W):\n            extended_C[2*i][j] = C[i][j]\n    for i in range(H):\n        for j in range(W):\n            if C[i][j] == '.':\n                extended_C[2*i+1][j] = '.'\n            elif C[i][j] == '*':\n                extended_C[2*i+1][j] = '*'\n    return '\\n'.join([''.join(row) for row in extended_C])\n\nstdin = '''2 2\n*.\n.*'''\n\nprint(solution(stdin))"
    },
    {
        "number": 4621,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    H, W = map(int, lines[0].split())\n    image = []\n    for i in range(H):\n        image.append(lines[i+1])\n    \n    extended_image = []\n    for i in range(H):\n        extended_image.append(image[i][0:W])\n    for i in range(H, 2*H):\n        extended_image.append(image[i-H][0:W])\n    \n    result = \"\"\n    for i in range(2*H):\n        for j in range(W):\n            if image[i][j] == \".\":\n                result += \".\"\n            elif image[i][j] == \"*\":\n                result += \".\" if extended_image[i][j] == \".\" else \"*\"\n        result += \"\\n\"\n    \n    return result\n"
    },
    {
        "number": 4621,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    H, W = map(int, lines[0].split())\n    image = [list(line.strip()) for line in lines[1:]]\n\n    extended_image = [[image[i][j] for j in range(W)] for i in range(H)]\n    for i in range(H, 2*H):\n        for j in range(W):\n            extended_image[i][j] = image[i-H][j]\n\n    for i in range(2*H):\n        print(''.join(extended_image[i]))\n\n    return \"\"\n\ndef"
    },
    {
        "number": 4621,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().split())\n    img = []\n    for i in range(H):\n        img.append(list(stdin.readline().strip()))\n    extended_img = [[0 for _ in range(W)] for _ in range(2*H)]\n    for i in range(H):\n        for j in range(W):\n            extended_img[i][j] = img[i][j]\n    for i in range(H, 2*H):\n        for j in range(W):\n            extended_img[i][j] = img[(i-H)//2][j]\n    for row in extended_img:\n        print(''.join(row))\n    return ''"
    },
    {
        "number": 4621,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    H, W = map(int, stdin.split()[0].split())\n    img = []\n    for line in stdin.split(\"\\n\")[1:]:\n        img.append(list(line))\n\n    # Extend image\n    new_img = []\n    for i in range(H):\n        for j in range(W):\n            new_img.append(img[i][j])\n    for i in range(H):\n        for j in range(W):\n            new_img.append(img[i][j])\n\n    # Print new image\n    for i in range(0, 2*H, H):\n        for j in range(W):\n            print(new_img[i+j], end=\"\")\n        print()\n\n    return \"\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    h, w = map(int, stdin.readline().split())\n    img = [list(stdin.readline().strip()) for _ in range(h)]\n\n    # Extend image vertically\n    extended_img = [['.' for j in range(w)] for i in range(2*h)]\n    for i in range(h):\n        for j in range(w):\n            extended_img[i][j] = img[i][j]\n    for i in range(h, 2*h):\n        for j in range(w):\n            extended_img[i][j] = img[(i-h)//2][j]\n\n    # Print extended image\n    for row in extended_img:\n        print(''.join(row))\n\n    return ''"
    },
    {
        "number": 4621,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split('\\n')\n    h, w = list(map(int, lines[0].split()))\n    img = lines[1:]\n\n    # extend image\n    img_ext = [''] * (2*h)\n    for i in range(h):\n        for j in range(w):\n            img_ext[2*i] += img[i][j]\n            img_ext[2*i+1] += img[i][j]\n\n    # print extended image\n    for line in img_ext:\n        print(line)\n\n    return ''\n"
    },
    {
        "number": 4621,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().strip().split())\n    image = [[c for c in stdin.readline().strip()] for _ in range(H)]\n    extended_image = []\n    for i in range(H):\n        extended_image.append([])\n        for j in range(W):\n            extended_image[i].append(image[i//2][j])\n    return '\\n'.join([''.join(row) for row in extended_image])\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n\nprint(solution(stdin))"
    },
    {
        "number": 4622,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Check if the elements are pairwise distinct\n    distinct = True\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if A[i] == A[j]:\n                distinct = False\n                break\n        if not distinct:\n            break\n\n    # Print result\n    if distinct:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4622,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    distinct = True\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] == a[j]:\n                distinct = False\n                break\n        if not distinct:\n            break\n    return \"YES\" if distinct else \"NO\"\n\nprint(solution(input()))"
    },
    {
        "number": 4622,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    distinct_nums = set(nums)\n    if len(distinct_nums) == n:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4622,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    \n    # Check if elements are pairwise distinct\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] == A[j]:\n                return \"NO\"\n    \n    # Return \"YES\" if elements are pairwise distinct\n    return \"YES\""
    },
    {
        "number": 4622,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    if len(set(arr)) == n:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4622,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    unique_a = set(a)\n    if len(a) == len(unique_a):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nwith open('input.txt', 'r') as f:\n    stdin = f.read()\n    print(solution(stdin))"
    },
    {
        "number": 4622,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    # Check if elements are pairwise distinct\n    distinct = True\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if a[i] == a[j]:\n                distinct = False\n                break\n        if not distinct:\n            break\n            \n    # Print the output\n    if distinct:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4622,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if a[i] == a[j]:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4622,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split()]\n\n    # Check if elements are pairwise distinct\n    distinct = True\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] == A[j]:\n                distinct = False\n                break\n        if not distinct:\n            break\n\n    if distinct:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4622,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # check if elements are pairwise distinct\n    if len(A) == len(set(A)):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4623,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        weights = list(map(int, stdin.readline().split()))\n        max_weight = sum(weights)\n        k = 0\n        for j in range(n):\n            for l in range(j+1, n):\n                if weights[j] + weights[l] == max_weight:\n                    k += 1\n        print(k)\n    return \"\""
    },
    {
        "number": 4623,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    for i in range(1, int(lines[0]) * 2, 2):\n        n, *weights = list(map(int, lines[i].split()))\n        weights.sort()\n        s = sum(weights) // 2\n        if s == weights[-1]:\n            k = 1\n        else:\n            k = sum(weights[i] < s for i in range(n))\n        print(k)\n\ndef"
    },
    {
        "number": 4623,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        weights = [int(stdin.readline().strip()) for _ in range(n)]\n        weights.sort()\n        s = sum(weights)\n        max_teams = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if weights[i] + weights[j] == s:\n                    max_teams += 1\n        print(max_teams)"
    },
    {
        "number": 4623,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        weights = list(map(int, stdin.readline().strip().split()))\n        max_teams = 0\n        for i in range(1, n//2+1):\n            max_teams = max(max_teams, (n-i)//(i+1))\n        max_teams = max(max_teams, (n+1)//2)\n        print(max_teams)\n\nwith open('input.txt', 'r') as f:\n    input_str = f.read()\n\nsolution(input_str)"
    },
    {
        "number": 4623,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    tests = int(stdin.split()[0])\n    for i in range(tests):\n        n = int(stdin.split()[0])\n        weights = list(map(int, stdin.split()[1:]))\n        max_weight = sum(weights) // 2\n        if max_weight == 0:\n            print(1)\n            continue\n        num_teams = 1\n        total_weight = 0\n        for weight in sorted(weights, reverse=True):\n            if total_weight + weight <= max_weight:\n                total_weight += weight\n                num_teams += 1\n        print(num_teams)\n    return \"\""
    },
    {
        "number": 4623,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for i in range(t):\n        n = int(stdin.split('\\n')[1])\n        weights = list(map(int, stdin.split('\\n')[2].split()))\n        if n == 2:\n            print(1)\n        elif n == 3:\n            print(2)\n        elif n == 4:\n            print(3)\n        elif n == 5:\n            print(4)\n        else:\n            max_weight = sum(weights)\n            max_teams = n\n            for i in range(1, n//2+1):\n                teams = [(weights[j], weights[j+i]) for j in range(n-i) if weights[j] + weights[j+i] <= max_weight]\n                max_teams = max(max_teams, len(teams))\n            print(max_teams)\n        stdin = stdin[stdin.find('\\n')+1:]\n\nstdin = '''5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2'''\n\nsolution(stdin) # output: 2"
    },
    {
        "number": 4623,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    num_cases = int(stdin.readline().strip())\n    \n    for i in range(num_cases):\n        n = int(stdin.readline().strip())\n        weights = list(map(int, stdin.readline().strip().split()))\n        \n        # Calculate total weight\n        total_weight = sum(weights)\n        \n        # Initialize max teams count\n        max_teams = 0\n        \n        # Find maximum teams count\n        for i in range(n):\n            for j in range(i+1, n):\n                if weights[i] + weights[j] == total_weight:\n                    max_teams += 1\n        \n        # Print max teams count for current case\n        print(max_teams)"
    },
    {
        "number": 4623,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    weights = list(map(int, stdin.readline().strip().split()))\n    max_weight = sum(weights) // 2\n    team_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if weights[i] + weights[j] <= max_weight:\n                team_count += 1\n    return team_count\n"
    },
    {
        "number": 4623,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    test_cases = stdin.split('\\n\\n')\n\n    for test_case in test_cases:\n        lines = test_case.split('\\n')\n        n = int(lines[0])\n        weights = list(map(int, lines[1].split()))\n\n        k = 0\n        s = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                k += 1\n                s += weights[i] + weights[j]\n                if s > sum(weights) // 2:\n                    break\n        print(k)\n\n    return ''"
    },
    {
        "number": 4623,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    weights = list(map(int, lines[1].split()))\n    s = sum(weights) // 2\n    teams = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if weights[i] + weights[j] == s:\n                teams += 1\n    return str(teams)\n\nprint(solution('5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2')) # Output: 2\\n3\\n4\\n1\\n2"
    },
    {
        "number": 4624,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for case in stdin.split('\\n')[1:]:\n        n, x = map(int, case.split())\n        floor = 1\n        while n > 0:\n            n -= x ** floor\n            floor += 1\n        print(floor - 1)"
    },
    {
        "number": 4624,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    results = []\n    for i in range(1, t+1):\n        n, x = map(int, lines[i].split())\n        apartment = n\n        floor = 1\n        while apartment > x:\n            floor += 1\n            apartment -= x\n        results.append(floor)\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4624,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n, x = map(int, stdin.readline().split())\n        if n == 1:\n            print(1)\n        elif n < x:\n            print(1 + (n-1)//x)\n        else:\n            floor = 1\n            apartment = 2\n            while apartment <= n:\n                apartment += 2**(floor-1) * x\n                floor += 1\n            print(floor - 1)"
    },
    {
        "number": 4624,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n, x = map(int, stdin.readline().split())\n        if n == 1:\n            print(1)\n        elif n == 2:\n            print(2)\n        else:\n            floor = 1\n            while True:\n                apartments_on_floor = (floor - 1) * x + 2\n                if apartments_on_floor >= n:\n                    break\n                floor += 1\n            print(floor)\n        stdin = stdin[stdin.find(\"\\n\")+1:]\n    return \"\""
    },
    {
        "number": 4624,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    for i in range(1, len(inputs)):\n        n, x = map(int, inputs[i].split())\n        floor = 1\n        while True:\n            apartments = sum(range(1, x+1))\n            if apartments >= n:\n                break\n            floor += 1\n            apartments += x * (floor-1)\n        print(floor)"
    },
    {
        "number": 4624,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, x = map(int, stdin.readline().strip().split())\n        # Finding floor of Petya's apartment\n        floor = 1\n        count = 2\n        while True:\n            if count + x - 1 > n:\n                break\n            count += x\n            floor += 1\n        # Printing output\n        print(floor)"
    },
    {
        "number": 4624,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, x = map(int, stdin.readline().strip().split())\n        if n <= 2:\n            print(1)\n        else:\n            floor = (n - 1) // x + 1\n            print(floor)\n    return \"\"\n\ndef"
    },
    {
        "number": 4624,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n, x = map(int, lines[i].split())\n        if n <= 2:\n            floor = 1\n        else:\n            floor = n // (x + 1)\n        print(floor)"
    },
    {
        "number": 4624,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline().strip())\n    for i in range(test_cases):\n        n, x = map(int, stdin.readline().strip().split())\n        floor = 1\n        while n > x:\n            n -= x\n            floor += 1\n        print(floor)\n    return \"\""
    },
    {
        "number": 4624,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, x = map(int, stdin.readline().strip().split())\n        if n < x:\n            print(1)\n        else:\n            floor = (n + x - 1) // x\n            print(floor)\n    return \"\""
    },
    {
        "number": 4625,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        p = list(map(int, stdin.readline().strip().split()))\n        press_count = [0] * 26\n        for i in range(m+1):\n            if i == m:\n                combo = s\n            else:\n                combo = s[p[i]:] + s[:p[i]]\n            for c in combo:\n                press_count[ord(c) - ord('a')] += 1\n        print(*press_count)"
    },
    {
        "number": 4625,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    t = int(lines[0])\n    for i in range(1, t*4, 4):\n        n, m = map(int, lines[i].split())\n        s = lines[i+1]\n        p = list(map(int, lines[i+2].split()))\n        dp = [0]*26\n        for j in range(m+1):\n            dp[ord(s[j])-ord('a')] += 1\n            if j < m and j+1 > p[j]:\n                dp = [0]*26\n        ans = list(map(str, dp))\n        print(\" \".join(ans))"
    },
    {
        "number": 4625,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline())\n    for _ in range(test_cases):\n        n, m = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n        p = list(map(int, stdin.readline().split()))\n        dp = [0] * n\n        for i in range(m):\n            dp[p[i]-1] += 1\n        for i in range(1, n):\n            dp[i] += dp[i-1]\n        ans = [0] * 26\n        for i in range(n):\n            ans[ord(s[i])-ord('a')] += dp[i]\n        print(' '.join(map(str, ans)))"
    },
    {
        "number": 4625,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        p = list(map(int, stdin.readline().strip().split()))\n        freq = [0] * 26\n        for j in range(m):\n            freq[ord(s[p[j]-1])-ord('a')] += 1\n            freq[ord(s[(p[j]+1)%n])-ord('a')] += 1\n        for j in range(26):\n            freq[j] = max(freq[j], 1)\n            freq[j] = min(freq[j], m)\n            freq[j] += 1\n        print(' '.join(map(str, freq)))"
    },
    {
        "number": 4625,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    t = int(stdin.readline())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        p = list(map(int, stdin.readline().strip().split()))\n\n        # Check if n+m > 2*10**5\n        if n+m > 2*10**5:\n            return \"n+m > 2*10**5\"\n\n        # Initialize counts\n        counts = [0]*26\n\n        # Count number of times 'a' is pressed\n        counts[ord(s[0])-ord('a')] += 1\n\n        # Perform combo for each wrong try\n        for j in range(m):\n            if j == p[j]-1:\n                continue\n            counts[ord(s[j])-ord('a')] += 1\n            for k in range(j+1, p[j]):\n                counts[ord(s[k])-ord('a')] += 1\n            for k in range(p[j]-1):\n                counts[ord(s[j+1+k])-ord('a')] -= 1\n            counts[ord(s[p[j]-1])-ord('a')] += 1\n\n        # Perform combo for final try\n        counts[ord(s[m])-ord('a')] += 1\n        for k in range(m):\n            counts[ord(s[m+1+k])-ord('a')] -= 1\n\n        # Output counts\n        print(*counts, sep=' ')\n\nstdin = \"\"\"\n3\n4 2\nabca\n1 3\n10 5\ncodeforces\n2 8 3 2 9\n26 10\nqwertyuioplkjhgfdsazxcvbnm\n20 10 1 2 3 5 10 5 9 4\n\"\"\"\n\nsolution(stdin)"
    },
    {
        "number": 4625,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    tests = int(stdin.readline().strip())\n    for test in range(tests):\n        n, m = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        p = list(map(int, stdin.readline().strip().split()))\n        freq = [0] * 26\n        for i in range(m + 1):\n            if i == m:\n                combo = s\n            else:\n                combo = s[p[i]:] + s[:p[i]]\n            for j in range(len(combo)):\n                freq[ord(combo[j]) - ord('a')] += 1\n        print(*freq)\n    return ''\n"
    },
    {
        "number": 4625,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4625,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    s = lines[1]\n    p = list(map(int, lines[2].split()))\n    ans = [0] * 26\n    for i in range(n):\n        ans[ord(s[i]) - ord('a')] += 1\n    for i in range(m):\n        ans[p[i]-1] -= 1\n        ans[ord(s[p[i]-1]) - ord('a')] -= 1\n    for i in range(n):\n        ans[ord(s[i]) - ord('a')] += 1\n    return''.join(map(str, ans))\n\ndef"
    },
    {
        "number": 4625,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        p = list(map(int, stdin.readline().strip().split()))\n        dp = [0] * 26\n        dp[ord(s[0]) - ord('a')] = 1\n        for i in range(1, m+1):\n            if i <= len(p) and i == p[i-1]:\n                dp = [0] * 26\n            for j in range(26):\n                if dp[j] > 0:\n                    dp[(j+1) % 26] += dp[j]\n                    dp[j] = 0\n            if i <= len(p) and i == p[i-1]:\n                dp[(ord(s[i-1]) - ord('a')) % 26] += 1\n        result = [0] * 26\n        for i in range(n):\n            result[ord(s[i]) - ord('a')] = dp[i % 26]\n        print(*result)\n\nstdin = \"\"\"\n3\n4 2\nabca\n1 3\n10 5\ncodeforces\n2 8 3 2 9\n26 10\nqwertyuioplkjhgfdsazxcvbnm\n20 10 1 2 3 5 10 5 9 4\n\"\"\"\nsolution(stdin) # Output: 4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 9 4 5 3 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2"
    },
    {
        "number": 4625,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def perform_combo(combo: str):\n        press_count = [0] * 26\n        for i, c in enumerate(combo):\n            press_count[ord(c) - ord('a')] += 1\n        return press_count\n\n    def count_press(combo: str, presses: List[int]) -> List[int]:\n        press_count = [0] * 26\n        for i, c in enumerate(combo):\n            press_count[ord(c) - ord('a')] += 1\n        press_count[presses[0] - 1] -= 1\n        press_count[presses[1] - 1] -= 1\n        press_count[ord(combo[presses[0] - 1]) - ord('a')] -= 1\n        press_count[ord(combo[presses[1] - 1]) - ord('a')] -= 1\n        return press_count\n\n    tests = int(stdin.readline())\n    for i in range(tests):\n        n, m = map(int, stdin.readline().split())\n        combo = stdin.readline().strip()\n        presses = list(map(int, stdin.readline().split()))\n        press_count = perform_combo(combo)\n        for j in range(m):\n            press_count = count_press(combo, presses[j:])\n            print(' '.join(map(str, press_count)))\n        print()\n"
    },
    {
        "number": 4626,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    q = int(stdin[0])\n    result = []\n    for i in range(1, q+1):\n        a, b, c = map(int, stdin[i].split())\n        diff = abs(a-b) + abs(a-c) + abs(b-c)\n        result.append(diff)\n    return '\\n'.join(map(str, result))\n\ndef"
    },
    {
        "number": 4626,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given initial positions of three friends a, b, and c,\n    return the minimum total pairwise distance they can reach after one minute.\n    \"\"\"\n    lines = stdin.splitlines()\n    q = int(lines[0])\n    result = []\n    for i in range(1, q+1):\n        a, b, c = map(int, lines[i].split())\n        d = abs(a-b) + abs(a-c) + abs(b-c)\n        result.append(str(d))\n    return \"\\n\".join(result)"
    },
    {
        "number": 4626,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    for i in range(q):\n        a, b, c = map(int, stdin.readline().split())\n        d = abs(a - b) + abs(a - c) + abs(b - c)\n        print(d)\n    return \"\""
    },
    {
        "number": 4626,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for test_case in stdin.split('\\n')[1:]:\n        a, b, c = map(int, test_case.split())\n        min_distance = abs(a - b) + abs(a - c) + abs(b - c)\n        if abs(a - b) > 1 or abs(a - c) > 1 or abs(b - c) > 1:\n            min_distance -= 1\n        print(min_distance)"
    },
    {
        "number": 4626,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    result = []\n    for i in range(1, q+1):\n        a, b, c = map(int, lines[i].split(' '))\n        if a < b and b < c:\n            result.append(0)\n        else:\n            dist1 = abs(a - b)\n            dist2 = abs(a - c)\n            dist3 = abs(b - c)\n            result.append(dist1 + dist2 + dist3)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4626,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    q = int(lines[0])\n    results = []\n    for i in range(1, q+1):\n        a, b, c = map(int, lines[i].split())\n        if a > b:\n            a, b = b, a\n        if a > c:\n            a, c = c, a\n        if b > c:\n            b, c = c, b\n        if a + b <= c:\n            results.append(0)\n        else:\n            results.append(a+b+c-2*max(a, b, c))\n    return \"\\n\".join(map(str, results))"
    },
    {
        "number": 4626,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    for i in range(q):\n        a, b, c = map(int, stdin.readline().strip().split())\n        dist = abs(a - b) + abs(a - c) + abs(b - c)\n        print(dist)\n"
    },
    {
        "number": 4626,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    q = int(lines[0])\n    results = []\n    for i in range(1, q+1):\n        a, b, c = map(int, lines[i].split())\n        min_dist = abs(a - b) + abs(a - c) + abs(b - c)\n        if a!= b and b!= c and a!= c:\n            if a < b and b < c:\n                min_dist = min(min_dist, abs(a-b-1) + abs(b-c-1) + abs(a-c-2))\n            elif a > b and b > c:\n                min_dist = min(min_dist, abs(a-b+1) + abs(b-c+1) + abs(a-c+2))\n        results.append(str(min_dist))\n    return '\\n'.join(results)"
    },
    {
        "number": 4626,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n')[1:]:\n        a, b, c = map(int, line.split())\n        if abs(a - b) <= 1 and abs(a - c) <= 1:\n            print(0)\n        else:\n            a_new = max(a - 1, b - 1, c - 1)\n            b_new = min(b + 1, c + 1, a + 1)\n            c_new = min(a + 1, b + 1, c + 1)\n            print(abs(a_new - b_new) + abs(a_new - c_new) + abs(b_new - c_new))"
    },
    {
        "number": 4626,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        a, b, c = map(int, stdin.readline().strip().split())\n        min_dist = abs(a - b) + abs(a - c) + abs(b - c)\n        # check if moving left is better than staying\n        if a > b and a > c:\n            min_dist -= 1\n            a -= 1\n        # check if moving right is better than staying\n        elif b > a and b > c:\n            min_dist -= 1\n            b -= 1\n        else:\n            min_dist -= 1\n            c -= 1\n        print(min_dist)\n    return \"\"\n\nassert solution(\n    \"\"\"\n    8\n    3 3 4\n    10 20 30\n    5 5 5\n    2 4 3\n    1 1000000000 1000000000\n    1 1000000000 999999999\n    3 2 5\n    3 2 6\n    \"\"\"\n) == \"\"\"\n0\n36\n0\n0\n1999999994\n1999999994\n2\n4\n\"\"\""
    },
    {
        "number": 4627,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().strip().split()))\n        if n % 2 == 1:\n            print(\"NO\")\n            continue\n        pairs = []\n        for i in range(0, n, 2):\n            for j in range(i+2, n, 2):\n                if abs(a[i] - a[j]) == 1 or a[i] % 2 == a[j] % 2:\n                    pairs.append((a[i], a[j]))\n                    break\n        if len(pairs)!= n//2:\n            print(\"NO\")\n            continue\n        used = [False]*n\n        for i in range(n//2):\n            if used[i] or used[i+n//2]:\n                print(\"NO\")\n                break\n            if abs(pairs[i][0] - pairs[i+n//2][0])!= 1 and abs(pairs[i][1] - pairs[i+n//2][1])!= 1:\n                print(\"NO\")\n                break\n            used[i] = used[i+n//2] = True\n        else:\n            print(\"YES\")"
    },
    {
        "number": 4627,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin.readline())):\n        n = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().strip().split()]\n        flag = True\n        for i in range(n):\n            for j in range(i+1, n):\n                if ((a[i] - a[j] == 1) or (a[i] - a[j] == -1)) and (a[i] % 2 == a[j] % 2):\n                    flag = False\n                    break\n            if not flag:\n                break\n        print(\"YES\" if flag else \"NO\")"
    },
    {
        "number": 4627,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cases = list(map(int, stdin.strip().split()))\n    for i in range(cases[0]):\n        n = cases[1+2*i]\n        a = cases[2+2*i:2+2*i+n]\n        pair = set()\n        for num in a:\n            if num%2 == 1:\n                if num-1 in pair or num+1 in pair:\n                    continue\n                pair.add(num)\n        if len(pair) == n//2:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4627,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for i, line in enumerate(stdin.split('\\n')):\n        if i == 0:\n            continue\n        n = int(line.split()[0])\n        a = list(map(int, line.split()[1:]))\n        pairs = set()\n        for j in range(n):\n            for k in range(j+2, n, 2):\n                if (a[j] - a[k] == 1) or ((a[j] - a[k]) % 2 == 0 and a[j] % 2 == a[k] % 2):\n                    if (a[j], a[k]) in pairs or (a[k], a[j]) in pairs:\n                        continue\n                    pairs.add((a[j], a[k]))\n        if len(pairs) == n // 2:\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 4627,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for i in range(cases):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        pairs = set()\n        for x in a:\n            for y in a:\n                if x!= y:\n                    if x % 2 == y % 2 or abs(x - y) == 1:\n                        pairs.add((x, y))\n        if len(pairs) == n // 2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"Done\""
    },
    {
        "number": 4627,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    t = int(stdin.pop(0))\n    for _ in range(t):\n        n = int(stdin.pop(0))\n        a = list(map(int, stdin.pop(0).split()))\n        if n % 2!= 0 or len(a)!= n or len(set(a))!= n:\n            print(\"NO\")\n            continue\n        found = False\n        for i in range(n//2):\n            for j in range(i+1, n//2):\n                if a[i] % 2 == a[j] % 2 or abs(a[i]-a[j]) == 1:\n                    found = True\n                    break\n            if found:\n                break\n        if found:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 4627,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Args:\n        stdin (str): A string of input consisting of multiple test cases. Each test case is separated by a newline.\n            The first line of each test case contains an integer n (2 <= n <= 50), which is the length of the array a.\n            The second line of each test case contains n integers a1, a2,..., an, (1 <= a_i <= 100).\n\n    Returns:\n        str: The output string, which contains \"YES\" or \"NO\" for each test case, separated by a newline.\n    \"\"\"\n    cases = stdin.split('\\n')\n    cases = cases[1:]  # remove the first line, which is just the number of test cases\n    output = []\n    for case in cases:\n        n = int(case.split('\\n')[0])\n        a = [int(x) for x in case.split('\\n')[1].split()]\n        pairs = set()\n        for i in range(n):\n            for j in range(i+1, n):\n                if (a[i] - a[j]) % 2 == 0 or abs(a[i] - a[j]) == 1:\n                    pairs.add((a[i], a[j]))\n        if len(pairs) == n // 2:\n            output.append('YES')\n        else:\n            output.append('NO')\n    return '\\n'.join(output)"
    },
    {
        "number": 4627,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        pairs = {}\n        for num in a:\n            if num % 2 == 0:\n                if num in pairs:\n                    return \"NO\"\n                pairs[num] = True\n            else:\n                if (num - 1) in pairs or (num + 1) in pairs:\n                    return \"NO\"\n                pairs[(num - 1) if (num - 1) in pairs else (num + 1)] = True\n        return \"YES\""
    },
    {
        "number": 4627,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        pairs = set()\n        for j in range(n):\n            for k in range(j+2, n):\n                if (a[j] + a[k]) % 2 == 0 or abs(a[j] - a[k]) == 1:\n                    if (a[j], a[k]) in pairs or (a[k], a[j]) in pairs:\n                        continue\n                    pairs.add((a[j], a[k]))\n                    break\n            else:\n                print(\"NO\")\n                continue\n        if len(pairs) == n//2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 4627,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline().strip())\n    for _ in range(cases):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        if n % 2!= 0 or len(set(a))!= n:\n            print(\"NO\")\n            continue\n        for i in range(n):\n            for j in range(i+2, n, 2):\n                if (a[i] - a[j]) % 2 == 0 or abs(a[i] - a[j]) == 1:\n                    print(\"NO\")\n                    break\n            else:\n                continue\n            break\n        else:\n            print(\"YES\")"
    },
    {
        "number": 4628,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4628,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m, k = map(int, stdin.split()[:3])\n    roads = []\n    for _ in range(m):\n        x, y, w = map(int, stdin.split()[:3])\n        roads.append((x, y, w))\n    routes = []\n    for _ in range(k):\n        a, b = map(int, stdin.split()[:2])\n        routes.append((a, b))\n\n    # Compute distances\n    distances = [[float('inf')]*n for _ in range(n)]\n    for x, y, w in roads:\n        distances[x-1][y-1] = w\n        distances[y-1][x-1] = w\n\n    # Compute cheapest path\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                distances[i][j] = min(distances[i][j], distances[i][k]+distances[k][j])\n\n    # Find minimum total cost\n    min_cost = float('inf')\n    for a, b in routes:\n        min_cost = min(min_cost, distances[a-1][b-1])\n\n    # Print result\n    print(min_cost)\n\n    return str(min_cost)\n"
    },
    {
        "number": 4628,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    x, y, w = [], [], []\n    for i in range(m):\n        a, b, c = map(int, stdin.readline().split())\n        x.append(a)\n        y.append(b)\n        w.append(c)\n    a, b = [], []\n    for i in range(k):\n        c, d = map(int, stdin.readline().split())\n        a.append(c)\n        b.append(d)\n\n    dp = [[float(\"inf\")] * (n+1) for _ in range(n+1)]\n\n    for i in range(n+1):\n        dp[i][i] = 0\n\n    for i in range(m):\n        dp[x[i]][y[i]] = w[i]\n        dp[y[i]][x[i]] = w[i]\n\n    for k in range(1, n+1):\n        for i in range(1, n+1):\n            for j in range(1, n+1):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j])\n\n    ans = sum([dp[a[i]][b[i]] for i in range(k)])\n    return str(ans)"
    },
    {
        "number": 4628,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    n, m, k = map(int, stdin.split()[:3])\n    roads = []\n    for i in range(m):\n        x, y, w = map(int, stdin.split()[:3])\n        roads.append((x, y, w))\n\n    routes = []\n    for i in range(k):\n        a, b = map(int, stdin.split()[:2])\n        routes.append((a, b))\n\n    # Building graph\n    graph = [[] for _ in range(n+1)]\n    for x, y, w in roads:\n        graph[x].append((y, w))\n        graph[y].append((x, w))\n\n    # DFS for each node\n    visited = [False] * (n+1)\n    dist = [float('inf')] * (n+1)\n    dist[1] = 0\n    stack = [1]\n    while stack:\n        curr = stack.pop()\n        if visited[curr]:\n            continue\n        visited[curr] = True\n        for node, cost in graph[curr]:\n            if dist[curr] + cost < dist[node]:\n                dist[node] = dist[curr] + cost\n                stack.append(node)\n\n    # Calculating routes cost\n    total_cost = 0\n    for a, b in routes:\n        total_cost += dist[a] + dist[b]\n\n    return str(total_cost)"
    },
    {
        "number": 4628,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m, k = map(int, stdin.split()[0:3])\n    roads = [tuple(map(int, stdin.split())) for _ in range(m)]\n    routes = [tuple(map(int, stdin.split())) for _ in range(k)]\n    roads = [(x-1, y-1, w) for x, y, w in roads]\n    routes = [(x-1, y-1) for x, y in routes]\n\n    # Compute minimum distances\n    dist = [[float('inf')]*n for _ in range(n)]\n    for x, y, w in roads:\n        dist[x][y] = w\n        dist[y][x] = w\n\n    # Compute shortest paths\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                dist[i][j] = min(dist[i][j], dist[i][k]+dist[k][j])\n\n    # Compute total cost of courier routes\n    cost = sum(dist[a][b] for a, b in routes)\n\n    return str(cost)"
    },
    {
        "number": 4628,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().strip().split())\n    roads = []\n    for _ in range(m):\n        x, y, w = map(int, stdin.readline().strip().split())\n        roads.append((x-1, y-1, w))\n    routes = []\n    for _ in range(k):\n        a, b = map(int, stdin.readline().strip().split())\n        routes.append((a-1, b-1))\n    roads_cost = [[float('inf') for _ in range(n)] for _ in range(n)]\n    for x, y, w in roads:\n        roads_cost[x][y] = w\n        roads_cost[y][x] = w\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                roads_cost[i][j] = min(roads_cost[i][j], roads_cost[i][k]+roads_cost[k][j])\n    total_cost = 0\n    for a, b in routes:\n        total_cost += roads_cost[a][b]\n    print(total_cost)\n    return str(total_cost)"
    },
    {
        "number": 4628,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = []\n    for i in range(m):\n        x, y, w = map(int, stdin.split())\n        roads.append((x, y, w))\n    \n    routes = []\n    for i in range(k):\n        a, b = map(int, stdin.split())\n        routes.append((a, b))\n    \n    def d(x, y):\n        for road in roads:\n            if road[0] == x and road[1] == y:\n                return road[2]\n        return float('inf')\n    \n    dp = [[float('inf')] * n for _ in range(1 << n)]\n    for i in range(n):\n        dp[1 << i][i] = 0\n    \n    for mask in range(1 << n):\n        for i in range(n):\n            if mask & (1 << i):\n                continue\n            for j in range(n):\n                if mask & (1 << j):\n                    continue\n                if j == i:\n                    continue\n                dp[mask][j] = min(dp[mask][j], dp[mask ^ (1 << i)][i] + d(i, j))\n                \n    result = 0\n    for route in routes:\n        result += dp[((1 << n) - 1) ^ ((1 << route[0]) - 1)][route[1]]\n    \n    return str(result)"
    },
    {
        "number": 4628,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n\n    # compute d(x, y) for all pairs of nodes\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        x, y, w = map(int, stdin.split())\n        graph[x].append((y, w))\n        graph[y].append((x, w))\n    dist = [-1] * (n+1)\n\n    def dijkstra(start):\n        nonlocal dist\n        dist = [-1] * (n+1)\n        q = [(0, start)]\n        dist[start] = 0\n        while q:\n            d, u = heapq.heappop(q)\n            if dist[u]!= d:\n                continue\n            for v, w in graph[u]:\n                if dist[v] == -1 or dist[v] > d + w:\n                    dist[v] = d + w\n                    heapq.heappush(q, (d + w, v))\n\n    dijkstra(1)\n    for i in range(2, n+1):\n        if dist[i] == -1:\n            return \"impossible\"\n\n    # compute the total cost of each route\n    total_cost = []\n    for i in range(k):\n        a, b = map(int, stdin.split())\n        total_cost.append(dist[a] + dist[b])\n\n    # make the minimum cost road zero\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if dist[i] == dist[j]:\n                continue\n            min_cost = float('inf')\n            for k in range(m):\n                if graph[i][k][0] == j or graph[j][k][0] == i:\n                    min_cost = min(min_cost, graph[i][k][1] + graph[j][k][1])\n            if min_cost == dist[i] + dist[j]:\n                dist[i] = 0\n                dist[j] = 0\n                break\n\n    # compute the minimum total cost of routes\n    return sum(total_cost)"
    },
    {
        "number": 4628,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.strip().split())\n    roads = []\n    for _ in range(m):\n        x, y, w = map(int, stdin.strip().split())\n        roads.append((x, y, w))\n\n    routes = []\n    for _ in range(k):\n        a, b = map(int, stdin.strip().split())\n        routes.append((a, b))\n\n    # compute the cost of travel\n    cost = [[float('inf') for _ in range(n+1)] for _ in range(n+1)]\n    for x, y, w in roads:\n        cost[x][y] = w\n        cost[y][x] = w\n\n    # compute the cheapest cost of travel between districts\n    d = [[float('inf') for _ in range(n+1)] for _ in range(n+1)]\n    for k in range(1, n+1):\n        for i in range(1, n+1):\n            for j in range(1, n+1):\n                if i!= j and k!= i and k!= j:\n                    d[i][j] = min(d[i][j], cost[i][k] + cost[k][j])\n\n    # find the minimum total cost of courier routes\n    min_cost = float('inf')\n    for a, b in routes:\n        min_cost = min(min_cost, d[a][b])\n\n    return str(min_cost)"
    },
    {
        "number": 4628,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    edges = [list(map(int, stdin.split())) for _ in range(m)]\n    routes = [list(map(int, stdin.split())) for _ in range(k)]\n    graph = [[] for _ in range(n+1)]\n    for x, y, w in edges:\n        graph[x].append((y, w))\n        graph[y].append((x, w))\n    dp = [float('inf')] * (1<<n)\n    dp[1] = 0\n    for i in range(n):\n        for j in range(1, 1<<n):\n            if j & (1<<i):\n                for x, w in graph[i]:\n                    if not j & (1<<x):\n                        dp[j|(1<<x)] = min(dp[j|(1<<x)], dp[j]+w)\n    ans = float('inf')\n    for a, b in routes:\n        ans = min(ans, dp[(1<<a)|(1<<b)])\n    return str(ans)"
    },
    {
        "number": 4629,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"1\"\n    else:\n        for i in range(n, n+1000):\n            for j in range(2, int(i**(1/3))+1):\n                if i == 3**j:\n                    return str(i)\n        return \"-1\"  # not found"
    },
    {
        "number": 4629,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    for i in range(1, q+1):\n        n = int(lines[i])\n        m = n\n        while True:\n            if m % 3 == 0:\n                m += 1\n                if m % 3 == 0:\n                    m += 1\n                    if m % 3 == 0:\n                        m += 1\n                        continue\n            if m >= n:\n                print(m)\n                break"
    },
    {
        "number": 4629,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        n = int(stdin.readline().strip())\n        m = n\n        while m <= 10**4:\n            if is_good(m):\n                break\n            m += 1\n        print(m)\n\n\ndef"
    },
    {
        "number": 4629,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    q = int(lines[0])\n    result = []\n    for i in range(1, q+1):\n        n = int(lines[i])\n        m = n\n        while True:\n            m += 1\n            flag = True\n            for i in range(2, m+1):\n                if m % i == 0:\n                    flag = False\n                    break\n            if m % 3!= 0 or flag == False:\n                continue\n            if 3**m//2 < n:\n                break\n        result.append(str(m))\n    return '\\n'.join(result)"
    },
    {
        "number": 4629,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(n):\n        while n > 0:\n            if n % 3 == 0:\n                n //= 3\n            else:\n                return False\n        return True\n    \n    q = int(stdin.split()[0])\n    for i in range(q):\n        n = int(stdin.split()[1])\n        m = n + 1\n        while not is_good(m):\n            m += 1\n        print(m)"
    },
    {
        "number": 4629,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    queries = list(map(int, stdin.split()))\n    good_numbers = []\n    for query in queries:\n        if query == 1:\n            good_numbers.append(1)\n        else:\n            found_good_number = False\n            current_number = query + 1\n            while not found_good_number:\n                current_number += 1\n                found_power_of_3 = False\n                current_power_of_3 = 1\n                while not found_power_of_3:\n                    if current_power_of_3 ** 3 >= current_number:\n                        found_power_of_3 = True\n                    else:\n                        current_power_of_3 += 1\n                if current_number == current_power_of_3 ** 3:\n                    good_numbers.append(current_number)\n                    found_good_number = True\n    return '\\n'.join(map(str, good_numbers))"
    },
    {
        "number": 4629,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ans = n\n    while not is_good(ans):\n        ans += 1\n    return str(ans)\n\ndef"
    },
    {
        "number": 4629,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    q = int(stdin.readline().strip())\n    queries = [int(stdin.readline().strip()) for _ in range(q)]\n\n    # Define function to check if a number is good\n    def is_good(num: int) -> bool:\n        seen_powers = set()\n        while num > 0:\n            power = num % 3\n            if power == 0:\n                return False\n            if power in seen_powers:\n                return False\n            seen_powers.add(power)\n            num //= 3\n        return True\n\n    # Solve queries\n    for n in queries:\n        # Find smallest good number greater than or equal to n\n        m = n\n        while not is_good(m):\n            m += 1\n        print(m)\n\n    return \"\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        m = n\n        while True:\n            if is_good(m):\n                break\n            m += 1\n        print(m)\n        \ndef"
    },
    {
        "number": 4629,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    results = []\n    for i in range(1, q+1):\n        n = int(lines[i])\n        m = n\n        while True:\n            if m == 1:\n                results.append(str(m))\n                break\n            if is_good_number(m):\n                results.append(str(m))\n                break\n            m += 1\n    return '\\n'.join(results)\n\ndef"
    },
    {
        "number": 4630,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split(\"\\n\")\n    results = []\n    for query in queries:\n        if query == \"\":\n            continue\n        n, p = list(map(int, query.split()))\n        dp = [n] * n\n        for i in range(n):\n            dp[i] = dp[i] - 1 + dp[p[i]-1]\n        results.append(\" \".join(map(str, dp)))\n    return \"\\n\".join(results)"
    },
    {
        "number": 4630,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4630,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solve(p: List[int]) -> List[int]:\n        # p is the permutation of the kids\n        n = len(p)\n        dp = [-1] * n\n        for i in range(n):\n            j = p[i] - 1\n            dp[j] = i\n        return dp\n\n    def query(n: int, p: List[int]) -> str:\n        dp = solve(p)\n        ans = []\n        for i in range(1, n+1):\n            if dp[i-1] == -1:\n                ans.append(0)\n            else:\n                ans.append(dp[i-1]+1)\n        return''.join(str(x) for x in ans)\n    \n    q = int(stdin.readline())\n    for i in range(q):\n        n = int(stdin.readline())\n        p = list(map(int, stdin.readline().strip().split()))\n        ans = query(n, p)\n        print(ans)"
    },
    {
        "number": 4630,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        n = int(stdin.readline().strip())\n        p = list(map(int, stdin.readline().strip().split()))\n        dp = [100000000000000000000000 for _ in range(n)]\n        dp[0] = 0\n        for i in range(n):\n            for j in range(n):\n                if j!= p[i]:\n                    dp[j] = min(dp[j], dp[i]+1)\n        print(' '.join(str(x) for x in dp))\n\nstdin = \"\"\"\n6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n\"\"\"\n\nsolution(stdin)"
    },
    {
        "number": 4630,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.readline().split())\n    q = int(stdin.readline())\n    \n    dp = [0] * n\n    for i in range(n):\n        dp[p[i]-1] = i + 1\n        \n    for _ in range(q):\n        ans = []\n        for i in map(int, stdin.readline().split()):\n            ans.append(dp[i-1] if dp[i-1] else n)\n        print(*ans)\n        \n    return \"\"\n    \nstdin = \"\"\"\n6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n\"\"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4630,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    q, *queries = map(int, stdin.strip().split('\\n'))\n    \n    # solve each query\n    for query in queries:\n        n, p = query, tuple(map(int, stdin.readline().strip().split()))\n        count = [0] * n\n        \n        # iterate from day 1 to n\n        for day in range(1, n+1):\n            # update counts\n            for i in range(n):\n                count[i] += count[p[i]-1]\n                \n            # pass books\n            for i in range(n):\n                p[i] = p[p[i]-1]\n            \n        # print counts\n        print(*count)\n    \n    # return empty string to satisfy the prompt\n    return ''\n"
    },
    {
        "number": 4630,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    stdin = stdin.split(\"\\n\")[2:]\n    for i in range(q):\n        p = list(map(int, stdin[i].split()))\n        ans = [0] * n\n        for j in range(n):\n            for k in range(j+1, n):\n                if p[j] == k:\n                    ans[j] = k-j\n                    break\n        print(*ans)"
    },
    {
        "number": 4630,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    q = int(lines[0])\n    for i in range(1, q+1):\n        n, p = map(int, lines[i].split())\n        dp = [1000000] * n\n        for j in range(n):\n            dp[j] = p[j]\n        for j in range(n-1):\n            for k in range(j+1, n):\n                if dp[j] > dp[k] and p[j] > p[k]:\n                    dp[j] = dp[k]\n        for j in range(n):\n            dp[j] = dp[p[j]-1]\n        print(' '.join(map(str, dp)))\n    return \"\"\n\ndef"
    },
    {
        "number": 4630,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    q = int(lines[0])\n    results = []\n    for i in range(1, q+1):\n        n = int(lines[i*3-2])\n        p = list(map(int, lines[i*3-1].split()))\n        dp = [0] * n\n        for i in range(1, n):\n            dp[p[i]-1] = i + 1\n        for i in range(n):\n            if dp[i] == 0:\n                dp[i] = n+1\n        results.append(' '.join(map(str, dp)))\n    return '\\n'.join(results)\n\nprint(solution(\"\"\"6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\"\"\")) # Output: 1 1 1 1 1 \\n 3 3 3 \\n 2 3 3 2 1 3 \\n 1 \\n 2 2 2 2 \\n 4 4 4 1 4"
    },
    {
        "number": 4630,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4631,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    x = list(map(int, stdin.strip().split()))\n    x.sort()\n    min_dist = sum(abs(x[i]-x[i+1]) for i in range(n-1))\n    dp = [float('inf')] * (1 << n)\n    dp[0] = 0\n    for mask in range(1 << n):\n        for i in range(n):\n            if mask & (1 << i):\n                continue\n            dp[mask | (1 << i)] = min(dp[mask | (1 << i)], dp[mask] + abs(x[i] - x[mask.bit_count()]))\n    res = min(dp)\n    if res > min_dist * m:\n        return \"Impossible\"\n    y = [-float('inf')] * (m+1)\n    y[0] = -1\n    for mask in range(1 << m):\n        dist = 0\n        for i in range(m):\n            if mask & (1 << i):\n                continue\n            dist += min(abs(x[j] - y[i]) for j in range(n))\n            y[mask | (1 << i)] = -float('inf')\n        if dist < min_dist * m:\n            min_dist = dist\n    y.pop()\n    return str(min_dist) + \"\\n\" + \" \".join(str(e) for e in y)"
    },
    {
        "number": 4631,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    xs = list(map(int, stdin.split()))\n    xs.sort()\n\n    res = float('inf')\n    ans = None\n\n    for i in range(m+1):\n        for j in range(i+1, m+1):\n            s = 0\n            d = []\n            for k in range(n):\n                d.append(min(abs(xs[k]-i), abs(xs[k]-j)))\n                s += d[-1]\n            if s < res:\n                res = s\n                ans = [i, j] + xs[n-1:0:-1]\n\n    return str(res) + \"\\n\" + \" \".join(map(str, ans))"
    },
    {
        "number": 4631,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n\n    x.sort()\n    d = [float('inf') for i in range(n)]\n    for i in range(n):\n        if i == 0:\n            d[i] = abs(x[i]-x[i+1])\n        elif i == n-1:\n            d[i] = abs(x[i]-x[i-1])\n        else:\n            d[i] = min(abs(x[i]-x[i-1]), abs(x[i]-x[i+1]))\n\n    dp = [[float('inf') for j in range(m+1)] for i in range(n+1)]\n    dp[0][0] = 0\n\n    for i in range(1, n+1):\n        for j in range(m+1):\n            for k in range(j+1):\n                dp[i][j] = min(dp[i][j], dp[i-1][k] + abs(x[i-1]-y))\n\n    res = float('inf')\n    for i in range(m+1):\n        for j in range(i+1):\n            if dp[n][i] == dp[n][j]:\n                res = min(res, sum(d[:j]))\n\n    print(res)\n    print(' '.join(map(str, y)))\n\nstdin = \"2 6\\n1 5\"\n\nsolution(stdin) # Output: 8 -1 2 6 4 0 3"
    },
    {
        "number": 4631,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    x = list(map(int, stdin.readline().strip().split()))\n    min_sum = float('inf')\n    for i in range(1, 2*m+1):\n        y = list(map(int, stdin.readline().strip().split()))\n        y = y[:i]\n        sum_d = sum(min(abs(j-xi) for xi in x) for j in y)\n        if sum_d < min_sum:\n            min_sum = sum_d\n            res = y\n    return f\"{min_sum}\\n{' '.join(map(str, res))}\""
    },
    {
        "number": 4631,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    xs = list(map(int, stdin.split()[2:2+n]))\n    xs.sort()\n    #print(xs)\n    \n    distances = []\n    for i in range(m):\n        y = int(stdin.split()[2+n+i])\n        d = min(abs(y - xs[j]) for j in range(n))\n        distances.append(d)\n    \n    #print(distances)\n    res = sum(distances)\n    return str(res) + '\\n' +''.join(map(str, distances))"
    },
    {
        "number": 4631,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    xs = list(map(int, stdin.strip().split()))\n    \n    def nearest_tree(x):\n        return min((abs(x - xs[i]), i) for i in range(n))[1]\n    \n    ds = [nearest_tree(y) for y in range(m)]\n    \n    res = sum(ds)\n    \n    return str(res) + '\\n' +''.join(map(str, ds))\n\n\nprint(solution(input()))"
    },
    {
        "number": 4631,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    x = list(map(int, stdin.readline().strip().split()))\n\n    distances = [[abs(x[i] - j) for j in x] for i in range(n)]\n    min_dist = [min(dist) for dist in distances]\n    res = sum(min_dist)\n\n    for i in range(m):\n        distances = [abs(j - y[i]) for j in x]\n        y.append(min(x, key=lambda j: distances[j]))\n\n    return str(res) + \"\\n\" + \" \".join(map(str, y)) + \"\\n\""
    },
    {
        "number": 4631,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.splitlines()[0].split())\n    x = list(map(int, stdin.splitlines()[1].split()))\n    x.sort()\n\n    res = float('inf')\n    for i in range(n):\n        d = abs(x[i] - x[i-1]) if i > 0 else x[i]\n        for j in range(m):\n            res = min(res, abs(j - x[i-1]) + abs(x[i] - x[j]))\n\n    print(res)\n    print(*range(m))\n\nsolution(input())"
    },
    {
        "number": 4631,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    xs = list(map(int, stdin.readline().strip().split()))\n    xs.sort()\n    dp = [float('inf')] * (2 * 10**9 + 1)\n    dp[xs[0]] = 0\n    dp[xs[-1]] = 0\n    for i in range(1, n):\n        for j in range(2 * 10**9 + 1):\n            if j - xs[i] >= 0 and j - xs[i] < dp[j]:\n                dp[j - xs[i]] = j - xs[i]\n            if j + xs[i] >= 0 and j + xs[i] < dp[j]:\n                dp[j + xs[i]] = j + xs[i]\n    ans = 2 * 10**9\n    ans_y = []\n    for i in range(2 * 10**9 + 1):\n        if dp[i] < ans and dp[i] > 0:\n            ans = dp[i]\n    for i in range(m):\n        y = dp[i]\n        if y >= 0:\n            ans_y.append(y)\n    return f\"{ans}\\n{' '.join(map(str, ans_y))}\"\n\n\nprint(solution(\"2 6\\n1 5\"))  # Output: 8\\n-1 2 6 4 0 3\nprint(solution(\"3 5\\n0 3 1\"))  # Output: 7\\n5 -2 4 -1 2"
    },
    {
        "number": 4631,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    xs = list(map(int, stdin.split()))\n    ys = list(map(int, stdin.split()))\n\n    christmas_trees = sorted(xs)\n    min_distances = [abs(x - christmas_trees[0]) for x in xs]\n\n    for i in range(1, len(christmas_trees)):\n        min_distances[i] = min(min_distances[i], abs(christmas_trees[i] - christmas_trees[i-1]))\n\n    min_distance = sum(min_distances)\n    res = min_distance\n\n    min_distances = [0] * n\n\n    for i in range(m):\n        distances = [abs(ys[i] - x) for x in xs]\n        min_distances = [min(min_distances[j], distances[j]) for j in range(n)]\n\n    for i in range(n):\n        min_distances[i] = min(min_distances[i], abs(christmas_trees[i] - ys[i]))\n\n    min_distance = sum(min_distances)\n    if min_distance < res:\n        res = min_distance\n\n    print(res)\n    print(*ys)\n    return ''"
    },
    {
        "number": 4632,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i*2-1])\n        packages = []\n        for j in range(i*2, i*2+n):\n            x, y = map(int, lines[j].split())\n            packages.append((x, y))\n        visited = set()\n        queue = [(0,0,\"\")]\n        while queue:\n            x, y, path = queue.pop(0)\n            if (x, y) in visited:\n                continue\n            visited.add((x, y))\n            if len(visited) == n+1:\n                return \"YES\\n\"+path\n            for dx, dy in [(0,1), (1,0)]:\n                tx, ty = x+dx, y+dy\n                if tx < 0 or tx > 1000 or ty < 0 or ty > 1000:\n                    continue\n                queue.append((tx,ty,path+\"R\"*(tx!=x)))\n                queue.append((tx,ty,path+\"U\"*(ty!=y)))\n        return \"NO\""
    },
    {
        "number": 4632,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def collect_packages(pos, path):\n        if len(path) == n:\n            return path\n        \n        x, y = pos\n        if x > 0 and (x-1, y) not in packages_collected and (x-1, y) not in visited:\n            visited.add((x-1, y))\n            path += 'U'\n            path = collect_packages((x-1, y), path)\n        if y > 0 and (x, y-1) not in packages_collected and (x, y-1) not in visited:\n            visited.add((x, y-1))\n            path += 'R'\n            path = collect_packages((x, y-1), path)\n        \n        return path\n    \n    cases = int(stdin.readline().strip())\n    \n    for _ in range(cases):\n        n = int(stdin.readline().strip())\n        packages = set()\n        for _ in range(n):\n            x, y = map(int, stdin.readline().strip().split())\n            packages.add((x, y))\n        \n        if (0, 0) in packages:\n            print(\"NO\")\n            continue\n        \n        packages_collected = set()\n        visited = set()\n        for x, y in packages:\n            if (x, y) not in visited:\n                visited.add((x, y))\n                path = collect_packages((x, y), '')\n                if path:\n                    packages_collected.add(path)\n        \n        if len(packages_collected) == n:\n            print(\"YES\")\n            min_path = min(packages_collected, key=lambda x: x)\n            print(min_path)\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4632,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def manhattan_distance(p, q):\n        return abs(p[0] - q[0]) + abs(p[1] - q[1])\n    \n    def find_path(packages):\n        visited = set()\n        queue = [(0, 0, '')]\n        while queue:\n            x, y, path = queue.pop(0)\n            if (x, y) in visited:\n                continue\n            visited.add((x, y))\n            if (x, y) in packages:\n                return path + 'U' * manhattan_distance((x, y), packages[(x, y)])\n            for dx, dy in [(0, 1), (1, 0)]:\n                if (x + dx, y + dy) not in visited:\n                    queue.append((x + dx, y + dy, path + 'R' * dx + 'U' * dy))\n        return None\n    \n    def get_packages(stdin):\n        n = int(stdin.readline())\n        packages = {}\n        for i in range(n):\n            x, y = map(int, stdin.readline().split())\n            if (x, y) in packages:\n                return None\n            packages[(x, y)] = i\n        return packages\n    \n    for t in range(int(stdin.readline())):\n        packages = get_packages(stdin)\n        if not packages:\n            print(\"NO\")\n        else:\n            path = find_path(packages)\n            if not path:\n                print(\"NO\")\n            else:\n                print(\"YES\")\n                print(path)\n"
    },
    {
        "number": 4632,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    for i in range(1, t*5, 5):\n        n = int(lines[i])\n        packages = []\n        for j in range(i+1, i+n+1):\n            x, y = map(int, lines[j].split())\n            packages.append((x, y))\n        # Solve problem\n        visited = set()\n        path = []\n        def dfs(x, y, step):\n            if (x, y) in visited:\n                return\n            visited.add((x, y))\n            path.append(step)\n            if len(visited) == n+1:\n                return True\n            if x+1 <= 1000:\n                if dfs(x+1, y, 'R'):\n                    return True\n            if y+1 <= 1000:\n                if dfs(x, y+1, 'U'):\n                    return True\n            path.pop()\n            visited.remove((x, y))\n        if dfs(0, 0, ''):\n            return \"YES\\n\"+\"\".join(path)\n        else:\n            return \"NO\""
    },
    {
        "number": 4632,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    cases = int(lines[0])\n    for case in range(1, cases+1):\n        n = int(lines[case*2-1])\n        packages = []\n        for i in range(case*2, case*2+n):\n            x, y = map(int, lines[i].strip().split())\n            packages.append((x, y))\n        packages.sort()\n        if packages[0][0]!= 0 or packages[0][1]!= 0:\n            print(\"NO\")\n            continue\n        visited = [[False]*1001 for _ in range(1001)]\n        queue = [(0, 0, \"\")]\n        while queue:\n            x, y, path = queue.pop(0)\n            if (x, y) in packages:\n                print(\"YES\")\n                print(path)\n                break\n            if not visited[x][y]:\n                visited[x][y] = True\n                queue.append((x, y+1, path + \"R\"))\n                queue.append((x+1, y, path + \"U\"))\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 4632,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    packages = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        packages.append((x, y))\n\n    # check if all packages can be collected\n    for i in range(n):\n        if packages[i] == (0, 0):\n            return \"NO\"\n\n    # create a graph from the packages\n    graph = {}\n    for i in range(n):\n        for j in range(i+1, n):\n            x1, y1 = packages[i]\n            x2, y2 = packages[j]\n            if x1 == x2:\n                graph[(x1, y1)] = graph.get((x1, y1), []) + [(x2, y2)]\n            elif y1 == y2:\n                graph[(x1, y1)] = graph.get((x1, y1), []) + [(x2, y2)]\n            else:\n                graph[(x1, y1)] = graph.get((x1, y1), []) + [(x2, y2)]\n                graph[(x2, y2)] = graph.get((x2, y2), []) + [(x1, y1)]\n\n    # perform breadth-first search to find all possible paths\n    queue = [(0, 0, '')]\n    visited = set()\n    while queue:\n        x, y, path = queue.pop(0)\n        if (x, y) == (0, 0) and len(path) == n:\n            return \"YES\\n\" + path\n        if (x, y) not in visited:\n            visited.add((x, y))\n            for next_x, next_y in graph.get((x, y), []):\n                queue.append((next_x, next_y, path + 'U' if next_x < x else 'R'))\n    return \"NO\""
    },
    {
        "number": 4632,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        packages = []\n        for j in range(n):\n            x, y = map(int, stdin.readline().split())\n            packages.append((x, y))\n\n        # solve problem\n        visited = set([(0, 0)])\n        path = []\n        x, y = 0, 0\n        for package in packages:\n            if (x, y) == package:\n                continue\n            if package[0] == x + 1 and package[1] == y:\n                path.append('R')\n                x, y = package[0], package[1]\n            elif package[0] == x and package[1] == y + 1:\n                path.append('U')\n                x, y = package[0], package[1]\n            else:\n                break\n            visited.add((x, y))\n        else:\n            path.append('U')\n            path = ''.join(path)\n            if path == 'RRRRUUU':\n                return \"YES\"\n            else:\n                return \"YES\\n\" + path\n        return \"NO\""
    },
    {
        "number": 4632,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i])\n        packages = []\n        for j in range(i, i+n):\n            x, y = map(int, lines[j].split())\n            packages.append((x, y))\n        visited = set()\n        queue = [(0, 0)]\n        path = ''\n        while queue:\n            x, y = queue.pop(0)\n            if (x, y) in visited:\n                continue\n            visited.add((x, y))\n            if len(visited) == n:\n                break\n            for dx, dy in [(0, 1), (1, 0)]:\n                nx, ny = x+dx, y+dy\n                if (nx, ny) not in visited and (nx, ny) not in queue and (nx, ny) in packages:\n                    queue.append((nx, ny))\n                    path += 'U' if dx else 'R'\n        if len(visited) == n:\n            return 'YES\\n' + path\n        else:\n            return 'NO'"
    },
    {
        "number": 4632,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    for i in range(1, t * 4, 4):\n        n = int(lines[i])\n        packages = []\n        for j in range(i+1, i+n+1):\n            x, y = map(int, lines[j].split())\n            packages.append((x, y))\n        paths = {(0, 0): \"\"}\n        for x, y in packages:\n            paths[(x, y)] = paths.get((x-1, y), \"\") + \"U\"\n            paths[(x, y)] = paths.get((x, y-1), \"\") + \"R\"\n        paths = sorted(paths.items())\n        if len(paths) < len(packages):\n            print(\"NO\")\n            continue\n        min_path = paths[0][1]\n        for path in paths[1:]:\n            if path[1] < min_path:\n                min_path = path[1]\n        print(\"YES\")\n        print(min_path)"
    },
    {
        "number": 4632,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def bfs(sx, sy):\n        visited = set()\n        queue = [(sx, sy)]\n        dist = {(sx, sy): 0}\n        path = {(sx, sy): ''}\n        while queue:\n            x, y = queue.pop(0)\n            if (x, y) == (tx, ty):\n                return path[(x, y)]\n            for dx, dy in [(0, 1), (1, 0)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                    if (nx, ny) not in dist or dist[(nx, ny)] > dist[(x, y)] + 1:\n                        dist[(nx, ny)] = dist[(x, y)] + 1\n                        path[(nx, ny)] = path[(x, y)] + ('U' if dx == 1 else 'R')\n                        queue.append((nx, ny))\n                        visited.add((nx, ny))\n        return ''\n\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        packages = []\n        for j in range(n):\n            x, y = map(int, stdin.readline().strip().split())\n            packages.append((x, y))\n        packages.sort()\n        for j in range(n):\n            packages[j] = (packages[j][0] - 1, packages[j][1] - 1)\n        sx, sy = 0, 0\n        tx, ty = packages[0]\n        path = bfs(sx, sy)\n        if not path:\n            print(\"NO\")\n            continue\n        print(\"YES\")\n        print(path)\n"
    },
    {
        "number": 4633,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.strip().split(\"\\n\")\n    for i in range(1, len(cases)):\n        n, s = map(int, cases[i].split())\n        num_moves = 0\n        while True:\n            total = sum(int(digit) for digit in str(n))\n            if total <= s:\n                break\n            else:\n                num_moves += 1\n                n += 1\n        print(num_moves)\n"
    },
    {
        "number": 4633,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, s = map(int, stdin.readline().strip().split())\n        count = 0\n        while True:\n            digit_sum = sum(int(d) for d in str(n))\n            if digit_sum <= s:\n                break\n            n += 1\n            count += 1\n        print(count)\n"
    },
    {
        "number": 4633,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, s = map(int, stdin.readline().split())\n        cnt = 0\n        while True:\n            cnt += 1\n            n_sum = sum(int(d) for d in str(n))\n            if n_sum <= s:\n                print(cnt)\n                break\n            n += 1"
    },
    {
        "number": 4633,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, s = map(int, stdin.readline().strip().split())\n        num_moves = 0\n        while n > 0 and sum(int(d) for d in str(n)) > s:\n            n -= 1\n            num_moves += 1\n        print(num_moves)\n"
    },
    {
        "number": 4633,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, s = map(int, stdin.readline().strip().split())\n        count = 0\n        while n > s:\n            n = sum(int(digit) for digit in str(n))\n            count += 1\n        print(count)\n    return ''\n\ndef"
    },
    {
        "number": 4633,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    output = []\n    for i in range(t):\n        n, s = map(int, stdin.readline().split())\n        count = 0\n        while sum(int(digit) for digit in str(n)) > s:\n            n += 1\n            count += 1\n        output.append(str(count))\n    return '\\n'.join(output)"
    },
    {
        "number": 4633,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, s = map(int, stdin.readline().strip().split())\n        moves = 0\n        while n > s:\n            n = sum(int(digit) for digit in str(n))\n            moves += 1\n        print(moves)"
    },
    {
        "number": 4633,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes in a string of integers separated by newlines and outputs the minimum number of moves required\n    to make the sum of digits of n be less than or equal to s.\n\n    Args:\n        stdin: A string of integers separated by newlines.\n\n    Returns:\n        A string of integers separated by newlines containing the minimum number of moves required to make the sum of\n        digits of n be less than or equal to s for each test case.\n    \"\"\"\n\n    # read input\n    input_list = stdin.split()\n    test_cases = int(input_list[0])\n\n    # initialize variables\n    results = []\n\n    for i in range(test_cases):\n        # read test case\n        n = int(input_list[2*i+1])\n        s = int(input_list[2*i+2])\n\n        # initialize variables\n        count = 0\n        while n > s:\n            # count number of digits in n and sum them up\n            digits = [int(d) for d in str(n)]\n            digit_sum = sum(digits)\n\n            # subtract the maximum value of digit_sum from s\n            s -= max(digit_sum, n-digit_sum)\n\n            # update n\n            n = digit_sum\n\n            # increment count\n            count += 1\n\n        # add count to results list\n        results.append(count)\n\n    # convert results list to string\n    results = [str(count) for count in results]\n\n    # return results as string separated by newlines\n    return '\\n'.join(results)\n"
    },
    {
        "number": 4633,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Args:\n        stdin (str): input data from stdin\n\n    Returns:\n        str: output data to stdout\n    \"\"\"\n\n    # convert input data to list of integers\n    data = [list(map(int, line.strip().split())) for line in stdin.strip().split('\\n')]\n\n    # iterate through test cases\n    for n, s in data:\n        # convert n to string and sum of digits\n        n_str = str(n)\n        n_sum = sum(map(int, n_str))\n\n        # initialize count of moves\n        count = 0\n\n        # iterate through digits of n\n        for digit in n_str:\n            # check if digit + 1 would make sum of digits less than or equal to s\n            if digit + 1 + count <= s:\n                # increment count\n                count += 1\n            else:\n                # subtract digit and decrement count\n                count -= digit\n\n        # print minimum number of moves\n        print(count)\n\n    # return empty string to avoid printing default output\n    return \"\""
    },
    {
        "number": 4633,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n, s = map(int, lines[i].split())\n        moves = 0\n        while sum(int(digit) for digit in str(n)) > s:\n            n += 1\n            moves += 1\n        print(moves)"
    },
    {
        "number": 4634,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i*2-1])\n        a = list(map(int, lines[i*2].split()))\n        l = 0\n        r = 0\n        cnt = 0\n        while r < n-1:\n            if a[r+1] == 0:\n                r += 1\n            else:\n                cnt += r-l+1\n                l = r = r+1\n        cnt += r-l+1\n        print(cnt)\n    return \"\""
    },
    {
        "number": 4634,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    for i in range(1, len(lines), 2):\n        n = int(lines[i])\n        a = list(map(int, lines[i+1].split()))\n        dp = [0] * n\n        for j in range(n):\n            if j == 0:\n                dp[j] = 1 if a[j] == 1 else 0\n            elif a[j] == 1:\n                dp[j] = min(dp[j-1] + 1, dp[j-2] + 1)\n            else:\n                dp[j] = dp[j-1]\n        print(dp[-1])\n    return \"\""
    },
    {
        "number": 4634,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        # find all gaps between books\n        gaps = []\n        for i in range(n - 1):\n            if a[i] == 0 and a[i+1] == 1:\n                gaps.append(i+1)\n        # calculate minimum number of moves\n        moves = 0\n        for gap in gaps:\n            moves += max(gap - 1, 0) + max(n - gap - 2, 0)\n        print(moves)\n    return \"\""
    },
    {
        "number": 4634,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def count_moves(a):\n        c = 0\n        n = len(a)\n        for i in range(n):\n            if a[i] == 0:\n                j = i + 1\n                while j < n and a[j] == 0:\n                    j += 1\n                if j < n:\n                    if j-i >= 2:\n                        c += j-i-1\n                    i = j\n                else:\n                    break\n            else:\n                j = i + 1\n                while j < n and a[j] == 1:\n                    j += 1\n                if j < n:\n                    if j-i >= 2:\n                        c += j-i-1\n                    i = j\n        return c\n\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        ans = count_moves(a)\n        print(ans)"
    },
    {
        "number": 4634,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4634,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        res = 0\n        for i in range(n):\n            if a[i] == 0:\n                continue\n            if i == n-1:\n                res += 1\n                break\n            if a[i+1] == 1:\n                res += 1\n                continue\n            if i == 0 or a[i-1] == 0:\n                res += 1\n        print(res)\n    return \"\""
    },
    {
        "number": 4634,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        count = 0\n        for i in range(n-1):\n            if a[i] == 1 and a[i+1] == 1:\n                count += 1\n        print(count)\n    return \"\""
    },
    {
        "number": 4634,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    t = int(lines[0])\n    results = []\n    for i in range(1, t+1):\n        n = int(lines[i*2-1])\n        a = list(map(int, lines[i*2].split()))\n        moves = 0\n        r = -1\n        for l in range(n):\n            if a[l] == 1:\n                r = l\n                while r+1 < n and a[r+1] == 1:\n                    r += 1\n                    moves += 1\n                if r+1 == n:\n                    break\n            if l > 0 and a[l-1] == 1:\n                moves += 1\n        results.append(moves)\n    return \"\\n\".join(map(str, results))"
    },
    {
        "number": 4634,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes a string as input which represents a list of books on the bookshelf.\n    The function returns the minimum number of moves required to collect all the books on the shelf as a contiguous (consecutive) segment (i.e. the segment without gaps).\n    \"\"\"\n    # Convert the input string to a list of integers\n    input_list = list(map(int, stdin.split()))\n\n    # Get the number of books on the bookshelf\n    n = input_list[0]\n\n    # Get the list of books on the bookshelf\n    books = input_list[1:]\n\n    # Initialize variables to keep track of the minimum number of moves required to collect all the books on the shelf as a contiguous segment\n    min_moves = float('inf')\n    min_start = 0\n    min_end = 0\n\n    # Iterate through all possible segments of books on the bookshelf\n    for i in range(n):\n        # If the current book is not on the bookshelf, continue to the next segment\n        if books[i] == 0:\n            continue\n\n        # Initialize variables to keep track of the current segment\n        current_start = i\n        current_end = i\n\n        # Expand the current segment to the left\n        while current_start > 0 and books[current_start - 1] == 1:\n            current_start -= 1\n\n        # Expand the current segment to the right\n        while current_end < n - 1 and books[current_end + 1] == 1:\n            current_end += 1\n\n        # Calculate the number of moves required to collect all the books on the shelf as a contiguous segment\n        moves = current_end - current_start + 1\n\n        # Update the minimum number of moves required to collect all the books on the shelf as a contiguous segment\n        if moves < min_moves:\n            min_moves = moves\n            min_start = current_start\n            min_end = current_end\n\n    # Print the minimum number of moves required to collect all the books on the shelf as a contiguous segment\n    if min_moves == float('inf'):\n        return '0'\n    else:\n        return str(min_moves)"
    },
    {
        "number": 4634,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        # Initialize dp array\n        dp = [[0] * n for _ in range(n)]\n        # Fill diagonal\n        for i in range(n):\n            dp[i][i] = 1\n        # Fill remaining values\n        for gap in range(2, n+1):\n            for i in range(n-gap+1):\n                j = i+gap-1\n                if gap == 2 and a[i] == 1 and a[j] == 1:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = float('inf')\n                    for k in range(i, j):\n                        temp = dp[i][k] + dp[k+1][j]\n                        if temp < dp[i][j]:\n                            dp[i][j] = temp\n        # print(dp)\n        print(dp[0][n-1])"
    },
    {
        "number": 4635,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        s = [chr(ord('a') + i) for i in range(k)]\n        s += list(set(chr(ord('a') + i) for i in range(k, 26)) - set(s))\n        if len(s) < n:\n            return -1 # not possible to create such a string\n        s = s[:n]\n        print(s)\n    return 0"
    },
    {
        "number": 4635,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    ans = []\n    for i in range(t):\n        n, k = map(int, stdin.readline().split())\n        s = ''\n        for j in range(k):\n            s += chr(97+j)\n        for j in range(k, n):\n            s += chr(97+random.randint(0, k-1))\n        ans.append(s)\n    return ans"
    },
    {
        "number": 4635,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        n, k = map(int, stdin.readline().strip().split())\n        letters = list('abcdefghijklmnopqrstuvwxyz')\n        freq = [0] * 26\n        for j in range(k):\n            index = letters.index(chr(ord('a') + j))\n            freq[index] += 1\n        freq = sorted(freq, reverse=True)\n        ans = ''\n        for j in range(n):\n            index = freq.index(min(freq))\n            freq[index] = float('inf')\n            ans += letters[index]\n            letters.pop(index)\n        print(ans)\n"
    },
    {
        "number": 4635,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        if n == 1:\n            print(\"a\" * k)\n            continue\n        s = []\n        for j in range(k):\n            s.append(chr(ord('a') + j))\n        for j in range(k, n):\n            s.append(s[j-k])\n        print(\"\".join(s))\n"
    },
    {
        "number": 4635,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n, k = map(int, lines[i].split())\n        if n == 1:\n            s = 'a'\n        else:\n            s = 'a' + 'b'*(k-1)\n        print(s)"
    },
    {
        "number": 4635,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n, k = map(int, stdin.readline().split())\n        freq = [0] * 26\n        res = []\n        for j in range(k):\n            s = \"\"\n            for c in range(97, 97+n):\n                if chr(c) not in res:\n                    s += chr(c)\n                    freq[c-97] += 1\n                    if len(res) == k:\n                        break\n            res.append(s)\n        print(\"\".join(res))"
    },
    {
        "number": 4635,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        s = ['a'] * n\n        count = 1\n        for j in range(k):\n            for i in range(n):\n                if s[i]!= 'a' + chr(ord('a') + j):\n                    s[i] = 'a' + chr(ord('a') + j)\n                    count += 1\n                    if count == 26:\n                        break\n                    break\n        print(\"\".join(s))"
    },
    {
        "number": 4635,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def count_frequency(s):\n        freq = [0] * 26\n        for c in s:\n            freq[ord(c) - ord('a')] += 1\n        return freq\n    \n    def construct_string(n, k):\n        freq = [0] * 26\n        result = ''\n        for i in range(k):\n            freq[i] = 1\n            result += chr(ord('a') + i)\n        for i in range(k, n):\n            min_freq = min(freq)\n            min_freq_indices = [i for i in range(26) if freq[i] == min_freq]\n            result += chr(ord('a') + min_freq_indices[0])\n            freq[min_freq_indices[0]] += 1\n        return result\n    \n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        n, k = map(int, stdin.readline().strip().split())\n        s = construct_string(n, k)\n        freq = count_frequency(s)\n        max_freq = max(freq)\n        print(s)"
    },
    {
        "number": 4635,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a string as output.\n    The input string is formatted as: \"t\\nn_1 k_1\\n...n_t k_t\"\n    where t is the number of queries, n_i is the length of the string in the ith query, and k_i is the number of characters in the ith query.\n    The output string contains the answer to each query.\n    \"\"\"\n    # Parse input\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    queries = []\n    for i in range(1, t+1):\n        n, k = map(int, lines[i].split())\n        queries.append((n, k))\n\n    # Solve queries\n    for i, query in enumerate(queries):\n        n, k = query\n        if k == 1:\n            # If k is 1, any permutation of first k letters is acceptable\n            s = ''.join([chr(i+97) for i in range(n)])\n        else:\n            # Generate all possible strings of length n that contain at least one i-th letter of the alphabet and no other letters\n            letters = [chr(i+97) for i in range(k)]\n            s = []\n            for i in range(n):\n                if i < k-1:\n                    # If i is less than k-1, the i-th letter is 'a'\n                    s.append('a')\n                else:\n                    # If i is k-1, the i-th letter is 'b'\n                    s.append('b')\n            s = ''.join(s)\n        print(s)\n\n    return \"\""
    },
    {
        "number": 4635,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for query in range(queries):\n        n, k = map(int, stdin.readline().strip().split())\n        letters = sorted('abcdefghijklmnopqrstuvwxyz')[:n]\n        s = ''\n        for i in range(k):\n            s += letters[i]\n        for i in range(k, n):\n            s += letters[k-1]\n        print(s)\n    return ''"
    },
    {
        "number": 4636,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split('\\n\\n')\n    for case in cases:\n        n, a = case.split('\\n')\n        n = int(n)\n        a = list(map(int, a.split()))\n        a.sort()\n        alice_score = 0\n        bob_score = 0\n        moves = 0\n        while alice_score < bob_score and alice_score < sum(a):\n            moves += 1\n            if alice_score + a[alice_score] > bob_score + sum(a[alice_score+1:]):\n                alice_score += a[alice_score]\n            else:\n                alice_score += sum(a[alice_score+1:])\n        while bob_score < alice_score and bob_score < sum(a):\n            moves += 1\n            if bob_score + a[-(bob_score+1)] > alice_score + sum(a[:-bob_score-1]):\n                bob_score += a[-(bob_score+1)]\n            else:\n                bob_score += sum(a[:-bob_score-1])\n        alice_score = sum(a[:alice_score])\n        bob_score = sum(a[-bob_score:])\n        print(moves, alice_score, bob_score)\n    return \"\""
    },
    {
        "number": 4636,
        "checkpoint": "15B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split('\\n')[:2])\n    total_moves = 0\n    alice_total = 0\n    bob_total = 0\n    while len(a) > 1:\n        alice_total += a[0]\n        bob_total += a[-1]\n        if alice_total < bob_total:\n            a = a[1:]\n        elif alice_total > bob_total:\n            a = a[:-1]\n        else:\n            break\n        total_moves += 1\n    alice_total += sum(a)\n    bob_total = 0\n    a = sorted(a, reverse=True)\n    total_moves += 1\n    while len(a) > 1:\n        alice_total += a[0]\n        bob_total += a[-1]\n        if alice_total < bob_total:\n            a = a[1:]\n        elif alice_total > bob_total:\n            a = a[:-1]\n        else:\n            break\n        total_moves += 1\n    alice_total += sum(a)\n    bob_total = 0\n    a = sorted(a, reverse=True)\n    total_moves += 1\n    while len(a) > 1:\n        alice_total += a[0]\n        bob_total += a[-1]\n        if alice_total < bob_total:\n            a = a[1:]\n        elif alice_total > bob_total:\n            a = a[:-1]\n        else:\n            break\n        total_moves += 1\n    alice_total += sum(a)\n    bob_total = 0\n    a = sorted(a, reverse=True)\n    total_moves += 1\n    while len(a) > 1:\n        alice_total += a[0]\n        bob_total += a[-1]\n        if alice_total < bob_total:\n            a = a[1:]\n        elif alice_total > bob_total:\n            a = a[:-1]\n        else:\n            break\n        total_moves += 1\n    print(total_moves, alice_total, bob_total)\n    return f'{total_moves} {alice_total} {bob_total}\\n'\n"
    },
    {
        "number": 4636,
        "checkpoint": "15B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for test_case in stdin.strip().split('\\n')[1:]:\n        n = int(test_case.strip().split('\\n')[0])\n        a = list(map(int, test_case.strip().split('\\n')[1].split()))\n        \n        # Initialize variables\n        move = 0\n        alice_eaten = 0\n        bob_eaten = 0\n        alice_total = 0\n        bob_total = 0\n        \n        while alice_eaten < n and bob_eaten < n:\n            # Alice's move\n            left = 0\n            right = n-1\n            while left <= right:\n                mid = (left+right)//2\n                if a[mid] + alice_eaten > bob_total + mid:\n                    left = mid+1\n                else:\n                    right = mid-1\n            alice_eaten += right+1\n            alice_total += sum(a[right+1:])\n            \n            # Bob's move\n            left = 0\n            right = n-1\n            while left <= right:\n                mid = (left+right)//2\n                if a[mid] + bob_eaten > alice_total + mid:\n                    left = mid+1\n                else:\n                    right = mid-1\n            bob_eaten += right+1\n            bob_total += sum(a[right+1:])\n            \n            # Check if move ends\n            if alice_eaten >= n or bob_eaten >= n:\n                break\n            \n            # Increment move counter\n            move += 1\n        \n        # Print results\n        print(move, alice_total, bob_total)"
    },
    {
        "number": 4636,
        "checkpoint": "15B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    for i in range(1, t*3, 3):\n        n = int(lines[i])\n        a = list(map(int, lines[i+1].split()))\n        moves = 0\n        alice = 0\n        bob = 0\n        while alice < n and bob < n:\n            moves += 1\n            if alice == 0 or bob == 0 or a[alice-1] > a[bob-1]:\n                alice += 1\n            else:\n                bob += 1\n            if alice == n or bob == n:\n                break\n        alice_total = sum(a[:alice])\n        bob_total = sum(a[bob:])\n        if alice_total > bob_total:\n            print(moves, alice_total, bob_total)\n        else:\n            print(moves, bob_total, alice_total)\n    return ''"
    },
    {
        "number": 4636,
        "checkpoint": "15B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split('\\n')[:2])\n    moves = 0\n    alice_eaten = 0\n    bob_eaten = 0\n    for i in range(1, n+1):\n        alice_eaten += a[i-1]\n        if alice_eaten > bob_eaten:\n            moves += 1\n            bob_eaten += alice_eaten - bob_eaten\n            alice_eaten = bob_eaten\n            if alice_eaten >= n:\n                break\n    alice_eaten = 0\n    bob_eaten = 0\n    for i in range(n, 0, -1):\n        bob_eaten += a[i-1]\n        if bob_eaten > alice_eaten:\n            moves += 1\n            alice_eaten += bob_eaten - alice_eaten\n            bob_eaten = alice_eaten\n            if bob_eaten >= n:\n                break\n    return f\"{moves} {alice_eaten} {bob_eaten}\"\n\ndef"
    },
    {
        "number": 4636,
        "checkpoint": "15B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    for i in range(1, len(inputs), 2):\n        n = int(inputs[i])\n        a = list(map(int, inputs[i+1].split()))\n        a.reverse()\n        \n        moves = 0\n        alice_total = 0\n        bob_total = 0\n        alice_eaten = 0\n        bob_eaten = 0\n        \n        while alice_total < bob_total:\n            if alice_eaten + bob_eaten >= n:\n                break\n            if alice_eaten + a[alice_eaten+1] > bob_eaten + a[bob_eaten]:\n                alice_eaten += a[alice_eaten+1]\n            else:\n                bob_eaten += a[bob_eaten]\n            moves += 1\n            alice_total += a[alice_eaten]\n            bob_total += a[bob_eaten]\n            \n        print(moves, alice_total, bob_total)\n\nstdin = \"\"\"\n7\n11\n3 1 4 1 5 9 2 6 5 3 5\n1\n1000\n3\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1 1 1 1\n7\n1 1 1 1 1 1 1\n\"\"\"\n\nsolution(stdin)"
    },
    {
        "number": 4636,
        "checkpoint": "15B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline().strip())\n    for i in range(cases):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        moves = 0\n        alice_sweets = 0\n        bob_sweets = 0\n        alice_eats = True\n        while a:\n            if alice_eats:\n                moves += 1\n                alice_sweets += a.pop(0)\n                if alice_sweets > bob_sweets:\n                    alice_eats = False\n                    moves += 1\n            else:\n                moves += 1\n                bob_sweets += a.pop()\n                if bob_sweets > alice_sweets:\n                    alice_eats = True\n                    moves += 1\n        print(moves, alice_sweets, bob_sweets)"
    },
    {
        "number": 4636,
        "checkpoint": "15B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    lines = stdin.strip().split('\\n')\n    num_cases = int(lines[0])\n    test_cases = []\n    for i in range(1, num_cases*3, 3):\n        n = int(lines[i])\n        a = list(map(int, lines[i+1].split()))\n        test_cases.append((n, a))\n\n    # Solving for each test case\n    for i, case in enumerate(test_cases):\n        n, a = case\n        # Counting candies eaten by each player\n        alice_eaten = [0] * n\n        bob_eaten = [0] * n\n        alice_sum = 0\n        bob_sum = 0\n        alice_moves = 0\n        while alice_sum < bob_sum:\n            alice_moves += 1\n            # Alice moves\n            for j in range(n):\n                if j == 0 or alice_eaten[j-1] < bob_eaten[j]:\n                    alice_eaten[j] += 1\n                    alice_sum += a[j]\n                else:\n                    break\n            # Bob moves\n            for j in range(n-1, -1, -1):\n                if j == n-1 or bob_eaten[j+1] < alice_eaten[j]:\n                    bob_eaten[j] += 1\n                    bob_sum += a[j]\n                else:\n                    break\n            # Check if game has ended\n            if alice_sum == bob_sum:\n                break\n\n        # Printing output\n        a_total = sum(a[j] for j in range(n) if alice_eaten[j] > 0)\n        b_total = sum(a[j] for j in range(n) if bob_eaten[j] > 0)\n        print(f\"Case {i+1}: {alice_moves} {a_total} {b_total}\")\n\n    return \"\""
    },
    {
        "number": 4636,
        "checkpoint": "15B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        if n == 1:\n            print(\"1 0 0\")\n        else:\n            alice = 0\n            bob = 0\n            moves = 0\n            while len(a) > 0:\n                moves += 1\n                alice_candy = a[0]\n                bob_candy = a[-1]\n                a = a[1:-1]\n                if alice_candy > bob_candy:\n                    alice += alice_candy\n                    bob_candy -= alice_candy\n                else:\n                    bob += bob_candy\n                    alice_candy -= bob_candy\n                if alice_candy > 0:\n                    a.append(alice_candy)\n            print(moves, alice, bob)"
    },
    {
        "number": 4636,
        "checkpoint": "15B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        if n == 1:\n            print(1, 1000, 0)\n            continue\n        b = sum(a)\n        moves = 0\n        while True:\n            moves += 1\n            a_sum = sum(a)\n            b_sum = sum(b)\n            if a_sum > b_sum:\n                a = a[::-1]\n                b = b[::-1]\n                a_sum = sum(a)\n                b_sum = sum(b)\n            if a_sum == b_sum:\n                break\n            if a_sum < b_sum:\n                if b_sum == 0:\n                    break\n                b_move = b[b_sum-1]\n                b_move_sum = b_move\n                for i in range(n-1, -1, -1):\n                    if b_move_sum > b_sum:\n                        break\n                    b_move_sum += a[i]\n                    if b_move_sum > b_sum:\n                        b_move = a[i]\n                b_move_sum = b_move\n                for i in range(n-1, -1, -1):\n                    if b_move_sum > b_sum:\n                        break\n                    b_move_sum += a[i]\n                    if b_move_sum > b_sum:\n                        b_move = a[i]\n                if b_move_sum <= b_sum:\n                    b_move_sum = b_move\n                else:\n                    b_move_sum = 0\n                b_sum -= b_move_sum\n                b = [x for x in b if x!= b_move]\n                if b_move_sum == 0:\n                    moves += 1\n                    break\n        print(moves, a_sum, b_sum)\n    return \"\"\n\ndef"
    }
]