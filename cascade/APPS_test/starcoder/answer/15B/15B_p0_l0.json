[
    {
        "number": 4000,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin]\n    graph = [[] for _ in range(n + 1)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n    dp = [[[0] * (n + 1) for _ in range(n + 1)] for _ in range(n + 1)]\n    for k in range(1, n + 1):\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i == j:\n                    dp[i][j][k] = 1\n                elif k == 1:\n                    dp[i][j][k] = 1 if j in graph[i] else 0\n                else:\n                    dp[i][j][k] = dp[i][j][k - 1] + dp[i][k][k - 1] + dp[k][j][k - 1] - dp[i][k][k - 2] - dp[k][j][k - 2] + dp[i][k][j] + dp[k][j][i] - dp[i][k][i] - dp[k][j][k]\n    res = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                if dp[i][j][k] > res:\n                    res = dp[i][j][k]\n                    a, b, c = i, j, k\n    return f\"{res}\\n{a} {b} {c}\""
    },
    {
        "number": 4001,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    divisors = list(map(int, stdin.split()[1:]))\n    divisors.sort()\n    x = divisors[0]\n    y = divisors[-1]\n    return f\"{x} {y}\""
    },
    {
        "number": 4002,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n    dp = [[0] * (1 << m) for _ in range(n)]\n    for i in range(n):\n        for j in range(1 << m):\n            dp[i][j] = sum(a[i][j] for j in range(m) if j & (1 << i))\n    for i in range(n):\n        for j in range(1 << m):\n            if dp[i][j] % k == 0:\n                continue\n            for k in range(1 << m):\n                if (j & k) == 0 and dp[i][j] + dp[i][k] % k == 0:\n                    dp[i][j] = dp[i][k]\n    ans = 0\n    for i in range(n):\n        ans = max(ans, dp[i][(1 << m) - 1])\n    return str(ans)"
    },
    {
        "number": 4003,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1):\n        if a[i] < a[i+1]:\n            dp[i][i+1] = 2\n    for k in range(2, n):\n        for i in range(n-k):\n            j = i + k\n            if a[i] < a[j] and dp[i+1][j-1] > 0:\n                dp[i][j] = dp[i+1][j-1] + 1\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if dp[i][j] > ans:\n                ans = dp[i][j]\n    res = ['R'] * ans\n    for i in range(n):\n        for j in range(i+1, n):\n            if dp[i][j] == ans:\n                if a[i] < a[j]:\n                    res[-1] = 'L'\n                else:\n                    res[-1] = 'R'\n                break\n    return str(ans) + '\\n' + ''.join(res)"
    },
    {
        "number": 4004,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if n == 1:\n        return \"0\" if a[0] == 0 else \"-1\"\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        for j in range(i+1, n):\n            if a[j] == 0:\n                continue\n            if a[i] == a[j]:\n                continue\n            if a[i] > a[j]:\n                a[i] -= a[j]\n            else:\n                a[j] -= a[i]\n    for i in range(n):\n        if a[i]!= 0:\n            return \"-1\"\n    return \"0\""
    },
    {
        "number": 4005,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.readline().split())\n    x3, y3, x4, y4 = map(int, stdin.readline().split())\n    x5, y5, x6, y6 = map(int, stdin.readline().split())\n\n    # check if any part of the white sheet can be seen\n    if x1 <= x3 <= x2 or x1 <= x4 <= x2 or x1 <= x5 <= x2 or x1 <= x6 <= x2:\n        return \"YES\"\n    if y1 <= y3 <= y2 or y1 <= y4 <= y2 or y1 <= y5 <= y2 or y1 <= y6 <= y2:\n        return \"YES\"\n    if x3 <= x1 <= x4 or x3 <= x5 <= x4 or x3 <= x6 <= x4 or x3 <= x2 <= x4:\n        return \"YES\"\n    if y3 <= y1 <= y4 or y3 <= y5 <= y4 or y3 <= y6 <= y4 or y3 <= y2 <= y4:\n        return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 4006,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    visited = set()\n    queue = [n]\n    while queue:\n        curr = queue.pop(0)\n        if curr == 0:\n            continue\n        if curr in visited:\n            continue\n        visited.add(curr)\n        count += 1\n        if curr % 10 == 0:\n            queue.append(curr // 10)\n        else:\n            queue.append(curr + 1)\n    return count"
    },
    {
        "number": 4007,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    f = list(map(int, stdin.split()[1:]))\n    gifts = [0] * n\n    for i in range(n):\n        if f[i] == 0:\n            gifts[i] = i + 1\n        else:\n            gifts[i] = f[f[i]-1]\n    return''.join(map(str, gifts))"
    },
    {
        "number": 4008,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # check if it is possible to color the array in k colors\n    if len(set(a)) < k:\n        return \"NO\"\n\n    # create a dictionary to store the color of each element\n    color = {}\n    for i in range(k):\n        color[i+1] = []\n\n    # assign each element to a color\n    for i in range(n):\n        for j in range(k):\n            if len(color[j+1]) == 0 or a[i] not in color[j+1]:\n                color[j+1].append(a[i])\n                break\n\n    # check if each color has at least one element\n    for i in range(k):\n        if len(color[i+1]) == 0:\n            return \"NO\"\n\n    # check if each color has distinct elements\n    for i in range(k):\n        if len(set(color[i+1]))!= len(color[i+1]):\n            return \"NO\"\n\n    # print the coloring\n    for i in range(n):\n        print(color[a[i]], end=\" \")\n    return \"YES\""
    },
    {
        "number": 4009,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = stdin.strip()\n    count = 0\n    for i in range(n):\n        if num[i] == '1' and i >= x:\n            count += 1\n    return count"
    },
    {
        "number": 4010,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        for j in range(n):\n            for k in range(j+2, n+1):\n                if a[j:k] == a[j:k][::-1]:\n                    return \"YES\"\n        return \"NO\""
    },
    {
        "number": 4011,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = list(map(int, stdin.readline().strip().split()))\n    max_num = a\n    for i in range(n):\n        for j in range(i+1, n+1):\n            segment = a[i:j]\n            new_segment = ''.join(str(f[int(digit)-1]) for digit in segment)\n            new_num = a[:i] + new_segment + a[j:]\n            max_num = max(max_num, new_num)\n    return max_num"
    },
    {
        "number": 4012,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, c = map(int, stdin.readline().strip().split())\n        if a > b:\n            a, b = b, a\n        if b % a == 0 and c % b == 0:\n            print(0)\n            print(a, b, c)\n        else:\n            res = 0\n            if b % a!= 0:\n                res += b // a\n            if c % b!= 0:\n                res += c // b\n            print(res)\n            if res == 0:\n                print(a, b, c)\n            else:\n                if b % a!= 0:\n                    print(a, b, c)\n                else:\n                    print(b, a, c)\n    return \"\""
    },
    {
        "number": 4013,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    return max(a[n-2] - a[0], a[n-1] - a[1])"
    },
    {
        "number": 4014,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    exams = []\n    for i in range(m):\n        s, d, c = map(int, stdin.split())\n        exams.append((s, d, c))\n    exams.sort(key=lambda x: x[1])\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if exams[i-1][1] <= j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + exams[i-1][2])\n            if exams[i-1][0] <= j:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + exams[i-1][2])\n            if dp[i][j] > 0:\n                dp[i][j] += 1\n    if dp[m][n] < m:\n        return '-1'\n    ans = [0] * n\n    for i in range(m, 0, -1):\n        if dp[i][n] > 0:\n            ans[exams[i-1][1]-1] = i\n            n -= exams[i-1][2]\n            if n == 0:\n                break\n    return''.join(map(str, ans))"
    },
    {
        "number": 4015,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"0\"\n    if n > m:\n        return \"-1\"\n    moves = 0\n    while n < m:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        moves += 1\n    return str(moves)"
    },
    {
        "number": 4016,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip().split()[1]\n    s = t * (k // len(t)) + t[:k % len(t)]\n    return s"
    },
    {
        "number": 4017,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    k = 0\n    nice_indices = []\n    for i in range(n):\n        s = sum(a[:i] + a[i+1:])\n        if a[i] == s:\n            k += 1\n            nice_indices.append(i+1)\n    if k == 0:\n        return \"0\"\n    else:\n        return f\"{k}\\n{nice_indices[0]} {' '.join(map(str, nice_indices[1:]))}\""
    },
    {
        "number": 4018,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    if k > 26**n:\n        return -1\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            if s[i-1] not in dp[i-1]:\n                dp[i][j] = dp[i-1][j] + (n-i+1)\n            else:\n                dp[i][j] = min(dp[i][j], dp[i-1][j-1] + (n-i+1))\n    return dp[n][k]"
    },
    {
        "number": 4019,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        v, u = map(int, stdin.split())\n        edges.append((v, u))\n    edges.sort()\n    for i in range(m):\n        for j in range(i+1, m):\n            if edges[i][0] == edges[j][0] and edges[i][1] == edges[j][1]:\n                return \"NO\"\n            if edges[i][0] == edges[j][1] and edges[i][1] == edges[j][0]:\n                return \"NO\"\n    for i in range(m):\n        if edges[i][0] == 1:\n            if D == 1:\n                return \"YES\\n\" + \" \".join(map(str, edges[i:]))\n            D -= 1\n    return \"NO\""
    },
    {
        "number": 4020,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split()[0].split(':'))\n    h2, m2 = map(int, stdin.split()[1].split(':'))\n    if m1 % 2!= m2 % 2:\n        return 'Invalid input'\n    if h1 == h2:\n        m3 = (m1 + m2) // 2\n        return f'{h1:02d}:{m3:02d}'\n    else:\n        h3 = (h1 + h2) // 2\n        m3 = (m1 + m2) // 2\n        return f'{h3:02d}:{m3:02d}'"
    },
    {
        "number": 4021,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return \"1\"\n    elif a == 2:\n        return \"2\"\n    elif a == 3:\n        return \"2\"\n    elif a == 4:\n        return \"3\"\n    elif a == 5:\n        return \"3\"\n    elif a == 6:\n        return \"4\"\n    elif a == 7:\n        return \"4\"\n    elif a == 8:\n        return \"4\"\n    elif a == 9:\n        return \"5\"\n    elif a == 10:\n        return \"5\"\n    elif a == 11:\n        return \"5\"\n    elif a == 12:\n        return \"5\"\n    elif a == 13:\n        return \"6\"\n    elif a == 14:\n        return \"6\"\n    elif a == 15:\n        return \"6\"\n    elif a == 16:\n        return \"6\"\n    elif a == 17:\n        return \"6\"\n    elif a == 18:\n        return \"7\"\n    elif a == 19:\n        return \"7\"\n    elif a == 20:\n        return \"7\"\n    elif a == 21:\n        return \"7\"\n    elif a == 22:\n        return \"7\"\n    elif a == 23:\n        return \"7\"\n    elif a == 24:\n        return \"7\"\n    elif a == 25:\n        return \"8\"\n    elif a == 26:\n        return \"8\"\n    elif a == 27:\n        return \"8\"\n    elif a == 28:\n        return \"8\"\n    elif a == 29:\n        return \"8\"\n    elif a == 30:\n        return \"8\"\n    elif a == 31:\n        return \"8\"\n    elif a == 32:\n        return \"8\"\n    elif a == 33:\n        return \"9\"\n    elif a == 34:\n        return \"9\"\n    elif a == 35:\n        return \"9\"\n    elif a == 36:\n        return \"9\"\n    elif a == 37:\n        return \"9\"\n    elif a == 38:\n        return \"9\"\n    elif a == 39:\n        return \"9\"\n    elif a == 40:\n        return \"9\"\n    elif a == 41:\n        return \"9\"\n    elif a == 42:\n        return \"10\"\n    elif a == 43:\n        return \"10\"\n    elif a == 44:\n        return \"10\"\n    elif a == 45:\n        return \"10\"\n    elif a == 46:\n        return \"10\"\n    elif a == 47:\n        return \"10\"\n    elif a == 48:\n        return \"10\"\n    elif a == 49:\n        return \"10\"\n    elif a == 50:\n        return \"10\"\n    elif a == 51:\n        return \"10\"\n    elif a == 52:\n        return \"10\"\n    elif a == 53:\n        return \"10\"\n    elif a == 54:\n        return \"10\"\n    elif a == 55:\n        return \"10\"\n    elif a == 56:\n        return \"10\"\n    elif a == 57:\n        return \"10\"\n    elif a == 58:\n        return \"10\"\n    elif a == 59:\n        return \"10\"\n    elif a == 60:\n        return \"10\"\n    elif a == 61:\n        return \"10\"\n    elif a == 62:\n        return \"10\"\n    elif a == 63:\n        return \"10\"\n    elif a == 64:\n        return \"10\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4022,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1])\n    max_len = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if segments[j][0] <= segments[i][1]:\n                max_len = max(max_len, segments[j][0] - segments[i][1])\n    return str(max_len)"
    },
    {
        "number": 4023,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if n == 1:\n        return \"YES\" if a[0] == 1 else \"NO\"\n    if n == 2:\n        return \"YES\" if a[0] == a[1] else \"NO\"\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4024,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    if k > n:\n        return -1\n    dp = [[0] * (n+1) for _ in range(k+1)]\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i][j-1] + (n-j)\n            for l in range(1, j+1):\n                if s[l-1] == s[j-1]:\n                    dp[i][j] = min(dp[i][j], dp[i-1][l-1] + (n-j))\n    return dp[k][n] if dp[k][n]!= float('inf') else -1"
    },
    {
        "number": 4025,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days = 0\n    if a >= 1:\n        days += 1\n    if b >= 1:\n        days += 1\n    if c >= 1:\n        days += 1\n    if days == 0:\n        return \"0\"\n    if days == 1:\n        return \"1\"\n    if days == 2:\n        return \"2\"\n    if days == 3:\n        return \"4\"\n    if days == 4:\n        return \"7\"\n    if days == 5:\n        return \"11\"\n    if days == 6:\n        return \"18\"\n    if days == 7:\n        return \"28\"\n    return \"39\""
    },
    {
        "number": 4026,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        tiles = []\n        for j in range(n):\n            top_left, top_right = map(int, stdin.readline().strip().split())\n            bottom_left, bottom_right = map(int, stdin.readline().strip().split())\n            tiles.append((top_left, top_right, bottom_left, bottom_right))\n        if m % 2 == 1:\n            return \"NO\"\n        if m == 2:\n            if len(set(t[0] for t in tiles)) == 1 and len(set(t[1] for t in tiles)) == 1 and len(set(t[2] for t in tiles)) == 1 and len(set(t[3] for t in tiles)) == 1:\n                return \"YES\"\n            else:\n                return \"NO\"\n        if m == 4:\n            if len(set(t[0] for t in tiles)) == 1 and len(set(t[1] for t in tiles)) == 1 and len(set(t[2] for t in tiles)) == 1 and len(set(t[3] for t in tiles)) == 1:\n                return \"YES\"\n            else:\n                return \"NO\"\n        if m == 6:\n            if len(set(t[0] for t in tiles)) == 1 and len(set(t[1] for t in tiles)) == 1 and len(set(t[2] for t in tiles)) == 1 and len(set(t[3] for t in tiles)) == 1:\n                return \"YES\"\n            else:\n                return \"NO\"\n        if m == 8:\n            if len(set(t[0] for t in tiles)) == 1 and len(set(t[1] for t in tiles)) == 1 and len(set(t[2] for t in tiles)) == 1 and len(set(t[3] for t in tiles)) == 1:\n                return \"YES\"\n            else:\n                return \"NO\"\n        if m == 10:\n            if len(set(t[0] for t in tiles)) == 1 and len(set(t[1] for t in tiles)) == 1 and len(set(t[2] for t in tiles)) == 1 and len(set(t[3] for t in tiles)) == 1:\n                return \"YES\"\n            else:\n                return \"NO\"\n        if m == 12:\n            if len(set(t[0] for t in tiles)) == 1 and len(set(t[1] for t in tiles)) == 1 and len(set(t[2] for t in tiles)) == 1 and len(set(t[3] for t in tiles)) == 1:\n                return \"YES\"\n            else:\n                return \"NO\"\n        if m == 14:\n            if len(set(t[0] for t in tiles)) == 1 and len(set(t[1] for t in tiles)) == 1 and len(set(t[2] for t in tiles)) == 1 and len(set(t[3] for t in tiles)) == 1:\n                return \"YES\"\n            else:\n                return \"NO\"\n        if m == 16:\n            if len(set(t[0] for t in tiles)) == 1 and len(set(t[1] for t in tiles)) == 1 and len(set(t[2] for t in tiles)) == 1 and len(set(t[3] for t in tiles)) == 1:\n                return \"YES\"\n            else:\n                return \"NO\"\n        if m == 18:\n            if len(set(t[0] for t in tiles)) == 1 and len(set(t[1] for t in tiles)) == 1 and len(set(t[2] for t in tiles)) == 1 and len(set(t[3] for t in tiles)) == 1:\n                return \"YES\"\n            else:\n                return \"NO\"\n        if m == 20:\n            if len(set(t[0] for t in tiles)) == 1 and len(set(t[1] for t in tiles)) == 1 and len(set(t[2] for t in tiles)) == 1 and len(set(t[3] for t in tiles)) == 1:\n                return \"YES\""
    },
    {
        "number": 4027,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        return str(0)\n    else:\n        return str(1)"
    },
    {
        "number": 4028,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    MOD = 1000000007\n    dp = [[0] * (2*n+1) for _ in range(2*n+1)]\n    dp[0][0] = 1\n    for i in range(2*n):\n        for j in range(2*n):\n            if s[i] == '(':\n                dp[i+1][j+1] = (dp[i][j+1] + dp[i+1][j]) % MOD\n            elif s[i] == ')':\n                dp[i+1][j] = (dp[i][j+1] + dp[i+1][j]) % MOD\n            else:\n                dp[i+1][j+1] = (dp[i][j+1] + dp[i+1][j]) % MOD\n    return dp[2*n][n]"
    },
    {
        "number": 4029,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return 0\n    count = 0\n    while n % 25!= 0:\n        if n % 10 == 0:\n            return -1\n        i = 0\n        while n % 10 == 0:\n            n //= 10\n            i += 1\n        j = 0\n        while n % 10 == 0:\n            n //= 10\n            j += 1\n        if i > j:\n            n = n * 10 + n % 10\n            n = n // 10\n        else:\n            n = n // 10 + n % 10 * 10\n        count += 1\n    return count"
    },
    {
        "number": 4030,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    colors = set(range(1, n+1))\n    res = n\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i]!= s[j]:\n                colors.discard(i+1)\n                colors.discard(j+1)\n                res -= 1\n                break\n    print(res)\n    print(' '.join(map(str, sorted(colors))))"
    },
    {
        "number": 4031,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    substrings = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            if strings[i] in strings[j]:\n                substrings.add(strings[i])\n                break\n    if len(substrings) == n:\n        return \"YES\\n\" + \"\\n\".join(strings)\n    else:\n        return \"NO\""
    },
    {
        "number": 4032,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    left = 0\n    right = n - 1\n    count = 0\n    while left <= right:\n        if a[left] <= k:\n            count += 1\n            left += 1\n        elif a[right] <= k:\n            count += 1\n            right -= 1\n        else:\n            break\n    return count"
    },
    {
        "number": 4033,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return str(2*a)\n    if a == 1 or b == 1:\n        return str(2)\n    if a == 2 or b == 2:\n        return str(4)\n    if a == 3 or b == 3:\n        return str(6)\n    if a == 4 or b == 4:\n        return str(8)\n    if a == 5 or b == 5:\n        return str(10)\n    if a == 6 or b == 6:\n        return str(12)\n    if a == 7 or b == 7:\n        return str(14)\n    if a == 8 or b == 8:\n        return str(16)\n    if a == 9 or b == 9:\n        return str(18)\n    if a == 10 or b == 10:\n        return str(20)\n    if a == 11 or b == 11:\n        return str(22)\n    if a == 12 or b == 12:\n        return str(24)\n    if a == 13 or b == 13:\n        return str(26)\n    if a == 14 or b == 14:\n        return str(28)\n    if a == 15 or b == 15:\n        return str(30)\n    if a == 16 or b == 16:\n        return str(32)\n    if a == 17 or b == 17:\n        return str(34)\n    if a == 18 or b == 18:\n        return str(36)\n    if a == 19 or b == 19:\n        return str(38)\n    if a == 20 or b == 20:\n        return str(40)\n    if a == 21 or b == 21:\n        return str(42)\n    if a == 22 or b == 22:\n        return str(44)\n    if a == 23 or b == 23:\n        return str(46)\n    if a == 24 or b == 24:\n        return str(48)\n    if a == 25 or b == 25:\n        return str(50)\n    if a == 26 or b == 26:\n        return str(52)\n    if a == 27 or b == 27:\n        return str(54)\n    if a == 28 or b == 28:\n        return str(56)\n    if a == 29 or b == 29:\n        return str(58)\n    if a == 30 or b == 30:\n        return str(60)\n    if a == 31 or b == 31:\n        return str(62)\n    if a == 32 or b == 32:\n        return str(64)\n    if a == 33 or b == 33:\n        return str(66)\n    if a == 34 or b == 34:\n        return str(68)\n    if a == 35 or b == 35:\n        return str(70)\n    if a == 36 or b == 36:\n        return str(72)\n    if a == 37 or b == 37:\n        return str(74)\n    if a == 38 or b == 38:\n        return str(76)\n    if a == 39 or b == 39:\n        return str(78)\n    if a == 40 or b == 40:\n        return str(80)\n    if a == 41 or b == 41:\n        return str(82)\n    if a == 42 or b == 42:\n        return str(84)\n    if a == 43 or b == 43:\n        return str(86)\n    if a == 44 or b == 44:\n        return str(88)\n    if a == 45 or b == 45:\n        return str(90)\n    if a == 46 or b == 46:\n        return str(92)\n    if a == 47 or b == 47:\n        return str(94)\n    if a == 48 or b == 48:\n        return str(96)\n    if a == 49 or b == "
    },
    {
        "number": 4034,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    colors = [0] * n\n    swaps = 0\n    for i in range(n):\n        if colors[i] == 0:\n            colors[i] = 1\n            for j in range(i+1, n):\n                if s[j] < s[i]:\n                    colors[j] = 1\n                    swaps += 1\n        else:\n            colors[i] = 0\n            for j in range(i+1, n):\n                if s[j] > s[i]:\n                    colors[j] = 0\n                    swaps += 1\n    if swaps % 2 == 1:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + \"\".join(str(c) for c in colors)"
    },
    {
        "number": 4035,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    prices = []\n    for price in range(1, 101):\n        if price >= A and price <= B:\n            prices.append(price)\n    if not prices:\n        return '-1'\n    return str(min(prices))"
    },
    {
        "number": 4036,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return \"NO\"\n    a = [1] * k\n    for i in range(k-1):\n        if a[i] > 2*a[i+1]:\n            return \"NO\"\n        a[i+1] = min(a[i] + 1, 2*a[i])\n    if sum(a)!= n:\n        return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 4037,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n    projects.sort(key=lambda x: x[0], reverse=True)\n    dp = [0] * (r + 1)\n    for i in range(n):\n        for j in range(r, projects[i][0] - 1, -1):\n            dp[j] = max(dp[j], dp[j - projects[i][0]] + projects[i][1])\n    return max(dp)"
    },
    {
        "number": 4038,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = stdin.readline().strip().split()\n    nums = [int(num) for num in nums]\n    if len(set(nums))!= n**2:\n        return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if nums[i*n+j]!= nums[j*n+i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if nums[i*n+j]!= nums[j*n+i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if nums[i*n+j]!= nums[j*n+i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if nums[i*n+j]!= nums[j*n+i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if nums[i*n+j]!= nums[j*n+i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if nums[i*n+j]!= nums[j*n+i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if nums[i*n+j]!= nums[j*n+i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if nums[i*n+j]!= nums[j*n+i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if nums[i*n+j]!= nums[j*n+i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if nums[i*n+j]!= nums[j*n+i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if nums[i*n+j]!= nums[j*n+i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if nums[i*n+j]!= nums[j*n+i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if nums[i*n+j]!= nums[j*n+i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if nums[i*n+j]!= nums[j*n+i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if nums[i*n+j]!= nums[j*n+i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if nums[i*n+j]!= nums[j*n+i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if nums[i*n+j]!= nums[j*n+i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if nums[i*n+j]!= nums[j*n+i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if nums[i*n+j]!= nums[j*n+i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if nums[i*n+j]!= nums[j*n+i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                if nums[i*n+j]!= nums[j*n+i]:\n                    return \"NO\"\n    for i in range"
    },
    {
        "number": 4039,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n    projects.sort(key=lambda x: x[0])\n    dp = [False] * (r + 1)\n    dp[0] = True\n    for a, b in projects:\n        if not dp[a]:\n            continue\n        for i in range(r, a - 1, -1):\n            dp[i] |= dp[i - a]\n        if dp[a]:\n            r += b\n            if r < 0:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4040,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[0:3])\n    c = list(map(int, stdin.split()[3:]))\n    a = [0] * (n + 2)\n    for i in range(m):\n        if c[i] == 1:\n            a[1] = i + 1\n        else:\n            for j in range(1, n + 1):\n                if a[j] == 0 and a[j - 1] == 0:\n                    a[j] = i + 1\n                    break\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1]\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = a[i - 1"
    },
    {
        "number": 4041,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    n = len(s)\n    m = len(t)\n    dp = [[False] * (n+1) for _ in range(m+1)]\n    for i in range(m+1):\n        dp[i][0] = True\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s[j-1] == t[i-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = dp[i][j-1]\n    for i in range(m, -1, -1):\n        if dp[i][n]:\n            return n - i\n    return 0"
    },
    {
        "number": 4042,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = int(x)\n    b = int(10*(x-a))\n    return f\"{a} {b}\""
    },
    {
        "number": 4043,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if d > n - 1 or k > n - 1:\n        return \"NO\"\n    if d == n - 1 and k == n - 1:\n        return \"YES\\n\" + \"\\n\".join(f\"{i} {i+1}\" for i in range(n-1))\n    if d == n - 1:\n        return \"YES\\n\" + \"\\n\".join(f\"{i} {i+1}\" for i in range(n-1)) + f\"\\n{n-1} {1}\"\n    if k == n - 1:\n        return \"YES\\n\" + \"\\n\".join(f\"{i} {i+1}\" for i in range(n-1)) + f\"\\n{1} {n-1}\"\n    return \"NO\""
    },
    {
        "number": 4044,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = '0' * a + '1' * b\n    for i in range(x):\n        if i % 2 == 0:\n            s = s[:i] + '0' + s[i+1:]\n        else:\n            s = s[:i] + '1' + s[i+1:]\n    return s"
    },
    {
        "number": 4045,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    if s == t:\n        return \"NO\"\n\n    res = \"\"\n    for i in range(n):\n        res += \"a\"\n    for i in range(n):\n        res += \"b\"\n    for i in range(n):\n        res += \"c\"\n\n    if s in res or t in res:\n        return \"NO\"\n\n    return \"YES\\n\" + res"
    },
    {
        "number": 4046,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        if q[0] == 1:\n            return \"1 2\"\n        elif q[0] == -1:\n            return \"2 1\"\n        else:\n            return \"-1\"\n    if q[0] == 0:\n        return \"-1\"\n    if q[0] > 0:\n        p = [1] + [0] * (n-1)\n        for i in range(n-1):\n            p[i+1] = p[i] + q[i]\n        if p[-1]!= n:\n            return \"-1\"\n        return \" \".join(map(str, p))\n    else:\n        p = [n] + [0] * (n-1)\n        for i in range(n-1):\n            p[i+1] = p[i] + q[i]\n        if p[-1]!= 1:\n            return \"-1\"\n        return \" \".join(map(str, p))"
    },
    {
        "number": 4047,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n    x.sort()\n    coins = 0\n    for i in range(1, n):\n        if x[i]!= x[i-1]:\n            coins += abs(x[i] - x[i-1])\n    return str(coins)"
    },
    {
        "number": 4048,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    i, j = 1, 1\n    count = 0\n    while i*j < N:\n        if i*j == N:\n            return str(count)\n        elif i*j < N:\n            if i+1 <= j:\n                i += 1\n            else:\n                j += 1\n            count += 1\n    return str(count)"
    },
    {
        "number": 4049,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a1, a2, a3, b1, b2, b3 = map(int, stdin.split())\n    alice_wins = [0] * (n+1)\n    bob_wins = [0] * (n+1)\n    for i in range(a1):\n        alice_wins[i+1] = alice_wins[i] + 1\n    for i in range(a2):\n        alice_wins[i+a1+1] = alice_wins[i+a1] + 1\n    for i in range(a3):\n        alice_wins[i+a1+a2+1] = alice_wins[i+a1+a2] + 1\n    for i in range(b1):\n        bob_wins[i+1] = bob_wins[i] + 1\n    for i in range(b2):\n        bob_wins[i+b1+1] = bob_wins[i+b1] + 1\n    for i in range(b3):\n        bob_wins[i+b1+b2+1] = bob_wins[i+b1+b2] + 1\n    min_alice_wins = min(alice_wins)\n    max_alice_wins = max(alice_wins)\n    return f\"{min_alice_wins} {max_alice_wins}\""
    },
    {
        "number": 4050,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    k = 0\n    blocks = []\n    for i in range(n):\n        if i == 0 or a[i]!= a[i-1]:\n            l = i\n            r = i\n            while r < n-1 and a[r] == a[i]:\n                r += 1\n            if r > l:\n                blocks.append((l, r))\n                k += 1\n    print(k)\n    for block in blocks:\n        print(block[0], block[1])\n    return \"\""
    },
    {
        "number": 4051,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    stacks = [[] for _ in range(n)]\n    for i in range(n):\n        stacks[i].append(a[i])\n    for i in range(n):\n        for j in range(i+1, n):\n            if stacks[i][-1] > stacks[j][-1]:\n                stacks[i], stacks[j] = stacks[j], stacks[i]\n    for i in range(n):\n        if len(stacks[i]) > 1 and stacks[i][-1] - stacks[i][-2] >= 2:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4052,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    if s == t:\n        return \"0\\n\"\n\n    moves = []\n    for i in range(n - 1):\n        if s[i]!= t[i]:\n            moves.append(i)\n\n    if not moves:\n        return \"-1\\n\"\n\n    k = len(moves)\n    result = f\"{k}\\n\"\n    for move in moves:\n        result += f\"{move + 1} \"\n\n    return result"
    },
    {
        "number": 4053,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = set()\n    for i in range(2*n-2):\n        strings.add(stdin.readline().strip())\n    prefixes = set()\n    suffixes = set()\n    for s in strings:\n        prefixes.add(s[:n-1])\n        suffixes.add(s[1:])\n    result = \"\"\n    for s in strings:\n        if s in prefixes:\n            result += \"P\"\n        else:\n            result += \"S\"\n    return result"
    },
    {
        "number": 4054,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    return sum(a)"
    },
    {
        "number": 4055,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    k = 0\n    for i in range(1, n - 1):\n        if a[i - 1] == a[i + 1] == 1 and a[i] == 0:\n            k += 1\n    return str(k)"
    },
    {
        "number": 4056,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 4057,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    pockets = 1\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            pockets += 1\n    return pockets"
    },
    {
        "number": 4058,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    heaters = []\n    for i in range(n):\n        if a[i] == 1:\n            heaters.append(i)\n    heaters.sort()\n    if len(heaters) < n // 2 + 1:\n        return -1\n    ans = 0\n    i = 0\n    j = len(heaters) - 1\n    while i < j:\n        if heaters[i] + r - 1 < heaters[j] - r + 1:\n            ans += 1\n            i += 1\n        else:\n            ans += 1\n            j -= 1\n    return ans"
    },
    {
        "number": 4059,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*j + (n-i-j) == n:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4060,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            if i == 0 or s[i-1] == '(':\n                count += 1\n            elif i > 0 and s[i-1] == ')':\n                count += 1\n        elif s[i] == '(':\n            if i == n-1 or s[i+1] == ')':\n                count += 1\n            elif i < n-1 and s[i+1] == '(':\n                count += 1\n    return count"
    },
    {
        "number": 4061,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    n = len(s)\n    m = len(t)\n    dp = [[False] * (n+1) for _ in range(m+1)]\n    for i in range(m+1):\n        dp[i][0] = True\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s[j-1] == t[i-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = dp[i][j-1]\n    for i in range(m, -1, -1):\n        if dp[i][n]:\n            return n - i\n    return 0"
    },
    {
        "number": 4062,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(a*c, a*d, b*c, b*d))"
    },
    {
        "number": 4063,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    diff = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    arc_count = 0\n    abc_count = 0\n    k_choices = []\n\n    # Loop through all possible values of K\n    for k in range(1, max(diff) + 1):\n        # Count the number of problems for ARCs and ABCs with difficulty >= k\n        arc_count = sum(1 for d in diff if d >= k)\n        abc_count = N - arc_count\n\n        # Check if the number of problems for ARCs and ABCs is the same\n        if arc_count == abc_count:\n            k_choices.append(k)\n\n    # Return the number of choices of K that make the number of problems for ARCs and ABCs the same\n    return str(len(k_choices))"
    },
    {
        "number": 4064,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [0] * h\n    dp[0] = 1\n    for i in range(n):\n        for j in range(l, r+1):\n            if j - a[i] >= 0:\n                dp[j] += dp[j - a[i]]\n            if j - a[i] - 1 >= 0:\n                dp[j] += dp[j - a[i] - 1]\n    return max(dp)\n\nstdin = \"7 24 21 23\\n16 17 14 20 20 11 22\"\nprint(solution(stdin)) # Output: 3"
    },
    {
        "number": 4065,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    p = 1\n    for i in range(n-1):\n        if a[i] < a[i+1] * 2:\n            p += 1\n    return p"
    },
    {
        "number": 4066,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    lcm = float('inf')\n    ans = None\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] * a[j] < lcm:\n                lcm = a[i] * a[j]\n                ans = (i+1, j+1)\n    return''.join(map(str, ans))"
    },
    {
        "number": 4067,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count_0 = s.count('0')\n    count_1 = s.count('1')\n    count_2 = s.count('2')\n    if count_0 == count_1 and count_1 == count_2:\n        return s\n    elif count_0 == count_1:\n        return '0' * count_0 + '1' * count_1 + '2' * count_2\n    elif count_1 == count_2:\n        return '0' * count_0 + '1' * count_1 + '2' * count_2\n    else:\n        return '0' * count_0 + '1' * count_1 + '2' * count_2"
    },
    {
        "number": 4068,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().split())\n    broken_steps = list(map(int, stdin.readline().split()))\n\n    # Initialize dp array\n    dp = [0] * (N+1)\n    dp[0] = 1\n\n    # Fill dp array\n    for i in range(1, N+1):\n        for j in range(M):\n            if i-1 == broken_steps[j]:\n                continue\n            dp[i] = (dp[i] + dp[i-1]) % 1000000007\n\n    # Return result\n    return str(dp[N])"
    },
    {
        "number": 4069,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    if k == 1:\n        return str(abs(x))\n    if k % 2 == 0:\n        return str(abs(x + k // 2 * d))\n    else:\n        return str(abs(x + (k + 1) // 2 * d))"
    },
    {
        "number": 4070,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        count += 1\n    return count"
    },
    {
        "number": 4071,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a * (a + 1) * (2 * a + 1) // 6)"
    },
    {
        "number": 4072,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 4 == 0 and (a % 100!= 0 or a % 400 == 0):\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4073,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    xor = 0\n    for i in range(n):\n        xor ^= a[i]\n    return xor"
    },
    {
        "number": 4074,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        if n % k == 0:\n            print(n // k)\n        else:\n            print(n // k + 1)\n    return \"\""
    },
    {
        "number": 4075,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().split())\n    switches = []\n    for _ in range(N):\n        k, *s = map(int, stdin.readline().split())\n        switches.append((k, s))\n    bulbs = list(map(int, stdin.readline().split()))\n\n    # Count number of combinations of states of switches that light all bulbs\n    count = 0\n    for p in range(2):\n        for i in range(M):\n            # Count number of switches that are \"on\" among the switches connected to bulb i\n            on_switches = sum(s[i] == 1 for k, s in switches if i+1 in s)\n            # Check if bulb i is lighted\n            if (on_switches % 2 == p) == (bulbs[i] == 1):\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4076,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    # Calculate the angle of the hour hand\n    angle_hour = (H * 30 + M * 0.5) % 360\n    # Calculate the angle of the minute hand\n    angle_minute = M * 6\n    # Calculate the distance between the two hands\n    distance = (A**2 + B**2 - 2*A*B*math.cos(math.radians(angle_hour-angle_minute)))**0.5\n    return str(distance)"
    },
    {
        "number": 4077,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(sorted(a[i:j])[len(a[i:j])//2:]) == m:\n                count += 1\n    return count"
    },
    {
        "number": 4078,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= segments[i-1][0] and j <= segments[i-1][1]:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1]+1)\n    ans = 0\n    for i in range(1, n+1):\n        ans = max(ans, dp[m][i])\n    if ans == 0:\n        return \"0\\n0\"\n    res = []\n    for i in range(m, 0, -1):\n        if dp[i][n] == ans:\n            res.append(i)\n            ans -= 1\n            if ans == 0:\n                break\n    return f\"{ans}\\n{len(res)}\\n{' '.join(map(str, res))}\""
    },
    {
        "number": 4079,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(n):\n        s = stdin.readline().strip()\n        if len(set(s)) == len(s) and all(ord(s[j]) - ord(s[j-1]) == 1 for j in range(1, len(s))):\n            print(\"Yes\")\n        else:\n            print(\"No\")"
    },
    {
        "number": 4080,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split()[2+n+2*i:2+n+2*i+2])\n        segments.append((l, r))\n    dp = [[0]*(n+1) for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(segments[i-1][0], segments[i-1][1]+1):\n            dp[i][j] = dp[i-1][j-1] + 1\n    for i in range(m, 0, -1):\n        for j in range(segments[i-1][0], segments[i-1][1]+1):\n            dp[i-1][j] = max(dp[i-1][j], dp[i][j])\n    ans = 0\n    for i in range(1, n+1):\n        ans = max(ans, dp[i][i])\n    print(ans)\n    q = 0\n    for i in range(m):\n        if dp[i][segments[i][0]] == dp[i][segments[i][1]]:\n            q += 1\n    print(q)\n    chosen = []\n    for i in range(m):\n        if dp[i][segments[i][0]] == dp[i][segments[i][1]]:\n            chosen.append(i+1)\n    print(*chosen)\n    return \"\""
    },
    {
        "number": 4081,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    k = 0\n    s = \"\"\n    for i in range(n):\n        if i == 0 or a[i] > a[i-1]:\n            k += 1\n            s += \"L\"\n        else:\n            s += \"R\"\n    return f\"{k}\\n{s}\""
    },
    {
        "number": 4082,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 4083,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if a[i] % 2 == 1:\n            a[i] -= 1\n            count += 1\n    if count >= k:\n        return str(count)\n    else:\n        return str(count + 1)"
    },
    {
        "number": 4084,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    blue_count = 0\n    for i in range(n):\n        if i % 2 == 0:\n            blue_count += 1\n        if blue_count == n:\n            break\n    return blue_count"
    },
    {
        "number": 4085,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        divisors = list(map(int, stdin.readline().strip().split()))\n        divisors.sort()\n        if divisors[0] == 1 or divisors[-1] == n:\n            print(-1)\n        else:\n            x = divisors[0]\n            for i in range(1, n):\n                x = lcm(x, divisors[i])\n            print(x)\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    unique_a = []\n    for i in range(n-1, -1, -1):\n        if a[i] not in unique_a:\n            unique_a.append(a[i])\n    print(len(unique_a))\n    print(*unique_a)"
    },
    {
        "number": 4087,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = a + 1\n    while True:\n        if sum(int(digit) for digit in str(n)) % 4 == 0:\n            return str(n)\n        n += 1"
    },
    {
        "number": 4088,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    for i in range(1, q*4, 4):\n        s = lines[i]\n        m = int(lines[i+1])\n        b = list(map(int, lines[i+2].split()))\n        t = ''\n        for j in range(m):\n            t += s[j]\n        for j in range(m):\n            t = t[:b[j]] + t[b[j]+1:]\n        if b == list(map(lambda x: sum(abs(x-i) for i in range(m)), range(m))):\n            print(t)\n        else:\n            print('No answer')"
    },
    {
        "number": 4089,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 'a'\n    elif n <= 26:\n        return chr(ord('a') + n - 1)\n    elif n <= 701:\n        return chr(ord('a') + n // 26 - 1) + chr(ord('a') + n % 26 - 1)\n    elif n <= 18277:\n        return chr(ord('a') + n // 26 // 26 - 1) + chr(ord('a') + n // 26 % 26 - 1) + chr(ord('a') + n % 26 - 1)\n    elif n <= 475253:\n        return chr(ord('a') + n // 26 // 26 // 26 - 1) + chr(ord('a') + n // 26 // 26 % 26 - 1) + chr(ord('a') + n // 26 % 26 - 1) + chr(ord('a') + n % 26 - 1)\n    else:\n        return 'Error'"
    },
    {
        "number": 4090,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    words = stdin.split()[1:]\n    segments = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            segment =''.join(words[i:j])\n            if segment not in segments:\n                segments.append(segment)\n    return len(max(segments, key=len))"
    },
    {
        "number": 4091,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    dp = [[0] * (n+1) for _ in range(k+1)]\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i][j-1]\n            for l in range(1, j+1):\n                profit = sum(a[l-1:j])\n                if profit > dp[i-1][l-1]:\n                    dp[i][j] = profit\n    ans = dp[k][n]\n    t = [0] * k\n    for i in range(k, 0, -1):\n        for j in range(n, 0, -1):\n            if dp[i][j] == ans:\n                t[i-1] = j\n                ans -= sum(a[j-t[i-1]:j])\n                break\n    return str(ans) + '\\n' +''.join(map(str, t))"
    },
    {
        "number": 4092,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(1, n):\n        if a[i] == 0:\n            count += 1\n            a[i] = 1\n    return str(count)"
    },
    {
        "number": 4093,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        a = [0] * n\n        a[0] = m // n\n        for j in range(1, n):\n            a[j] = (a[j-1] + m) // (n-j+1)\n        ans = 0\n        for j in range(n-1):\n            ans = max(ans, abs(a[j]-a[j+1]))\n        print(ans)\n    return \"\""
    },
    {
        "number": 4094,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    count = 0\n    for i in range(1, 1000001):\n        if i % k == 0:\n            count += 1\n            if count == 1:\n                return str(i)\n    return \"-1\""
    },
    {
        "number": 4095,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:]))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(p[i:j]) == m:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4096,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[-1] > m:\n        return -1\n    days = 1\n    while True:\n        if sum(a) <= m:\n            return days\n        for i in range(n):\n            if a[i] > 0:\n                a[i] -= 1\n                break\n        else:\n            return -1\n        days += 1"
    },
    {
        "number": 4097,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(1, n):\n        if b[i] - b[i-1]!= b[1] - b[0]:\n            count += 1\n    if count > 1:\n        return -1\n    return count"
    },
    {
        "number": 4098,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    i = 0\n    j = k - 1\n    while i <= j:\n        if a[i] + 5 <= a[j]:\n            ans += a[i]\n            i += 1\n        else:\n            ans += a[j]\n            j -= 1\n    return ans"
    },
    {
        "number": 4099,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Calculate minimum score required on final subject\n    min_score = (M + sum(A)) // (N + 1)\n\n    # Check if minimum score is achievable\n    if min_score <= M:\n        return str(min_score)\n    else:\n        return \"-1\""
    },
    {
        "number": 4100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K, Q = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Initialize scores\n    scores = [K] * N\n\n    # Process questions\n    for i in range(Q):\n        # Get correct answer\n        correct = A[i]\n\n        # Subtract 1 point from all other players\n        for j in range(N):\n            if j!= correct - 1:\n                scores[j] -= 1\n\n    # Determine surviving players\n    surviving = [True] * N\n    for i in range(N):\n        if scores[i] <= 0:\n            surviving[i] = False\n\n    # Print surviving players\n    return '\\n'.join(['Yes' if surviving[i] else 'No' for i in range(N)])"
    },
    {
        "number": 4101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split()[0:m])))\n    sorted_a = sorted(a)\n    if sorted_a == a:\n        return \"YES\\n\" + \"\".join([str(1 - i) for i in a[0]]) + \"\\n\" + \"\".join([str(1 - j) for j in a[1]])\n    else:\n        return \"NO\""
    },
    {
        "number": 4102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # convert input string to list of integers\n    digits = [int(digit) for digit in stdin]\n\n    # check if the list is sorted in ascending order\n    if digits == sorted(digits):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split()[0:3])\n    s = list(map(int, stdin.split()[3:]))\n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        if s[i-1] == 1:\n            dp[i] = dp[i-1] + 1\n        else:\n            dp[i] = dp[i-1]\n        if dp[i] > b:\n            dp[i] = b\n        if dp[i] == b:\n            dp[i] += 1\n        if dp[i] > a:\n            dp[i] = a\n    return dp[n]"
    },
    {
        "number": 4104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return str(eval(stdin))"
    },
    {
        "number": 4105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    pairs = [(i+1, i+2) for i in range(n)]\n    colors = set(range(1, k+1))\n    for i in range(n):\n        for j in range(i+1, n):\n            if pairs[i][0] == pairs[j][0]:\n                colors.discard(pairs[i][1])\n            if pairs[i][1] == pairs[j][1]:\n                colors.discard(pairs[i][0])\n    if len(colors) < n:\n        return \"NO\"\n    else:\n        result = []\n        for i in range(n):\n            color1 = colors.pop()\n            color2 = colors.pop()\n            result.append((color1, color2))\n        return \"YES\\n\" + \"\\n\".join(map(str, result))"
    },
    {
        "number": 4106,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j-i < k:\n                dp[i][j] = -1\n            else:\n                dp[i][j] = max(dp[i][j-1], sum(a[i:j]))\n    if dp[0][n] == -1:\n        return -1\n    else:\n        return dp[0][n]"
    },
    {
        "number": 4107,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = stdin.split()[2]\n    routers = [i for i in range(1, n+1) if s[i-1] == '1']\n    if len(routers) > k:\n        return \"No solution\"\n    routers.sort()\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = i\n    for i in range(1, n):\n        for j in range(i):\n            if routers[i-j-1] - routers[j] <= k:\n                dp[i] = min(dp[i], dp[j] + routers[i-j-1] - routers[j])\n    return dp[n-1]"
    },
    {
        "number": 4108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if s == t:\n        return \"Yes\"\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.split())\n    books = []\n    for i in range(N):\n        book_info = stdin.split()\n        books.append((int(book_info[0]), int(book_info[1])))\n    # Initialize understanding levels\n    understanding_levels = [0] * M\n    # Calculate minimum amount of money needed\n    min_money = 0\n    for book in books:\n        book_price, book_algorithms = book\n        if sum(understanding_levels) + book_algorithms <= M:\n            min_money += book_price\n            for j in range(book_algorithms):\n                understanding_levels[j] += books[j][1]\n    # Check if objective is achievable\n    if sum(understanding_levels) >= M:\n        return \"Yes\\n\" + str(min_money)\n    else:\n        return \"No\""
    },
    {
        "number": 4110,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    D, G = map(int, stdin.split())\n    p = [int(x) for x in stdin.readline().split()]\n    c = [int(x) for x in stdin.readline().split()]\n\n    # calculate base score\n    base_score = sum(p)\n\n    # calculate perfect bonuses\n    perfect_bonuses = sum(c)\n\n    # calculate minimum number of problems\n    min_problems = 0\n    for i in range(D):\n        if p[i] == 100*i:\n            min_problems += 1\n\n    # calculate maximum possible score\n    max_score = base_score + perfect_bonuses\n\n    # check if minimum number of problems is enough\n    if max_score >= G:\n        return str(min_problems)\n\n    # calculate minimum number of problems needed to reach G\n    for i in range(D):\n        if p[i] == 100*i:\n            min_problems += 1\n            max_score += c[i]\n            if max_score >= G:\n                return str(min_problems)\n\n    # should never reach here\n    return \"Error\""
    },
    {
        "number": 4111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(1, n):\n        if sum(a[:i]) % 2 == sum(a[i:]) % 2:\n            count += 1\n    return count"
    },
    {
        "number": 4112,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    if k > n:\n        return -1\n    if x > n:\n        return -1\n    if k == 1:\n        return sum(a[:x])\n    dp = [0] * (n+1)\n    dp[0] = 0\n    dp[1] = a[0]\n    for i in range(2, n+1):\n        dp[i] = max(dp[i-1], dp[i-2]+a[i-1])\n    return dp[n]"
    },
    {
        "number": 4113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    cakes = 0\n    doughnuts = 0\n    while N >= 4:\n        cakes += 1\n        N -= 4\n    while N >= 7:\n        doughnuts += 1\n        N -= 7\n    if cakes == 0 and doughnuts == 0:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4114,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    altitudes = []\n    for i in range(1, n+1):\n        x, y, h = map(int, lines[i].split())\n        altitudes.append((x, y, h))\n    max_altitude = max(altitudes, key=lambda x: x[2])[2]\n    center_x = sum(x[0] * x[2] for x in altitudes) / sum(x[2] for x in altitudes)\n    center_y = sum(x[1] * x[2] for x in altitudes) / sum(x[2] for x in altitudes)\n    height = max_altitude\n    return f\"{center_x} {center_y} {height}\""
    },
    {
        "number": 4115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(ord('a'), ord('z')+1):\n            if s[i]!= chr(j) and s[i]!= chr(j).upper():\n                new_s = s[:i] + chr(j) + s[i+1:]\n                if new_s == new_s[::-1]:\n                    count += 1\n                    break\n    return count"
    },
    {
        "number": 4116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if n == i * j:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    lengths = list(map(int, stdin.readline().strip().split()))\n\n    # Sort lengths in ascending order\n    lengths.sort()\n\n    # Initialize variables\n    count = 0\n    i = 0\n    j = 1\n    k = 2\n\n    # Loop through all possible triples\n    while i < N - 2:\n        # Check if the lengths are different\n        if lengths[i]!= lengths[j]!= lengths[k]:\n            # Check if there exists a triangle\n            if lengths[i] + lengths[j] > lengths[k]:\n                count += 1\n            # Move to the next triple\n            k += 1\n            if k == N:\n                j += 1\n                k = j + 1\n        else:\n            # Move to the next triple\n            k += 1\n            if k == N:\n                j += 1\n                k = j + 1\n        # Move to the next stick\n        i += 1\n\n    return str(count)"
    },
    {
        "number": 4118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A < 1 or A > 9 or B < 1 or B > 9:\n        return -1\n    return A * B"
    },
    {
        "number": 4119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.readline().split())\n    X = list(map(int, stdin.readline().split()))\n\n    # Sort X in ascending order\n    X.sort()\n\n    # Initialize variables\n    moves = 0\n    visited = set()\n\n    # Loop through all coordinates\n    for i in range(M):\n        # If coordinate is already visited, skip it\n        if X[i] in visited:\n            continue\n\n        # Find the index of the piece at this coordinate\n        piece_index = X.index(X[i])\n\n        # Move the piece to the next coordinate\n        if X[i] + 1 == X[i+1]:\n            X[piece_index] += 1\n        else:\n            X[piece_index] -= 1\n\n        # Update visited set and moves counter\n        visited.add(X[i])\n        moves += 1\n\n    # Return the minimum number of moves required\n    return str(moves)"
    },
    {
        "number": 4120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    roads = set(roads)\n    options = []\n    for i in range(2**m):\n        option = bin(i)[2:].zfill(m)\n        if option.count('1') == n-1:\n            valid = True\n            for j in range(n):\n                visited = set()\n                queue = [1]\n                while queue:\n                    city = queue.pop(0)\n                    if city in visited:\n                        continue\n                    visited.add(city)\n                    for neighbor in roads.intersection({city, city+1}):\n                        if option[neighbor-1] == '1':\n                            queue.append(neighbor)\n                if len(visited)!= n:\n                    valid = False\n                    break\n            if valid:\n                options.append(option)\n    return str(len(options)) + '\\n' + '\\n'.join(options)"
    },
    {
        "number": 4121,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if n == 1:\n        return \"YES\" if a[0] == 1 else \"NO\"\n    if n == 2:\n        return \"YES\" if a[0] == a[1] else \"NO\"\n    if a[0] == a[1] and a[1] == a[2]:\n        return \"YES\"\n    if a[0] == a[1] or a[1] == a[2]:\n        return \"YES\" if a[0] + a[1] + a[2] <= 6 else \"NO\"\n    return \"NO\""
    },
    {
        "number": 4122,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    hp = H\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return str(i+1)\n    return \"-1\""
    },
    {
        "number": 4123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    max_count = 0\n    max_gram = \"\"\n    for i in range(n-1):\n        for j in range(i+2, n+1):\n            gram = s[i:j]\n            count = s.count(gram)\n            if count > max_count:\n                max_count = count\n                max_gram = gram\n    return max_gram"
    },
    {
        "number": 4124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    n = len(s)\n    m = len(t)\n    if n == 0 and m == 0:\n        return \"0\"\n    if n == 0 or m == 0:\n        return str(n + m)\n    moves = 0\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n        else:\n            if s[i] == \"\":\n                i += 1\n            elif t[j] == \"\":\n                j += 1\n            else:\n                if s[i] < t[j]:\n                    i += 1\n                else:\n                    j += 1\n                moves += 1\n    while i < n:\n        if s[i] == \"\":\n            i += 1\n        else:\n            i += 1\n            moves += 1\n    while j < m:\n        if t[j] == \"\":\n            j += 1\n        else:\n            j += 1\n            moves += 1\n    return str(moves)"
    },
    {
        "number": 4125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, X = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    max_D = 0\n    visited = set()\n\n    # Loop through all possible values of D\n    for D in range(1, X):\n        # Initialize variables\n        visited.clear()\n        visited.add(X)\n\n        # Perform Move 1 and Move 2\n        y = X\n        for i in range(N):\n            # Move 1\n            y = y + D\n            if y in visited:\n                break\n            visited.add(y)\n\n            # Move 2\n            y = y - D\n            if y in visited:\n                break\n            visited.add(y)\n\n        # Update max_D if necessary\n        if len(visited) == N:\n            max_D = D\n\n    # Print result\n    return str(max_D)"
    },
    {
        "number": 4126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n % 2 == 0:\n        return \"No\"\n    if s == s[::-1]:\n        if s[:n//2] == s[:n//2][::-1] and s[n//2+1:] == s[n//2+1:][::-1]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    result = int(A * B)\n    return str(result)"
    },
    {
        "number": 4128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        if n == 1:\n            print(1)\n        elif n == 2:\n            print(0)\n        else:\n            a = 1\n            b = n - 1\n            count = 0\n            while a <= b:\n                if a + b == n:\n                    count += 1\n                a += 1\n                b -= 1\n            print(count)\n    return \"\""
    },
    {
        "number": 4129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = [False] * (n+1)\n    visited[s] = True\n    queue = [s]\n    while queue:\n        curr = queue.pop(0)\n        for neighbor in graph[curr]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                queue.append(neighbor)\n    return len(visited) - 1"
    },
    {
        "number": 4130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        if a[i] == 1:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 4131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prefectures = [[] for _ in range(n)]\n    for i in range(m):\n        p, y = map(int, stdin.split())\n        prefectures[p-1].append((y, i+1))\n    ids = []\n    for i in range(n):\n        prefecture_id = str(i+1).zfill(6)\n        for j, city in enumerate(sorted(prefectures[i])):\n            city_id = prefecture_id + str(j+1).zfill(6)\n            ids.append(city_id)\n    return '\\n'.join(ids)"
    },
    {
        "number": 4132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    alive = set(range(1, N+1))\n    final_health = max(A)\n\n    # Repeat until only one monster is alive\n    while len(alive) > 1:\n        # Choose two random alive monsters\n        m1, m2 = random.sample(alive, 2)\n\n        # Calculate the damage dealt by m1\n        damage = min(A[m1-1], A[m2-1])\n\n        # Update the health of m2\n        A[m2-1] -= damage\n\n        # Check if m2 is dead\n        if A[m2-1] <= 0:\n            alive.remove(m2)\n\n    # Return the final health of the last monster\n    return str(final_health)"
    },
    {
        "number": 4133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    name = stdin.strip()\n    # check if golorp is impossible to feed\n    if name.count('_') == len(name):\n        return \"false\"\n    # define golorp's jaws shape\n    jaws_shape = name.count('_')\n    # define golorp's daily diet\n    diet = [int(c) for c in name if c.isdigit()]\n    # sort diet in ascending order\n    diet.sort()\n    # define golorp's stomach capacity\n    stomach_capacity = 2 ** jaws_shape\n    # define golorp's maximum daily intake\n    max_daily_intake = sum(diet)\n    # define golorp's minimum daily intake\n    min_daily_intake = max(1, max_daily_intake - stomach_capacity)\n    # define golorp's daily intake range\n    daily_intake_range = range(min_daily_intake, max_daily_intake + 1)\n    # iterate over daily intake range\n    for daily_intake in daily_intake_range:\n        # define golorp's jaws positions\n        jaws_positions = [i for i in range(jaws_shape) if name[i] == '_']\n        # define golorp's jaws positions and values\n        jaws_values = [(i, daily_intake // (2 ** (jaws_shape - i - 1))) for i in jaws_positions]\n        # sort jaws values in ascending order\n        jaws_values.sort()\n        # define golorp's jaws positions and values in the order in which they get into the stomach\n        jaws_values_in_stomach = [v for i, v in jaws_values]\n        # check if golorp's jaws positions and values fit into the stomach\n        if sum(jaws_values_in_stomach) <= stomach_capacity:\n            # return lexicographically smallest sequence of variable values\n            return ''.join(str(v) for v in jaws_values_in_stomach)\n    # if no valid sequence of variable values is found, return \"false\"\n    return \"false\""
    },
    {
        "number": 4134,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, stdin.split())))\n    dp = [[0] * m for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(m):\n            if i > 0:\n                dp[i][j] += dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j-1]\n    return dp[n-1][m-1] if k == (grid[0][0] ^ grid[n-1][m-1]) else 0"
    },
    {
        "number": 4135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n    s = t\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            s = s[:i][::-1] + s[i:]\n    return s"
    },
    {
        "number": 4136,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)"
    },
    {
        "number": 4137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    operands = stdin.split('+')\n    if len(operands) == 1:\n        operands = stdin.split('-')\n    if len(operands) == 1:\n        raise ValueError('Invalid input')\n    operands = [int(x) for x in operands]\n    # generate Brainfuck program\n    program = ''\n    for i in range(len(operands)):\n        if i == 0:\n            program += '>'\n        else:\n            program += '+'\n        program += '>'\n        program += '+' * operands[i]\n        program += '<'\n        program += '<' * operands[i]\n        program += '-'\n        program += '-' * operands[i]\n        program += '>'\n        program += '+' * operands[i]\n        program += '<'\n        program += '<' * operands[i]\n    program += '.'\n    return program"
    },
    {
        "number": 4138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        k = int(stdin.readline().strip())\n        if k == 1:\n            print(1)\n        else:\n            n = 1\n            while True:\n                if k <= n * (n + 1) // 2:\n                    break\n                n += 1\n            if k <= n * (n + 1) // 2:\n                print(k - (n - 1) * (n - 2) // 2)\n            else:\n                print(k - (n - 1) * (n - 2) // 2 + 1)"
    },
    {
        "number": 4139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if '7' in str(i) and '5' in str(i) and '3' in str(i) and len(set(str(i))) == 3:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    count = 0\n    for i in range(1, n):\n        if stdin[i] == stdin[i-1]:\n            count += 1\n    return count + 1"
    },
    {
        "number": 4141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n\n    # check if all even numbers are divisible by 3 or 5\n    for num in nums:\n        if num % 2 == 0 and not (num % 3 == 0 or num % 5 == 0):\n            return \"DENIED\"\n\n    # if all even numbers are divisible by 3 or 5, allow entry\n    return \"APPROVED\""
    },
    {
        "number": 4142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if len(S) % 2 == 1:\n        return \"No\"\n    for i in range(1, len(S), 2):\n        if S[i] not in ['R', 'U', 'D']:\n            return \"No\"\n    for i in range(0, len(S), 2):\n        if S[i] not in ['L', 'U', 'D']:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, A, B, C, D, E = map(int, stdin.split())\n\n    # Calculate minimum time required for all people to reach City 6\n    time = 0\n    while N > 0:\n        # Train\n        time += N // A + 1\n        N = N % A\n        # Bus\n        time += N // B + 1\n        N = N % B\n        # Taxi\n        time += N // C + 1\n        N = N % C\n        # Airplane\n        time += N // D + 1\n        N = N % D\n        # Ship\n        time += N // E + 1\n        N = N % E\n\n    return str(time)"
    },
    {
        "number": 4144,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    MOD = 10**9 + 7\n    count = 0\n    for i in range(1, 10):\n        if N % i == 0:\n            count += 1\n    if count == 0:\n        return str(0)\n    elif count == 1:\n        return str(1)\n    else:\n        return str(count)"
    },
    {
        "number": 4145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    i = x + 1\n    while True:\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return str(i)\n        i += 1"
    },
    {
        "number": 4146,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *v = map(int, stdin.split())\n    if n % 2 == 1:\n        return \"0\"\n    count = 0\n    for i in range(n-2):\n        if v[i]!= v[i+2]:\n            count += 1\n    if count == 2:\n        return \"0\"\n    return str(count)"
    },
    {
        "number": 4147,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, A, B, C = map(int, stdin.split())\n    lengths = list(map(int, stdin.split()))\n\n    # Initialize variables\n    mp = 0\n    bamboos = lengths.copy()\n\n    # Sort bamboos in descending order\n    bamboos.sort(reverse=True)\n\n    # Use Extension Magic to obtain bamboos of length A\n    while bamboos[-1] < A:\n        mp += 1\n        bamboos[-1] += 1\n\n    # Use Shortening Magic to obtain bamboos of length B\n    while bamboos[-1] > B:\n        mp += 1\n        bamboos.remove(max(bamboos))\n\n    # Use Composition Magic to obtain bamboos of length C\n    while bamboos[-1] > C:\n        mp += 10\n        bamboos.remove(max(bamboos))\n        bamboos.remove(max(bamboos))\n        bamboos.append(bamboos[-1] + bamboos[-2])\n\n    # Return minimum MP needed\n    return str(mp)"
    },
    {
        "number": 4148,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.strip().split()\n    n = int(n)\n    s = list(s)\n    s.sort()\n    for i in range(len(s)):\n        s[i] = chr((ord(s[i]) - ord('A') + n) % 26 + ord('A'))\n    return ''.join(s)"
    },
    {
        "number": 4149,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n    a = []\n    for i in range(n):\n        if is_prime(b[i]):\n            a.append(b[i])\n            a.append(next_prime(a[-1]))\n        else:\n            for j in range(b[i], 1, -1):\n                if b[i] % j == 0:\n                    a.append(j)\n                    break\n    return''.join(map(str, a))\n\ndef"
    },
    {
        "number": 4150,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    team1 = []\n    team2 = []\n    for i in range(n):\n        if i % 2 == 0:\n            team1.append(i)\n        else:\n            team2.append(i)\n    for i in range(n):\n        if len(team1) == 0:\n            break\n        if len(team2) == 0:\n            break\n        if i % 2 == 0:\n            max_skill = max(a[j] for j in range(max(0, i-k), i+1))\n            closest_left = [j for j in range(max(0, i-k), i) if a[j] == max_skill]\n            closest_right = [j for j in range(i+1, min(n, i+k+1)) if a[j] == max_skill]\n            chosen = closest_left + closest_right\n            for j in chosen:\n                team1.remove(j)\n                team2.append(j)\n        else:\n            max_skill = max(a[j] for j in range(max(0, i-k), i+1))\n            closest_left = [j for j in range(max(0, i-k), i) if a[j] == max_skill]\n            closest_right = [j for j in range(i+1, min(n, i+k+1)) if a[j] == max_skill]\n            chosen = closest_left + closest_right\n            for j in chosen:\n                team2.remove(j)\n                team1.append(j)\n    result = \"\"\n    for i in range(n):\n        if i in team1:\n            result += \"1\"\n        else:\n            result += \"2\"\n    return result"
    },
    {
        "number": 4151,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(2**n):\n        b = [0] * n\n        for j in range(n):\n            if i & (1 << j):\n                b[j] = 1\n        if b[0] == 0:\n            count += 1\n            continue\n        for j in range(1, n):\n            if b[j] == 0:\n                if b[j-1] == 1:\n                    b[j] = 1\n                else:\n                    b[j] = 0\n            else:\n                if b[j-1] == 1:\n                    b[j] = 1\n                else:\n                    b[j] = 0\n        if b == sorted(b):\n            count += 1\n    return str(count % 998244353)"
    },
    {
        "number": 4152,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i]+a[j]) & (a[i]+a[j]-1) == 0:\n                count += 1\n    return n - count"
    },
    {
        "number": 4153,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    count = 0\n    for i in range(N):\n        if i == 0:\n            if stdin[i] == '0':\n                count += 1\n        elif i == N-1:\n            if stdin[i] == '1':\n                count += 1\n        else:\n            if stdin[i] == '0' and stdin[i-1] == '1' and stdin[i+1] == '1':\n                count += 1\n    return count"
    },
    {
        "number": 4154,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.split())\n    gates = []\n    for i in range(M):\n        L, R = map(int, stdin.split())\n        gates.append((L, R))\n\n    # Count number of ID cards that allow us to pass all gates\n    count = 0\n    for i in range(N):\n        for L, R in gates:\n            if L <= i <= R:\n                count += 1\n                break\n\n    return str(count)"
    },
    {
        "number": 4155,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    h = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    water_count = 0\n    heights = [0] * N\n\n    # Iterate through each flower and water it\n    for i in range(N):\n        # Check if the flower needs to be watered\n        if h[i]!= heights[i]:\n            # Water the flower\n            water_count += 1\n            heights[i] = h[i]\n            # Check if the flower needs to be watered again\n            if h[i]!= heights[i]:\n                # Water the flower again\n                water_count += 1\n                heights[i] = h[i]\n\n    # Print the minimum number of watering operations required\n    print(water_count)"
    },
    {
        "number": 4156,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    dp = [[0] * (w+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(w+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= a[i-1]:\n                dp[i][j] += dp[i-1][j-a[i-1]]\n            if dp[i][j] > 10**9:\n                return \"0\"\n    return str(dp[n][w])"
    },
    {
        "number": 4157,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    for i in range(n-1):\n        if a[i] % 3 == 0:\n            a[i+1] = a[i] // 3\n        else:\n            a[i+1] = a[i] * 2\n    return''.join(map(str, a))"
    },
    {
        "number": 4158,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = list(map(int, stdin.readline().strip().split()))\n    points.sort()\n    max_points = 0\n    max_subset = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[j] - points[i] == 2**int(math.log2(points[j] - points[i])):\n                max_points = max(max_points, j-i+1)\n                max_subset = points[i:j+1]\n    return f\"{max_points}\\n{' '.join(map(str, max_subset))}\""
    },
    {
        "number": 4159,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi_cookies = A\n    aoki_cookies = B\n    for i in range(K):\n        if takahashi_cookies > 0:\n            takahashi_cookies -= 1\n        elif aoki_cookies > 0:\n            aoki_cookies -= 1\n    return f\"{takahashi_cookies} {aoki_cookies}\""
    },
    {
        "number": 4160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    balance = 100\n    years = 1\n    while balance < x:\n        balance += balance * 0.01\n        years += 1\n    return str(years)"
    },
    {
        "number": 4161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.readline().strip())\n    result = 0\n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                result += gcd(a, b, c)\n    return str(result)\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_f = 0\n\n    # Loop through all possible values of m\n    for m in range(1, 1000001):\n        # Calculate f(m)\n        f = sum(m % a[i] for i in range(N))\n\n        # Update max_f if necessary\n        if f > max_f:\n            max_f = f\n\n    # Return result\n    return str(max_f)"
    },
    {
        "number": 4163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    prev_dice = None\n    count = 0\n    for i in range(N):\n        dice = tuple(map(int, stdin.readline().strip().split()))\n        if prev_dice and prev_dice == dice:\n            count += 1\n        else:\n            count = 1\n        prev_dice = dice\n        if count >= 3:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4164,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_r = 3.14 * r * r\n    area_1 = 3.14 * 1 * 1\n    result = area_r // area_1\n    return str(result)"
    },
    {
        "number": 4165,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sides = list(map(int, stdin.readline().strip().split()))\n    if max(sides) < sum(sides) - max(sides):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4166,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().split())\n    digits = [int(stdin.readline().split()[1]) for _ in range(M)]\n\n    # Check if there is an integer satisfying the conditions\n    for i in range(10**N):\n        # Convert i to a list of digits in base N\n        num_digits = [int(d) for d in str(i).zfill(N)]\n        # Check if the s_i-th digit from the left is c_i\n        if all(num_digits[s-1] == c for s, c in enumerate(digits, 1)):\n            return str(i)\n\n    # If no integer satisfying the conditions is found, return -1\n    return \"-1\""
    },
    {
        "number": 4167,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for l in range(1, n+1):\n                if (i+j)%k == 0 and (j+l)%k == 0 and (l+i)%k == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 4168,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    s = ''\n    while n!= 0:\n        if n % -2 == 0:\n            s = '0' + s\n            n //= -2\n        else:\n            s = '1' + s\n            n -= 1\n    return s"
    },
    {
        "number": 4169,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    # sort stores by price\n    a, b = zip(*sorted(zip(a, b)))\n\n    # initialize variables\n    total_price = 0\n    total_drinks = 0\n\n    # buy drinks from stores\n    for i in range(n):\n        if m > b[i]:\n            total_price += a[i] * b[i]\n            total_drinks += b[i]\n            m -= b[i]\n        else:\n            total_price += a[i] * m\n            total_drinks += m\n            m = 0\n            break\n\n    # print result\n    return str(total_price)"
    },
    {
        "number": 4170,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_moves = 0\n    current_height = heights[0]\n\n    # Iterate through squares\n    for i in range(1, N):\n        # Check if next square is taller than current square\n        if heights[i] > current_height:\n            # Update max moves\n            max_moves += 1\n            # Update current height\n            current_height = heights[i]\n\n    # Return max moves\n    return str(max_moves)"
    },
    {
        "number": 4171,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if a[i] % 2 == 1:\n            a[i] -= 1\n            count += 1\n    if count >= k:\n        return str(count)\n    else:\n        return str(count + 1)"
    },
    {
        "number": 4172,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    while True:\n        min_val = min(a)\n        max_val = max(a)\n        if a.count(min_val) >= k:\n            break\n        if a.count(max_val) >= k:\n            break\n        if min_val == max_val:\n            break\n        if a.count(min_val) + a.count(max_val) >= k:\n            break\n        if min_val < max_val:\n            a[a.index(min_val)] += 1\n        else:\n            a[a.index(max_val)] -= 1\n        count += 1\n    return count"
    },
    {
        "number": 4173,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = []\n    for line in stdin.split('\\n'):\n        if line:\n            n, a, b = map(int, line.split())\n            queries.append((n, a, b))\n\n    for n, a, b in queries:\n        if n % 2 == 0:\n            print(min(a, b) * n // 2)\n        else:\n            print(min(a, b) * (n // 2 + 1))\n\n    return ''"
    },
    {
        "number": 4174,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, X = map(int, stdin.split())\n    L = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    count = 0\n    D = 0\n\n    # Iterate through bounces\n    for i in range(N+1):\n        D += L[i]\n        if D <= X:\n            count += 1\n\n    # Return result\n    return str(count)"
    },
    {
        "number": 4175,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = set()\n    for i in range(n):\n        word = stdin.readline().strip()\n        if word in words:\n            return \"No\"\n        words.add(word)\n    return \"Yes\""
    },
    {
        "number": 4176,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return str(A)\n    elif A > B:\n        A, B = B, A\n    if A % 2 == 0:\n        return str(A // 2)\n    else:\n        return str((A + 1) // 2)"
    },
    {
        "number": 4177,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return 'x' * len(s)"
    },
    {
        "number": 4178,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    H = list(map(int, stdin.readline().strip().split()))\n\n    # Check if it is possible to perform the operations\n    for i in range(1, N):\n        if H[i] <= H[i-1]:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4179,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    N, M, C = map(int, lines[0].split())\n    B = list(map(int, lines[1].split()))\n    A = []\n    for i in range(2, 2+N):\n        A.append(list(map(int, lines[i].split())))\n\n    # Count number of codes that correctly solve the problem\n    count = 0\n    for i in range(N):\n        if sum([A[i][j] * B[j] for j in range(M)]) + C > 0:\n            count += 1\n\n    # Print result\n    return str(count)"
    },
    {
        "number": 4180,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    bills = n // 1000\n    change = n % 1000\n    return str(change)"
    },
    {
        "number": 4181,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    B = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_monsters = 0\n    for i in range(N):\n        # Calculate the maximum number of monsters the i-th hero can defeat\n        max_monsters_hero = min(A[i], B[i])\n        # Calculate the maximum number of monsters the (i+1)-th hero can defeat\n        max_monsters_hero += min(A[i+1], B[i])\n        # Update the maximum number of monsters\n        max_monsters = max(max_monsters, max_monsters_hero)\n\n    return str(max_monsters)"
    },
    {
        "number": 4182,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M, X, Y = map(int, stdin.readline().split())\n    x_coords = list(map(int, stdin.readline().split()))\n    y_coords = list(map(int, stdin.readline().split()))\n\n    # check if war will break out\n    for Z in range(X+1, Y):\n        if all(x < Z <= y for x, y in zip(x_coords, [X]*N+y_coords)) and all(x < Z for x in x_coords) and all(y >= Z for y in y_coords):\n            return \"War\"\n    return \"No War\""
    },
    {
        "number": 4183,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    T = list(map(int, stdin.readline().strip().split()))\n\n    # Calculate time when each clock points upward\n    upward_times = [0] * N\n    for i in range(N):\n        upward_times[i] = (360 * T[i]) // (2 * 3600)\n\n    # Calculate total time\n    total_time = max(upward_times)\n\n    # Return result\n    return str(total_time)"
    },
    {
        "number": 4184,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    weights = list(map(int, stdin.readline().strip().split()))\n\n    # Find minimum possible absolute difference\n    min_diff = float('inf')\n    for T in range(2, N):\n        S_1 = sum(weights[:T])\n        S_2 = sum(weights[T:])\n        diff = abs(S_1 - S_2)\n        if diff < min_diff:\n            min_diff = diff\n\n    # Print result\n    return str(min_diff)"
    },
    {
        "number": 4185,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, stdin.split())))\n    moves = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if matrix[i-1][j-1]!= (i-1)*m + j:\n                moves += 1\n                matrix[i-1][j-1] = (i-1)*m + j\n                if j == 1:\n                    matrix[i-1][m] = matrix[i-1][0]\n                    matrix[i-1][0] = (i-1)*m + m\n                else:\n                    matrix[i-1][j-2] = matrix[i-1][j-1]\n    return str(moves)"
    },
    {
        "number": 4186,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    if n % 2 == 1:\n        return \"IMPOSSIBLE\"\n    else:\n        return sum(a) // 2"
    },
    {
        "number": 4187,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    max_rest = 0\n    current_rest = 0\n    for i in range(n):\n        if a[i] == 0:\n            current_rest = 0\n        else:\n            current_rest += 1\n            max_rest = max(max_rest, current_rest)\n    return str(max_rest)"
    },
    {
        "number": 4188,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    facts = [\n        \"The highest mountain above sea level in the world is Mount Everest. Its peak rises to 8848 m.\",\n        \"The largest board game tournament consisted of 958 participants playing chapaev.\",\n        \"The largest online maths competition consisted of 12766 participants.\",\n        \"The Nile is credited as the longest river in the world. From its farthest stream in Burundi, it extends 6695 km in length.\",\n        \"While not in flood, the main stretches of the Amazon river in South America can reach widths of up to 1100 km at its widest points.\",\n        \"Angel Falls is the highest waterfall. Its greatest single drop measures 807 m.\",\n        \"The Hotel Everest View above Namche, Nepal \u2014 the village closest to Everest base camp \u2013 is at a record height of 31962 m.\",\n        \"Uranium is the heaviest of all the naturally occurring elements. Its most common isotope has a nucleus containing 146 neutrons.\",\n        \"The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the twentieth century.\",\n        \"The longest snake held in captivity is over 25 feet long. Its name is Medusa.\",\n        \"Colonel Meow holds the world record for longest fur on a cat \u2014 almost 134 centimeters.\",\n        \"Sea otters can have up to 10000 hairs per square inch. This is the most dense fur in the animal kingdom.\",\n        \"The largest state of USA is Alaska; its area is 663268 square miles.\",\n        \"Lake Baikal is the largest freshwater lake in the world. It reaches 1642\u00a0meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water.\",\n        \"The most colorful national flag is the one of Turkmenistan, with 106 colors.\"\n    ]\n    n = int(stdin)\n    if n < 1 or n > 16:\n        return \"Invalid input\"\n    return facts[n-1]"
    },
    {
        "number": 4189,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cheeses = {}\n    for i in range(n):\n        name, type_ = stdin.readline().strip().split()\n        cheeses[name] = type_\n    count = 0\n    for cheese in cheeses.values():\n        if cheese == \"soft\":\n            count += 1\n    return count"
    },
    {
        "number": 4190,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    c.sort()\n    return''.join(map(str, c))"
    },
    {
        "number": 4191,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input to list of integers\n    input_list = [int(x) for x in stdin.split()]\n\n    # Initialize variables\n    zero_count = 0\n    one_count = 0\n\n    # Iterate through input list and count zeros and ones\n    for num in input_list:\n        if num == 0:\n            zero_count += 1\n        elif num == 1:\n            one_count += 1\n\n    # Determine output based on counts\n    if zero_count > one_count:\n        return '0'\n    else:\n        return '1'"
    },
    {
        "number": 4192,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    time_taken = D / S\n    if time_taken <= T:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    A = [[int(x) for x in line.split()] for line in lines[:-1]]\n    N = int(lines[-1])\n    b = [int(x) for x in lines[-N-1:-1]]\n\n    # Check for bingo\n    for i in range(3):\n        if all(A[i][j] in b for j in range(3)) or \\\n           all(A[j][i] in b for j in range(3)) or \\\n           all(A[i][j] == A[j][i] and A[i][j] in b for j in range(3)):\n            return 'Yes'\n\n    # No bingo\n    return 'No'"
    },
    {
        "number": 4194,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Sort assignments by duration\n    A.sort()\n\n    # Initialize variables\n    max_days = 0\n    current_day = 0\n    current_assignment = 0\n\n    # Iterate over assignments\n    for i in range(M):\n        # Check if there are enough days left for the current assignment\n        if current_day + A[i] > N:\n            return -1\n\n        # Check if the current assignment overlaps with the previous assignment\n        if current_assignment + A[i] > current_day:\n            return -1\n\n        # Update variables\n        current_day += A[i]\n        current_assignment = i + 1\n        max_days = max(max_days, current_day)\n\n    return max_days"
    },
    {
        "number": 4195,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        return str(N)\n    elif D == 1:\n        return str(100 * N)\n    else:\n        return str(10000 * N)"
    },
    {
        "number": 4196,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    max_gcd = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            gcd = math.gcd(a[i], a[j])\n            if gcd > max_gcd:\n                max_gcd = gcd\n    return str(max_gcd)"
    },
    {
        "number": 4197,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Sort A in descending order\n    A.sort(reverse=True)\n\n    # Initialize result list\n    result = []\n\n    # Iterate over A and append student numbers to result list\n    for i in range(N):\n        result.append(A.index(i+1)+1)\n\n    # Convert result list to string and return\n    return''.join(map(str, result))"
    },
    {
        "number": 4198,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_num = 0\n    for i in range(1, 10**9+1):\n        num_digits = len(str(i))\n        price = A * i + B * num_digits\n        if price <= X:\n            max_num = i\n        else:\n            break\n    return str(max_num)"
    },
    {
        "number": 4199,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.readline().split())\n    h = list(map(int, stdin.readline().split()))\n\n    # Count number of people who can ride the roller coaster\n    count = 0\n    for i in range(N):\n        if h[i] >= K:\n            count += 1\n\n    # Print result\n    print(count)\n\n    return \"\""
    },
    {
        "number": 4200,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Calculate total number of votes\n    total_votes = sum(A)\n\n    # Calculate minimum number of votes required for an item to be popular\n    min_votes = total_votes // (4 * M)\n\n    # Check if M popular items can be selected\n    popular_items = [i for i in range(N) if A[i] >= min_votes]\n    if len(popular_items) >= M:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4201,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    H, W, K = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(H)]\n\n    # Count black squares\n    black_squares = sum(row.count('#') for row in grid)\n\n    # Check if K is valid\n    if K > black_squares:\n        return 0\n\n    # Count number of choices\n    choices = 0\n    for i in range(H):\n        for j in range(W):\n            # Check if square is black\n            if grid[i][j] == '#':\n                # Check if row is chosen\n                if sum(grid[k][j] == '#' for k in range(H)) == 1:\n                    # Check if column is chosen\n                    if sum(grid[i][k] == '#' for k in range(W)) == 1:\n                        choices += 1\n\n    return choices"
    },
    {
        "number": 4202,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    i = L\n    j = L + 1\n    min_val = float('inf')\n    while i < R:\n        val = (i * j) % 2019\n        if val < min_val:\n            min_val = val\n        i += 1\n        j += 1\n    return str(min_val)"
    },
    {
        "number": 4203,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0]!= 'A':\n        return 'WA'\n    if s.count('C')!= 1:\n        return 'WA'\n    if s[2:].lower()!= s[2:]:\n        return 'WA'\n    return 'AC'"
    },
    {
        "number": 4204,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    k = int(k)\n    s = s.replace('2', '22').replace('3', '333').replace('4', '4444').replace('5', '55555').replace('6', '666666').replace('7', '7777777').replace('8', '88888888').replace('9', '999999999')\n    for i in range(5*10**15):\n        s = s.replace('1', '1')\n        s = s.replace('2', '22').replace('3', '333').replace('4', '4444').replace('5', '55555').replace('6', '666666').replace('7', '7777777').replace('8', '88888888').replace('9', '999999999')\n    return s[k-1]"
    },
    {
        "number": 4205,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n\n    # Check if p is already sorted\n    if p == sorted(p):\n        return \"YES\"\n\n    # Perform swaps\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n                if p == sorted(p):\n                    return \"YES\"\n                p[i], p[j] = p[j], p[i]\n\n    # If no swaps work, return NO\n    return \"NO\""
    },
    {
        "number": 4206,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    n = len(str(s))\n    max_count = 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            cut = s // 10**i % 10 * 10**(j-i) + s // 10**(j-1) % 10 * 10**(i-1)\n            if cut == 0:\n                continue\n            count = 0\n            for digit in str(cut):\n                if int(digit) % 3 == 0:\n                    count += 1\n            max_count = max(max_count, count)\n    return str(max_count)"
    },
    {
        "number": 4207,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    c = [d * a[i] + b[i] for i in range(n)]\n    max_zeros = 0\n    for i in range(n):\n        if c[i] == 0:\n            max_zeros += 1\n    return str(max_zeros)"
    },
    {
        "number": 4208,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n\n    # Initialize a 2D array to store the compatibility of each pair of colors\n    compatible = [[False for _ in range(n)] for _ in range(n)]\n\n    # Initialize a 2D array to store the count of compatible pairs for each color\n    count = [[0 for _ in range(n)] for _ in range(n)]\n\n    # Count the number of compatible pairs for each color\n    for i in range(n):\n        for j in range(n):\n            if l[i] == '?' or r[j] == '?':\n                compatible[i][j] = True\n            elif l[i] == r[j]:\n                compatible[i][j] = True\n                count[ord(l[i]) - ord('a')][i] += 1\n                count[ord(r[j]) - ord('a')][j] += 1\n\n    # Find the maximum number of compatible pairs\n    max_count = 0\n    for i in range(n):\n        for j in range(n):\n            if compatible[i][j]:\n                max_count += 1\n\n    # Find the pairs with the maximum count\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if compatible[i][j]:\n                pairs.append((i, j))\n\n    # Print the maximum number of compatible pairs and the pairs themselves\n    print(max_count)\n    for pair in pairs:\n        print(pair[0] + 1, pair[1] + 1)\n\n    return ''"
    },
    {
        "number": 4209,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    k = 0\n    blocks = []\n    for i in range(n):\n        if not blocks or a[i]!= a[blocks[-1][1]]:\n            blocks.append([i, i])\n            k += 1\n        else:\n            blocks[-1][1] += 1\n    print(k)\n    for block in blocks:\n        print(block[0], block[1])"
    },
    {
        "number": 4210,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] * a[j]) % k == 0:\n                count += 1\n    return count"
    },
    {
        "number": 4211,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    B = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    A = [0] * N\n    A[0] = B[0]\n    A[1] = max(B[0], B[1])\n\n    # Fill in A\n    for i in range(2, N):\n        A[i] = max(A[i-1], B[i-1] + A[i-2])\n\n    # Return result\n    return str(A[-1])"
    },
    {
        "number": 4212,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M, Q = map(int, stdin.readline().split())\n    quadruples = []\n    for _ in range(Q):\n        a, b, c, d = map(int, stdin.readline().split())\n        quadruples.append((a, b, c, d))\n\n    # Initialize variables\n    dp = [[0] * (M+1) for _ in range(N+1)]\n    for i in range(N+1):\n        dp[i][0] = 1\n\n    # Fill dp table\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            for q in quadruples:\n                if q[0] == i:\n                    dp[i][j] += dp[q[1]][j-q[2]]\n\n    # Find maximum score\n    max_score = 0\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            for q in quadruples:\n                if q[0] == i and q[1] == j:\n                    max_score += q[3]\n\n    # Return maximum score\n    return str(max_score)"
    },
    {
        "number": 4213,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_diff = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            diff = abs(A[i] - A[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    # Print output\n    return str(max_diff)"
    },
    {
        "number": 4214,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    towns = []\n    for i in range(N):\n        x, y = map(int, stdin.readline().strip().split())\n        towns.append((x, y))\n\n    # Compute distances between all pairs of towns\n    distances = [[0] * N for _ in range(N)]\n    for i in range(N):\n        for j in range(i+1, N):\n            dx = towns[i][0] - towns[j][0]\n            dy = towns[i][1] - towns[j][1]\n            distances[i][j] = distances[j][i] = (dx**2 + dy**2) ** 0.5\n\n    # Compute all possible paths\n    paths = []\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                for l in range(k+1, N):\n                    paths.append((i, j, k, l))\n\n    # Compute the average length of all paths\n    total_length = 0\n    for path in paths:\n        length = sum(distances[path[i]][path[i+1]] for i in range(3))\n        total_length += length\n    average_length = total_length / len(paths)\n\n    # Format and return output\n    return f\"{average_length:.6f}\""
    },
    {
        "number": 4215,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A - 2 * B)"
    },
    {
        "number": 4216,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_f = float('inf')\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            if a*b == n:\n                f = max(len(str(a)), len(str(b)))\n                if f < min_f:\n                    min_f = f\n    return str(min_f)"
    },
    {
        "number": 4217,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.readline().split())\n    likes = [set() for _ in range(n)]\n    for i in range(n):\n        k, *a = map(int, stdin.readline().split())\n        for j in range(k):\n            likes[i].add(a[j])\n    # count common likes\n    common_likes = set.intersection(*likes)\n    # print result\n    return str(len(common_likes))"
    },
    {
        "number": 4218,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    odd_count = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            odd_count += 1\n    return str(odd_count/n)"
    },
    {
        "number": 4219,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    A = [int(stdin.readline().strip()) for _ in range(N)]\n    testimonies = []\n    for i in range(N):\n        testimonies.append([])\n        for j in range(A[i]):\n            x, y = map(int, stdin.readline().strip().split())\n            testimonies[i].append((x, y))\n\n    # Find maximum number of honest persons\n    max_honest = 0\n    for i in range(N):\n        if A[i] == 0:\n            continue\n        honest_count = 0\n        for j in range(A[i]):\n            if testimonies[i][j][1] == 1:\n                honest_count += 1\n        max_honest = max(max_honest, honest_count)\n\n    return str(max_honest)"
    },
    {
        "number": 4220,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, s = stdin.strip().split()\n    k = int(k)\n    if len(s) <= k:\n        return s\n    else:\n        return s[:k] + '...'"
    },
    {
        "number": 4221,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    singular = stdin.strip()\n    if singular[-1] =='s':\n        plural = singular + 'es'\n    else:\n        plural = singular +'s'\n    return plural"
    },
    {
        "number": 4222,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.readline().split())\n    snack_counts = [0] * K\n    for i in range(K):\n        d, *snacks = map(int, stdin.readline().split())\n        snack_counts[i] = d\n        for snack in snacks:\n            snack_counts[i] += snack\n\n    # Count number of snukes with no snacks\n    no_snack_count = sum(1 for count in snack_counts if count == 0)\n\n    # Return result\n    return str(no_snack_count)"
    },
    {
        "number": 4223,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    count = 1\n    for i in range(1, n):\n        if s[i]!= s[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 4224,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            a[i] //= 2\n            count += 1\n        else:\n            a[i] *= 3\n            count += 1\n    return str(count)"
    },
    {
        "number": 4225,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    max_sum = 0\n    for i in range(K+1):\n        max_sum += i * (A + B + C - i)\n    return str(max_sum)"
    },
    {
        "number": 4226,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == 0 and y == 0:\n        return \"No\"\n    if x == 0 and y > 0:\n        return \"Yes\"\n    if x > 0 and y == 0:\n        return \"Yes\"\n    if x == 1 and y == 2:\n        return \"Yes\"\n    if x == 1 and y == 4:\n        return \"Yes\"\n    if x == 2 and y == 4:\n        return \"Yes\"\n    if x == 2 and y == 6:\n        return \"Yes\"\n    if x == 3 and y == 6:\n        return \"Yes\"\n    if x == 3 and y == 8:\n        return \"Yes\"\n    if x == 4 and y == 8:\n        return \"Yes\"\n    if x == 4 and y == 10:\n        return \"Yes\"\n    if x == 5 and y == 10:\n        return \"Yes\"\n    if x == 5 and y == 12:\n        return \"Yes\"\n    if x == 6 and y == 12:\n        return \"Yes\"\n    if x == 6 and y == 14:\n        return \"Yes\"\n    if x == 7 and y == 14:\n        return \"Yes\"\n    if x == 7 and y == 16:\n        return \"Yes\"\n    if x == 8 and y == 16:\n        return \"Yes\"\n    if x == 8 and y == 18:\n        return \"Yes\"\n    if x == 9 and y == 18:\n        return \"Yes\"\n    if x == 9 and y == 20:\n        return \"Yes\"\n    if x == 10 and y == 20:\n        return \"Yes\"\n    if x == 10 and y == 22:\n        return \"Yes\"\n    if x == 11 and y == 22:\n        return \"Yes\"\n    if x == 11 and y == 24:\n        return \"Yes\"\n    if x == 12 and y == 24:\n        return \"Yes\"\n    if x == 12 and y == 26:\n        return \"Yes\"\n    if x == 13 and y == 26:\n        return \"Yes\"\n    if x == 13 and y == 28:\n        return \"Yes\"\n    if x == 14 and y == 28:\n        return \"Yes\"\n    if x == 14 and y == 30:\n        return \"Yes\"\n    if x == 15 and y == 30:\n        return \"Yes\"\n    if x == 15 and y == 32:\n        return \"Yes\"\n    if x == 16 and y == 32:\n        return \"Yes\"\n    if x == 16 and y == 34:\n        return \"Yes\"\n    if x == 17 and y == 34:\n        return \"Yes\"\n    if x == 17 and y == 36:\n        return \"Yes\"\n    if x == 18 and y == 36:\n        return \"Yes\"\n    if x == 18 and y == 38:\n        return \"Yes\"\n    if x == 19 and y == 38:\n        return \"Yes\"\n    if x == 19 and y == 40:\n        return \"Yes\"\n    if x == 20 and y == 40:\n        return \"Yes\"\n    if x == 20 and y == 42:\n        return \"Yes\"\n    if x == 21 and y == 42:\n        return \"Yes\"\n    if x == 21 and y == 44:\n        return \"Yes\"\n    if x == 22 and y == 44:\n        return \"Yes\"\n    if x == 22 and y == 46:\n        return \"Yes\"\n    if x == 23 and y == 46:\n        return \"Yes\"\n    if x == 23 and y == 48:\n        return \"Yes\"\n    if x == 24 and y == 48:\n        return \"Yes\"\n    if x == 24 and y == 50:\n        return \"Yes\"\n    if x == 25 and y == 50:\n        return \"Yes\"\n    if x == 25 and y == 52:\n        return \"Yes\"\n    if x == 26 and y == 52:\n        return \"Yes\"\n    if x == 26 and y == 54:\n        return"
    },
    {
        "number": 4227,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.readline().split())\n    edges = [tuple(map(int, stdin.readline().split())) for _ in range(M)]\n\n    # create adjacency list\n    adj = [[] for _ in range(N+1)]\n    for a, b in edges:\n        adj[a].append(b)\n        adj[b].append(a)\n\n    # count paths from 1 to N\n    def count_paths(start, end, visited, path_count):\n        if start == end:\n            return 1\n        if start in visited:\n            return 0\n        visited.add(start)\n        count = 0\n        for neighbor in adj[start]:\n            count += count_paths(neighbor, end, visited, path_count)\n        visited.remove(start)\n        path_count[0] += count\n        return count\n\n    path_count = [0]\n    count_paths(1, N, set(), path_count)\n    return str(path_count[0])"
    },
    {
        "number": 4228,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, L = map(int, stdin.split())\n\n    # Calculate flavors of apples\n    flavors = [L+i-1 for i in range(1, N+1)]\n\n    # Calculate the sum of flavors of all apples\n    total_flavor = sum(flavors)\n\n    # Calculate the sum of flavors of remaining apples\n    remaining_flavors = sum(flavors[:-1])\n\n    # Calculate the difference between the two sums\n    diff = abs(total_flavor - remaining_flavors)\n\n    # Return the difference\n    return str(diff)"
    },
    {
        "number": 4229,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    fizzbuzz = []\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            fizzbuzz.append(\"FizzBuzz\")\n        elif i % 3 == 0:\n            fizzbuzz.append(\"Fizz\")\n        elif i % 5 == 0:\n            fizzbuzz.append(\"Buzz\")\n        else:\n            fizzbuzz.append(str(i))\n    return str(sum(int(i) for i in fizzbuzz))"
    },
    {
        "number": 4230,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    diff = float('inf')\n    ans = None\n    for i in range(1, 101):\n        if i not in p:\n            if abs(i - X) < diff:\n                diff = abs(i - X)\n                ans = i\n    return str(ans)"
    },
    {
        "number": 4231,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.readline().split())\n    h, w = map(int, stdin.readline().split())\n    white_cells = (H - h) * W + (W - w)\n    return str(white_cells)"
    },
    {
        "number": 4232,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(n-k+1):\n        if a[i+k-1] <= 10**9:\n            return str(a[i+k-1])\n    return \"-1\""
    },
    {
        "number": 4233,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(line.strip()) for line in stdin.split('\\n')[1:]]\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    if 0 <= i+dx < n and 0 <= j+dy < m and grid[i+dx][j+dy] == '*':\n                        stars.append((i, j, dx, dy))\n    if len(stars) > n*m:\n        return '-1'\n    else:\n        k = len(stars)\n        result = []\n        for i in range(k):\n            x, y, dx, dy = stars[i]\n            size = 1\n            while 0 <= x+dx < n and 0 <= y+dy < m and grid[x+dx][y+dy] == '*':\n                size += 1\n                x += dx\n                y += dy\n            result.append((x, y, size))\n        return f'{k}\\n' + '\\n'.join(f'{x} {y} {s}' for x, y, s in result)"
    },
    {
        "number": 4234,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    if n == 0:\n        return \"0\\n\"\n    if n % 2 == 1:\n        return \"0\\n\" + s\n    for i in range(1, n, 2):\n        if s[i] == s[i-1]:\n            return \"0\\n\" + s\n    k = 0\n    for i in range(1, n, 2):\n        if s[i] == s[i-1]:\n            k += 1\n    if k == 0:\n        return \"0\\n\"\n    return f\"{k}\\n{s[:k] + s[k+2:]}\""
    },
    {
        "number": 4235,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    graph = [[] for _ in range(n+1)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = [False] * (n+1)\n    def dfs(u, prev):\n        visited[u] = True\n        for v in graph[u]:\n            if v == prev:\n                continue\n            if visited[v]:\n                return True\n            if dfs(v, u):\n                return True\n        return False\n    for u in range(1, n+1):\n        if not visited[u]:\n            if dfs(u, -1):\n                return \"NO\"\n    ans = \"\"\n    for i in range(m):\n        u, v = edges[i]\n        if u > v:\n            u, v = v, u\n        if graph[u][0] == v:\n            ans += \"0\"\n        else:\n            ans += \"1\"\n    return \"YES\\n\" + ans"
    },
    {
        "number": 4236,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    points = set(range(1, m+1))\n    for l, r in segments:\n        points -= set(range(l, r+1))\n    k = len(points)\n    if k == 0:\n        return \"0\\n\"\n    else:\n        return f\"{k}\\n{' '.join(map(str, points))}\\n\""
    },
    {
        "number": 4237,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for i in range(A, B+1):\n        if i % C!= 0 and i % D!= 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4238,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if sum(int(digit) for digit in str(n)) % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4239,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    while N > 0:\n        if N >= 1000000000:\n            count += N // 1000000000\n            N %= 1000000000\n        elif N >= 100000000:\n            count += N // 100000000\n            N %= 100000000\n        elif N >= 10000000:\n            count += N // 10000000\n            N %= 10000000\n        elif N >= 1000000:\n            count += N // 1000000\n            N %= 1000000\n        elif N >= 100000:\n            count += N // 100000\n            N %= 100000\n        elif N >= 10000:\n            count += N // 10000\n            N %= 10000\n        elif N >= 1000:\n            count += N // 1000\n            N %= 1000\n        elif N >= 100:\n            count += N // 100\n            N %= 100\n        elif N >= 10:\n            count += N // 10\n            N %= 10\n        else:\n            count += 1\n            N = 0\n    return str(count)"
    },
    {
        "number": 4240,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if s == t:\n        return \"Yes\"\n    s = s + s\n    if s.find(t)!= -1:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4241,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    n, m = len(s), len(t)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        dp[i][0] = i\n    for i in range(1, n + 1):\n        dp[0][i] = i\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s[j - 1] == t[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n    return dp[m][n]"
    },
    {
        "number": 4242,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    divisors = []\n    for i in range(1, min(A, B) + 1):\n        if A % i == 0 and B % i == 0:\n            divisors.append(i)\n    divisors.sort(reverse=True)\n    return str(divisors[K-1])"
    },
    {
        "number": 4243,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    coins = [500, 100, 50, 10, 5, 1]\n    happiness = 0\n    for coin in coins:\n        if X >= coin:\n            happiness += (X // coin) * coin\n            X %= coin\n    return str(happiness)"
    },
    {
        "number": 4244,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    X = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    min_stamina = float('inf')\n    min_coordinate = 0\n\n    # Loop through all possible meeting coordinates\n    for i in range(1, 101):\n        # Calculate total stamina spent by each person\n        total_stamina = sum((x - i) ** 2 for x in X)\n\n        # Update minimum stamina and coordinate if necessary\n        if total_stamina < min_stamina:\n            min_stamina = total_stamina\n            min_coordinate = i\n\n    # Print result\n    return str(min_stamina)"
    },
    {
        "number": 4245,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if B == 0:\n        return \"0\"\n    if A == B:\n        return str(B)\n    if A == 1:\n        return str(B)\n    if B == 1:\n        return \"1\"\n    if A == 2:\n        return str(B // 2 + B % 2)\n    if B == 2:\n        return \"2\"\n    if A == 3:\n        return str(B // 3 + B % 3)\n    if B == 3:\n        return \"3\"\n    if A == 4:\n        return str(B // 4 + B % 4)\n    if B == 4:\n        return \"4\"\n    if A == 5:\n        return str(B // 5 + B % 5)\n    if B == 5:\n        return \"5\"\n    if A == 6:\n        return str(B // 6 + B % 6)\n    if B == 6:\n        return \"6\"\n    if A == 7:\n        return str(B // 7 + B % 7)\n    if B == 7:\n        return \"7\"\n    if A == 8:\n        return str(B // 8 + B % 8)\n    if B == 8:\n        return \"8\"\n    if A == 9:\n        return str(B // 9 + B % 9)\n    if B == 9:\n        return \"9\"\n    if A == 10:\n        return str(B // 10 + B % 10)\n    if B == 10:\n        return \"10\"\n    if A == 11:\n        return str(B // 11 + B % 11)\n    if B == 11:\n        return \"11\"\n    if A == 12:\n        return str(B // 12 + B % 12)\n    if B == 12:\n        return \"12\"\n    if A == 13:\n        return str(B // 13 + B % 13)\n    if B == 13:\n        return \"13\"\n    if A == 14:\n        return str(B // 14 + B % 14)\n    if B == 14:\n        return \"14\"\n    if A == 15:\n        return str(B // 15 + B % 15)\n    if B == 15:\n        return \"15\"\n    if A == 16:\n        return str(B // 16 + B % 16)\n    if B == 16:\n        return \"16\"\n    if A == 17:\n        return str(B // 17 + B % 17)\n    if B == 17:\n        return \"17\"\n    if A == 18:\n        return str(B // 18 + B % 18)\n    if B == 18:\n        return \"18\"\n    if A == 19:\n        return str(B // 19 + B % 19)\n    if B == 19:\n        return \"19\"\n    if A == 20:\n        return str(B // 20 + B % 20)\n    if B == 20:\n        return \"20\""
    },
    {
        "number": 4246,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    count = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n\n    count = 0\n    for i in range(1, n - 1):\n        if p[i] < p[i - 1] and p[i] < p[i + 1]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4248,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(float, stdin.readline().strip().split())\n        points.append((x, y))\n    x_sum = sum(x for x, y in points)\n    y_sum = sum(y for x, y in points)\n    x_mean = x_sum / n\n    y_mean = y_sum / n\n    numerator = sum((x - x_mean) * (y - y_mean) for x, y in points)\n    denominator = sum((x - x_mean) ** 2 for x, y in points) ** 0.5 * sum((y - y_mean) ** 2 for x, y in points) ** 0.5\n    theta = numerator / denominator\n    return f\"{theta:.3f}\""
    },
    {
        "number": 4249,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[-1] > m:\n        return -1\n    days = 1\n    while True:\n        if sum(a) <= m:\n            return days\n        a = [max(0, a[i] - i) for i in range(n)]\n        days += 1"
    },
    {
        "number": 4250,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    t = []\n    for i in range(k):\n        t.append(max(s))\n        s.remove(max(s))\n    return''.join(map(str, t))"
    },
    {
        "number": 4251,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split()[i*m:(i+1)*m])))\n    k = 0\n    for i in range(m):\n        for j in range(n-1):\n            if abs(a[j][i] - a[j+1][i]) < k:\n                k = abs(a[j][i] - a[j+1][i])\n    return str(k)"
    },
    {
        "number": 4252,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    name = stdin.readline().strip()\n    count = 0\n    for i in range(n-2):\n        if name[i:i+3] == 'xxx':\n            count += 1\n    if count == 0:\n        return '0'\n    else:\n        return str(count)"
    },
    {
        "number": 4253,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r ** 2\n    return str(area)"
    },
    {
        "number": 4254,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, w = map(int, stdin.split())\n    if w >= s:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4255,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return str(int(area))"
    },
    {
        "number": 4256,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    count = 0\n    while B >= 8:\n        count += 1\n        B -= 8\n        if count == C:\n            break\n    return count"
    },
    {
        "number": 4257,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)"
    },
    {
        "number": 4258,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = map(int, stdin.split())\n    total_biscuits = 0\n    for i in range(1, t+1):\n        if i % a == 0:\n            total_biscuits += b\n        else:\n            total_biscuits += a\n    return str(total_biscuits)"
    },
    {
        "number": 4259,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    if (b - a) % k!= 0:\n        return \"NG\"\n    else:\n        return \"OK\""
    },
    {
        "number": 4260,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    t = T / X\n    return str(t)"
    },
    {
        "number": 4261,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if B == A:\n        return str(C)\n    elif B < A:\n        return str(C + B)\n    else:\n        return str(C + A)"
    },
    {
        "number": 4262,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    P = list(map(int, stdin.readline().strip().split()))\n    Q = list(map(int, stdin.readline().strip().split()))\n\n    # count the number of permutations of size N\n    count = 1\n    for i in range(1, N+1):\n        count *= i\n\n    # find the index of P and Q in lexicographical order\n    index_P = 0\n    index_Q = 0\n    for i in range(count):\n        if P == sorted(P):\n            index_P = i\n            break\n        if Q == sorted(Q):\n            index_Q = i\n            break\n\n    # calculate the difference and return it\n    return str(abs(index_P - index_Q))"
    },
    {
        "number": 4263,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    max_len = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if all(c in 'ACGT' for c in s[i:j]):\n                max_len = max(max_len, j-i)\n    return str(max_len)"
    },
    {
        "number": 4264,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(1, n+1):\n        if len(str(i)) % 2 == 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4265,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if s[i]!= t[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4266,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    black_stones = [x]\n    for i in range(1, k):\n        black_stones.append(black_stones[-1] - 1)\n    white_stones = [i for i in range(-1000000, 1000001) if i not in black_stones]\n    result = []\n    for stone in white_stones:\n        if stone <= x:\n            result.append(stone)\n        else:\n            break\n    return''.join(map(str, result))"
    },
    {
        "number": 4267,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4268,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, D = map(int, stdin.readline().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, stdin.readline().split())))\n\n    # Count pairs with integer distance\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            dist = dist**0.5\n            if dist.is_integer():\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4269,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n        return \"Bad\"\n    else:\n        return \"Good\""
    },
    {
        "number": 4270,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    values = list(map(float, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_value = values[0]\n    for i in range(1, N):\n        # Compute new value\n        new_value = (values[i-1] + values[i]) / 2\n        # Update max value\n        if new_value > max_value:\n            max_value = new_value\n\n    # Return result\n    return str(max_value)"
    },
    {
        "number": 4271,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    B = list(map(int, stdin.readline().strip().split()))\n    C = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    satisfaction = 0\n    prev_dish = None\n\n    # Iterate over dishes\n    for i in range(N):\n        # Add satisfaction from current dish\n        satisfaction += B[i]\n\n        # Add satisfaction from next dish if applicable\n        if i < N - 1 and A[i+1] == A[i] + 1:\n            satisfaction += C[i]\n\n        # Update previous dish\n        prev_dish = A[i]\n\n    # Return result\n    return str(satisfaction)"
    },
    {
        "number": 4272,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    count = 0\n    for i in range(n - 2):\n        if s[i:i+3] == \"ABC\":\n            count += 1\n    return str(count)"
    },
    {
        "number": 4273,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    names = [stdin.readline().strip() for _ in range(N)]\n\n    # Count number of ways to choose three people\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if (names[i][0] in ['M', 'A', 'R', 'C', 'H'] and\n                    names[j][0] in ['M', 'A', 'R', 'C', 'H'] and\n                    names[k][0] in ['M', 'A', 'R', 'C', 'H'] and\n                    names[i][0]!= names[j][0] and\n                    names[i][0]!= names[k][0] and\n                    names[j][0]!= names[k][0]):\n                    count += 1\n\n    # Print result\n    print(count)"
    },
    {
        "number": 4274,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, M = map(int, stdin.split())\n\n    # check if submission gets AC\n    if M == N:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4276,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, T = map(int, stdin.split())\n    costs = list(map(int, stdin.readline().split()))\n    times = list(map(int, stdin.readline().split()))\n\n    # Sort routes by time\n    routes = sorted(zip(costs, times), key=lambda x: x[1])\n\n    # Find minimum cost\n    min_cost = float('inf')\n    for i in range(N):\n        if routes[i][1] <= T:\n            min_cost = min(min_cost, routes[i][0])\n        else:\n            break\n\n    # Check if minimum cost is possible\n    if min_cost == float('inf'):\n        return 'TLE'\n    else:\n        return str(min_cost)"
    },
    {
        "number": 4277,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(n * a + b)"
    },
    {
        "number": 4278,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(N)]\n\n    # Count the frequency of each character in each string\n    freqs = [[0] * 26 for _ in range(N)]\n    for i in range(N):\n        for c in strings[i]:\n            freqs[i][ord(c) - ord('a')] += 1\n\n    # Check if any two strings are anagrams\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if freqs[i] == freqs[j]:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4279,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        k = int(stdin.readline().strip())\n        if k == 1:\n            print(1)\n        else:\n            n = 1\n            while True:\n                if k <= n * (n + 1) // 2:\n                    break\n                n += 1\n            if k <= n * (n + 1) // 2:\n                print(k - (n - 1) * (n - 2) // 2)\n            else:\n                print(k - (n - 1) * (n - 2) // 2 + 1)"
    },
    {
        "number": 4280,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    roads = []\n    for i in range(n-1):\n        x, y = map(int, stdin.split())\n        roads.append((x, y))\n    roads.sort()\n    r = 1\n    while True:\n        good_cities = 0\n        company = [0] * (n+1)\n        for x, y in roads:\n            if company[x] == company[y]:\n                company[x] = r\n                company[y] = r\n                good_cities += 1\n        if good_cities <= k:\n            break\n        r += 1\n    print(r)\n    print(*[company[i] for i in range(1, n+1)])\n    return \"\""
    },
    {
        "number": 4281,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    occupied = set(x)\n    min_occupied = max_occupied = len(occupied)\n    for i in range(n):\n        for j in range(i+1, n):\n            if x[i] == x[j]:\n                continue\n            if x[i] - 1 in occupied and x[j] - 1 in occupied:\n                occupied.remove(x[i] - 1)\n                occupied.remove(x[j] - 1)\n                occupied.add(x[i] - 1 + x[j] - 1)\n            elif x[i] + 1 in occupied and x[j] + 1 in occupied:\n                occupied.remove(x[i] + 1)\n                occupied.remove(x[j] + 1)\n                occupied.add(x[i] + 1 + x[j] + 1)\n            elif x[i] - 1 in occupied:\n                occupied.remove(x[i] - 1)\n                occupied.add(x[i] - 1)\n            elif x[i] + 1 in occupied:\n                occupied.remove(x[i] + 1)\n                occupied.add(x[i] + 1)\n            elif x[j] - 1 in occupied:\n                occupied.remove(x[j] - 1)\n                occupied.add(x[j] - 1)\n            elif x[j] + 1 in occupied:\n                occupied.remove(x[j] + 1)\n                occupied.add(x[j] + 1)\n            else:\n                continue\n            min_occupied = min(min_occupied, len(occupied))\n            max_occupied = max(max_occupied, len(occupied))\n    return f\"{min_occupied} {max_occupied}\""
    },
    {
        "number": 4282,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    p = [i+1 for i in range(n)]\n    for i in range(n):\n        x = p[(i+1)%n]\n        y = p[a[i].index(x)]\n        p[a[i].index(x)] = a[i][0]\n        p[a[i].index(y)] = a[i][1]\n    return''.join(map(str, p))"
    },
    {
        "number": 4283,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    ans = 1\n    for i in range(1, n):\n        if a[i] - a[i-1] <= 5:\n            ans += 1\n        else:\n            break\n    return str(ans)"
    },
    {
        "number": 4284,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split('\\n')\n    for query in queries:\n        if not query:\n            continue\n        k, n, a, b = map(int, query.split())\n        if k <= a:\n            print(-1)\n            continue\n        if k <= b:\n            print(n)\n            continue\n        if k % (a+b) == 0:\n            print(n)\n            continue\n        if k % (a+b) <= a:\n            print(n)\n            continue\n        if k % (a+b) <= b:\n            print(n)\n            continue\n        print(-1)\n    return ''"
    },
    {
        "number": 4285,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 10**9 + 7\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count = 0\n    for i in range(n):\n        if s[i] == '?':\n            for j in range(3):\n                new_s = s[:i] + ['a', 'b', 'c'][j] + s[i+1:]\n                count += new_s.count('abc')\n    return str(count % MOD)"
    },
    {
        "number": 4286,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    special_offers = []\n    for i in range(m):\n        x, y, w = map(int, stdin.readline().split())\n        special_offers.append((x-1, y-1, w))\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            if (i, j) in special_offers or (j, i) in special_offers:\n                continue\n            graph[i].append(j)\n            graph[j].append(i)\n    visited = [False] * n\n    queue = [0]\n    coins = 0\n    while queue:\n        node = queue.pop(0)\n        if visited[node]:\n            continue\n        visited[node] = True\n        coins += a[node]\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                queue.append(neighbor)\n    return coins"
    },
    {
        "number": 4287,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    rain = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        rain.append((l, r))\n    umbrellas = []\n    for i in range(m):\n        x, p = map(int, stdin.split())\n        umbrellas.append((x, p))\n    umbrellas.sort()\n    fatigue = 0\n    for i in range(len(umbrellas)):\n        x, p = umbrellas[i]\n        if x > a:\n            break\n        if i == len(umbrellas) - 1 or umbrellas[i+1][0] > x + 1:\n            fatigue += p\n    if fatigue == 0:\n        return \"-1\"\n    else:\n        return str(fatigue)"
    },
    {
        "number": 4288,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == C:\n        if A!= B:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif B == C:\n        if B!= A:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif A == B:\n        if A!= C:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\""
    },
    {
        "number": 4289,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, T, A = map(int, stdin.readline().split())\n    H = list(map(int, stdin.readline().split()))\n\n    # Calculate average temperature for each place\n    T_avg = [T - h * 0.006 for h in H]\n\n    # Find the place with the closest average temperature to A\n    min_diff = float('inf')\n    min_idx = -1\n    for i in range(N):\n        diff = abs(T_avg[i] - A)\n        if diff < min_diff:\n            min_diff = diff\n            min_idx = i\n\n    # Return the index of the place where the palace should be built\n    return str(min_idx)"
    },
    {
        "number": 4290,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str((n+m)//2)"
    },
    {
        "number": 4291,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N, Q = map(int, stdin.readline().split())\n    S = stdin.readline().strip()\n    queries = []\n    for _ in range(Q):\n        l, r = map(int, stdin.readline().split())\n        queries.append((l, r))\n\n    # count AC occurrences in substrings\n    count = 0\n    for l, r in queries:\n        sub = S[l-1:r]\n        count += sub.count('AC')\n\n    # print results\n    return '\\n'.join(map(str, count))"
    },
    {
        "number": 4292,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.readline().split())\n    prices = list(map(int, stdin.readline().split()))\n\n    # Sort prices in ascending order\n    prices.sort()\n\n    # Calculate minimum total price\n    total_price = 0\n    for i in range(K):\n        total_price += prices[i]\n\n    return str(total_price)"
    },
    {
        "number": 4293,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    P, Q, R = map(int, stdin.split())\n\n    # Calculate minimum possible sum of flight times\n    min_sum = min(P + Q + R, P + R + Q, Q + P + R, Q + R + P, R + P + Q, R + Q + P)\n\n    # Return minimum possible sum of flight times\n    return str(min_sum)"
    },
    {
        "number": 4294,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    if x < a:\n        return \"0\"\n    else:\n        return \"10\""
    },
    {
        "number": 4295,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    while n!= abs(n - k):\n        n = abs(n - k)\n        count += 1\n    return str(count)"
    },
    {
        "number": 4296,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    if A_1+A_2+A_3 >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4297,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 6\n    while True:\n        if i % 2 == 0 and i % n == 0:\n            return str(i)\n        i += 1"
    },
    {
        "number": 4298,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, D = map(int, stdin.split())\n\n    # Calculate minimum number of inspectors\n    min_inspectors = N // 2 + 1\n\n    # Check if we can deploy more inspectors\n    if N % 2 == 0:\n        min_inspectors += 1\n\n    # Check if we need to deploy more inspectors\n    if D > 1:\n        min_inspectors += D - 1\n\n    return str(min_inspectors)"
    },
    {
        "number": 4299,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ones_digit = n % 10\n    if ones_digit == 2 or ones_digit == 4 or ones_digit == 5 or ones_digit == 7 or ones_digit == 9:\n        return \"hon\"\n    elif ones_digit == 0 or ones_digit == 1 or ones_digit == 6 or ones_digit == 8:\n        return \"pon\"\n    else:\n        return \"bon\""
    },
    {
        "number": 4300,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    d = list(map(int, stdin.readline().strip().split()))\n\n    # Compute health points restored from eating two takoyaki\n    health_points = [d[i] * d[j] for i in range(N) for j in range(i+1, N)]\n\n    # Compute sum of health points\n    return sum(health_points)"
    },
    {
        "number": 4301,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    result = []\n    for i in range(n):\n        max_val = float('-inf')\n        for j in range(n):\n            if i!= j:\n                max_val = max(max_val, a[j])\n        result.append(max_val)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4302,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    coins = A + B\n    while True:\n        if A == 0 and B == 0:\n            break\n        if A >= B:\n            coins += A\n            A -= 1\n        else:\n            coins += B\n            B -= 1\n    return str(coins)"
    },
    {
        "number": 4303,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n\n    # Sort candles by their position\n    x.sort()\n\n    # Initialize variables\n    left = 0\n    right = x[-1]\n    ans = 0\n\n    # Move from left to right and light candles\n    while left <= right:\n        mid = (left + right) // 2\n        count = 0\n        for i in range(N):\n            if x[i] <= mid:\n                count += 1\n        if count >= K:\n            ans = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return str(ans)"
    },
    {
        "number": 4304,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    snow_cover = b - a\n    return str(snow_cover)"
    },
    {
        "number": 4305,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, a = map(int, stdin.split())\n    count = 0\n    while h > 0:\n        h -= a\n        count += 1\n    return str(count)"
    },
    {
        "number": 4306,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    if A <= C <= B or C <= A <= D:\n        return str(min(B, D) - max(A, C))\n    else:\n        return str(min(B, D) - max(A, C) + 1)"
    },
    {
        "number": 4307,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            divisors = 0\n            for j in range(1, i+1):\n                if i % j == 0:\n                    divisors += 1\n            if divisors == 8:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4308,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    crackers = list(range(1, n+1))\n    crackers_per_user = [0] * k\n    for i in range(n):\n        crackers_per_user[i % k] += crackers[i]\n    max_crackers = max(crackers_per_user)\n    min_crackers = min(crackers_per_user)\n    return str(abs(max_crackers - min_crackers))"
    },
    {
        "number": 4309,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 0:\n        return str(n)\n    else:\n        return str(n + 10 - n % 10)"
    },
    {
        "number": 4310,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    A.sort()\n    cost = 0\n    for i in range(1, len(A)):\n        cost += abs(A[i] - A[i-1])\n    return str(cost)"
    },
    {
        "number": 4311,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin.strip())\n    a = [s]\n    i = 1\n    while True:\n        if i == 1:\n            a.append(s)\n        else:\n            if a[i-1] % 2 == 0:\n                a.append(a[i-1] // 2)\n            else:\n                a.append(3*a[i-1] + 1)\n        if a[i] == a[i-1]:\n            break\n        i += 1\n    return str(i)"
    },
    {
        "number": 4312,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    takahashi_health = A\n    aoki_health = C\n    while takahashi_health > 0 and aoki_health > 0:\n        if takahashi_health > aoki_health:\n            aoki_health -= B\n        else:\n            takahashi_health -= D\n    if takahashi_health <= 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4313,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    V = list(map(int, stdin.readline().strip().split()))\n    C = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_value = 0\n    for i in range(N):\n        # Calculate the maximum value that can be obtained\n        max_value += V[i] - C[i]\n\n    return str(max_value)"
    },
    {
        "number": 4314,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    H, W = map(int, stdin.readline().split())\n    a = [list(stdin.readline().strip()) for _ in range(H)]\n\n    # compress grid\n    for i in range(H):\n        if all(c == '.' for c in a[i]):\n            a = a[:i] + a[i+1:]\n            H -= 1\n            break\n    for j in range(W):\n        if all(a[i][j] == '.' for i in range(H)):\n            for i in range(H):\n                a[i] = a[i][:j] + a[i][j+1:]\n            W -= 1\n            break\n\n    # print compressed grid\n    return '\\n'.join(''.join(row) for row in a)"
    },
    {
        "number": 4315,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    circumference = 2 * 3.141592653589793 * R\n    return str(circumference)"
    },
    {
        "number": 4316,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(set(s)) == 2 and s.count(s[0]) == 2 and s.count(s[1]) == 2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4317,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(max(A + B, A - B, A * B))"
    },
    {
        "number": 4318,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    mountains = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    count = 0\n    ocean_height = mountains[0]\n\n    # Iterate through mountains\n    for i in range(1, N):\n        # Check if ocean can be seen from this inn\n        if mountains[i] >= ocean_height:\n            count += 1\n            ocean_height = mountains[i]\n\n    # Return result\n    return str(count)"
    },
    {
        "number": 4319,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    seq = list(map(int, stdin.split()[1:]))\n    stairways = []\n    steps = []\n    i = 0\n    while i < n:\n        if i == 0 or seq[i]!= seq[i-1]:\n            stairways.append(seq[i])\n            steps.append(1)\n            i += 1\n        else:\n            steps[-1] += 1\n            i += 1\n    t = len(stairways)\n    print(t)\n    print(*steps)\n    return \"\""
    },
    {
        "number": 4320,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        k = 1\n        while True:\n            x = (n - (2**(k-1) - 1)) // (2**k - 1)\n            if x >= 1:\n                break\n            k += 1\n        print(x)\n    return \"\""
    },
    {
        "number": 4321,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    while k > 0:\n        if n % 10!= 0:\n            n -= 1\n        else:\n            n //= 10\n        k -= 1\n    return n"
    },
    {
        "number": 4322,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    k = 1\n    res = [a[0]]\n    for i in range(1, n):\n        if abs(a[i] - res[-1]) <= 1:\n            res.append(a[i])\n        else:\n            k += 1\n            res.append(a[i])\n    print(k)\n    print(*res)"
    },
    {
        "number": 4323,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    songs = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        songs.append((a, b))\n    songs.sort(key=lambda x: x[1])\n    total_size = sum(a for a, b in songs)\n    if total_size > m:\n        return \"-1\"\n    i = 0\n    while i < n and songs[i][1] <= m:\n        m -= songs[i][1]\n        i += 1\n    return i"
    },
    {
        "number": 4324,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, a, b = map(int, stdin.readline().strip().split())\n        if a == 1:\n            s = 'a' * n\n            print(s)\n            continue\n        if b == 1:\n            s = 'a' * n\n            print(s)\n            continue\n        if a == n:\n            s = 'a' * n\n            print(s)\n            continue\n        if b == 26:\n            s = 'abcdefghijklmnopqrstuvwxyz' * (n // 26)\n            if n % 26!= 0:\n                s += 'abcdefghijklmnopqrstuvwxyz'[:n % 26]\n            print(s)\n            continue\n        if b == 25:\n            s = 'abcdefghijklmnopqrstuvwxy' * (n // 26)\n            if n % 26!= 0:\n                s += 'abcdefghijklmnopqrstuvwxy'[:n % 26]\n            print(s)\n            continue\n        if b == 24:\n            s = 'abcdefghijklmnopqrstuvw' * (n // 26)\n            if n % 26!= 0:\n                s += 'abcdefghijklmnopqrstuvw'[:n % 26]\n            print(s)\n            continue\n        if b == 23:\n            s = 'abcdefghijklmnopqrstu' * (n // 26)\n            if n % 26!= 0:\n                s += 'abcdefghijklmnopqrstu'[:n % 26]\n            print(s)\n            continue\n        if b == 22:\n            s = 'abcdefghijklmnopqrst' * (n // 26)\n            if n % 26!= 0:\n                s += 'abcdefghijklmnopqrst'[:n % 26]\n            print(s)\n            continue\n        if b == 21:\n            s = 'abcdefghijklmnopqrs' * (n // 26)\n            if n % 26!= 0:\n                s += 'abcdefghijklmnopqrs'[:n % 26]\n            print(s)\n            continue\n        if b == 20:\n            s = 'abcdefghijklmnopqr' * (n // 26)\n            if n % 26!= 0:\n                s += 'abcdefghijklmnopqr'[:n % 26]\n            print(s)\n            continue\n        if b == 19:\n            s = 'abcdefghijklmnopq' * (n // 26)\n            if n % 26!= 0:\n                s += 'abcdefghijklmnopq'[:n % 26]\n            print(s)\n            continue\n        if b == 18:\n            s = 'abcdefghijklmnop' * (n // 26)\n            if n % 26!= 0:\n                s += 'abcdefghijklmnop'[:n % 26]\n            print(s)\n            continue\n        if b == 17:\n            s = 'abcdefghijklmno' * (n // 26)\n            if n % 26!= 0:\n                s += 'abcdefghijklmno'[:n % 26]\n            print(s)\n            continue\n        if b == 16:\n            s = 'abcdefghijklmn' * (n // 26)\n            if n % 26!= 0:\n                s += 'abcdefghijklmn'[:n % 26]\n            print(s)\n            continue\n        if b == 15:\n            s = 'abcdefghijklm' * (n // 26)\n            if n % 26!= 0:\n                s += 'abcdefghijklm'[:n % 26]\n            print(s)\n            continue\n        if b == 14:\n            s = 'abcdefghijkl' * (n // 26)\n            if n % 26!= 0:\n                s += 'abcdefghijkl'[:n % 26]\n            print(s)\n            continue\n        if b == 13:\n            s = 'abcdefghijk' * (n // 26)\n            if n % 26!= 0:\n                s += 'abcdefghijk'[:n % 26]\n            print(s)\n            continue\n        if b == 12:\n            s = 'abcdefghij' * (n // 26)\n            if n % 26!= 0:\n                s += 'abcdefghij'[:n % 26]\n            print(s)\n            continue\n        if b == 11:\n            s = 'abcdefghi' * (n // 26)\n            if n % 26!= 0:\n                s += 'abcdefghi'[:n % 26]\n            print"
    },
    {
        "number": 4325,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = map(int, stdin.split())\n    return str(max(n // x, 1) * t)"
    },
    {
        "number": 4326,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    groups = 0\n    students = n\n    while students >= 3:\n        groups += 1\n        students -= 3\n    return str(groups)"
    },
    {
        "number": 4327,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    if A == 0:\n        return str(0)\n    if P == 0:\n        return str(0)\n    if A == 1:\n        return str(P)\n    if P == 1:\n        return str(A)\n    if A == 2:\n        return str(P)\n    if P == 2:\n        return str(A)\n    if A == 3:\n        return str(P)\n    if P == 3:\n        return str(A)\n    if A == 4:\n        return str(P)\n    if P == 4:\n        return str(A)\n    if A == 5:\n        return str(P)\n    if P == 5:\n        return str(A)\n    if A == 6:\n        return str(P)\n    if P == 6:\n        return str(A)\n    if A == 7:\n        return str(P)\n    if P == 7:\n        return str(A)\n    if A == 8:\n        return str(P)\n    if P == 8:\n        return str(A)\n    if A == 9:\n        return str(P)\n    if P == 9:\n        return str(A)\n    if A == 10:\n        return str(P)\n    if P == 10:\n        return str(A)\n    if A == 11:\n        return str(P)\n    if P == 11:\n        return str(A)\n    if A == 12:\n        return str(P)\n    if P == 12:\n        return str(A)\n    if A == 13:\n        return str(P)\n    if P == 13:\n        return str(A)\n    if A == 14:\n        return str(P)\n    if P == 14:\n        return str(A)\n    if A == 15:\n        return str(P)\n    if P == 15:\n        return str(A)\n    if A == 16:\n        return str(P)\n    if P == 16:\n        return str(A)\n    if A == 17:\n        return str(P)\n    if P == 17:\n        return str(A)\n    if A == 18:\n        return str(P)\n    if P == 18:\n        return str(A)\n    if A == 19:\n        return str(P)\n    if P == 19:\n        return str(A)\n    if A == 20:\n        return str(P)\n    if P == 20:\n        return str(A)\n    if A == 21:\n        return str(P)\n    if P == 21:\n        return str(A)\n    if A == 22:\n        return str(P)\n    if P == 22:\n        return str(A)\n    if A == 23:\n        return str(P)\n    if P == 23:\n        return str(A)\n    if A == 24:\n        return str(P)\n    if P == 24:\n        return str(A)\n    if A == 25:\n        return str(P)\n    if P == 25:\n        return str(A)\n    if A == 26:\n        return str(P)\n    if P == 26:\n        return str(A)\n    if A == 27:\n        return str(P)\n    if P == 27:\n        return str(A)\n    if A == 28:\n        return str(P)\n    if P == 28:\n        return str(A)\n    if A == 29:\n        return str(P)\n    if P == 29:\n        return str(A)\n    if A == 30:\n        return str(P)\n    if P == 30:\n        return str(A)\n    if A == 31:\n        return str(P)\n    if P == 31:\n        return str(A)\n    if A == 32:\n        return str(P)\n    if P == 32:\n        return str(A)\n    if A == 33:\n        return str(P)\n    if P == 33:\n        return str(A)\n    if A == 34:\n        return str(P)\n    if P == 34:\n        return str(A)\n    if A == 35:\n        return str(P)\n    if P == 35:\n        return str(A)\n    if A == 36:\n        return str(P)\n    if P == 36:\n       "
    },
    {
        "number": 4328,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if B % A == 0:\n        return str(A + B)\n    else:\n        return str(B - A)"
    },
    {
        "number": 4329,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if t[:-1] == s:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4330,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for k in range(max(A, B), min(A, B) + 1):\n        if abs(A - k) == abs(B - k):\n            return str(k)\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4331,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 7:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = sum(int(digit) for digit in str(n))\n    if s % n == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4333,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3 = (x1 + x2) // 2\n    y3 = (y1 + y2) // 2\n    x4 = (x1 + x3) // 2\n    y4 = (y1 + y3) // 2\n    return f\"{x3} {y3} {x4} {y4}\""
    },
    {
        "number": 4334,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    a, b = map(int, stdin.split())\n    u = stdin.split()[-1]\n    if s == u:\n        return f\"{a} {b}\"\n    elif t == u:\n        return f\"{a} {b}\"\n    else:\n        return f\"{a+1} {b+1}\""
    },
    {
        "number": 4335,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = s[:n//2]\n    if s == t*2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4336,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n    max_area = 0\n    for i in range(4):\n        if i == 0:\n            area = (x+1)*(y+1)\n        elif i == 1:\n            area = (W-x)*(y+1)\n        elif i == 2:\n            area = (W-x)*(H-y)\n        else:\n            area = (x+1)*(H-y)\n        if area > max_area:\n            max_area = area\n    if max_area == (W+1)*(H+1):\n        return f\"{max_area:.9f} 1\"\n    else:\n        return f\"{max_area:.9f} 0\""
    },
    {
        "number": 4337,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    colors = stdin.readline().strip().split()\n\n    # Check number of colors\n    if colors.count('P') == 1 and colors.count('W') == 1 and colors.count('G') == 1:\n        return 'Three'\n    elif colors.count('P') == 1 and colors.count('W') == 1 and colors.count('G') == 1 and colors.count('Y') == 1:\n        return 'Four'\n    else:\n        return 'Invalid input'"
    },
    {
        "number": 4338,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = a[i]\n    for i in range(1000000000):\n        dp_new = [0] * n\n        for j in range(n):\n            if dp[j] == 0:\n                dp_new[j] = 0\n            else:\n                dp_new[j] = dp[j] - x if dp[j] - x > 0 else 0\n                dp_new[j] = max(dp_new[j], dp[j] + y)\n        dp = dp_new\n    return str(dp.count(0))"
    },
    {
        "number": 4339,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4340,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    for i in range(1, n, 2):\n        if a[i] == 1:\n            a[i] = 2\n        elif a[i] == 2:\n            a[i] = 1\n        elif a[i] == 3:\n            a[i] = 4\n        elif a[i] == 4:\n            a[i] = 3\n        elif a[i] == 5:\n            a[i] = 6\n        elif a[i] == 6:\n            a[i] = 5\n        elif a[i] == 7:\n            a[i] = 8\n        elif a[i] == 8:\n            a[i] = 7\n        elif a[i] == 9:\n            a[i] = 10\n        elif a[i] == 10:\n            a[i] = 9\n    for i in range(0, n, 2):\n        if a[i] == 1:\n            a[i] = 2\n        elif a[i] == 2:\n            a[i] = 1\n        elif a[i] == 3:\n            a[i] = 4\n        elif a[i] == 4:\n            a[i] = 3\n        elif a[i] == 5:\n            a[i] = 6\n        elif a[i] == 6:\n            a[i] = 5\n        elif a[i] == 7:\n            a[i] = 8\n        elif a[i] == 8:\n            a[i] = 7\n        elif a[i] == 9:\n            a[i] = 10\n        elif a[i] == 10:\n            a[i] = 9\n    return''.join(map(str, a))"
    },
    {
        "number": 4341,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    graph = [[] for _ in range(n+1)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = [False] * (n+1)\n    count = 0\n    for i in range(1, n+1):\n        if not visited[i]:\n            stack = [i]\n            visited[i] = True\n            while stack:\n                u = stack.pop()\n                for v in graph[u]:\n                    if not visited[v]:\n                        stack.append(v)\n                        visited[v] = True\n            if len(stack) > 1:\n                count += 1\n    return count"
    },
    {
        "number": 4342,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    colors = list(map(int, stdin.readline().strip().split()))\n    edges = []\n    for i in range(n - 1):\n        v, u = map(int, stdin.readline().strip().split())\n        edges.append((v, u))\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if colors[i]!= colors[j]:\n                count += 1\n    return count"
    },
    {
        "number": 4343,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = map(str, stdin.split())\n    k = int(k)\n    s = s.lower()\n    t = t.lower()\n    strings = []\n    for i in range(ord(s[0]), ord(t[0])+1):\n        for j in range(ord('a'), ord('a')+k):\n            for l in range(ord('a'), ord('a')+k):\n                if i!= ord(s[0]) or j!= ord('a') or l!= ord('a'):\n                    strings.append(chr(i)+chr(j)+chr(l))\n    strings.sort()\n    return strings[len(strings)//2]"
    },
    {
        "number": 4344,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if k > n:\n        return \"NO\"\n    for i in range(n-k+1):\n        if a[i] == a[i+k-1]:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4345,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    increasing = []\n    decreasing = []\n    for i in range(n):\n        if i == 0:\n            increasing.append(a[i])\n        elif a[i] > increasing[-1]:\n            increasing.append(a[i])\n        else:\n            decreasing.append(a[i])\n    if len(increasing) == 0 or len(decreasing) == 0:\n        return \"NO\\n\"\n    res = []\n    for i in range(n):\n        if a[i] in increasing:\n            res.append(0)\n        else:\n            res.append(1)\n    return \"YES\\n\" + \" \".join(map(str, res)) + \"\\n\""
    },
    {
        "number": 4346,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        L, v, l, r = map(int, stdin.readline().strip().split())\n        lanterns = set(range(l, r+1, v))\n        standing_train = set(range(l, r+1))\n        for j in range(L):\n            if j in standing_train:\n                continue\n            if j in lanterns:\n                lanterns.remove(j)\n        print(len(lanterns))"
    },
    {
        "number": 4347,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return \"0\"\n    else:\n        return str(math.comb(n, n//2))"
    },
    {
        "number": 4348,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    for i in range(k):\n        if 'a' in s:\n            s = s.replace('a', '', 1)\n        elif 'b' in s:\n            s = s.replace('b', '', 1)\n        elif 'c' in s:\n            s = s.replace('c', '', 1)\n        elif 'd' in s:\n            s = s.replace('d', '', 1)\n        elif 'e' in s:\n            s = s.replace('e', '', 1)\n        elif 'f' in s:\n            s = s.replace('f', '', 1)\n        elif 'g' in s:\n            s = s.replace('g', '', 1)\n        elif 'h' in s:\n            s = s.replace('h', '', 1)\n        elif 'i' in s:\n            s = s.replace('i', '', 1)\n        elif 'j' in s:\n            s = s.replace('j', '', 1)\n        elif 'k' in s:\n            s = s.replace('k', '', 1)\n        elif 'l' in s:\n            s = s.replace('l', '', 1)\n        elif'm' in s:\n            s = s.replace('m', '', 1)\n        elif 'n' in s:\n            s = s.replace('n', '', 1)\n        elif 'o' in s:\n            s = s.replace('o', '', 1)\n        elif 'p' in s:\n            s = s.replace('p', '', 1)\n        elif 'q' in s:\n            s = s.replace('q', '', 1)\n        elif 'r' in s:\n            s = s.replace('r', '', 1)\n        elif's' in s:\n            s = s.replace('s', '', 1)\n        elif 't' in s:\n            s = s.replace('t', '', 1)\n        elif 'u' in s:\n            s = s.replace('u', '', 1)\n        elif 'v' in s:\n            s = s.replace('v', '', 1)\n        elif 'w' in s:\n            s = s.replace('w', '', 1)\n        elif 'x' in s:\n            s = s.replace('x', '', 1)\n        elif 'y' in s:\n            s = s.replace('y', '', 1)\n        elif 'z' in s:\n            s = s.replace('z', '', 1)\n        else:\n            break\n    if s == '':\n        return ''\n    else:\n        return s"
    },
    {
        "number": 4349,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    k = list(map(int, stdin.split()[2:2+n]))\n    special_offers = []\n    for i in range(m):\n        d, t = map(int, stdin.split()[2+n+i*2:2+n+(i+1)*2])\n        special_offers.append((d, t))\n    burles = 0\n    for i in range(n):\n        burles += k[i] * (2 + (i+1) % 2)\n    day = 0\n    while True:\n        day += 1\n        for offer in special_offers:\n            if offer[0] == day:\n                burles -= 1\n        if burles >= 1:\n            burles -= 1\n        else:\n            break\n    return day"
    },
    {
        "number": 4350,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(line.strip()) for line in stdin.split('\\n')[1:]]\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    if 0 <= i+dx < n and 0 <= j+dy < m and grid[i+dx][j+dy] == '*':\n                        stars.append((i, j, dx, dy))\n    if len(stars) > n*m:\n        return '-1'\n    else:\n        k = len(stars)\n        result = []\n        for i in range(k):\n            x, y, dx, dy = stars[i]\n            size = 1\n            while 0 <= x+dx < n and 0 <= y+dy < m and grid[x+dx][y+dy] == '*':\n                size += 1\n                x += dx\n                y += dy\n            result.append((x, y, size))\n        return f'{k}\\n' + '\\n'.join(f'{x} {y} {s}' for x, y, s in result)"
    },
    {
        "number": 4351,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if str(n) == str(n)[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4352,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return \"Alice\"\n    elif B > A:\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4353,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    s = s.replace(\",\", \" \")\n    return s"
    },
    {
        "number": 4354,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    students = []\n    for i in range(1, N+1):\n        a, b = map(int, lines[i].split())\n        students.append((a, b))\n    checkpoints = []\n    for j in range(M):\n        c, d = map(int, lines[N+j+1].split())\n        checkpoints.append((c, d))\n\n    # Calculate Manhattan distances\n    distances = []\n    for i in range(N):\n        distances.append([])\n        for j in range(M):\n            x1, y1 = students[i]\n            x2, y2 = checkpoints[j]\n            distances[i].append(abs(x1-x2) + abs(y1-y2))\n\n    # Find nearest checkpoint for each student\n    nearest_checkpoints = []\n    for i in range(N):\n        nearest_checkpoints.append(distances[i].index(min(distances[i])))\n\n    # Print output\n    output = ''\n    for i in range(N):\n        output += str(nearest_checkpoints[i]) + '\\n'\n    return output"
    },
    {
        "number": 4355,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = a + a**2 + a**3\n    return str(result)"
    },
    {
        "number": 4356,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    a = lines[1:1+n]\n    b = lines[1+n:]\n\n    # check if b is contained in a\n    for i in range(n-m+1):\n        for j in range(n-m+1):\n            if all(a[i+k][j+l] == b[k][l] for k in range(m) for l in range(m)):\n                return 'Yes'\n\n    return 'No'"
    },
    {
        "number": 4357,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    max_allowance = max(A*B, A*C, B*C)\n    return str(max_allowance)"
    },
    {
        "number": 4358,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    prices = [int(price) for price in stdin.readline().strip().split()]\n\n    # Calculate total\n    total = sum(prices)\n    if N >= 2 and prices[0] == max(prices):\n        total -= prices[0] // 2\n    return str(total)"
    },
    {
        "number": 4359,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    A, B, C, D, E = map(int, stdin.split())\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    # Calculate time to serve each dish\n    time_to_serve = [A, B, C, D, E]\n\n    "
    },
    {
        "number": 4360,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    inv_sum = 1\n    for i in range(n):\n        inv_sum *= 1/a[i]\n    return str(1/inv_sum)"
    },
    {
        "number": 4361,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.readline().split())\n    heights = list(map(int, stdin.readline().split()))\n\n    # Sort heights in descending order\n    heights.sort(reverse=True)\n\n    # Find the maximum and minimum heights of the decorated trees\n    max_height = 0\n    min_height = float('inf')\n    for i in range(K):\n        max_height += heights[i]\n        min_height = min(min_height, heights[i])\n\n    # Return the difference between the maximum and minimum heights\n    return str(max_height - min_height)"
    },
    {
        "number": 4362,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin.strip()\n    if alpha.isupper():\n        return \"A\"\n    else:\n        return \"a\""
    },
    {
        "number": 4363,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    count = 0\n    for x in range(K+1):\n        for y in range(K+1):\n            for z in range(K+1):\n                if x + y + z == S:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4364,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s)!= 4:\n        return \"NA\"\n    year = int(s[:2])\n    month = int(s[2:])\n    if month < 1 or month > 12:\n        return \"NA\"\n    if year < 100:\n        year += 2000\n    try:\n        datetime.datetime(year, month, 1)\n    except ValueError:\n        return \"NA\"\n    if year < 1000 or year > 9999:\n        return \"NA\"\n    if year < 100:\n        year += 2000\n    if month < 10:\n        month = \"0\" + str(month)\n    return f\"{year}{month}\" if year > 1900 else f\"{month}{year}\""
    },
    {
        "number": 4365,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    count = 0\n    for i in range(1, k+1, 2):\n        for j in range(1, k+1, 2):\n            if i!= j:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4366,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 0:\n        return str(B)\n    elif A == 23:\n        return str(B + 1)\n    else:\n        return str(A + B)"
    },
    {
        "number": 4367,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    if N >= 10:\n        return str(R)\n    else:\n        return str(R - 100 * (10 - N))"
    },
    {
        "number": 4368,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return len(str(n))"
    },
    {
        "number": 4369,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(n // 2 + n % 2)"
    },
    {
        "number": 4370,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1 or b == 16:\n        return \"Yay!\"\n    elif a == 16 or b == 1:\n        return \":((\"\n    else:\n        return \":((\""
    },
    {
        "number": 4371,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    x = int(s[2:5])\n    diff = abs(x - 753)\n    return str(diff)"
    },
    {
        "number": 4372,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    y = 0\n    z = 0\n    for i in range(n):\n        if a[i] > 0:\n            y += a[i] // a[0]\n            z += a[i] % a[0]\n    return f\"{y} {z}\""
    },
    {
        "number": 4373,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + 1\n        for j in range(i):\n            if a[j] >= i:\n                dp[i] = min(dp[i], dp[j])\n    return dp[n]"
    },
    {
        "number": 4374,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:m+1]]\n    adj = [[] for _ in range(n+1)]\n    for v, u in edges:\n        adj[v].append(u)\n        adj[u].append(v)\n    visited = [False] * (n+1)\n    diameter = 0\n    for i in range(1, n+1):\n        if not visited[i]:\n            visited[i] = True\n            stack = [(i, 0)]\n            while stack:\n                v, d = stack.pop()\n                diameter = max(diameter, d)\n                for u in adj[v]:\n                    if not visited[u]:\n                        visited[u] = True\n                        stack.append((u, d+1))\n    if m == n-1:\n        return str(diameter)\n    else:\n        added_edges = []\n        for i in range(1, n+1):\n            for j in range(i+1, n+1):\n                if not adj[i] or j not in adj[i]:\n                    added_edges.append((i, j))\n        return str(diameter) + '\\n' + '\\n'.join(map(str, added_edges))"
    },
    {
        "number": 4375,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    edges = []\n    for i in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        edges.append((u, v))\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for k in range(1, n):\n        for i in range(n):\n            for j in range(i + 1, n):\n                if k == 1:\n                    dp[i][j] = max(dp[i][j], dp[i][k - 1] + dp[k - 1][j])\n                else:\n                    dp[i][j] = max(dp[i][j], dp[i][k - 1] + dp[k - 1][j] - dp[i][k - 2] - dp[k - 2][j])\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if dp[i][j] > 0 and dp[i][j] + dp[j][i] > k:\n                ans += dp[i][j]\n    return str(ans)"
    },
    {
        "number": 4376,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    b = list(map(int, stdin.split()[2+n:]))\n    dormitory = 1\n    room = 1\n    for i in range(m):\n        if b[i] <= sum(a[:dormitory]):\n            dormitory = 1\n            room = b[i]\n        elif b[i] <= sum(a[:dormitory+1]):\n            dormitory += 1\n            room = b[i] - sum(a[:dormitory-1])\n        else:\n            dormitory = n\n            room = b[i] - sum(a[:dormitory-1])\n        print(dormitory, room)"
    },
    {
        "number": 4377,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3, x4 = map(int, stdin.split())\n    a = x1 + x2\n    b = x1 + x3\n    c = x1 + x4\n    d = x2 + x3\n    e = x2 + x4\n    f = x3 + x4\n    g = a + b\n    h = a + c\n    i = b + c\n    j = a + b + c\n    if a == b == c:\n        return f\"{a} {a} {a}\"\n    elif a == b:\n        return f\"{a} {a} {c}\"\n    elif a == c:\n        return f\"{a} {b} {c}\"\n    elif b == c:\n        return f\"{a} {b} {c}\"\n    elif a == b + c:\n        return f\"{a} {b} {c}\"\n    elif a + b == c:\n        return f\"{a} {b} {c}\"\n    elif a + c == b:\n        return f\"{a} {b} {c}\"\n    elif b + c == a:\n        return f\"{a} {b} {c}\"\n    elif a == b + c + d:\n        return f\"{a} {b} {c}\"\n    elif a + b == c + d:\n        return f\"{a} {b} {c}\"\n    elif a + c == b + d:\n        return f\"{a} {b} {c}\"\n    elif b + c == a + d:\n        return f\"{a} {b} {c}\"\n    elif a == b + c + e:\n        return f\"{a} {b} {c}\"\n    elif a + b == c + e:\n        return f\"{a} {b} {c}\"\n    elif a + c == b + e:\n        return f\"{a} {b} {c}\"\n    elif b + c == a + e:\n        return f\"{a} {b} {c}\"\n    elif a == b + c + f:\n        return f\"{a} {b} {c}\"\n    elif a + b == c + f:\n        return f\"{a} {b} {c}\"\n    elif a + c == b + f:\n        return f\"{a} {b} {c}\"\n    elif b + c == a + f:\n        return f\"{a} {b} {c}\"\n    elif a == b + c + g:\n        return f\"{a} {b} {c}\"\n    elif a + b == c + g:\n        return f\"{a} {b} {c}\"\n    elif a + c == b + g:\n        return f\"{a} {b} {c}\"\n    elif b + c == a + g:\n        return f\"{a} {b} {c}\"\n    elif a == b + c + h:\n        return f\"{a} {b} {c}\"\n    elif a + b == c + h:\n        return f\"{a} {b} {c}\"\n    elif a + c == b + h:\n        return f\"{a} {b} {c}\"\n    elif b + c == a + h:\n        return f\"{a} {b} {c}\"\n    elif a == b + c + i:\n        return f\"{a} {b} {c}\"\n    elif a + b == c + i:\n        return f\"{a} {b} {c}\"\n    elif a + c == b + i:\n        return f\"{a} {b} {c}\"\n    elif b + c == a + i:\n        return f\"{a} {b} {c}\"\n    elif a == b + c + j:\n        return f\"{a} {b} {c}\"\n    elif a + b == c + j:\n        return f\"{a} {b} {c}\"\n    elif a + c == b + j:\n        return f\"{a} {b} {c}\"\n    elif b + c == a + j:\n        return f\"{a} {b} {c}\"\n    else:\n        return f\"{a} {b} {c}\""
    },
    {
        "number": 4378,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = s\n    r = 0\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            t = t[:i+1] + s[i+1] + t[i+2:]\n            r += 1\n    print(r)\n    print(t)"
    },
    {
        "number": 4379,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    k = 1\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            k += 1\n        else:\n            k = 1\n        if k > n:\n            break\n    print(k)\n    for i in range(n-k+1):\n        if all(arr[j] < arr[j+1] for j in range(i, i+k-1)):\n            print(*range(i+1, i+k))\n            break"
    },
    {
        "number": 4380,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for C in range(1, 4):\n        if A * B * C % 2 == 1:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4381,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if y % 2 == 0:\n        return str(x)\n    else:\n        return str(x + y // 2)"
    },
    {
        "number": 4382,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 10 ** n\n    return str(count)"
    },
    {
        "number": 4383,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X >= 7:\n        return \"YES\"\n    elif X >= 5:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 4384,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n <= 999:\n        return f\"ABC{n:03d}\"\n    else:\n        return f\"ABD{n-999:03d}\""
    },
    {
        "number": 4385,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    if k < 0 or k > 123:\n        return \"Invalid input\"\n    if a > b or b > c or c > d or d > e:\n        return \"Invalid input\"\n    if a + k >= b or a + k >= c or a + k >= d or a + k >= e:\n        return \"Invalid input\"\n    if b + k >= c or b + k >= d or b + k >= e:\n        return \"Invalid input\"\n    if c + k >= d or c + k >= e:\n        return \"Invalid input\"\n    if d + k >= e:\n        return \"Invalid input\"\n    return \"Yay!\""
    },
    {
        "number": 4386,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, s = map(str, stdin.split())\n    a = int(a)\n    if a >= 3200:\n        return \"red\"\n    else:\n        return s"
    },
    {
        "number": 4387,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R < 1200:\n        return \"ABC\"\n    elif R < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\""
    },
    {
        "number": 4388,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = str(n)\n    n = n.replace('1', '9')\n    n = n.replace('9', '1')\n    return int(n)"
    },
    {
        "number": 4389,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin.strip()\n    a = \"\"\n    for i in range(len(b)):\n        if i == 0:\n            a += b[i]\n        else:\n            if b[i] == b[i-1]:\n                continue\n            else:\n                a += b[i]\n    return a"
    },
    {
        "number": 4390,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        count = 0\n        while a % b!= 0:\n            a += 1\n            count += 1\n        print(count)"
    },
    {
        "number": 4391,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    res = 0\n    for i in range(n - k + 1):\n        avg = sum(a[i:i+k]) / k\n        res = max(res, avg)\n    return str(res)"
    },
    {
        "number": 4392,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        p = list(map(int, stdin.readline().strip().split()))\n        a_copy = a.copy()\n        for j in range(m):\n            if p[j] == 0:\n                continue\n            if p[j] == n-1:\n                continue\n            if a[p[j]] > a[p[j]+1]:\n                a[p[j]], a[p[j]+1] = a[p[j]+1], a[p[j]]\n        if a == sorted(a_copy):\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4393,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = stdin.readline().strip()\n    s = \"\"\n    i = 0\n    while i < n:\n        if t[i] == 'b':\n            s += 'a'\n            i += 1\n        elif t[i] == 'a':\n            s += 'b'\n            i += 2\n        else:\n            s += t[i]\n            i += 1\n    return s"
    },
    {
        "number": 4394,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        u, v, w = map(int, stdin.split())\n        edges.append((u, v, w))\n    edges.sort(key=lambda x: x[2])\n    mst = []\n    for i in range(m):\n        u, v, w = edges[i]\n        if not any(u in edge and v in edge for edge in mst):\n            mst.append((u, v, w))\n            if len(mst) == n - 1:\n                break\n    if len(mst)!= n - 1:\n        return \"0\"\n    cost = sum(w for u, v, w in mst)\n    if cost!= k:\n        return \"0\"\n    for i in range(m):\n        u, v, w = edges[i]\n        if (u, v) not in mst and (v, u) not in mst:\n            mst.append((u, v, w + 1))\n            if len(mst) == n - 1:\n                break\n    if len(mst)!= n - 1:\n        return \"0\"\n    cost = sum(w for u, v, w in mst)\n    if cost!= k:\n        return \"0\"\n    return \"1\""
    },
    {
        "number": 4395,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = s\n    count = 0\n    for i in range(n):\n        if s[i] == 'R':\n            if s[(i+1)%n] == 'G' and s[(i+2)%n] == 'B':\n                t = t[:i] + 'G' + t[i+1:]\n                count += 1\n            elif s[(i-1)%n] == 'G' and s[(i+1)%n] == 'B':\n                t = t[:i-1] + 'G' + t[i:]\n                count += 1\n            elif s[(i-2)%n] == 'G' and s[(i-1)%n] == 'B':\n                t = t[:i-2] + 'G' + t[i-1:]\n                count += 1\n        elif s[i] == 'G':\n            if s[(i+1)%n] == 'R' and s[(i+2)%n] == 'B':\n                t = t[:i] + 'R' + t[i+1:]\n                count += 1\n            elif s[(i-1)%n] == 'R' and s[(i+1)%n] == 'B':\n                t = t[:i-1] + 'R' + t[i:]\n                count += 1\n            elif s[(i-2)%n] == 'R' and s[(i-1)%n] == 'B':\n                t = t[:i-2] + 'R' + t[i-1:]\n                count += 1\n        elif s[i] == 'B':\n            if s[(i+1)%n] == 'R' and s[(i+2)%n] == 'G':\n                t = t[:i] + 'R' + t[i+1:]\n                count += 1\n            elif s[(i-1)%n] == 'R' and s[(i+1)%n] == 'G':\n                t = t[:i-1] + 'R' + t[i:]\n                count += 1\n            elif s[(i-2)%n] == 'R' and s[(i-1)%n] == 'G':\n                t = t[:i-2] + 'R' + t[i-1:]\n                count += 1\n    print(count)\n    print(t)\n    return t"
    },
    {
        "number": 4396,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    gifts = []\n    for i in range(1, n+1):\n        x, u = lines[i].split()\n        x = float(x)\n        if u == 'JPY':\n            gifts.append(x)\n        elif u == 'BTC':\n            gifts.append(x * 380000.0)\n    return str(sum(gifts))"
    },
    {
        "number": 4397,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, i = map(int, stdin.split())\n    j = n - i + 1\n    return str(j)"
    },
    {
        "number": 4398,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s, t = stdin.readline().strip().split()\n    return ''.join([s[i] + t[i] for i in range(n)])"
    },
    {
        "number": 4399,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0] == s[1] or s[1] == s[2] or s[0] == s[2]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4400,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    max_consecutive_rainy_days = 0\n    current_consecutive_rainy_days = 0\n    for i in range(len(S)):\n        if S[i] == 'R':\n            current_consecutive_rainy_days += 1\n            max_consecutive_rainy_days = max(max_consecutive_rainy_days, current_consecutive_rainy_days)\n        else:\n            current_consecutive_rainy_days = 0\n    return str(max_consecutive_rainy_days)"
    },
    {
        "number": 4401,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    x, y, z = map(int, stdin.split())\n\n    # Swap contents of A and B\n    a, b = y, x\n\n    # Swap contents of A and C\n    a, c = z, a\n\n    # Print output\n    return f\"{a} {b} {c}\""
    },
    {
        "number": 4402,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A >= 13:\n        cost = B\n    elif A >= 6 and A <= 12:\n        cost = B // 2\n    else:\n        cost = 0\n    return str(cost)"
    },
    {
        "number": 4403,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    integer = 0\n    for symbol in stdin:\n        if symbol == \"+\":\n            integer += 1\n        else:\n            integer -= 1\n    return str(integer)"
    },
    {
        "number": 4404,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.strip()\n    year, month, day = map(int, date.split('/'))\n    if year > 2019 or (year == 2019 and month > 4) or (year == 2019 and month == 4 and day > 30):\n        return 'TBD'\n    else:\n        return 'Heisei'"
    },
    {
        "number": 4405,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    ans = 0\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n and a[j] == a[i]:\n            j += 1\n        if j - i == 1:\n            ans += 1\n        else:\n            ans += 2\n        i = j\n    return str(ans)"
    },
    {
        "number": 4406,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    ids = list(map(int, stdin.split()[2:]))\n    conversations = []\n    for i in range(n):\n        if not any(id == ids[i] for id in conversations):\n            if len(conversations) == k:\n                conversations.pop()\n            conversations.insert(0, ids[i])\n    return str(len(conversations)) + '\\n' +''.join(map(str, conversations))"
    },
    {
        "number": 4407,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.readline().split())\n    coins = list(map(int, stdin.readline().split()))\n    queries = list(map(int, stdin.readlines()))\n    dp = [float('inf')] * (1 << n)\n    dp[0] = 0\n    for i in range(n):\n        for j in range(1 << n):\n            if j & (1 << i):\n                dp[j] = min(dp[j], dp[j ^ (1 << i)] + coins[i])\n    ans = []\n    for b in queries:\n        if b == 0:\n            ans.append(0)\n        else:\n            for i in range(n):\n                if b & (1 << i):\n                    if dp[1 << i] == float('inf'):\n                        ans.append(-1)\n                        break\n                    else:\n                        b -= coins[i]\n            else:\n                ans.append(dp[b])\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 4408,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    cards = list(map(int, stdin.readline().split()))\n    favs = list(map(int, stdin.readline().split()))\n    joy = list(map(int, stdin.readline().split()))\n\n    # sort cards and favs by ascending order\n    cards.sort()\n    favs.sort()\n\n    # initialize variables\n    max_joy = 0\n    curr_joy = 0\n    curr_cards = [0] * n\n    curr_favs = [0] * n\n\n    # iterate over all possible card distributions\n    for i in range(k * n):\n        # distribute card i to the player with the smallest favorite number\n        j = bisect_left(favs, cards[i])\n        curr_cards[j] += 1\n        curr_favs[j] += cards[i]\n\n        # update curr_joy\n        t = curr_cards[j]\n        if t <= k:\n            curr_joy += joy[t - 1]\n\n        # update max_joy\n        if curr_joy > max_joy:\n            max_joy = curr_joy\n\n    return str(max_joy)"
    },
    {
        "number": 4409,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    k = 0\n    for i in range(n-1):\n        if abs(a[i] - a[i+1]) == 1:\n            if a[i] < a[i+1]:\n                a[i] += abs(a[i] - a[i+1])\n                k += 1\n            else:\n                a[i] -= abs(a[i] - a[i+1])\n                k += 1\n    for i in range(n-1):\n        if abs(a[i] - a[i+1]) == 1:\n            if a[i] < a[i+1]:\n                a[i] += abs(a[i] - a[i+1])\n                k += 1\n            else:\n                a[i] -= abs(a[i] - a[i+1])\n                k += 1\n    print(k)\n    for i in range(n-1):\n        if abs(a[i] - a[i+1]) == 1:\n            if a[i] < a[i+1]:\n                print(1, i+1, i+2)\n            else:\n                print(2, i+1, i+2)\n    return \"\""
    },
    {
        "number": 4410,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        count = 0\n        for j in range(n):\n            if s[j] == '0':\n                count += 1\n                if count > k:\n                    break\n        print(count)"
    },
    {
        "number": 4411,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split()[0:2])\n        segments.append((l, r))\n    segments.sort()\n    bad_points = set()\n    for i in range(n):\n        for j in range(segments[i][0], segments[i][1]+1):\n            bad_points.add(j)\n    for i in range(n):\n        for j in range(segments[i][0], segments[i][1]+1):\n            if j in bad_points:\n                bad_points.remove(j)\n    m = len(bad_points)\n    print(m)\n    if m == 0:\n        return \"\"\n    else:\n        return \" \".join(map(str, sorted(list(bad_points))))"
    },
    {
        "number": 4412,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        a.sort(reverse=True)\n        ans = 0\n        for j in range(n):\n            if j == 0:\n                ans = a[j]\n            elif j == 1:\n                ans = max(ans, a[j])\n            else:\n                if a[j] % a[j-1] == 0 and a[j] % a[j-2] == 0:\n                    ans = max(ans, a[j])\n                else:\n                    ans = max(ans, a[j] + ans)\n        print(ans)\n    return \"\""
    },
    {
        "number": 4413,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        teams = 1\n        for j in range(n):\n            for k in range(j+1, n):\n                if abs(a[j] - a[k]) == 1:\n                    teams += 1\n                    break\n        print(teams)\n    return \"\""
    },
    {
        "number": 4414,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        a, b, n, S = map(int, stdin.readline().strip().split())\n        if S % n == 0 and S // n <= a:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4415,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    inc = []\n    dec = []\n    for i in range(n):\n        if i == 0:\n            if a[i] > a[i+1]:\n                inc.append(a[i])\n                dec.append(a[i+1])\n            else:\n                inc.append(a[i+1])\n                dec.append(a[i])\n        elif i == n-1:\n            if a[i] > a[i-1]:\n                inc.append(a[i])\n                dec.append(a[i-1])\n            else:\n                inc.append(a[i-1])\n                dec.append(a[i])\n        else:\n            if a[i] > a[i-1] and a[i] > a[i+1]:\n                inc.append(a[i])\n            elif a[i] < a[i-1] and a[i] < a[i+1]:\n                dec.append(a[i])\n            else:\n                return \"NO\"\n    if len(inc) == 0:\n        inc = [0]\n    if len(dec) == 0:\n        dec = [0]\n    n_i = len(inc)\n    n_d = len(dec)\n    if n_i + n_d!= n:\n        return \"NO\"\n    if sorted(inc + dec)!= sorted(a):\n        return \"NO\"\n    return \"YES\\n{}\\n{}\\n{}\\n{}\\n{}\".format(n_i, \" \".join(map(str, inc)), n_d, \" \".join(map(str, dec)), \" \".join(map(str, a)))\n\nprint(solution(\"7 2 7 3 3 1 4\"))\nprint(solution(\"5 4 3 1 5 3\"))\nprint(solution(\"5 1 1 2 1 2\"))\nprint(solution(\"5 0 1 2 3 4\"))\nprint(solution(\"5 4 3 2 1 0\"))"
    },
    {
        "number": 4416,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = []\n    for i in range(n):\n        t, a, b = map(int, stdin.split())\n        books.append((t, a, b))\n    books.sort(key=lambda x: x[0])\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j >= books[i-1][1] and j >= books[i-1][2]:\n                dp[i][j] = dp[i-1][j] + books[i-1][0]\n            else:\n                dp[i][j] = dp[i-1][j]\n    if dp[n][k] == 0:\n        return \"-1\"\n    else:\n        return str(dp[n][k])"
    },
    {
        "number": 4417,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        a.sort()\n        if a[-1] + k < a[0]:\n            print(-1)\n            continue\n        for j in range(1, n):\n            if a[j] - a[j-1] > k:\n                print(a[j-1] + k)\n                break\n        else:\n            print(a[-1] + k)\n    return \"\""
    },
    {
        "number": 4418,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(n):\n        if a[i] == 4:\n            count += 1\n        elif a[i] == 8:\n            count += 1\n        elif a[i] == 15:\n            count += 1\n        elif a[i] == 16:\n            count += 1\n        elif a[i] == 23:\n            count += 1\n        elif a[i] == 42:\n            count += 1\n    if count % 6 == 0:\n        return \"0\"\n    else:\n        return str(count % 6)"
    },
    {
        "number": 4419,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        if a == b:\n            print(0)\n            continue\n        moves = 0\n        while a!= b:\n            if a < b:\n                a += 10\n                moves += 1\n            else:\n                a -= 1\n                moves += 1\n        print(moves)"
    },
    {
        "number": 4420,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        x, y, n = map(int, stdin.readline().strip().split())\n        k = (n - y) // x\n        print(k)\n    return \"\""
    },
    {
        "number": 4421,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    d = list(map(int, stdin.split()[2:]))\n    dp = [0] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            if (d[i] + d[j]) % k == 0:\n                dp[j] = max(dp[j], dp[i]+1)\n    return max(dp)"
    },
    {
        "number": 4422,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.readline().split())\n    S = stdin.readline().strip()\n\n    # Lowercase the K-th character\n    S = list(S)\n    S[K-1] = S[K-1].lower()\n    S = ''.join(S)\n\n    # Print output\n    print(S)\n\n    return S"
    },
    {
        "number": 4423,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    restaurants = []\n    for i in range(n):\n        city, score = stdin.readline().strip().split()\n        restaurants.append((city, int(score)))\n    restaurants.sort(key=lambda x: (x[0], -x[1]))\n    for i, (city, score) in enumerate(restaurants):\n        print(i+1)\n    return \"\""
    },
    {
        "number": 4424,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    if k * 500 >= x:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4425,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    prob = 0\n    for i in range(1, N+1):\n        if i <= K-1:\n            prob += (1/3) * (1/2)**i\n        else:\n            prob += (1/3) * (1/2)**K\n    if prob >= 1:\n        return \"1.0000000000\"\n    else:\n        return \"{:.9f}\".format(prob)"
    },
    {
        "number": 4426,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    day = stdin.strip()\n    if day == \"SUN\":\n        return \"1\"\n    elif day == \"SAT\":\n        return \"0\"\n    elif day == \"FRI\":\n        return \"5\"\n    elif day == \"THU\":\n        return \"4\"\n    elif day == \"WED\":\n        return \"3\"\n    elif day == \"TUE\":\n        return \"2\"\n    elif day == \"MON\":\n        return \"1\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4427,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.split())\n    x_2001 = r * x_2000 - D\n    x_2002 = r * x_2001 - D\n    x_2003 = r * x_2002 - D\n    x_2004 = r * x_2003 - D\n    x_2005 = r * x_2004 - D\n    x_2006 = r * x_2005 - D\n    x_2007 = r * x_2006 - D\n    x_2008 = r * x_2007 - D\n    x_2009 = r * x_2008 - D\n    x_2010 = r * x_2009 - D\n    return '\\n'.join(map(str, [x_2001, x_2002, x_2003, x_2004, x_2005, x_2006, x_2007, x_2008, x_2009, x_2010]))"
    },
    {
        "number": 4428,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = list(map(int, stdin.split()[1:]))\n    d.sort()\n    s = sum(d)\n    if s % 3!= 0:\n        return str(0)\n    a = s // 3\n    b = c = 0\n    for i in range(n):\n        if d[i] <= a:\n            a -= d[i]\n            b += d[i]\n        elif d[i] <= a + b:\n            b -= d[i]\n            c += d[i]\n        else:\n            c -= d[i]\n    return str(a + b)"
    },
    {
        "number": 4429,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        x, y, z = map(int, stdin.readline().strip().split())\n        if x == max(x, y, z) and y == max(x, y, z) and z == max(x, y, z):\n            print(\"YES\")\n            print(x, y, z)\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 4430,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n    a.sort()\n    i = 0\n    j = 0\n    count = 0\n    while i < n:\n        if j == m:\n            return str(count)\n        if a[i] <= k:\n            k -= a[i]\n            count += 1\n            i += 1\n        else:\n            j += 1\n            k = k - a[i] + k // m * k\n            count += k // m\n            k = k % m\n    return str(count)"
    },
    {
        "number": 4431,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    s = stdin.split()[2]\n    c = stdin.split()[3:]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if all(char in c for char in substring):\n                count += 1\n    return count"
    },
    {
        "number": 4432,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        max_sum = float('-inf')\n        for j in range(n):\n            if j == 0 or a[j] * a[j-1] < 0:\n                sum_ = a[j]\n                for k in range(j+1, n):\n                    if a[k] * a[k-1] < 0:\n                        sum_ += a[k]\n                    else:\n                        break\n                if sum_ > max_sum:\n                    max_sum = sum_\n        print(max_sum)"
    },
    {
        "number": 4433,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        v, u = map(int, stdin.split())\n        edges.append((v, u))\n    edges.sort()\n    parent = [-1] * n\n    rank = [0] * n\n    def find(x):\n        if parent[x] == -1:\n            return x\n        parent[x] = find(parent[x])\n        return parent[x]\n    def union(x, y):\n        x = find(x)\n        y = find(y)\n        if x == y:\n            return\n        if rank[x] < rank[y]:\n            parent[x] = y\n        else:\n            parent[y] = x\n            if rank[x] == rank[y]:\n                rank[x] += 1\n    ans = []\n    for v, u in edges:\n        if find(v)!= find(u):\n            union(v, u)\n            ans.append((v, u))\n    ans.sort()\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 4434,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        if n == 1:\n            print(0)\n        else:\n            print(4*n**2 - 6*n + 6)"
    },
    {
        "number": 4435,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    d = [-1] * n\n    d[0] = 0\n    for i in range(1, n):\n        if a[i] % 2 == a[i-1] % 2:\n            d[i] = d[i-1] + 1\n        else:\n            d[i] = d[i-1] + 2\n    return''.join(map(str, d))"
    },
    {
        "number": 4436,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        if n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n            print(\"NO\")\n        else:\n            for a in range(2, n):\n                for b in range(a+1, n):\n                    for c in range(b+1, n):\n                        if a*b*c == n:\n                            print(\"YES\")\n                            print(f\"{a} {b} {c}\")\n                            break\n                    else:\n                        continue\n                    break\n                else:\n                    continue\n                break\n            else:\n                print(\"NO\")\n    return \"\""
    },
    {
        "number": 4437,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count = 0\n    for i in range(1, n, 2):\n        if s[i] == 'a':\n            count += 1\n        else:\n            count -= 1\n    if count == 0:\n        return \"0\\n\" + s\n    else:\n        count = abs(count)\n        for i in range(1, n, 2):\n            if s[i] == 'a':\n                s = s[:i] + 'b' + s[i+1:]\n            else:\n                s = s[:i] + 'a' + s[i+1:]\n        return str(count) + \"\\n\" + s"
    },
    {
        "number": 4438,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        points.append((x, y))\n    points.sort(key=lambda x: max(x[0], x[1]))\n    visited = set()\n    level = 1\n    dist = 0\n    for p in points:\n        if max(p[0], p[1]) > level:\n            level += 1\n            dist = 0\n        if p not in visited:\n            visited.add(p)\n            dist += abs(p[0] - 0) + abs(p[1] - 0)\n            for q in points:\n                if q not in visited and max(q[0], q[1]) == level:\n                    visited.add(q)\n                    dist += abs(q[0] - p[0]) + abs(q[1] - p[1])\n    return str(dist)"
    },
    {
        "number": 4439,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return str(3 - A)\n    else:\n        return str(A)"
    },
    {
        "number": 4440,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = float(stdin)\n    max_volume = L / 3\n    return str(max_volume)"
    },
    {
        "number": 4441,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n == 1:\n        return \"Hello World\"\n    else:\n        a = int(stdin.readline().strip())\n        b = int(stdin.readline().strip())\n        return str(a + b)"
    },
    {
        "number": 4442,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s1 = a * b\n    s2 = b * a\n    return s1 if s1 < s2 else s2"
    },
    {
        "number": 4443,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.strip()\n    if c == 'z':\n        return 'a'\n    else:\n        return chr(ord(c) + 1)"
    },
    {
        "number": 4444,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return t + s"
    },
    {
        "number": 4445,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    even_sum = sum(filter(lambda x: x % 2 == 0, a))\n    odd_sum = sum(filter(lambda x: x % 2 == 1, a))\n    if even_sum == odd_sum:\n        return str(even_sum)\n    else:\n        return str(min(even_sum, odd_sum))"
    },
    {
        "number": 4446,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split()[0:4])\n    h = list(map(int, stdin.split()[4:]))\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            if i > 1 and j > 1:\n                dp[i][j] = max(dp[i][j], dp[i-2][j-2] + h[i-1])\n            if i > 1:\n                dp[i][j] = max(dp[i][j], dp[i-2][j] + h[i-1])\n            dp[i][j] = max(dp[i][j], dp[i-1][j-1] + h[i-1])\n    return dp[n][k]"
    },
    {
        "number": 4447,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = [0] * m\n    for i in a:\n        c[i % m] += 1\n    ans = 0\n    for i in range(m):\n        if c[i] < n // m:\n            ans += n // m - c[i]\n            c[i] = n // m\n    print(ans)\n    for i in range(m):\n        c[i] = 0\n    for i in range(n):\n        c[a[i] % m] += 1\n    for i in range(m):\n        if c[i] < n // m:\n            ans += n // m - c[i]\n            c[i] = n // m\n    return''.join(map(str, a))"
    },
    {
        "number": 4448,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    k = list(map(int, stdin.split()[2:2+n]))\n    special_offers = []\n    for i in range(m):\n        d, t = map(int, stdin.split()[2+n+i*2:2+n+(i+1)*2])\n        special_offers.append((d, t))\n    burles = 0\n    for i in range(n):\n        burles += k[i] * (2 + (i+1) % 2)\n    day = 0\n    while True:\n        day += 1\n        if day % 7 == 6:\n            burles += 1\n        for d, t in special_offers:\n            if day == d:\n                burles -= 2 if t == 0 else 1\n        if burles >= 1:\n            return day\n        burles -= 1"
    },
    {
        "number": 4449,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    for i in range(1, q+1):\n        n = int(lines[i*2-1])\n        sticks = list(map(int, lines[i*2].split()))\n        if n > len(sticks)//4:\n            print(\"NO\")\n        else:\n            sticks.sort()\n            area = sum(sticks[:4])\n            for j in range(1, n):\n                if area!= sum(sticks[j*4:j*4+4]):\n                    print(\"NO\")\n                    break\n            else:\n                print(\"YES\")\n    return \"\""
    },
    {
        "number": 4450,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        x, y, w = map(int, stdin.split())\n        graph[x].append((y, w))\n        graph[y].append((x, w))\n    dist = [float('inf')] * (n+1)\n    dist[1] = 0\n    visited = [False] * (n+1)\n    q = [(1, 0)]\n    while q:\n        u, d = q.pop(0)\n        if visited[u]:\n            continue\n        visited[u] = True\n        for v, w in graph[u]:\n            if d + w < dist[v]:\n                dist[v] = d + w\n                q.append((v, d+w))\n    dist = sorted(dist[2:])\n    return dist[k-1]"
    },
    {
        "number": 4451,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    res = float('inf')\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                team = [a[i], a[j], a[k]]\n                team.sort()\n                d = team[-1] - team[0]\n                if d < res:\n                    res = d\n                    ans = [1, 1, 1]\n                    ans[0] = i+1\n                    ans[1] = j+1-ans[0]\n                    ans[2] = k+1-ans[1]\n    return f\"{res} {ans[0]} {ans[1]} {ans[2]}\""
    },
    {
        "number": 4452,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i])\n        k = 0\n        while n > 0:\n            k += 1\n            n -= 10**(k-1)\n        print(k, end=' ')\n        for j in range(k):\n            print(10**(k-j-1), end=' ')\n        print()"
    },
    {
        "number": 4453,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        n = int(stdin.readline().strip())\n        p = list(map(int, stdin.readline().strip().split()))\n        dp = [0] * n\n        for i in range(n):\n            dp[p[i]-1] = i+1\n        for i in range(n):\n            dp[i] = min(dp[i], dp[p[i]-1]+1)\n        print(*dp)\n    return \"\""
    },
    {
        "number": 4454,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        n = int(stdin.readline().strip())\n        prices = list(map(int, stdin.readline().strip().split()))\n        min_price = min(prices)\n        total_price = sum(prices)\n        if total_price % n!= 0:\n            total_price += n - (total_price % n)\n        equal_price = total_price // n\n        if equal_price < min_price:\n            equal_price = min_price\n        print(equal_price)\n    return \"\""
    },
    {
        "number": 4455,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    skills = list(map(int, stdin.split()[2:]))\n    pairs = []\n    for i in range(k):\n        x, y = map(int, stdin.split()[2*i:2*(i+1)])\n        pairs.append((x-1, y-1))\n    mentors = [0] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            if skills[i] > skills[j]:\n                mentors[i] += 1\n                mentors[j] += 1\n    for x, y in pairs:\n        mentors[x] -= 1\n        mentors[y] -= 1\n    return''.join(map(str, mentors))"
    },
    {
        "number": 4456,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:2+n]))\n    q = list(map(int, stdin.split()[2+n:]))\n\n    # check if p and q are permutations\n    if sorted(p)!= list(range(1, n+1)) or sorted(q)!= list(range(1, n+1)):\n        return \"NO\"\n\n    # check if p and q satisfy the given properties\n    for i in range(n-1):\n        if p[i] > p[i+1] or q[i] > q[i+1]:\n            return \"NO\"\n\n    # generate all possible strings\n    strings = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                if i!= j and i!= k and j!= k:\n                    strings.append(chr(ord('a') + i-1) + chr(ord('a') + j-1) + chr(ord('a') + k-1))\n\n    # filter out strings that do not contain at least k distinct characters\n    strings = [s for s in strings if len(set(s)) >= k]\n\n    # filter out strings that do not suit the given permutations\n    strings = [s for s in strings if s[p.index(1)] <= s[p.index(2)] and s[q.index(1)] <= s[q.index(2)]]\n\n    # return the first suitable string or \"NO\" if there are none\n    return \"YES\\n\" + strings[0] if strings else \"NO\""
    },
    {
        "number": 4457,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    dp = [[0] * n for _ in range(1 << n)]\n    for i in range(n):\n        dp[1 << i][i] = a[i]\n    for mask in range(1 << n):\n        for i in range(n):\n            if not (mask >> i & 1):\n                continue\n            for j in range(n):\n                if i == j or (mask >> j & 1):\n                    continue\n                dp[mask][i] = min(dp[mask][i], dp[mask ^ (1 << j)][j] * a[i])\n    ans = sum(dp[-1])\n    order = []\n    for i in range(n):\n        for j in range(n):\n            if dp[-1][j] == dp[-1][i] + a[i] * (j - i):\n                order.append(j + 1)\n                break\n    return f\"{ans}\\n{' '.join(map(str, order))}\""
    },
    {
        "number": 4458,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(1, n):\n        for j in range(i):\n            if p[i] > p[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4459,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Count occurrences of each element\n    counts = {}\n    for x in a:\n        counts[x] = counts.get(x, 0) + 1\n\n    # Find minimum number of elements to remove\n    min_remove = 0\n    for x in counts:\n        if counts[x] > 1:\n            min_remove += counts[x] - 1\n\n    return str(min_remove)"
    },
    {
        "number": 4460,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    if x_1 == 0:\n        return str(1)\n    elif x_2 == 0:\n        return str(2)\n    elif x_3 == 0:\n        return str(3)\n    elif x_4 == 0:\n        return str(4)\n    elif x_5 == 0:\n        return str(5)\n    else:\n        return \"No variable assigned 0\""
    },
    {
        "number": 4461,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    if H == W:\n        return str(H)\n    if H > W:\n        H, W = W, H\n    if H % 3 == 0:\n        return str(H // 3)\n    if H % 3 == 1:\n        return str((H - 1) // 3)\n    if H % 3 == 2:\n        return str((H - 2) // 3)"
    },
    {
        "number": 4462,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Check if Snuke can achieve his objective\n    for i in range(N - 1):\n        if a[i] * a[i + 1] % 4!= 0:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4463,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    if s < t:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4464,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C % B == 0:\n        return \"YES\"\n    for i in range(A, B+1, A):\n        if (C+i) % B == 0:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4465,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    area = A * B - 2\n    return str(area)"
    },
    {
        "number": 4466,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    # Calculate the minimum number of intervals needed\n    intervals = (X - Y) // (Y + 2 * Z)\n    # Calculate the number of people that can fit in the intervals\n    people = intervals * Y\n    # Calculate the number of gaps needed\n    gaps = intervals * Z\n    # Calculate the number of people that can fit in the gaps\n    people += (X - people - gaps) // (Y + Z)\n    return str(people)"
    },
    {
        "number": 4467,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    red_points = []\n    blue_points = []\n    for i in range(N):\n        a, b = map(int, stdin.readline().strip().split())\n        red_points.append((a, b))\n    for i in range(N):\n        c, d = map(int, stdin.readline().strip().split())\n        blue_points.append((c, d))\n\n    # Count friendly pairs\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if red_points[i][0] < blue_points[j][0] and red_points[i][1] < blue_points[j][1]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4468,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, T = map(int, stdin.readline().split())\n    t = list(map(int, stdin.readline().split()))\n\n    # initialize variables\n    total_time = 0\n    current_time = 0\n\n    # iterate through each person and add their time to the total time\n    for i in range(N):\n        # if the switch is already on, add the remaining time to the total time\n        if current_time > 0:\n            total_time += T - current_time\n            current_time = 0\n\n        # add the time for the current person to the total time\n        total_time += t[i]\n\n        # update the current time\n        current_time = t[i]\n\n    # if the switch is still on, add the remaining time to the total time\n    if current_time > 0:\n        total_time += T - current_time\n\n    # return the total time\n    return str(total_time)"
    },
    {
        "number": 4469,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split('\\n')\n    q = int(queries[0])\n    books = []\n    for i in range(1, q):\n        query = queries[i].split()\n        if query[0] == 'L':\n            books.insert(0, int(query[1]))\n        elif query[0] == 'R':\n            books.append(int(query[1]))\n        else:\n            id = int(query[1])\n            left = books.index(id)\n            right = len(books) - books[::-1].index(id) - 1\n            print(min(left, right))\n    return ''"
    },
    {
        "number": 4470,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        n = int(stdin.readline().strip())\n        moves = 0\n        while n!= 1:\n            if n % 2 == 0:\n                n //= 2\n                moves += 1\n            elif n % 3 == 0:\n                n = 2*n // 3\n                moves += 1\n            elif n % 5 == 0:\n                n = 4*n // 5\n                moves += 1\n            else:\n                return \"-1\"\n        print(moves)"
    },
    {
        "number": 4471,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        if all(x <= 0 for x in a):\n            print(\"YES\")\n        else:\n            for j in range(n):\n                if a[j] > 0:\n                    a[j] -= 1\n                    if all(x <= 0 for x in a):\n                        print(\"YES\")\n                        break\n                    else:\n                        a[j] += 2\n            else:\n                print(\"NO\")"
    },
    {
        "number": 4472,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = stdin.split('\\n')[1]\n    b = stdin.split('\\n')[2]\n    count = 0\n    for i in range(1, n+1):\n        if a[i-1]!= b[i-1]:\n            count += 1\n            if a[i-1]!= b[n-i+1]:\n                count += 1\n            if b[i-1]!= a[n-i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 4473,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, k = map(int, stdin.readline().strip().split())\n        if k % 2 == 0:\n            x = k // 2 * a\n        else:\n            x = k // 2 * b\n        print(x)\n    return \"\""
    },
    {
        "number": 4474,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        n = int(stdin.readline().strip())\n        m = n\n        while True:\n            if is_good(m):\n                break\n            m += 1\n        print(m)\n\ndef"
    },
    {
        "number": 4475,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, x, y, n = map(int, stdin.readline().strip().split())\n        if a < x:\n            a = x\n        if b < y:\n            b = y\n        for j in range(n):\n            if a > b:\n                a -= 1\n            else:\n                b -= 1\n        print(a * b)\n    return \"\""
    },
    {
        "number": 4476,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        moves = 0\n        while a!= b:\n            if a % 2 == 0:\n                a -= 2\n            else:\n                a += 1\n            moves += 1\n        print(moves)"
    },
    {
        "number": 4477,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        x = int(stdin.readline().strip())\n        digits = set(str(x))\n        count = 0\n        for digit in digits:\n            count += int(digit)\n        print(count)"
    },
    {
        "number": 4478,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    seqs = []\n    for i in range(k):\n        n = int(stdin.readline().strip())\n        seq = list(map(int, stdin.readline().strip().split()))\n        seqs.append(seq)\n\n    for i in range(k):\n        for j in range(i+1, k):\n            if sum(seqs[i]) == sum(seqs[j]):\n                for x in range(len(seqs[i])):\n                    for y in range(len(seqs[j])):\n                        if seqs[i][x]!= seqs[j][y]:\n                            if sum(seqs[i][:x] + seqs[i][x+1:]) == sum(seqs[j][:y] + seqs[j][y+1:]):\n                                return \"YES\\n{}\\n{}\\n\".format(i+1, x+1, j+1, y+1)\n    return \"NO\""
    },
    {
        "number": 4479,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    ans = 0\n    for i in range(K):\n        ans += A[-1]\n        A[-1] = -A[-1]\n    return ans"
    },
    {
        "number": 4480,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    n = len(A)\n    s = sum(A)\n    if s % 3!= 0:\n        return False\n    target = s // 3\n    left = [0] * n\n    right = [0] * n\n    left[0] = A[0]\n    for i in range(1, n):\n        left[i] = left[i-1] + A[i]\n    right[n-1] = A[n-1]\n    for i in range(n-2, -1, -1):\n        right[i] = right[i+1] + A[i]\n    for i in range(1, n-1):\n        if left[i-1] == target and right[i+1] == target:\n            return True\n    return False"
    },
    {
        "number": 4481,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    votes = {}\n    for i in range(n):\n        vote = stdin.readline().strip()\n        if vote in votes:\n            votes[vote] += 1\n        else:\n            votes[vote] = 1\n    max_votes = max(votes.values())\n    result = [vote for vote, count in votes.items() if count == max_votes]\n    result.sort()\n    return '\\n'.join(result)"
    },
    {
        "number": 4482,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # sort the array\n    a.sort()\n\n    # calculate the minimum cost\n    cost = 0\n    for i in range(N):\n        cost += (a[i] - i)**2\n\n    return str(cost)"
    },
    {
        "number": 4483,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    cakes = x // a\n    donuts = (x - cakes * a) // b\n    return str(x - cakes * a - donuts * b)"
    },
    {
        "number": 4484,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m = map(int, stdin.split())\n\n    # Initialize variables\n    count = 1\n\n    # Calculate count\n    count *= (n+m-2)\n    count //= 2\n    count %= 10**9+7\n\n    # Print result\n    print(count)\n\n    return \"\""
    },
    {
        "number": 4485,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.split())\n    boat_services = []\n    for i in range(M):\n        a, b = map(int, stdin.split())\n        boat_services.append((a, b))\n\n    # check if it is possible to go to Island N by using two boat services\n    for i in range(M):\n        for j in range(i+1, M):\n            if boat_services[i][1] == boat_services[j][0]:\n                return \"POSSIBLE\"\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4486,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    result = \"\"\n    for i in range(1, len(s), 2):\n        result += s[i]\n    return result"
    },
    {
        "number": 4487,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    if A[-1] == B[0] and B[-1] == C[0]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4488,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\""
    },
    {
        "number": 4489,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    blue_cards = [stdin.readline().strip() for _ in range(N)]\n    M = int(stdin.readline().strip())\n    red_cards = [stdin.readline().strip() for _ in range(M)]\n\n    # count blue and red cards with announced string\n    blue_count = sum(1 for card in blue_cards if card == announced_string)\n    red_count = sum(1 for card in red_cards if card == announced_string)\n\n    # calculate earnings\n    earnings = blue_count - red_count\n\n    # return earnings\n    return str(earnings)"
    },
    {
        "number": 4490,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin.strip()\n    if b == 'A':\n        return 'T'\n    elif b == 'C':\n        return 'G'\n    elif b == 'G':\n        return 'C'\n    elif b == 'T':\n        return 'A'\n    else:\n        return 'Invalid input'"
    },
    {
        "number": 4491,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    A = []\n    for i in range(2):\n        A.append(list(map(int, stdin.readline().strip().split())))\n\n    # Initialize variables\n    max_candies = 0\n    candies = 0\n    i, j = 0, 0\n\n    # Traverse grid\n    while i < 2 and j < N:\n        # Collect candies at current square\n        candies += A[i][j]\n\n        # Check if we have reached bottom-right square\n        if i == 1 and j == N-1:\n            # Update max_candies if necessary\n            max_candies = max(max_candies, candies)\n\n        # Determine next move\n        if j == N-1 or (i == 1 and j < N-1 and A[i][j+1] > A[i][j]):\n            # Move right\n            j += 1\n        else:\n            # Move down\n            i += 1\n\n    # Collect candies at top-left and bottom-right squares\n    candies += A[0][0] + A[1][N-1]\n\n    # Update max_candies if necessary\n    max_candies = max(max_candies, candies)\n\n    # Return result\n    return str(max_candies)"
    },
    {
        "number": 4492,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, x = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n\n    # initialize variables\n    count = 0\n    for i in range(N):\n        if a[i] > x:\n            count += a[i] // x\n            a[i] %= x\n\n    # count remaining operations\n    for i in range(1, N):\n        if a[i] > a[i-1] + x:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4493,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    grid = []\n    for line in stdin.split('\\n'):\n        grid.append([int(x) for x in line.split()])\n\n    # Check if Takahashi's statement is correct\n    for i in range(3):\n        for j in range(3):\n            if grid[i][j]!= grid[i][0] + grid[0][j]:\n                return 'No'\n    return 'Yes'"
    },
    {
        "number": 4494,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    if S == \"ABC\":\n        return \"ARC\"\n    else:\n        return \"ABC\""
    },
    {
        "number": 4495,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4496,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    if D == 25:\n        return \"Christmas\"\n    elif D == 24:\n        return \"Christmas Eve\"\n    elif D == 23:\n        return \"Christmas Eve Eve\"\n    elif D == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"\""
    },
    {
        "number": 4497,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_count = 0\n    max_num = 0\n    for i in range(1, n+1):\n        count = 0\n        while i % 2 == 0:\n            i //= 2\n            count += 1\n        if count > max_count:\n            max_count = count\n            max_num = i\n    return str(max_num)"
    },
    {
        "number": 4498,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if abs(a - c) <= d or abs(b - c) <= d:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4499,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = stdin.split()\n    acronym = ''.join([word[0].upper() for word in [s1, s2, s3]])\n    return acronym"
    },
    {
        "number": 4500,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A + B >= C:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4501,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, A = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n\n    # Sort the cards in ascending order\n    x.sort()\n\n    # Initialize variables\n    count = 0\n    left = 0\n    right = N - 1\n\n    # Loop through all possible subsets of cards\n    while left <= right:\n        # Calculate the average of the selected cards\n        avg = (x[left] + x[right]) / 2\n\n        # If the average is equal to A, increment count\n        if avg == A:\n            count += 1\n\n        # If the average is less than A, increment left\n        elif avg < A:\n            count += right - left + 1\n            left += 1\n\n        # If the average is greater than A, decrement right\n        else:\n            right -= 1\n\n    # Return the count of ways to select cards\n    return str(count)"
    },
    {
        "number": 4502,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = []\n    for i in range(n):\n        b.append(a[i])\n        b.reverse()\n    return''.join(map(str, b))"
    },
    {
        "number": 4503,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split())\n    A = list(map(int, stdin.readline().split()))\n    A.sort()\n    if A[-1] >= H:\n        return \"Yes\"\n    for i in range(N):\n        if A[i] >= H:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4504,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n    if n % 2 == 1:\n        return \"0\"\n    even_str = \"\"\n    for i in range(n // 2):\n        even_str += S[i]\n    return str(len(even_str))"
    },
    {
        "number": 4505,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if sorted(s) == ['a', 'b', 'c']:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4506,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    MOD = 998244353\n\n    def f(l, r):\n        return sum(a[i-1] * b[i-1] for i in range(l, r+1))\n\n    def g(l, r):\n        return sum(b[i-1] for i in range(l, r+1))\n\n    def h(l, r):\n        return sum(b[i-1] * b[i-1] for i in range(l, r+1))\n\n    def min_sum(l, r):\n        return (f(l, r) + g(l, r) + h(l, r)) % MOD\n\n    def min_sum_after_swap(l, r):\n        return (f(l, r) + g(l, r) + h(l, r) + min(min_sum(l, r-1), min_sum(l+1, r))) % MOD\n\n    def min_sum_after_move(l, r, i):\n        return (f(l, r) + g(l, r) + h(l, r) + min(min_sum(l, i-1), min_sum(i+1, r)) + min_sum(l, i-1) + min_sum(i+1, r)) % MOD\n\n    def min_sum_after_move_b(l, r, i):\n        return (f(l, r) + g(l, r) + h(l, r) + min(min_sum(l, i-1), min_sum(i+1, r)) + min_sum(l, i-1) + min_sum(i+1, r) + min_sum(l, r-1) + min_sum(l+1, r)) % MOD\n\n    def min_sum_after_move_c(l, r, i):\n        return (f(l, r) + g(l, r) + h(l, r) + min(min_sum(l, i-1), min_sum(i+1, r)) + min_sum(l, i-1) + min_sum(i+1, r) + min_sum(l, r-1) + min_sum(l+1, r) + min_sum(l, r-2) + min_sum(l+2, r)) % MOD\n\n    def min_sum_after_move_d(l, r, i):\n        return (f(l, r) + g(l, r) + h(l, r) + min(min_sum(l, i-1), min_sum(i+1, r)) + min_sum(l, i-1) + min_sum(i+1, r) + min_sum(l, r-1) + min_sum(l+1, r) + min_sum(l, r-2) + min_sum(l+2, r) + min_sum(l, r-3) + min_sum(l+3, r)) % MOD\n\n    def min_sum_after_move_e(l, r, i):\n        return (f(l, r) + g(l, r) + h(l, r) + min(min_sum(l, i-1), min_sum(i+1, r)) + min_sum(l, i-1) + min_sum(i+1, r) + min_sum(l, r-1) + min_sum(l+1, r) + min_sum(l, r-2) + min_sum(l+2, r) + min_sum(l, r-3) + min_sum(l+3, r) + min_sum(l, r-4) + min_sum(l+4, r)) % MOD\n\n    def min_sum_after_move_f(l, r, i):\n        return (f(l, r) + g(l, r) + h(l, r) + min(min_sum(l, i-1), min_sum(i+1, r)) + min_sum(l, i-1) + min_sum(i+1, r) + min_sum(l, r-1) + min_sum(l+1, r) + min"
    },
    {
        "number": 4507,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    offers = []\n    for i in range(m):\n        x, y = map(int, stdin.split())\n        offers.append((x, y))\n    dp = [[float('inf')] * (k+1) for _ in range(n+1)]\n    dp[0][0] = 0\n    for i in range(1, n+1):\n        for j in range(k+1):\n            for x in range(j+1):\n                dp[i][j] = min(dp[i][j], dp[i-1][j-x] + a[i-1])\n            for offer in offers:\n                if i >= offer[0]:\n                    dp[i][j] = min(dp[i][j], dp[i-offer[0]][j] + sum(a[i-offer[0]:i-offer[0]+offer[1]]) - offer[1]*a[i-offer[0]])\n    return dp[n][k]"
    },
    {
        "number": 4508,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = []\n    for i in range(n - 1):\n        u, v = map(int, stdin.readline().strip().split())\n        edges.append((u, v))\n    edges.sort()\n    ans = 0\n    for i in range(n - 1):\n        if edges[i][1] == edges[i + 1][0]:\n            continue\n        ans += 1\n        if ans == 2:\n            break\n    return str(ans)"
    },
    {
        "number": 4509,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n'):\n        if line:\n            n, k = map(int, line.split())\n            count = 0\n            num = 1\n            while count < k:\n                if num % n!= 0:\n                    count += 1\n                num += 1\n            print(num - 1)"
    },
    {
        "number": 4510,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    ids = list(map(int, stdin.split()[2:]))\n    conversations = []\n    for i in range(n):\n        if not any(id == ids[i] for id in conversations):\n            if len(conversations) == k:\n                conversations.pop()\n            conversations.insert(0, ids[i])\n    return str(len(conversations)) + '\\n' +''.join(map(str, conversations))"
    },
    {
        "number": 4511,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    damage = 0\n    for i in range(n):\n        k = int(stdin.readline().strip())\n        cards = []\n        for j in range(k):\n            c, d = map(int, stdin.readline().strip().split())\n            cards.append((c, d))\n        cards.sort(key=lambda x: x[0])\n        for j in range(k):\n            if j % 10 == 0:\n                damage += cards[j][1] * 2\n            else:\n                damage += cards[j][1]\n    return str(damage)"
    },
    {
        "number": 4512,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    q = int(stdin.split('\\n')[1])\n    for i in range(q):\n        query = stdin.split('\\n')[i+2].split()\n        if query[0] == '1':\n            s = s[:int(query[1])-1] + query[2] + s[int(query[1]):]\n        else:\n            l, r = int(query[1]), int(query[2])\n            sub = s[l-1:r]\n            distinct_chars = len(set(sub))\n            print(distinct_chars)\n    return s"
    },
    {
        "number": 4513,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        field = [list(map(int, line)) for line in lines[i*9-9:i*9]]\n        for j in range(9):\n            for k in range(9):\n                if field[j][k] == 0:\n                    for l in range(1, 10):\n                        if l not in field[j] and l not in [field[m][k] for m in range(9)] and l not in [field[j//3*3+m//3][k//3*3+m%3] for m in range(9)]:\n                            field[j][k] = l\n                            break\n                    if field[j][k] == 0:\n                        return \"No solution\"\n        print('\\n'.join([''.join(map(str, line)) for line in field]))"
    },
    {
        "number": 4514,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.readline().split())\n    parents = list(map(int, stdin.readline().split()))\n    queries = []\n    for i in range(q):\n        u, k = map(int, stdin.readline().split())\n        queries.append((u, k))\n\n    # construct the tree\n    tree = [[] for _ in range(n)]\n    for i in range(1, n):\n        tree[parents[i]].append(i)\n\n    # dfs to spread the command\n    def dfs(u, k):\n        if k == 1:\n            return u\n        for v in tree[u]:\n            if v not in visited:\n                visited.add(v)\n                if dfs(v, k - 1)!= -1:\n                    return v\n        return -1\n\n    # process queries\n    result = []\n    for u, k in queries:\n        visited = set()\n        result.append(dfs(u, k))\n\n    # print the results\n    for r in result:\n        print(r if r!= -1 else -1)\n\n    return \"\""
    },
    {
        "number": 4515,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, c, n = map(int, stdin.readline().strip().split())\n        if a + b + c == n:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4516,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    ans = []\n    for i in range(1, n + 1):\n        p = [i] + list(range(1, i)) + list(range(i + 1, n + 1))\n        f = sum(abs(pos(p, x[j]) - pos(p, x[j + 1])) for j in range(m - 1))\n        ans.append(f)\n    return''.join(map(str, ans))\n\ndef"
    },
    {
        "number": 4517,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    graph = [[] for _ in range(n+1)]\n    for i in range(n-1):\n        u, v = map(int, stdin.readline().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    for i in range(m):\n        k = int(stdin.readline())\n        query = list(map(int, stdin.readline().split()))\n        visited = [False] * (n+1)\n        visited[1] = True\n        queue = [1]\n        while queue:\n            node = queue.pop(0)\n            for neighbor in graph[node]:\n                if visited[neighbor]:\n                    continue\n                visited[neighbor] = True\n                if neighbor in query:\n                    query.remove(neighbor)\n                else:\n                    for q in query:\n                        if q in graph[neighbor]:\n                            break\n                    else:\n                        queue.append(neighbor)\n                        break\n        if query:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4518,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        if n == 2:\n            print(\"YES\")\n            print(1, 2)\n            continue\n        gangs = set(a)\n        if len(gangs) == 1:\n            print(\"NO\")\n            continue\n        roads = []\n        for i in range(n):\n            for j in range(i+1, n):\n                if a[i]!= a[j]:\n                    roads.append((i+1, j+1))\n        if len(roads) == n-1:\n            print(\"YES\")\n            for road in roads:\n                print(road[0], road[1])\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 4519,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        n, k = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        if k >= n:\n            print(s)\n            continue\n        for j in range(k):\n            for i in range(n-1):\n                if s[i] > s[i+1]:\n                    s = s[:i] + s[i+1] + s[i] + s[i+2:]\n                    break\n        print(s)"
    },
    {
        "number": 4520,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split()[0:2])\n        segments.append((l, r))\n    segments.sort()\n    bad_points = set()\n    for i in range(n):\n        for j in range(segments[i][0], segments[i][1]+1):\n            bad_points.add(j)\n    for i in range(n):\n        for j in range(segments[i][0], segments[i][1]+1):\n            if j in bad_points:\n                bad_points.remove(j)\n    m = len(bad_points)\n    print(m)\n    if m == 0:\n        return \"\"\n    else:\n        return \" \".join(str(i+1) for i in range(m))"
    },
    {
        "number": 4521,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    v = list(map(int, stdin.readline().strip().split()))\n    dp = [[float('inf')]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for k in range(n):\n        for i in range(n):\n            for j in range(i+1, n):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j])\n                dp[i][j] = min(dp[i][j], abs(x[i] - x[j]) + abs(v[i] - v[j]))\n    return sum(dp[i][j] for i in range(n) for j in range(i+1, n))"
    },
    {
        "number": 4522,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(n - 1):\n        u, v, w = map(int, stdin.split())\n        edges.append((u, v, w))\n    queries = list(map(int, stdin.split()))\n    ans = []\n    for q in queries:\n        count = 0\n        for u, v, w in edges:\n            if w <= q:\n                count += 1\n        ans.append(count)\n    return''.join(map(str, ans))"
    },
    {
        "number": 4523,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        if n == 1:\n            print(\"YES\")\n            continue\n        for i in range(n):\n            for j in range(i+1, n):\n                if abs(a[i] - a[j]) <= 1:\n                    a.remove(min(a[i], a[j]))\n                    break\n        if len(a) == 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4524,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = int(stdin.readline().strip(), 2)\n    b = int(stdin.readline().strip(), 2)\n    ans = 0\n    while b > 0:\n        ans += a & b\n        b //= 2\n        a //= 2\n    return str(ans % 998244353)"
    },
    {
        "number": 4525,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        if n % 2!= 0:\n            print(\"NO\")\n            continue\n        a = [2] * (n // 2) + [1] * (n // 2)\n        a.sort()\n        if sum(a[:n // 2])!= sum(a[n // 2:]):\n            print(\"NO\")\n            continue\n        print(\"YES\")\n        print(\" \".join(map(str, a)))\n    return \"\""
    },
    {
        "number": 4526,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        count = 0\n        for j in range(n):\n            if j == 0:\n                if a[j] == 1:\n                    count += 1\n            else:\n                if a[j] == a[j-1] + 1:\n                    count += 1\n        print(count)\n    return \"\""
    },
    {
        "number": 4527,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        segments = []\n        for j in range(n):\n            l, r = map(int, stdin.readline().strip().split())\n            segments.append((l, r))\n        segments.sort()\n        count = 0\n        for j in range(n):\n            if j == 0 or segments[j][0] > segments[j-1][1]:\n                count += 1\n        print(count)"
    },
    {
        "number": 4528,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        h, m = map(int, lines[i].split())\n        if h == 0 and m == 0:\n            print(0)\n        else:\n            print(60 - m + (23 - h) * 60)"
    },
    {
        "number": 4529,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        s = stdin.readline().strip()\n        if s == s[::-1]:\n            print(-1)\n            continue\n        for j in range(n):\n            for k in range(j+1, n+1):\n                sub = s[j:k]\n                if sub == sub[::-1]:\n                    continue\n                if sub in s:\n                    s = s.replace(sub, \"\")\n                    break\n        if not s:\n            print(-1)\n        else:\n            print(1, len(s))"
    },
    {
        "number": 4530,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        skills = list(map(int, stdin.readline().strip().split()))\n        skills.sort()\n        left, right = 1, n\n        while left < right:\n            mid = (left + right) // 2\n            if is_valid(skills, mid):\n                right = mid\n            else:\n                left = mid + 1\n        print(right)\n\ndef"
    },
    {
        "number": 4531,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    edges = []\n    for i in range(n - 1):\n        u, v = map(int, stdin.readline().strip().split())\n        edges.append((u, v))\n    dist = [0] * n\n    for i in range(n):\n        dist[i] = [-1] * n\n    for i in range(n):\n        dist[i][i] = 0\n    for u, v in edges:\n        dist[u - 1][v - 1] = 1\n        dist[v - 1][u - 1] = 1\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if dist[i][k]!= -1 and dist[k][j]!= -1 and dist[i][k] + dist[k][j] > dist[i][j]:\n                    dist[i][j] = dist[i][k] + dist[k][j]\n    ans = 0\n    for i in range(n):\n        ans += dist[i][i] * a[i]\n    return str(ans)"
    },
    {
        "number": 4532,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        x = 0\n        count = 0\n        for j in range(n):\n            if a[j] % k!= 0:\n                count += 1\n                a[j] += x\n                x += 1\n        if count == 0:\n            print(0)\n        else:\n            print(count)"
    },
    {
        "number": 4533,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    children = list(map(int, stdin.split()[0].split(',')))\n    cookies = list(map(int, stdin.split()[1].split(',')))\n\n    # initialize variables\n    max_content = 0\n    content_children = []\n\n    # iterate through children and cookies\n    for child in children:\n        content = False\n        for cookie in cookies:\n            if cookie >= child:\n                content = True\n                cookies.remove(cookie)\n                break\n        if content:\n            content_children.append(child)\n        if len(content_children) > max_content:\n            max_content = len(content_children)\n\n    return max_content"
    },
    {
        "number": 4534,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 0:\n        return [1]\n    elif k == 1:\n        return [1, 1]\n    else:\n        prev_row = [1, 1]\n        for i in range(2, k+1):\n            curr_row = [1]\n            for j in range(1, i):\n                curr_row.append(prev_row[j-1] + prev_row[j])\n            curr_row.append(1)\n            prev_row = curr_row\n        return curr_row"
    },
    {
        "number": 4535,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input string to integer\n    n = int(stdin, 2)\n    # Count number of '1' bits\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 4536,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    digits = list(map(int, stdin.split()))\n    carry = 1\n    for i in range(len(digits)-1, -1, -1):\n        digits[i] += carry\n        carry = digits[i] // 10\n        digits[i] %= 10\n    if carry:\n        digits.insert(0, carry)\n    return digits"
    },
    {
        "number": 4537,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(max(A+B, A-B, A*B))"
    },
    {
        "number": 4538,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    count = 0\n    for point in points:\n        if (point[0]**2 + point[1]**2) <= d**2:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4539,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    if n % sum_of_digits == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4540,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    total_cost = 0\n    visited = [False] * N\n\n    # Departure and arrival at 0\n    total_cost += abs(0 - A[0])\n    visited[0] = True\n\n    # Visit all spots except the one to cancel\n    for i in range(1, N):\n        total_cost += abs(A[i-1] - A[i])\n        visited[i] = True\n\n    # Return to 0\n    total_cost += abs(A[N-1] - 0)\n\n    # Cancel visit to spot i\n    for i in range(1, N):\n        if not visited[i]:\n            total_cost -= abs(A[i-1] - A[i])\n\n    # Print results\n    for i in range(1, N+1):\n        print(total_cost)\n\n    return \"\""
    },
    {
        "number": 4541,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.strip()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if c in vowels:\n        return 'vowel'\n    else:\n        return 'consonant'"
    },
    {
        "number": 4542,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    S = stdin.strip()\n    # count number of black and white stones\n    black_stones = S.count('B')\n    white_stones = S.count('W')\n    # calculate minimum number of new stones\n    if black_stones > white_stones:\n        return str(black_stones - white_stones)\n    else:\n        return str(white_stones - black_stones)"
    },
    {
        "number": 4543,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a*a + b*b == int(str(a*b)**0.5)**2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4544,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    count = 0\n    max_count = 0\n    x = a[0]\n\n    # Iterate through sequence\n    for i in range(N):\n        # Check if current element is equal to X\n        if a[i] == x:\n            count += 1\n            max_count = max(max_count, count)\n        # Update X based on optimal choice\n        if a[i] > x:\n            x += 1\n        elif a[i] < x:\n            x -= 1\n\n    # Print result\n    return str(max_count)"
    },
    {
        "number": 4545,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, a = map(int, stdin.split())\n\n    # Calculate number of black squares\n    b = (n * n) - a\n\n    # Print result\n    return str(b)"
    },
    {
        "number": 4546,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b-a == c-b:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4547,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n // 10 == 9:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4548,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M, X = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    dp = [float('inf')] * (N + 1)\n    dp[X] = 0\n\n    # Iterate through toll gates\n    for i in range(M):\n        dp[A[i]] = 1\n\n    # Iterate through squares\n    for i in range(1, N + 1):\n        dp[i] = min(dp[i], dp[i - 1] + 1)\n        dp[i] = min(dp[i], dp[i + 1] + 1)\n\n    # Return minimum cost\n    return str(dp[0])"
    },
    {
        "number": 4549,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    H, W = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(H)]\n\n    # Check if square1001 can achieve his objective\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                # Check if square is adjacent to a black square\n                adjacent_black = False\n                if i > 0 and grid[i-1][j] == '#':\n                    adjacent_black = True\n                if i < H-1 and grid[i+1][j] == '#':\n                    adjacent_black = True\n                if j > 0 and grid[i][j-1] == '#':\n                    adjacent_black = True\n                if j < W-1 and grid[i][j+1] == '#':\n                    adjacent_black = True\n                if adjacent_black:\n                    # Paint square black\n                    grid[i][j] = '#'\n                else:\n                    # Cannot achieve objective\n                    return \"No\"\n\n    # Objective achieved\n    return \"Yes\""
    },
    {
        "number": 4550,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return \"Yes\"\n    elif a == b or b == c or a == c:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4551,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    L = A + B\n    R = C + D\n    if L > R:\n        return \"Left\"\n    elif L < R:\n        return \"Right\"\n    else:\n        return \"Balanced\""
    },
    {
        "number": 4552,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    F = []\n    for i in range(N):\n        F.append(list(map(int, stdin.readline().strip().split())))\n    P = []\n    for i in range(N):\n        P.append(list(map(int, stdin.readline().strip().split())))\n\n    # Calculate profit for each shop\n    profits = []\n    for i in range(N):\n        profit = 0\n        for j in range(5):\n            for k in range(2):\n                if F[i][j*2+k] == 1:\n                    profit += P[i][j*2+k]\n        profits.append(profit)\n\n    # Calculate maximum profit\n    max_profit = 0\n    for i in range(5):\n        for k in range(2):\n            if sum(F[j][i*2+k] for j in range(N)) >= 1:\n                max_profit += sum(P[j][i*2+k] for j in range(N))\n\n    # Return result\n    return str(max_profit)"
    },
    {
        "number": 4553,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split()[0].split())\n    S = stdin.split()[1]\n    if len(S)!= A+B+1:\n        return \"No\"\n    if S[A]!= '-':\n        return \"No\"\n    for i in range(A+1, A+B+1):\n        if not S[i].isdigit():\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4554,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split())\n    if a + W > b:\n        return str(a + W - b)\n    else:\n        return str(b + W - a)"
    },
    {
        "number": 4555,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    arr = list(range(A, B+1))\n    arr.sort()\n    if K <= len(arr)//2:\n        return '\\n'.join(map(str, arr[:K]))\n    else:\n        return '\\n'.join(map(str, arr[len(arr)-K:]))"
    },
    {
        "number": 4556,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    x = s[0]\n    return x + str(len(s) - 1)"
    },
    {
        "number": 4557,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if A + B < X:\n        return \"NO\"\n    if X == 0:\n        return \"YES\"\n    if X == 1:\n        return \"YES\" if A == 1 else \"NO\"\n    if X == A:\n        return \"YES\" if A > 0 else \"NO\"\n    if X == A + 1:\n        return \"YES\" if A > 0 and B > 0 else \"NO\"\n    if X == A + 2:\n        return \"YES\" if A > 1 and B > 1 else \"NO\"\n    if X == A + B:\n        return \"YES\" if A == 0 else \"NO\"\n    return \"NO\""
    },
    {
        "number": 4558,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split())\n    return str(X - X // t)"
    },
    {
        "number": 4559,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    result = 1\n    for num in nums:\n        result *= num\n        if result > 10**18:\n            return \"-1\"\n    return str(result)"
    },
    {
        "number": 4560,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n % 500 == 0 and a >= n // 500:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4561,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    if b <= a + x:\n        return \"safe\"\n    elif b <= a + x + 1:\n        return \"dangerous\"\n    else:\n        return \"delicious\""
    },
    {
        "number": 4562,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while i*i <= n:\n        i += 1\n    return i-1"
    },
    {
        "number": 4563,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    votes = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    total_votes = sum(votes[-1])\n    takahashi_votes = total_votes // 2\n    aoki_votes = total_votes - takahashi_votes\n    for i in range(n-2, -1, -1):\n        takahashi_votes, aoki_votes = aoki_votes, takahashi_votes\n        takahashi_votes += total_votes // 2\n        aoki_votes += total_votes - takahashi_votes\n        takahashi_votes, aoki_votes = min(takahashi_votes, aoki_votes), max(takahashi_votes, aoki_votes)\n    return str(takahashi_votes) + \" \" + str(aoki_votes)"
    },
    {
        "number": 4564,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(set(s)) == len(s):\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 4565,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    leader = s.index('W')\n    count = 0\n    for i in range(n):\n        if s[i]!= s[leader]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4566,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().split())\n    roads = [list(map(int, stdin.readline().split())) for _ in range(M)]\n\n    # Initialize city_roads\n    city_roads = [0] * N\n\n    # Count roads for each city\n    for a, b in roads:\n        city_roads[a-1] += 1\n        city_roads[b-1] += 1\n\n    # Print city_roads\n    return '\\n'.join(map(str, city_roads))"
    },
    {
        "number": 4567,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    scores = list(map(int, stdin.readline().strip().split()))\n\n    # calculate max score\n    max_score = sum(scores)\n    if max_score % 10 == 0:\n        max_score += 10\n\n    return str(max_score)"
    },
    {
        "number": 4568,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    max_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            x = s[:i]\n            y = s[i:j]\n            z = s[j:]\n            count = len(set(x) & set(y))\n            if count > max_count:\n                max_count = count\n    return str(max_count)"
    },
    {
        "number": 4569,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    S = stdin.strip()\n\n    # Predict weather tomorrow\n    if S == \"Sunny\":\n        return \"Cloudy\"\n    elif S == \"Cloudy\":\n        return \"Rainy\"\n    else:\n        return \"Sunny\""
    },
    {
        "number": 4570,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    if N <= 20 and A <= 100 and B <= 2000:\n        if N <= 10:\n            return str(A * N)\n        else:\n            return str(B)\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 4571,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == 0:\n        return str(100)\n    elif m == 1:\n        return str(1900)\n    else:\n        return str(1900 * (1 - 0.5**(m-1)) + (100 - 1900) * (1 - 0.5**(n-m)))"
    },
    {
        "number": 4572,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    for c in 'abcdefghijklmnopqrstuvwxyz':\n        if c not in s:\n            return c\n    return 'None'"
    },
    {
        "number": 4573,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    nums.sort()\n    b = []\n\n    # Calculate B_i for each i\n    for i in range(n):\n        # Calculate the median of X_1, X_2,..., X_{i-1}, X_{i+1},..., X_N excluding X_i\n        left = nums[:i]\n        right = nums[i+2:]\n        if len(left) % 2 == 0:\n            left = left[:-1]\n        if len(right) % 2 == 0:\n            right = right[:-1]\n        if len(left) == 0:\n            median = right[len(right)//2]\n        elif len(right) == 0:\n            median = left[len(left)//2]\n        else:\n            median = (left[len(left)//2] + right[len(right)//2]) / 2\n\n        # Append B_i to the list\n        b.append(median)\n\n    # Print B_i for each i\n    for i in range(n):\n        print(b[i])\n\n    return \"\""
    },
    {
        "number": 4574,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort(reverse=True)\n    area = 0\n    for i in range(n-3):\n        for j in range(i+1, n-2):\n            for k in range(j+1, n-1):\n                for l in range(k+1, n):\n                    if a[i] + a[j] > a[k] + a[l]:\n                        area = max(area, a[i] * a[j] + a[k] * a[l])\n    return str(area) if area > 0 else \"0\""
    },
    {
        "number": 4575,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, D, X = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Calculate number of chocolate pieces prepared at the beginning of the camp\n    total_pieces = 0\n    for i in range(N):\n        total_pieces += A[i] * (1 + A[i]) // 2\n\n    # Subtract the number of pieces eaten by the participants\n    for i in range(N):\n        total_pieces -= A[i] * (1 + A[i]) // 2 * (1 + A[i] + A[i] + A[i]) // 4\n\n    # Add the number of pieces eaten by the participants\n    for i in range(N):\n        total_pieces += X * (1 + A[i]) // 2 * (1 + A[i] + A[i] + A[i]) // 4\n\n    # Subtract the number of pieces eaten by the participants on the last day\n    total_pieces -= X * (1 + A[-1]) // 2 * (1 + A[-1] + A[-1] + A[-1]) // 4\n\n    # Add the number of pieces eaten by the participants on the last day\n    total_pieces += X * (1 + A[-1]) // 2 * (1 + A[-1] + A[-1] + A[-1]) // 4 * (D - 1)\n\n    return str(total_pieces)"
    },
    {
        "number": 4576,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n    if X % 50!= 0:\n        return \"0\"\n    if X < 50 * (A + B + C):\n        return \"0\"\n    if X == 50 * A:\n        return \"1\"\n    if X == 50 * B:\n        return \"1\"\n    if X == 50 * C:\n        return \"1\"\n    if X == 50 * A + 100 * B:\n        return \"1\"\n    if X == 50 * A + 50 * C:\n        return \"1\"\n    if X == 100 * B + 50 * C:\n        return \"1\"\n    if X == 50 * A + 100 * B + 50 * C:\n        return \"1\"\n    return \"2\""
    },
    {
        "number": 4577,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C >= A and C <= B:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4578,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, X = map(int, stdin.split())\n    m = list(map(int, stdin.split()))\n\n    # Calculate maximum number of doughnuts\n    max_doughnuts = X // sum(m)\n    for i in range(N):\n        max_doughnuts = min(max_doughnuts, X // m[i])\n\n    # Check if condition is obeyed\n    for i in range(N):\n        if X % m[i]!= 0:\n            max_doughnuts = min(max_doughnuts, X // m[i] + 1)\n\n    return str(max_doughnuts)"
    },
    {
        "number": 4579,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    items = set()\n    for i in range(N):\n        items.add(stdin.readline().strip())\n\n    # Count number of kinds of items\n    num_kinds = len(items)\n\n    # Print result\n    print(num_kinds)\n    return f\"You got {num_kinds} kinds of items: {', '.join(items)}.\""
    },
    {
        "number": 4580,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    colors = ['gray', 'brown', 'green', 'cyan', 'blue', 'yellow', 'orange','red']\n    count = [0] * 8\n    for i in range(n):\n        if a[i] >= 3200:\n            count[0] += 1\n        else:\n            count[a[i] // 400] += 1\n    return str(min(count)) +'' + str(max(count))"
    },
    {
        "number": 4581,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    price = 700\n    if s[0] == 'o':\n        price += 100\n    if s[1] == 'o':\n        price += 100\n    if s[2] == 'o':\n        price += 100\n    return str(price)"
    },
    {
        "number": 4582,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == 'H':\n        if b == 'H':\n            return 'H'\n        else:\n            return 'D'\n    else:\n        if b == 'H':\n            return 'D'\n        else:\n            return 'H'"
    },
    {
        "number": 4583,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    formula = f\"{A}+{B}+{C}+{D}={7}\"\n    return formula"
    },
    {
        "number": 4584,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    subordinates = [0] * (n+1)\n    for i in range(2, n+1):\n        subordinates[a[i]] += 1\n    for i in range(2, n+1):\n        subordinates[i] += subordinates[a[i]]\n    return '\\n'.join(map(str, subordinates[2:]))"
    },
    {
        "number": 4585,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X == 0:\n        return \"0\"\n    elif X % 2 == 0:\n        return str(X // 2)\n    else:\n        return \"-1\""
    },
    {
        "number": 4586,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1000 or N > 9999:\n        return \"No\"\n    digits = [int(digit) for digit in str(N)]\n    if digits[0] == digits[1] == digits[2]:\n        return \"Yes\"\n    for i in range(2, len(digits)):\n        if digits[i] == digits[i-1] == digits[i-2]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4587,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    B = list(map(int, stdin.readline().strip().split()))\n    C = list(map(int, stdin.readline().strip().split()))\n\n    # Count the number of valid altars\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if A[i] < A[j] < A[k] and B[i] < B[j] < B[k] and C[i] < C[j] < C[k]:\n                    count += 1\n\n    # Print the result\n    print(count)"
    },
    {
        "number": 4588,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x_value = int(x, 16)\n    y_value = int(y, 16)\n    if x_value < y_value:\n        return '<'\n    elif x_value > y_value:\n        return '>'\n    else:\n        return '='"
    },
    {
        "number": 4589,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    H, W = map(int, stdin.readline().split())\n    grid = [stdin.readline().strip() for _ in range(H)]\n\n    # Define directions to check for adjacent bombs\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (-1, 1), (1, -1), (-1, -1)]\n\n    # Replace empty squares with number of adjacent bombs\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '.':\n                count = 0\n                for dx, dy in directions:\n                    x, y = i + dx, j + dy\n                    if 0 <= x < H and 0 <= y < W and grid[x][y] == '#':\n                        count += 1\n                grid[i] = grid[i][:j] + str(count) + grid[i][j+1:]\n\n    # Print output\n    return '\\n'.join(grid)"
    },
    {
        "number": 4590,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M, K = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    B = list(map(int, stdin.readline().split()))\n\n    # Sort desks by time taken to read the topmost book\n    A.sort(reverse=True)\n    B.sort(reverse=True)\n\n    # Initialize variables\n    time_taken = 0\n    num_books_read = 0\n\n    # Read books from desks until time limit is reached\n    while time_taken < K and num_books_read < N + M:\n        # Read from desk A if there are any books left\n        if num_books_read < N and time_taken + A[num_books_read] <= K:\n            time_taken += A[num_books_read]\n            num_books_read += 1\n        # Read from desk B if there are any books left\n        elif num_books_read < N + M and time_taken + B[num_books_read - N] <= K:\n            time_taken += B[num_books_read - N]\n            num_books_read += 1\n\n    # Return number of books read\n    return num_books_read"
    },
    {
        "number": 4591,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    total_cost = A * X + B * Y\n    if X >= Y:\n        total_cost += C * (X // 2 + X % 2)\n    else:\n        total_cost += C * (Y // 2 + Y % 2)\n    return str(total_cost)"
    },
    {
        "number": 4592,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    mod = 10**9+7\n    fact = 1\n    for i in range(1, n+1):\n        fact = (fact*i) % mod\n    div = 0\n    for i in range(1, n+1):\n        if fact % i == 0:\n            div += 1\n    return div % mod"
    },
    {
        "number": 4593,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    max_power = 0\n    for i in range(2, int(X**0.5)+1):\n        if X % i == 0:\n            power = 0\n            while X % i == 0:\n                X //= i\n                power += 1\n            if power > max_power:\n                max_power = power\n    if X > 1:\n        max_power = max(max_power, 1)\n    return str(max_power)"
    },
    {
        "number": 4594,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    diameters = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_layers = 1\n    current_diameter = diameters[0]\n\n    # Iterate through diameters and update max_layers\n    for i in range(1, N):\n        if diameters[i] < current_diameter:\n            max_layers += 1\n            current_diameter = diameters[i]\n\n    # Return result\n    return str(max_layers)"
    },
    {
        "number": 4595,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    for i in range(len(s)):\n        if s[i] == 'A' and s[i+4] == 'Z':\n            return len(s[i+1:i+5])\n    return 0"
    },
    {
        "number": 4596,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    while True:\n        odd_found = False\n        for i in range(n):\n            if a[i] % 2 == 1:\n                odd_found = True\n                break\n        if not odd_found:\n            break\n        for i in range(n):\n            a[i] //= 2\n        count += 1\n    return str(count)"
    },
    {
        "number": 4597,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    MOD = 10**9 + 7\n    power = 1\n    for i in range(1, N+1):\n        power = (power * i) % MOD\n    return str(power)"
    },
    {
        "number": 4598,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    candies = [i+1 for i in range(n)]\n    return str(sum(candies))"
    },
    {
        "number": 4599,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    cards = list(map(int, stdin.readline().strip().split()))\n\n    # Calculate optimal strategy\n    alice_score = sum(cards)\n    bob_score = 0\n    for i in range(N):\n        if i % 2 == 0:\n            alice_score -= cards[i]\n        else:\n            bob_score += cards[i]\n\n    # Print result\n    return str(alice_score - bob_score)"
    },
    {
        "number": 4600,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.readline().split())\n    submissions = []\n    for _ in range(m):\n        p, s = stdin.readline().split()\n        submissions.append((int(p), s))\n\n    # Count correct and penalties\n    correct = 0\n    penalties = 0\n    for p, s in submissions:\n        if s == \"AC\":\n            correct += 1\n            penalties += sum(1 for p2, s2 in submissions if p2 == p and s2 == \"WA\" and s!= \"AC\")\n\n    # Print result\n    return f\"{correct} {penalties}\""
    },
    {
        "number": 4601,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.readline().split())\n    H = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    count = 0\n    health = H.copy()\n\n    # Loop until all monsters are dead or K special moves are used\n    while sum(health) > 0 and count < K:\n        # Find the monster with the highest health\n        max_health = max(health)\n        max_index = health.index(max_health)\n\n        # If the monster has health 1, use Special Move\n        if max_health == 1:\n            health[max_index] = 0\n            count += 1\n        # Otherwise, use Attack\n        else:\n            health[max_index] -= 1\n            count += 1\n\n    # Return the number of Attacks needed to win\n    return count"
    },
    {
        "number": 4602,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    min_dist = float('inf')\n    for i in range(N):\n        # Calculate distance covered by type-A robot\n        dist_a = abs(x[i] - 0)\n        # Calculate distance covered by type-B robot\n        dist_b = abs(x[i] - K)\n        # Update minimum distance\n        min_dist = min(min_dist, dist_a + dist_b)\n\n    return str(min_dist)"
    },
    {
        "number": 4603,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    train_fare = min(A, B)\n    bus_fare = min(C, D)\n    return str(train_fare + bus_fare)"
    },
    {
        "number": 4604,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Check if there is a consistent order\n    if len(set(A))!= N:\n        return \"0\"\n\n    # Calculate the number of possible orders\n    MOD = 10**9 + 7\n    count = 1\n    for i in range(1, N):\n        count = (count * (i - A[i-1]) * (N - i - A[i-1])) % MOD\n\n    return str(count)"
    },
    {
        "number": 4605,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    total = 0\n    for i in range(1, n+1):\n        if sum(int(digit) for digit in str(i)) >= a and sum(int(digit) for digit in str(i)) <= b:\n            total += i\n    return str(total)"
    },
    {
        "number": 4606,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    abc = \"ABC\"\n    return abc + str(n)"
    },
    {
        "number": 4607,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    takahashi_count = 0\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            if i == j:\n                takahashi_count += 1\n    return str(takahashi_count)"
    },
    {
        "number": 4608,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Check if it is possible to lighten up Button 2\n    if a[1] == 2:\n        return \"0\"\n\n    # Initialize variables\n    count = 0\n    i = 1\n\n    # Press buttons until Button 2 is lighten up\n    while i!= 2:\n        if a[i] == i:\n            count += 1\n            i = a[i]\n        else:\n            i += 1\n\n    # Return result\n    if i == 2:\n        return str(count)\n    else:\n        return \"-1\""
    },
    {
        "number": 4609,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split()]\n    count = 0\n    for i in range(N):\n        if A[i] in A[:i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4610,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Sort the array\n    A.sort()\n\n    # Initialize variables\n    count = 0\n    i = 0\n    j = N - 1\n\n    # Loop through the array\n    while i <= j:\n        # If the difference between the two integers is less than or equal to K, increment count\n        if A[j] - A[i] <= K:\n            count += 1\n            i += 1\n            j -= 1\n        # If the difference is greater than K, decrement j\n        else:\n            j -= 1\n\n    # Return the minimum number of balls needed to rewrite the integers\n    return count"
    },
    {
        "number": 4611,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    points = []\n    for i in range(1, N+1):\n        t, x, y = map(int, lines[i].split())\n        points.append((t, x, y))\n\n    # Check if AtCoDeer can carry out his plan\n    visited = set()\n    for i in range(N):\n        t, x, y = points[i]\n        if (x, y) in visited:\n            return 'No'\n        visited.add((x, y))\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x+dx, y+dy\n            if (nx, ny) in visited:\n                continue\n            for j in range(i+1, N):\n                if points[j][1] == nx and points[j][2] == ny:\n                    break\n            else:\n                return 'No'\n\n    return 'Yes'"
    },
    {
        "number": 4612,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = (a + b) / 2\n    return str(int(math.ceil(x)))"
    },
    {
        "number": 4613,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().split())\n    edges = [tuple(map(int, stdin.readline().split())) for _ in range(M)]\n\n    # Initialize adjacency list\n    adj = [[] for _ in range(N+1)]\n    for a, b in edges:\n        adj[a].append(b)\n        adj[b].append(a)\n\n    # DFS to find bridges\n    def dfs(u, parent, low, disc, is_visited):\n        is_visited[u] = True\n        disc[u] = low[u] = time\n        for v in adj[u]:\n            if v == parent:\n                continue\n            if not is_visited[v]:\n                dfs(v, u, low, disc, is_visited)\n                low[u] = min(low[u], low[v])\n                if low[v] > disc[u]:\n                    bridges.append((u, v))\n            elif v!= parent:\n                low[u] = min(low[u], disc[v])\n\n    bridges = []\n    time = 0\n    for u in range(1, N+1):\n        if not bridges and not adj[u]:\n            continue\n        is_visited = [False] * (N+1)\n        disc = [float('inf')] * (N+1)\n        low = [float('inf')] * (N+1)\n        dfs(u, -1, low, disc, is_visited)\n        time += 1\n\n    # Count bridges\n    count = 0\n    for u, v in bridges:\n        if u < v:\n            u, v = v, u\n        if (u, v) not in edges and (v, u) not in edges:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4614,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B:\n        return str(C)\n    elif A == C:\n        return str(B)\n    else:\n        return str(A)"
    },
    {
        "number": 4615,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = map(int, stdin.split())\n    water = 0\n    sugar = 0\n    if A + B <= F:\n        water = F\n        sugar = 0\n    else:\n        water = A + B\n        sugar = min(C, D)\n        if sugar > E:\n            sugar = E\n        water = water * sugar // (A + B)\n        sugar = sugar * E // (A + B)\n    return f\"{water} {sugar}\""
    },
    {
        "number": 4616,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return s[:3] + str(len(s) - 2) + s[-1]"
    },
    {
        "number": 4617,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    grid = [list(stdin.strip().split()) for _ in range(2)]\n    rotated_grid = [list(row[::-1]) for row in grid]\n    if grid == rotated_grid:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4618,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.strip().split()\n    k = int(k)\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.add(s[i:j])\n    substrings = sorted(list(substrings))\n    return substrings[k-1]"
    },
    {
        "number": 4619,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    W, H, N = map(int, stdin.readline().split())\n    points = []\n    for _ in range(N):\n        x, y, a = map(int, stdin.readline().split())\n        points.append((x, y, a))\n\n    # paint the rectangle\n    white_area = W * H\n    for x, y, a in points:\n        if a == 1:\n            white_area -= (x + 1) * H\n        elif a == 2:\n            white_area -= W - x\n        elif a == 3:\n            white_area -= (y + 1) * W\n        elif a == 4:\n            white_area -= H - y\n\n    return str(white_area)"
    },
    {
        "number": 4620,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    trains = []\n    for i in range(1, n):\n        c, s, f = map(int, lines[i].split())\n        trains.append((c, s, f))\n    dp = [float('inf')] * n\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if trains[j][1] % trains[i][2] == 0:\n                dp[i] = min(dp[i], dp[j] + trains[j][0] + trains[i][1])\n    return '\\n'.join(map(str, dp))"
    },
    {
        "number": 4621,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    H, W = map(int, stdin.readline().split())\n    image = [list(stdin.readline().strip()) for _ in range(H)]\n\n    # Extend image vertically\n    extended_image = []\n    for i in range(H):\n        extended_image.append(image[i])\n        extended_image.append(image[i])\n\n    # Print extended image\n    for row in extended_image:\n        print(''.join(row))\n\n    return ''"
    },
    {
        "number": 4622,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if len(set(a)) == n:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4623,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        weights = list(map(int, stdin.readline().strip().split()))\n        max_weight = sum(weights) // 2\n        if max_weight == 0:\n            print(1)\n            continue\n        dp = [0] * (max_weight + 1)\n        dp[0] = 1\n        for w in weights:\n            for j in range(max_weight, w - 1, -1):\n                dp[j] += dp[j - w]\n        print(dp[-1])\n    return \"\""
    },
    {
        "number": 4624,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, x = map(int, stdin.readline().strip().split())\n        floor = 1\n        while n > 0:\n            n -= x\n            if n >= 0:\n                floor += 1\n            else:\n                break\n        print(floor)\n    return \"\""
    },
    {
        "number": 4625,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        p = list(map(int, stdin.readline().strip().split()))\n        ans = [0] * 26\n        for j in range(m+1):\n            if j == m:\n                for k in range(n):\n                    ans[ord(s[k]) - ord('a')] += 1\n            else:\n                for k in range(p[j]):\n                    ans[ord(s[k]) - ord('a')] += 1\n                for k in range(p[j], n):\n                    ans[ord(s[k]) - ord('a')] += 1\n        print(*ans)"
    },
    {
        "number": 4626,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    for i in range(1, q+1):\n        a, b, c = map(int, lines[i].split())\n        if a == b == c:\n            print(0)\n        else:\n            x = [a, b, c]\n            for j in range(1, 60):\n                for k in range(3):\n                    if x[k] > 1:\n                        x[k] -= 1\n                    elif x[k] < 1000000000:\n                        x[k] += 1\n                    else:\n                        x[k] -= 1\n                if x[0] == x[1] == x[2]:\n                    print(sum(abs(x[i]-x[j]) for i in range(3) for j in range(i+1, 3)))\n                    break\n            else:\n                print(-1)\n    return \"\""
    },
    {
        "number": 4627,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        pairs = set()\n        for num in a:\n            if num % 2 == 0:\n                pairs.add((num, num))\n            else:\n                pairs.add((num, num+1))\n        if len(pairs) == n:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 4628,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = []\n    for i in range(m):\n        x, y, w = map(int, stdin.split())\n        roads.append((x, y, w))\n    routes = []\n    for i in range(k):\n        a, b = map(int, stdin.split())\n        routes.append((a, b))\n    # Build the graph\n    graph = [[] for _ in range(n+1)]\n    for x, y, w in roads:\n        graph[x].append((y, w))\n        graph[y].append((x, w))\n    # Compute the shortest path\n    dist = [float('inf')] * (n+1)\n    dist[1] = 0\n    visited = [False] * (n+1)\n    while True:\n        u = min(range(1, n+1), key=lambda x: dist[x])\n        if visited[u]:\n            break\n        visited[u] = True\n        for v, w in graph[u]:\n            if dist[u] + w < dist[v]:\n                dist[v] = dist[u] + w\n    # Compute the minimum total cost\n    min_cost = 0\n    for a, b in routes:\n        min_cost += dist[a] + dist[b]\n    return str(min_cost)"
    },
    {
        "number": 4629,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        n = int(stdin.readline().strip())\n        m = n\n        while True:\n            if is_good(m):\n                break\n            m += 1\n        print(m)\n\ndef"
    },
    {
        "number": 4630,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        n = int(stdin.readline().strip())\n        p = list(map(int, stdin.readline().strip().split()))\n        dp = [0] * n\n        for i in range(n):\n            dp[p[i]-1] = i+1\n        for i in range(n):\n            dp[i] = min(dp[i], dp[p[i]-1]+1)\n        print(*dp)\n    return \"\""
    },
    {
        "number": 4631,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    res = float('inf')\n    ans = []\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == j:\n                continue\n            d = abs(x[i-1] - j)\n            if d < res:\n                res = d\n                ans = [j]\n            elif d == res:\n                ans.append(j)\n    return str(res) + '\\n' +''.join(map(str, ans))"
    },
    {
        "number": 4632,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i*2-1])\n        packages = []\n        for j in range(i*2, i*2+n):\n            x, y = map(int, lines[j].split())\n            packages.append((x, y))\n        # solve problem\n        visited = set()\n        queue = [(0, 0, '')]\n        while queue:\n            x, y, path = queue.pop(0)\n            if (x, y) in visited:\n                continue\n            visited.add((x, y))\n            if len(visited) == n:\n                return 'YES\\n' + path\n            for dx, dy in [(0, 1), (1, 0)]:\n                nx, ny = x+dx, y+dy\n                if (nx, ny) in visited:\n                    continue\n                if (nx, ny) in packages:\n                    continue\n                queue.append((nx, ny, path+'R'))\n                queue.append((nx, ny, path+'U'))\n        return 'NO'"
    },
    {
        "number": 4633,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, s = map(int, stdin.readline().strip().split())\n        count = 0\n        while n > s:\n            n = sum(int(digit) for digit in str(n))\n            count += 1\n        print(count)"
    },
    {
        "number": 4634,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        ans = 0\n        for j in range(n):\n            if a[j] == 1:\n                if j == n-1 or a[j+1] == 0:\n                    ans += 1\n                if j == 0 or a[j-1] == 0:\n                    ans += 1\n        print(ans)"
    },
    {
        "number": 4635,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        s = \"\"\n        for j in range(k):\n            s += chr(ord('a') + j)\n        for j in range(k, n):\n            s += chr(ord('a') + (j - k) % 26)\n        print(s)"
    },
    {
        "number": 4636,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t*3, 3):\n        n = int(lines[i])\n        a = list(map(int, lines[i+1].split()))\n        moves = 0\n        alice_total = 0\n        bob_total = 0\n        while len(a) > 0:\n            moves += 1\n            if len(a) == 1:\n                alice_total += a[0]\n                break\n            if len(a) == 2:\n                alice_total += a[0]\n                bob_total += a[1]\n                break\n            if len(a) % 2 == 0:\n                alice_total += a[0]\n                bob_total += a[1]\n                a = a[2:]\n            else:\n                alice_total += a[0]\n                a = a[1:]\n            if alice_total > bob_total:\n                break\n        print(moves, alice_total, bob_total)"
    },
    {
        "number": 4637,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        b = list(map(int, stdin.readline().strip().split()))\n        dp = [[0] * (n+1) for _ in range(n+1)]\n        for i in range(n):\n            for j in range(n):\n                dp[i+1][j+1] = max(dp[i][j+1], dp[i+1][j]) + a[i] * b[j]\n        ans = dp[n][n]\n        for i in range(k):\n            ans = max(ans, dp[i][n-i-1])\n        print(ans)\n    return \"\""
    },
    {
        "number": 4638,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:n+2]))\n    b = list(map(int, stdin.split()[n+2:]))\n    t = [0] * n\n    for i in range(1, n):\n        t[i] = t[i-1] + a[i-1] + b[i-1]\n    for i in range(n-2, -1, -1):\n        t[i] = min(t[i], t[i+1] + a[i] + b[i])\n    return''.join(map(str, t))"
    },
    {
        "number": 4639,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        if k > n*(n-1)//2:\n            return \"Invalid input\"\n        if k == 1:\n            return \"abb\"\n        if k == 2:\n            return \"bab\"\n        if k == n*(n-1)//2:\n            return \"aaaaabaaaaabaaaaaaaa\"\n        if k <= n-2:\n            return \"a\"*(n-2) + \"b\"*(2)\n        if k <= n*(n-1)//2 - (n-2)*(n-3)//2:\n            return \"a\"*(n-2) + \"b\"*(2) + \"a\"*(k-n+2)\n        if k <= n*(n-1)//2 - (n-2)*(n-3)//2 + n-2:\n            return \"a\"*(n-2) + \"b\"*(2) + \"b\"*(k-(n*(n-1)//2 - (n-2)*(n-3)//2))\n        if k <= n*(n-1)//2 - (n-2)*(n-3)//2 + n-2 + n-3:\n            return \"a\"*(n-2) + \"b\"*(2) + \"b\"*(n-3) + \"a\"*(k-(n*(n-1)//2 - (n-2)*(n-3)//2 + n-2))\n        if k <= n*(n-1)//2 - (n-2)*(n-3)//2 + n-2 + n-3 + n-4:\n            return \"a\"*(n-2) + \"b\"*(2) + \"b\"*(n-3) + \"b\"*(n-4) + \"a\"*(k-(n*(n-1)//2 - (n-2)*(n-3)//2 + n-2 + n-3))\n        if k <= n*(n-1)//2 - (n-2)*(n-3)//2 + n-2 + n-3 + n-4 + n-5:\n            return \"a\"*(n-2) + \"b\"*(2) + \"b\"*(n-3) + \"b\"*(n-4) + \"b\"*(n-5) + \"a\"*(k-(n*(n-1)//2 - (n-2)*(n-3)//2 + n-2 + n-3 + n-4))\n        if k <= n*(n-1)//2 - (n-2)*(n-3)//2 + n-2 + n-3 + n-4 + n-5 + n-6:\n            return \"a\"*(n-2) + \"b\"*(2) + \"b\"*(n-3) + \"b\"*(n-4) + \"b\"*(n-5) + \"b\"*(n-6) + \"a\"*(k-(n*(n-1)//2 - (n-2)*(n-3)//2 + n-2 + n-3 + n-4 + n-5))\n        if k <= n*(n-1)//2 - (n-2)*(n-3)//2 + n-2 + n-3 + n-4 + n-5 + n-6 + n-7:\n            return \"a\"*(n-2) + \"b\"*(2) + \"b\"*(n-3) + \"b\"*(n-4) + \"b\"*(n-5) + \"b\"*(n-6) + \"b\"*(n-7) + \"a\"*(k-(n*(n-1)//2 - (n-2)*(n-3)//2 + n-2 + n-3 + n-4 + n-5 + n-6))\n        if k <= n*(n-1)//2 - (n-2)*(n-3)//2 + n-2 + n-3 + n-4 + n-5 + n-6 + n-7 + n-8:\n            return \"a\"*(n-2) + \"b\"*(2) + \"b\"*(n-3) + \"b\"*(n-4) + \"b\"*(n-5) + \"b\"*(n-6) + \"b\"*(n-7) + \"b\"*(n-8) + \"a\"*(k-(n*(n-1)//2 - (n-2)*(n-3)//2 + n-2 + n-3 + n-4 + n-5 + n-6 + n-7))\n        "
    },
    {
        "number": 4640,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4641,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q, x = map(int, stdin.split())\n    a = []\n    for j in range(q):\n        y = int(stdin.readline())\n        a.append(y)\n        mex = max(a) + 1\n        for i in range(len(a)):\n            a[i] += x\n            if a[i] < 0:\n                a[i] = 0\n            mex = min(mex, a[i])\n        print(mex)\n    return \"\""
    },
    {
        "number": 4642,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, x, y = map(int, stdin.readline().strip().split())\n        if x == y:\n            print(n * [x])\n        else:\n            a = [x]\n            for j in range(n-1):\n                a.append(a[-1] + (y-x)//(n-j-1))\n            a.append(y)\n            print(*a)\n    return \"\""
    },
    {
        "number": 4643,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    return''.join(map(str, arr))"
    },
    {
        "number": 4644,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        odd_sum = False\n        for j in range(n):\n            for k in range(j+1, n):\n                if a[j] == a[k]:\n                    continue\n                a[j], a[k] = a[k], a[j]\n                if sum(a) % 2 == 1:\n                    odd_sum = True\n                    break\n                a[j], a[k] = a[k], a[j]\n            if odd_sum:\n                break\n        if odd_sum:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4645,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        if n < 2:\n            print(-1)\n            continue\n        p = list(range(1, n+1))\n        for i in range(n-1):\n            if abs(p[i] - p[i+1]) < 2 or abs(p[i] - p[i+1]) > 4:\n                p[i+1] = p[i] + 2 if p[i] < p[i+1] else p[i] - 2\n        if p[-1] - p[0] < 2 or p[-1] - p[0] > 4:\n            p[0] = p[-1] - 2\n        print(' '.join(map(str, p)))\n    return \"\""
    },
    {
        "number": 4646,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        count = 0\n        for j in range(n):\n            if j % 2 == a[j] % 2:\n                continue\n            else:\n                count += 1\n                if count > 1:\n                    return -1\n                a[j], a[j+1] = a[j+1], a[j]\n        if count == 1:\n            return -1\n        print(count)\n    return \"\""
    },
    {
        "number": 4647,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    adj = [[] for _ in range(n)]\n    for i in range(n-1):\n        u, v = map(int, stdin.readline().strip().split())\n        adj[u-1].append(v-1)\n        adj[v-1].append(u-1)\n    res = [-1] * n\n    def dfs(u, c):\n        if c == 0:\n            res[u] = 0\n            return\n        for v in adj[u]:\n            if res[v] == -1:\n                dfs(v, c-a[v])\n                res[u] = max(res[u], res[v])\n        if res[u] == -1:\n            res[u] = 0\n        else:\n            res[u] += 1\n    for i in range(n):\n        if res[i] == -1:\n            dfs(i, 1)\n    return''.join(map(str, res))"
    },
    {
        "number": 4648,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        count = 0\n        while n!= 1:\n            if n % 6 == 0:\n                n //= 6\n            else:\n                n *= 2\n            count += 1\n        print(count if n == 1 else -1)"
    },
    {
        "number": 4649,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    for i in range(1, q+1):\n        n, k = map(int, lines[2*i-1].split())\n        s = lines[2*i]\n        count = 0\n        for j in range(n):\n            if s[j] == 'R':\n                count += 1\n            elif s[j] == 'G':\n                count -= 1\n            if count == k:\n                break\n        print(count)"
    },
    {
        "number": 4650,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        count = 0\n        for j in range(n):\n            for k in range(j+1, n):\n                if a[j] % 3 == 0 and a[k] % 3 == 0:\n                    a[j] += a[k]\n                    a[k] = a[j] - a[k]\n                    a[j] -= a[k]\n                    count += 1\n        print(count)"
    },
    {
        "number": 4651,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        n = int(stdin.readline().strip())\n        p = list(map(int, stdin.readline().strip().split()))\n        # find the minimum permutation\n        for i in range(n-1):\n            for j in range(i+1, n):\n                if p[i] > p[j]:\n                    p[i], p[j] = p[j], p[i]\n        # print the result\n        print(' '.join(map(str, p)))\n    return \"\""
    },
    {
        "number": 4652,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        n = int(stdin.readline().strip())\n        p = list(map(int, stdin.readline().strip().split()))\n        if p[0] == 1 and p[-1] == n:\n            print(\"YES\")\n        elif p[0] == n and p[-1] == 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4653,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        a = n // k\n        b = n // (k - 1)\n        if b - a <= 1 and n % k <= k // 2:\n            print(n)\n        else:\n            print(b)\n    return \"\""
    },
    {
        "number": 4654,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n'):\n        if line:\n            n, k = map(int, line.split())\n            if k > n:\n                print('NO')\n            else:\n                a = [i for i in range(1, n+1) if i % 2 == (n-i) % 2]\n                if len(a) < k:\n                    print('NO')\n                else:\n                    print('YES')\n                    print(' '.join(map(str, a[:k])))"
    },
    {
        "number": 4655,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    for i in range(1, q+1):\n        a, b, c = map(int, lines[i].split())\n        if a >= b and a >= c:\n            print(a)\n        elif b >= a and b >= c:\n            print(b)\n        else:\n            print(c)\n    return ''"
    },
    {
        "number": 4656,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        if k == 1:\n            print(n)\n            continue\n        if k > n:\n            print(0)\n            continue\n        if k == n:\n            print(1)\n            continue\n        if k == 2:\n            print(2)\n            continue\n        if k == 3:\n            print(3)\n            continue\n        if k == 4:\n            print(4)\n            continue\n        if k == 5:\n            print(5)\n            continue\n        if k == 6:\n            print(6)\n            continue\n        if k == 7:\n            print(7)\n            continue\n        if k == 8:\n            print(8)\n            continue\n        if k == 9:\n            print(9)\n            continue\n        if k == 10:\n            print(10)\n            continue\n        if k == 11:\n            print(11)\n            continue\n        if k == 12:\n            print(12)\n            continue\n        if k == 13:\n            print(13)\n            continue\n        if k == 14:\n            print(14)\n            continue\n        if k == 15:\n            print(15)\n            continue\n        if k == 16:\n            print(16)\n            continue\n        if k == 17:\n            print(17)\n            continue\n        if k == 18:\n            print(18)\n            continue\n        if k == 19:\n            print(19)\n            continue\n        if k == 20:\n            print(20)\n            continue\n        if k == 21:\n            print(21)\n            continue\n        if k == 22:\n            print(22)\n            continue\n        if k == 23:\n            print(23)\n            continue\n        if k == 24:\n            print(24)\n            continue\n        if k == 25:\n            print(25)\n            continue\n        if k == 26:\n            print(26)\n            continue\n        if k == 27:\n            print(27)\n            continue\n        if k == 28:\n            print(28)\n            continue\n        if k == 29:\n            print(29)\n            continue\n        if k == 30:\n            print(30)\n            continue\n        if k == 31:\n            print(31)\n            continue\n        if k == 32:\n            print(32)\n            continue\n        if k == 33:\n            print(33)\n            continue\n        if k == 34:\n            print(34)\n            continue\n        if k == 35:\n            print(35)\n            continue\n        if k == 36:\n            print(36)\n            continue\n        if k == 37:\n            print(37)\n            continue\n        if k == 38:\n            print(38)\n            continue\n        if k == 39:\n            print(39)\n            continue\n        if k == 40:\n            print(40)\n            continue\n        if k == 41:\n            print(41)\n            continue\n        if k == 42:\n            print(42)\n            continue\n        if k == 43:\n            print(43)\n            continue\n        if k == 44:\n            print(44)\n            continue\n        if k == 45:\n            print(45)\n            continue\n        if k == 46:\n            print(46)\n            continue\n        if k == 47:\n            print(47)\n            continue\n        if k == 48:\n            print(48)\n            continue\n        if k == 49:\n            print(49)\n            continue\n        if k == 50:\n            print(50)\n            continue\n        if k == 51:\n            print(51)\n            continue\n        if k == 52:\n            print(52)\n            continue\n        if k == 53:\n            print(53)\n            continue\n        if k == 54:\n            print(54)\n            continue\n        if k == 55:\n            print(55)\n            continue\n        if k == 56:\n            print(56)\n            continue\n        if k == 57:\n            print(57)\n            continue\n        if k == 58:\n            print(58)\n            continue\n        if k == 59:\n            print(59)\n            continue\n        if k == 60:\n            print(60)\n            continue\n        if k == 61:\n            print("
    },
    {
        "number": 4657,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split('\\n')\n    for i in range(1, len(queries), 2):\n        n, k = map(int, queries[i-1].split())\n        a = list(map(int, queries[i].split()))\n        if k > n:\n            print(\"NO\")\n            continue\n        if sum(a) % 2 == 0:\n            print(\"NO\")\n            continue\n        a.sort()\n        if a[-1] % 2 == 0:\n            print(\"NO\")\n            continue\n        if k == 1:\n            print(\"YES\")\n            print(1, n)\n            continue\n        if k == 2:\n            if a[0] % 2 == 0:\n                print(\"NO\")\n                continue\n            print(\"YES\")\n            print(1, a[0], n)\n            continue\n        if k == 3:\n            if a[0] % 2 == 0 or a[1] % 2 == 0:\n                print(\"NO\")\n                continue\n            print(\"YES\")\n            print(1, a[0], a[1], n)\n            continue\n        if k == 4:\n            if a[0] % 2 == 0 or a[1] % 2 == 0 or a[2] % 2 == 0:\n                print(\"NO\")\n                continue\n            print(\"YES\")\n            print(1, a[0], a[1], a[2], n)\n            continue\n        if k == 5:\n            if a[0] % 2 == 0 or a[1] % 2 == 0 or a[2] % 2 == 0 or a[3] % 2 == 0:\n                print(\"NO\")\n                continue\n            print(\"YES\")\n            print(1, a[0], a[1], a[2], a[3], n)\n            continue\n        if k == 6:\n            if a[0] % 2 == 0 or a[1] % 2 == 0 or a[2] % 2 == 0 or a[3] % 2 == 0 or a[4] % 2 == 0:\n                print(\"NO\")\n                continue\n            print(\"YES\")\n            print(1, a[0], a[1], a[2], a[3], a[4], n)\n            continue\n        if k == 7:\n            if a[0] % 2 == 0 or a[1] % 2 == 0 or a[2] % 2 == 0 or a[3] % 2 == 0 or a[4] % 2 == 0 or a[5] % 2 == 0:\n                print(\"NO\")\n                continue\n            print(\"YES\")\n            print(1, a[0], a[1], a[2], a[3], a[4], a[5], n)\n            continue\n        if k == 8:\n            if a[0] % 2 == 0 or a[1] % 2 == 0 or a[2] % 2 == 0 or a[3] % 2 == 0 or a[4] % 2 == 0 or a[5] % 2 == 0 or a[6] % 2 == 0:\n                print(\"NO\")\n                continue\n            print(\"YES\")\n            print(1, a[0], a[1], a[2], a[3], a[4], a[5], a[6], n)\n            continue\n        if k == 9:\n            if a[0] % 2 == 0 or a[1] % 2 == 0 or a[2] % 2 == 0 or a[3] % 2 == 0 or a[4] % 2 == 0 or a[5] % 2 == 0 or a[6] % 2 == 0 or a[7] % 2 == 0:\n                print(\"NO\")\n                continue\n            print(\"YES\")\n            print(1, a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], n)\n            continue\n        if k == 10:\n            if a[0] % 2 == 0 or a[1] % 2 == 0 or a[2] % 2 == 0 or a[3] % 2 == 0 or a[4] % 2 == 0 or a[5] % 2 == 0 or a[6] % 2 == 0 or a[7] % 2 == 0 or a[8] % 2 == 0:"
    },
    {
        "number": 4658,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input string to integer\n    n = int(stdin, 2)\n    # Reverse bits using bitwise operations\n    reversed_n = 0\n    for i in range(32):\n        reversed_n <<= 1\n        reversed_n |= n & 1\n        n >>= 1\n    # Convert reversed integer to binary string\n    reversed_binary = bin(reversed_n)[2:]\n    # Pad with leading zeros if necessary\n    reversed_binary = reversed_binary.zfill(32)\n    # Return reversed binary string\n    return reversed_binary"
    },
    {
        "number": 4659,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    numRows = int(stdin)\n    result = []\n    for i in range(numRows):\n        row = [1] * (i + 1)\n        for j in range(1, i):\n            row[j] = result[i-1][j-1] + result[i-1][j]\n        result.append(row)\n    return result"
    },
    {
        "number": 4660,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    email_list = []\n    for i in range(n):\n        email = stdin.readline().strip()\n        if re.match(r\"^[a-zA-Z0-9_-]+@[a-zA-Z0-9]+\\.[a-zA-Z]{1,3}$\", email):\n            email_list.append(email)\n    email_list.sort()\n    return email_list"
    },
    {
        "number": 4661,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    return list(map(lambda x: x**3, fib))"
    },
    {
        "number": 4662,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    xml = '\\n'.join(lines[1:])\n    max_level = 0\n    level = 0\n    for char in xml:\n        if char == '<':\n            level += 1\n            max_level = max(max_level, level)\n        elif char == '>':\n            level -= 1\n    return str(max_level)"
    },
    {
        "number": 4663,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    inputs = [stdin.readline().strip() for _ in range(n)]\n\n    # define regex pattern\n    pattern = r'^[7-9]\\d{9}$'\n\n    # check each input against pattern\n    for input_str in inputs:\n        if re.match(pattern, input_str):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n    return \"\""
    },
    {
        "number": 4664,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    m = int(stdin.readline().strip())\n    m_set = set(map(int, stdin.readline().strip().split()))\n    n = int(stdin.readline().strip())\n    n_set = set(map(int, stdin.readline().strip().split()))\n\n    # Calculating symmetric difference\n    sym_diff = m_set.symmetric_difference(n_set)\n\n    # Converting set to list and sorting\n    sym_diff_list = sorted(list(sym_diff))\n\n    # Converting list to string and returning\n    return '\\n'.join(map(str, sym_diff_list))\n"
    },
    {
        "number": 4665,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    col_names = lines[1].split()\n    students = []\n    for i in range(2, 2+N):\n        student = lines[i].split()\n        student_dict = {}\n        for j in range(len(col_names)):\n            student_dict[col_names[j]] = student[j]\n        students.append(student_dict)\n\n    # Calculating average marks\n    total_marks = 0\n    for student in students:\n        total_marks += int(student['MARKS'])\n    avg_marks = round(total_marks/N, 2)\n\n    # Printing output\n    return str(avg_marks)"
    },
    {
        "number": 4666,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return \"Weird\"\n    elif n % 2 == 0 and 2 <= n <= 5:\n        return \"Not Weird\"\n    elif n % 2 == 0 and 6 <= n <= 20:\n        return \"Weird\"\n    elif n % 2 == 0 and n > 20:\n        return \"Not Weird\""
    },
    {
        "number": 4667,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    xml = '\\n'.join(lines[1:])\n    score = 0\n    stack = []\n    for line in xml.split('\\n'):\n        if line.startswith('<'):\n            stack.append(line)\n        elif line.startswith('</'):\n            stack.pop()\n        else:\n            score += len(line.strip().split())\n    return str(score)"
    },
    {
        "number": 4668,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    A, B, C, D = map(float, stdin.split())\n\n    # Calculating vectors\n    AB = (B[0]-A[0], B[1]-A[1], B[2]-A[2])\n    BC = (C[0]-B[0], C[1]-B[1], C[2]-B[2])\n    CD = (D[0]-C[0], D[1]-C[1], D[2]-C[2])\n\n    # Calculating cross product\n    X = (AB[1]*BC[2]-AB[2]*BC[1], AB[2]*BC[0]-AB[0]*BC[2], AB[0]*BC[1]-AB[1]*BC[0])\n\n    # Calculating dot product\n    Y = (X[0]*CD[0]+X[1]*CD[1]+X[2]*CD[2])\n\n    # Calculating angle\n    angle = round(math.degrees(math.acos(Y/(math.sqrt(X[0]**2+X[1]**2+X[2]**2)*math.sqrt(CD[0]**2+CD[1]**2+CD[2]**2)))), 2)\n\n    # Returning output\n    return str(angle)"
    },
    {
        "number": 4669,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    n = int(words[0])\n    words = words[1:]\n    score = 0\n    for word in words:\n        vowels = 0\n        for letter in word:\n            if letter in ['a', 'e', 'i', 'o', 'u', 'y']:\n                vowels += 1\n        if vowels % 2 == 0:\n            score += 2\n        else:\n            score += 1\n    return str(score)"
    },
    {
        "number": 4670,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Define a regular expression for a valid Roman numeral\n    regex = r\"^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$\"\n    \n    # Check if the input string matches the regular expression\n    if re.match(regex, stdin):\n        return \"True\"\n    else:\n        return \"False\""
    },
    {
        "number": 4671,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    mobile_numbers = []\n    for i in range(n):\n        mobile_numbers.append(stdin.readline().strip())\n\n    # sort mobile numbers\n    mobile_numbers.sort()\n\n    # print mobile numbers in required format\n    for number in mobile_numbers:\n        if len(number) == 10:\n            print(\"+91 \" + number[:3] + \" \" + number[3:])\n        elif len(number) == 12 and number.startswith(\"0\"):\n            print(\"+91 \" + number[1:4] + \" \" + number[4:])\n        elif len(number) == 13 and number.startswith(\"+91\"):\n            print(number[3:6] + \" \" + number[6:])\n        elif len(number) == 13 and number.startswith(\"91\"):\n            print(\"+91 \" + number[2:5] + \" \" + number[5:])\n        else:\n            print(number)\n\n    return \"\""
    },
    {
        "number": 4672,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    marks = {}\n    for i in range(n):\n        name, *marks_list = stdin.readline().strip().split()\n        marks[name] = list(map(int, marks_list))\n    query_name = stdin.readline().strip()\n    avg_marks = sum(marks[query_name])/len(marks[query_name])\n    return f\"{avg_marks:.2f}\""
    },
    {
        "number": 4673,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    people = []\n    for i in range(1, n+1):\n        first_name, last_name, age, sex = lines[i].split()\n        people.append({'first_name': first_name, 'last_name': last_name, 'age': int(age),'sex': sex})\n\n    # Sort people by age and then by input order\n    people.sort(key=lambda x: (x['age'], x['first_name'], x['last_name']))\n\n    # Print names in desired format\n    for person in people:\n        if person['sex'] == 'M':\n            print(f\"Mr. {person['first_name']} {person['last_name']}\")\n        else:\n            print(f\"Ms. {person['first_name']} {person['last_name']}\")\n\n    return ''"
    },
    {
        "number": 4674,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, n = map(int, stdin.split())\n    result = [[i, j, k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if i+j+k!= n]\n    result.sort()\n    return str(result)"
    },
    {
        "number": 4675,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    a, b = map(float, stdin.split())\n\n    # Create complex numbers\n    c = complex(a, b)\n    d = complex(1, 2)\n\n    # Addition\n    e = c + d\n    # Subtraction\n    f = c - d\n    # Multiplication\n    g = c * d\n    # Division\n    h = c / d\n    # Modulus\n    i = abs(c)\n    j = abs(d)\n\n    # Format output\n    if b < 0:\n        e = str(e).replace('+', '-')\n        f = str(f).replace('+', '-')\n    if a == 0 and b!= 0:\n        e = str(e).replace('+', '')\n        e = e + 'i'\n    elif a!= 0 and b == 0:\n        e = str(e).replace('+', '')\n    else:\n        e = str(e)\n    if a == 0 and b!= 0:\n        f = str(f).replace('+', '')\n        f = f + 'i'\n    elif a!= 0 and b == 0:\n        f = str(f).replace('+', '')\n    else:\n        f = str(f)\n    g = str(g)\n    h = str(h)\n    i = str(i)\n    j = str(j)\n\n    # Return output\n    return f'{e}\\n{f}\\n{g}\\n{h}\\n{i}\\n{j}'"
    },
    {
        "number": 4676,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    O, E = stdin.split()\n    password = \"\"\n    for i in range(len(O)):\n        if i % 2 == 0:\n            password += O[i]\n        else:\n            password += E[i]\n    return password"
    },
    {
        "number": 4677,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    result = \"\"\n    for c in s:\n        if c == \"0\":\n            result += \"0\"\n        elif c == \"1\":\n            result += \"1\"\n        elif c == \"B\":\n            if result:\n                result = result[:-1]\n    return result"
    },
    {
        "number": 4678,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    stools = [0] * n\n    max_height = 0\n\n    # Iterate through persons and find minimum height of stools\n    for i in range(n):\n        # Find maximum height of stools that can be used\n        max_height = max(max_height, a[i])\n\n        # Find minimum height of stools that can be used\n        j = i - 1\n        while j >= 0 and a[j] >= a[i]:\n            max_height = max(max_height, stools[j])\n            j -= 1\n\n        # Update stool heights\n        stools[i] = max_height + 1\n\n    # Find total height of stools\n    total_height = sum(stools)\n\n    # Print result\n    return str(total_height)"
    },
    {
        "number": 4679,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    S_A, S_B, S_C = stdin.strip().split('\\n')\n\n    # Initialize decks\n    deck_A = list(S_A)\n    deck_B = list(S_B)\n    deck_C = list(S_C)\n\n    # Initialize players\n    players = [deck_A, deck_B, deck_C]\n\n    # Initialize current player\n    current_player = 0\n\n    # Play game\n    while True:\n        # Check if current player's deck is empty\n        if not players[current_player]:\n            # Game ends\n            return chr(ord('A') + current_player)\n\n        # Discard top card\n        card = players[current_player].pop(0)\n\n        # Determine next player\n        next_player = (current_player + 1) % 3\n\n        # Determine next player based on card\n        if card == 'a':\n            next_player = 0\n        elif card == 'b':\n            next_player = 1\n        elif card == 'c':\n            next_player = 2\n\n        # Switch to next player\n        current_player = next_player"
    },
    {
        "number": 4680,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A + B + C == 17:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4681,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"2\"\n    elif n == 1:\n        return \"1\"\n    else:\n        prev_prev = 2\n        prev = 1\n        for i in range(2, n+1):\n            curr = prev_prev + prev\n            prev_prev = prev\n            prev = curr\n        return str(curr)"
    },
    {
        "number": 4682,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    area = (a+b)*h/2\n    return str(area)"
    },
    {
        "number": 4683,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    MOD = 10**9 + 7\n    dp = [[0] * N for _ in range(N)]\n\n    # Fill diagonal with A[i]\n    for i in range(N):\n        dp[i][i] = A[i]\n\n    # Fill rest of the matrix\n    for gap in range(1, N):\n        for i in range(N - gap):\n            j = i + gap\n            dp[i][j] = (dp[i][j-1] + dp[i+1][j]) % MOD\n\n    # Calculate sum of A[i] * A[j] for all pairs (i,j)\n    ans = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            ans = (ans + dp[i][j] * A[i] * A[j]) % MOD\n\n    return str(ans)"
    },
    {
        "number": 4684,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    if r % 4 == 0 and g % 4 == 0 and b % 4 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4685,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    K = int(stdin.split()[1])\n    nums = [A, B, C]\n    for i in range(K):\n        max_num = max(nums)\n        max_index = nums.index(max_num)\n        nums[max_index] = 2 * max_num\n    return str(sum(nums))"
    },
    {
        "number": 4686,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w = stdin.strip()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = [0] * 26\n    for c in w:\n        if c.islower():\n            count[ord(c) - ord('a')] += 1\n    for c in alphabet:\n        if count[ord(c) - ord('a')] % 2!= 0:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4687,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, K = map(int, stdin.readline().split())\n    a = []\n    for i in range(N):\n        a.extend([int(x) for x in stdin.readline().split()])\n\n    # sort the array\n    a.sort()\n\n    # find the K-th smallest integer\n    count = 0\n    for i in range(N):\n        count += a[i]\n        if count >= K:\n            return str(a[i])\n\n    # should never reach here\n    return \"\""
    },
    {
        "number": 4688,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    dp = [[0] * k for _ in range(n)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(1, n):\n        for j in range(k):\n            dp[i][j] = dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n            if j < k-1:\n                dp[i][j] += dp[i-1][j+1]\n    return str(dp[n-1][0])"
    },
    {
        "number": 4689,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    K, N = map(int, stdin.split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Sort houses by their angle from the north\n    A = sorted(A)\n\n    # Calculate the total distance traveled\n    total_distance = sum(A)\n\n    # Calculate the minimum distance that needs to be traveled\n    min_distance = total_distance - (K - A[-1])\n\n    return str(min_distance)"
    },
    {
        "number": 4690,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    area1 = A * B\n    area2 = C * D\n    if area1 > area2:\n        return str(area1)\n    elif area1 < area2:\n        return str(area2)\n    else:\n        return str(area1)"
    },
    {
        "number": 4691,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    ac, tle, wa, re = 0, 0, 0, 0\n    for i in range(n):\n        verdict = stdin.readline().strip()\n        if verdict == \"AC\":\n            ac += 1\n        elif verdict == \"TLE\":\n            tle += 1\n        elif verdict == \"WA\":\n            wa += 1\n        else:\n            re += 1\n    return f\"AC x {ac}\\nWA x {wa}\\nTLE x {tle}\\nRE x {re}\""
    },
    {
        "number": 4692,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    M = int(stdin)\n\n    # calculate hours until New Year\n    hours_until_ny = 24 - M\n\n    # print output\n    return f\"We have {hours_until_ny} hours until New Year at {M} o'clock on 30th, December.\""
    },
    {
        "number": 4693,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A + B >= 10:\n        return \"error\"\n    else:\n        return A + B"
    },
    {
        "number": 4694,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Sort houses by their coordinates\n    a.sort()\n\n    # Initialize variables\n    min_dist = float('inf')\n    max_dist = 0\n\n    # Iterate over all possible pairs of houses\n    for i in range(N):\n        for j in range(i+1, N):\n            # Calculate distance between houses\n            dist = abs(a[i] - a[j])\n\n            # Update minimum distance\n            min_dist = min(min_dist, dist)\n\n            # Update maximum distance\n            max_dist = max(max_dist, dist)\n\n    # Return minimum distance\n    return str(min_dist)"
    },
    {
        "number": 4695,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == 1 or x == 4 or x == 7 or x == 10:\n        if y == 2 or y == 5 or y == 8 or y == 11:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif x == 2 or x == 5 or x == 8 or x == 11:\n        if y == 3 or y == 6 or y == 9 or y == 12:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif x == 3 or x == 6 or x == 9 or x == 12:\n        if y == 1 or y == 4 or y == 7 or y == 10:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\""
    },
    {
        "number": 4696,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    product = a * b\n    if product % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 4697,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n + m - 1)"
    },
    {
        "number": 4698,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    T = list(map(int, lines[1].split()))\n    M = int(lines[2])\n    pairs = []\n    for i in range(3, len(lines)):\n        pair = list(map(int, lines[i].split()))\n        pairs.append(pair)\n\n    # Calculate time for each drink\n    times = []\n    for i in range(M):\n        time = 0\n        for j in range(N):\n            if j+1 in [p[0] for p in pairs] and pairs[pairs.index([j+1, i+1])][1] == i+1:\n                time += pairs[pairs.index([j+1, i+1])][2]\n            else:\n                time += T[j]\n        times.append(time)\n\n    # Print results\n    for time in times:\n        print(time)\n\n    return ''"
    },
    {
        "number": 4699,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    dislikes = list(map(int, stdin.readline().split()))\n    total = n\n    for digit in dislikes:\n        total = min(total, n - digit)\n    return str(total)"
    },
    {
        "number": 4700,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.readline().split())\n    heights = list(map(int, stdin.readline().split()))\n    roads = []\n    for _ in range(m):\n        a, b = map(int, stdin.readline().split())\n        roads.append((a-1, b-1))\n\n    # Initialize variables\n    good_obs = set()\n    visited = [False] * n\n\n    # DFS to find good observatories\n    def dfs(curr):\n        visited[curr] = True\n        for next_obs in range(n):\n            if not visited[next_obs] and (curr, next_obs) in roads or (next_obs, curr) in roads:\n                if heights[curr] < heights[next_obs]:\n                    dfs(next_obs)\n\n    # Find good observatories\n    for i in range(n):\n        if not visited[i]:\n            dfs(i)\n            good_obs.add(i)\n\n    # Count good observatories\n    count = len(good_obs)\n\n    # Output result\n    return str(count)"
    },
    {
        "number": 4701,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    value = 1\n    for i in range(n):\n        if i % 2 == 0:\n            value *= 2\n        else:\n            value += k\n    return str(value)"
    },
    {
        "number": 4702,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 0:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 4703,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    S = stdin.strip()\n\n    # initialize variables\n    n = len(S)\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][i] = int(S[i-1]) if i > 0 else 0\n\n    # fill dp table\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if S[i] == '+' and S[j] == '+':\n                continue\n            dp[i][j] = dp[i+1][j] + dp[i][j-1]\n            if S[i] == '+':\n                dp[i][j] -= dp[i+2][j]\n            if S[j] == '+':\n                dp[i][j] -= dp[i][j-2]\n\n    # evaluate all possible formulas\n    ans = 0\n    for i in range(n):\n        if S[i] == '+':\n            continue\n        for j in range(i+2, n+1):\n            if S[j-1] == '+':\n                continue\n            ans += dp[i][j-1]\n\n    return str(ans)"
    },
    {
        "number": 4704,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    x = sum(a[:n//2])\n    y = sum(a[n//2:])\n    return str(abs(x-y))"
    },
    {
        "number": 4705,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    x = 15 * N * 800\n    y = 15 * 200\n    return str(x - y)"
    },
    {
        "number": 4706,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    grid = [list(line.strip()) for line in stdin.split('\\n')]\n    diagonal = [grid[i][i] for i in range(3)]\n    return ''.join(diagonal)"
    },
    {
        "number": 4707,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = map(int, stdin.strip().split())\n    count = 0\n    if s1 == 1:\n        count += 1\n    if s2 == 1:\n        count += 1\n    if s3 == 1:\n        count += 1\n    return str(count)"
    },
    {
        "number": 4708,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, X, Y = map(int, stdin.split())\n    total_fee = 0\n    for i in range(1, N+1):\n        if i <= K:\n            total_fee += X\n        else:\n            total_fee += Y\n    return str(total_fee)"
    },
    {
        "number": 4709,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, op, B = stdin.split()\n    A = int(A)\n    B = int(B)\n    if op == '+':\n        return str(A + B)\n    elif op == '-':\n        return str(A - B)\n    else:\n        return \"Invalid operator\""
    },
    {
        "number": 4710,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 1200:\n        return \"ABC\"\n    else:\n        return \"ARC\""
    },
    {
        "number": 4711,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(min(a+b, a+c, b+c))"
    },
    {
        "number": 4712,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    H, W = map(int, stdin.readline().split())\n    image = [stdin.readline().strip() for _ in range(H)]\n\n    # Create box\n    box = ['#' * (W + 2)]\n    for i in range(H):\n        box.append('#' + image[i] + '#')\n    box.append('#' * (W + 2))\n\n    # Print box\n    return '\\n'.join(box)\n"
    },
    {
        "number": 4713,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    x = 0\n    max_x = 0\n    for i in range(n):\n        if s[i] == 'I':\n            x += 1\n        else:\n            x -= 1\n        max_x = max(max_x, x)\n    return str(max_x)"
    },
    {
        "number": 4714,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    count = 0\n    for i in range(A, B+1):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count"
    },
    {
        "number": 4715,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    colors = set([a, b, c])\n    return str(len(colors))"
    },
    {
        "number": 4716,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.readline().split())\n    sticks = list(map(int, stdin.readline().split()))\n\n    # Sort sticks in descending order\n    sticks.sort(reverse=True)\n\n    # Initialize variables\n    max_length = 0\n    current_length = 0\n\n    # Iterate over sticks\n    for i in range(K):\n        current_length += sticks[i]\n        max_length = max(max_length, current_length)\n\n    return str(max_length)"
    },
    {
        "number": 4717,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    if abs(x - a) < abs(x - b):\n        return \"A\"\n    else:\n        return \"B\""
    },
    {
        "number": 4718,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    s = stdin.strip()\n\n    # modify first four characters to 2018\n    s = '2018' + s[4:]\n\n    # print output\n    print(s)\n\n    # return solution\n    return s\n"
    },
    {
        "number": 4719,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    longest_string = \"\"\n    for i in range(1, 2**n):\n        binary = bin(i)[2:].zfill(n)\n        new_string = \"\"\n        for j in range(n):\n            if binary[j] == '1':\n                new_string += strings[j]\n        if len(new_string) > len(longest_string):\n            longest_string = new_string\n    if longest_string == \"\":\n        return \"\"\n    else:\n        return min(longest_string, key=lambda x: x)"
    },
    {
        "number": 4720,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    seats = []\n    for i in range(N):\n        l, r = map(int, stdin.readline().strip().split())\n        seats.append((l, r))\n\n    # Count number of people sitting at theater\n    count = 0\n    for l, r in seats:\n        count += r - l + 1\n\n    return str(count)"
    },
    {
        "number": 4721,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str((n+m-2)*(n+m-3)//2)"
    },
    {
        "number": 4722,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return \"Possible\"\n    elif A == 0 or B == 0:\n        return \"Possible\"\n    elif A % 3 == 0 and B % 3 == 0:\n        return \"Possible\"\n    else:\n        return \"Impossible\""
    },
    {
        "number": 4723,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    if '?' not in s:\n        return s\n    for i in range(len(s)):\n        if s[i] == '?':\n            s = s[:i] + t + s[i+1:]\n            break\n    if '?' in s:\n        return 'UNRESTORABLE'\n    return s"
    },
    {
        "number": 4724,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, g = map(int, stdin.split())\n    p = (r + g) // 2\n    return str(p)"
    },
    {
        "number": 4725,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input string to set to remove duplicates\n    letters = set(stdin)\n    # Calculate simplicity of string\n    simplicity = len(letters)\n    # If simplicity is 1 or 2, return 0\n    if simplicity <= 2:\n        return 0\n    # If simplicity is greater than 2, calculate minimum number of letters to erase\n    else:\n        # Calculate number of letters to erase\n        num_letters_to_erase = simplicity - 2\n        # Return minimum number of letters to erase\n        return num_letters_to_erase"
    },
    {
        "number": 4726,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n, t = map(int, stdin.split())\n    if t == 1:\n        return \"AC\" if n <= 1000000 else \"TLE\"\n    elif t == 2:\n        return \"AC\" if n <= 100000 else \"TLE\"\n    elif t == 3:\n        return \"AC\" if n <= 10000 else \"TLE\"\n    elif t == 4:\n        return \"AC\" if n <= 1000 else \"TLE\"\n    elif t == 5:\n        return \"AC\" if n <= 100 else \"TLE\"\n    elif t == 6:\n        return \"AC\" if n <= 10 else \"TLE\"\n    else:\n        return \"AC\" if n <= 1 else \"TLE\""
    },
    {
        "number": 4727,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    grid = [[int(x) for x in line.split()] for line in stdin.split('\\n')[:4]]\n    move = int(stdin.split('\\n')[4])\n    new_grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n    for i in range(4):\n        for j in range(4):\n            if grid[i][j]!= 0:\n                new_grid[i][j] = grid[i][j]\n    if move == 0:\n        for i in range(4):\n            for j in range(3):\n                if new_grid[i][j] == new_grid[i][j+1]:\n                    new_grid[i][j] *= 2\n                    new_grid[i][j+1] = 0\n                elif new_grid[i][j] == 0 and new_grid[i][j+1]!= 0:\n                    new_grid[i][j] = new_grid[i][j+1]\n                    new_grid[i][j+1] = 0\n        for j in range(4):\n            for i in range(3):\n                if new_grid[i][j] == new_grid[i+1][j]:\n                    new_grid[i][j] *= 2\n                    new_grid[i+1][j] = 0\n                elif new_grid[i][j] == 0 and new_grid[i+1][j]!= 0:\n                    new_grid[i][j] = new_grid[i+1][j]\n                    new_grid[i+1][j] = 0\n    elif move == 1:\n        for i in range(3):\n            for j in range(4):\n                if new_grid[i][j] == new_grid[i+1][j]:\n                    new_grid[i][j] *= 2\n                    new_grid[i+1][j] = 0\n                elif new_grid[i][j] == 0 and new_grid[i+1][j]!= 0:\n                    new_grid[i][j] = new_grid[i+1][j]\n                    new_grid[i+1][j] = 0\n        for j in range(3):\n            for i in range(4):\n                if new_grid[i][j] == new_grid[i][j+1]:\n                    new_grid[i][j] *= 2\n                    new_grid[i][j+1] = 0\n                elif new_grid[i][j] == 0 and new_grid[i][j+1]!= 0:\n                    new_grid[i][j] = new_grid[i][j+1]\n                    new_grid[i][j+1] = 0\n    elif move == 2:\n        for i in range(4):\n            for j in range(3):\n                if new_grid[i][j] == new_grid[i][j+1]:\n                    new_grid[i][j] *= 2\n                    new_grid[i][j+1] = 0\n                elif new_grid[i][j] == 0 and new_grid[i][j+1]!= 0:\n                    new_grid[i][j] = new_grid[i][j+1]\n                    new_grid[i][j+1] = 0\n        for j in range(3):\n            for i in range(4):\n                if new_grid[i][j] == new_grid[i+1][j]:\n                    new_grid[i][j] *= 2\n                    new_grid[i+1][j] = 0\n                elif new_grid[i][j] == 0 and new_grid[i+1][j]!= 0:\n                    new_grid[i][j] = new_grid[i+1][j]\n                    new_grid[i+1][j] = 0\n    elif move == 3:\n        for i in range(3):\n            for j in range(4):\n                if new_grid[i][j] == new_grid[i+1][j]:\n                    new_grid[i][j] *= 2\n                    new_grid[i+1][j] = 0\n                elif new_grid[i][j] == 0 and new_grid[i+1][j]!= 0:\n                    new_grid[i][j] = new_grid[i+1]["
    },
    {
        "number": 4728,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_molecule, k = stdin.split()\n    output_molecule = input_molecule.replace(output_molecule, '')\n    return str(k // len(output_molecule))"
    },
    {
        "number": 4729,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    password, message = stdin.split()\n    password = set(password)\n    i = 0\n    for c in message:\n        if c in password:\n            if i == 0:\n                i += 1\n            elif i == 1:\n                if c!= password.pop():\n                    return \"FAIL\"\n                i += 1\n            else:\n                if c!= password.pop():\n                    return \"FAIL\"\n        else:\n            return \"FAIL\"\n    if i == len(password):\n        return \"PASS\"\n    else:\n        return \"FAIL\""
    },
    {
        "number": 4730,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for i, c in enumerate(stdin):\n        if c in '([{':\n            stack.append(c)\n        elif c in ')]}':\n            if not stack:\n                return f'{c} {i}'\n            if c == ')' and stack[-1] == '(':\n                stack.pop()\n            elif c == ']' and stack[-1] == '[':\n                stack.pop()\n            elif c == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return f'{c} {i}'\n    if stack:\n        return 'ok so far'\n    return 'ok'"
    },
    {
        "number": 4731,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    words = lines[1:]\n    player1_words = words[:n]\n    player2_words = words[n:]\n    player1_last_word = ''\n    player2_last_word = ''\n    for i in range(n):\n        if i % 2 == 0:\n            if player1_words[i] == player1_last_word:\n                return 'Player 1 lost'\n            player1_last_word = player1_words[i][-1]\n        else:\n            if player2_words[i] == player2_last_word:\n                return 'Player 2 lost'\n            player2_last_word = player2_words[i][-1]\n    return 'Fair Game'"
    },
    {
        "number": 4732,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, op, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    if op == '+':\n        return str(a + b)\n    elif op == '*':\n        return str(a * b)\n    else:\n        return 'Invalid operator'"
    },
    {
        "number": 4733,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split('\\n')\n    for i, case in enumerate(cases):\n        n, shuffle_type = case.split()\n        n = int(n)\n        if shuffle_type == 'in':\n            shuffles = n // 2\n            if n % 2 == 1:\n                shuffles += 1\n        else:\n            shuffles = n // 2\n            if n % 2 == 0:\n                shuffles += 1\n        print(f'Case {i+1}: {shuffles}')"
    },
    {
        "number": 4734,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y, p = stdin.split()\n    if y.endswith('e'):\n        return y + 'x' + p\n    elif y[-1] in 'aiou':\n        return y[:-1] + 'ex' + p\n    elif y.endswith('ex'):\n        return y + p\n    else:\n        return y + 'ex' + p"
    },
    {
        "number": 4735,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y = int(stdin)\n    if y % 26 == 0 and (y % 4 == 0 or y % 100!= 0 or y % 400 == 0):\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 4736,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    nums = list(map(int, stdin.split()))\n    n = nums[:10]\n    K = nums[10]\n\n    # count number of ways to arrange K cards in ascending order\n    count = 0\n    for i in range(K):\n        for j in range(i+1, K):\n            if n[i] > n[j]:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4737,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, p = map(int, stdin.split()[0:2])\n    estimations = list(map(int, stdin.split()[2:]))\n\n    # calculate number of AC problems\n    num_ac = 0\n    for i in range(N):\n        if i == p:\n            num_ac += 1\n        elif estimations[i] <= 300:\n            num_ac += 1\n\n    # calculate penalty time\n    penalty_time = 0\n    for i in range(N):\n        if i == p:\n            penalty_time += 30\n        elif estimations[i] <= 300:\n            penalty_time += estimations[i]\n\n    # print output\n    return f\"{num_ac} {penalty_time}\""
    },
    {
        "number": 4738,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    for k in range(2, n+1):\n        if n % k == 0:\n            substrings = [s[i:i+k] for i in range(n//k)]\n            if all(substrings[i] == substrings[i-1][-1] + substrings[i-1][:-1] for i in range(1, len(substrings))):\n                return str(k)\n    return \"0\""
    },
    {
        "number": 4739,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split())\n    T = list(map(int, stdin.readline().split()))\n    X = list(map(int, stdin.readline().split()))\n\n    # Calculate the total distance travelled\n    total_distance = sum(X)\n\n    # Calculate the number of possible speeds\n    possible_speeds = len(set(X))\n\n    # Calculate the distances between the first and second milestones\n    distances = []\n    for i in range(1, len(X)):\n        distances.append(X[i] - X[i-1])\n\n    # Sort the distances in increasing order\n    distances.sort()\n\n    return f\"{possible_speeds}\\n{' '.join(map(str, distances))}\""
    },
    {
        "number": 4740,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n // 1000 == 555:\n        return 1\n    else:\n        return 0"
    },
    {
        "number": 4741,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('/'))\n    c = (a - 32) * 5/9\n    g = math.gcd(c, b)\n    return f\"{c//g}/{b//g}\""
    },
    {
        "number": 4742,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    melody1 = lines[1].split()\n    melody2 = lines[2].split()\n    if melody1 == melody2:\n        return \"Nonsense\"\n    if melody1 == melody2[::-1]:\n        return \"Retrograde\"\n    if melody1[0] in melody2:\n        return \"Inversion\"\n    for i in range(n):\n        if melody1[i] in melody2:\n            return \"Transposition\"\n    return \"Nonsense\""
    },
    {
        "number": 4743,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    nimionese_words = []\n    for word in words:\n        nimionese_word = ''\n        for i, letter in enumerate(word):\n            if i == 0:\n                nimionese_word += 'hard' + letter.lower()\n            elif letter.islower():\n                nimionese_word += letter\n            elif letter.isupper():\n                nimionese_word += letter.lower()\n            else:\n                nimionese_word += letter\n        nimionese_word = nimionese_word.replace('each', 'dach')\n        nimionese_word = nimionese_word.replace('hip-po', 'gip-go')\n        nimionese_word = nimionese_word.replace('dog', 'dogah')\n        nimionese_word = nimionese_word.replace('hip', 'gipoh')\n        nimionese_word = nimionese_word[:-1] + 'ah'\n        nimionese_words.append(nimionese_word)\n    return''.join(nimionese_words)"
    },
    {
        "number": 4744,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    V = int(stdin)\n    if V == 1:\n        return \"6\"\n    elif V == 2:\n        return \"12\"\n    elif V == 3:\n        return \"18\"\n    else:\n        return str(V * 6)"
    },
    {
        "number": 4745,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    prices = list(map(int, stdin.readline().split()))\n    prices.sort()\n    count = 0\n    for i in range(n):\n        if prices[i] > x:\n            count += 1\n            if count == 2:\n                break\n    return count"
    },
    {
        "number": 4746,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    C, n = map(int, lines[0].split())\n    data = []\n    for i in range(1, n+1):\n        left, entered, waited = map(int, lines[i].split())\n        data.append((left, entered, waited))\n    if data[0][0]!= 0 or data[-1][1]!= 0:\n        return 'impossible'\n    for i in range(1, n):\n        if data[i][0] > data[i-1][1] or data[i][1] > data[i-1][0]:\n            return 'impossible'\n        if data[i][0] + data[i][2] > C or data[i][1] + data[i][2] > C:\n            return 'impossible'\n    return 'possible'"
    },
    {
        "number": 4747,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    expected_score = (n + 1) / 2\n    if k > 1:\n        expected_score += (k - 1) * (n + 1) / 2\n    return str(expected_score)"
    },
    {
        "number": 4748,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, N, M = map(int, stdin.split())\n    A = (H+1)//2\n    B = H - A\n    if N >= A*2 + B*4:\n        return \"0 0\"\n    if N >= A*2:\n        return f\"{A-N//2} {B-N%2}\"\n    if M >= B*4:\n        return f\"{A-M//4} {B-M%4}\"\n    return f\"{A-N//2} {B-N%2}\""
    },
    {
        "number": 4749,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    grid = []\n    for i in range(n):\n        grid.append(list(stdin.readline().strip()))\n\n    # Check rows\n    for row in grid:\n        black_count = row.count('B')\n        white_count = row.count('W')\n        if black_count!= white_count:\n            return '0'\n\n    # Check columns\n    for j in range(n):\n        black_count = 0\n        white_count = 0\n        for i in range(n):\n            if grid[i][j] == 'B':\n                black_count += 1\n            elif grid[i][j] == 'W':\n                white_count += 1\n        if black_count!= white_count:\n            return '0'\n\n    # Check consecutive squares\n    for i in range(n):\n        for j in range(n):\n            if i < n-2 and grid[i][j] == grid[i+1][j] == grid[i+2][j]:\n                return '0'\n            if j < n-2 and grid[i][j] == grid[i][j+1] == grid[i][j+2]:\n                return '0'\n\n    return '1'"
    },
    {
        "number": 4750,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        l1, r1, l2, r2 = map(int, stdin.readline().strip().split())\n        if l1 == l2 and r1 == r2:\n            print(l1, r1)\n        elif l1 == l2:\n            print(l1, r2)\n        elif r1 == r2:\n            print(l2, r1)\n        else:\n            print(l1, r2)\n            print(l2, r1)\n    return \"\""
    },
    {
        "number": 4751,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4752,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    target = nums[-1]\n    nums = nums[:-1]\n    for i in range(len(nums)):\n        complement = target - nums[i]\n        if complement in nums[i+1:]:\n            return [i, nums.index(complement, i+1)]\n    return []"
    },
    {
        "number": 4753,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    diagonals = []\n    for i in range(n):\n        for j in range(i+2, n):\n            diagonals.append((i, j))\n    intersections = 0\n    for i in range(len(diagonals)):\n        for j in range(i+1, len(diagonals)):\n            if diagonals[i][0] == diagonals[j][1] or diagonals[i][1] == diagonals[j][0]:\n                intersections += 1\n    return str(intersections)"
    },
    {
        "number": 4754,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if n == 1:\n        return \"impossible\"\n    if n == 2:\n        return \"2\" if a[0] == a[1] else \"impossible\"\n    dp = [[0] * (2*n) for _ in range(2*n)]\n    for i in range(2*n):\n        dp[i][i] = 1\n    for l in range(2, 2*n):\n        for i in range(2*n-l):\n            j = i+l\n            for k in range(i, j, 2):\n                if a[k]!= a[k+1]:\n                    break\n            else:\n                dp[i][j] = 2*dp[i+1][j-1]\n                continue\n            if k == i+1:\n                dp[i][j] = dp[i+2][j] + dp[i][j-2]\n            elif k == j-1:\n                dp[i][j] = dp[i+2][j] + dp[i][j-2]\n            else:\n                dp[i][j] = dp[i+2][j] + dp[i][j-2] + dp[i+1][j-1]\n    return str(dp[0][2*n-1]) if dp[0][2*n-1]!= 0 else \"impossible\""
    },
    {
        "number": 4755,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, k = map(int, stdin.split())\n    bill = 10 ** k\n    if c % bill == 0:\n        return str(c)\n    else:\n        return str(c + bill - (c % bill))"
    },
    {
        "number": 4756,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    points = []\n    for i in range(1, n+1):\n        x, y = map(int, lines[i].split())\n        points.append((x, y))\n    points.sort()\n    a = 0\n    for i in range(1, n):\n        x1, y1 = points[i-1]\n        x2, y2 = points[i]\n        a += (x2-x1)**2 + (y2-y1)**2\n    return str(a)"
    },
    {
        "number": 4757,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    villagers, evenings = map(int, stdin.splitlines()[0].split())\n    present = [list(map(int, stdin.splitlines()[i].split()[1:])) for i in range(1, evenings+1)]\n\n    # initialize variables\n    known = set()\n    songs = set()\n\n    # iterate over evenings\n    for i in range(evenings):\n        # add songs sung by present villagers\n        for v in present[i]:\n            songs.add(v)\n\n        # check if bard is present\n        if 1 in present[i]:\n            # add songs sung by bard\n            for v in present[i]:\n                if v!= 1:\n                    songs.add(v)\n\n            # add bard to known set\n            known.add(1)\n\n        # check if all songs are known\n        if len(known) == villagers-1:\n            # add all villagers to known set\n            known.update(range(2, villagers+1))\n\n        # remove songs sung by villagers not in known set\n        songs = set(filter(lambda x: x in known, songs))\n\n    # output known villagers\n    return '\\n'.join(map(str, sorted(known)))"
    },
    {
        "number": 4758,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T, M = map(int, stdin.split())\n    return str(N*T*M)"
    },
    {
        "number": 4759,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    at_bats = list(map(int, stdin.split()[1:]))\n    total_bases = 0\n    total_at_bats = 0\n    for at_bat in at_bats:\n        if at_bat == -1:\n            continue\n        total_bases += at_bat\n        total_at_bats += 1\n    slugging_percentage = total_bases / total_at_bats\n    return str(slugging_percentage)"
    },
    {
        "number": 4760,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    primes = [True] * (n+1)\n    count = 0\n    for i in range(2, n+1):\n        if primes[i]:\n            count += 1\n            if count == k:\n                return str(i)\n            for j in range(i*i, n+1, i):\n                primes[j] = False"
    },
    {
        "number": 4761,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, H = map(int, stdin.split())\n    count = 0\n    for i in range(L, H+1):\n        if len(set(str(i))) == 6 and i % 100000 == 0:\n            count += 1\n    return count"
    },
    {
        "number": 4762,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"0.00000000\"\n    elif n == 2:\n        return \"0.50000000\"\n    else:\n        return str(1/n)"
    },
    {
        "number": 4763,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 3 == 0:\n        return \"triple 20\\n\" * (n // 3)\n    elif n % 2 == 0:\n        return \"double 15\\n\" * (n // 2)\n    else:\n        return \"single 9\\n\" * n"
    },
    {
        "number": 4764,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, v = map(int, stdin.split())\n    cake_volume = n ** 2 * 4\n    horizontal_volume = (n - h) ** 2 * 4\n    vertical_volume = (n - v) ** 2 * 4\n    remaining_volume = cake_volume - horizontal_volume - vertical_volume\n    return str(remaining_volume)"
    },
    {
        "number": 4765,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    ingredients = []\n    for i in range(n):\n        sourness, bitterness = map(int, stdin.readline().strip().split())\n        ingredients.append((sourness, bitterness))\n    ingredients.sort(key=lambda x: x[0]*x[1])\n    sourness_sum = sum(ingredient[0] for ingredient in ingredients)\n    bitterness_sum = sum(ingredient[1] for ingredient in ingredients)\n    return str(abs(sourness_sum - bitterness_sum))"
    },
    {
        "number": 4766,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    output = ''\n    for line in lines:\n        if line.startswith('Simon says'):\n            output += line[10:] + '\\n'\n    return output[:-1]"
    },
    {
        "number": 4767,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    registers = list(map(int, stdin.split()))\n    count = 0\n    for i in range(7, -1, -1):\n        if registers[i] == 18:\n            count += 1\n            registers[i] = 0\n        else:\n            break\n    return count"
    },
    {
        "number": 4768,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    dna = [stdin.strip() for _ in range(n)]\n    edges = []\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = sum(1 for a, b in zip(dna[i], dna[j]) if a!= b)\n            edges.append((diff, i, j))\n    edges.sort()\n    tree = []\n    for diff, u, v in edges:\n        if not tree or tree[-1][0] > diff:\n            tree.append((diff, u, v))\n    unlikeliness = sum(diff for diff, u, v in tree)\n    print(unlikeliness)\n    for diff, u, v in tree:\n        print(u, v)\n    return \"\""
    },
    {
        "number": 4769,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.strip()\n    n = len(word)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sorted(word[i:j]) == sorted(word[j:i:-1]):\n                return word[i:j]\n    return '-1'"
    },
    {
        "number": 4770,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N == M:\n        return \"Dr. Chaz will have 0 pieces of chicken left over!\"\n    if N > M:\n        return \"Dr. Chaz needs {} more piece[s] of chicken!\".format(N-M)\n    if N < M:\n        return \"Dr. Chaz will have {} pieces of chicken left over!\".format(M-N)"
    },
    {
        "number": 4771,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, V = map(int, stdin.split())\n    boxes = []\n    for i in range(n):\n        l, w, h = map(int, stdin.readline().split())\n        boxes.append((l, w, h, l*w*h))\n    boxes.sort(key=lambda x: x[3], reverse=True)\n    for box in boxes:\n        if box[3] >= V:\n            return box[3] - V\n    return 0"
    },
    {
        "number": 4772,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    puzzle = []\n    for i in range(R):\n        puzzle.append(list(stdin.readline().strip()))\n    words = []\n    for i in range(R):\n        for j in range(C):\n            if puzzle[i][j] == '#':\n                continue\n            if i > 0 and puzzle[i-1][j]!= '#' and puzzle[i-1][j].isalpha():\n                words.append(puzzle[i-1][j]+puzzle[i][j])\n            if j > 0 and puzzle[i][j-1]!= '#' and puzzle[i][j-1].isalpha():\n                words.append(puzzle[i][j-1]+puzzle[i][j])\n    words = sorted(words)\n    for word in words:\n        if len(word) >= 2:\n            return word\n    return \"\""
    },
    {
        "number": 4773,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Remove any whitespace from the input string\n    route = stdin.replace(\" \", \"\")\n    # Count the number of moves and macros in the route\n    num_moves = route.count(\"N\") + route.count(\"S\") + route.count(\"E\") + route.count(\"W\")\n    num_macros = route.count(\"M\")\n    # Calculate the minimum number of characters needed to encode the route\n    min_chars = num_moves + num_macros\n    return str(min_chars)"
    },
    {
        "number": 4774,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    expressions = []\n    for op1 in ['+', '-', '*', '/']:\n        for op2 in ['+', '-', '*', '/']:\n            for op3 in ['+', '-', '*', '/']:\n                for op4 in ['+', '-', '*', '/']:\n                    if op1!= '/' or op2!= '/' or op3!= '/' or op4!= '/':\n                        try:\n                            result = eval(f\"{a} {op1} {b} {op2} {c} {op3} {d} {op4} 0\")\n                            if result == 0:\n                                expressions.append(f\"{a} {op1} {b} = {c} {op3} {d}\")\n                        except ZeroDivisionError:\n                            pass\n    if expressions:\n        return '\\n'.join(sorted(expressions))\n    else:\n        return \"problems ahead\""
    },
    {
        "number": 4775,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.strip().split()\n    A, B = words\n    N, M = len(A), len(B)\n    shared_letter = None\n    for letter in A:\n        if letter in B:\n            shared_letter = letter\n            break\n    if shared_letter is None:\n        return \"No shared letter found\"\n    crossword = [['.' for _ in range(N)] for _ in range(M)]\n    for i in range(N):\n        if A[i] == shared_letter:\n            for j in range(M):\n                crossword[j][i] = A[i]\n    for j in range(M):\n        if B[j] == shared_letter:\n            for i in range(N):\n                crossword[j][i] = B[j]\n    return '\\n'.join([''.join(row) for row in crossword])"
    },
    {
        "number": 4776,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    events = []\n    for i in range(N):\n        s, t = map(int, stdin.readline().strip().split())\n        events.append((s, t))\n    days = set()\n    for s, t in events:\n        days.update(range(s, t+1))\n    return len(days)"
    },
    {
        "number": 4777,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    a = 0\n    b = 1\n    for i in range(k):\n        a, b = b, a + b\n    return f\"{a} {b}\""
    },
    {
        "number": 4778,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    P, D = map(int, lines[0].split())\n    precincts = []\n    for line in lines[1:]:\n        d, a, b = map(int, line.split())\n        precincts.append((d-1, a, b))\n\n    # compute wasted votes for each party\n    wasted_A = 0\n    wasted_B = 0\n    for d, a, b in precincts:\n        if a > b:\n            wasted_A += a - b\n        else:\n            wasted_B += b - a\n\n    # compute efficiency gap\n    V = sum(a + b for d, a, b in precincts)\n    efficiency_gap = abs(wasted_A - wasted_B) / V\n\n    # print results for each district\n    for d in range(D):\n        # find precincts in this district\n        district_precincts = [p for p in precincts if p[0] == d]\n        # compute total votes for each party\n        A_votes = sum(p[1] for p in district_precincts)\n        B_votes = sum(p[2] for p in district_precincts)\n        # determine winner and wasted votes\n        if A_votes > B_votes:\n            winner = 'A'\n            wasted_votes = (A_votes - B_votes, 0)\n        elif B_votes > A_votes:\n            winner = 'B'\n            wasted_votes = (0, B_votes - A_votes)\n        else:\n            winner = 'T'\n            wasted_votes = (0, 0)\n        # print results for this district\n        print(winner, *wasted_votes)\n\n    # print efficiency gap\n    print(f'{efficiency_gap:.6f}')\n\n    return ''"
    },
    {
        "number": 4779,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    max_val = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_val = max(max_val, (a[i]**2 + a[j]**2) * (sum(a[i+1:]) + sum(a[:j]) + sum(a[j+1:])))\n    return str(max_val)"
    },
    {
        "number": 4780,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n1, n2 = map(int, stdin.split()[0:2])\n    row1 = stdin.split()[2]\n    row2 = stdin.split()[3]\n    t = int(stdin.split()[4])\n\n    # initialize variables\n    ants = row1 + row2\n    n = n1 + n2\n    i = 0\n    j = n1 - 1\n    k = n1 + n2 - 1\n    l = n1 - 1\n    m = n1 + n2 - 1\n\n    # simulate ants\n    for _ in range(t):\n        if ants[i] == ants[j] and ants[k] == ants[m]:\n            # swap ants\n            ants = ants[:i] + ants[j] + ants[i+1:j] + ants[i] + ants[j+1:k] + ants[i+1:j] + ants[k+1:m] + ants[i+1:j] + ants[m+1:]\n            # update indices\n            i += 1\n            j -= 1\n            k -= 1\n            l += 1\n            m -= 1\n        elif ants[i] == ants[j]:\n            # jump over ant in front of ant in second row\n            ants = ants[:i] + ants[j] + ants[i+1:j] + ants[i] + ants[j+1:k] + ants[i+1:j] + ants[k+1:m] + ants[i+1:j] + ants[m+1:]\n            # update indices\n            i += 1\n            j -= 1\n            k -= 1\n            l += 1\n            m -= 1\n        elif ants[k] == ants[m]:\n            # jump over ant in front of ant in first row\n            ants = ants[:i] + ants[j] + ants[i+1:j] + ants[i] + ants[j+1:k] + ants[i+1:j] + ants[k+1:m] + ants[i+1:j] + ants[m+1:]\n            # update indices\n            i += 1\n            j -= 1\n            k -= 1\n            l += 1\n            m -= 1\n        else:\n            # move ant in first row\n            ants = ants[:i] + ants[j] + ants[i+1:j] + ants[i] + ants[j+1:k] + ants[i+1:j] + ants[k+1:m] + ants[i+1:j] + ants[m+1:]\n            # update indices\n            i += 1\n            j -= 1\n            k -= 1\n            l += 1\n            m -= 1\n\n    # return final order of ants\n    return ants"
    },
    {
        "number": 4781,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split('\\n')\n    k = int(lines[0])\n    n = int(lines[1])\n    outcomes = []\n    for i in range(2, 2+n):\n        t, z = lines[i].split()\n        outcomes.append((int(t), z))\n\n    # simulate game\n    players = list(range(1, 9))\n    current_player = k\n    for i in range(n):\n        t, z = outcomes[i]\n        if z == 'T':\n            current_player = (current_player - 1) % 8 + 1\n        elif z == 'N':\n            pass\n        else:\n            current_player = (current_player + 1) % 8 + 1\n        if i == 2:\n            # box explodes\n            current_player = (current_player - 1) % 8 + 1\n\n    # output result\n    return str(current_player)"
    },
    {
        "number": 4782,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = list(map(int, stdin.split()))\n    roads.sort()\n    cost = 0\n    for i in range(m):\n        cost += roads[i]\n    return str(cost)"
    },
    {
        "number": 4783,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split())\n    vault = []\n    for i in range(M):\n        vault.append(list(map(int, stdin.split())))\n    dp = [[float('inf')] * N for _ in range(M)]\n    dp[0][0] = vault[0][0]\n    for i in range(M):\n        for j in range(N):\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + vault[i][j])\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + vault[i][j])\n    return str(dp[M-1][N-1])"
    },
    {
        "number": 4784,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split())\n    P = list(map(int, stdin.split()))\n    total_spent = sum(P)\n    if total_spent > X:\n        return \"0\"\n    else:\n        remaining_X = X - total_spent\n        remaining_N = N - len(P)\n        if remaining_N == 0:\n            return str(remaining_X)\n        else:\n            remaining_P = remaining_X // remaining_N\n            return str(remaining_X - remaining_P * remaining_N)"
    },
    {
        "number": 4785,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if'ss' in stdin:\n        return 'hiss'\n    else:\n        return 'no hiss'"
    },
    {
        "number": 4786,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    keywords = set()\n    for i in range(n):\n        keyword = stdin.readline().strip()\n        keywords.add(keyword.replace('-',''))\n    count = 0\n    for i in range(len(keywords)):\n        for j in range(i+1, len(keywords)):\n            if keywords[i].lower() == keywords[j].lower():\n                count += 1\n    return str(count)"
    },
    {
        "number": 4787,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Initialize variables\n    tablets = 0\n    compasses = 0\n    gears = 0\n    sets = 0\n    \n    # Loop through each character in the input string\n    for char in stdin:\n        # If the character is a Tablet, increment tablets\n        if char == 'T':\n            tablets += 1\n        # If the character is a Compass, increment compasses\n        elif char == 'C':\n            compasses += 1\n        # If the character is a Gear, increment gears\n        elif char == 'G':\n            gears += 1\n        # If we have three different cards, increment sets\n        if tablets > 0 and compasses > 0 and gears > 0:\n            sets += 1\n            tablets -= 1\n            compasses -= 1\n            gears -= 1\n    \n    # Calculate the total points\n    total_points = (tablets ** 2) + (compasses ** 2) + (gears ** 2) + (sets * 7)\n    \n    # Return the total points as a string\n    return str(total_points)"
    },
    {
        "number": 4788,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = map(int, stdin.split())\n    if n1 == n2:\n        return \"0\"\n    elif n1 == 0:\n        return str(n2)\n    elif n2 == 0:\n        return str(-n1)\n    elif n1 == 90:\n        return str(n2 - 90)\n    elif n1 == 180:\n        return str(n2 - 180)\n    elif n1 == 270:\n        return str(n2 - 270)\n    elif n2 == 90:\n        return str(n1 - 90)\n    elif n2 == 180:\n        return str(n1 - 180)\n    elif n2 == 270:\n        return str(n1 - 270)\n    else:\n        if n1 > n2:\n            diff = n1 - n2\n            if diff > 180:\n                diff = 360 - diff\n            return str(diff)\n        else:\n            diff = n2 - n1\n            if diff > 180:\n                diff = 360 - diff\n            return str(-diff)"
    },
    {
        "number": 4789,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, *desks = map(int, stdin.split())\n    desks = sorted(desks)\n    count = 0\n    for i in range(k):\n        if desks[i] > i+1:\n            count += desks[i] - i - 1\n    return count"
    },
    {
        "number": 4790,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # convert input string to list\n    stones = list(stdin)\n    # initialize variables\n    black_count = 0\n    white_count = 0\n    # iterate through stones and count black and white stones\n    for stone in stones:\n        if stone == 'B':\n            black_count += 1\n        elif stone == 'W':\n            white_count += 1\n    # check if it is possible for Ming to balance the stones\n    if black_count == white_count or black_count == white_count + 1 or black_count == white_count - 1:\n        return '1'\n    else:\n        return '0'"
    },
    {
        "number": 4791,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    s1, s2, s3, s4 = map(int, stdin.split())\n\n    # calculate max area\n    max_area = (s1 + s2 + s3 + s4) * min(s1, s2, s3, s4) / 2\n\n    # return result\n    return str(max_area)"
    },
    {
        "number": 4792,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin.strip()\n    compact_name = \"\"\n    prev_char = \"\"\n    for char in name:\n        if char!= prev_char:\n            compact_name += char\n        prev_char = char\n    return compact_name"
    },
    {
        "number": 4793,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, v1, v2 = map(int, stdin.split())\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if s % (v1 + v2)!= 0:\n        return \"Impossible\"\n    n = s // (v1 + v2)\n    return f\"{n} {n}\""
    },
    {
        "number": 4794,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    map_ = []\n    for i in range(R):\n        map_.append(list(stdin.readline().strip()))\n\n    # count the number of monster trucks in each cell\n    monster_trucks = [[0 for j in range(C)] for i in range(R)]\n    for i in range(R):\n        for j in range(C):\n            if map_[i][j] == 'X':\n                monster_trucks[i][j] = 2\n\n    # count the number of parking spaces for each number of squashed cars\n    parking_spaces = [0] * (R * C)\n    for i in range(R):\n        for j in range(C):\n            if map_[i][j] == '.':\n                for k in range(max(0, i - 1), min(R, i + 2)):\n                    for l in range(max(0, j - 1), min(C, j + 2)):\n                        if map_[k][l] == '#' or monster_trucks[k][l] > 0:\n                            continue\n                        parking_spaces[monster_trucks[k][l]] += 1\n\n    # print the results\n    print(parking_spaces[0])\n    print(parking_spaces[1])\n    print(parking_spaces[2])\n    print(parking_spaces[3])\n    print(parking_spaces[4])\n\n    return \"\""
    },
    {
        "number": 4795,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    numbers = [int(stdin.readline().strip()) for _ in range(n)]\n    x = sum(numbers)\n    return str(x)"
    },
    {
        "number": 4796,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    A, B, C = map(int, stdin.split()[0:3])\n    I, J, K = map(int, stdin.split()[3:6])\n\n    # calculate leftover amounts\n    orange_leftover = A - I*B - J*C\n    apple_leftover = B - I*A - K*C\n    pineapple_leftover = C - J*B - K*A\n\n    # format output\n    return f\"{orange_leftover:.6f} {apple_leftover:.6f} {pineapple_leftover:.6f}\""
    },
    {
        "number": 4797,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Remove all occurrences of '<'\n    return stdin.replace('<', '')"
    },
    {
        "number": 4798,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into words\n    words = stdin.split()\n    # Initialize an empty list to store the short variations\n    short_variations = []\n    # Iterate over each word in the input string\n    for word in words:\n        # Split the word into its constituent parts\n        parts = word.split('-')\n        # Initialize an empty string to store the short variation\n        short_variation = ''\n        # Iterate over each part of the word\n        for part in parts:\n            # Add the first letter of the part to the short variation\n            short_variation += part[0]\n        # Add the short variation to the list of short variations\n        short_variations.append(short_variation)\n    # Join the short variations into a single string separated by spaces\n    return''.join(short_variations)"
    },
    {
        "number": 4799,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    G, S, C = map(int, stdin.split())\n    if G + S + C == 0:\n        return \"Province or Gold\"\n    elif G + S + C == 1:\n        if G == 1:\n            return \"Estate or Copper\"\n        elif S == 1:\n            return \"Estate or Copper\"\n        else:\n            return \"Province or Gold\"\n    elif G + S + C == 2:\n        if G == 2:\n            return \"Province or Gold\"\n        elif S == 2:\n            return \"Province or Gold\"\n        else:\n            return \"Estate or Copper\"\n    elif G + S + C == 3:\n        if G == 3:\n            return \"Duchy or Gold\"\n        elif S == 3:\n            return \"Duchy or Gold\"\n        else:\n            return \"Province or Gold\"\n    else:\n        return \"Province or Gold\""
    },
    {
        "number": 4800,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d, s = map(int, stdin.readline().split())\n    if k == 0:\n        return \"impossible\"\n    if k == n:\n        return str(d)\n    if k == 1:\n        return str(s)\n    if k == 2:\n        return str((s + d) / 2)\n    if k == 3:\n        return str((s + d + 100) / 3)\n    if k == 4:\n        return str((s + d + 100 + 100) / 4)\n    if k == 5:\n        return str((s + d + 100 + 100 + 100) / 5)\n    if k == 6:\n        return str((s + d + 100 + 100 + 100 + 100) / 6)\n    if k == 7:\n        return str((s + d + 100 + 100 + 100 + 100 + 100) / 7)\n    if k == 8:\n        return str((s + d + 100 + 100 + 100 + 100 + 100 + 100) / 8)\n    if k == 9:\n        return str((s + d + 100 + 100 + 100 + 100 + 100 + 100 + 100) / 9)\n    if k == 10:\n        return str((s + d + 100 + 100 + 100 + 100 + 100 + 100 + 100 + 100) / 10)\n    return \"impossible\""
    },
    {
        "number": 4801,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    g = [a[0]]\n    for i in range(1, n):\n        if a[i] > g[-1]:\n            g.append(a[i])\n        else:\n            j = bisect_left(g, a[i])\n            g[j] = a[i]\n    return str(len(g)) + '\\n' +''.join(map(str, g))\n\nfrom bisect import bisect_left"
    },
    {
        "number": 4802,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    if m - 45 < 0:\n        h -= 1\n        m += 60\n    return f\"{h % 24:02d} {m - 45:02d}\""
    },
    {
        "number": 4803,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = float(stdin)\n    if N < 0.36788 or N > 2.718281:\n        return \"Invalid input\"\n    a = 1\n    while True:\n        a = a**a\n        if abs(a - N) < 1e-5:\n            return str(a)"
    },
    {
        "number": 4804,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = int(stdin)\n    result = []\n    for i in range(2, S+1):\n        for j in range(1, i):\n            if (i-j)%2 == 0 and (i-j)//2 >= 1 and (i-j)//2 <= 5:\n                result.append(f\"{i-j},{j}\")\n    result.sort(key=lambda x: (int(x.split(\",\")[0]), int(x.split(\",\")[1])))\n    return f\"{S}:\\n\" + \"\\n\".join(result)"
    },
    {
        "number": 4805,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            return \"no\"\n        seen.add(word)\n    return \"yes\""
    },
    {
        "number": 4806,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    moves = stdin.strip()\n    combo = \"\"\n    result = \"\"\n    for move in moves:\n        if move == \"R\":\n            result += \"S\"\n        elif move == \"B\":\n            result += \"K\"\n        elif move == \"L\":\n            result += \"H\"\n        elif move == \"C\":\n            result += combo\n            combo = \"\"\n        else:\n            combo += move\n    if combo:\n        result += combo\n    return result"
    },
    {
        "number": 4807,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split())\n    for i in range(1, n+1):\n        if i % x == 0 and i % y == 0:\n            print(\"FizzBuzz\")\n        elif i % x == 0:\n            print(\"Fizz\")\n        elif i % y == 0:\n            print(\"Buzz\")\n        else:\n            print(i)"
    },
    {
        "number": 4808,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d_m = map(int, stdin.split())\n    d_list = list(map(int, stdin.split()))\n    d_list.reverse()\n    for i in range(n):\n        if d_list[i] <= d_m:\n            return f\"It hadn't snowed this early in {i+1} years!\"\n    return \"It had never snowed this early!\""
    },
    {
        "number": 4809,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, n = map(int, stdin.split())\n    players = list(range(1, n+1))\n    for i in range(s):\n        player = players.pop(0)\n        if len(players) == 1:\n            return players[0]\n        if len(players) % 2 == 0:\n            players = players[::-1]\n        else:\n            players = players[1:] + players[:1]\n    return players[0]"
    },
    {
        "number": 4810,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Find the matrix with the most rows\n    n = len(stdin)\n    r = 1\n    c = n\n    while r * c < n:\n        r += 1\n    matrix = [[0] * c for _ in range(r)]\n    i = 0\n    j = 0\n    for letter in stdin:\n        matrix[i][j] = letter\n        j += 1\n        if j == c:\n            j = 0\n            i += 1\n    # Decrypt the message\n    decrypted = \"\"\n    for i in range(c):\n        for j in range(r):\n            decrypted += matrix[j][i]\n    return decrypted"
    },
    {
        "number": 4811,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    n = 1\n    while 2**n < k:\n        n += 1\n    return str(2**(n-1)) +'' + str(n-1)"
    },
    {
        "number": 4812,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    common_word = stdin.readline().strip()\n    num_lists = int(stdin.readline().strip())\n    endings = []\n    for i in range(num_lists):\n        endings.append(stdin.readline().strip().split())\n    num_phrases = int(stdin.readline().strip())\n    phrases = []\n    for i in range(num_phrases):\n        phrases.append(stdin.readline().strip().split())\n    result = []\n    for phrase in phrases:\n        if len(phrase) == 2:\n            if phrase[0][-1] in endings[0] and phrase[1][0] in endings[0]:\n                result.append('YES')\n            else:\n                result.append('NO')\n        elif len(phrase) == 3:\n            if phrase[0][-1] in endings[0] and phrase[1][0] in endings[0] and phrase[2][0] in endings[0]:\n                result.append('YES')\n            else:\n                result.append('NO')\n        else:\n            result.append('NO')\n    return '\\n'.join(result)"
    },
    {
        "number": 4813,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.split('\\n')[0]\n    permutation = stdin.split('\\n')[1]\n    alphabet = list('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    for letter in permutation:\n        alphabet.remove(letter)\n    for letter in word:\n        if letter not in alphabet:\n            return 'LOSE'\n    return 'WIN'"
    },
    {
        "number": 4814,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    names = sorted(stdin.readline().strip() for _ in range(n))\n\n    # check if list is in increasing or decreasing order\n    if all(names[i] <= names[i+1] for i in range(n-1)):\n        return \"INCREASING\"\n    elif all(names[i] >= names[i+1] for i in range(n-1)):\n        return \"DECREASING\"\n    else:\n        return \"NEITHER\""
    },
    {
        "number": 4815,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, m = map(int, stdin.split())\n    players = {}\n    for i in range(n):\n        name = stdin.readline().strip()\n        players[name] = 0\n    for i in range(m):\n        name, points = stdin.readline().strip().split()\n        players[name] += int(points)\n    winners = [name for name, score in players.items() if score >= p]\n    if len(winners) == 0:\n        return \"No winner!\"\n    else:\n        winners.sort(key=lambda x: players[x], reverse=True)\n        return \"\\n\".join(winners) + \"\\n\" + \" \".join(winners) + \" wins!\""
    },
    {
        "number": 4816,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, x1, y1, x2, y2 = map(int, stdin.split())\n    if x1 == x2:\n        return str(abs(y - y1))\n    elif y1 == y2:\n        return str(abs(x - x1))\n    else:\n        a = (y2 - y1) / (x2 - x1)\n        b = y1 - a * x1\n        if x <= x1:\n            return str(abs(a * x + b - y))\n        elif x >= x2:\n            return str(abs(a * x + b - y))\n        else:\n            return str(abs(a * x + b - y))"
    },
    {
        "number": 4817,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    digits = [int(digit) for digit in str(X)]\n    digits.sort()\n    for i in range(len(digits)):\n        if digits[i] > 0:\n            digits[i] -= 1\n            break\n    else:\n        return \"0\"\n    digits.sort()\n    return int(\"\".join(str(digit) for digit in digits))"
    },
    {
        "number": 4818,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    tasks = list(map(int, stdin.split()[2:2+n]))\n    quiet_intervals = list(map(int, stdin.split()[2+n:]))\n    tasks_completed = 0\n    current_time = 0\n    for quiet_interval in quiet_intervals:\n        if current_time + tasks[tasks_completed] <= quiet_interval:\n            current_time += tasks[tasks_completed]\n            tasks_completed += 1\n        else:\n            break\n    return tasks_completed"
    },
    {
        "number": 4819,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(line.strip()) for line in stdin.split('\\n') if line.strip()]\n    mod_nums = [num % 42 for num in nums]\n    distinct_mod_nums = set(mod_nums)\n    return str(len(distinct_mod_nums))"
    },
    {
        "number": 4820,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, b = map(int, stdin.split())\n    if b == 0:\n        return \"yes\"\n    if N == 1:\n        return \"yes\" if b >= 1000 else \"no\"\n    if N == 2:\n        return \"yes\" if b >= 500 else \"no\"\n    if N == 3:\n        return \"yes\" if b >= 333 else \"no\"\n    if N == 4:\n        return \"yes\" if b >= 250 else \"no\"\n    if N == 5:\n        return \"yes\" if b >= 200 else \"no\"\n    if N == 6:\n        return \"yes\" if b >= 166 else \"no\"\n    if N == 7:\n        return \"yes\" if b >= 142 else \"no\"\n    if N == 8:\n        return \"yes\" if b >= 125 else \"no\"\n    if N == 9:\n        return \"yes\" if b >= 111 else \"no\"\n    if N == 10:\n        return \"yes\" if b >= 100 else \"no\"\n    if N == 11:\n        return \"yes\" if b >= 90 else \"no\"\n    if N == 12:\n        return \"yes\" if b >= 83 else \"no\"\n    if N == 13:\n        return \"yes\" if b >= 77 else \"no\"\n    if N == 14:\n        return \"yes\" if b >= 71 else \"no\"\n    if N == 15:\n        return \"yes\" if b >= 66 else \"no\"\n    if N == 16:\n        return \"yes\" if b >= 62 else \"no\"\n    if N == 17:\n        return \"yes\" if b >= 58 else \"no\"\n    if N == 18:\n        return \"yes\" if b >= 55 else \"no\"\n    if N == 19:\n        return \"yes\" if b >= 52 else \"no\"\n    if N == 20:\n        return \"yes\" if b >= 50 else \"no\"\n    if N == 21:\n        return \"yes\" if b >= 48 else \"no\"\n    if N == 22:\n        return \"yes\" if b >= 46 else \"no\"\n    if N == 23:\n        return \"yes\" if b >= 44 else \"no\"\n    if N == 24:\n        return \"yes\" if b >= 43 else \"no\"\n    if N == 25:\n        return \"yes\" if b >= 42 else \"no\"\n    if N == 26:\n        return \"yes\" if b >= 41 else \"no\"\n    if N == 27:\n        return \"yes\" if b >= 40 else \"no\"\n    if N == 28:\n        return \"yes\" if b >= 39 else \"no\"\n    if N == 29:\n        return \"yes\" if b >= 38 else \"no\"\n    if N == 30:\n        return \"yes\" if b >= 37 else \"no\"\n    if N == 31:\n        return \"yes\" if b >= 36 else \"no\"\n    if N == 32:\n        return \"yes\" if b >= 35 else \"no\"\n    if N == 33:\n        return \"yes\" if b >= 34 else \"no\"\n    if N == 34:\n        return \"yes\" if b >= 33 else \"no\"\n    if N == 35:\n        return \"yes\" if b >= 32 else \"no\"\n    if N == 36:\n        return \"yes\" if b >= 31 else \"no\"\n    if N == 37:\n        return \"yes\" if b >= 30 else \"no\"\n    if N == 38:\n        return \"yes\" if b >= 29 else \"no\"\n    if N == 39:\n        return \"yes\" if b >= 28 else \"no\"\n    if N == 40:\n        return \"yes\" if b >= 27 else \"no\"\n    if N == 41:\n        return \"yes\" if b >= 26 else \"no\"\n    if N == 42:\n        return \"yes\" if b >= 25 else \"no\"\n    if N == 43:\n        return \"yes\" if b >= 24 else \"no\"\n    if N == 44:"
    },
    {
        "number": 4821,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into a list of card labels\n    cards = stdin.split()\n\n    # Initialize a dictionary to keep track of the number of cards for each suit\n    card_count = {'P': 0, 'K': 0, 'H': 0, 'T': 0}\n\n    # Iterate over the list of card labels and update the card_count dictionary\n    for card in cards:\n        suit = card[0]\n        number = int(card[1:])\n        if number > 13 or number < 1:\n            return \"GRESKA\"\n        card_count[suit] += 1\n\n    # Calculate the number of missing cards for each suit\n    missing_cards = [13 - card_count['P'], 13 - card_count['K'], 13 - card_count['H'], 13 - card_count['T']]\n\n    # Return the missing_cards list as a space-separated string\n    return''.join(str(card) for card in missing_cards)"
    },
    {
        "number": 4822,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, S, K = map(int, stdin.split())\n    picture = []\n    for i in range(R):\n        picture.append(list(stdin.readline().strip()))\n    max_flies = 0\n    for i in range(R):\n        for j in range(S):\n            if picture[i][j] == '*' and (i < K or i >= R-K or j < K or j >= S-K):\n                max_flies += 1\n    picture[K][K] = '+'\n    picture[K][K+K-1] = '+'\n    picture[K+K-1][K] = '+'\n    picture[K+K-1][K+K-1] = '+'\n    for i in range(K):\n        picture[K][K+i] = '-'\n        picture[K+i][K] = '|'\n        picture[K+K-1][K+i] = '-'\n        picture[K+i][K+K-1] = '|'\n    for i in range(K, R-K):\n        picture[i][K] = '-'\n        picture[i][K+K-1] = '|'\n    for i in range(K, S-K):\n        picture[K][i] = '|'\n        picture[K+K-1][i] = '|'\n    for i in range(K):\n        picture[K+i][K] = '-'\n        picture[K+i][K+K-1] = '|'\n    for i in range(K, S-K):\n        picture[K+K-1][i] = '|'\n    for i in range(K, R-K):\n        picture[i][K+K-1] = '-'\n    picture[K+K//2][K+K//2] = '*'\n    return str(max_flies) + '\\n' + '\\n'.join([''.join(row) for row in picture])"
    },
    {
        "number": 4823,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cards = stdin.split()\n    ranks = [card[0] for card in cards]\n    suits = [card[1] for card in cards]\n    ranks_count = {}\n    for rank in ranks:\n        if rank in ranks_count:\n            ranks_count[rank] += 1\n        else:\n            ranks_count[rank] = 1\n    max_count = 0\n    for count in ranks_count.values():\n        if count > max_count:\n            max_count = count\n    return str(max_count)"
    },
    {
        "number": 4824,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    C, P = map(int, stdin.split())\n    heights = list(map(int, stdin.readline().split()))\n    dp = [[0] * (C+1) for _ in range(P+1)]\n    dp[0][0] = 1\n    for i in range(1, P+1):\n        for j in range(C+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= heights[i-1]:\n                dp[i][j] += dp[i][j-heights[i-1]]\n    return dp[P][C]"
    },
    {
        "number": 4825,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Define the translation table\n    translation_table = {\n        'a': '@',\n        'b': '8',\n        'c': '(',\n        'd': '|',\n        'e': '3',\n        'f': '#',\n        'g': '6',\n        'h': '-',\n        'i': '|',\n        'j': '_',\n        'k': '<',\n        'l': '1',\n       'm': '[',\n        'n': '[]\\\\[]',\n        'o': '0',\n        'p': '|D',\n        'q': '(,)',\n        'r': '|Z',\n       's': '$',\n        't': \"']['\",\n        'u': '|_',\n        'v': '\\\\/',\n        'w': '4//',\n        'x': '}{',\n        'y': '`/',\n        'z': '2'\n    }\n\n    # Translate the input string\n    translated_string = ''\n    for char in stdin:\n        if char.isalpha():\n            if char.islower():\n                translated_string += translation_table[char.lower()]\n            else:\n                translated_string += translation_table[char]\n        else:\n            translated_string += char\n\n    return translated_string"
    },
    {
        "number": 4826,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2 == 1:\n        return \"Alice\"\n    else:\n        return \"Bob\""
    },
    {
        "number": 4827,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split('\\n')\n    n = int(words[0])\n    sentence = ''\n    for i in range(1, n):\n        word = words[i]\n        if word == '$':\n            sentence += str(len(sentence))\n        else:\n            sentence += word +''\n    return sentence.strip()"
    },
    {
        "number": 4828,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    program = stdin.strip().split()\n    count = 0\n    for i in range(len(program)):\n        if program[i].isupper():\n            count += 1\n    return str(count)"
    },
    {
        "number": 4829,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    left, right = map(int, stdin.split())\n    if left == 0 and right == 0:\n        return \"Not a moose\"\n    elif left == right:\n        points = 6 + left * 2\n        if points % 2 == 0:\n            return f\"Even {points}\"\n        else:\n            return f\"Odd {points}\"\n    else:\n        max_tines = max(left, right)\n        points = 10 + max_tines * 2\n        if points % 2 == 0:\n            return f\"Even {points}\"\n        else:\n            return f\"Odd {points}\""
    },
    {
        "number": 4830,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    words = lines[1:n+1]\n    s = lines[n+1]\n\n    # count number of possible words\n    count = 0\n    for word in words:\n        if all(s[int(c)-2] in word for c in s):\n            count += 1\n\n    # return result\n    return str(count)"
    },
    {
        "number": 4831,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input string to list of characters\n    letters = list(stdin)\n\n    # Initialize output string\n    output = \"\"\n\n    # Iterate over every third letter\n    for i in range(0, len(letters), 3):\n        # Add Peter Pan frame to output string\n        output += \"..#..\"\n        output += \".#.#.\"\n        output += \".#\" + letters[i] + \".\"\n        output += \".#.#.\"\n        output += \"..#..\"\n\n        # Add Wendy frame to output string\n        output += \"..*..\"\n        output += \".*.*.\"\n        output += \".*\" + letters[i] + \".*\"\n        output += \".*.*.\"\n        output += \"..*..\"\n\n        # Add newline character after every third frame\n        if i!= len(letters) - 1:\n            output += \"\\n\"\n\n    return output"
    },
    {
        "number": 4832,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    pi = 3.141592653589793\n    area_normal = pi * R ** 2\n    area_taxicab = 2 * R ** 2\n    return f\"{area_normal:.6f}\\n{area_taxicab:.6f}\""
    },
    {
        "number": 4833,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    k = list(map(int, stdin.readline().strip().split()))\n\n    # Calculate sum of expenses\n    expenses = sum(filter(lambda x: x < 0, k))\n\n    # Output result\n    return str(expenses)"
    },
    {
        "number": 4834,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.split()[0])\n    times = list(map(int, stdin.split()[1:]))\n\n    # Sort teams by time\n    times.sort()\n\n    # Calculate total time\n    total_time = 0\n    for i in range(N):\n        total_time += times[i]\n\n    # Return total time\n    return str(total_time)"
    },
    {
        "number": 4835,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, n, m = map(int, stdin.split())\n    grid = []\n    for i in range(n):\n        grid.append(list(stdin.readline().strip()))\n    start = None\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'S':\n                start = (i, j)\n                break\n        if start:\n            break\n    if not start:\n        return \"NOT POSSIBLE\"\n    visited = set()\n    queue = [(start, 0)]\n    while queue:\n        curr, dist = queue.pop(0)\n        if curr in visited:\n            continue\n        visited.add(curr)\n        if grid[curr[0]][curr[1]] == '1':\n            continue\n        if curr[0] == 0 or curr[0] == n-1 or curr[1] == 0 or curr[1] == m-1:\n            return str(dist)\n        for i, j in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            if 0 <= curr[0]+i < n and 0 <= curr[1]+j < m and grid[curr[0]+i][curr[1]+j] not in ['1', 'U', 'D', 'L', 'R']:\n                queue.append(((curr[0]+i, curr[1]+j), dist+1))\n    return \"NOT POSSIBLE\""
    },
    {
        "number": 4836,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, c = map(int, stdin.split())\n    weights = list(map(int, stdin.split()))\n\n    # sort weights in descending order\n    weights.sort(reverse=True)\n\n    # initialize variables\n    total_weight = 0\n    count = 0\n\n    # loop through weights\n    for weight in weights:\n        # check if weight is less than or equal to remaining capacity\n        if weight <= c - total_weight:\n            # add weight to total weight and increment count\n            total_weight += weight\n            count += 1\n        # if weight is greater than remaining capacity, break out of loop\n        else:\n            break\n\n    # return count\n    return count"
    },
    {
        "number": 4837,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, N = map(int, stdin.splitlines()[0].split())\n    symbols = stdin.splitlines()[1]\n    friends_symbols = [stdin.splitlines()[i+2] for i in range(N)]\n    score = 0\n    max_score = 0\n    for i in range(R):\n        sven_symbol = symbols[i]\n        for j in range(N):\n            friend_symbol = friends_symbols[j][i]\n            if sven_symbol == friend_symbol:\n                score += 1\n            elif (sven_symbol == 'S' and friend_symbol == 'P') or (sven_symbol == 'P' and friend_symbol == 'R') or (sven_symbol == 'R' and friend_symbol == 'S'):\n                score += 2\n        max_score += 2*N\n    return f\"{score}\\n{max_score}\""
    },
    {
        "number": 4838,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    times = [int(line) for line in lines[1:]]\n    start_time = None\n    total_time = 0\n    for time in times:\n        if start_time is None:\n            start_time = time\n            total_time = 0\n        elif time - start_time >= 1:\n            total_time += time - start_time\n            start_time = time\n    if start_time is None:\n        return'still running'\n    else:\n        return str(total_time)"
    },
    {
        "number": 4839,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    c = list(map(int, stdin.readline().strip().split()))\n    balloons = [0] * (n+1)\n    for i in range(n):\n        balloons[c[i]] += 1\n    total_helium = sum(c)\n    if total_helium > n:\n        return \"impossible\"\n    max_capacity = max(c)\n    max_fraction = 0\n    for i in range(max_capacity, n+1):\n        if balloons[i] == 0:\n            continue\n        if i == max_capacity:\n            max_fraction = 1\n        else:\n            max_fraction = min(max_fraction, balloons[i]/i)\n    return str(max_fraction)"
    },
    {
        "number": 4840,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    a1, b1, a2, b2 = map(int, stdin.split())\n    # calculate probability of winning for each player\n    p1 = (b1 - a1 + 1) / (b1 - a1 + 1) ** 2\n    p2 = (b2 - a2 + 1) / (b2 - a2 + 1) ** 2\n    # compare probabilities and return winner\n    if p1 > p2:\n        return \"Gunnar\"\n    elif p2 > p1:\n        return \"Emma\"\n    else:\n        return \"Tie\""
    },
    {
        "number": 4841,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    words = stdin.split('\\n')[1].split()\n    count = 0\n    for word in words:\n        if word =='mumble':\n            count += 1\n        else:\n            try:\n                count += int(word)\n            except ValueError:\n                return'something is fishy'\n    if count == n:\n        return'makes sense'\n    else:\n        return'something is fishy'"
    },
    {
        "number": 4842,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *v = map(int, stdin.split())\n    d = 0\n    while n > 1:\n        if v[n-1] == v[n-2]:\n            n -= 1\n        else:\n            break\n    if n == 1:\n        d = 1\n    else:\n        for i in range(2, n):\n            if v[i] == v[i-1]:\n                d = i-1\n                break\n    v_n_plus_1 = v[d]\n    for i in range(d+1, n):\n        v_n_plus_1 = v_n_plus_1 * (i-d) + v[i]\n    return f\"{d} {v_n_plus_1}\""
    },
    {
        "number": 4843,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    board = [[False for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        x, y = map(int, stdin.readline().strip().split())\n        board[x][y] = True\n    for i in range(N):\n        for j in range(N):\n            if board[i][j]:\n                for k in range(N):\n                    if board[i][k] or board[k][j]:\n                        return \"INCORRECT\"\n    return \"CORRECT\""
    },
    {
        "number": 4844,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    matrix = []\n    for i in range(n):\n        row = list(map(int, stdin.readline().strip().split()))\n        matrix.append(row)\n    result = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            if i == j:\n                row.append(0)\n            else:\n                row.append(matrix[i][j] & matrix[j][i])\n        result.append(row)\n    return''.join(map(str, sum(result, [])))"
    },
    {
        "number": 4845,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    day, month = map(int, stdin.split())\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if month == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            days_in_month[1] = 29\n        else:\n            days_in_month[1] = 28\n    total_days = sum(days_in_month[:month-1]) + day\n    day_of_week = (total_days + 4) % 7\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n    return days[day_of_week]"
    },
    {
        "number": 4846,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, D, X = map(int, stdin.split())\n    N = L\n    while sum(int(digit) for digit in str(N))!= X:\n        N += 1\n    M = D\n    while sum(int(digit) for digit in str(M))!= X:\n        M -= 1\n    return f\"{N}\\n{M}\""
    },
    {
        "number": 4847,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split('\\n')\n    x1, y1 = map(int, lines[0].split())\n    x2, y2 = map(int, lines[1].split())\n    x3, y3 = map(int, lines[2].split())\n    N = int(lines[3])\n    trees = []\n    for i in range(N):\n        x, y = map(int, lines[4+i].split())\n        trees.append((x, y))\n\n    # calculate area of triangle\n    area = abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2)\n\n    # count trees belonging to Ante\n    count = 0\n    for x, y in trees:\n        if x1 <= x <= x2 and y1 <= y <= y3:\n            count += 1\n\n    # output results\n    return f'{area:.1f}\\n{count}'"
    },
    {
        "number": 4848,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(2, n):\n        if n % m == 0 and m * n % (m * m) == 0:\n            return str(m)\n    return \"No solution found\"\n\nprint(solution(input()))"
    },
    {
        "number": 4849,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    blimps = stdin.split('\\n')\n    cia_blimps = []\n    for i, blimp in enumerate(blimps):\n        if 'FBI' in blimp:\n            cia_blimps.append(i+1)\n    if len(cia_blimps) == 0:\n        return 'HE GOT AWAY!'\n    else:\n        return''.join(map(str, sorted(cia_blimps)))"
    },
    {
        "number": 4850,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    triangles = []\n    for line in stdin.split('\\n'):\n        if line:\n            sides = list(map(float, line.split()))\n            triangles.append(sides)\n\n    # Find the longest side of the rod\n    rod_length = max(max(triangle) for triangle in triangles)\n\n    # Find the minimum required length for the rod\n    required_length = 0\n    for triangle in triangles:\n        required_length += max(triangle)\n\n    # Add the length of the rod to the required length\n    required_length += rod_length\n\n    return str(required_length)"
    },
    {
        "number": 4851,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = n\n    while True:\n        if i % sum(int(digit) for digit in str(i)) == 0:\n            return str(i)\n        i += 1"
    },
    {
        "number": 4852,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Initialize variables\n    num_strings = 0\n    num_integers = 0\n    num_concatenations = 0\n    num_additions = 0\n    num_digits = 0\n    current_num = 0\n    current_op = '+'\n    # Iterate through each character in the input string\n    for char in stdin:\n        # If the character is a digit, add it to the current number\n        if char.isdigit():\n            current_num = current_num * 10 + int(char)\n            num_digits += 1\n        # If the character is a plus symbol, update the operator and check if the current number needs to be added or concatenated\n        elif char == '+':\n            if current_op == '+':\n                num_integers += 1\n                num_additions += 1\n            else:\n                num_strings += 1\n                num_concatenations += 1\n            current_op = '+'\n        # If the character is a boxplus symbol, update the operator and check if the current number needs to be concatenated\n        elif char == '\\u25b2':\n            if current_op == '+':\n                num_strings += 1\n                num_concatenations += 1\n            else:\n                num_integers += 1\n                num_additions += 1\n            current_op = '\\u25b2'\n        # If the character is a minus sign, ignore it (not supported by DPG)\n        elif char == '-':\n            continue\n        # If the character is not a digit, plus symbol, boxplus symbol, or minus sign, raise an error\n        else:\n            raise ValueError('Invalid character in input: {}'.format(char))\n        # If the current number has reached the maximum number of digits, add it to the appropriate counter and reset the current number\n        if num_digits == 18:\n            if current_op == '+':\n                num_integers += 1\n                num_additions += 1\n            else:\n                num_strings += 1\n                num_concatenations += 1\n            current_num = 0\n            num_digits = 0\n    # If there is a final number left over, add it to the appropriate counter\n    if num_digits > 0:\n        if current_op == '+':\n            num_integers += 1\n            num_additions += 1\n        else:\n            num_strings += 1\n            num_concatenations += 1\n    # Calculate the total number of distinct integers that can be formed\n    num_distinct_integers = num_integers * 9 + num_strings * 9 + num_concatenations * 8 + num_additions * 8\n    return str(num_distinct_integers)"
    },
    {
        "number": 4853,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    C = [0] * (n+1)\n    C[0] = a[0]\n    for i in range(1, n+1):\n        C[i] = C[i-1] + a[i]\n    return''.join(map(str, C))"
    },
    {
        "number": 4854,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    freq = [0] * (c + 1)\n    for num in seq:\n        freq[num] += 1\n    sorted_seq = []\n    for i in range(c + 1):\n        while freq[i] > 0:\n            sorted_seq.append(i)\n            freq[i] -= 1\n    return''.join(map(str, sorted_seq))"
    },
    {
        "number": 4855,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, I = map(int, stdin.split())\n    if I == 0:\n        return str(A)\n    else:\n        return str(int(I * A / 100 + 0.5))"
    },
    {
        "number": 4856,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return str(a)[::-1]\n    else:\n        return str(b)[::-1]"
    },
    {
        "number": 4857,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, w = map(int, stdin.split())\n    words = []\n    for i in range(1, 27):\n        for j in range(1, 27):\n            for k in range(1, 27):\n                if i + j + k == w:\n                    words.append(chr(ord('a') + i - 1) + chr(ord('a') + j - 1) + chr(ord('a') + k - 1))\n    for word in words:\n        if len(word) == l:\n            return word\n    return \"impossible\""
    },
    {
        "number": 4858,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4859,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, d, c, l = map(int, stdin.split())\n    if l % (b + d + c)!= 0:\n        return \"impossible\"\n    n = l // (b + d + c)\n    result = []\n    for i in range(n + 1):\n        for j in range(n - i + 1):\n            k = n - i - j\n            if i * b + j * d + k * c == l:\n                result.append(f\"{i} {j} {k}\")\n    return \"\\n\".join(sorted(result))"
    },
    {
        "number": 4860,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    numbers = sorted(set(map(int, stdin.readline().strip().split())))\n    if numbers[-1] == n:\n        return \"good job\"\n    else:\n        return \"\\n\".join(map(str, range(numbers[-1]+1, n+1)))"
    },
    {
        "number": 4861,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, s, v = map(float, stdin.split())\n    c = 1\n    while True:\n        t = (n * (log(n, 2)) ** (c * sqrt(2))) / (p * 10**9)\n        if t >= s * (1 + 1 / c) / v:\n            break\n        c += 1\n    return f\"{t:.10f} {c:.6f}\""
    },
    {
        "number": 4862,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"0\"\n    elif N == 1:\n        return \"0\"\n    elif N == 2:\n        return \"1\"\n    else:\n        return str(N * (N - 1) // 2)"
    },
    {
        "number": 4863,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    answers = stdin.readline().strip().split()\n    score = 0\n    for i in range(n):\n        if answers[i] == 'A':\n            score += 1\n    return str(score)"
    },
    {
        "number": 4864,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C, Z_R, Z_C = map(int, stdin.split())\n    article = []\n    for i in range(R):\n        article.append(list(stdin.readline().strip()))\n    enlarged_article = [['.' for j in range(C*Z_C)] for i in range(R*Z_R)]\n    for i in range(R):\n        for j in range(C):\n            for k in range(Z_R):\n                for l in range(Z_C):\n                    enlarged_article[i*Z_R+k][j*Z_C+l] = article[i][j]\n    return '\\n'.join([''.join(row) for row in enlarged_article])"
    },
    {
        "number": 4865,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline().strip())\n    for i in range(cases):\n        line = stdin.readline().strip().split()\n        direction, minutes, hour, minute = line[0], int(line[1]), int(line[2]), int(line[3])\n        if direction == 'F':\n            hour += minutes // 60\n            minute = minutes % 60\n        else:\n            minute -= minutes\n            if minute < 0:\n                hour -= 1\n                minute += 60\n                if hour < 0:\n                    hour = 23\n        print(f\"{hour:02d} {minute:02d}\")"
    },
    {
        "number": 4866,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.strip().split()\n    month = date[0]\n    day = int(date[1])\n    if month == 'OCT' and day == 31:\n        return 'yup'\n    elif month == 'DEC' and day == 25:\n        return 'yup'\n    else:\n        return 'nope'"
    },
    {
        "number": 4867,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    m, n = map(int, stdin.readline().split())\n    u, l, r, d = map(int, stdin.readline().split())\n    puzzle = []\n    for i in range(m):\n        puzzle.append(list(stdin.readline().strip()))\n\n    # create frame\n    frame = []\n    for i in range(u):\n        row = []\n        for j in range(l+r+n):\n            if j % (l+r+n) < l or j % (l+r+n) >= l+n:\n                row.append('#')\n            else:\n                row.append('.')\n        frame.append(row)\n    for i in range(m+u+d):\n        row = []\n        for j in range(l):\n            row.append('#')\n        for j in range(n):\n            row.append(puzzle[i-u][j])\n        for j in range(r):\n            row.append('#')\n        frame.append(row)\n    for i in range(d):\n        row = []\n        for j in range(l+r+n):\n            if j % (l+r+n) < l or j % (l+r+n) >= l+n:\n                row.append('#')\n            else:\n                row.append('.')\n        frame.append(row)\n\n    # print frame\n    for row in frame:\n        print(''.join(row))\n\n    return ''"
    },
    {
        "number": 4868,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    white_pieces = set()\n    black_pieces = set()\n    for line in stdin.split('\\n'):\n        if line.startswith('White:'):\n            white_pieces.update(line[6:].split(','))\n        elif line.startswith('Black:'):\n            black_pieces.update(line[6:].split(','))\n\n    # Create the board\n    board = [['.' for _ in range(8)] for _ in range(8)]\n    for piece in white_pieces:\n        row, col = ord(piece[1]) - ord('1'), ord(piece[0]) - ord('a')\n        board[row][col] = 'r'\n    for piece in black_pieces:\n        row, col = ord(piece[1]) - ord('1'), ord(piece[0]) - ord('a')\n        board[row][col] = 'b'\n\n    # Print the board\n    for row in board:\n        print(' '.join(row))\n\n    # Convert the board to input for the problem \"Help Me With The Game\"\n    input_str = ''\n    for row in board:\n        for piece in row:\n            if piece == '.':\n                input_str +=''\n            elif piece == 'r':\n                input_str += 'K'\n            elif piece == 'b':\n                input_str += 'Q'\n            else:\n                input_str += piece\n        input_str += '\\n'\n\n    return input_str"
    },
    {
        "number": 4869,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, N = map(float, stdin.split())\n    if A <= N:\n        return \"Diablo is happy!\"\n    else:\n        return \"Need more materials!\""
    },
    {
        "number": 4870,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    f, s, g, u, d = map(int, stdin.split())\n    if s > g:\n        return \"use the stairs\"\n    if s == g:\n        return \"0\"\n    if s + u > g:\n        return \"use the stairs\"\n    if s + u == g:\n        return str(u)\n    if s + u + d > g:\n        return \"use the stairs\"\n    if s + u + d == g:\n        return str(u + d)\n    return \"use the stairs\""
    },
    {
        "number": 4871,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    scores = list(map(int, stdin.readline().strip().split()))\n    scores.sort(reverse=True)\n    group_score = sum([scores[i] * (4/5)**i for i in range(n)]) / 5\n    print(group_score)\n    avg_new_group_score = sum([scores[i] * (4/5)**i for i in range(n-1)]) / 5\n    print(avg_new_group_score)\n    return \"\""
    },
    {
        "number": 4872,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    days = list(map(int, stdin.split()[1:]))\n    days.sort()\n    count = 0\n    i = 0\n    while i < n:\n        if days[i] >= 365:\n            break\n        j = i + 1\n        while j < n and days[j] - days[i] <= 1:\n            j += 1\n        if j - i > 1:\n            count += (j - i) // 2\n        i = j\n    return count"
    },
    {
        "number": 4873,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    W, H = map(int, lines[0].split())\n    map_ = lines[1:]\n\n    # initialize variables\n    gold = 0\n    player_pos = None\n    for i in range(H):\n        for j in range(W):\n            if map_[i][j] == 'P':\n                player_pos = (i, j)\n            elif map_[i][j] == 'G':\n                gold += 1\n\n    # simulate game\n    while True:\n        # get player's next move\n        move = input().strip()\n\n        # check if player has fallen into a trap\n        if map_[player_pos[0]+1][player_pos[1]] == 'T' or \\\n           map_[player_pos[0]-1][player_pos[1]] == 'T' or \\\n           map_[player_pos[0]][player_pos[1]+1] == 'T' or \\\n           map_[player_pos[0]][player_pos[1]-1] == 'T':\n            break\n\n        # check if player has reached the edge of the map\n        if player_pos[0] == 0 or player_pos[0] == H-1 or \\\n           player_pos[1] == 0 or player_pos[1] == W-1:\n            break\n\n        # update player position and gold\n        if move == 'U':\n            player_pos = (player_pos[0]-1, player_pos[1])\n        elif move == 'D':\n            player_pos = (player_pos[0]+1, player_pos[1])\n        elif move == 'L':\n            player_pos = (player_pos[0], player_pos[1]-1)\n        elif move == 'R':\n            player_pos = (player_pos[0], player_pos[1]+1)\n        elif move == 'Q':\n            break\n        if map_[player_pos[0]][player_pos[1]] == 'G':\n            gold += 1\n\n    # output result\n    print(gold)\n\n    return ''"
    },
    {
        "number": 4874,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    grid = lines[1:n+1]\n    moves = 0\n    for i in range(n):\n        for j in range(m-1):\n            if grid[i][j] == '_' and grid[i][j+1] == '$':\n                moves += 1\n    return str(moves)"
    },
    {
        "number": 4875,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    pig_latin = []\n    for word in words:\n        if word[0] in 'aeiouy':\n            pig_latin.append(word + 'yay')\n        else:\n            vowel_index = 0\n            for i in range(len(word)):\n                if word[i] in 'aeiouy':\n                    vowel_index = i\n                    break\n            pig_latin.append(word[vowel_index:] + word[:vowel_index] + 'ay')\n    return''.join(pig_latin)"
    },
    {
        "number": 4876,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(n):\n        k = int(stdin.readline().strip())\n        menu = [stdin.readline().strip() for _ in range(k+1)]\n        if \"pea soup\" in menu[1:] and \"pancakes\" in menu[1:]:\n            return menu[0]\n    return \"Anywhere is fine I guess\""
    },
    {
        "number": 4877,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h = map(int, stdin.split())\n    if h % a == 0:\n        return str(h // a)\n    else:\n        return str(h // a + 1)"
    },
    {
        "number": 4878,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r1, s = map(int, stdin.split())\n    r2 = (s - r1) // 2\n    return str(r2)"
    },
    {
        "number": 4879,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    if a == b or a == c:\n        return \"No\"\n    if a == \"North\" and b == \"West\" and c == \"East\":\n        return \"Yes\"\n    if a == \"South\" and b == \"East\" and c == \"West\":\n        return \"Yes\"\n    if a == \"East\" and b == \"North\" and c == \"South\":\n        return \"Yes\"\n    if a == \"West\" and b == \"South\" and c == \"North\":\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4880,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    key = stdin.readline().strip()\n    cipher = stdin.readline().strip()\n    plaintext = \"\"\n    for i in range(m):\n        if i < n:\n            plaintext += key[i]\n        else:\n            j = (i - n) % 26\n            plaintext += chr((ord(cipher[i]) - ord('a') - j) % 26 + ord('a'))\n    return plaintext"
    },
    {
        "number": 4881,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    if sum % 2 == 0:\n        return \"Even\"\n    elif sum % 2 == 1:\n        return \"Odd\"\n    else:\n        return \"Either\""
    },
    {
        "number": 4882,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    for i in range(1, n+1):\n        cost = int(lines[i])\n        digits = len(str(cost))\n        print(digits)\n    return ''"
    },
    {
        "number": 4883,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    translations = {}\n    for i in range(m):\n        a, b = stdin.split()\n        translations[a] = b\n    for i in range(n):\n        word1, word2 = stdin.split()\n        if len(word1)!= len(word2):\n            print(\"no\")\n            continue\n        for j in range(len(word1)):\n            if word1[j] not in translations or translations[word1[j]]!= word2[j]:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")"
    },
    {
        "number": 4884,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, P = map(int, stdin.split())\n    descriptions = [stdin.readline().strip() for _ in range(N)]\n\n    # count carrots\n    carrots = sum(desc.count('carrot') for desc in descriptions)\n\n    # add carrots for huffle-puff problems\n    carrots += P // 100\n\n    return str(carrots)"
    },
    {
        "number": 4885,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    lines = stdin.strip().split('\\n')\n    board = []\n    for line in lines:\n        board.append(list(line.strip()))\n\n    # Find the positions of the pieces\n    white_pieces = []\n    black_pieces = []\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] in 'KQRBNP':\n                if board[i][j] in 'KQRBNP':\n                    if board[i][j] in 'KQ':\n                        white_pieces.append(('K', chr(j + ord('a')) + str(i + 1)))\n                    elif board[i][j] in 'R':\n                        white_pieces.append(('R', chr(j + ord('a')) + str(i + 1)))\n                    elif board[i][j] in 'B':\n                        white_pieces.append(('B', chr(j + ord('a')) + str(i + 1)))\n                    elif board[i][j] in 'N':\n                        white_pieces.append(('N', chr(j + ord('a')) + str(i + 1)))\n                    elif board[i][j] in 'P':\n                        white_pieces.append(('P', chr(j + ord('a')) + str(i + 1)))\n            elif board[i][j] in 'kqrbnp':\n                if board[i][j] in 'kqrbnp':\n                    if board[i][j] in 'kq':\n                        black_pieces.append(('K', chr(j + ord('a')) + str(i + 1)))\n                    elif board[i][j] in 'r':\n                        black_pieces.append(('R', chr(j + ord('a')) + str(i + 1)))\n                    elif board[i][j] in 'b':\n                        black_pieces.append(('B', chr(j + ord('a')) + str(i + 1)))\n                    elif board[i][j] in 'n':\n                        black_pieces.append(('N', chr(j + ord('a')) + str(i + 1)))\n                    elif board[i][j] in 'p':\n                        black_pieces.append(('P', chr(j + ord('a')) + str(i + 1)))\n\n    # Sort the pieces by row and column\n    white_pieces.sort(key=lambda x: (int(x[1][1]), ord(x[1][0])))\n    black_pieces.sort(key=lambda x: (int(x[1][1]), ord(x[1][0])))\n\n    # Generate the output\n    white_output = 'White:'+ ', '.join([piece[0] + piece[1] for piece in white_pieces])\n    black_output = 'Black:'+ ', '.join([piece[0] + piece[1] for piece in black_pieces])\n    return white_output + '\\n' + black_output"
    },
    {
        "number": 4886,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 0:\n        return \"Your wish is granted!\"\n    if k == 1:\n        return \"You will become a flying monkey!\"\n    if k == n:\n        return \"You will become a flying monkey!\"\n    if k == n - 1:\n        return \"Your wish is granted!\"\n    return \"You will become a flying monkey!\""
    },
    {
        "number": 4887,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    fence_length = a / 2\n    return str(fence_length)"
    },
    {
        "number": 4888,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    tasks = list(map(int, stdin.readline().split()))\n    tasks.sort()\n    time_left = T\n    count = 0\n    for task in tasks:\n        if task <= time_left:\n            count += 1\n            time_left -= task\n        else:\n            break\n    return count"
    },
    {
        "number": 4889,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rods = list(map(int, stdin.split()))\n    rods.sort()\n    length = sum(rods)\n    for i in range(len(rods)):\n        length -= rods[i]\n        if length <= 0:\n            return str(rods[i])\n    return str(length)"
    },
    {
        "number": 4890,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split()[0:4])\n    c = list(map(int, stdin.split()[4:]))\n    if m > n:\n        return \"impossible\"\n    if m == n:\n        return \" \".join(map(str, c))\n    if m == 1:\n        return \" \".join(map(str, [n] + c))\n    if m == 2:\n        return \" \".join(map(str, [n//2] + [n//2] + c[n//2:]))\n    if m == 3:\n        return \" \".join(map(str, [n//3] + [n//3] + [n//3] + c[n//3:]))\n    if m == 4:\n        return \" \".join(map(str, [n//4] + [n//4] + [n//4] + [n//4] + c[n//4:]))\n    if m == 5:\n        return \" \".join(map(str, [n//5] + [n//5] + [n//5] + [n//5] + [n//5] + c[n//5:]))\n    if m == 6:\n        return \" \".join(map(str, [n//6] + [n//6] + [n//6] + [n//6] + [n//6] + [n//6] + c[n//6:]))\n    if m == 7:\n        return \" \".join(map(str, [n//7] + [n//7] + [n//7] + [n//7] + [n//7] + [n//7] + [n//7] + c[n//7:]))\n    if m == 8:\n        return \" \".join(map(str, [n//8] + [n//8] + [n//8] + [n//8] + [n//8] + [n//8] + [n//8] + [n//8] + c[n//8:]))\n    if m == 9:\n        return \" \".join(map(str, [n//9] + [n//9] + [n//9] + [n//9] + [n//9] + [n//9] + [n//9] + [n//9] + [n//9] + c[n//9:]))\n    if m == 10:\n        return \" \".join(map(str, [n//10] + [n//10] + [n//10] + [n//10] + [n//10] + [n//10] + [n//10] + [n//10] + [n//10] + [n//10] + c[n//10:]))\n    if m == 11:\n        return \" \".join(map(str, [n//11] + [n//11] + [n//11] + [n//11] + [n//11] + [n//11] + [n//11] + [n//11] + [n//11] + [n//11] + [n//11] + c[n//11:]))\n    if m == 12:\n        return \" \".join(map(str, [n//12] + [n//12] + [n//12] + [n//12] + [n//12] + [n//12] + [n//12] + [n//12] + [n//12] + [n//12] + [n//12] + [n//12] + c[n//12:]))\n    if m == 13:\n        return \" \".join(map(str, [n//13] + [n//13] + [n//13] + [n//13] + [n//13] + [n//13] + [n//13] + [n//13] + [n//13] + [n//13] + [n//13] + [n//13] + [n//13] + c[n//13:]))\n    if m == 14:\n        return \" \".join(map(str, [n//14] + [n//14] + [n//14] + [n//14] + [n//14]"
    },
    {
        "number": 4891,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    kings, queens, rooks, bishops, knights, pawns = map(int, stdin.split())\n\n    # calculate number of pieces needed\n    needed_kings = 1 - kings\n    needed_queens = 1 - queens\n    needed_rooks = 2 - rooks\n    needed_bishops = 2 - bishops\n    needed_knights = 2 - knights\n    needed_pawns = 8 - pawns\n\n    # output result\n    return f\"{needed_kings} {needed_queens} {needed_rooks} {needed_bishops} {needed_knights} {needed_pawns}\""
    },
    {
        "number": 4892,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = stdin.readline().strip().split()\n        passwords.append((line[0], float(line[1])))\n\n    # sort passwords by probability in descending order\n    passwords.sort(key=lambda x: x[1], reverse=True)\n\n    # calculate expected number of attempts\n    total_prob = sum(p[1] for p in passwords)\n    expected_attempts = 0\n    for p in passwords:\n        expected_attempts += p[1] / total_prob * math.log2(1 / p[1])\n\n    return str(expected_attempts)"
    },
    {
        "number": 4893,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    distances = list(map(int, stdin.readline().split()))\n    distances.sort()\n    min_distance = 0\n    for i in range(n):\n        min_distance = max(min_distance, distances[i] - p * (i + 1))\n    return str(min_distance)"
    },
    {
        "number": 4894,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    notes = stdin.split()\n    n = int(notes[0])\n    song = notes[1]\n    staff = ['G:', 'F:', 'E:', 'D:', 'C:', 'B:', 'A:', 'g:', 'f:', 'e:', 'd:', 'c:', 'b:', 'a:']\n    staff_lines = [[] for _ in range(10)]\n    for i in range(n):\n        pitch = song[i*2]\n        duration = int(song[i*2+1]) if i*2+1 < len(song) else 1\n        for j in range(10):\n            if pitch in staff[j]:\n                staff_lines[j].append('*' * duration)\n                break\n    for i in range(10):\n        staff[i] +='' * (50 - len(staff[i])) + ''.join(staff_lines[i])\n    return '\\n'.join(staff)"
    },
    {
        "number": 4895,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sticks = list(map(int, stdin.readline().strip().split()))\n    sticks.sort()\n    if sticks[0] + sticks[1] > sticks[2]:\n        return \"possible\"\n    else:\n        return \"impossible\""
    },
    {
        "number": 4896,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    widths = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    towers = 1\n    current_width = widths[0]\n\n    # Iterate through widths\n    for i in range(1, n):\n        if widths[i] > current_width:\n            towers += 1\n            current_width = widths[i]\n\n    # Return result\n    return str(towers)"
    },
    {
        "number": 4897,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    runners = []\n    for i in range(n):\n        name, a, b = stdin.readline().strip().split()\n        runners.append((name, float(a), float(b)))\n    runners.sort(key=lambda x: x[1])\n    team = []\n    for i in range(4):\n        team.append(runners[i][0])\n    team_time = sum([runners[i][1] for i in range(4)])\n    for i in range(4, n):\n        if runners[i][2] < team_time:\n            team.append(runners[i][0])\n            team_time += runners[i][1]\n    return f\"{team_time:.2f}\\n{team[0]}\\n{team[1]}\\n{team[2]}\\n{team[3]}\""
    },
    {
        "number": 4898,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    preferences = []\n    for i in range(n):\n        l, u = map(int, stdin.readline().strip().split())\n        preferences.append((l, u))\n\n    # sort preferences by upper bound\n    preferences.sort(key=lambda x: x[1])\n\n    # find minimum number of rooms\n    rooms = 1\n    for i in range(n):\n        if preferences[i][0] > rooms:\n            rooms += 1\n\n    return rooms"
    },
    {
        "number": 4899,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0] == 'h' and s[1] == 'e' and s[2] == 'y':\n        return 'he' + s[1:] + 'e'\n    else:\n        return 'Invalid input'"
    },
    {
        "number": 4900,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    dist = []\n    for i in range(n):\n        row = list(map(int, stdin.readline().strip().split()))\n        dist.append(row)\n    visited = [False] * n\n    roads = []\n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            for j in range(n):\n                if not visited[j] and dist[i][j] > 0:\n                    visited[j] = True\n                    roads.append((i, j))\n    return '\\n'.join(f'{u} {v}' for u, v in roads)"
    },
    {
        "number": 4901,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Divide the message in half\n    half = len(stdin) // 2\n    left = stdin[:half]\n    right = stdin[half:]\n\n    # Calculate the rotation value for each half\n    left_rotation = sum(ord(c) - ord('A') + 1 for c in left)\n    right_rotation = sum(ord(c) - ord('A') + 1 for c in right)\n\n    # Rotate each character in the left half by the rotation value\n    left_rotated = ''.join(chr((ord(c) - ord('A') + left_rotation) % 26 + ord('A')) for c in left)\n\n    # Rotate each character in the right half by the rotation value\n    right_rotated = ''.join(chr((ord(c) - ord('A') + right_rotation) % 26 + ord('A')) for c in right)\n\n    # Combine the rotated halves\n    decrypted = ''\n    for i in range(len(left_rotated)):\n        decrypted += chr((ord(left_rotated[i]) - ord('A') + ord(right_rotated[i]) - ord('A')) % 26 + ord('A'))\n\n    return decrypted"
    },
    {
        "number": 4902,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Convert the input string to a set to remove duplicates\n    letters = set(stdin)\n    # Check if the length of the set is less than or equal to 1\n    if len(letters) <= 1:\n        return 0\n    # Check if the length of the set is even\n    if len(letters) % 2 == 0:\n        # If the length of the set is even, we can remove half of the letters\n        return len(stdin) // 2\n    # If the length of the set is odd, we can remove the middle letter\n    return len(stdin) // 2 + 1"
    },
    {
        "number": 4903,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    aah_jon = stdin.split()[0]\n    aah_doctor = stdin.split()[1]\n    if len(aah_jon) >= len(aah_doctor):\n        return \"go\"\n    else:\n        return \"no\""
    },
    {
        "number": 4904,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    alice_score = 0\n    barbara_score = 0\n    for i in range(0, len(stdin), 2):\n        if stdin[i] == 'A':\n            alice_score += int(stdin[i+1])\n        else:\n            barbara_score += int(stdin[i+1])\n    \n    # check for win by 2 rule\n    if abs(alice_score - barbara_score) >= 2:\n        if alice_score > barbara_score:\n            return 'A'\n        else:\n            return 'B'\n    \n    # check for regular win\n    if alice_score == 11:\n        return 'A'\n    elif barbara_score == 11:\n        return 'B'\n    \n    # check for tie\n    if alice_score == barbara_score:\n        return 'T'\n    \n    # regular win by 1\n    if alice_score > barbara_score:\n        return 'A'\n    else:\n        return 'B'"
    },
    {
        "number": 4905,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    n, m = map(int, lines[0].split())\n    a, b, k, g = map(int, lines[1].split())\n    route = list(map(int, lines[2].split()))\n    streets = []\n    for i in range(3, m+3):\n        a, b, l = map(int, lines[i].split())\n        streets.append((a, b, l))\n\n    # preprocess\n    blocked = [set() for _ in range(n+1)]\n    for i in range(m):\n        a, b, l = streets[i]\n        blocked[a].add(b)\n        blocked[b].add(a)\n\n    # bfs\n    queue = [(a, k)]\n    visited = set()\n    while queue:\n        curr, time = queue.pop(0)\n        if curr == b:\n            return time\n        if curr in visited:\n            continue\n        visited.add(curr)\n        for next in blocked[curr]:\n            if next not in visited:\n                queue.append((next, time+streets[curr-1][2]))\n\n    return -1"
    },
    {
        "number": 4906,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into the command and the message\n    command, message = stdin.split(' ', 1)\n\n    # Encode the message\n    if command == 'E':\n        encoded = ''\n        current_char = message[0]\n        count = 1\n        for char in message[1:]:\n            if char == current_char:\n                count += 1\n            else:\n                encoded += current_char + str(count)\n                current_char = char\n                count = 1\n        encoded += current_char + str(count)\n        return encoded\n\n    # Decode the message\n    elif command == 'D':\n        decoded = ''\n        for i in range(0, len(message), 2):\n            char = message[i]\n            count = int(message[i+1])\n            decoded += char * count\n        return decoded\n\n    # Invalid command\n    else:\n        return 'Invalid command'"
    },
    {
        "number": 4907,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        return \"Bob\"\n    else:\n        return \"Alice\""
    },
    {
        "number": 4908,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    a, b, c = map(int, stdin.split())\n\n    # check for valid input\n    if a < 0 or a > 99 or b < 0 or b > 99 or c < 0 or c > 99:\n        return \"Invalid input\"\n\n    # check for valid operations\n    for op in ['+', '-', '*', '/']:\n        if eval(f\"{a}{op}{b}\") == c:\n            return f\"{a}{op}{b}={c}\"\n\n    # no valid operation found\n    return \"No valid operation found\""
    },
    {
        "number": 4909,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    D = list(map(int, stdin.readline().strip().split()))\n    if N < 2:\n        return \"NO\"\n    for i in range(1, N):\n        if D[i] < 1 or D[i] >= N - 1:\n            return \"NO\"\n    for i in range(1, N):\n        for j in range(i + 1, N):\n            if D[i] > D[j]:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4910,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    categories = {}\n    for i in range(int(stdin.split()[0])):\n        category = stdin.split()[i+1]\n        if category not in categories:\n            categories[category] = 1\n        else:\n            categories[category] += 1\n    max_count = max(categories.values())\n    winning_categories = [category for category, count in categories.items() if count == max_count]\n    return''.join(sorted(winning_categories))"
    },
    {
        "number": 4911,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    attributes = stdin.split('\\n')[0].split()\n    songs = []\n    for line in stdin.split('\\n')[2:]:\n        if line:\n            songs.append(line.split())\n    n = int(stdin.split('\\n')[1])\n    for i in range(n):\n        attribute = stdin.split('\\n')[i+2]\n        songs.sort(key=lambda x: x[attributes.index(attribute)], reverse=True)\n        print(' '.join(attributes))\n        for song in songs:\n            print(' '.join(song))\n        print()\n    return ''"
    },
    {
        "number": 4912,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w, n = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    if sum(x) > w:\n        return \"NO\"\n    for i in range(n):\n        if x[i] > w:\n            return \"NO\"\n        w -= x[i]\n    return \"YES\""
    },
    {
        "number": 4913,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    vaccinated = [False] * N\n    control = [False] * N\n    for i in range(1, N+1):\n        participant = lines[i]\n        if participant[0] == 'Y':\n            vaccinated[i-1] = True\n        if participant[1] == 'Y':\n            control[i-1] = True\n        if participant[2] == 'Y':\n            control[i-1] = True\n        if participant[3] == 'Y':\n            control[i-1] = True\n    efficacyA = 0\n    efficacyB = 0\n    efficacyC = 0\n    for i in range(N):\n        if vaccinated[i]:\n            if control[i]:\n                efficacyA += 1\n            else:\n                efficacyA += 0.5\n        else:\n            if control[i]:\n                efficacyA += 0.5\n            else:\n                efficacyA += 0\n        if vaccinated[i] and control[i]:\n            efficacyB += 1\n        else:\n            efficacyB += 0\n        if vaccinated[i] and not control[i]:\n            efficacyC += 1\n        else:\n            efficacyC += 0\n    if efficacyA == 0:\n        return \"Not Effective\"\n    else:\n        return \"{:.6f}\".format(efficacyA/N*100) + \"\\n\" + \"{:.6f}\".format(efficacyB/N*100) + \"\\n\" + \"{:.6f}\".format(efficacyC/N*100)"
    },
    {
        "number": 4914,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    correct_answers = stdin.readline().strip()\n    sequences = [\n        \"A\" * N,\n        \"B\" * N,\n        \"C\" * N,\n        \"B\" + \"A\" * (N - 1),\n        \"C\" + \"B\" * (N - 1),\n        \"A\" + \"C\" * (N - 1),\n        \"C\" + \"C\" * (N - 1) + \"A\" * (N - 2),\n        \"A\" + \"A\" * (N - 1) + \"B\" * (N - 2),\n        \"B\" + \"B\" * (N - 1) + \"A\" * (N - 2),\n    ]\n    counts = [sum(1 for i in range(N) if sequences[j][i] == correct_answers[i]) for j in range(9)]\n    max_count = max(counts)\n    return f\"{max_count}\\n{' '.join(sorted([sequences[i] for i in range(9) if counts[i] == max_count]))}\""
    },
    {
        "number": 4915,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[-2])\n    problems = set()\n    time_scores = {}\n    for i in range(n):\n        m, p, r = lines[i].split()\n        m = int(m)\n        if p not in problems:\n            problems.add(p)\n            time_scores[p] = 0\n        if r == 'right':\n            time_scores[p] += m\n        else:\n            time_scores[p] += m + 20\n    solved = len(problems)\n    total_time = sum(time_scores.values())\n    return f\"{solved} {total_time}\""
    },
    {
        "number": 4916,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tiles = []\n    for i in range(n):\n        tiles.append(list(map(int, stdin.split())))\n    visited = set()\n    queue = [(0, 0)]\n    while queue:\n        x, y = queue.pop(0)\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        if x == k:\n            return len(visited)\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and tiles[nx][ny] == tiles[x][y] + 1:\n                queue.append((nx, ny))\n    return -1"
    },
    {
        "number": 4917,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    intervals = []\n    for i in range(n):\n        a, b = map(int, stdin.split()[1:])\n        intervals.append((a, b))\n    intervals.sort()\n    for i in range(1, n):\n        if intervals[i][0] < intervals[i-1][1]:\n            return \"gunilla has a point\"\n    return \"edward is right\""
    },
    {
        "number": 4918,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    groups = [set([i]) for i in range(n)]\n    for i in range(q):\n        query = stdin.readline().strip()\n        if query[0] == 't':\n            a, b = map(int, stdin.split())\n            groups[a-1] |= groups[b-1]\n            groups[b-1] = set()\n        else:\n            a = int(stdin.readline().strip())\n            print(len(groups[a-1]))\n    return \"\""
    },
    {
        "number": 4919,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    trips = {}\n    for line in stdin.split('\\n'):\n        if not line:\n            continue\n        country, year = line.split()\n        year = int(year)\n        if country not in trips:\n            trips[country] = []\n        trips[country].append(year)\n    queries = []\n    for line in stdin.split('\\n'):\n        if not line:\n            continue\n        country, k = line.split()\n        k = int(k)\n        queries.append((country, k))\n    results = []\n    for country, k in queries:\n        if k > len(trips[country]):\n            results.append('Invalid')\n        else:\n            results.append(trips[country][k-1])\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4920,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input string to list of characters\n    events = list(stdin)\n\n    # Initialize variables\n    count = 0\n    i = 0\n    j = 0\n\n    # Loop through all possible pairs of events\n    while i < len(events) - 1:\n        # Check if the current event is unique\n        if events[i]!= events[i+1]:\n            # Check if the next event is unique\n            if events[i]!= events[j]:\n                # Check if the current event is the last event in the sequence\n                if j == len(events) - 1:\n                    # Increment count and move to next pair of events\n                    count += 1\n                    i += 1\n                    j = i + 1\n                else:\n                    # Move to next event in sequence\n                    j += 1\n            else:\n                # Move to next event in sequence\n                j += 1\n        else:\n            # Move to next event in sequence\n            j += 1\n\n        # Move to next event in sequence\n        i += 1\n\n    # Return count of good itineraries\n    return count"
    },
    {
        "number": 4921,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = set()\n    output = []\n    for line in stdin.split('\\n'):\n        for word in line.split():\n            if word.lower() not in words:\n                words.add(word.lower())\n                output.append(word)\n            else:\n                output.append('.')\n    return''.join(output)"
    },
    {
        "number": 4922,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    clauses = []\n    for i in range(m):\n        clause = list(map(int, stdin.split()))\n        clauses.append(clause)\n    if m < 8:\n        return \"unsatisfactory\"\n    else:\n        return \"satisfactory\""
    },
    {
        "number": 4923,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    unique_outcomes = set(a)\n    if len(unique_outcomes) == 1:\n        return \"none\"\n    else:\n        max_unique_outcome = 0\n        max_unique_outcome_index = -1\n        for i in range(n):\n            if a[i] == max(a):\n                if a.count(a[i]) == 1:\n                    return str(i)\n                elif a.count(a[i]) > max_unique_outcome:\n                    max_unique_outcome = a.count(a[i])\n                    max_unique_outcome_index = i\n        return str(max_unique_outcome_index)"
    },
    {
        "number": 4924,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    current_time, explosion_time = stdin.split()\n    current_hours, current_minutes, current_seconds = map(int, current_time.split(':'))\n    explosion_hours, explosion_minutes, explosion_seconds = map(int, explosion_time.split(':'))\n\n    # Calculate the total number of seconds between the current time and the explosion time\n    total_seconds = (explosion_hours - current_hours) * 3600 + (explosion_minutes - current_minutes) * 60 + (explosion_seconds - current_seconds)\n\n    # If the total number of seconds is negative, it means that the explosion time is in the past, so we need to add 24 hours to it\n    if total_seconds < 0:\n        total_seconds += 24 * 3600\n\n    # Calculate the desired time by adding the total number of seconds to the current time\n    desired_hours = (current_hours + total_seconds // 3600) % 24\n    desired_minutes = (current_minutes + (total_seconds % 3600) // 60) % 60\n    desired_seconds = (current_seconds + total_seconds % 60) % 60\n\n    # Return the desired time in the same format as the input\n    return f\"{desired_hours:02d}:{desired_minutes:02d}:{desired_seconds:02d}\""
    },
    {
        "number": 4925,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    l, n = map(int, stdin.split())\n\n    # calculate k\n    k = 1\n    while True:\n        if n <= l:\n            break\n        n -= l\n        k += 1\n\n    return str(k)"
    },
    {
        "number": 4926,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    e = 0\n    for i in range(n+1):\n        e += 1/math.factorial(i)\n    return str(e)"
    },
    {
        "number": 4927,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P, Q = map(int, stdin.split())\n    if P < Q:\n        return \"paul\"\n    elif P > Q:\n        return \"opponent\"\n    else:\n        return \"paul\" if N % 2 == 1 else \"opponent\""
    },
    {
        "number": 4928,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    board = [['.' for _ in range(8)] for _ in range(8)]\n    for i in range(8):\n        board[i][i] = 'B'\n    for i in range(N):\n        x, y = map(int, stdin.readline().strip().split())\n        board[x-1][y-1] = 'B'\n    count = 0\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] == 'B':\n                count += 1\n    return count"
    },
    {
        "number": 4929,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    p = stdin.split('\\n')[1]\n    if p == s:\n        return 'Yes'\n    elif p[0].isdigit() and s.startswith(p):\n        return 'Yes'\n    elif p[-1].isdigit() and s.endswith(p):\n        return 'Yes'\n    elif p.lower() == p[::-1].lower():\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4930,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    decoded_words = []\n    for word in words:\n        decoded_word = \"\"\n        for letter in word:\n            if letter in \"aeiou\":\n                decoded_word += letter + \"p\" + letter\n            else:\n                decoded_word += letter\n        decoded_words.append(decoded_word)\n    return \" \".join(decoded_words)"
    },
    {
        "number": 4931,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == 0:\n        return str(y)\n    elif x == 100:\n        return str(100 - y)\n    elif x == 50:\n        return str(50 - y/2)\n    else:\n        return \"IMPOSSIBLE\""
    },
    {
        "number": 4932,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split()[0:4])\n    P, M, G = map(int, stdin.split()[4:])\n\n    if P <= A <= P + B:\n        if M <= C <= M + D:\n            return \"both\"\n        else:\n            return \"one\"\n    elif P <= C <= P + D:\n        if M <= A <= M + B:\n            return \"both\"\n        else:\n            return \"one\"\n    else:\n        return \"none\""
    },
    {
        "number": 4933,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    return str(nums[-1] + nums[-2])"
    },
    {
        "number": 4934,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, v = map(int, stdin.split())\n    ladder_length = h / (1 + (v/180)*math.tan(math.radians(v)))\n    return str(math.ceil(ladder_length))"
    },
    {
        "number": 4935,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, g = map(float, lines[0].split())\n    segments = []\n    for i in range(1, int(N)+1):\n        D, theta = map(float, lines[i].split())\n        segments.append((D, theta))\n    velocities = []\n    for i in range(int(N)):\n        D, theta = segments[i]\n        v = g * np.cos(np.deg2rad(theta)) * D\n        velocities.append(v)\n    return '\\n'.join(map(str, velocities))\n\nimport numpy as np\n\nstdin = \"\"\"2 9\n69 60\n100 60\"\"\"\n\nprint(solution(stdin)) # Output: 39.0\\n30.0"
    },
    {
        "number": 4936,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    temps = list(map(int, stdin.readline().strip().split()))\n    best_day = 0\n    best_temp = float('-inf')\n    for i in range(n-1):\n        if temps[i+1] > temps[i]:\n            continue\n        if temps[i+1] > best_temp:\n            best_temp = temps[i+1]\n            best_day = i+1\n    return f\"{best_day} {best_temp}\""
    },
    {
        "number": 4937,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    e = list(map(int, stdin.readline().split()))\n    e.sort()\n    ans = 0\n    i = 0\n    j = n - 1\n    while i <= j:\n        if e[i] + e[j] <= a:\n            ans += 1\n            i += 1\n            j -= 1\n        elif e[i] + e[j] > a:\n            j -= 1\n    return ans"
    },
    {
        "number": 4938,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.readline().strip())\n    queue = stdin.readline().strip()\n    women = queue.count('W')\n    men = queue.count('M')\n    count = 0\n    while abs(women - men) > X:\n        if women > men:\n            women -= 1\n        else:\n            men -= 1\n        count += 1\n    return count"
    },
    {
        "number": 4939,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    commands = stdin.split()[2:]\n    throws = []\n    for i in range(k):\n        if commands[i].isdigit():\n            throws.append(int(commands[i]))\n        else:\n            throws.pop()\n    current_pos = 0\n    for i in range(len(throws)):\n        current_pos = (current_pos + throws[i]) % n\n    return str(current_pos)"
    },
    {
        "number": 4940,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = [list(map(int, input().split())) for _ in range(n)]\n    t = [0] * n\n    for j in range(1, m+1):\n        for i in range(n):\n            t[i] = max(t[i], t[i-1] + p[i][j-1])\n    return''.join(map(str, t))"
    },
    {
        "number": 4941,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.readline().split())\n    dutch_words = stdin.readline().split()\n    m = int(stdin.readline())\n    english_dict = {}\n    for i in range(m):\n        d, e, c = stdin.readline().split()\n        if c == \"correct\":\n            english_dict[d] = e\n    translations = []\n    for word in dutch_words:\n        if word in english_dict:\n            translations.append(english_dict[word])\n    if len(translations) == 1:\n        return translations[0] + \"\\n\" + \"correct\"\n    else:\n        correct_translations = [t for t in translations if t in english_dict.values()]\n        incorrect_translations = [t for t in translations if t not in english_dict.values()]\n        return str(len(correct_translations)) + \"\\n\" + \"correct\\n\" + str(len(incorrect_translations)) + \"\\n\" + \"incorrect\""
    },
    {
        "number": 4942,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = list(map(int, stdin.split()[1:]))\n    t.sort()\n    ans = 1\n    for i in range(n):\n        ans += t[i]\n    return str(ans)"
    },
    {
        "number": 4943,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    points = []\n    for i in range(1, n+1):\n        x, y = map(float, lines[i].split())\n        points.append((x, y))\n    a = float(lines[n+1])\n\n    # calculate new points\n    xs = [p[0] for p in points]\n    ys = [p[1] for p in points]\n    xmin, xmax = min(xs), max(xs)\n    ymin, ymax = min(ys), max(ys)\n    xmid, ymid = (xmin+xmax)/2, (ymin+ymax)/2\n    xscale, yscale = a/((xmax-xmin)*(ymax-ymin)), a/((xmax-xmin)*(ymax-ymin))\n    new_points = []\n    for i in range(n):\n        x, y = points[i]\n        new_x = (x-xmid)*xscale + xmid\n        new_y = (y-ymid)*yscale + ymid\n        new_points.append((new_x, new_y))\n\n    # output new points\n    result = []\n    for p in new_points:\n        result.append('{:.4f} {:.4f}'.format(p[0], p[1]))\n    return '\\n'.join(result)"
    },
    {
        "number": 4944,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    days = 1\n    while n > 1:\n        n = (n + 1) // 2\n        days += 1\n    return str(days)"
    },
    {
        "number": 4945,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    m, sigma = map(int, stdin.readline().split())\n    x = y = 1\n    while x + y <= m:\n        if 2*x + y >= sigma:\n            return str(a*x + b*y)\n        x += 1\n        y += 1\n    return \"No solution\""
    },
    {
        "number": 4946,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    languages = list(map(int, stdin.readline().strip().split()))\n    languages_set = set(languages)\n    if len(languages_set) == 1:\n        return n\n    else:\n        return min(len(languages) - i for i in range(len(languages)))"
    },
    {
        "number": 4947,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = float(stdin)\n    paces_per_mile = 1000 * (5280 / 4854)\n    paces = X * paces_per_mile\n    return str(round(paces))"
    },
    {
        "number": 4948,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    holes = []\n    for i in range(n):\n        r, x, y, z = map(int, stdin.split())\n        holes.append((r, x, y, z))\n    holes.sort(key=lambda x: x[3])\n    thicknesses = [0] * s\n    for i in range(n):\n        r, x, y, z = holes[i]\n        for j in range(s):\n            if thicknesses[j] + r <= 100:\n                thicknesses[j] += r\n                break\n    return '\\n'.join(map(str, thicknesses))"
    },
    {
        "number": 4949,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, w, h = map(int, lines[0].split())\n    matches = [int(line) for line in lines[1:]]\n    box = [w, h]\n    result = []\n    for match in matches:\n        if match <= box[0]:\n            result.append('DA')\n        else:\n            result.append('NE')\n    return '\\n'.join(result)"
    },
    {
        "number": 4950,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    times = [int(stdin.readline().strip().split()[0]) for _ in range(n)]\n    distances = [int(stdin.readline().strip().split()[1]) for _ in range(n)]\n    max_speed = 0\n    for i in range(1, n):\n        time_diff = times[i] - times[i-1]\n        distance_diff = distances[i] - distances[i-1]\n        speed = distance_diff / time_diff\n        if speed > max_speed:\n            max_speed = speed\n    return str(int(max_speed))"
    },
    {
        "number": 4951,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    for i in range(1, n+1):\n        line = lines[i]\n        assumptions, arrow, conclusion = line.split()\n        if len(assumptions) > 5 or len(conclusion) > 5:\n            return str(i)\n    return 'correct'"
    },
    {
        "number": 4952,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    votes = []\n    for line in stdin.split('\\n'):\n        if line == '***':\n            break\n        votes.append(line.split())\n    counts = {}\n    for vote in votes:\n        for candidate in vote:\n            if candidate not in counts:\n                counts[candidate] = 0\n            counts[candidate] += 1\n    max_count = max(counts.values())\n    winners = [candidate for candidate, count in counts.items() if count == max_count]\n    if len(winners) == 1:\n        return winners[0]\n    else:\n        return 'Runoff!'"
    },
    {
        "number": 4953,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    languages = {}\n    for i in range(1, n+1):\n        name, language, *known_languages = lines[i].split()\n        languages[name] = (language, set(known_languages))\n    pairs = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            if languages[lines[i+1].split()[0]][0] in languages[lines[j+1].split()[0]][1]:\n                pairs.add((lines[i+1].split()[0], lines[j+1].split()[0]))\n    return str(len(pairs))"
    },
    {
        "number": 4954,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, B, H, W = map(int, stdin.readline().split())\n    hotels = []\n    for i in range(H):\n        price, *beds = map(int, stdin.readline().split())\n        hotels.append((price, beds))\n\n    # sort hotels by price\n    hotels.sort(key=lambda x: x[0])\n\n    # try each hotel\n    for price, beds in hotels:\n        if sum(beds) >= N:\n            # enough beds for all participants\n            if price * N <= B:\n                # stay within budget\n                return str(price * N)\n            else:\n                # stay within budget, but not all participants can be accommodated\n                return str(B)\n\n    # no hotel found within budget\n    return \"stay home\""
    },
    {
        "number": 4955,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    notes = stdin.split()\n    scales = []\n    for i in range(12):\n        scale = [chr(ord('A') + i)]\n        for j in range(1, 8):\n            scale.append(chr(ord(scale[-1]) + 1))\n        scales.append(scale)\n    scales.append(['A#'])\n    for i in range(1, 8):\n        scales[-1].append(chr(ord(scales[-1][-1]) + 1))\n    scales.append(['B'])\n    for i in range(1, 8):\n        scales[-1].append(chr(ord(scales[-1][-1]) + 1))\n    scales.append(['C'])\n    for i in range(1, 8):\n        scales[-1].append(chr(ord(scales[-1][-1]) + 1))\n    scales.append(['C#'])\n    for i in range(1, 8):\n        scales[-1].append(chr(ord(scales[-1][-1]) + 1))\n    scales.append(['D'])\n    for i in range(1, 8):\n        scales[-1].append(chr(ord(scales[-1][-1]) + 1))\n    scales.append(['D#'])\n    for i in range(1, 8):\n        scales[-1].append(chr(ord(scales[-1][-1]) + 1))\n    scales.append(['E'])\n    for i in range(1, 8):\n        scales[-1].append(chr(ord(scales[-1][-1]) + 1))\n    scales.append(['F'])\n    for i in range(1, 8):\n        scales[-1].append(chr(ord(scales[-1][-1]) + 1))\n    scales.append(['F#'])\n    for i in range(1, 8):\n        scales[-1].append(chr(ord(scales[-1][-1]) + 1))\n    scales.append(['G'])\n    for i in range(1, 8):\n        scales[-1].append(chr(ord(scales[-1][-1]) + 1))\n    scales.append(['G#'])\n    for i in range(1, 8):\n        scales[-1].append(chr(ord(scales[-1][-1]) + 1))\n    scales.sort()\n    for scale in scales:\n        if all(note in scale for note in notes):\n            return''.join(scale)\n    return 'none'"
    },
    {
        "number": 4956,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    ae_count = sum(word.count('ae') for word in words)\n    ae_ratio = ae_count / len(words)\n    if ae_ratio >= 0.4:\n        return \"dae ae ju traeligt va\"\n    else:\n        return \"haer talar vi rikssvenska\""
    },
    {
        "number": 4957,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(line.strip()) for line in stdin.split('\\n')[1:]]\n    visited = [[False] * m for _ in range(n)]\n    shops = []\n\n    def dfs(i, j):\n        if visited[i][j]:\n            return False\n        visited[i][j] = True\n        if grid[i][j] == '#':\n            return False\n        if grid[i][j] == '.':\n            shops.append((i, j))\n            grid[i][j] = 'E'\n        for ni, nj in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= ni < n and 0 <= nj < m and not visited[ni][nj]:\n                if dfs(ni, nj):\n                    return True\n        return False\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.' and not visited[i][j]:\n                dfs(i, j)\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'E':\n                for ni, nj in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                    if 0 <= ni < n and 0 <= nj < m and grid[ni][nj] == 'E':\n                        return '\\n'.join([''.join(row) for row in grid])\n\n    return '\\n'.join([''.join(row) for row in grid])"
    },
    {
        "number": 4958,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    heights = list(map(int, stdin.split()))\n    tower1_height = heights[0]\n    tower2_height = heights[1]\n    box_heights = heights[2:8]\n    tower1_boxes = []\n    tower2_boxes = []\n    # find the boxes in each tower\n    for i in range(6):\n        if box_heights[i] <= tower1_height:\n            tower1_boxes.append(box_heights[i])\n        else:\n            tower2_boxes.append(box_heights[i])\n    # sort the boxes in each tower\n    tower1_boxes.sort(reverse=True)\n    tower2_boxes.sort(reverse=True)\n    # output the boxes in each tower\n    output = \"\"\n    for box in tower1_boxes:\n        output += str(box) + \" \"\n    output += \"\\n\"\n    for box in tower2_boxes:\n        output += str(box) + \" \"\n    return output"
    },
    {
        "number": 4959,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    e, f, c = map(int, stdin.split())\n    return str(max(0, (e + f) // c))"
    },
    {
        "number": 4960,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Pad the binary numeral with zeros on the left until the number of digits is divisible by three.\n    binary = stdin.zfill(len(stdin) + (3 - len(stdin) % 3) % 3)\n\n    # Group adjacent binary digits into groups of 3 digits.\n    octal = \"\"\n    for i in range(0, len(binary), 3):\n        group = binary[i:i+3]\n        # Replace each group of binary digits with the corresponding octal digit.\n        octal += str(int(group, 2))\n\n    return octal"
    },
    {
        "number": 4961,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, S = map(int, stdin.split())\n    seating_order = []\n    for i in range(R):\n        seating_order.append(list(stdin.readline().strip()))\n    handshakes = 0\n    for i in range(R):\n        for j in range(S):\n            if seating_order[i][j] == 'o':\n                if i > 0 and seating_order[i-1][j] == '.':\n                    handshakes += 1\n                if i < R-1 and seating_order[i+1][j] == '.':\n                    handshakes += 1\n                if j > 0 and seating_order[i][j-1] == '.':\n                    handshakes += 1\n                if j < S-1 and seating_order[i][j+1] == '.':\n                    handshakes += 1\n                if i > 0 and j > 0 and seating_order[i-1][j-1] == '.':\n                    handshakes += 1\n                if i > 0 and j < S-1 and seating_order[i-1][j+1] == '.':\n                    handshakes += 1\n                if i < R-1 and j > 0 and seating_order[i+1][j-1] == '.':\n                    handshakes += 1\n                if i < R-1 and j < S-1 and seating_order[i+1][j+1] == '.':\n                    handshakes += 1\n    return str(handshakes)"
    },
    {
        "number": 4962,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    items = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        items.append((a, b))\n    drawers = [[] for _ in range(l)]\n    for i, (a, b) in enumerate(items):\n        if not drawers[a]:\n            drawers[a].append(i+1)\n        elif not drawers[b]:\n            drawers[b].append(i+1)\n        else:\n            for j in range(l):\n                if j == a or j == b:\n                    continue\n                if drawers[j]:\n                    if j == drawers[j][-1]:\n                        drawers[j].append(i+1)\n                        break\n                    elif j == drawers[j][-2]:\n                        drawers[j].append(i+1)\n                        break\n                    else:\n                        continue\n                else:\n                    drawers[j].append(i+1)\n                    break\n    result = []\n    for i, (a, b) in enumerate(items):\n        if drawers[a] and drawers[a][-1] == i+1:\n            result.append(\"LADICA\")\n        elif drawers[b] and drawers[b][-1] == i+1:\n            result.append(\"LADICA\")\n        else:\n            result.append(\"SMECE\")\n    return \"\\n\".join(result)"
    },
    {
        "number": 4963,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    ds = list(map(int, stdin.readline().strip().split()))\n    order = [1]\n    for i in range(n-1):\n        order.append(order[-1] + ds[i])\n    return''.join(map(str, order))"
    },
    {
        "number": 4964,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, h, l = map(int, stdin.split()[0:3])\n    horror_list = list(map(int, stdin.split()[3:3+h]))\n    similarities = []\n    for i in range(l):\n        a, b = map(int, stdin.split()[3+h+i*2:3+h+i*2+2])\n        similarities.append((a, b))\n        similarities.append((b, a))\n    # calculate horror index for each movie\n    horror_indices = [0] * n\n    for movie in horror_list:\n        horror_indices[movie] = -1\n    for i in range(n):\n        if horror_indices[i] == 0:\n            continue\n        for j in range(n):\n            if i == j or horror_indices[j] == 0:\n                continue\n            if (i, j) in similarities:\n                horror_indices[i] = max(horror_indices[i], horror_indices[j]+1)\n    # find movie with highest horror index\n    max_horror_index = -1\n    max_movie = -1\n    for i in range(n):\n        if horror_indices[i] > max_horror_index:\n            max_horror_index = horror_indices[i]\n            max_movie = i\n    # find movie with lowest ID if there is a tie\n    for i in range(n):\n        if horror_indices[i] == max_horror_index and i < max_movie:\n            max_movie = i\n    return str(max_movie)"
    },
    {
        "number": 4965,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    temps = list(map(int, stdin.readline().strip().split()))\n    if n == 2 and temps[0] > temps[1]:\n        return \"impossible\"\n    if n == 2 and temps[0] == temps[1]:\n        return \"1 2\"\n    if n == 3 and temps[0] > temps[1] and temps[1] > temps[2]:\n        return \"impossible\"\n    if n == 3 and temps[0] == temps[1] and temps[1] == temps[2]:\n        return \"1 2 3\"\n    if n == 3 and temps[0] == temps[1] and temps[1] < temps[2]:\n        return \"1 3 2\"\n    if n == 3 and temps[0] < temps[1] and temps[1] == temps[2]:\n        return \"2 1 3\"\n    if n == 3 and temps[0] < temps[1] and temps[1] < temps[2]:\n        return \"2 3 1\"\n    if n == 3 and temps[0] > temps[1] and temps[1] < temps[2]:\n        return \"3 1 2\"\n    if n == 3 and temps[0] < temps[1] and temps[1] > temps[2]:\n        return \"3 2 1\"\n    if n == 4 and temps[0] > temps[1] and temps[1] > temps[2] and temps[2] > temps[3]:\n        return \"impossible\"\n    if n == 4 and temps[0] == temps[1] and temps[1] == temps[2] and temps[2] == temps[3]:\n        return \"1 2 3 4\"\n    if n == 4 and temps[0] == temps[1] and temps[1] == temps[2] and temps[2] < temps[3]:\n        return \"1 2 4 3\"\n    if n == 4 and temps[0] == temps[1] and temps[1] == temps[3] and temps[2] < temps[3]:\n        return \"1 3 2 4\"\n    if n == 4 and temps[0] == temps[2] and temps[1] == temps[3] and temps[0] < temps[1]:\n        return \"1 4 2 3\"\n    if n == 4 and temps[0] == temps[2] and temps[1] == temps[3] and temps[0] > temps[1]:\n        return \"1 3 2 4\"\n    if n == 4 and temps[0] == temps[2] and temps[1] < temps[2] and temps[2] < temps[3]:\n        return \"1 3 4 2\"\n    if n == 4 and temps[0] == temps[2] and temps[1] > temps[2] and temps[2] > temps[3]:\n        return \"1 4 3 2\"\n    if n == 4 and temps[0] == temps[3] and temps[1] == temps[2] and temps[0] < temps[1]:\n        return \"1 2 4 3\"\n    if n == 4 and temps[0] == temps[3] and temps[1] == temps[2] and temps[0] > temps[1]:\n        return \"1 3 4 2\"\n    if n == 4 and temps[0] == temps[3] and temps[1] < temps[2] and temps[2] < temps[3]:\n        return \"1 3 2 4\"\n    if n == 4 and temps[0] == temps[3] and temps[1] > temps[2] and temps[2] > temps[3]:\n        return \"1 4 2 3\"\n    if n == 4 and temps[0] < temps[1] and temps[1] == temps[2] and temps[2] < temps[3]:\n        return \"2 1 3 4\"\n    if n == 4 and temps[0] < temps[1] and temps[1] == temps[2] and temps[2] > temps[3]:\n        return \"2 1 4 3\"\n    if n == 4 and temps[0] < temps[1] and temps[1] == temps[3] and temps[2] < temps[3]:\n        return \"2 3 1 4\"\n    if n == 4 and temps["
    },
    {
        "number": 4966,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k = map(int, stdin.split())\n    t = list(map(int, stdin.readline().split()))\n    t.append(k)\n    t.insert(0, 0)\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + (t[i]-t[i-1]) * (100+p)\n    return round(dp[-1], 3)"
    },
    {
        "number": 4967,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    grid = [list(line) for line in lines[1:]]\n\n    # Find spies and safe houses\n    spies = []\n    safe_houses = []\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'S':\n                spies.append((i, j))\n            elif grid[i][j] == 'H':\n                safe_houses.append((i, j))\n\n    # Find maximum distance\n    max_distance = 0\n    for spy in spies:\n        distances = []\n        for safe_house in safe_houses:\n            distances.append(abs(spy[0] - safe_house[0]) + abs(spy[1] - safe_house[1]))\n        max_distance = max(max_distance, min(distances))\n\n    return str(max_distance)"
    },
    {
        "number": 4968,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, S, R = map(int, stdin.split())\n    teams_damaged = set(map(int, stdin.readline().split()))\n    teams_reserve = set(map(int, stdin.readline().split()))\n\n    # find the minimum number of teams that cannot start the race\n    min_teams = N - S - R\n\n    # check if teams with reserve kayaks can start immediately next to teams with damaged kayaks\n    for team in teams_reserve:\n        if team - 1 in teams_damaged or team + 1 in teams_damaged:\n            min_teams -= 1\n\n    return str(min_teams)"
    },
    {
        "number": 4969,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    if C == 0:\n        return \"1.000000000\"\n    elif C == R:\n        return \"0.000000000\"\n    else:\n        return \"{:.10f}\".format(C / R)"
    },
    {
        "number": 4970,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        line = stdin.readline().strip().split()\n        courses[tuple(line)] = courses.get(tuple(line), 0) + 1\n    max_count = 0\n    for count in courses.values():\n        if count > max_count:\n            max_count = count\n    return str(max_count)"
    },
    {
        "number": 4971,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.strip())\n    bus_numbers = set()\n    for i in range(1, m+1):\n        for j in range(i+1, m+1):\n            if i**3 + j**3 <= m:\n                bus_numbers.add(i**3 + j**3)\n    if len(bus_numbers) == 0:\n        return \"none\"\n    else:\n        return str(max(bus_numbers))"
    },
    {
        "number": 4972,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    k = 0\n    while X > 1:\n        k += 1\n        X //= 2\n    return k"
    },
    {
        "number": 4973,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    board = []\n    for i in range(N):\n        board.append(list(stdin.readline().strip()))\n\n    # Initialize variables\n    visited = set()\n    queue = [(0, 0)]\n    steps = 0\n\n    # BFS\n    while queue:\n        size = len(queue)\n        for i in range(size):\n            r, c = queue.pop(0)\n            if (r, c) == (1, 1):\n                return str(steps)\n            for dr, dc in [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]:\n                nr, nc = r + dr, c + dc\n                if 1 <= nr <= N and 1 <= nc <= N and board[nr-1][nc-1]!= '#' and (nr, nc) not in visited:\n                    visited.add((nr, nc))\n                    queue.append((nr, nc))\n        steps += 1\n\n    # If we reach here, it means we couldn't reach (1, 1)\n    return '-1'"
    },
    {
        "number": 4974,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, n = map(int, stdin.split())\n    booked = set(map(int, stdin.readline().split()))\n    available = set(range(1, r+1)) - booked\n    if not available:\n        return \"too late\"\n    return str(available.pop())"
    },
    {
        "number": 4975,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    key_phrase = stdin.split('\\n')[0].upper()\n    plaintext = stdin.split('\\n')[1].upper()\n    key_table = [[' '] * 5 for _ in range(5)]\n    for i, letter in enumerate(key_phrase):\n        if letter!='':\n            key_table[i // 5][i % 5] = letter\n    for i in range(5):\n        for j in range(5):\n            if key_table[i][j] =='':\n                for letter in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n                    if letter not in key_phrase:\n                        key_table[i][j] = letter\n                        break\n    ciphertext = ''\n    for i in range(0, len(plaintext), 2):\n        if i + 1 < len(plaintext) and plaintext[i] == 'X' and plaintext[i+1] == 'X':\n            ciphertext += 'XX'\n            continue\n        pair = plaintext[i:i+2]\n        if pair[0] == pair[1]:\n            pair = pair[0] + 'X' + pair[1]\n        if pair[0] == 'X':\n            pair = pair[1] + pair[0]\n        if pair[0] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' and pair[1] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            row = key_table.index(key_table[key_table.index(pair[0])])\n            col = key_table.index(key_table[key_table.index(pair[1])], row+1)\n            if col == 0:\n                col = 4\n            pair = key_table[row][col-1] + key_table[row][col]\n        elif pair[0] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' and pair[1] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            col = key_table.index(key_table[key_table.index(pair[0])])\n            row = key_table.index(key_table[key_table.index(pair[1])], col+1)\n            if row == 0:\n                row = 4\n            pair = key_table[row-1][col] + key_table[row][col]\n        else:\n            row = key_table.index(key_table[key_table.index(pair[0])])\n            col = key_table.index(key_table[key_table.index(pair[1])])\n            if row == 0:\n                row = 4\n            if col == 0:\n                col = 4\n            pair = key_table[row-1][col-1] + key_table[row][col]\n        ciphertext += pair\n    return ciphertext"
    },
    {
        "number": 4976,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    gopher_x, gopher_y, dog_x, dog_y = map(float, stdin.split()[:4])\n    gopher_holes = []\n    for i in range(int(stdin.split()[4])):\n        x, y = map(float, stdin.split()[4+i*2:6+i*2])\n        gopher_holes.append((x, y))\n    gopher_speed = 1.0\n    dog_speed = 2.0\n    for hole in gopher_holes:\n        if (hole[0]-gopher_x)**2 + (hole[1]-gopher_y)**2 <= (dog_speed/2)**2:\n            return f\"The gopher can escape through the hole at ({hole[0]:.3f},{hole[1]:.3f}).\"\n    return \"The gopher cannot escape.\""
    },
    {
        "number": 4977,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split()[0:2])\n    c, d = map(int, stdin.split()[2:4])\n    t = int(stdin.split()[4])\n\n    if a == c and b == d:\n        return \"Y\"\n\n    if abs(a - c) + abs(b - d) > t:\n        return \"N\"\n\n    return \"Y\""
    },
    {
        "number": 4978,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split('\\n')\n    n, m = map(int, lines[0].split())\n    grid = [list(line) for line in lines[1:]]\n\n    # Initialize variables\n    spread = True\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'V':\n                spread = False\n                break\n        if not spread:\n            break\n\n    # Spread water\n    if spread:\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'V':\n                    if i > 0 and grid[i-1][j] == '.':\n                        grid[i-1][j] = 'V'\n                    if i < n-1 and grid[i+1][j] == '.':\n                        grid[i+1][j] = 'V'\n                    if j > 0 and grid[i][j-1] == '.':\n                        grid[i][j-1] = 'V'\n                    if j < m-1 and grid[i][j+1] == '.':\n                        grid[i][j+1] = 'V'\n\n    # Print grid\n    for row in grid:\n        print(''.join(row))\n\n    return ''"
    },
    {
        "number": 4979,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    binary = bin(n)[2:]\n    reversed_binary = binary[::-1]\n    reversed_number = int(reversed_binary, 2)\n    return str(reversed_number)"
    },
    {
        "number": 4980,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    packages = stdin.split('\\n')\n    num_packages = int(packages[0])\n    packages = packages[1:]\n\n    # count pink and rose buttons\n    pink_buttons = 0\n    rose_buttons = 0\n    for package in packages:\n        if 'pink' in package.lower() or 'rose' in package.lower():\n            if 'pink' in package.lower():\n                pink_buttons += 1\n            if 'rose' in package.lower():\n                rose_buttons += 1\n\n    # check if there are enough pink and rose buttons\n    if pink_buttons < 2 or rose_buttons < 2:\n        return \"I must watch Star Wars with my daughter\"\n\n    # count training sessions\n    num_sessions = (pink_buttons + rose_buttons) // 2\n\n    return str(num_sessions)"
    },
    {
        "number": 4981,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    a, b, c = map(int, stdin.split())\n    order = stdin.strip().split()\n\n    # rearrange numbers based on order\n    if order[0] == 'A':\n        return f\"{a} {b} {c}\"\n    elif order[0] == 'B':\n        return f\"{b} {a} {c}\"\n    else:\n        return f\"{c} {a} {b}\""
    },
    {
        "number": 4982,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    events = stdin.strip().split('\\n')\n    buy_prices = []\n    sell_prices = []\n    split_factors = []\n    merge_factors = []\n    die_price = None\n    for event in events:\n        if event.startswith('buy'):\n            x, y = map(int, event.split()[1:])\n            buy_prices.append(y)\n        elif event.startswith('sell'):\n            x, y = map(int, event.split()[1:])\n            sell_prices.append(y)\n        elif event.startswith('split'):\n            x = int(event.split()[1])\n            split_factors.append(x)\n        elif event.startswith('merge'):\n            x = int(event.split()[1])\n            merge_factors.append(x)\n        elif event.startswith('die'):\n            die_price = int(event.split()[1])\n    if die_price is None:\n        return 'Error: no die event found'\n    # compute the average cost of the shares\n    avg_cost = sum(buy_prices) / len(buy_prices)\n    # compute the total profits\n    profits = [sell_price - avg_cost for sell_price in sell_prices]\n    # compute the capital gains tax\n    taxes = [profit * 0.3 for profit in profits]\n    # compute the total capital gains\n    capital_gains = [profit - tax for profit, tax in zip(profits, taxes)]\n    # compute the final sale price\n    final_sale_price = sum(capital_gains) / len(capital_gains)\n    # compute the remaining shares\n    remaining_shares = len(buy_prices)\n    for factor in split_factors:\n        remaining_shares *= factor\n    for factor in merge_factors:\n        remaining_shares = (remaining_shares + factor - 1) // factor\n    remaining_shares = max(remaining_shares, 0)\n    # compute the final sale price for the remaining shares\n    final_sale_price += remaining_shares * die_price\n    return f'{final_sale_price:.8f}'"
    },
    {
        "number": 4983,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    while x > 9:\n        digits = [int(d) for d in str(x) if d!= '0']\n        x = 1\n        for d in digits:\n            x *= d\n    return str(x)"
    },
    {
        "number": 4984,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split()[0:2])\n    grid = []\n    for i in range(r):\n        grid.append(list(stdin.split()[i+2]))\n    islands = 0\n    visited = [[False for j in range(c)] for i in range(r)]\n    for i in range(r):\n        for j in range(c):\n            if not visited[i][j] and grid[i][j] == 'L':\n                islands += 1\n                dfs(i, j, grid, visited)\n    return str(islands)\n\ndef"
    },
    {
        "number": 4985,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    B = lines[1]\n    points = 0\n    for i in range(2, 2+4*N, 4):\n        card1 = lines[i]\n        card2 = lines[i+1]\n        card3 = lines[i+2]\n        card4 = lines[i+3]\n        if card1[1] == B or card2[1] == B or card3[1] == B or card4[1] == B:\n            points += 11\n        elif card1[1] == card2[1] == card3[1] == card4[1]:\n            points += 10\n        elif card1[1] == card2[1] == card3[1] or card1[1] == card2[1] == card4[1] or card1[1] == card3[1] == card4[1] or card2[1] == card3[1] == card4[1]:\n            points += 4\n        elif card1[0] == card2[0] == card3[0] == card4[0]:\n            points += 20\n        elif card1[0] == card2[0] == card3[0] or card1[0] == card2[0] == card4[0] or card1[0] == card3[0] == card4[0] or card2[0] == card3[0] == card4[0]:\n            points += 3\n        elif card1[0] == card2[0] or card1[0] == card3[0] or card1[0] == card4[0] or card2[0] == card3[0] or card2[0] == card4[0] or card3[0] == card4[0]:\n            points += 2\n    return str(points)"
    },
    {
        "number": 4986,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    sticky_keys = set()\n    for i in range(len(s)):\n        if s[i]!= t[i*2]:\n            sticky_keys.add(s[i])\n    return ''.join(sticky_keys)"
    },
    {
        "number": 4987,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, C, K = map(int, stdin.split())\n    D = list(map(int, stdin.readline().split()))\n    machines = 1\n    current_machine = 0\n    for i in range(1, S):\n        if D[i] - D[i-1] <= K:\n            current_machine += 1\n            if current_machine == C:\n                machines += 1\n                current_machine = 0\n        else:\n            machines += 1\n            current_machine = 1\n    if current_machine > 0:\n        machines += 1\n    return str(machines)"
    },
    {
        "number": 4988,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        N = int(stdin.readline().strip())\n        fact = 1\n        for j in range(1, N+1):\n            fact *= j\n        print(fact % 10)"
    },
    {
        "number": 4989,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    alice_sum = sum(a[::2])\n    bob_sum = sum(a[1::2])\n    return f\"{alice_sum} {bob_sum}\""
    },
    {
        "number": 4990,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, k, g = map(int, stdin.split())\n    d = 0\n    while k > 0:\n        d += b\n        k -= g\n    return str(d)"
    },
    {
        "number": 4991,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + solution(n // 2)\n    else:\n        return n + solution(3 * n + 1)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4992,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *s = map(int, stdin.split())\n    if sum(s) % 2!= 0:\n        return \"impossible\"\n    piles = [[] for _ in range(n)]\n    for i in range(n):\n        piles[i].append(i+1)\n    for i in range(n):\n        for j in range(s[i]):\n            piles[i].append(piles[i].pop(0))\n    for i in range(n):\n        piles[i].pop(0)\n    return \" \".join(map(str, piles[0]))"
    },
    {
        "number": 4993,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    parts, days = map(int, stdin.split())\n    parts_list = []\n    for i in range(days):\n        parts_list.append(stdin.split()[i])\n    for i in range(days):\n        if parts_list.count(parts_list[i]) == 1:\n            return str(i+1)\n    return \"paradox avoided\""
    },
    {
        "number": 4994,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for line in stdin.split('\\n'):\n        x, y = map(int, line.split())\n        points.append((x, y))\n    points.sort()\n    return f\"{points[-1][0]} {points[-1][1]}\""
    },
    {
        "number": 4995,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    observations = []\n    for line in stdin.split('\\n'):\n        if line:\n            observations.append(list(map(int, line.split())))\n    total_seconds = sum(observation[1] for observation in observations)\n    total_minutes = total_seconds // 60\n    if total_minutes == 0:\n        return \"measurement error\"\n    average_seconds = total_seconds / len(observations)\n    average_minutes = average_seconds // 60\n    return \"{:.7f}\".format(average_minutes)"
    },
    {
        "number": 4996,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    message, key = stdin.split('\\n')\n    decrypted = ''\n    for i in range(len(message)):\n        if i % 2 == 0:\n            decrypted += chr((ord(message[i]) - ord('A') + ord(key[i]) - ord('A')) % 26 + ord('A'))\n        else:\n            decrypted += chr((ord(message[i]) - ord('A') - ord(key[i]) + ord('A')) % 26 + ord('A'))\n    return decrypted"
    },
    {
        "number": 4997,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cups = ['A', 'B', 'C']\n    left, middle, right = 0, 1, 2\n    for move in stdin:\n        if move == 'A':\n            left, middle, right = middle, left, right\n        elif move == 'B':\n            left, middle, right = middle, right, left\n        else:\n            left, middle, right = right, middle, left\n    if left == 1:\n        return '1'\n    elif middle == 1:\n        return '2'\n    else:\n        return '3'"
    },
    {
        "number": 4998,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    steps = [A, B, C, D]\n    steps.sort()\n    steps.reverse()\n    max_area = 0\n    for i in range(3):\n        for j in range(i+1, 4):\n            for k in range(j+1, 4):\n                area = (steps[i] + steps[j]) * steps[k]\n                if area > max_area:\n                    max_area = area\n    return str(max_area)"
    },
    {
        "number": 4999,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    count = 0\n    while a!= b:\n        if a % 2 == 0:\n            a //= 2\n            count += 1\n        else:\n            a += 1\n            count += 1\n    return count"
    }
]