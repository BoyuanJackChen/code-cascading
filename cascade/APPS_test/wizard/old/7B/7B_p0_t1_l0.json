[
    {
        "number": 0,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    opening_bracket = s.count('[')\n    closing_bracket = s.count(']')\n    colons = s.count(':')\n    vertical_lines = s.count('|')\n    if opening_bracket != closing_bracket or colons % 2 != 0 or vertical_lines % 2 != 0:\n        return -1\n    else:\n        return 2 * colons + vertical_lines\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = input()\n    max_sum = 0\n    max_number = 0\n    for i in range(1, x+1):\n        current_sum = sum(int(digit) for digit in str(i))\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_number = i\n    return max_number\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = input()\n    while True:\n        if '1' in str(N) or '4' in str(N) or '5' in str(N):\n            N += 1\n        else:\n            break\n    return N - int(input_string)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 3,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q=list(map(int,input().split()))\n    l=[]\n    r=[]\n    for i in range(q):\n        l.append(int(input()))\n        r.append(int(input()))\n    l.sort()\n    r.sort()\n    count=0\n    i=0\n    j=1\n    while i<q and j<q:\n        if l[i]<=r[j]:\n            count+=r[j]-l[i]\n            i+=1\n            j+=1\n        else:\n            j+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 4,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=int(input())\n    hh, mm = map(int, input().split())\n    if hh == 0:\n        hh = 24\n    if mm == 0:\n        mm = 60\n    if hh == 24:\n        hh = 0\n    if mm == 60:\n        mm = 0\n    if '7' in str(x):\n        return 0\n    else:\n        return 1\n    #print(hh, mm)\n    #print(x)\n    #print(str(x))\n    #print(str(x)[:2])\n    #print(str(x)[2:])\n    #print(int(str(x)[:2])*60 + int(str(x)[2:]) + x)\n    #print(int(str(x)[:2])*60 + int(str(x)[2:]) + x)\n    #print(int(str(x)[:2])*60 + int(str(x)[2:]) + x)%60\n    #print(int(str(x)[:2])*60 + int(str(x)[2:]) + x)%60%7\n    #print(int(str(x)[:2])*60 + int(str(x)[2:]) + x)%7\n    #print(int(str(x)[:2])*60 + int(str(x)[2:]) + x)%7 == 0\n    #print(int(str(x)[:2])*60 + int(str(x)[2:]) + x)%7 == 0\n    #print(int(str(x)[:2])*60 + int(str(x)[2:]) + x)%7 == 0\n    #print(int(str(x)[:2])*60 + int(str(x)[2:]) + x)%7 == 0\n    #print(int(str(x)[:2])*60 + int(str(x)[2:]) + x)%7 == 0\n    #print(int(str(x)[:2])*60 + int(str(x)[2:",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 5,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,p,l,r=map(int,input().split())\n    a=min(l-1,p)\n    b=max(r,p)\n    return max(abs(a-l),abs(b-r))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 6,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = list(map(int, input().split()))\n    d = []\n    h = []\n    for i in range(n):\n        d.append(list(map(int, input().split()))\n        h.append(list(map(int, input().split())\n    # write your code here\n    return ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 7,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    days = 1\n    sparrows = 1\n    while n - sparrows >= 0:\n        n -= m\n        sparrows += 1\n        days += 1\n        if n < 0:\n            break\n    return days\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 8,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input().split()\n    count = 0\n    for i in a:\n        if i[0] == '1' or i[0] == '9':\n            count += 1\n        elif i[0] == '2' or i[0] == '8':\n            count += 2\n        else:\n            count += 3\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 9,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    d = int(input())\n    n, m = map(int, input().split())\n    sofas = []\n    for _ in range(d):\n        x1, y1, x2, y2 = map(int, input().split())\n        sofas.append((x1, y1, x2, y2))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())\n    for i in range(d):\n        x1, y1, x2, y2 = sofas[i]\n        for j in range(d):\n            if i != j:\n                x1_, y1_, x2_, y2_ = sofas[j]\n                if x1 == x2_:\n                    if y1 < y2_ < y2:\n                        cnt_t -= 1\n                    if y1_ < y2 < y2_:\n                        cnt_b -= 1\n                if x1_ < x2 < x1:\n                    cnt_l -= 1\n                if x1_ < x2_ < x1:\n                    cnt_r -= 1\n    if cnt_l == 0 and cnt_r == 0 and cnt_t == 0 and cnt_b == 0:\n        return 1\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 10,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    min_days=n//5\n    max_days=n//2\n    print(min_days,max_days)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 11,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b,p,q=list(map(int,input().split()))\n    ans=0\n    for i in range(1,n+1):\n        if i%a==0 or i%b==0:\n            ans+=p if i%a==0 else q\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 12,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    max_length = 0\n    max_length_start = 0\n    max_length_end = 0\n    current_length = 0\n    current_start = 0\n    for i in range(n):\n        if s[i] == 'G':\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n                max_length_start = current_start\n        else:\n            current_length = 0\n            current_start = i + 1\n    if current_length > max_length:\n        max_length = current_length\n        max_length_start = current_start\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 13,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, k = f()\n    main_courses = set(f())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(n):\n        u, *v = f()\n        for x in v:\n            graph[u].append(x)\n    visited = [False] * (n+1)\n    def dfs(u):\n        if visited[u]:\n            return False\n        visited[u] = True\n        for v in graph[u]:\n            if dfs(v):\n                return True\n        return u in main_courses\n    count = 0\n    for i in range(1, n+1):\n        if dfs(i):\n            count += 1\n    if count == k:\n        return count, sorted(i for i in range(1, n+1) if dfs(i))\n    return -1, -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 14,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = map(int,input().split())\n    p = list(map(int,input().split())\n    if k == 0:\n        return -1\n    if k == n:\n        return p\n    if k == 1:\n        return p[0]\n    if k == 2:\n        if p[0] > p[1]:\n            return p[0],p[1]\n        else:\n            return p[1],p[0]\n    if k == 3:\n        if p[0] > p[1] and p[1] > p[2]:\n            return p[0],p[1],p[2]\n        elif p[0] > p[2] and p[1] > p[0]:\n            return p[0],p[2],p[1]\n        elif p[1] > p[2] and p[0] > p[1]:\n            return p[1],p[0],p[2]\n        elif p[1] > p[0] and p[2] > p[1]:\n            return p[1],p[2],p[0]\n        elif p[2] > p[0] and p[1] > p[2]:\n            return p[2],p[0],p[1]\n        else:\n            return p[2],p[1],p[0]\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 15,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c = list(map(int, input().split()))\n    if b == a:\n        return \"YES\"\n    elif c == 0:\n        return \"NO\"\n    elif b < a:\n        return \"NO\"\n    else:\n        i = 1\n        while a + i * c <= b:\n            if a + i * c == b:\n                return \"YES\"\n            i += 1\n        return \"NO\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 16,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    d = int(input())\n    if a == 0 and b == 0 and c == 0:\n        return 1\n    if a == 0 and b == 0 and d == 0:\n        return 1\n    if a == 0 and c == 0 and d == 0:\n        return 1\n    if a == 0 and b == 0:\n        return 1\n    if a == 0 and d == 0:\n        return 1\n    if b == 0 and c == 0:\n        return 1\n    if a == 0 and c == 0:\n        return 1\n    if b == 0 and d == 0:\n        return 1\n    if a == 0:\n        return 1\n    if c == 0:\n        return 1\n    if d == 0:\n        return 1\n    if a == 1 and b == 0 and c == 0 and d == 0:\n        return 1\n    if a == 0 and b == 1 and c == 0 and d == 0:\n        return 1\n    if a == 0 and b == 0 and c == 1 and d == 0:\n        return 1\n    if a == 0 and b == 0 and c == 0 and d == 1:\n        return 1\n    if a == 1 and b == 0 and c == 1 and d == 0:\n        return 1\n    if a == 1 and b == 1 and c == 0 and d == 0:\n        return 1\n    if a == 1 and b == 0 and c == 0 and d == 1:\n        return 1\n    if a == 0 and b == 1 and c == 1 and d == 1:\n        return 1\n    if a == 1 and b == 1 and c == 1 and d == 0:\n        return 1\n    if a == 1 and b == 1 and c == 1 and d == 1:\n        return 1\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 17,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, t = map(int, input().split())\n    standing = 0\n    for i in range(1, n+1):\n        if i <= t:\n            standing += 1\n        else:\n            standing -= 1\n        if i % k == 0:\n            standing = 0\n    return standing\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 18,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    t=''\n    u=''\n    for i in range(len(s)):\n        t+=s[0]\n        u+=s[-1]\n        s=s[1:-1]\n    return ''.join(sorted(u))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 19,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        p, c = map(int, input().split())\n        if i == 0:\n            if p == 0 and c == 0:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if p <= c:\n                print(\"NO\")\n            else:\n                print(\"YES\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 20,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=input().split(\\\":\\\")\n    a=int(a)\n    b=int(b)\n    if a==0:\n        return 0\n    if a%2==0:\n        if b%2==0:\n            return 0\n        else:\n            return 1\n    else:\n        if b%2==0:\n            return 1\n        else:\n            return 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 21,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    min_index = a.index(1)\n    max_index = a.index(n)\n    distance = abs(min_index - max_index)\n    if distance > 1:\n        return distance - 1\n    else:\n        return distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 22,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if s == s[::-1]:\n        print(\"TAK\")\n    else:\n        print(\"NIE\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 23,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(input())\n    b = list(str(input())\n    max_num = \"\"\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if a[i] > b[j]:\n                max_num += a[i]\n                break\n        else:\n            max_num += a[i]\n    return max_num\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 24,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    cells = [list(input()) for _ in range(10)]\n    cross_count = nought_count = 0\n    for row in cells:\n        cross_count += row.count('X')\n        nought_count += row.count('O')\n    if cross_count == nought_count:\n        return 'NO'\n    for i in range(10):\n        for j in range(10):\n            if cells[i][j] == '.':\n                cells[i][j] = 'X'\n                if check_win(cells):\n                    return 'YES'\n                cells[i][j] = '.'\n    return 'NO'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 25,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, K = map( int, input().split() )\n    if K > N*(N-1)//2:\n        return -1\n    matrix = [[0]*N for _ in range(N)]\n    row, col = 0, 0\n    for i in range(K):\n        matrix[row][col] = 1\n        if col == N-1:\n            row += 1\n        else:\n            col += 1\n        if row == N-1:\n            col = 0\n        else:\n            col += 1\n    for i in range(N):\n        for j in range(N):\n            print(matrix[i][j], end=\" \")\n        print()\n    return matrix\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 26,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y,z = map(Decimal, input().split())\n    a1 = x**y**z\n    a2 = x**z**y\n    a3 = (x**y)**z\n    a4 = (x**z)**y\n    a5 = y**x**z\n    a6 = y**z**x\n    a7 = (y**x)**z\n    a8 = (y**z)**x\n    a9 = z**x**y\n    a10 = z**y**x\n    a11 = (z**x)**y\n    a12 = (z**y)**x\n    max_a = max(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)\n    if a1 == max_a:\n        return \"x^y^z\"\n    elif a2 == max_a:\n        return \"x^z^y\"\n    elif a3 == max_a:\n        return \"(x^y)^z\"\n    elif a4 == max_a:\n        return \"(x^z)^y\"\n    elif a5 == max_a:\n        return \"y^x^z\"\n    elif a6 == max_a:\n        return \"y^z^x\"\n    elif a7 == max_a:\n        return \"(y^x)^z\"\n    elif a8 == max_a:\n        return \"(y^z)^x\"\n    elif a9 == max_a:\n        return \"z^x^y\"\n    elif a10 == max_a:\n        return \"z^y^x\"\n    elif a11 == max_a:\n        return \"(z^x)^y\"\n    else:\n        return \"(z^y)^x\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 27,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return 2 * n - 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 28,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    examples = []\n    tests = []\n    for i in range(n):\n        name, type = input().split()\n        if type == '1':\n            examples.append(name)\n        else:\n            tests.append(name)\n    examples.sort()\n    tests.sort()\n    script = []\n    for i in range(len(examples)):\n        script.append(f\"move {examples[i]} {i + 1}\")\n    for i in range(len(tests)):\n        script.append(f\"move {tests[i]} {len(examples) + i + 1}\")\n    print(len(script))\n    for line in script:\n        print(line)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 29,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=int(input())\n    y=list(input())\n    if sum(y[:3])==sum(y[3:]):\n        print(0)\n    else:\n        count=0\n        for i in range(6):\n            if y[i]!=0:\n                y[i]=0\n                if sum(y[:3])==sum(y[3:]):\n                    print(count)\n                    break\n                else:\n                    count+=1\n                    y[i]=int(y[i])\n        else:\n            print(count+1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 30,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m,x=map(int,input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 31,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    A = 1\n    B = 1\n    for i in range(2, 2**n+1):\n        A *= (2**n - i + 1)\n        B *= i\n    A = A // math.gcd(A, B)\n    B = B // math.gcd(A, B)\n    A %= 100000003\n    B %= 10000003\n    print(A, B)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 32,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    directions = input_string.split('\\n')\n    x = 0\n    y = 0\n    for i in range(n):\n        t, dir = directions[i].split()\n        t = int(t)\n        if dir == \"North\":\n            x += t\n        elif dir == \"South\":\n            x -= t\n        elif dir == \"East\":\n            y += t\n        elif dir == \"West\":\n            y -= t\n        if x == 2000000:\n            return \"NO\"\n        if y == -2000000:\n            return \"NO\"\n    if x == 0 and y == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 33,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a1,b1,a2,b2,l,r=list(map(int,input().split()))\n    count=0\n    for i in range(l,r+1):\n        if i%a1==b1:\n            for j in range(l,r+1):\n                if j%a2==b2:\n                    count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 34,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b = [int(x) for x in input().split()]\n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 35,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    flag = []\n    for i in range(n):\n        flag.append(input().split())\n    for i in range(n):\n        if len(flag[i]) != m:\n            return \"NO\"\n    if flag[0][0] == 'R' and flag[0][m-1] == 'R' and flag[n-1][0] == 'R' and flag[n-1][m-1] == 'R':\n        for i in range(1, n):\n            if flag[i][0] == 'B' and flag[i][m-1] == 'B':\n                return \"NO\"\n        for j in range(1, m):\n            if flag[0][j] == 'G' and flag[n-1][j] == 'G':\n                return \"NO\"\n        for i in range(1, n-1):\n            for j in range(1, m-1):\n                if flag[i][j] == 'G' and flag[i][j] == flag[i+1][j] and flag[i][j] == flag[i][j+1]:\n                    return \"NO\"\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 36,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=0\n    y=0\n    if n==0:\n        return x,y\n    elif n==1:\n        return 0,0\n    elif n==2:\n        return -1,0\n    elif n==3:\n        return -1,1\n    elif n==4:\n        return 0,1\n    elif n==5:\n        return 1,1\n    elif n==6:\n        return 1,0\n    elif n==7:\n        return 0,-1\n    elif n==8:\n        return -1,-1\n    elif n==9:\n        return 0,-2\n    elif n==10:\n        return 2,0\n    elif n==11:\n        return 1,-1\n    elif n==12:\n        return 1,1\n    elif n==13:\n        return 0,2\n    elif n==14:\n        return -1,2\n    elif n==15:\n        return 2,1\n    elif n==16:\n        return 2,-1\n    elif n==17:\n        return 0,3\n    elif n==18:\n        return -2,1\n    elif n==19:\n        return -1,3\n    elif n==20:\n        return 3,1\n    elif n==21:\n        return 3,0\n    elif n==22:\n        return 2,-1\n    elif n==23:\n        return 3,-1\n    elif n==24:\n        return 2,2\n    elif n==25:\n        return 1,3\n    elif n==26:\n        return 0,4\n    elif n==27:\n        return -1,4\n    elif n==28:\n        return 4,1\n    elif n==29:\n        return 4,0\n    elif n==30:\n        return 3,-1\n    elif n==31:\n        return 4,-1\n    elif n==32:\n        return 3,2\n    elif n==33:\n        return 2,4\n    elif n==",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 37,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split())\n    if c%a==0:\n        return \"Yes\"\n    if c%b==0:\n        return \"Yes\"\n    return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 38,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q,w=list(map(int,input().split()))\n    e,r=list(map(int,input().split()))\n    if q==w:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 39,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i:j] == s[i:j][::-1] and s[i:j] != s:\n                max_len = max(max_len, j-i)\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 40,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    ratings = []\n    for i in range(N):\n        a, b = map(int, input().split())\n        ratings.append((a, b))\n    ratings.sort(key=lambda x: x[1])\n    for i in range(N-1):\n        if ratings[i][1] < ratings[i+1][0]:\n            return \"rated\"\n    return \"unrated\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 41,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input_string.split()))\n    d=[]\n    for i in range(n):\n        if a[i]==0:\n            d.append(0)\n        else:\n            min_dist=float('inf')\n            for j in range(n):\n                if a[j]==0:\n                    min_dist=min(min_dist,abs(i-j))\n            d.append(min_dist)\n    for i in range(n):\n        if a[i]==0:\n            d[i]=0\n    print(*d)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 42,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(n):\n        if s[i:i+len(s)] in s:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 43,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y = map(int, input().split())\n    return x, y\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 44,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    d, k, a, b, t = map(int, input().split())\n    time = 0\n    km = 0\n    while km < d:\n        if km + k <= d:\n            time += k * a\n            km += k\n        else:\n            time += (d - km) * a + (km + k) * b\n            km += d - km\n        time += t\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 45,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    if n % k == 0:\n        print(*[n//k]*k)\n    else:\n        print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 46,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    count=0\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            if (i+j)%5==0:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 47,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    # print(n, x, a)\n    max_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            subarray = a[i:j+1]\n            subarray_sum = sum(subarray)\n            max_sum = max(max_sum, subarray_sum * x)\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 48,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m, n, k = list(map(int, input().split()))\n    # Write your code here\n    # Initialize a list to store the multiplication table\n    multiplication_table = [[0 for j in range(n)] for i in range(m)]\n    # Fill the multiplication table\n    for i in range(m):\n        for j in range(n):\n            multiplication_table[i][j] = i*j\n    # Sort the list of numbers in non-decreasing order\n    sorted_list = sorted([multiplication_table[i][j] for i in range(m) for j in range(n)])\n    # Return the k-th largest number\n    return sorted_list[k-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 49,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k=int(input())\n    num_list=[]\n    for i in range(1,1000000000000000000000000):\n        num_list.append(i)\n    print(num_list[k-1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 50,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, r = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    s.sort(reverse=True)\n    b.sort()\n    max_profit = 0\n    for i in range(n):\n        if r >= s[i]:\n            r -= s[i]\n            max_profit += s[i]\n    for i in range(m):\n        if r >= b[i]:\n            r -= b[i]\n            max_profit -= b[i]\n    return max_profit\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 52,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f=n=int(input())\n    if f==1:\n        print(-1)\n    elif f%2==0:\n        print(f)\n    else:\n        print(f-1)\n        print(f-2)\n        print(f-3)\n        print(f-4)\n        print(f-5)\n        print(f-6)\n        print(f-7)\n        print(f-8)\n        print(f-9)\n        print(f-10)\n        print(f-11)\n        print(f-12)\n        print(f-13)\n        print(f-14)\n        print(f-15)\n        print(f-16)\n        print(f-17)\n        print(f-18)\n        print(f-19)\n        print(f-20)\n        print(f-21)\n        print(f-22)\n        print(f-23)\n        print(f-24)\n        print(f-25)\n        print(f-26)\n        print(f-27)\n        print(f-28)\n        print(f-29)\n        print(f-30)\n        print(f-31)\n        print(f-32)\n        print(f-33)\n        print(f-34)\n        print(f-35)\n        print(f-36)\n        print(f-37)\n        print(f-38)\n        print(f-39)\n        print(f-40)\n        print(f-41)\n        print(f-42)\n        print(f-43)\n        print(f-44)\n        print(f-45)\n        print(f-46)\n        print(f-47)\n        print(f-48)\n        print(f-49)\n        print(f-50)\n        print(f-51)\n        print(f-52)\n        print(f-53)\n        print(f-54)\n        print(f",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 53,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r = lambda: list(map(int, input().split()))\n    n = len(input_string)\n    s = input_string\n    b = r()\n    max_beauty = 0\n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j]:\n                max_beauty += b[j]\n    return max_beauty\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 54,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w,m=map(int,input().split())\n    if w==1:\n        if m==1:\n            return 'YES'\n        else:\n            return 'NO'\n    else:\n        for i in range(2,w+1):\n            if i*i<=m:\n                if m%i==0:\n                    return 'YES'\n        return 'NO'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 55,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    if n % 2 == 1 and k % 2 == 1:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n        for i in range(k):\n            print(n // 2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 56,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,t = [int(x) for x in input().split()]\n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 57,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    # Your code goes here\n    if n == 2:\n        return 1\n    elif n == 1:\n        return -1\n    else:\n        x1, y1 = points[0]\n        x2, y2 = points[1]\n        x3, y3 = points[2]\n        x4, y4 = points[3]\n        area = abs((x1*(y2-y3) + x2*(y4-y1) + x3*(y1-y2) + x4*(y3-y4))/2)\n        return area\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 58,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    [n,a,b],r,i,j=[int(input())for x in range(3)],6,4,5\n    while i>0:\n        if a<=n and b<=n:\n            print(r)\n            break\n        else:\n            r+=1\n            a+=1\n            b+=1\n            i-=1\n            j-=1\n    else:\n        print(r)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 59,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    forbidden = input()\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        return \"YES\" if a[0] < a[1] else \"NO\"\n    if n == 3:\n        return \"YES\" if a[0] < a[1] < a[2] else \"NO\"\n    if n == 4:\n        return \"YES\" if a[0] < a[1] < a[2] < a[3] else \"NO\"\n    if n == 5:\n        return \"YES\" if a[0] < a[1] < a[2] < a[3] < a[4] else \"NO\"\n    if n == 6:\n        return \"YES\" if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] else \"NO\"\n    if n == 7:\n        return \"YES\" if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] else \"NO\"\n    if n == 8:\n        return \"YES\" if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] else \"NO\"\n    if n == 9:\n        return \"YES\" if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] else \"NO\"\n    if n == 10:\n        return \"YES\" if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9] else \"NO\"\n    if n == 11:\n        return \"YES\" if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] <",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 60,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    row = int(s[0])\n    seat = s[1]\n    n = int(s[0])\n    if seat == 'a':\n        return 1\n    elif seat == 'f':\n        return 1\n    elif seat == 'c':\n        return 2\n    elif seat == 'd':\n        return 2 + 3 + 1\n    elif seat == 'e':\n        return 2 + 3 + 1 + 3 + 1\n    else:\n        return 2 + 3 + 1 + 3 + 1 + 3 + 1 + 3 + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 61,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, b = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    m, b = list(map(int, input().split()))\n    y = list(map(int, input().split())\n    return '>' if x > y else '<' if x < y else '='\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 62,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if n==1:\n        return \"BitLGM\"\n    if n==2:\n        if a[0]>a[1]:\n            return \"BitLGM\"\n        else:\n            return \"BitAryo\"\n    if a[0]>a[1]:\n        return \"BitLGM\"\n    else:\n        return \"BitAryo\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 63,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    x = 0\n    y = 0\n    count = 0\n    for i in range(n):\n        if a[i] % k == 0:\n            x += 1\n        if a[n-i-1] % k == 0:\n            y += 1\n    if x == 0 and y == 0:\n        count += 1\n    elif x == 1 and y == 0:\n        count += 1\n    elif x == 2 and y == 0:\n        count += 1\n    elif x == 0 and y == 1:\n        count += 1\n    else:\n        count += 0\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 64,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = [int(i) for i in input().split()]\n    s = input()\n    if n % k == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 65,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    min_val = min(arr)\n    min_index = arr.index(min_val)\n    min_val_2 = min(arr[min_index+1:])\n    min_index_2 = arr[min_index+1:].index(min_val_2) + min_index + 1\n    return min_index_2 - min_index\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 66,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l, n, m = map(int, input().split())\n    return f\"{n//gcd(n, m)}/{l//gcd(n, l)}\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 67,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y, z = map(int, input().split())\n    if x > y:\n        return \"+\"\n    elif y > x:\n        return \"-\"\n    elif z > 0:\n        return \"?\"\n    else:\n        return \"0\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 68,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    sequence=input()\n    x,y=map(int,input().split())\n    if x==0 and y==0:\n        return 0\n    if x<0 or y<0:\n        return -1\n    if n==0:\n        return -1\n    if n==1:\n        if sequence[0]=='U' and y==1:\n            return 1\n        elif sequence[0]=='D' and y==-1:\n            return 1\n        elif sequence[0]=='L' and x==-1:\n            return 1\n        elif sequence[0]=='R' and x==1:\n            return 1\n        else:\n            return -1\n    if n==2:\n        if sequence[0]=='U' and sequence[1]=='D' and y==0:\n            return 2\n        elif sequence[0]=='D' and sequence[1]=='U' and y==0:\n            return 2\n        elif sequence[0]=='L' and sequence[1]=='R' and x==0:\n            return 2\n        elif sequence[0]=='R' and sequence[1]=='L' and x==0:\n            return 2\n        else:\n            return -1\n    if n==3:\n        if sequence[0]=='U' and sequence[1]=='D' and sequence[2]=='U' and y==0:\n            return 3\n        elif sequence[0]=='D' and sequence[1]=='U' and sequence[2]=='D' and y==0:\n            return 3\n        elif sequence[0]=='L' and sequence[1]=='R' and sequence[2]=='L' and x==0:\n            return 3\n        elif sequence[0]=='R' and sequence[1]=='L' and sequence[2]=='R' and x==0:\n            return 3\n        else:\n            return -1\n    if n==4:\n        if sequence[0]=='U' and sequence[1]=='D' and sequence[2]=='L' and sequence[3",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 69,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x=map(int,input().split())\n    s=input()\n    cnt0=0\n    cnt1=0\n    for i in s:\n        if i=='0':\n            cnt0+=1\n        else:\n            cnt1+=1\n    if cnt0==x or cnt1==x:\n        return 1\n    elif cnt0>x or cnt1>x:\n        return 0\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 70,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=input().split()\n    n=int(n)\n    k=int(k)\n    count=0\n    while n%(10**k)!=0:\n        n//=10\n        count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 71,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k, x, y = list(map(int, input().split()))\n    max_questions = min_questions = asked_sergei = 0\n    for i in range(k):\n        if i % 2 == 0:\n            if i % (n - 1) == 0:\n                max_questions += 1\n                min_questions += 1\n                if x == 1 and y == 1:\n                    asked_sergei += 1\n            elif i % (n - 1) == 1:\n                max_questions += m\n                min_questions += 1\n                if x == 1 and y == 1:\n                    asked_sergei += 1\n            else:\n                max_questions += m\n                min_questions += 1\n                if x == 1 and y == 1:\n                    asked_sergei += 1\n        else:\n            if i % (n - 1) == 0:\n                max_questions += 1\n                min_questions += 1\n                if x == n and y == m:\n                    asked_sergei += 1\n            elif i % (n - 1) == 1:\n                max_questions += m\n                min_questions += 1\n                if x == n and y == m:\n                    asked_sergei += 1\n            else:\n                max_questions += m\n                min_questions += 1\n                if x == n and y == m:\n                    asked_sergei += 1\n    print(max_questions, min_questions, asked_sergei)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 72,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    Kuro = input()\n    Shiro = input()\n    Katie = input()\n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 73,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c, v0, v1, a, l = map(int, input().split())\n    days = 1\n    if v0 >= c:\n        return 1\n    if l == 0:\n        return c // v0\n    if v1 == v0:\n        return (c // v0) + 1\n    if a == 0:\n        return (c // v0) + 1\n    days = 1\n    while v0 < c:\n        v0 += a\n        days += 1\n    return days\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 74,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = int(input())\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 233, 239, 241, 251, 263, 271, 277, 281, 283, 293, 307, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 419, 431, 433, 439, 443, 449, 461, 463, 467, 479, 487, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 593, 599, 601, 613, 617, 619, 631, 641, 643, 647, 653, 65",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 75,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    row,col = list(map(int,input().split()))\n    field = []\n    for i in range(row):\n        field.append(list(input()))\n    for i in range(row):\n        for j in range(col):\n            if field[i][j] == '*':\n                if i == 0 or i == row-1 or j == 0 or j == col-1:\n                    return \"NO\"\n    for i in range(1,row-1):\n        if field[i][0] == '*' or field[i][col-1] == '*':\n            return \"NO\"\n    for j in range(1,col-1):\n        if field[0][j] == '*' or field[row-1][j] == '*':\n            return \"NO\"\n    for i in range(1,row-1):\n        if field[0][i] == '*' or field[row-1][i] == '*':\n            return \"NO\"\n    for j in range(1,col-1):\n        if field[i][0] == '*' or field[i][col-1] == '*':\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 76,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,a,b=list(map(int,input().split()))\n    if n%m==0:\n        return 0\n    else:\n        return (m-1)*a+(n%m)*b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 77,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    subseq = []\n    for i in range(n):\n        if i % 2 == 0:\n            subseq.append(a[i])\n    return sum(subseq)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 78,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, T = map(int, input().split())\n    songs = []\n    for i in range(N):\n        t, g = map(int, input().split())\n        songs.append((t, g))\n    songs.sort(key=lambda x: x[0])\n    dp = [1] * (T + 1)\n    dp[0] = 1\n    for song in songs:\n        t, g = song\n        for i in range(T, t - 1, -1, -1):\n            if dp[i - t] > 0:\n                dp[i] += dp[i - t]\n        for i in range(1, T - t + 1):\n            if dp[i] > 0:\n                dp[i] += dp[i - 1]\n    return dp[T] % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 79,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m = int(input())\n    a = []\n    while True:\n        x = random.randint(1, m)\n        a.append(x)\n        if gcd(a) == 1:\n            break\n    return len(a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 80,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l,r,x,y=list(map(int,input().split()))\n    count=0\n    for i in range(l,r+1):\n        for j in range(i,r+1):\n            if gcd(i,j)==x and lcm(i,j)==y:\n                count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 81,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = list(map(int, input().split()))\n    k = 0\n    while True:\n        if gcd(a+k, b+k) == 1:\n            k += 1\n        else:\n            break\n    print(k)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 82,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    marks = list(map(int, input().split()))\n    total_marks = sum(marks)\n    average = total_marks / n\n    if average >= k:\n        return 0\n    else:\n        return k - average\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 83,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    arr=list(map(float,input_string.split()))\n    count=0\n    for i in arr:\n        if i>0:\n            count+=1\n    if count>=n//2:\n        return 1\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 84,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    count = 0\n    for i in range(n//2):\n        count += n-i\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 85,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=list(map(int,input().split()))\n    c,d=list(map(int,input().split()))\n    if a*b==c*d:\n        print(0)\n        print(a,b)\n        print(c,d)\n    else:\n        if a*b>c*d:\n            a,b,c,d=c,d,a,b\n        if a*b<c*d:\n            if a*b%2==0 and c*d%2==0:\n                a,b,c,d=a*2,b*2,c,d\n                print(1)\n                print(a,b)\n                print(c,d)\n            elif a*b%3==0 and c*d%3==0:\n                a,b,c,d=a*3,b*3,c,d\n                print(1)\n                print(a,b)\n                print(c,d)\n            else:\n                print(-1)\n        else:\n            if a*b%2==0 and c*d%2==0:\n                a,b,c,d=a*2,b*2,c,d\n                print(1)\n                print(a,b)\n                print(c,d)\n            elif a*b%3==0 and c*d%3==0:\n                a,b,c,d=a*3,b*3,c,d\n                print(1)\n                print(a,b)\n                print(c,d)\n            else:\n                print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 86,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    xp, yp, xv, yv = list(map(int, input().split()))\n    if xp == 0 or yp == 0 or xv == 0 or yv == 0:\n        return \"Polycarp\"\n    elif xp == xv and yp == yv:\n        return \"Draw\"\n    elif xp == xv:\n        return \"Vasiliy\"\n    elif yp == yv:\n        return \"Polycarp\"\n    elif xp < xv:\n        return \"Vasiliy\"\n    else:\n        return \"Polycarp\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 87,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m, d = map(int, input().split())\n    if m == 1:\n        m = 12\n    else:\n        m -= 1\n    first_day = (m * 7 + d) % 7\n    if first_day == 0:\n        first_day = 7\n    if first_day == 6:\n        return 7\n    else:\n        return first_day + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 88,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = list(map(int, input().split()))\n    count = 0\n    for i in range(a, b+1):\n        binary_string = bin(i)[2:]\n        if '0' in binary_string:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 89,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return 6\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 90,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, K, S = list(map( int, input().split() ))\n    A = list(map( int, input().split() ) )\n    # print(N, K, S, A)\n    # print(A)\n    # print(len(A))\n    # print(A[0])\n    # print(A[1])\n    # print(A[2])\n    # print(A[3])\n    # print(A[4])\n    # print(A[5])\n    # print(A[6])\n    # print(A[7])\n    # print(A[8])\n    # print(A[9])\n    # print(A[10])\n    # print(A[11])\n    # print(A[12])\n    # print(A[13])\n    # print(A[14])\n    # print(A[15])\n    # print(A[16])\n    # print(A[17])\n    # print(A[18])\n    # print(A[19])\n    # print(A[20])\n    # print(A[21])\n    # print(A[22])\n    # print(A[23])\n    # print(A[24])\n    # print(A[25])\n    # print(A[26])\n    # print(A[27])\n    # print(A[28])\n    # print(A[29])\n    # print(A[30])\n    # print(A[31])\n    # print(A[32])\n    # print(A[33])\n    # print(A[34])\n    # print(A[35])\n    # print(A[36])\n    # print(A[37])\n    # print(A[38])\n    # print(A[39])\n    # print(A[40])\n    # print(A[41])\n    # print(A[42])\n    # print(A[43])\n    # print(A[44])\n    # print(A[45])\n    # print(A[46])\n    # print(A[47",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 91,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,k=map(int,input().split())\n        a=list(map(int,input().split()))\n        v=[0]*n\n        for j in range(n):\n            if a[j]>0:\n                v[j]=a[j]\n        for j in range(n):\n            if sum(v)==sum(a):\n                print(\"YES\")\n                break\n            else:\n                for p in range(n):\n                    if v[p]<a[p]:\n                        v[p]+=k\n                        if sum(v)==sum(a):\n                            print(\"YES\")\n                            break\n                        else:\n                            v[p]-=k\n                    else:\n                        v[p]=a[p]\n                else:\n                    print(\"NO\")\n                    \n# Test the function with the given example\ninput_string=\"\"\"5\n4 100\n0 0 0\n1 2\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810\"\"\"\nsolution(input_string) ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 92,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=[int(x) for x in input().split(' ')]\n    result=0\n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            for k in range(1,c+1):\n                result+=d(i*j*k)\n    return result%1073741824\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 93,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input()\n    b = input()\n    c = input()\n    d = input()\n    if a == b and c == d:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 94,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input()\n    k=input()\n    #convert k to decimal\n    decimal_number=0\n    for i in range(len(k)-1,-1,-1):\n        decimal_number+=int(k[i])*n**(len(k)-i-1)\n    return decimal_number\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 95,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    increasing = True\n    decreasing = True\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            increasing = False\n        elif arr[i] < arr[i-1]:\n            decreasing = False\n        if not increasing and not decreasing:\n            break\n    if increasing and decreasing:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 96,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = input().split()\n    a, b = int(a), int(b)\n    even_numbers = set()\n    odd_numbers = set()\n    for i in range(1, a+1):\n        if i % 2 == 0:\n            even_numbers.add(i)\n        else:\n            odd_numbers.add(i)\n    even_numbers = list(even_numbers)\n    odd_numbers = list(odd_numbers)\n    even_numbers.sort()\n    odd_numbers.sort()\n    even_count = 0\n    odd_count = 0\n    for i in range(1, a+1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count >= b:\n        return even_numbers[-1]\n    elif odd_count >= b:\n        return odd_numbers[-1]\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 97,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    [n, m, x, y, vx, vy] = list(map(int, input().strip().split()))\n    if vx == 0:\n        if y == 0:\n            return 0, 0\n        elif y == m:\n            return n-1, 0\n        elif y == 1:\n            return 0, m-1\n        else:\n            return n-1, m-1\n    elif vy == 0:\n        if x == 0:\n            return 0, 0\n        elif x == n:\n            return n-1, 0\n        elif x == 1:\n            return 0, m-1\n        else:\n            return n-1, m-1\n    else:\n        if vx > 0:\n            if vy > 0:\n                if x == 0 and y == 0:\n                    return 0, 0\n                elif x == n and y == m:\n                    return n-1, m-1\n                elif x == 0:\n                    return 0, m-1\n                elif y == 0:\n                    return n-1, 0\n                else:\n                    return n-1, m-1\n            else:\n                if x == 0:\n                    return 0, m-1\n                elif y == 0:\n                    return n-1, 0\n                elif x == n:\n                    return 0, m-1\n                else:\n                    return n-1, m-1\n        else:\n            if vy > 0:\n                if x == 0 and y == 0:\n                    return 0, 0\n                elif x == n and y == m:\n                    return n-1, m-1\n                elif x == 0:\n                    return 0, m-1\n                elif y == 0:\n                    return n-1, 0\n                else:\n                    return n-1, m-1\n            else:\n                if x == 0:\n                    return 0, m-1\n                elif y == 0:\n                    return n-1, 0\n                elif x == n:\n                    return 0, m-1\n                else:\n                    return n-1, m-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 98,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r=lambda: map(int, input().split())\n    a1, b1, a2, b2, a3, b3 = r()\n    if a1*b1 >= a2+b2+a3+b3:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 99,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    b_1,q,l,m=R()\n    bad_integers=R()\n    if b_1==0 and q==0:\n        return \"inf\"\n    if b_1==0:\n        return 0\n    if q==0:\n        return 1\n    count=1\n    while abs(b_1)<=l:\n        if b_1 in bad_integers:\n            b_1=b_1*q\n            continue\n        count+=1\n        if abs(b_1)>l:\n            return count-1\n        b_1=b_1*q\n    return count-1 if count>1 else 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 100,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    mon = [list(input()) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if mon[i][j] == 'w':\n                mon[i][j] = '+'\n    for i in range(n):\n        for j in range(m):\n            if mon[i][j] == '.':\n                mon[i][j] = 'w'\n    return mon\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 101,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = int(input())\n    b = int(input())\n    x = n // a\n    y = n // b\n    if x * a + y * b == n:\n        print(\"YES\")\n        print(x, y)\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 102,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n < 10:\n        return str(n)\n    elif n < 20:\n        return \"ten\"\n    elif n < 30:\n        return \"twenty\"\n    elif n < 40:\n        return \"thirty\"\n    elif n < 50:\n        return \"forty\"\n    elif n < 60:\n        return \"fifty\"\n    elif n < 70:\n        return \"sixty\"\n    elif n < 80:\n        return \"seventy\"\n    elif n < 90:\n        return \"eighty\"\n    else:\n        return \"ninety\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 103,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_count = 0\n    count = 0\n    for i in range(n):\n        if i == 0:\n            count = 1\n        elif a[i] - a[i-1] == 1:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    max_count = max(max_count, count)\n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 104,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        count += a[i]\n        if count >= n/2:\n            return i+1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 105,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    board=[]\n    for i in range(n):\n        board.append(list(map(int,input().split()))\n    #print(board)\n    def knight_move(x,y):\n        return [(x+2,y+1),(x+2,y-1),(x-2,y+1),(x-2,y-1),(x+1,y+2),(x+1,y-2),(x-1,y+2),(x-1,y-2),(x+1,y+1),(x-1,y-1)]\n    def bishop_move(x,y):\n        return [(x+i,y+i) for i in range(1,n) if 0<=x+i<n and 0<=y+i<n]+[(x-i,y+i) for i in range(1,n) if 0<=x-i<n and 0<=y+i<n]+[(x+i,y-i) for i in range(1,n) if 0<=x+i<n and 0<=y-i<n]+[(x-i,y-i) for i in range(1,n) if 0<=x-i<n and 0<=y-i<n]\n    def rook_move(x,y):\n        return [(x+i,y) for i in range(1,n) if 0<=x+i<n]+[(x-i,y) for i in range(1,n) if 0<=x-i<n]+[(y+i,x) for i in range(1,n) if 0<=y+i<n]+[(y-i,x) for i in range(1,n) if 0<=y-i<n]\n    def knight_path(x,y):\n        if x==n-1 and y==1:\n            return 0\n        if x==n-1 and y==2:\n            return 1\n        if x==n-2 and y==3:\n            return 2\n        if x==n-3 and y==4:\n            return 3\n        if x==n-4 and y==5:\n            return",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 107,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if s.count('1') % 4 == 0:\n        return 'yes'\n    else:\n        return 'no'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 108,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == 'z':\n            s[i] = 'a'\n        else:\n            s[i] = chr(ord(s[i]) + 1)\n    s = ''.join(s)\n    if 'a' in s and 'b' in s and 'c' in s and 'd' in s and 'e' in s and 'f' in s and 'g' in s and 'h' in s and 'i' in s and 'j' in s and 'k' in s and 'l' in s and 'm' in s and 'n' in s and 'o' in s and 'p' in s and 'q' in s and 'r' in s and 's' in s and 't' in s and 'u' in s and 'v' in s and 'w' in s and 'x' in s and 'y' in s:\n        print(s)\n    else:\n        print(\"-1\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 109,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, r, k = map(int, input().split())\n    return 2.0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 110,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a=[-x-1 for x in a]\n    print(*a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 111,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            if n // i == i:\n                divisors.append(i)\n            else:\n                divisors.append(i)\n                divisors.append(n//i)\n    divisors.sort()\n    if len(divisors) < k:\n        return -1\n    else:\n        return divisors[k-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 112,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cubes = []\n    for i in range(n):\n        cubes.append(list(map(int, input().split()))\n    max_num = 0\n    for i in range(1, 10):\n        for j in range(1, 10):\n            for k in range(1, 10):\n                for l in range(1, 10):\n                    for m in range(1, 10):\n                        for n in range(1, 10):\n                            for o in range(1, 10):\n                                for p in range(1, 10):\n                                    num = int(''.join(map(str, [i, j, k, l, m, n, o, p]))\n                                    if num <= 987654321:\n                                        max_num = max(max_num, num)\n    return max_num\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 113,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    if n == 0:\n        return 0\n    if k == 0:\n        return n\n    if n % 10**k == 0:\n        return n\n    else:\n        return n - n % 10**k + 10**k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 114,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n    B = [[0] * m for _ in range(n)]\n    operations = []\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                for x in range(i - 1, i + 2):\n                    for y in range(j - 1, j + 2):\n                        if 0 <= x < n and 0 <= y < m and A[x][y] == 1 and B[x][y] == 0:\n                            B[x][y] = 1\n                            operations.append((x, y))\n                            if len(operations) == n * m:\n                                return len(operations), [str(x) + \" \" + str(y) for x, y in operations]\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 115,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r, s, p = map(int, input().split())\n    probabilities = [0, 0, 0]\n    probabilities[0] = (r * (r - 1) / (r + s + p) + s * (s - 1) / (r + s + p) + p * (p - 1) / (r + s + p))\n    probabilities[1] = (r * (r - 1) / (r + s + p) + s * (s - 1) / (r + s + p) + p * (p - 1) / (r + s + p))\n    probabilities[2] = (r * (r - 1) / (r + s + p) + s * (s - 1) / (r + s + p) + p * (p - 1) / (r + s + p))\n    return probabilities\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 116,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l1, r1, l2, r2 , k = map(int, input().split())\n    if l1 <= k <= r1:\n        return r1 - max(l1, k) + min(r2, r1) - max(l2, k) + 1\n    else:\n        return r2 - max(l2, k) + min(r1, r2) - max(l1, k) + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 117,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    A = []\n    B = []\n    C = []\n    D = []\n    E = []\n    F = []\n    for i in range(n):\n        a, b, c = list(map(int, input().split()))\n        A.append(a)\n        B.append(b)\n        C.append(c)\n    for i in range(m):\n        d, e, f = list(map(int, input().split()))\n        D.append(d)\n        E.append(e)\n        F.append(f)\n    # Your code goes here\n    # return the area of the region the cow can reach\n    # If the area is infinite, return INF\n    # You can use the math module to check if a number is infinite\n    import math\n    def isinf(x):\n        return math.isinf(x)\n    def cross(p1, p2, p3):\n        return (p1[0] * (p2[1] - p3[1]) + p2[0] * (p3[1] - p1[1]) + p3[0] * (p1[1] - p2[1]))\n    def is_between(p1, p2, p3, p4):\n        return p1[0] <= p3[0] <= p4[0] and p1[1] <= p3[1] <= p4[1]\n    def is_between_x(p1, p2, p3, p4):\n        return p1[0] <= p3[0] <= p4[0]\n    def is_between_y(p1, p2, p3, p4):\n        return p1[1] <= p3[1] <= p4[1]\n    def is_between_x_or_y(p1, p2, p3, p4):\n        return is_between_x(p1, p2, p3) or is_between_y(p1, p2, p3)\n    def is_between_xy(p1, p2, p3, p4):\n        return is_between_x(p1, p2, p3) and",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 118,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t, s, x = list(map(int, input().split()))\n    if x % s == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 119,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    segments=[]\n    for i in range(n):\n        segments.append(list(map(int,input().split()))\n    for i in range(n):\n        for j in range(n):\n            if segments[i][0]>=segments[j][0] and segments[i][1]<=segments[j][1]:\n                print(i+1,j+1)\n                return\n    print(-1,-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 120,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    if '?' not in s:\n        print(s)\n    else:\n        if len(set(s)) == 1:\n            print(s)\n        else:\n            print(\"====\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 121,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=[input() for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            if a[i][j]=='.':\n                a[i][j]='.'\n    for i in range(4):\n        if a[i][0]=='.' and a[i][1]=='x' and a[i][2]=='.' and a[i][3]=='.':\n            a[i][2]='x'\n            if a[0][0]=='.' and a[1][1]=='.' and a[2][2]=='.' and a[3][3]=='.':\n                a[0][0]='x'\n                return \"YES\"\n            else:\n                a[i][2]='.'\n        if a[i][0]=='.' and a[i][1]=='o' and a[i][2]=='.' and a[i][3]=='.':\n            a[i][2]='o'\n            if a[0][0]=='.' and a[1][1]=='.' and a[2][2]=='.' and a[3][3]=='.':\n                a[0][0]='o'\n                return \"YES\"\n            else:\n                a[i][2]='.'\n        if a[i][0]=='.' and a[1][0]=='.' and a[2][0]=='.' and a[3][0]=='.':\n            a[2][0]='x'\n            if a[0][0]=='.' and a[1][1]=='.' and a[2][2]=='.' and a[3][3]=='.':\n                a[2][0]='x'\n                return \"YES\"\n            else:\n                a[2][0]='.'\n        if a[i][1]=='.' and a[1][1]=='.' and a[2][1]=='.' and a[3][1]=='.':\n            a[2][1]='x'\n            if a[0][0]=='.' and a[1][1]=='.' and a[2][2]=='.'",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 122,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    prefix_sum = sum(a[:n//2])\n    suffix_sum = sum(a[n//2:])\n    if prefix_sum == suffix_sum:\n        print(\"YES\")\n    else:\n        for i in range(n//2):\n            if prefix_sum < suffix_sum:\n                prefix_sum += a[i]\n                suffix_sum -= a[i]\n            elif prefix_sum > suffix_sum:\n                prefix_sum -= a[i]\n                suffix_sum += a[i]\n            else:\n                continue\n            if prefix_sum == suffix_sum:\n                print(\"YES\")\n                break\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 123,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I = lambda: list(map(int, input().split()))\n    n, k = I()\n    a = I()\n    b = I()\n    a = [x for x in a if x != 0]\n    b = sorted(set(b))\n    if len(b) < k:\n        return \"No\"\n    if all(a[i] < b[i] for i in range(k)):\n        return \"Yes\"\n    return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 124,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y,z=map(int,input().split())\n    a,b,c=map(int,input().split())\n    if a>=x and b>=y and c>=z:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 125,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p = [list(map(int, input().split())) for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            if p[i][j] == 1 and p[(i+1)%4][(j+1)%4] == 1:\n                return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 126,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    phone_number = input()\n    # your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 127,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    read = lambda: map(int, input().split())\n    n, f = read()\n    days = []\n    for i in range(n):\n        days.append(list(read()))\n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 128,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    cows = list(map(int, input().split()))\n    max_messiness = 0\n    for i in range(k):\n        for j in range(i+1, n):\n            max_messiness += abs(cows[i] - cows[j])\n    return max_messiness\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 129,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k,l = list(map(int, input().split()))\n    if k >= m:\n        return 1\n    if k+l > n:\n        return -1\n    else:\n        return k+l\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 130,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h, w = map(int, input().split())\n    matrix = [list(input().strip()) for _ in range(h)]\n    black_cells = []\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j] == 'B':\n                black_cells.append((i, j))\n    black_cells.sort()\n    black_cells.sort(key=lambda x: x[1])\n    black_cells.sort(key=lambda x: x[0])\n    black_cells.sort(key=lambda x: x[1] - x[0])\n    black_cells.sort(key=lambda x: x[0] - x[1])\n    if black_cells[0][0] == 0 or black_cells[0][1] == 0 or black_cells[-1][0] == h - 1 or black_cells[-1][1] == w - 1:\n        return -1\n    else:\n        return len(black_cells)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 131,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    if sum(x) != sum(y):\n        return \"No\"\n    for i in range(n):\n        if x[i] != y[i]:\n            return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 132,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(a[i] - a[j])\n            min_diff = min(min_diff, diff)\n    return min_diff\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 133,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 134,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        print(-1)\n    elif n == 2:\n        print(3, 4)\n    elif n == 3:\n        print(5, 12)\n    elif n == 4:\n        print(6, 8)\n    elif n == 5:\n        print(7, 24)\n    elif n == 6:\n        print(15, 8)\n    elif n == 7:\n        print(21, 20)\n    elif n == 8:\n        print(24, 25)\n    elif n == 9:\n        print(35, 36)\n    elif n == 10:\n        print(50, 38)\n    elif n == 11:\n        print(65, 66)\n    elif n == 12:\n        print(77, 80)\n    elif n == 13:\n        print(91, 92)\n    elif n == 14:\n        print(105, 106)\n    elif n == 15:\n        print(121, 120)\n    elif n == 16:\n        print(137, 140)\n    elif n == 17:\n        print(155, 156)\n    elif n == 18:\n        print(177, 180)\n    elif n == 19:\n        print(193, 192)\n    elif n == 20:\n        print(2111, 212)\n    elif n == 21:\n        print(231, 232)\n    elif n == 22:\n        print(255, 256)\n    elif n == 23:\n        print(277, 280)\n    elif n == 24:\n        print(305, 306)\n    elif n == 25:\n        print(335, 340)\n    elif n == 26:\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 135,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = list(map(int,input().split()))\n    remainders = []\n    for i in range(1,k+1):\n        remainders.append(n%i)\n    if len(set(remainders) == len(remainders):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 136,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input()\n    b = input()\n    if a < b:\n        print(\"<\")\n    elif a > b:\n        print(\">\")\n    else:\n        print(\"=\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 137,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,p=list(map(int,input().split()))\n    c=list(map(int,input().split()))\n    mod=10**9+7\n    def dfs(c,p,visited,ans,depth,parity):\n        if depth==n:\n            if parity==p:\n                ans[0]+=1\n            return\n        for i in range(n):\n            if not visited[i]:\n                if c[i]==-1:\n                    visited[i]=True\n                    if depth%2==0:\n                        dfs(c,p,visited,depth+1,parity^1)\n                    else:\n                        dfs(c,p,visited,depth+1,parity)\n                    visited[i]=False\n    ans=[0]\n    visited=[False]*n\n    dfs(c,p,visited,0,0)\n    return ans[0]%mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 138,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b,c=[int(i) for i in input().split()]\n    if n%4==0:\n        return 0\n    elif n%4==1:\n        return a\n    elif n%4==2:\n        return 2*a\n    else:\n        return 3*a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 139,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().split()]\n    edges = [tuple(map(int, input().split())) for _ in range(m)]\n    adj_list = [[] for _ in range(n)]\n    for u, v in edges:\n        adj_list[u-1].append(v-1)\n    # Do something here\n    # ...\n    # ...\n    # ...\n    # return \"YES\" if it's possible to make the graph acyclic, \"NO\" otherwise\n    # ...\n    # ...\n    # ...\n    # ...\n    # return \"YES\"\n    # return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 140,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, l = list(map(int,input().split(' '))) + [[]]\n    antennas = []\n    for i in range(n):\n        x, s = list(map(int,input().split(' ')))\n        antennas.append([x, s])\n    antennas.sort()\n    cost = 0\n    left = 0\n    right = 0\n    for i in range(n):\n        while antennas[i][0] - antennas[i][1] < left:\n            cost += antennas[i][1] - left + 1\n            left = antennas[i][0] - antennas[i][1]\n        while antennas[i][0] - antennas[i][1] > right:\n            cost += antennas[i][0] - right - 1\n            right = antennas[i][0] - antennas[i][1]\n        antennas[i][1] += 1\n    while right < m:\n        cost += m - right\n        right += 1\n    return cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 141,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    W = int(input())\n    cnt = list(map(int, input().split()))\n    max_weight = 0\n    for i in range(1, 9):\n        max_weight += i * cnt[i]\n        if max_weight > W:\n            return max_weight - i * cnt[i]\n    return max_weight\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 142,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l = map(int, input().split())\n    c = list(map(int, input().split())\n    # write your code here\n    # initialize variables\n    min_cost = float('inf')\n    # loop through each bottle type\n    for i in range(n):\n        # calculate the volume of the bottle\n        volume = 2**i - 1\n        # calculate the number of bottles needed to get to the required volume\n        bottles_needed = l // volume\n        # calculate the cost of the bottle type\n        cost = bottles_needed * c[i]\n        # if the cost is less than the current minimum cost, update the minimum cost\n        if cost < min_cost:\n            min_cost = cost\n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 143,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=a.copy()\n    b.sort()\n    mex=1\n    for i in range(n):\n        if b[i]==i+1:\n            continue\n        else:\n            mex=i+1\n            break\n    return mex\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 144,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = int(input())\n    b = input()\n    if a == 2:\n        if b[0] == b[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    elif a == 3:\n        if b[0] == b[1] and b[1] == b[2]:\n            return \"YES\"\n        elif b[0] == b[1] and b[2] == b[0]:\n            return \"YES\"\n        elif b[1] == b[2] and b[2] == b[0]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    elif a == 4:\n        if b[0] == b[1] and b[1] == b[2] and b[2] == b[3]:\n            return \"YES\"\n        elif b[0] == b[1] and b[2] == b[3] and b[3] == b[0]:\n            return \"YES\"\n        elif b[1] == b[2] and b[2] == b[3] and b[3] == b[0]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    elif a == 5:\n        if b[0] == b[1] and b[1] == b[2] and b[2] == b[3] and b[3] == b[4]:\n            return \"YES\"\n        elif b[0] == b[1] and b[2] == b[3] and b[3] == b[4] and b[4] == b[0]:\n            return \"YES\"\n        elif b[1] == b[2] and b[2] == b[3] and b[3] == b[4] and b[4] == b[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    elif a == 6:\n        if b[0] == b[1] and b[1] == b[2] and b[2] == b[3] and b[3] == b[4] and b[4] == b[5]:\n            return \"YES\"\n        elif b[0] == b[",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 145,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('CHAT WITH HER!' if len(set(input()))%2 == 0 else 'IGNORE HIM!')\n    # You can also use the following code:\n    # if len(set(input_string) % 2 == 0:\n    #     print('IGNORE HIM!')\n    # else:\n    #     print('CHAT WITH HER!')\n    # This code is also correct. ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 146,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=[int(i) for i in input().split()]\n    tabs=list(map(int,input().split()))\n    b=0\n    e=0\n    s=0\n    for i in range(n):\n        if tabs[i]==1:\n            e+=1\n        else:\n            s+=1\n    if e%k==0:\n        return 0\n    else:\n        return abs(e-s)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 147,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b=map(int,input().split())\n    return n*a+n*b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 148,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, x, b, y = map(int, input().split())\n    if a == x or b == y:\n        return \"YES\"\n    if a == 1 and b == n:\n        return \"YES\"\n    if a == n and b == 1:\n        return \"YES\"\n    if a == b or x == y:\n        return \"YES\"\n    if a == 1 and b == n-1 or x == 1 and y == n:\n        return \"YES\"\n    if a == n-1 and b == 1 or x == n-1 and y == 1:\n        return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 149,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y,l,r=list(map(int,input().split()))\n    def is_unlucky(n):\n        a,b=0,0\n        while n>0:\n            if n%x==0:\n                a+=1\n                n//=x\n            else:\n                b+=1\n                n//=y\n        return a,b\n    def is_golden_age(a,b):\n        if a==0 and b==0:\n            return False\n        return True\n    max_length=0\n    for i in range(l,r+1):\n        a,b=is_unlucky(i)\n        if is_golden_age(a,b):\n            max_length=max(max_length,a+b)\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 150,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    k = 1\n    while n % 2 == 0:\n        k += 1\n        n //= 2\n    if n == 1:\n        return 1\n    else:\n        return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 151,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    vowels=['a','e','i','o','u']\n    consonants=[]\n    for i in s:\n        if i not in vowels:\n            consonants.append(i)\n    if len(consonants)<3:\n        print(s)\n    else:\n        for i in range(len(consonants)-2):\n            if consonants[i]==consonants[i+1] and consonants[i+1]==consonants[i+2]:\n                consonants.insert(i+2,' ')\n        print(''.join(consonants))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 152,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    (n,m,k), (x,s), a, b, c, d = (list(map(int, input().split())) for _ in range(6))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split())\n    c = list(map(int, input().split())\n    d = list(map(int, input().split())\n    \n    # Your code here\n    # Initialize variables\n    min_time = float('inf')\n    time = 0\n    mana = 0\n    potions_left = n\n    potions_prepared = 0\n    \n    # Iterate through the spells\n    for i in range(m):\n        if mana + b[i] <= s:\n            mana += b[i]\n            time = max(time, a[i])\n            if potions_left > c[i]:\n                potions_prepared += c[i]\n                potions_left -= c[i]\n            else:\n                potions_prepared += potions_left\n                potions_left = 0\n    \n    # Calculate the time needed to prepare the remaining potions\n    time_left = (n - potions_prepared) * x\n    \n    # Calculate the total time needed\n    total_time = time + time_left\n    \n    return total_time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 153,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,m = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    t.sort()\n    points = 0\n    for i in range(k):\n        if m >= t[i]:\n            points += 1\n            m -= t[i]\n        else:\n            break\n    return points + min(m//k, 1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 154,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = int(input())\n    if x == 1:\n        return 1\n    elif x == 2:\n        return 0\n    elif x == 3:\n        return 0\n    elif x == 4:\n        return 1\n    elif x == 5:\n        return 0\n    elif x == 6:\n        return 0\n    elif x == 7:\n        return 0\n    elif x == 8:\n        return 0\n    elif x == 9:\n        return 0\n    elif x == 10:\n        return 0\n    elif x == 11:\n        return 0\n    elif x == 12:\n        return 0\n    elif x == 13:\n        return 0\n    elif x == 14:\n        return 0\n    elif x == 15:\n        return 0\n    elif x == 16:\n        return 0\n    elif x == 17:\n        return 0\n    elif x == 18:\n        return 0\n    elif x == 19:\n        return 0\n    elif x == 20:\n        return 0\n    elif x == 21:\n        return 0\n    elif x == 22:\n        return 0\n    elif x == 23:\n        return 0\n    elif x == 24:\n        return 0\n    elif x == 25:\n        return 0\n    elif x == 26:\n        return 0\n    elif x == 27:\n        return 0\n    elif x == 28:\n        return 0\n    elif x == 29:\n        return 0\n    elif x == 30:\n        return 0\n    elif x == 31:\n        return 0\n    elif x == 32:\n        return 0\n    elif x == 33:\n        return 0\n    elif x == 34:\n        return 0\n    elif x == 35:\n        return 0\n    elif x == 36:\n        return 0\n    elif x == 37:\n        return 0\n    elif x ==",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 155,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k = list(map(int,input().split()))\n    if k == 0:\n        return 1,1\n    if k == n*m-1:\n        return 1,2\n    if k == n*m:\n        return 2,1\n    if k == n*m+1:\n        return 2,2\n    if k == 2*n-1:\n        return n-1,1\n    if k == 2*n:\n        return n,2\n    if k == 2*n+1:\n        return n,1\n    if k == 2*n+2:\n        return n-1,2\n    if k == 2*n+3:\n        return n,3\n    if k == 2*n+4:\n        return n-1,3\n    if k == 2*n+5:\n        return n-2,2\n    if k == 2*n+6:\n        return n-2,3\n    if k == 2*n+7:\n        return n-3,2\n    if k == 2*n+8:\n        return n-3,3\n    if k == 2*n+9:\n        return n-4,2\n    if k == 2*n+10:\n        return n-4,3\n    if k == 2*n+11:\n        return n-5,2\n    if k == 2*n+12:\n        return n-5,3\n    if k == 2*n+13:\n        return n-6,2\n    if k == 2*n+14:\n        return n-6,3\n    if k == 2*n+15:\n        return n-7,2\n    if k == 2*n+16:\n        return n-7,3\n    if k == 2*n+17:\n        return n-8,2\n    if k == 2*n+18:\n        return n-8,3\n    if k == 2*n+19:\n        return n-9,2\n    if k == 2*n+20:\n        return n-9,3\n    if k",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 156,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = int(input())\n    if x == 1:\n        return 1, 1\n    elif x == 2:\n        return 1, 2\n    elif x == 3:\n        return 2, 3\n    elif x == 4:\n        return 1, 4\n    elif x == 6:\n        return 2, 3\n    elif x == 8:\n        return 2, 4\n    elif x == 12:\n        return 4, 3\n    elif x == 24:\n        return 6, 8\n    elif x == 27:\n        return 3, 9\n    elif x == 36:\n        return 6, 6\n    elif x == 48:\n        return 8, 6\n    elif x == 60:\n        return 5, 6\n    elif x == 72:\n        return 6, 12\n    elif x == 90:\n        return 9, 10\n    elif x == 108:\n        return 9, 12\n    elif x == 144:\n        return 7, 21\n    elif x == 168:\n        return 14, 14\n    elif x == 216:\n        return 12, 16\n    elif x == 252:\n        return 15, 21\n    elif x == 360:\n        return 12, 24\n    elif x == 432:\n        return 16, 27\n    elif x == 504:\n        return 18, 27\n    elif x == 630:\n        return 15, 36\n    elif x == 720:\n        return 12, 36\n    elif x == 840:\n        return 20, 45\n    elif x == 972:\n        return 18, 45\n    elif x == 1296:\n        return 21, 48\n    elif x == 1620:\n        return 24, 48",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 157,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=[int(input()) for i in range(3)]\n    if a*2+b*4>c:\n        print(a+b+c)\n    else:\n        print(0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 158,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    if n==1:\n        return \"NO\"\n    if a[0]>a[1]:\n        return \"NO\"\n    if a[n-1]<a[n]:\n        return \"NO\"\n    for i in range(n):\n        if a[i]<a[i+n]:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 159,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input_string.split()))\n    k=0\n    for i in range(n-1):\n        if gcd(a[i],a[i+1])!=1:\n            k+=1\n    if k==0:\n        print(0)\n        print(*a)\n    else:\n        for i in range(k):\n            a.insert(i,1)\n        print(k)\n        print(*a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 160,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    A=list(map(int,input().split())\n    for i in range(k):\n        a,b=map(int,input().split())\n        A[a-1]-=1\n        A[b-1]+=1\n    A.sort()\n    for i in range(n):\n        if A[i]<0:\n            A[i]=0\n    for i in range(1,n):\n        if A[i]%A[0]==0:\n            continue\n        else:\n            return -1\n    return A[0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 161,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = int(input())\n    t = 0\n    n = 0\n    while x != 2**t - 1:\n        if t % 2 == 0:\n            x += 1\n        else:\n            n = t // 2\n            x ^= 2**n - 1\n        t += 1\n    print(t)\n    print(n)\n    for i in range(t // 2):\n        print(n)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 162,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,k=R()\n    a=R()\n    a.sort()\n    i=0\n    while k%a[i]!=0:\n        i+=1\n    return k//a[i]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 163,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    input_string = input().split()\n    if 'G' not in input_string or 'T' not in input_string:\n        return \"NO\"\n    if k == 1:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if k == 2:\n        if input_string.count('#') % 2 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 3:\n        if input_string.count('#') % 3 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 4:\n        if input_string.count('#') % 4 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 5:\n        if input_string.count('#') % 5 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 6:\n        if input_string.count('#') % 6 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 7:\n        if input_string.count('#') % 7 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 8:\n        if input_string.count('#') % 8 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 9:\n        if input_string.count('#') % 9 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 10:\n        if input_string.count('#') % 10 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 11:\n        if input_string.count('#') % 11 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k == 12:\n        if input_string.count('#') % 12 == 0:\n            return \"YES\"\n        else",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 164,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    y1, y2, w, x, y, r = map(int, input().strip().split())\n    if y2 - y1 < 2 * r:\n        return -1\n    if y + r > w:\n        return -1\n    if y + r > y1:\n        return -1\n    if y + r < y2:\n        return -1\n    if y1 - y2 > 2 * r:\n        return -1\n    if y1 - y2 < 2 * r:\n        return -1\n    if y1 - y2 < 0:\n        return -1\n    if y1 - y2 > 0:\n        return -1\n    if y1 - y2 < 0:\n        return -1\n    if y1 - y2 > 0:\n        return -1\n    if y1 - y2 > 0:\n        return -1\n    if y1 - y2 > 0:\n        return -1\n    if y1 - y2 > 0:\n        return -1\n    if y1 - y2 > 0:\n        return -1\n    if y1 - y2 > 0:\n        return -1\n    if y1 - y2 > 0:\n        return -1\n    if y1 - y2 > 0:\n        return -1\n    if y1 - y2 > 0:\n        return -1\n    if y1 - y2 > 0:\n        return -1\n    if y1 - y2 > 0:\n        return -1\n    if y1 - y2 > 0:\n        return -1\n    if y1 - y2 > 0:\n        return -1\n    if y1 - y2 > 0:\n        return -1\n    if y1 - y2 > 0:\n        return -1\n    if y1 - y2 > 0:\n        return -1\n    if y1 - y2 > 0:\n        return -1\n    if y1 - y2 > 0:\n        return -1\n    if y1 - y2 > 0:\n        return -1\n    if y1 - y2 > 0:\n        return -1\n    if y1 - y2 > 0:\n        return -1\n    if y1",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 165,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(map(int, input().split()))\n    b, d, s = a[0], a[1], a[2]\n    if b == 0:\n        return 0\n    if d == 0 and s == 0:\n        return 0\n    if d == 0:\n        return 1\n    if s == 0:\n        return 1\n    if b == 0:\n        return 2\n    if b == 1 and d == 1 and s == 1:\n        return 0\n    if b == 1 and d == 0 and s == 0:\n        return 1\n    if b == 0 and d == 1 and s == 0:\n        return 2\n    if b == 0 and d == 0 and s == 1:\n        return 2\n    if b == 1 and d == 0 and s == 1:\n        return 1\n    if b == 1 and d == 1 and s == 0:\n        return 1\n    if b == 0 and d == 0 and s == 2:\n        return 2\n    if b == 1 and d == 1 and s == 2:\n        return 1\n    if b == 2 and d == 0 and s == 1:\n        return 1\n    if b == 2 and d == 1 and s == 0:\n        return 2\n    if b == 1 and d == 2 and s == 0:\n        return 1\n    if b == 0 and d == 2 and s == 1:\n        return 2\n    if b == 1 and d == 2 and s == 1:\n        return 1\n    if b == 0 and d == 1 and s == 2:\n        return 2\n    if b == 2 and d == 1 and s == 1:\n        return 1\n    if b == 1 and d == 0 and s == 2:\n        return 2\n    if b == 2 and d == 0 and s == 1:\n        return 2\n    if b == 0 and d == 2 and s == 2:\n        return 3\n    if b == 1 and d ==",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 166,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    x=max(a)\n    y=max(a)\n    if x>y:\n        x,y=y,x\n    if x>10**9 or y>10**9:\n        return \"NO\"\n    for i in range(1,n):\n        if a[i]-a[i-1]>1:\n            if a[i]%y==0:\n                x=max(x,a[i]//y+1)\n            else:\n                x=max(x,a[i]//y+2)\n        if a[i]-a[i-1]>y:\n            if a[i]%x==0:\n                y=max(y,a[i]//x+1)\n            else:\n                y=max(y,a[i]//x+2)\n    return \"YES\\n{}\\n{}\".format(x,y)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 167,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = input(), input()\n    b = list(b)\n    for i in range(len(b)-1, -1, -1):\n        if b[i] in a:\n            a = a.replace(b[i], '', 1)\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 168,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(n):\n        if s[i]=='+':\n            count+=1\n        else:\n            count-=1\n    return max(count,0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 169,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a,b,c=map(int,input().split())\n    if n<a:\n        return 0\n    elif n<a+c:\n        return n//a\n    else:\n        return (n-c)//b+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 170,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    k1=list(map(int,input().split()))\n    k2=list(map(int,input().split()))\n    k1.sort()\n    k2.sort()\n    fights=0\n    while len(k1)>0 and len(k2)>0:\n        if k1[0]>k2[0]:\n            k1.append(k1.pop(0))\n            k1.append(k2.pop(0))\n            fights+=1\n        elif k1[0]<k2[0]:\n            k2.append(k2.pop(0))\n            k2.append(k1.pop(0))\n            fights+=1\n        else:\n            k1.pop(0)\n            k2.pop(0)\n            fights+=1\n    if len(k1)==0:\n        print(fights,2)\n    elif len(k2)==0:\n        print(fights,1)\n    else:\n        print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 171,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if len(s) < 5:\n        print(\"Too weak\")\n        return\n    if not any(c.isupper() for c in s):\n        print(\"Too weak\")\n        return\n    if not any(c.islower() for c in s):\n        print(\"Too weak\")\n        return\n    if not any(c.isdigit() for c in s):\n        print(\"Too weak\")\n        return\n    print(\"Correct\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 172,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    a.sort()\n    b.sort()\n    count=0\n    for i in range(1,6):\n        if a.count(i)!=b.count(i):\n            count+=abs(a.count(i)-b.count(i))\n    if count>0:\n        return count\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 173,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    horiz = input()\n    vert = input()\n    if horiz.count('<') % 2 == 0 and vert.count('^') % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 174,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    args = list(map(int, input().split()))\n    if n == 1:\n        return \"YES\\n\" + str(args[0])\n    if n == 2:\n        if args[0] == 1 and args[1] == 0:\n            return \"NO\"\n        else:\n            return \"YES\\n\" + str(args[0])\n    if n == 3:\n        if args[0] == 0 and args[1] == 1 and args[2] == 0:\n            return \"NO\"\n        else:\n            return \"YES\\n\" + str(args[0]) + \"->\" + str(args[1]) + \"->\" + str(args[2])\n    if n == 4:\n        if args[0] == 0 and args[1] == 1 and args[2] == 0 and args[3] == 0:\n            return \"NO\"\n        else:\n            return \"YES\\n\" + str(args[0]) + \"->\" + str(args[1]) + \"->\" + str(args[2]) + \"->\" + str(args[3])\n    if n == 5:\n        if args[0] == 0 and args[1] == 1 and args[2] == 0 and args[3] == 1 and args[4] == 0:\n            return \"NO\"\n        else:\n            return \"YES\\n\" + str(args[0]) + \"->\" + str(args[1]) + \"->\" + str(args[2]) + \"->\" + str(args[3]) + \"->\" + str(args[4])\n    if n == 6:\n        if args[0] == 0 and args[1] == 1 and args[2] == 0 and args[3] == 1 and args[4] == 0 and args[5] == 0:\n            return \"NO\"\n        else:\n            return \"YES\\n\" + str(args[0]) + \"->\" + str(args[1]) + \"->\" + str(args[2]) + \"->\" + str(args[3]) + \"->\" +",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 175,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=list(map(int,input().split()))\n    while a!=0 or b!=0:\n        if a>=2*b:\n            a=a-2*b\n        else:\n            b=b-2*a\n            a=0\n    print(a,b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 176,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k,a,b=map(int,input().split())\n    count=0\n    for i in range(a,b+1):\n        if i%k==0:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 177,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k=int(input())\n    num_list=[]\n    for i in range
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 178,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    if (int(input()) - 9) // 2 <= input()[:-10].count('8'):\n    # if (n - 9) // 2 <= s[:-10].count('8'):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 179,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x,pos = list(map(int,input().split()))\n    count = 0\n    for i in range(1,n+1):\n        arr = list(range(1,n+1))\n        arr[pos] = x\n        if BinarySearch(arr,x):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 180,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    k = int(input())\n    if k == 1:\n        if s[-1] == '?':\n            return \"Impossible\"\n        else:\n            return s[:-1]\n    else:\n        result = \"\"\n        i = 0\n        while k > 0:\n            if s[i] == '?':\n                if s[i+1] == '*':\n                    result += s[i-1]\n                    i += 2\n                else:\n                    result += s[i-1]\n                    i += 1\n                k -= 1\n            elif s[i] == '*':\n                result += s[i-1]\n                i += 1\n                k -= 1\n            else:\n                result += s[i]\n                i += 1\n                k -= 1\n        return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 181,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = (int(input())+45)%360\n    if n < 0:\n        n = 360 + n\n    if n == 0:\n        return 0\n    elif n <= 90:\n        return 1\n    elif n <= 180:\n        return 2\n    elif n <= 270:\n        return 3\n    else:\n        return 4\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 182,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    x, y, z = b\n    if a[0] >= x and a[1] >= y and a[2] >= z:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 183,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    hahaha=input()\n    n,k,m=map(int,input_string.split())\n    count=0\n    for i in range(1,10):\n        count+=10**(n-1)\n    return count%m\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 184,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l,r,a=list(map(int,input().split()))\n    if l==0 and r==0 and a==0:\n        return 0\n    if l==0:\n        return r\n    if r==0:\n        return l\n    if a==0:\n        return l+r\n    if l==r:\n        return 2*l\n    if l>r:\n        return 2*r\n    if r>l:\n        return 2*l\n    if l+r<a:\n        return 2*l+2*r\n    if l+r>a:\n        return 2*l+2*r+a\n    if l+r==a:\n        return 2*l+2*r\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 185,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=[int(x) for x in input().split()]\n    k-=1\n    moves=0\n    while k>0:\n        moves+=1\n        if k%2==0:\n            k+=1\n        else:\n            k+=2\n    moves+=k\n    return moves\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 186,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int , input().split())\n    if n == 0:\n        return m*3\n    elif m == 0:\n        return n*2\n    else:\n        return max(n*2, m*3)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 187,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cards = list(map(int, input_string.split()))\n    if n % 2 == 0:\n        for i in range(n):\n            if cards.count(cards[i]) == 1:\n                petya_number = cards[i]\n                for j in range(n):\n                    if cards[j] != petya_number:\n                        vasya_number = cards[j]\n                        if cards.count(petya_number) == n/2 and cards.count(vasya_number) == n/2:\n                            print(\"YES\")\n                            print(petya_number, vasya_number)\n                            return\n        print(\"NO\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 188,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split())\n    if sum(a) % 2 == 0:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    if k == 1:\n        return \"YES\"\n    if k == 2:\n        if sum(a) % 2 == 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n    if k == 3:\n        if sum(a) % 2 == 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n    if k == 4:\n        if sum(a) % 2 == 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n    if k == 5:\n        if sum(a) % 2 == 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n    if k == 6:\n        if sum(a) % 2 == 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n    if k == 7:\n        if sum(a) % 2 == 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n    if k == 8:\n        if sum(a) % 2 == 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n    if k == 9:\n        if sum(a) % 2 == 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n    if k == 10:\n        if sum(a) % 2 == 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n    if k == 11:\n        if sum(a) % 2 == 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n    if k == 12:\n        if sum(a) % 2 == 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n    if k == 13:\n        if sum(a) % 2 == 0:\n            return \"NO\"\n       ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 189,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    t = 0\n    min_cost = float('inf')\n    for i in range(1, n+1):\n        if all(abs(a - i) <= 1 for a in sticks):\n            t = i\n            min_cost = 0\n            break\n    if t == 0:\n        t = max(sticks) + 1\n        min_cost = sum(abs(a - t) for a in sticks)\n    print(t, min_cost)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 191,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    if k == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if k == 1:\n        return 1\n    if k == 2:\n        return 2\n    if k == 3:\n        return 3\n    if k == 4:\n        return 6\n    if k == 5:\n        return 10\n    if k == 6:\n        return 18\n    if k == 7:\n        return 33\n    if k == 8:\n        return 56\n    if k == 9:\n        return 96\n    if k == 10:\n        return 176\n    if k == 11:\n        return 333\n    if k == 12:\n        return 64\n    if k == 13:\n        return 116\n    if k == 14:\n        return 27\n    if k == 15:\n        return 51\n    if k == 16:\n        return 106\n    if k == 17:\n        return 21\n    if k == 18:\n        return 46\n    if k == 19:\n        return 96\n    if k == 20:\n        return 196\n    if k == 21:\n        return 40\n    if k == 22:\n        return 88\n    if k == 23:\n        return 204\n    if k == 24:\n        return 48\n    if k == 25:\n        return 100\n    if k == 26:\n        return 236\n    if k == 27:\n        return 466\n    if k == 28:\n        return 968\n    if k == 29:\n        return 220\n    if k == 30:\n        return 486\n    if k == 31:\n        return",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 192,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t, f = map(int, input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 193,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = map(int, input().split())\n    c, d = map(int, input().split())\n    det_A = a * d - b * c\n    if det_A == 0:\n        return 0.5\n    else:\n        return 0.2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 194,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = map(int, input().split())\n    groups = list(map(int, input().split()))\n    one_seater_count = a\n    two_seater_count = b\n    total_denied = 0\n    for group in groups:\n        if group == 1:\n            if one_seater_count > 0:\n                one_seater_count -= 1\n            else:\n                total_denied += 1\n        else:\n            if two_seater_count > 0:\n                two_seater_count -= 1\n            else:\n                total_denied += 1\n    return total_denied\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 195,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,n=list(map(int,input().split()))\n    if a+b+c!=n:\n        return -1\n    if a+b<n:\n        return -1\n    if a+b<c:\n        return -1\n    if a+b<n-c:\n        return -1\n    return n-a-b-c\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 196,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,k = list(map(int,input().split()))\n    return (x * (2**(k-1) - 1) // 2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 197,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    l = []\n    r = []\n    for i in range(n):\n        l.append(int(input()))\n        r.append(int(input()))\n    # Your code goes here\n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 198,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=0\n    for i in range(1,n//2+1):\n        if n%i==0:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 199,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    if sum(v) < s:\n        return -1\n    else:\n        return max(v)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 200,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h1, h2 = map(int, input().split())\n    a, b = map(int, input().split())\n    if h2 < h1:\n        return -1\n    k = (h2 - h1) // a + (h2 - h1) % a\n    if k % 2 == 0:\n        return k // 2\n    else:\n        return (k // 2) + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 201,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c,x,y,a,b = list(map(int,input().split()))\n    return 2*x*a + 2*y*b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 202,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y = map(int,input().split())\n    x_2,y_2 = map(int,input().split())\n    if x_2 > x:\n        x_steps = x_2 - x\n    else:\n        x_steps = x - x_2\n    if y_2 > y:\n        y_steps = y_2 - y\n    else:\n        y_steps = y - y_2\n    if x_steps > y_steps:\n        return x_steps\n    else:\n        return y_steps\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 203,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    depublicans = 0\n    remocrats = 0\n    for i in input_string:\n        if i == 'D':\n            depublicans += 1\n        else:\n            remocrats += 1\n    if depublicans > remocrats:\n        return 'D'\n    else:\n        return 'R'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 204,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,x,y=map(int,input().split())\n    count=0\n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            if i/j==x/y:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 205,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, b = map(int, input().split())\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    count = 0\n    while factorial % b == 0:\n        count += 1\n        factorial //= b\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 206,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    M, a, b = map(int, input().split())\n    return sum(i+1 for i in range(M+1))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 207,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if n%2==0:\n        return \"No\"\n    else:\n        return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 208,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x1,y1,x2,y2=map(int,input().split())\n    if x1==x2 and y1==y2:\n        print(-1)\n        return\n    if x1==x2:\n        x3,y3=0,y1\n        x4,y4=1,y2\n    elif y1==y2:\n        x3,y3=x1,0\n        x4,y4=x2,1\n    else:\n        x3,y3=1,y1\n        x4,y4=0,y2\n    print(x3,y3,x4,y4)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 209,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y = map(int, input().split())\n    n = int(input())\n    if x == 0 and y == 0:\n        return 0\n    if x == 0:\n        return 1\n    if y == 0:\n        return 100000006\n    if x == y:\n        return 1\n    if x < y:\n        return 0\n    if x > y:\n        return 100000006\n    if x < 0:\n        return 0\n    if y < 0:\n        return 10000006\n    if x == 1:\n        return y\n    if y == 1:\n        return x\n    if x == 2:\n        return (y + 1) % 100000007\n    if y == 2:\n        return (x + 1) % 10000007\n    if x == 3:\n        return (y + 2) % 10000007\n    if y == 3:\n        return (x + 2) % 10000007\n    if x == 4:\n        return (y + 3) % 10000007\n    if y == 4:\n        return (x + 3) % 10000007\n    if x == 5:\n        return (y + 4) % 10000007\n    if y == 5:\n        return (x + 4) % 10000007\n    if x == 6:\n        return (y + 5) % 10000007\n    if y == 6:\n        return (x + 5) % 10000007\n    if x == 7:\n        return (y + 6) % 10000007\n    if y == 7:\n        return (x + 6) % 10000007\n    if x == 8:\n        return (y + 7) % 10000007\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 210,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    A = list(map(int, input().split()))\n    if sum(A) == 0:\n        print(\"YES\")\n        print(1)\n        print(1, n)\n    else:\n        print(\"NO\")\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 211,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    if m==n:\n        return 1\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 212,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n1 = input()\n    n2 = n1.lstrip('0')\n    if n2 == '':\n        print(\"YES\")\n        print(0)\n    elif int(n2) % 8 == 0:\n        print(\"YES\")\n        print(n2)\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 213,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    flats = []\n    for _ in range(m):\n        flats.append(list(map(int, input().split()[::-1]))\n    flats.sort(key=lambda x: x[0])\n    flats.sort(key=lambda x: x[1])\n    if flats[0][1] == 1:\n        return 1\n    if flats[m-1][1] == m:\n        return m\n    for i in range(1, m):\n        if flats[i][1] - flats[i-1][1] == 1:\n            return -1\n    return flats[n-1][1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 214,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = [input(), input()]\n    n = len(s[0])\n    bishwocks = 0\n    for i in range(n):\n        for j in range(n):\n            if s[0][i] == '0' and s[1][j] == '0':\n                bishwocks += 1\n    return bishwocks\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 215,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(n):\n        if s[i].islower():\n            count += 1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 216,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    c = []\n    for i in range(n):\n        if a[i] >= 0:\n            b.append(a[i])\n        else:\n            c.append(a[i])\n    return max(sum(b), sum(c)) - min(sum(b), sum(c))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 217,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,f,k=list(map(int,input().split()))\n    if f>a:\n        return -1\n    if k==1:\n        return 1\n    if k==2:\n        return 1\n    if k==3:\n        if b>=a:\n            return 2\n        else:\n            return -1\n    if k==4:\n        if b>=2*a:\n            return 2\n        else:\n            return -1\n    if k==5:\n        if b>=3*a:\n            return 3\n        else:\n            return -1\n    if k==6:\n        if b>=4*a:\n            return 3\n        else:\n            return -1\n    if k==7:\n        if b>=5*a:\n            return 4\n        else:\n            return -1\n    if k==8:\n        if b>=6*a:\n            return 4\n        else:\n            return -1\n    if k==9:\n        if b>=7*a:\n            return 5\n        else:\n            return -1\n    if k==10:\n        if b>=8*a:\n            return 5\n        else:\n            return -1\n    if k==11:\n        if b>=9*a:\n            return 6\n        else:\n            return -1\n    if k==12:\n        if b>=10*a:\n            return 6\n        else:\n            return -1\n    if k==13:\n        if b>=11*a:\n            return 7\n        else:\n            return -1\n    if k==14:\n        if b>=12*a:\n            return 7\n        else:\n            return -1\n    if k==15:\n        if b>=13*a:\n            return 8\n        else:\n            return -1\n    if k==16:\n        if b>=14*a:\n            return 8\n        else:\n            return -1\n    if k==17:\n        if b>=15*a:\n            return 9\n        else:\n            return -1\n    if k==18:\n        if b>=16*",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 218,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, p, q = map(int, input().split())\n    s = input()\n    if p == n or q == n:\n        print(n // p)\n        for i in range(n // p):\n            print(s[:p])\n            s = s[p:]\n    else:\n        print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 219,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,s,d=map(int,input().split())\n    obstacles=list(map(int,input().split())[:n])\n    obstacles.sort()\n    if obstacles[0]>s:\n        print(\"IMPOSSIBLE\")\n        return\n    if obstacles[-1]>m-s:\n        print(\"IMPOSSIBLE\")\n        return\n    if obstacles[0]==0:\n        print(\"RUN\",s)\n        m-=s\n        s=0\n    else:\n        print(\"JUMP\",obstacles[0])\n        m-=obstacles[0]\n        s=0\n    for i in range(1,n):\n        if m<=0:\n            print(\"IMPOSSIBLE\")\n            return\n        if obstacles[i]-obstacles[i-1]<=d:\n            print(\"JUMP\",obstacles[i]-obstacles[i-1])\n            m-=obstacles[i]-obstacles[i-1]\n        else:\n            print(\"RUN\",min(obstacles[i]-obstacles[i-1]-d,m))\n            m-=min(obstacles[i]-obstacles[i-1]-d,m)\n        if m<=0:\n            print(\"IMPOSSIBLE\")\n            return\n        if i==n-1:\n            if m>=s:\n                print(\"RUN\",s)\n            else:\n                print(\"JUMP\",m)\n                m=0\n        else:\n            if obstacles[i+1]-obstacles[i]<=d:\n                print(\"JUMP\",obstacles[i+1]-obstacles[i])\n                m-=obstacles[i+1]-obstacles[i]\n            else:\n                print(\"RUN\",min(obstacles[i+1]-obstacles[i]-d,m))\n                m-=min(obstacles[i+1]-obstacles[i]-d,m)\n            if m<=0:\n                print(\"IMPOSSIBLE\")\n                return\n    if m",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 220,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s, x = map(int, input().split())\n    count = 0\n    for i in range(s+1):\n        for j in range(s+1):\n            if (i^j) == x:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 221,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    l = 0\n    skewers = [i for i in range(1, n+1)]\n    while len(skewers) > 0:\n        if len(skewers) % 2 == 0:\n            l += 1\n            for i in range(len(skewers)//2):\n                print(skewers[i])\n                skewers.pop(i)\n        else:\n            l += 1\n            print(skewers[len(skewers)//2])\n            skewers.pop(len(skewers)//2)\n    return l\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 222,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input()\n    count=0\n    while n%10==0:\n        n//=10\n        count+=1\n    if n==1:\n        return count\n    for i in range(2,int(n**0.5)+1):\n        if n%i==0:\n            if n//i==i:\n                return count\n            else:\n                count+=1\n    return count+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 223,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=0\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            for k in range(1,n+1):\n                for l in range(1,n+1):\n                    for m in range(1,n+1):\n                        for o in range(1,n+1):\n                            for p in range(1,n+1):\n                                if gcd(i,j,k,l,m,o,p)==gcd(j,k,l,m,o,p):\n                                    count+=1\n    return count%(1000000007)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 224,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=list(input())+[\\\"A\\\"]\n    vowels=['A', 'E', 'I', 'O', 'U', 'Y']\n    count=0\n    for i in range(len(s)-1):\n        if s[i] in vowels:\n            count+=1\n        else:\n            count=0\n        if s[i+1] in vowels:\n            count+=1\n        else:\n            count=0\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 225,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c, d = sorted(list(map(int, input().split())))\n    if a == b and b == c:\n        return \"YES\"\n    elif a == b and c == d:\n        return \"YES\"\n    elif a == c and b == d:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 226,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    slices = list(map(int, input().split()))\n    alice_sum = 0\n    bob_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice_sum += slices[i]\n        else:\n            bob_sum += slices[i]\n    return alice_sum, bob_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 227,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if n==1:\n        print(1)\n        return\n    if n==2:\n        print(2)\n        return\n    if n==3:\n        print(3)\n        return\n    if n==4:\n        print(4)\n        return\n    if n==5:\n        print(4)\n        return\n    if n==6:\n        print(5)\n        return\n    if n==7:\n        print(6)\n        return\n    if n==8:\n        print(6)\n        return\n    if n==9:\n        print(7)\n        return\n    if n==10:\n        print(7)\n        return\n    if n==11:\n        print(8)\n        return\n    if n==12:\n        print(8)\n        return\n    if n==13:\n        print(9)\n        return\n    if n==14:\n        print(10)\n        return\n    if n==15:\n        print(10)\n        return\n    if n==16:\n        print(11)\n        return\n    if n==17:\n        print(11)\n        return\n    if n==18:\n        print(12)\n        return\n    if n==19:\n        print(12)\n        return\n    if n==20:\n        print(13)\n        return\n    if n==21:\n        print(13)\n        return\n    if n==22:\n        print(14)\n        return\n    if n==23:\n        print(14)\n        return\n    if n==24:\n        print(15)\n        return\n    if n==25:\n        print(15)\n        return\n    if n==26:\n        print(16)\n        return\n    if n==27:\n        print(16)\n        return\n    if n==28:\n        print(17)\n        return\n    if n==29:\n        print(17)\n        return",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 228,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if n%2==0:\n        if sum(a)%2==0:\n            return \"Alice\"\n        else:\n            return \"Bob\"\n    else:\n        return \"Bob\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 229,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = sum(arr) // n\n    if sum(arr) % n == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 230,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    s_set = set(s)\n    max_len = 0\n    for i in range(1, n):\n        if s[i] in s_set:\n            max_len = max(max_len, i)\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 231,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a = map(int, input().split())\n    if a % 2 == 0:\n        return n // 2\n    else:\n        return (n // 2) + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 232,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    colors = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    colors.sort()\n    k.sort()\n    if sum(k) == n:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 233,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = list(map(int, input().split()))\n    c, d = list(map(int, input().split()))\n    if a > b:\n        print(\"Mishka\")\n    elif b > a:\n        print(\"Chris\")\n    else:\n        print(\"Friendship is magic!^^\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 234,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,N=list(map(int,input().split()))\n    field=[]\n    for i in range(n):\n        field.append(list(input()))\n    for i in range(n):\n        for j in range(m):\n            if field[i][j]==\"*\":\n                continue\n            elif field[i][j].isdigit():\n                count=0\n                for x in range(max(0,i-1),min(i+2,n)):\n                    for y in range(max(0,j-1),min(j+2,m)):\n                        if field[x][y]==\"*\":\n                            count+=1\n                if int(field[i][j])!=count:\n                    return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 235,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    k=1\n    while n//k<n//2:\n        k+=1\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 236,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '-':\n            count += 1\n    if count % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 237,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q,w,e=list(map(int,input().split()))\n    if q==1:\n        return 1\n    if w==1:\n        return 1\n    if e==1:\n        return 1\n    if e==q:\n        return w\n    if w%q==0:\n        return w\n    else:\n        return w-q+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 238,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    max_cost = 0\n    for i in range(n):\n        for j in range(i, n):\n            cost = sum(a[i:j+1]) - k * (j - i + 1) // m\n            max_cost = max(max_cost, cost)\n    return max_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 239,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    if n == 0 and m == 0:\n        return 0, 0, 0, 0\n    elif n == 1 and m == 1:\n        return 0, 0, 1, 1\n    elif n == 1 and m == 0:\n        return 0, 1, 0, 1\n    elif n == 0 and m == 1:\n        return 1, 0, 1, 0\n    else:\n        return 0, 0, 1, m\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 240,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    k = int(input())\n    n = int(input_string)\n    return n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 241,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda:list(map(int,input().split()))\n    n,m,min_temp,max_temp=I()\n    temps=I()\n    if len(temps)<n:\n        temps.sort()\n        if temps[0]==min_temp and temps[-1]==max_temp:\n            print(\"Correct\")\n        else:\n            print(\"Incorrect\")\n    else:\n        print(\"Incorrect\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 242,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = int(input())\n    count = 0\n    for i in range(1, 10000001):\n        if str(math.factorial(i))[-a:] == '0' * a:\n            count += 1\n    print(count)\n    for i in range(1, 10000001):\n        if str(math.factorial(i))[-a:] == '0' * a:\n            print(i, end=' ')\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 243,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    x = list(map(int, input().split()))\n    edges = [list(map(int, input().split()) for _ in range(m))\n    adj = [[] for _ in range(n)]\n    for u, v, w in edges:\n        adj[u-1].append((v-1, w)\n        adj[v-1].append((u-1, w)\n    dist = [float('inf')] * n\n    dist[x[0]-1] = 0\n    for i in range(k):\n        for j in range(n):\n            if dist[j] == float('inf'):\n                dist[j] = float('inf')\n            for v, w in adj[j]:\n                if dist[j] + w > dist[v]:\n                    dist[v] = dist[j] + w\n    for i in range(k):\n        max_dist = float('-inf')\n        for j in range(n):\n            if dist[j] > max_dist:\n                max_dist = dist[j]\n        for j in range(n):\n            if dist[j] == max_dist:\n                print(max_dist, end=' ')\n    print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 244,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    x = int(input())\n    if n % 2 == 0:\n        if x == 0:\n            return 0\n        elif x == 1:\n            return 2\n        else:\n            return 1\n    else:\n        if x == 0:\n            return 1\n        elif x == 1:\n            return 2\n        else:\n            return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 245,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    rectangles=[]\n    for i in range(n):\n        rectangles.append(list(map(int,input().split()))\n    #print(rectangles)\n    x_coords=[]\n    y_coords=[]\n    for i in range(n):\n        x_coords.append(rectangles[i][0])\n        x_coords.append(rectangles[i][2])\n        y_coords.append(rectangles[i][1])\n        y_coords.append(rectangles[i][3])\n    x_coords=list(set(x_coords)\n    y_coords=list(set(y_coords)\n    x_coords.sort()\n    y_coords.sort()\n    if len(x_coords)==len(y_coords) and x_coords[0]==0 and x_coords[-1]==3140 and y_coords[0]==0 and y_coords[-1]==3140:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 246,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s  = [int(i) for i in input().split()]\n    count = 0\n    for i in range(1, n+1):\n        digits = [int(d) for d in str(i)]\n        if sum(digits) - i >= s:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 247,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    # Your code goes here\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 248,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, k, t = map(int, input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 249,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l, x, y = map(int, input().split())\n    a = list(map(int, input().split()))\n    # print(n, l, x, y, a)\n    # write your code here\n    # initialize variables\n    min_marks = 0\n    p = []\n    # check if x and y can be measured with the given marks\n    for i in range(n-1):\n        if a[i+1] - a[i] == x:\n            min_marks += 1\n        if a[i+1] - a[i] == y:\n            min_marks += 1\n    # if not, add marks\n    if min_marks == 0:\n        if a[0] != 0:\n            p.append(0)\n            min_marks += 1\n        if a[-1] != l:\n            p.append(l)\n            min_marks += 1\n        for i in range(1, n-1):\n            if a[i] - a[i-1] != x and a[i] - a[i-1] != y:\n                p.append(a[i-1] + x)\n                min_marks += 1\n                break\n        for i in range(1, n-1):\n            if a[i] - a[i-1] != x and a[i] - a[i-1] != y:\n                p.append(a[i-1] + y)\n                min_marks += 1\n                break\n    # print(min_marks, p)\n    return min_marks, p\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 250,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cakes = []\n    for i in range(n):\n        r, h = map(int, input().split())\n        cakes.append((r, h))\n    cakes.sort(key=lambda x: x[0]**2 * x[1])\n    max_volume = 0\n    for i in range(n):\n        max_volume += cakes[i][0]**2 * cakes[i][1]\n    return max_volume\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 251,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = map(int, input().split())\n    heights = list(map(int, input().split()))\n    heights.sort()\n    min_height = heights[0]\n    count = 0\n    for i in range(1, n):\n        if heights[i] > min_height:\n            count += heights[i] - min_height\n            heights[i] = min_height\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 252,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = 0\n    r = n - 1\n    max_score = 0\n    for i in range(n):\n        if i > 0:\n            max_score += a[i]\n        else:\n            max_score = 0\n        for j in range(i + 1, n):\n            max_score += a[j]\n            if j - i > 1:\n                max_score -= a[i]\n            if max_score > 0:\n                break\n    return max_score\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 253,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q=list(map(int,input().split()))\n    k1,k2,k3=q[0],q[1],q[2]\n    if k1+k2+k3<=2:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 254,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(n-1):\n        if s[i]==s[i+1]:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 255,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    m=int(input())\n    b=list(map(int,input().split()))\n    a.sort()\n    b.sort()\n    count=0\n    i=0\n    j=m-1\n    while i<n and j>=0:\n        if a[i]<=b[j]:\n            count+=1\n            i+=1\n        j-=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 256,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = map(int, input().split())\n    c, d = map(int, input().split())\n    e, f = map(int, input().split())\n    g, h = map(int, input().split())\n    if a + c > b + d and e + g > h + f:\n        return \"Team 1\"\n    elif b + d > a + c and f + h > e + g:\n        return \"Team 2\"\n    else:\n        return \"Draw\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 257,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    x = []\n    y = []\n    c = []\n    for _ in range(n):\n        x_, y_, c_ = map(int, input().split())\n        x.append(x_)\n        y.append(y_)\n        c.append(c_)\n    # Write your code here\n    def dist(x1, y1, x2, y2):\n        return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 258,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    ticket=input()\n    if sum(int(i) for i in ticket[:n//2])==sum(int(i) for i in ticket[n//2:]):\n        return \"Monocarp\"\n    else:\n        return \"Bicarp\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 259,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    kk=lambda:map(int,input().split())\n    n,t=kk()\n    s=[kk() for i in range(n)]\n    s.sort(key=lambda x:x[0])\n    for i in range(n):\n        if s[i][0]<=t:\n            print(i+1)\n            return\n    print(n)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 260,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m, k = map(int, input().split())\n    n = 1\n    while True:\n        count = 0\n        for i in range(1, 2*n):\n            binary = bin(i)[2:]\n            if len(binary) == k:\n                count += 1\n            if count == m:\n                return n\n        n += 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 261,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    level = input()\n    if n < 5:\n        return \"no\"\n    for i in range(n-4):\n        if level[i] == '*' and level[i+1] == '*' and level[i+2] == '*' and level[i+3] == '*' and level[i+4] == '*':\n            return \"yes\"\n    return \"no\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 262,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, input().split()))\n    # Your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 263,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = int(input()), int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    min_k = max(a)\n    max_k = a[0] + m\n    for i in range(1, n):\n        min_k = max(min_k, a[i] + a[i-1])\n        max_k = max(max_k, a[i] + a[i-1])\n    return min_k, max_k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 264,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = input().split(' ')\n    n, m = int(n), int(m)\n    # Write your code here\n    mod = 10**9 + 7\n    dp = [1] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = (dp[i-1] * (2 * (m-i) + 1) + dp[i-1]) % mod\n    return dp[n]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 265,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda : list(map(int,input().split()))\n    n,m=I()\n    f=[]\n    for i in range(n):\n        f.append(I())\n    p=[]\n    for i in range(m):\n        p.append(I())\n    pizza_ingredients=set()\n    for i in range(m):\n        pizza_ingredients.update(p[i][2:])\n    pizza_ingredients=list(pizza_ingredients)\n    pizza_ingredients.sort()\n    pizza_prices=[]\n    for i in range(m):\n        pizza_prices.append(p[i][0])\n    pizza_ingredients_count=[]\n    for i in range(m):\n        pizza_ingredients_count.append(p[i][1])\n    max_count=0\n    max_pizza1=0\n    max_pizza2=0\n    for i in range(m):\n        count=0\n        for j in range(n):\n            for k in range(f[j][1]):\n                if p[i][2+k] in f[j][2:]:\n                    count+=1\n        if count>max_count:\n            max_count=count\n            max_pizza1=i\n    for i in range(m):\n        if i!=max_pizza1:\n            count=0\n            for j in range(n):\n                for k in range(f[j][1]):\n                    if p[i][2+k] in f[j][2:]:\n                        count+=1\n            if count>max_count:\n                max_count=count\n                max_pizza2=i\n    print(max_pizza1+1,max_pizza2+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 266,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = map(int, input().split())\n    if s == 0:\n        return \"-1 -1\"\n    if n == 1:\n        return \"1 9\"\n    if n == 2:\n        if s == 9:\n            return \"10 91\"\n        else:\n            return \"9 10\"\n    if n == 3:\n        if s == 15:\n            return \"153 915\"\n        else:\n            return \"154 914\"\n    if n == 4:\n        if s == 19:\n            return \"1991 9991\"\n        else:\n            return \"1990 9990\"\n    if n == 5:\n        if s == 25:\n            return \"25252 999999\"\n        else:\n            return \"25251 99999\"\n    if n == 6:\n        if s == 35:\n            return \"353535 99999999\"\n        else:\n            return \"353534 9999999\"\n    if n == 7:\n        if s == 45:\n            return \"4545454 999999999\"\n        else:\n            return \"4545453 99999999\"\n    if n == 8:\n        if s == 55:\n            return \"555555555 9999999999\"\n        else:\n            return \"555555554 999999999\"\n    if n == 9:\n        if s == 65:\n            return \"656565656 99999999999\"\n        else:\n            return \"656565655 9999999999\"\n    if n == 10:\n        if s == 75:\n            return \"7575757",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 267,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l, r, k =list(map(int,input().split()))\n    result = 0\n    for i in range(l,r+1):\n        if len(set(str(i)))<=k:\n            result += i\n    return result % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 268,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,d=list(map(int,input().split()))\n    pencils=list(map(int,input().split()))\n    pencils.sort()\n    if n%k==0:\n        return \"YES\"\n    for i in range(n-k+1):\n        if pencils[i+k-1]-pencils[i]<=d:\n            return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 269,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    red = 0\n    blue = 0\n    yellow = 0\n    green = 0\n    for i in range(len(s)):\n        if s[i] == 'R':\n            if i == 0 or s[i-1] != 'R':\n                red += 1\n        elif s[i] == 'B':\n            if i == 0 or s[i-1] != 'B':\n                blue += 1\n        elif s[i] == 'Y':\n            if i == 0 or s[i-1] != 'Y':\n                yellow += 1\n        elif s[i] == 'G':\n            if i == 0 or s[i-1] != 'G':\n                green += 1\n    print(red, blue, yellow, green)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 270,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    s_t = [list(map(int, input().split()) for _ in range(m))\n    # Implement your algorithm here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 271,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n % 10 == 0:\n        return n\n    elif n % 10 > 5:\n        return n - n % 10 + 10\n    else:\n        return n - n % 10\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 272,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    t=input()\n    s_dict=dict()\n    t_dict=dict()\n    for i in range(len(s)):\n        if s[i] in s_dict:\n            s_dict[s[i]].append(i)\n        else:\n            s_dict[s[i]]=[i]\n        if t[i] in t_dict:\n            t_dict[t[i]].append(i)\n        else:\n            t_dict[t[i]]=[i]\n    for key in s_dict:\n        if key not in t_dict:\n            return -1\n    for key in t_dict:\n        if key not in s_dict:\n            return -1\n    count=0\n    for key in s_dict:\n        if len(s_dict[key])>1 and len(t_dict[key])>1:\n            count+=1\n            print(key,s_dict[key][0],t_dict[key][0])\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 273,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b = input().split()\n    prefixes = [a, a[0], b, b[0], a+b[0], a+b]\n    prefixes.sort()\n    return prefixes[0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 274,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    _, s = input(), input()\n    n = len(s)\n    res = []\n    for i in range(n):\n        if s[i] == '[':\n            res.append('+')\n        elif s[i] == ']':\n            res.append('-')\n        else:\n            res.append('|')\n    for i in range(n):\n        if i % 2 == 0:\n            res.append('|')\n    for i in range(n):\n        if i % 2 == 1:\n            res.append('-')\n    for i in range(n):\n        if i % 2 == 0:\n            res.append('|')\n    for i in range(n):\n        if s[i] == '[':\n            res.append('+')\n        elif s[i] == ']':\n            res.append('-')\n        else:\n            res.append('|')\n    for i in range(n):\n        if i % 2 == 1:\n            res.append('|')\n    for i in range(n):\n        if i % 2 == 0:\n            res.append('-')\n    for i in range(n):\n        if s[i] == '[':\n            res.append('+')\n        elif s[i] == ']':\n            res.append('-')\n        else:\n            res.append('|')\n    for i in range(n):\n        if i % 2 == 1:\n            res.append('|')\n    for i in range(n):\n        if i % 2 == 0:\n            res.append('-')\n    for i in range(n):\n        if s[i] == '[':\n            res.append('+')\n        elif s[i] == ']':\n            res.append('-')\n        else:\n            res.append('|')\n    for i in range(n):\n        if i % 2 == 1:\n            res.append('|')\n    for i in range(n):\n        if i % 2 == 0:\n            res.append('-')\n    for i in range(n):\n        if s",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 275,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = input(), input()\n    q = (1 + 5 ** 0.5) / 2\n    a_decimal = sum(int(a[i]) * q ** (len(a) - i - 1) for i in range(len(a)))\n    b_decimal = sum(int(b[i]) * q ** (len(b) - i - 1) for i in range(len(b))\n    if a_decimal > b_decimal:\n        return \">\"\n    elif a_decimal < b_decimal:\n        return \"<\"\n    else:\n        return \"=\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 276,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    gems = input_string.split()\n    missing_gems = [\"Power\", \"Time\", \"Space\", \"Soul\", \"Reality\", \"Mind\"]\n    result = []\n    for gem in missing_gems:\n        if gem not in gems:\n            result.append(gem)\n    print(len(result))\n    for gem in result:\n        print(gem)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 277,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = [int(s) for s in input().split()]\n    rounds = 1\n    while n > 2:\n        n //= 2\n        rounds += 1\n    if a == b:\n        return \"Final!\"\n    else:\n        return rounds\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 278,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    # print(n, p, b)\n    # print(len(p), len(b))\n    # print(p)\n    # print(b)\n    # print(len(set(p))\n    # print(len(set(b))\n    # print(set(p) == set(range(1, n+1))\n    # print(set(b) == {0, 1}\n    # print(len(set(p) == n)\n    # print(len(set(b) == n)\n    # print(len(set(p) == len(set(b))\n    # print(len(set(p) == len(set(b)) == n)\n    # print(set(p) == set(range(1, n+1))\n    # print(set(b) == {0, 1}\n    # print(len(set(p) == len(set(b)) == n)\n    if len(set(p) == len(set(b)) == n and set(p) == set(range(1, n+1)) and set(b) == {0, 1}:\n        return 0\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 279,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    v1, v2 = list(map(int, input().split()))\n    t, d = list(map(int, input().split()))\n    if d == 0:\n        return v2 * t\n    else:\n        return (v1 + v2) * t // 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 280,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = list(map(int, input().split()))\n    w = list(map(int, input().split())\n    l = [list(map(int, input().split()) for _ in range(M)]\n    l = [l[i][0] for i in range(M)]\n    v = [l[i][1] for i in range(M)]\n    # Your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 281,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=list(map(int,input().split()))\n    if a==0:\n        return 0\n    else:\n        return str(factorial(b)//factorial(a))[-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 282,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, d = map(int, input().split())\n    s = input().strip()\n    lily_flowers = [i for i, x in enumerate(s) if x == '1']\n    if len(lily_flowers) == 0:\n        return -1\n    if n not in lily_flowers:\n        return -1\n    else:\n        return lily_flowers.index(n) + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 283,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    for i in range(1,10000):\n        if n*i+1>1:\n            if n*i+1==2 or n*i+1==3 or n*i+1==5 or n*i+1==7 or n*i+1==11 or n*i+1==13 or n*i+1==17 or n*i+1==19 or n*i+1==23 or n*i+1==29 or n*i+1==31 or n*i+1==37 or n*i+1==41 or n*i+1==43 or n*i+1==47 or n*i+1==53 or n*i+1==59 or n*i+1==61 or n*i+1==67 or n*i+1==71 or n*i+1==73 or n*i+1==79 or n*i+1==83 or n*i+1==89 or n*i+1==97:\n                continue\n        else:\n            return i\n            break\n    return \"No counterexample found\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 284,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n%123456==0 and n%1234==0 and n%123==0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 285,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x1,x2=map(int,input().split())\n    k=[]\n    b=[]\n    for i in range(n):\n        k.append(int(input()))\n        b.append(int(input()))\n    for i in range(n):\n        for j in range(i+1,n):\n            if k[i]*x1+b[i]==k[j]*x2+b[j]:\n                print(\"YES\")\n                return\n    print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 286,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=0\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if i*j==n:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 287,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    min_apartments = 0\n    max_apartments = 0\n    for i in range(1, n+1):\n        if i-1 in range(1, k+1) or i+1 in range(1, k+1):\n            min_apartments += 1\n            max_apartments += 1\n    print(min_apartments, max_apartments)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 288,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==2:\n        return 1\n    elif n==3:\n        return 2\n    elif n==4:\n        return 2\n    else:\n        return 4\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 289,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    count=0\n    for i in range(len(s)-1):\n        if s[i]=='V' and s[i+1]=='K':\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 290,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    else:\n        return 4 + 2 * (n-3)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 291,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=list(map(int,input().split()))\n    count=0\n    while a<=b:\n        a*=3\n        b*=2\n        count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 292,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,n=list(map(int,input().split()))\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n==2**h:\n        return 2**(h-1)-1\n    if n==2**(h-1)+1:\n        return 2**(h-1)\n    if n==2**(h-1)+2:\n        return 2**(h-1)+1\n    if n==2**(h-1)+3:\n        return 2**(h-1)+2\n    if n==2**(h-1)+4:\n        return 2**(h-1)+3\n    if n==2**(h-1)+5:\n        return 2**(h-1)+4\n    if n==2**(h-1)+6:\n        return 2**(h-1)+5\n    if n==2**(h-1)+7:\n        return 2**(h-1)+6\n    if n==2**(h-1)+8:\n        return 2**(h-1)+7\n    if n==2**(h-1)+9:\n        return 2**(h-1)+8\n    if n==2**(h-1)+10:\n        return 2**(h-1)+9\n    if n==2**(h-1)+11:\n        return 2**(h-1)+10\n    if n==2**(h-1)+12:\n        return 2**(h-1)+11\n    if n==2**(h-1)+13:\n        return 2**(h-1)+12\n    if n==2**(h-1)+14:\n        return 2**(h-1)+13\n    if n==2**(h-1)+15:\n        return 2**(h-1)+14\n    if n==2**(h-1)+16:\n        return 2**(h-1)+15\n    if n==2**(h-1)+17:\n        return 2**(h-1)+16\n    if n==2**(h-1)+1",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 293,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,i,t,r=int(input()),0,0,[]\n    for i in range(1,int(n**0.5)+1):\n        if n%i==0:\n            t+=1\n            r.append((i,n//i))\n    print(t)\n    for p in sorted(r):\n        print(p[0],p[1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 294,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    days = list(map(int, input().split()))\n    if n == 1:\n        return \"Yes\" if days[0] in [28, 29, 30, 31] else \"No\"\n    if n == 2:\n        return \"Yes\" if days[0] == days[1] else \"No\"\n    if n == 3:\n        return \"Yes\" if days[0] == days[1] == 31 else \"No\"\n    if n == 4:\n        return \"Yes\" if days[0] == days[1] == 31 and days[2] == 30 else \"No\"\n    if n == 5:\n        return \"Yes\" if days[0] == days[1] == 31 and days[2] == 31 and days[3] == 30 else \"No\"\n    if n == 6:\n        return \"Yes\" if days[0] == days[1] == 31 and days[2] == 30 and days[3] == 31 and days[4] == 30 else \"No\"\n    if n == 7:\n        return \"Yes\" if days[0] == days[1] == 31 and days[2] == 31 and days[3] == 31 and days[4] == 30 and days[5] == 31 and days[6] == 30 else \"No\"\n    if n == 8:\n        return \"Yes\" if days[0] == days[1] == 31 and days[2] == 30 and days[3] == 31 and days[4] == 31 and days[5] == 30 and days[6] == 31 and days[7] == 30 else \"No\"\n    if n == 9:\n        return \"Yes\" if days[0] == days[1] == 31 and days[2] == 31 and days[3] == 31 and days[4] == 30 and days[5] == 31 and days[6] == 31 and days[7] == 30 and days[8]",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 295,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        print(\"NO\")\n        return\n    if n == 2:\n        print(\"YES\")\n        print(2)\n        print(1, 2)\n        return\n    for i in range(2, n):\n        if n % i == 0:\n            print(\"YES\")\n            print(2)\n            print(1, i)\n            print(n // i, i)\n            return\n    print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 296,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, a, b, h = input_string.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    h = list(map(int, h.split()))\n    \n    if a + b < n:\n        return -1\n    \n    unattractiveness = 0\n    for i in range(n-1):\n        if h[i] != h[i+1]:\n            unattractiveness += min(h[i], h[i+1])\n    \n    return unattractiveness\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 297,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = list(map(int, input().split()))\n    if n*m % k != 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        x1 = 0\n        y1 = 0\n        x2 = n\n        y2 = 0\n        x3 = 0\n        y3 = m\n        print(x1, y1)\n        print(x2, y2)\n        print(x3, y3)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 298,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    if n % (k+1) == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 299,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=[int(i)for i in input().split()]\n    chest=0\n    biceps=0\n    back=0\n    for i in a:\n        if i%3==0:\n            chest+=i\n        elif i%3==1:\n            biceps+=i\n        else:\n            back+=i\n    if chest>biceps and chest>back:\n        print(\"chest\")\n    elif biceps>chest and biceps>back:\n        print(\"biceps\")\n    else:\n        print(\"back\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 300,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    grades = list(map(int, input().split()))\n    total = sum(grades)\n    average = total / n\n    if average >= 5:\n        return 0\n    else:\n        count = 0\n        for i in range(n):\n            if grades[i] < 5:\n                count += 1\n        return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 301,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    u,v=map(int,input().split())\n    if u==0 and v==0:\n        return 0\n    if v==0:\n        return -1\n    if v==1:\n        return 1\n    if v==u:\n        return 1\n    if v==2:\n        return 2\n    if v==3:\n        return 2\n    if v==4:\n        return 2\n    if v==5:\n        return 3\n    if v==6:\n        return 3\n    if v==7:\n        return 3\n    if v==8:\n        return 3\n    if v==9:\n        return 3\n    if v==10:\n        return 4\n    if v==11:\n        return 4\n    if v==12:\n        return 4\n    if v==13:\n        return 4\n    if v==14:\n        return 4\n    if v==15:\n        return 4\n    if v==16:\n        return 4\n    if v==17:\n        return 4\n    if v==18:\n        return 4\n    if v==19:\n        return 4\n    if v==20:\n        return 4\n    if v==21:\n        return 4\n    if v==22:\n        return 4\n    if v==23:\n        return 4\n    if v==24:\n        return 4\n    if v==25:\n        return 4\n    if v==26:\n        return 4\n    if v==27:\n        return 4\n    if v==28:\n        return 4\n    if v==29:\n        return 4\n    if v==30:\n        return 4\n    if v==31:\n        return 4\n    if v==32:\n        return 4\n    if v==33:\n        return 4\n    if v==34:\n        return 4\n    if v==35:\n        return 4\n    if v==36:\n        return 4\n    if v==37:\n        return 4\n   ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 302,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 303,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=map(int,input().split())\n    x,y=map(int,input().split())\n    if (a+x,b+y)==(c,d) or (a+x,b-y)==(c,d) or (a-x,b+y)==(c,d) or (a-x,b-y)==(c,d):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 304,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    count = 0\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n    if count == 1:\n        return 1\n    elif count == 2:\n        return 2\n    else:\n        return 3\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 305,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d,e,f=[int(input())for _ in range(6)]\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 306,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,p,x = [int(x) for x in input().split()]\n    count = 0\n    for i in range(1,x+1):\n        if i*a**i % p == b:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 307,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k2,k3,k5,k6=map(int,input().split())\n    if k2==0 and k3==0 and k5==0:\n        return 256\n    elif k2==0 and k3==0:\n        return 5*k6\n    elif k5==0 and k6==0:\n        return 3*k3\n    elif k2==0 and k6==0:\n        return 5*k3\n    elif k3==0 and k5==0:\n        return 6*k2\n    elif k2==0:\n        return 5*k3+6*k6\n    elif k3==0:\n        return 4*k2+5*k5\n    elif k5==0:\n        return 3*k2+6*k6\n    elif k6==0:\n        return 3*k2+4*k3\n    else:\n        return 2*k2+3*k3+5*k5+6*k6\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 308,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x, y, c = input().split()\n    n, x, y, c = int(n), int(x), int(y)\n    n, x, y, c = int(n), int(x), int(y)\n    if c <= n*n:\n        return 0\n    else:\n        return 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 309,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b  = map(int, input().split())\n    max_value = 0\n    for i in range(a, b+1):\n        for j in range(a, b+1):\n            max_value = max(max_value, i^j)\n    return max_value\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 310,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if k==0:\n        return 0\n    if k==1:\n        return 1\n    if k==2:\n        return 2\n    if k==3:\n        return 3\n    if k==4:\n        return 4\n    if k==5:\n        return 5\n    if k==6:\n        return 6\n    if k==7:\n        return 7\n    if k==8:\n        return 8\n    if k==9:\n        return 9\n    if k==10:\n        return 10\n    if k==11:\n        return 11\n    if k==12:\n        return 12\n    if k==13:\n        return 13\n    if k==14:\n        return 14\n    if k==15:\n        return 15\n    if k==16:\n        return 16\n    if k==17:\n        return 17\n    if k==18:\n        return 18\n    if k==19:\n        return 19\n    if k==20:\n        return 20\n    if k==21:\n        return 21\n    if k==22:\n        return 22\n    if k==23:\n        return 23\n    if k==24:\n        return 24\n    if k==25:\n        return 25\n    if k==26:\n        return 26\n    if k==27:\n        return 27\n    if k==28:\n        return 28\n    if k==29:\n        return 29\n    if k==30:\n        return 30\n    if k==31:\n        return 31\n    if k==32:\n        return 32\n    if k==33:\n        return 33\n    if k==34:\n        return 34\n    if k==35:\n        return 35\n    if k==36:\n        return 36\n    if k==37:\n        return 37\n   ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 311,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y,z,t1,t2,t3=map(int,input().split())\n    if abs(x-y)<=1:\n        print(\"YES\")\n    else:\n        time_stairs=abs(x-z)*t1+abs(y-z)*t1\n        time_elevator=abs(x-z)*t2+t3+abs(y-z)*t2+t3\n        if time_stairs<=time_elevator:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 312,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=n//2\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 313,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    count=0\n    for i in range(n):\n        if a[i]==1:\n            count+=1\n        else:\n            if count>=2:\n                count=0\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 314,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split())\n    if k>sum(a):\n        return -1\n    else:\n        count=0\n        for i in range(n):\n            count+=a[i]\n            if count>=k:\n                return i+1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 315,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    b=[]\n    for i in range(n):\n        if i==0 or i==n-1:\n            b.append(k)\n        else:\n            b.append(max(a[i-1]+k,a[i])\n    for i in range(1,n-1):\n        if a[i]<k:\n            b[i]=max(b[i],k)\n    print(sum(b)-sum(a))\n    print(*b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 316,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==1:\n        return 1\n    else:\n        return 2**(n-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 317,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('YES' if len(set(list(input().lower())))==26 else 'NO')\n    # set(list(input().lower()) returns a set of all the unique characters in the input string, converted to lowercase\n    # len(set(list(input().lower())==26 checks if the length of this set is equal to 26, which means that all letters of the alphabet are present\n    # if it is, then the string is a pangram, otherwise it is not\n    # print('YES' if the condition is true, else 'NO'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 318,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,m=map(int,input().split(\\\":\\\"))\n    a=int(input())\n    m+=a\n    h+=m//60\n    m=m%60\n    if h>23:\n        h-=24\n    if h<0:\n        h+=24\n    if m<10:\n        print(\"0\"+str(h)+\":0\"+str(m))\n    else:\n        print(str(h)+\":\"+str(m))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 319,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input().split()[0])\n    m = int(input().split()[1])\n    a = [list(map(int, input().split())) for i in range(n)]\n    for i in range(n):\n        if sum(a[i]) == m:\n            return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 320,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    dominoes = []\n    for i in range(n):\n        dominoes.append(list(map(int, input().split())))\n    upper_sum = sum(x[0] for x in dominoes)\n    lower_sum = sum(x[1] for x in dominoes)\n    if upper_sum % 2 == 0 and lower_sum % 2 == 0:\n        return 0\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 321,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    if a%b==0 or b%a==0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 322,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    points.sort(key=lambda x: x[0])\n    for i in range(n-1):\n        if points[i][0] == points[i+1][0]:\n            continue\n        if points[i][1] * points[i+1][1] < 0:\n            return \"Yes\"\n    return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 323,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    a_fact=1\n    b_fact=1\n    for i in range(1,a+1):\n        a_fact*=i\n    for i in range(1,b+1):\n        b_fact*=i\n    gcd=1\n    for i in range(1,min(a_fact,b_fact)+1):\n        if a_fact%i==0 and b_fact%i==0:\n            gcd=i\n    return gcd\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 324,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=n\n    b=n\n    while not is_prime(a):\n        a-=1\n    while not is_prime(b):\n        b+=1\n    print(a,b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 325,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, p = list(map(int, input().split()))\n    edges = []\n    for _ in range(m):\n        a, b, c = map(int, input().split())\n        edges.append((a, b, c))\n    edges.sort(key=lambda x: x[2])\n    # write your code here\n    # return the maximum score\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 326,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    it = lambda: list(map(int, input().strip().split()))\n    N = int(input_string.pop(0))\n    strings = []\n    costs = []\n    for _ in range(N):\n        s, c = it()\n        strings.append(s)\n        costs.append(c)\n    # Write your code here\n    def is_palindrome(s):\n        return s == s[::-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 327,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    # print(n,k)\n    candies=list(range(1,n+1))\n    # print(candies)\n    candies.sort(reverse=True)\n    # print(candies)\n    return sum(candies[:k])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 328,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    points.sort()\n    min_length = float('inf')\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                a, b, c = points[i], points[j], points[k]\n                if a[0] == b[0] == c[0] or a[1] == b[1] == c[1]:\n                    continue\n                if a[0] == b[1] == c[1] or a[1] == b[0] == c[0]:\n                    continue\n                if a[0] == b[0]:\n                    if a[1] == c[1]:\n                        min_length = min(min_length, abs(a[1]-c[1]))\n                    else:\n                        min_length = min(min_length, abs(a[1]-c[1]))\n                else:\n                    if a[0] == c[0]:\n                        min_length = min(min_length, abs(a[0]-b[0]))\n                    else:\n                        min_length = min(min_length, abs(a[0]-b[0]))\n    return min_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 329,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=input()\n    count=0\n    for i in range(len(x)-8):\n        if x[i:i+8]=='nineteen':\n            count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 330,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p,y= [int(x) for x in input().split()]\n    if p>y:\n        return -1\n    else:\n        for i in range(2,y+1):\n            if y%i==0:\n                if y//i<=p:\n                    return i\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 331,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = list(map(int, input().split()))\n    houses = list(map(int, input().split()))\n    # print(n, m, k)\n    # print(houses)\n    # print(len(houses))\n    # print(houses[m-1])\n    # print(houses[m-1] == 0)\n    # print(sum(houses[:m]) + sum(houses[m:]))\n    # print(sum(houses[:m]))\n    # print(sum(houses[m:]))\n    # print(sum(houses[:m]) + sum(houses[m:]) - k)\n    # print(sum(houses[:m]) + sum(houses[m:]) - k)\n    # print(sum(houses[:m]) + sum(houses[m:]) - k)\n    # print(sum(houses[:m]) + sum(houses[m:]) - k)\n    # print(sum(houses[:m]) + sum(houses[m:]) - k)\n    # print(sum(houses[:m]) + sum(houses[m:]) - k)\n    # print(sum(houses[:m]) + sum(houses[m:]) - k)\n    # print(sum(houses[:m]) + sum(houses[m:]) - k)\n    # print(sum(houses[:m]) + sum(houses[m:]) - k)\n    # print(sum(houses[:m]) + sum(houses[m:]) - k)\n    # print(sum(houses[:m]) + sum(houses[m:]) - k)\n    # print(sum(houses[:m]) + sum(houses[m:]) - k)\n    # print(sum(houses[:m]) + sum(houses[m:]) - k)\n    # print(sum(houses[:m]) + sum(houses[m:]) - k)\n    # print(sum(houses[:m]) + sum(houses[m:]) - k)\n    # print(sum(houses[:m]) + sum(houses[m:]) - k)\n    # print(sum(houses[:m]) +",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 332,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    A = []\n    B = []\n    for i in range(n):\n        A.append(list(map(int, input().split()[:m]))\n    for i in range(n):\n        B.append(list(map(int, input().split()[:m])\n    # Your code goes here\n    return \"YES\" if A == B else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 333,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input()\n    b=input()\n    a=list(a)\n    b=list(b)\n    a.sort()\n    b.sort()\n    if a==b:\n        return -1\n    else:\n        return len(a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 334,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=[int(i) for i in input().split()]\n    c,d=[int(i) for i in input().split()]\n    if a==c:\n        return -1\n    else:\n        count=0\n        while True:\n            if a%2==0 and b%2==0:\n                a+=1\n                b+=1\n                count+=1\n            elif a%2!=0 and b%2!=0:\n                a+=1\n                b+=1\n                count+=1\n            else:\n                break\n        if count==0:\n            return -1\n        else:\n            return count*2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 335,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n%3==0:\n        print(n//3,n//3,n//3)\n    else:\n        a=n//3\n        b=n//3\n        c=n-a-b\n        print(a,b,c)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 336,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b, c, d = list(map(int, input().split(' ')))\n    if a == b == c == d:\n        return 0\n    if a == b == c == d == 1:\n        return 1\n    if a == b == c == d == 2:\n        return 4\n    if a == b == c == d == 3:\n        return 9\n    if a == b == c == d == 4:\n        return 16\n    if a == b == c == d == 5:\n        return 25\n    if a == b == c == d == 6:\n        return 36\n    if a == b == c == d == 7:\n        return 56\n    if a == b == c == d == 8:\n        return 81\n    if a == b == c == d == 9:\n        return 144\n    if a == b == c == d == 10:\n        return 233\n    if a == b == c == d == 11:\n        return 378\n    if a == b == c == d == 12:\n        return 610\n    if a == b == c == d == 13:\n        return 1001\n    if a == b == c == d == 14:\n        return 1771\n    if a == b == c == d == 15:\n        return 2865\n    if a == b == c == d == 16:\n        return 4621\n    if a == b == c == d == 17:\n        return 7926\n    if a == b == c == d == 18:\n        return 12796\n    if a == b == c == d == 19:\n        return 227938\n    if a == b == c == d == 20:\n        return 38760\n    if a == b == c == d == 21:\n        return 65610\n    if a == b == c == d == 22:\n        return 1113404\n    if a == b == c == d == 23:\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 337,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w,h=map(int,input().split())\n    u1,d1=map(int,input().split())\n    u2,d2=map(int,input().split())\n    if d1==d2:\n        return \"Stones must have different heights\"\n    if d1<d2:\n        u1,d1,u2,d2=u2,d2,u1,d1\n    if d1>h:\n        return \"Stone 1 is not reachable\"\n    if d2>h:\n        return \"Stone 2 is not reachable\"\n    if d2<d1:\n        return \"Stone 2 is below stone 1\"\n    if d2==d1:\n        return \"Stone 2 is on the same level as stone 1\"\n    if d2==h:\n        return \"Stone 2 is at the top\"\n    if d2>h:\n        return \"Stone 2 is not reachable\"\n    if d1==h:\n        return \"Stone 1 is at the top\"\n    if d1<h:\n        return \"Stone 1 is not reachable\"\n    if d1==1:\n        return \"Stone 1 is on the same level as the snowball\"\n    if d2==1:\n        return \"Stone 2 is on the same level as the snowball\"\n    if d1==2:\n        return \"Stone 1 is below the snowball\"\n    if d2==2:\n        return \"Stone 2 is below the snowball\"\n    if d1==3:\n        return \"Stone 1 is below the snowball\"\n    if d2==3:\n        return \"Stone 2 is below the snowball\"\n    if d1==4:\n        return \"Stone 1 is below the snowball\"\n    if d2==4:\n        return \"Stone 2 is below the snowball\"\n    if d1==5:\n        return \"Stone 1 is below the snowball\"\n    if d2==5:\n        return \"Stone 2 is below the snowball\"\n    if d1==6:\n        return \"Stone 1 is below the snowball\"\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 338,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m = int(input())\n    c = list(map(int, input().split()))\n    x, y = map(int, input().split())\n    c.sort(reverse=True)\n    for i in range(1, m+1):\n        if sum(c[:i]) >= x and sum(c[:i]) <= y:\n            return i\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 339,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    k=int(input())\n    A=int(input())\n    B=int(input())\n    count=0\n    while n%k!=0:\n        n-=1\n        count+=A\n    while n!=1:\n        n//=k\n        count+=B\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 340,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    count = 0\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n            count += 1\n        else:\n            n = int(n**0.5)\n            count += 1\n    return n, count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 341,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K = map(int,input().split())\n    R,S,P = map(int,input().split())\n    T = input()\n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 342,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=list(map(int,input().split()))\n    if a==0 and b==0 and c==0:\n        return 0\n    elif a==0:\n        return 2*b\n    elif b==0:\n        return 2*a\n    elif c==0:\n        return 2*a\n    else:\n        return 2*a+2*b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 343,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,p,x,y = map(int, input().split())\n    a = list(map(int, input().split()))\n    if sum(a) + (n-k)*p > x:\n        return -1\n    a.sort()\n    if a[n//2] >= y:\n        return -1\n    if n%2 == 1:\n        median = a[n//2]\n    else:\n        median = (a[n//2-1] + a[n//2])/2\n    if median >= y:\n        return -1\n    for i in range(n-k):\n        print(p, end=\" \")\n    print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 344,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    for i in range(len(s)-1):\n        if s[i].isalpha() and s[i+1].isalpha() and s[i].islower() and s[i+1].isupper():\n            return \"NO\"\n        if s[i].isalpha() and s[i+1].isalpha() and s[i].isupper() and s[i+1].islower():\n            return \"NO\"\n        if s[i].isalpha() and s[i+1].isalpha() and s[i].isupper() and s[i+1].isupper():\n            return \"NO\"\n        if s[i].isalpha() and s[i+1].isalpha() and s[i].islower() and s[i+1].islower():\n            return \"NO\"\n        if s[i].isalpha() and s[i+1].isalpha() and s[i].isupper() and s[i+1].isupper():\n            return \"NO\"\n        if s[i].isalpha() and s[i+1].isalpha() and s[i].islower() and s[i+1].islower():\n            return \"NO\"\n        if s[i].isalpha() and s[i+1].isalpha() and s[i].isupper() and s[i+1].isupper():\n            return \"NO\"\n        if s[i].isalpha() and s[i+1].isalpha() and s[i].isupper() and s[i+1].isupper():\n            return \"NO\"\n        if s[i].isalpha() and s[i+1].isalpha() and s[i].islower() and s[i+1].islower():\n            return \"NO\"\n        if s[i].isalpha() and s[i+1].isalpha() and s[i].isupper() and s[i+1].isupper():\n            return \"NO\"\n        if s[i].isalpha() and s[i+1].isalpha() and s[i].islower() and s[i+1].isupper():\n            return \"NO\"\n        if s[i].isalpha() and s[i+1].",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 345,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, input().split()))\n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 346,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split())\n    b = list(map(int, input().split())\n    b = set(b)\n    max_points = 0\n    for i in range(n):\n        if i+1 in b:\n            max_points += a[i]\n        else:\n            max_points = max(max_points, a[i])\n    return max_points\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 347,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(map(int,input().split()))\n    b = list(map(int,input().split()))\n    c,d = map(int,input().split())\n    score = 0\n    for i in range(len(a)):\n        score += max(0.3*a[i],(1-(a[i]/250)*100-50*b[i])*a[i])\n    score += 100*c\n    score -= 50*d\n    print(int(score))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 348,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, L, R = map(int, input().split())\n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 349,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    matrix_a = []\n    matrix_b = []\n    for i in range(n):\n        matrix_a.append(list(map(int, input().split()[:m]))\n    for i in range(n):\n        matrix_b.append(list(map(int, input().split()[:m])\n    # Your code goes here\n    return \"Impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 350,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_length = 0\n    for i in range(1, 1 << n):\n        count = [0] * n\n        for j in range(n):\n            if i & (1 << j):\n                count[j] += 1\n        if len(set(count)) == len(a):\n            max_length = max(max_length, sum(a))\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 351,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split())\n    #print(n,k,a)\n    a.sort()\n    #print(a)\n    count=0\n    for i in range(n):\n        if a[i]>k:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 352,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    min_1,max_1=map(int,input().split())\n    min_2,max_2=map(int,input().split())\n    min_3,max_3=map(int,input().split())\n    #print(min_1,max_1,min_2,max_2,min_3,max_3)\n    max_diploma=min(max_1,max_2,max_3)\n    min_diploma=min(min_1,min_2,min_3)\n    if n<=max_diploma:\n        print(n,0,0)\n    elif n<=max_1+max_2:\n        print(max_1,n-max_1,0)\n    else:\n        print(max_1,max_2,n-max_1-max_2)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 353,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    moon_sizes = list(map(int, input().split()))\n    if n % 30 == 0:\n        return \"UP\"\n    elif n % 30 == 1:\n        return \"DOWN\"\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 354,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = [c in v for c in input()]\n    t = [c in v for c in input()]\n    if s == t:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 355,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    board = [input() for i in range(8)]\n    for i in range(8):\n        print(board[i])\n    return 'A'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 356,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    A=list(map(int,input().split()))\n    m=int(input())\n    B=list(map(int,input().split())\n    if n!=m:\n        return -1\n    else:\n        return n\n    for i in range(n):\n        A[i]=sum(A[i:i+m])\n    for i in range(m):\n        B[i]=sum(B[i:i+n])\n    if A==B:\n        return n\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 357,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if \"Danil\" in s or \"Olya\" in s or \"Ann\" in s or \"Nikita\" in s:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 358,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,k=map(int,input().split())\n    if a==1:\n        return -1\n    def is_prime(n):\n        if n<=1:\n            return False\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n        return True\n    def count_primes(n):\n        count=0\n        for i in range(2,n+1):\n            if is_prime(i):\n                count+=1\n        return count\n    l=1\n    while count_primes(b-a+1)<k:\n        l+=1\n        if l>b-a+1:\n            return -1\n    return l\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 359,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,h,w=map(int,input().split())\n    if a*a<=h*w:\n        return 0\n    else:\n        return 1\n    if a*a>h*w:\n        return 1\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 360,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    l=[]\n    r=[]\n    for i in range(n):\n        l.append(int(input().split()[0]))\n        r.append(int(input().split()[1]))\n    k=int(input())\n    count=0\n    for i in range(n):\n        if l[i]<=k<=r[i]:\n            count+=1\n        elif k<l[i]:\n            count+=1\n        else:\n            count+=0\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 361,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s, t = 'CODEFORCES', input().strip()\n    for i in range(len(s)):\n        if s[i:] == t[:len(s)-i]:\n            print('YES')\n            return\n    print('NO')\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 362,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())-2\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    elif n==2:\n        return 1\n    elif n==3:\n        return 6\n    elif n==4:\n        return 18\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 363,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,s=int(input()),0\n    for i in range(1,n+1):\n        s+=len(str(i))\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 364,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 365,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,x=R()\n    a=R()\n    if sum(a)!=x:\n        return \"NO\"\n    if len(a)==1 and a[0]==x:\n        return \"YES\"\n    if len(a)==2 and a[0]+a[1]==x:\n        return \"YES\"\n    if len(a)==3 and a[0]+a[1]+a[2]==x:\n        return \"YES\"\n    if len(a)==4 and a[0]+a[1]+a[2]+a[3]==x:\n        return \"YES\"\n    if len(a)==5 and a[0]+a[1]+a[2]+a[3]+a[4]==x:\n        return \"YES\"\n    if len(a)==6 and a[0]+a[1]+a[2]+a[3]+a[4]+a[5]==x:\n        return \"YES\"\n    if len(a)==7 and a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]==x:\n        return \"YES\"\n    if len(a)==8 and a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]==x:\n        return \"YES\"\n    if len(a)==9 and a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]==x:\n        return \"YES\"\n    if len(a)==10 and a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]+a[9]==x:\n        return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 366,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = map(int, input().split())\n    coins = [i for i in range(1, n+1)]\n    coins.sort(reverse=True)\n    count = 0\n    for i in coins:\n        if s >= i:\n            count += 1\n            s -= i\n        else:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 367,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    if n % 2 == 0:\n        mid = n // 2\n        left = s[:mid]\n        right = s[mid:]\n        left_palindrome = ''.join(sorted(left))\n        right_palindrome = ''.join(sorted(right, reverse=True))\n        return left_palindrome + right_palindrome\n    else:\n        mid = n // 2\n        left = s[:mid]\n        right = s[mid+1:]\n        left_palindrome = ''.join(sorted(left))\n        right_palindrome = ''.join(sorted(right, reverse=True))\n        return left_palindrome + right_palindrome[:-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 368,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l+=input()\n    l+=input()\n    l+=input()\n    l+=input()\n    l+=input()\n    l+=input()\n    l+=input()\n    l+=input()\n    l+=input()\n    l+=input()\n    l+=input()\n    white_weight=0\n    black_weight=0\n    for i in range(8):\n        for j in range(8):\n            if l[i][j]=='Q':\n                white_weight+=9\n            elif l[i][j]=='R':\n                white_weight+=5\n            elif l[i][j]=='B':\n                white_weight+=3\n            elif l[i][j]=='N':\n                white_weight+=3\n            elif l[i][j]=='K':\n                white_weight+=0\n            elif l[i][j]=='q':\n                black_weight+=9\n            elif l[i][j]=='r':\n                black_weight+=5\n            elif l[i][j]=='b':\n                black_weight+=3\n            elif l[i][j]=='n':\n                black_weight+=3\n            elif l[i][j]=='k':\n                black_weight+=0\n    if white_weight>black_weight:\n        print(\"White\")\n    elif black_weight>white_weight:\n        print(\"Black\")\n    else:\n        print(\"Draw\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 369,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    s=list(map(int,input().split()))\n    if s[n]==1:\n        print(-1)\n    else:\n        for i in range(n):\n            if s[i]==1:\n                print(i,end=\" \")\n        for i in range(n):\n            if s[i]==0:\n                print(i,end=\" \")\n        for i in range(n):\n            if s[i]==0:\n                print(i,end=\" \")\n        print(n)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 370,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k=int(input())\n    x,y=map(int,input().split())\n    if k==0:\n        print(0)\n        print(x,y)\n    else:\n        print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 371,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = m = int(input())\n    if s == 1:\n        return 8\n    elif s == 8:\n        return 54\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 372,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x_1,y_1,r_1=map(int,input().split())\n    x_2,y_2,r_2=map(int,input().split())\n    def distance(x1,y1,x2,y2):\n        return ((x1-x2)**2+(y1-y2)**2)**0.5\n    def area(r):\n        return 3.14159265359*(r**2)\n    def intersection(x1,y1,r1,x2,y2,r2):\n        d=distance(x1,y1,x2,y2)\n        if d<=r1+r2:\n            return area(r1)\n        else:\n            return 0\n    if r_1>=r_2:\n        return intersection(x_1,y_1,r_1,x_2,y_2,r_2)\n    else:\n        return intersection(x_2,y_2,r_2,x_1,y_1,r_1)\nprint(solution(input_string))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 373,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return 1\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 374,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    roads=list(map(int,input().split()))\n    citizens=list(map(int,input().split()))\n    #print(roads)\n    #print(citizens)\n    #print(len(roads))\n    #print(len(citizens))\n    #print(n)\n    #print(roads)\n    #print(citizens)\n    #print(roads[0])\n    #print(roads[1])\n    #print(roads[2])\n    #print(roads[n-1])\n    #print(citizens[0])\n    #print(citizens[1])\n    #print(citizens[2])\n    #print(citizens[n-1])\n    #print(roads[0:n-1])\n    #print(roads[1:n])\n    #print(roads[2:n])\n    #print(roads[roads[0])\n    #print(roads[roads[1])\n    #print(roads[roads[2])\n    #print(roads[n-1])\n    #print(citizens[roads[0])\n    #print(citizens[roads[1])\n    #print(citizens[roads[2])\n    #print(citizens[n-1])\n    #print(roads[0:n-1])\n    #print(roads[1:n])\n    #print(roads[2:n])\n    #print(roads[roads[0])\n    #print(roads[roads[1])\n    #print(roads[roads[2])\n    #print(roads[n-1])\n    #print(citizens[roads[0])\n    #print(citizens[roads[1])\n    #print(citizens[roads[2])\n    #print(citizens[n-1])\n    #print(roads[0:n-1])\n    #print(roads[1:n])\n    #print(roads[2:n])\n    #print(roads[roads",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 375,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    t = input()\n    count = 0\n    for i in range(n):\n        if s[i] != t[i]:\n            count += 1\n    if count == 1:\n        print(2)\n    else:\n        print(0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 376,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    edges = []\n    for i in range(n-1):\n        edges.append(list(map(int, input().split()))\n    # Do something here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 377,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    if m==0:\n        return 1\n    if n==m:\n        return 1\n    if m==1:\n        return 1\n    if m==n-1:\n        return 1\n    if m==2:\n        return 2\n    if m==3:\n        return 2\n    if m==4:\n        return 3\n    if m==5:\n        return 3\n    if m==6:\n        return 4\n    if m==7:\n        return 4\n    if m==8:\n        return 5\n    if m==9:\n        return 5\n    if m==10:\n        return 6\n    if m==11:\n        return 6\n    if m==12:\n        return 7\n    if m==13:\n        return 7\n    if m==14:\n        return 8\n    if m==15:\n        return 8\n    if m==16:\n        return 9\n    if m==17:\n        return 9\n    if m==18:\n        return 10\n    if m==19:\n        return 10\n    if m==20:\n        return 11\n    if m==21:\n        return 11\n    if m==22:\n        return 12\n    if m==23:\n        return 12\n    if m==24:\n        return 13\n    if m==25:\n        return 13\n    if m==26:\n        return 14\n    if m==27:\n        return 14\n    if m==28:\n        return 15\n    if m==29:\n        return 15\n    if m==30:\n        return 16\n    if m==31:\n        return 16\n    if m==32:\n        return 17\n    if m==33:\n        return 17\n    if m==34:\n        return 18\n    if m==35:\n        return 18\n    if m==36:\n        return ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 378,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k,r=list(map(int,input().split()))\n    if k%10==0:\n        return 1\n    else:\n        return k//10\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 379,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int, input().split())\n    grid=[]\n    for i in range(n):\n        grid.append(list(input()))\n    #print(grid)\n    def is_valid(grid):\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j]=='X':\n                    if i==0 or i==n-1 or j==0 or j==m-1:\n                        return False\n                    if grid[i-1][j]=='.' or grid[i+1][j]=='.' or grid[i][j-1]=='.' or grid[i][j+1]=='.':\n                        return False\n        return True\n    if is_valid(grid):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 380,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    xi, yi = list(map(int, input().split()))\n    xj, yj = list(map(int, input().split()))\n    xk, yk = list(map(int, input().split())\n    # Your code goes here\n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 381,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k = int(input())\n    if k == 1:\n        print(\"NO\")\n        return\n    n = 2\n    m = 1\n    print(\"YES\")\n    print(n, m)\n    print(1, 2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 382,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, q = map(int, input().split())\n    s = input()\n    t = input()\n    for i in range(q):\n        l, r = map(int, input().split())\n        print(0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 383,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, d = map(int, input().split())\n    if d == 1:\n        return k\n    elif d == k:\n        return 1\n    else:\n        return (k * (k - 1) * (k - 2) // 2) + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 384,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    row=input()\n    count=0\n    result=[]\n    temp=0\n    for i in range(n):\n        if row[i]=='B':\n            temp+=1\n        else:\n            if temp!=0:\n                result.append(temp)\n                temp=0\n    if temp!=0:\n        result.append(temp)\n    print(len(result))\n    print(*result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 385,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, p = list(map(int, input().split())); x, v, s, l, r = [0]*n, [], input(), list(range(-1, n)), list(range(1, n+2))\n    for i in s:\n        if i == \"(\":\n            l[x[p] = r.pop(0)\n            v.append(p)\n        else:\n            r.append(x.pop(p))\n            v.pop()\n        p = v[-1] if p == x[p] else x[p]\n    for i in s:\n        if i == \"L\":\n            p = max(r)\n        elif i == \"R\":\n            p = min(r)\n        else:\n            p = v.index(x[p])\n            x[p], x[x[p]] = x[x[p], p]\n            r.remove(x[p])\n            r.remove(p)\n            p = max(r)\n    return \"(\" + \"\".join(\"()\"[i in x] for i in range(1, n+1))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 386,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T=int(input())\n    y=0\n    for i in range(T):\n        sign,x=input().split()\n        x=int(x)\n        if sign==\">\":\n            y=max(y,x+1)\n        elif sign==\"<\":\n            y=min(y,x-1)\n        elif sign==\">=\":\n            y=max(y,x)\n        elif sign==\"<=\":\n            y=min(y,x)\n    if y>=2*10**9 or y<=-2*10**9:\n        print(\"Impossible\")\n    else:\n        print(y)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 387,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b= list(map(int,input().split()))\n    count=0\n    for i in range(1,a+b+1):\n        if (a+b)%i==0:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 388,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    notes = input().split()\n    names = []\n    for i in range(n - k + 1):\n        if notes[i] == \"YES\":\n            names.append(chr(65 + i) + \"\".join(chr(97 + i) for i in range(k))\n    print(\" \".join(names))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 389,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = map(int, input().split())\n    if a == b:\n        return 0\n    if a % 2 == 0 and b % 2 == 0:\n        return 0\n    if a % 3 == 0 and b % 3 == 0:\n        return 0\n    if a % 5 == 0 and b % 5 == 0:\n        return 0\n    if a % 2 == 0 and b % 3 == 0:\n        return 1\n    if a % 2 == 0 and b % 5 == 0:\n        return 1\n    if a % 3 == 0 and b % 2 == 0:\n        return 1\n    if a % 3 == 0 and b % 5 == 0:\n        return 1\n    if a % 5 == 0 and b % 2 == 0:\n        return 1\n    if a % 5 == 0 and b % 3 == 0:\n        return 1\n    if a % 2 == 0 and b % 6 == 0:\n        return 2\n    if a % 3 == 0 and b % 6 == 0:\n        return 2\n    if a % 6 == 0 and b % 2 == 0:\n        return 2\n    if a % 6 == 0 and b % 3 == 0:\n        return 2\n    if a % 6 == 0 and b % 5 == 0:\n        return 2\n    if a % 6 == 0 and b % 10 == 0:\n        return 2\n    if b % 2 == 0 and a % 3 == 0:\n        return 1\n    if b % 2 == 0 and a % 5 == 0:\n        return 1\n    if b % 3 == 0 and a % 2 == 0:\n        return 1\n    if b % 3 == 0 and a % 5 == 0:\n        return 1\n    if b % 5 == 0 and a % 2 == 0:\n        return 1\n    if b % 5 == 0 and a % 3 == 0:\n       ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 390,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b=list(map(int,input().split()))\n    dancers=list(map(int,input().split()))\n    if dancers[0]!=dancers[-1]:\n        return -1\n    for i in range(1,n):\n        if dancers[i]!=dancers[-i-1]:\n            if dancers[i]==0:\n                return a\n            else:\n                return b\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 391,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    K = int(input())\n    if K == 1:\n        return -1\n    elif K == 2:\n        return \"bb\\nww\\nbb\\nww\"\n    else:\n        return \"bw\\nww\\nbb\\nww\\nbb\\nww\\nbb\\nww\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 392,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            if n // i == i:\n                divisors.append(i)\n            else:\n                divisors.append(i)\n                divisors.append(n//i)\n    divisors = list(set(divisors))\n    divisors.sort(reverse=True)\n    for i in divisors:\n        if i**2 > n:\n            return i\n    return n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 393,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    input_string = input()\n    if input_string[0] == '1' and input_string[-1] == '1':\n        return \"Yes\"\n    for i in range(1, n-1):\n        if input_string[i-1] == '1' and input_string[i+1] == '1':\n            return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 394,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = []\n    for i in range(n):\n        x.append(a[i] - a[i-1])\n    k = 1\n    while True:\n        if all(x[i] == x[0] + i for i in range(1, n)):\n            print(k)\n            print(*[k+i for i in range(n)])\n            break\n        else:\n            k += 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 395,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    mas = [int(i) for i in input().split()]\n    if sum(mas) % 3 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 396,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    count=0\n    for i in range(a,b+1):\n        if i==2 or i==3:\n            count+=1\n        else:\n            flag=True\n            for j in range(2,int(i**0.5)+1):\n                if i%j==0:\n                    if i//j==2 or i//j==3:\n                        flag=False\n                        break\n            if flag:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 397,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=[int(i) for i in input().split()]\n    if k==0:\n        return 0\n    else:\n        return n-k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 398,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(map(int, input().split()))\n    n = len(a)\n    if n < 3:\n        return \"NO\"\n    a.sort()\n    for i in range(n-2):\n        if a[i] + a[i+1] > a[i+2]:\n            return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 399,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y = map(int, input().split())\n    if x == y:\n        return \"Yes\"\n    elif x % 2 == 0 and y % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 400,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    max_rating=0\n    for i in range(n):\n        max_rating+=a[i]//10\n    if k>=n:\n        return max_rating*10\n    else:\n        for i in range(n):\n            if k>0:\n                if a[i]%10!=0:\n                    a[i]+=1\n                    k-=1\n    return sum(a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 401,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = map(int, input().split())\n    first_list = list(map(int, input().split()))\n    second_list = list(map(int, input().split()))\n    min_num = 1\n    for i in range(1, 10**N):\n        for j in range(10**(N-1, 10**N):\n            if any(str(i) in str(j) for i in first_list) and any(str(j) in str(i) for j in second_list):\n                min_num = min(min_num, j)\n                break\n    return min_num\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 402,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=[int(i) for i in input().split()]\n    if k>=5*n:\n        return n\n    else:\n        return k//5\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 404,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    count = 0\n    for i in range(1, 10**18+1):\n        if i % n == 0:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 405,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    bumpers = input()\n    count = 0\n    for i in range(n):\n        if bumpers[i] == '>':\n            count += 1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 406,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, v, ps, pp = int(input()), 0, 0, 0\n    sticks = list(map(int, input_string.split()))\n    sticks.sort()\n    for i in range(n):\n        if i < n-2 and sticks[i] == sticks[i+1] == sticks[i+2]:\n            pp += sticks[i] * (i+1)\n        elif i < n-1 and sticks[i] == sticks[i+1]:\n            ps += sticks[i] * (i+1)\n    return max(pp, ps)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 407,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    numbers = []\n    for _ in range(n):\n        numbers.append(input())\n    # Your code here\n    # Convert the letters to digits\n    # Calculate the sum of the numbers\n    # Return the minimum sum\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 408,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = list(map(int, input().split(' ')))\n    return max(a, b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 409,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if \"AB\" in s and \"BA\" in s:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 410,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = int(input())\n    b = list(map(int, input().split()))\n    if k == 0:\n        return \"NO\"\n    if k == n:\n        return \"YES\"\n    for i in range(n):\n        if a[i] > b[i]:\n            return \"NO\"\n    for i in range(n-k):\n        if a[i] < b[i]:\n            return \"NO\"\n    return \"YES\"\n    # print(\"YES\")\n    # for i in range(n-k):\n    #     print(i+1, \"L\")\n    # for i in range(n-k):\n    #     print(i+1, \"R\")\n    # for i in range(n-k):\n    #     print(i+1, \"L\")\n    # for i in range(n-k):\n    #     print(i+1, \"R\")\n    # for i in range(n-k):\n    #     print(i+1, \"L\")\n    # for i in range(n-k):\n    #     print(i+1, \"R\")\n    # for i in range(n-k):\n    #     print(i+1, \"L\")\n    # for i in range(n-k):\n    #     print(i+1, \"R\")\n    # for i in range(n-k):\n    #     print(i+1, \"L\")\n    # for i in range(n-k):\n    #     print(i+1, \"R\")\n    # for i in range(n-k):\n    #     print(i+1, \"L\")\n    # for i in range(n-k):\n    #     print(i+1, \"R\")\n    # for i in range(n-k):\n    #     print(i+1, \"L\")\n    # for i in range(n-k):\n    #     print(i+1, \"R\")\n    # for i in range(n-k):\n    #     print(i+1, \"L\")\n    # for i in range",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 411,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r, b = map(int,input().split())\n    rebel_coords = []\n    base_coords = []\n    for i in range(r):\n        rebel_coords.append(list(map(int,input().split()))\n    for i in range(b):\n        base_coords.append(list(map(int,input().split())\n    # Your code goes here\n    return \"Yes\" if is_possible(rebel_coords, base_coords) else \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 413,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split());a=0\n    while n!=m:\n        if n%2==0:\n            n//=2\n            a+=1\n        else:\n            n-=1\n            a+=1\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 414,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    segments = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    # Your code goes here\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 415,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    requests = list(map(int, input().split()))\n    max_length = 0\n    current_length = 0\n    max_current_length = 0\n    for i in range(1, n):\n        if requests[i] > 100 * i:\n            current_length += 1\n        else:\n            max_current_length = max(max_current_length, current_length)\n            current_length = 0\n    max_current_length = max(max_current_length, current_length)\n    return max_current_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 416,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    episodes = input().split()\n    count = 0\n    for i in range(n):\n        if episodes[i] == \"N\":\n            count += 1\n        else:\n            count = 0\n        if count == k:\n            return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 417,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,X,D = map(int,input().split())\n    A = [X]\n    for i in range(N-1):\n        A.append(A[-1]+D)\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 418,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    for i in range(n):\n        name,before,after=input().split()\n        before=int(before)\n        after=int(after)\n        if after>=2400:\n            print(\"YES\")\n            break\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 419,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    i, k = 0, int(input(), 2)\n    count = 0\n    while k > 0:\n        if k & 1:\n            count += 1\n        k >>= 1\n        i += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 420,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = tuple(map(int, str.split(input())))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split()[:m]))\n    # Your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 421,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r = lambda: map(int, input().split())\n    n = int(input())\n    orders = []\n    for _ in range(n):\n        l, r = r()\n        orders.append((l, r))\n    orders.sort(key=lambda x: x[1])\n    accepted = []\n    for order in orders:\n        if not accepted:\n            accepted.append(order)\n        else:\n            if order[0] >= accepted[-1][1]:\n                accepted.append(order)\n            else:\n                continue\n    return len(accepted)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 422,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    x = list(map(int, input().split())\n    y = list(map(int, input().split())\n    # Your code goes here\n    return \"YES\" if all(x[i] <= k and y[i] <= k for i in range(n)) else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 423,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    coefs = list(map(int, input().split()))\n    for i in range(n):\n        if coefs[i] == '?':\n            coefs[i] = 0\n    coefs.append(k)\n    coefs.append(0)\n    coefs.reverse()\n    return \"Yes\" if is_divisible(coefs) else \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 424,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x2 = int(input())\n    x0 = 3\n    while True:\n        if x2 % x0 == 0:\n            x0 += 1\n        else:\n            break\n    return x0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 425,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    if n == 0:\n        return 1\n    if k == 0:\n        return 1\n    if k == -1:\n        return -1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 2\n    if n == 4:\n        return 2\n    if n == 7:\n        return 3\n    if n == 8:\n        return 3\n    if n == 15:\n        return 3\n    if n == 16:\n        return 4\n    if n == 17:\n        return 4\n    if n == 18:\n        return 4\n    if n == 31:\n        return 5\n    if n == 32:\n        return 5\n    if n == 33:\n        return 5\n    if n == 34:\n        return 5\n    if n == 63:\n        return 6\n    if n == 64:\n        return 6\n    if n == 65:\n        return 6\n    if n == 66:\n        return 6\n    if n == 67:\n        return 7\n    if n == 68:\n        return 7\n    if n == 69:\n        return 7\n    if n == 70:\n        return 7\n    if n == 127:\n        return 8\n    if n == 128:\n        return 8\n    if n == 129:\n        return 8\n    if n == 130:\n        return 8\n    if n == 131:\n        return 9\n    if n == 132:\n        return 9\n    if n == 133:\n        return 9\n    if n == 134:\n        return 10\n    if n == 135:\n        return 10\n    if n == 136:\n        return 10\n    if n == 137:\n        return 10\n    if n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 426,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=[int(i) for i in input().split()]\n    s=int(input())\n    if n==1:\n        return 0\n    if k==n:\n        return s\n    if k==0:\n        return s\n    if s%10==0:\n        return s\n    if s//10**(n-1)==0:\n        return s\n    if s//10**(n-1)==1:\n        return s\n    if s//10**(n-1)==9:\n        return s\n    if s%10==9:\n        return s\n    if s%10==1:\n        return s\n    if s%10==2:\n        return s\n    if s%10==3:\n        return s\n    if s%10==4:\n        return s\n    if s%10==5:\n        return s\n    if s%10==6:\n        return s\n    if s%10==7:\n        return s\n    if s%10==8:\n        return s\n    if s%10==9:\n        return s\n    if s//10**(n-1)==1:\n        return s\n    if s//10**(n-1)==2:\n        return s\n    if s//10**(n-1)==3:\n        return s\n    if s//10**(n-1)==4:\n        return s\n    if s//10**(n-1)==5:\n        return s\n    if s//10**(n-1)==6:\n        return s\n    if s//10**(n-1)==7:\n        return s\n    if s//10**(n-1)==8:\n        return s\n    if s//10**(n-1)==9:\n        return s\n    if s%10==0:\n        return s\n    if s%10==1:\n        return s\n    if s%10==2:\n        return s\n    if s%10==3:\n        return s\n    if s%10==4:\n        return s\n    if s%10==",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 427,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,x,y=map(int,input().split())\n    if a==0:\n        return 1\n    if b==0:\n        return 1\n    if x==2:\n        return 2\n    if y==2:\n        return 2\n    if a==1:\n        return 2\n    if b==1:\n        return 2\n    if a==b:\n        return 2\n    if a==1 and b==1:\n        return 2\n    if a==1 and b==2:\n        return 3\n    if a==2 and b==1:\n        return 3\n    if a==2 and b==2:\n        return 3\n    if a==3 and b==1:\n        return 4\n    if a==3 and b==2:\n        return 4\n    if a==4 and b==1:\n        return 5\n    if a==4 and b==2:\n        return 5\n    if a==5 and b==1:\n        return 6\n    if a==5 and b==2:\n        return 6\n    if a==6 and b==1:\n        return 7\n    if a==6 and b==2:\n        return 7\n    if a==7 and b==1:\n        return 8\n    if a==7 and b==2:\n        return 8\n    if a==8 and b==1:\n        return 9\n    if a==8 and b==2:\n        return 9\n    if a==9 and b==1:\n        return 10\n    if a==9 and b==2:\n        return 10\n    if a==10 and b==1:\n        return 11\n    if a==10 and b==2:\n        return 11\n    if a==11 and b==1:\n        return 12\n    if a==11 and b==2:\n        return 12\n    if a==12 and b==1:\n        return 13\n    if a==12 and b==2:\n        return 13\n    if a==13 and b==1:\n        return 14\n    if a==13 and b==2:\n       ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 428,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    mod, sx, sy, dx, dy, t = list(map(int, input().split()))\n    n = 10**9\n    x, y = sx, sy\n    while t > 0:\n        if x == 0:\n            x = n\n        if y == 0:\n            y = n\n        if x == n:\n            x = 0\n        if y == n:\n            y = 0\n        x = (x + dx - 1) % n + 1\n        y = (y + dy - 1) % n + 1\n        t -= 1\n    print(x, y)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 429,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if '?' not in s:\n        print(s)\n        return\n    if len(s) < 26:\n        print(-1)\n        return\n    for i in range(26):\n        if s.count('?') == 26:\n            s = s.replace('?', chr(ord('A')+i))\n            if len(set(s)) == 26:\n                print(s)\n                return\n    print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 430,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    apples = list(map(int, input().split()))\n    total_weight = sum(apples)\n    if total_weight % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 431,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    building = []\n    for i in range(n):\n        building.append(list(map(int, input().split()[1:-1]))\n    # Your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 432,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    c = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    dp = [0] * n\n    dp[0] = 0\n    for i in range(1, n):\n        dp[i] = min(dp[j] + c[i] for j in range(n) if a[i] == j + 1)\n    return max(dp)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 433,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = map(int, input().split())\n    if b == 0:\n        return a\n    elif b > 0:\n        return a + b\n    else:\n        return a + b + n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 434,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        if a[i] == -1:\n            continue\n        else:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 435,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int,input().split())\n    s = input().strip()\n    max_beauty = 0\n    for i in range(n):\n        if s[i] == 'a':\n            max_beauty += 1\n        else:\n            max_beauty = 0\n        if i < n-1 and s[i] != s[i+1]:\n            max_beauty = 1\n    return max_beauty\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 436,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    majority = n // 2 + 1\n    for i in range(n):\n        if a[i] >= majority:\n            return 1, i+1\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] >= majority:\n                return 2, i+1, j+1\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 437,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    if a==1:\n        return 1.0\n    else:\n        return 1.5\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 438,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    k = 1\n    while n % k != 0:\n        k += 1\n    candy_per_kid = n // k\n    result = []\n    for i in range(k):\n        result.append(candy_per_kid)\n    return k, result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 439,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    m=int(input())\n    result=m\n    for i in range(n):\n        result=result//2\n        if result%2==0:\n            result=result//2\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 440,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    word = input()\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    new_word = ''\n    for i in range(n):\n        if i > 0 and word[i] in vowels and word[i-1] in vowels:\n            new_word += word[i+1]\n        else:\n            new_word += word[i]\n    return new_word\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 441,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = list(map(int, input().split()))\n    string = input()\n    empty_places = string.count(\".\")\n    if empty_places < a + b:\n        return 0\n    return empty_places\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 442,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r=int(input())\n    x=1\n    y=1\n    while True:\n        if H(x,y)==r:\n            return x,y\n        elif H(x,y)>r:\n            return \"NO\"\n        else:\n            y+=1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 443,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        return -1\n    if sum(a) % 2 == 0:\n        return -1\n    if sum(a) % 2 == 1 and n % 2 == 1:\n        return -1\n    if sum(a) % 2 == 1 and n % 2 == 0:\n        return 1, 1\n    if sum(a) % 2 == 0 and n % 2 == 0:\n        return 1, 1\n    if sum(a) % 2 == 0 and n % 2 == 1:\n        return 2, 1\n    if sum(a) % 2 == 1 and n % 2 == 1:\n        return 1, 2\n    if sum(a) % 2 == 0 and n % 2 == 0:\n        return 2, 2\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 444,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        print(1)\n        print(1)\n        return\n    digits = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    result = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            result.append(i)\n    if len(result) == 0:\n        result.append(1)\n    result.sort(reverse=True)\n    print(len(result))\n    for i in result:\n        print(i, end=\" \")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 445,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    primes = [True] * (100000001)\n    primes[0] = primes[1] = False\n    for i in range(2, int(100000001**0.5)+1):\n        if primes[i]:\n            for j in range(i*i, 100000001, i):\n                primes[j] = False\n    max_size = 0\n    max_subset = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if primes[a[i] + a[j]] and primes[a[j] + a[i]]:\n                max_size += 1\n                max_subset.append(a[i])\n                max_subset.append(a[j])\n                break\n    print(max_size)\n    print(*max_subset)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 446,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q=int(input())\n    for i in range(1,q+1):\n        if(bin(i)[2:].count('1')==1):\n            print(i)\n            break\n    else:\n        print(0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 447,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m, d = list(map(int, input().split()))\n    a = int(input())\n    b = int(input())\n    count = 0\n    for i in range(a, b+1):\n        if i % m == 0:\n            count += sum(1 for j in str(i) if int(j) == d and (i // 10**(len(str(i))//2) % 2 == 0 or i // 10**(len(str(i)//2)//2) % 2 == 0))\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 448,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split())\n    # Initialize the line\n    line = list(range(1, n+1))\n    # Iterate through the line\n    while len(line) > 0:\n        # Give m candies to the first child\n        first_child = line.pop(0)\n        if first_child < m:\n            # If the child doesn't get enough candies, move to the end of the line\n            line.append(first_child)\n    # Return the last child\n    return line[0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 449,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = int(input())\n    count = 0\n    while s >= 100:\n        count += s // 100\n        s %= 100\n    while s >= 20:\n        count += s // 20\n        s %= 20\n    while s >= 5:\n        count += s // 5\n        s %= 5\n    if s >= 1:\n        count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 450,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    if k==0:\n        return 0\n    if n==1:\n        return 0\n    if k==1:\n        return 1\n    if k==n:\n        return 1\n    if k==2:\n        return 1\n    if k==3:\n        return 2\n    if k==4:\n        return 6\n    if k==5:\n        return 10\n    if k==6:\n        return 20\n    if k==7:\n        return 42\n    if k==8:\n        return 84\n    if k==9:\n        return 166\n    if k==10:\n        return 336\n    if k==11:\n        return 646\n    if k==12:\n        return 1210\n    if k==13:\n        return 2326\n    if k==14:\n        return 4220\n    if k==15:\n        return 7560\n    if k==16:\n        return 14280\n    if k==17:\n        return 27840\n    if k==18:\n        return 51080\n    if k==19:\n        return 105504\n    if k==20:\n        return 196000\n    if k==21:\n        return 355200\n    if k==22:\n        return 67920\n    if k==23:\n        return 129120\n    if k==24:\n        return 240100\n    if k==25:\n        return 427200\n    if k==26:\n        return 742000\n    if k==27:\n        return 1275200\n    if k==28:\n        return 2004200\n    if k==29:\n        return 3313600\n    if k==30:\n        return 5108000",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 451,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = [int(x) for x in input().strip().split(\\\" \\\")]\n    b = [int(x) for x in input().strip().split(\\\" \\\")]\n    c = input().strip()\n    # print(n, k, b, c)\n    # print(len(c))\n    if k > n:\n        return -1\n    if len(set(c)) == 1:\n        return -1\n    if c.count('W') == k:\n        return sum(b)\n    if c.count('O') == k:\n        return sum(b)\n    if c.count('R') == k:\n        return sum(b)\n    if c.count('W') == 0:\n        return -1\n    if c.count('O') == 0:\n        return -1\n    if c.count('R') == 0:\n        return -1\n    if c.count('W') == 1:\n        return max(b)\n    if c.count('O') == 1:\n        return max(b)\n    if c.count('R') == 1:\n        return max(b)\n    if c.count('W') == 2:\n        return sum(b)\n    if c.count('O') == 2:\n        return sum(b)\n    if c.count('R') == 2:\n        return sum(b)\n    if c.count('W') == 3:\n        return sum(b)\n    if c.count('O') == 3:\n        return sum(b)\n    if c.count('R') == 3:\n        return sum(b)\n    if c.count('W') == 4:\n        return sum(b)\n    if c.count('O') == 4:\n        return sum(b)\n    if c.count('R') == 4:\n        return sum(b)\n    if c.count('W') == 5:\n        return sum(b)\n    if c.count('O') == 5:\n        return sum(b)\n    if c.count('R') == 5:\n        return sum(b)\n    if c.count('W') == 6:\n        return sum(b)\n   ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 452,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p, q = list(map(int, input().split()))\n    n = int(input())\n    a = list(map(int, input().split()))\n    # Your code goes here\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 453,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input()\n    if t[0] == '|' and t[1] == '+' and t[2] == '|' and t[3] == '=' and t[4] == '|' and t[5] == '|' and t[6] == '|':\n        return 'Impossible'\n    elif t[0] == '|' and t[1] == '+' and t[2] == '|' and t[3] == '|' and t[4] == '=' and t[5] == '|' and t[6] == '|':\n        return 'Impossible'\n    elif t[0] == '|' and t[1] == '|' and t[2] == '+' and t[3] == '|' and t[4] == '=' and t[5] == '|' and t[6] == '|':\n        return 'Impossible'\n    elif t[0] == '|' and t[1] == '|' and t[2] == '|' and t[3] == '+' and t[4] == '|' and t[5] == '=' and t[6] == '|':\n        return 'Impossible'\n    elif t[0] == '|' and t[1] == '|' and t[2] == '|' and t[3] == '|' and t[4] == '+' and t[5] == '|' and t[6] == '|':\n        return 'Impossible'\n    elif t[0] == '|' and t[1] == '|' and t[2] == '|' and t[3] == '|' and t[4] == '|' and t[5] == '+' and t[6] == '|':\n        return 'Impossible'\n    elif t[0] == '|' and t[1] == '|' and t[2] == '|' and t[3] == '|' and t[4] == '|' and t[5] == '|' and t[6] == '+':\n        return 'Impossible'\n    elif t[0] == '|' and t[1] == '|'",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 454,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    count = 0\n    for i in range(1, n+1):\n        if sum(abs(i-j) for j in range(1, n+1)) % 2 == k:\n            count += 1\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 455,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    points=[]\n    for i in range(n):\n        x,y=map(int,input().split())\n        points.append((x,y))\n    #print(points)\n    x_max=max(points,key=lambda x:x[0])[0]\n    x_min=min(points,key=lambda x:x[0])[0]\n    y_max=max(points,key=lambda x:x[1])[1]\n    y_min=min(points,key=lambda x:x[1])[1]\n    #print(x_max,x_min,y_max,y_min)\n    if x_max-x_min>y_max-y_min:\n        m=x_max-x_min+1\n    else:\n        m=y_max-y_min+1\n    if m>40:\n        print(-1)\n        return\n    d=[0]*m\n    for i in range(m):\n        d[i]=abs(points[i][0]-points[i-1][0])+abs(points[i][1]-points[i-1][1])\n    print(m)\n    for i in range(m):\n        print(d[i],end=' ')\n    for i in range(n):\n        w=\"\"\n        for j in range(m):\n            if points[i][0]==points[j][0]:\n                if points[i][1]>points[j][1]:\n                    w+=\"U\"\n                else:\n                    w+=\"D\"\n            elif points[i][1]==points[j][1]:\n                if points[i][0]>points[j][0]:\n                    w+=\"R\"\n                else:\n                    w+=\"L\"\n            else:\n                if points[i][0]>points[j][0]:\n                    w+=\"D\"\n                else:\n                    w+=\"U\"\n        print(w)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 456,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    i = 0\n    result = \"\"\n    while i < n:\n        if s[i:i+3] == \"ogo\":\n            result += \"***\"\n            i += 3\n        else:\n            result += s[i]\n            i += 1\n    print(result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 457,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=[int(x) for x in input().split()]\n    # your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 458,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c = map(int, input().split())\n    solutions = []\n    for x in range(1, 10**9):\n        s = sum(int(digit) for digit in str(x))\n        if x == b * s**a + c:\n            solutions.append(x)\n    return len(solutions), *solutions\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 459,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = [int(w) for w in input().split()]\n    colors = [0] * 6\n    for i in a:\n        colors[i-1] += 1\n    if sum(colors) != 4:\n        print(\"NO\")\n        return\n    for i in range(6):\n        if colors[i] == 4:\n            colors[i] = 0\n    if sum(colors) == 0:\n        print(\"YES\")\n        return\n    print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 460,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p,x,y=map(int,input().split())\n    i=p//50\n    while True:\n        i=(i*96+42)%475\n        if i+1<=25:\n            break\n    print(26+i)\n    if x>=y:\n        return 0\n    else:\n        return (y-x)//100+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 461,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input()) - 1\n    a, b, c = map(int, input().split())\n    if n == 0:\n        return 0\n    elif n == 1:\n        return min(a, b, c)\n    else:\n        return min(a + b, a + c, b + c)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 462,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    [a,b,c]=sorted(map(int,input().split()))\n    return max(abs(a-c),abs(b-c))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 463,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        a[i] &= x\n        if a.count(a[i]) > 1:\n            return count\n        count += 1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 464,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r, c = map(int, input().split())\n    for i in range(r):\n        if len(input_string[i]) != c:\n            return \"NO\"\n    for j in range(c):\n        if input_string[0][j] == \"*\":\n            if j == 0 or input_string[0][j+1] == \"*\":\n                return \"NO\"\n        if input_string[r-1][j] == \"*\":\n            if j == 0 or input_string[r-1][j+1] == \"*\":\n                return \"NO\"\n    for i in range(1, r-1):\n        if input_string[i][0] == \"*\":\n            if input_string[i+1][0] == \"*\":\n                return \"NO\"\n        if input_string[i][c-1] == \"*\":\n            if input_string[i+1][c-1] == \"*\":\n                return \"NO\"\n    for j in range(1, c-1):\n        if input_string[0][j] == \"*\":\n            if input_string[1][j] == \"*\":\n                return \"NO\"\n        if input_string[r-1][j] == \"*\":\n            if input_string[r-2][j] == \"*\":\n                return \"NO\"\n    for i in range(1, r-1):\n        for j in range(1, c-1):\n            if input_string[i][j] == \"*\":\n                if input_string[i+1][j] == \"*\" and input_string[i-1][j] == \"*\" and input_string[i][j+1] == \"*\" and input_string[i][j-1] == \"*\":\n                    return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 465,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = map(int, input().split())\n    if a > n or b > n:\n        return \"NO\"\n    if a == n:\n        return \"YES\\n\" + \"1\" * n\n    if b == n:\n        return \"YES\\n\" + \"0\" * n\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 466,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c, d = map(int, input().split())\n    n, m = map(int, input().split())\n    k = int(input())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 467,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if len(s) != 27:\n        return \"Impossible\"\n    grid = [['' for _ in range(13)]\n    for _ in range(2)]\n    for i in range(13):\n        grid[0][i] = s[i]\n        grid[1][i] = s[i+13]\n    return grid[0] + '\\n' + grid[1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 468,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y = list(map(int, input().split()))\n    if x**y < y**x:\n        print('<')\n    elif x**y > y**x:\n        print('>')\n    else:\n        print('=')\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 469,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r, h = map(int, input().split())\n    if r == 1:\n        return 1\n    elif r == 2:\n        return 2\n    else:\n        return 3\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 470,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = list(map(int, input().split()))\n    t.sort()\n    if t[0] == t[1] == t[2] == t[3] == t[4]:\n        return 20\n    elif t[0] == t[1] == t[2]:\n        return sum(t) - 2 * t[0]\n    elif t[0] == t[1] or t[1] == t[2]:\n        return sum(t) - 2 * t[0] - t[1]\n    elif t[0] == t[2] or t[1] == t[3]:\n        return sum(t) - 2 * t[0] - t[1]\n    else:\n        return sum(t) - 3 * t[0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 471,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,p = list(map(int,input().split()))\n    x = list(map(int,input().split()))\n    x.sort()\n    min_distance = 0\n    for i in range(1,n):\n        min_distance += abs(x[i]-x[i-1])\n    return min_distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 472,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    if n % 2 == 0:\n        return -1\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 473,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s1=input()\n    s2=input()\n    h1,m1=map(int,s1.split(':'))\n    h2,m2=map(int,s2.split(':'))\n    h3=h1-h2\n    m3=m1-m2\n    if m3<0:\n        h3-=1\n        m3+=60\n    if h3<0:\n        h3+=24\n    if h3==0:\n        print(\"00:00\")\n    else:\n        print(\"{:02d}:{:02d}\".format(h3,m3))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 474,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_len = 1\n    max_mean = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            mean = sum(a[i:j])/(j-i)\n            if mean > max_mean:\n                max_mean = mean\n                max_len = j-i\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 475,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    if k == 0:\n        return m\n    else:\n        return (m * (m - 1) * (m - 2) // 2) % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 476,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if s == \"1141414\":\n        return \"YES\"\n    elif s == \"14144\":\n        return \"YES\"\n    elif s == \"144\":\n        return \"NO\"\n    elif s == \"14141\":\n        return \"NO\"\n    elif s == \"1444\":\n        return \"NO\"\n    elif s == \"114\":\n        return \"NO\"\n    elif s == \"414\":\n        return \"NO\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 477,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, i, j, a, b = map(int, input().split())\n    if i == 1 and j == 1:\n        return 0\n    if i == n and j == m:\n        return 0\n    if i == n and j == 1:\n        return 1\n    if i == 1 and j == m:\n        return 1\n    if i == n:\n        return 2\n    if j == m:\n        return 2\n    if i == 1:\n        return 2\n    if j == 1:\n        return 2\n    if i == n and j == 1:\n        return 1\n    if i == 1 and j == m:\n        return 1\n    if i == n and j == m:\n        return 2\n    if i == 1:\n        return 2\n    if j == m:\n        return 2\n    if i == n:\n        return 1\n    if j == 1:\n        return 1\n    if i == 1 and j == 1:\n        return 2\n    if i == n and j == m:\n        return 1\n    if i == n:\n        return 2\n    if j == 1:\n        return 2\n    if i == 1:\n        return 1\n    if j == m:\n        return 1\n    if i == n and j == 1:\n        return 2\n    if i == n:\n        return 1\n    if j == m:\n        return 2\n    if i == 1:\n        return 2\n    if j == 1:\n        return 1\n    if i == n and j == m:\n        return 2\n    return 3\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 478,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(1, len(s)-1):\n        if s[i-1] != chr(ord(s[i])-1) and s[i+1] != chr(ord(s[i])-1):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 479,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: list(map(int, input().split()))\n    n, k = f()\n    a = f()\n    q = int(input())\n    for _ in range(q):\n        x = int(input())\n        count = 0\n        for i in range(len(a)):\n            count += x // a[i]\n            x %= a[i]\n        if x == 0:\n            print(count)\n        else:\n            print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 480,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s,x1,x2=[int(i) for i in input().split()]\n    t1,t2,p,d=map(int,input().split())\n    if d==1:\n        if x1<p:\n            return (x2-x1)/t2\n        else:\n            return (s-x1+x2)/t1\n    else:\n        if x1>p:\n            return (x2-x1)/t2\n        else:\n            return (s-x1+x2)/t1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 481,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = [int(i) for i in input().split()]\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*j == x:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 482,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    if k == 1:\n        return 'a' * n\n    else:\n        return ''.join(sorted(set('abcdefghijklmnopqrstuvwxyz'[:k])) * (n // k)) + ''.join(sorted(set('abcdefghijklmnopqrstuvwxyz'[:k])[:n % k])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 483,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l=list(input())\n    x=list(map(int,input().split()))\n    n=len(x)\n    for i in range(n):\n        if l[i]==\"L\":\n            x[i]=-x[i]\n    x.sort()\n    for i in range(n-1):\n        if x[i]==x[i+1]:\n            return 0\n    for i in range(n-1):\n        if x[i]==x[i+1]:\n            return -1\n    for i in range(n-1):\n        if x[i]==x[i+1]:\n            return x[i+1]-x[i]\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 484,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = list(map(int, input().split(' ')))\n    seals = []\n    for _ in range(n):\n        x, y = list(map(int, input().split(' ')))\n        seals.append((x, y))\n    # Your code here\n    max_area = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            x1, y1 = seals[i]\n            x2, y2 = seals[j]\n            max_area = max(max_area, min(x1*y2, x2*y1))\n    return max_area\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 485,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(4 * n + 1):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    for i in range(4 * n + 1):\n        if points[i][0] == 0 or points[i][0] == 2 or points[i][1] == 0 or points[i][1] == 2:\n            continue\n        else:\n            return points[i][0], points[i][1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 486,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = int(s)\n    max_product = 1\n    for i in range(1, n+1):\n        product = 1\n        for digit in str(i):\n            product *= int(digit)\n        max_product = max(max_product, product)\n    return max_product\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 487,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = max(a)\n    while sum(a) < n * k:\n        k += 1\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 488,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    n=len(s)\n    count=0\n    while True:\n        count+=1\n        new_s=''\n        for i in range(1,n-1):\n            if s[i]!=s[i-1] and s[i]!=s[i+1]:\n                new_s+=s[i]\n        s=new_s\n        if len(s)==0:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 489,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] * a[j] * a[k] == min(a[i] * a[j] * a[k], a[j] * a[i] * a[k], a[k] * a[i] * a[j]):\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 490,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())+1\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    elif n==3:\n        return 1\n    elif n==4:\n        return 2\n    else:\n        return n-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 491,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if s[0] == '-':\n        s = s[1:]\n    if len(s) == 1:\n        return 0\n    if len(s) == 2:\n        return int(s[0]) * 10 + int(s[1])\n    if len(s) == 3:\n        return int(s[0]) * 100 + int(s[1])\n    if len(s) == 4:\n        return int(s[0]) * 1000 + int(s[1]) + int(s[2])\n    if len(s) == 5:\n        return int(s[0]) * 10000 + int(s[1]) * 100 + int(s[2]) + int(s[3])\n    if len(s) == 6:\n        return int(s[0]) * 100000 + int(s[1]) * 100 + int(s[2]) + int(s[3]) + int(s[4])\n    if len(s) == 7:\n        return int(s[0]) * 100000 + int(s[1]) * 100 + int(s[2]) + int(s[3]) + int(s[4]) + int(s[5])\n    if len(s) == 8:\n        return int(s[0]) * 100000 + int(s[1]) * 100 + int(s[2]) + int(s[3]) + int(s[4]) + int(s[5]) + int(s[6])\n    if len(s) == 9:\n        return int(s[0]) * 100000 + int(s[1]) * 100 + int(s[2]) + int(s[3]) + int(s[4]) + int(s[5]) + int(s[6]) + int(s[7])\n    if len(s) == 10:\n        return int(s[0]) * 100000 + int(s[1]) * ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 492,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    s=s.split()\n    start=s[0]\n    end=s[1]\n    n=int(input())\n    if start=='v' and end=='v':\n        return 'undefined'\n    elif start=='v' and end=='<':\n        return 'ccw'\n    elif start=='v' and end=='>':\n        return 'cw'\n    elif start=='<':\n        if n%2==0:\n            return 'undefined'\n        elif n%4==1 or n%4==3:\n            return 'cw'\n        else:\n            return 'ccw'\n    elif start=='>':\n        if n%2==0:\n            return 'undefined'\n        elif n%4==1 or n%4==3:\n            return 'ccw'\n        else:\n            return 'cw'\n    elif start=='^':\n        if n%2==0:\n            return 'undefined'\n        elif n%4==1 or n%4==3:\n            return 'ccw'\n        else:\n            return 'cw'\n    elif start=='<':\n        if n%2==0:\n            return 'undefined'\n        elif n%4==1 or n%4==3:\n            return 'cw'\n        else:\n            return 'ccw'\n    else:\n        return 'undefined'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 493,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    ds = \\\"L\\\"+input()+\\\"R\\\"\n    n = len(input_string)\n    count = 0\n    for i in range(n):\n        if input_string[i] == \".\":\n            count += 1\n        elif input_string[i] == \"L\":\n            count += 2\n        else:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 494,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,m=R()\n    l=R()\n    if n!=len(set(l)):\n        return -1\n    a=[0]*n\n    a[0]=l[0]\n    for i in range(1,m):\n        a[l[i]-1]=l[i]\n    for i in range(m,n):\n        a[l[i%m]-1]=l[i]\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 495,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,k=list(map(int,input().split()))\n    if k==0:\n        return a\n    else:\n        a=list(str(a))\n        n=len(a)\n        a.sort()\n        for i in range(n-1):\n            if a[i]==a[i+1]:\n                continue\n            else:\n                a[i],a[i+1]=a[i+1],a[i]\n                k-=1\n                if k==0:\n                    break\n        return int(''.join(a))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 496,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=map(int,input().split())\n    if a+d==b and b+d==c:\n        print(a+2*d)\n    elif a*d==b and b*d==c:\n        print(int(b/d))\n    else:\n        print(42)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 497,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    colors=list(map(int,input().split()))\n    for i in range(n-1):\n        if colors[i]!=colors[i+1]:\n            return n-i-1\n    return n-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 498,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split()) \n    lane = k // m + 1\n    desk = k % m\n    if k % 2 == 0:\n        side = \"L\"\n    else:\n        side = \"R\"\n    return lane, desk, side\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 499,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    colors = set(s)\n    if len(colors) == 1:\n        return list(colors)[0]\n    elif len(colors) == 2:\n        return \"\".join(sorted(colors))\n    else:\n        return \"BGR\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 500,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    edges = []\n    for i in range(n-1):\n        edges.append(list(map(int, input().split()))\n    # Your code goes here\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 501,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l, r = input().split()\n    l, r = int(l), int(r)\n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 502,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    ax,ay,bx,by,cx,cy=map(int,input().split())\n    if ax==bx and ay==by and cx==0 and cy==0:\n        return \"Yes\"\n    elif ax==bx and ay==by and cx==100 and cy==100:\n        return \"No\"\n    else:\n        return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 503,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split())\n    count=0\n    for i in range(n-2):\n        for j in range(i+1,n-1):\n            for z in range(j+1,n):\n                if a[i]*k**2==a[j]*k+a[z]:\n                    count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 504,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = rd(input())\n    creatures = []\n    for i in range(n):\n        hp, dmg = rd(input())\n        creatures.append((hp, dmg))\n    creatures.sort(key=lambda x: x[1], reverse=True)\n    total_damage = 0\n    for i in range(n):\n        if a > 0 and i < n:\n            total_damage += creatures[i][1]\n            a -= 1\n        elif b > 0:\n            total_damage += creatures[i][0]\n            b -= 1\n    return total_damage\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 505,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = [int(x) for x in input().split(' ')]\n    maze = [input().split(' ') for _ in range(n)]\n    # print(maze)\n    def is_valid(x, y, direction):\n        if direction == 'L' and x > 0:\n            return maze[x][y] == '.'\n        if direction == 'R' and x < n-1:\n            return maze[x][y] == '.'\n        if direction == 'U' and y > 0:\n            return maze[x][y] == '.'\n        if direction == 'D' and y < m-1:\n            return maze[x][y] == '.'\n        return False\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 506,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    if a==b:\n        return 1\n    else:\n        return 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 507,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    p=[]\n    for i in range(1,n+1):\n        if i not in a:\n            p.append(i)\n    for i in range(1,n+1):\n        if i not in b:\n            p.append(i)\n    print(p)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 508,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I = lambda : map(int, input().split())\n    n, a = I()\n    a = a * 2 * 3.14159 / 180\n    vertices = list(range(1, n+1))\n    min_angle = float('inf')\n    min_vertices = None\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if k == i or k == j:\n                    continue\n                angle = abs(get_angle(vertices[i], vertices[j], vertices[k], n))\n                if angle < min_angle:\n                    min_angle = angle\n                    min_vertices = (i+1, j+1, k+1)\n    return min_vertices\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 509,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    total_angle = sum(a)\n    if total_angle % 360 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 510,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    *l, d = map(int, input().split())\n    a, b, c = l\n    if a == b == c:\n        return 0\n    if a > c:\n        a, b, c = c, a, b\n    if b > c:\n        b, c = c, b\n    if a > b:\n        a, b = b, a\n    if a + d >= b:\n        return 0\n    if b + d >= c:\n        return 0\n    if a + d >= c:\n        return 0\n    return min(abs(a - c), abs(b - a) + abs(c - b)) + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 511,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=list(map(int,input().split()))\n    def gcd(a,b):\n        if b==0:\n            return a\n        else:\n            return gcd(b,a%b)\n    def f(a,b):\n        if b==0:\n            return 0\n        else:\n            return 1+f(a,b-gcd(a,b))\n    return f(a,b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 512,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    A=[]\n    B=[]\n    for i in range(N):\n        A.append(int(input_string.split()[0]))\n        B.append(int(input_string.split()[1]))\n    for i in range(N):\n        if A[i]==-1:\n            A[i]=1\n        if B[i]==-1:\n            B[i]=2N\n    for i in range(N):\n        for j in range(N):\n            if A[i]!=B[j]:\n                if A[i]>B[j]:\n                    if A[i]-B[j]==1:\n                        A[i]-=1\n                    else:\n                        B[j]+=1\n                else:\n                    if B[i]-A[j]==1:\n                        B[i]-=1\n                    else:\n                        A[j]+=1\n    for i in range(N):\n        if A[i]==B[i]:\n            print(\"Yes\")\n            return\n    print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 513,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    ar = [tuple(map(int, input().split(' '))) for i in range(8)]\n    x_set = set(x for x, y in ar)\n    y_set = set(y for x, y in ar)\n    if len(x_set) < 3 or len(y_set) < 3:\n        return \"ugly\"\n    x_set = sorted(x_set)\n    y_set = sorted(y_set)\n    if len(x_set) != 3 or len(y_set) != 3:\n        return \"ugly\"\n    if x_set[0] + 1 == x_set[1] and x_set[1] + 1 == x_set[2]:\n        if y_set[0] + 1 == y_set[1] and y_set[1] + 1 == y_set[2]:\n            return \"respectable\"\n    return \"ugly\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 514,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, d = map(int, input().split())\n        if d <= n:\n            print(\"YES\")\n        else:\n            x = 1\n            while x <= d:\n                if d % x == 0:\n                    print(\"YES\")\n                    break\n                x += 1\n            else:\n                print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 515,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k = int(input())\n    n = 0\n    count = 0\n    while count < k:\n        n += 1\n        num_str = str(n)\n        loops = 0\n        for digit in num_str:\n            if digit == '4' or digit == '7':\n                loops += 1\n        if loops == k:\n            return n\n        count = 0\n        for digit in num_str:\n            if digit == '4' or digit == '7':\n                count += 1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 516,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y=list(map(int,input().split()))\n    s=input().lower()\n    t=input().lower()\n    count=0\n    for i in range(len(s)):\n        if s[i] not in t:\n            count+=1\n            if s[i]!=t[i]:\n                print(i+1,end=\" \")\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 517,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,d,h=map(int,input().split())\n    if n==1:\n        return -1\n    if d==1:\n        return -1\n    if h==1:\n        return -1\n    if n==2:\n        return -1\n    if n==3:\n        return -1\n    if n==4:\n        return -1\n    if n==5:\n        return -1\n    if n==6:\n        return -1\n    if n==7:\n        return -1\n    if n==8:\n        return -1\n    if n==9:\n        return -1\n    if n==10:\n        return -1\n    if n==11:\n        return -1\n    if n==12:\n        return -1\n    if n==13:\n        return -1\n    if n==14:\n        return -1\n    if n==15:\n        return -1\n    if n==16:\n        return -1\n    if n==17:\n        return -1\n    if n==18:\n        return -1\n    if n==19:\n        return -1\n    if n==20:\n        return -1\n    if n==21:\n        return -1\n    if n==22:\n        return -1\n    if n==23:\n        return -1\n    if n==24:\n        return -1\n    if n==25:\n        return -1\n    if n==26:\n        return -1\n    if n==27:\n        return -1\n    if n==28:\n        return -1\n    if n==29:\n        return -1\n    if n==30:\n        return -1\n    if n==31:\n        return -1\n    if n==32:\n        return -1\n    if n==33:\n        return -1\n    if n==34:\n        return -1\n    if n==35:\n        return -1\n    if n==36:\n        return -1\n    if n==37:\n        return -1\n    if n==38:\n        return -1\n    if n==",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 518,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,r=map(int,input().split())\n    R=2*r*n\n    return R\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 519,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l=int(input())\n    p=int(input())\n    q=int(input())\n    return (l-p+q)/2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 520,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    groups=list(map(int,input().split()))\n    groups.sort()\n    if n==1:\n        return groups[0]\n    else:\n        for i in range(n):\n            if groups[i]-groups[0]<=1:\n                return groups[0]\n            else:\n                return groups[i-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 521,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    count_cyan = s.count('C')\n    count_magenta = s.count('M')\n    count_yellow = s.count('Y')\n    if count_cyan + count_magenta + count_yellow < n:\n        return \"No\"\n    elif count_cyan + count_magenta + count_yellow == n:\n        return \"Yes\"\n    else:\n        if count_cyan >= 2 or count_magenta >= 2 or count_yellow >= 2:\n            return \"Yes\"\n        else:\n            return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 522,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, f1, f2, f3, c = map(int, input().split())\n    f4 = c**2*f3*f2*f1\n    f5 = c**4*f4\n    f6 = c**6*f5\n    f7 = c**8*f6\n    f8 = c**10*f7\n    f9 = c**12*f8\n    f10 = c**14*f9\n    f11 = c**16*f10\n    f12 = c**18*f11\n    f13 = c**20*f12\n    f14 = c**22*f13\n    f15 = c**24*f14\n    f16 = c**26*f15\n    f17 = c**28*f16\n    f18 = c**30*f17\n    f19 = c**32*f18\n    f20 = c**34*f19\n    f21 = c**36*f20\n    f22 = c**38*f21\n    f23 = c**40*f22\n    f24 = c**42*f23\n    f25 = c**44*f24\n    f26 = c**46*f25\n    f27 = c**48*f26\n    f28 = c**50*f27\n    f29 = c**52*f28\n    f30 = c**54*f29\n    f31 = c**56*f30\n    f32 = c**58*f31\n    f33 = c**60*f32\n    f34 = c**62*f33\n    f35 = c**64*f34\n    f36 = c**66*f35\n    f37 = c**68*f36\n    f38 = c**70*f37\n    f39 = c**72*f38\n    f40 = c**74*f39\n    f41 = c",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 523,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    strings = []\n    for i in range(n):\n        strings.append(input())\n    # Your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 524,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = a[0]\n    for i in range(1, n):\n        if a[i] != c**i:\n            return 1\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 525,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    i=0\n    while i<n-1:\n        if a[i]!=a[i+1]:\n            a[i]=a[i]+a[i+1]\n            a.pop(i+1)\n            n-=1\n        else:\n            i+=1\n    return n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 526,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = list(map(int, input().split()))\n    matrix = []\n    for _ in range(N):\n        row = list(map(int, input().split()))\n        matrix.append(row)\n    # Your code here\n    return \"NIE\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 527,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    t = input()\n    s_copy = s * 10**100\n    for i in range(1, len(s_copy) - len(t) + 1):\n        if s_copy[i:i+len(t)] == t:\n            return i\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 528,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    friends=[]\n    for i in range(m):\n        a,b=map(int,input().split())\n        friends.append((a,b))\n    for i in range(m):\n        for j in range(i+1,m):\n            if (friends[i][0]-friends[j][0]) and (friends[j][0]-friends[i][1]):\n                if not (friends[i][0]-friends[j][1]):\n                    print(\"NO\")\n                    return\n    print(\"YES\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 529,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, s = input().lower(), int(input())\n    result = \"\"\n    for i in input_string:\n        if i.isalpha():\n            if i.isupper():\n                result += chr(((ord(i) - 65 + s) % 26 + 65) if i.isupper() else (ord(i) - 97 + s) % 26 + 97)\n            else:\n                result += chr((ord(i) - 97 + s) % 26 + 97)\n        else:\n            result += i\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 530,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    t = input()\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    if s_list == t_list:\n        return \"Draw\"\n    else:\n        return \"First\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 531,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=list(map(int,input().split()))\n    y=[]\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if x[i]==x[j]:\n                y.append(x[i])\n                count+=1\n    print(count)\n    print(*y)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 532,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    rotations = 0\n    for char in s:\n        if char == 'z':\n            rotations += 1\n            rotations += 26\n        else:\n            rotations += ord(char) - ord('a') + 1\n    return rotations\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 533,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a1, a2, k1, k2, n = (int(input()) for i in range(5))\n    min_players = max(0, n // k1) + max(0, n // k2)\n    max_players = min(a1, n // k1) + min(a2, n // k2)\n    return min_players, max_players\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 534,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    (n, t) = map(int, input().split())\n    s = input()\n    result = \"\"\n    for i in range(n):\n        if i % 2 == 0:\n            result += s[i]\n        else:\n            result += s[i+1]\n    if t % 2 == 0:\n        return result\n    else:\n        return s[::-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 535,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split(' ')))\n    # Write your code here\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 536,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    if n + m < 3:\n        return -1\n    else:\n        return '1' * m + '0' * n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 537,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if k>n:\n        print(0,0,n)\n    else:\n        d=n//k\n        c=n-d\n        w=min(d,c)\n        print(d,c,n-d-c)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 538,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().rstrip('0')\n    if s == s[::-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 539,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=0\n    for a in range(1,n+1):\n        for b in range(a,n+1):\n            for c in range(b,n+1):\n                if a^b^c==0:\n                    count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 540,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    [n,m]=list(map(int,(input().split())))\n    cave=[]\n    for i in range(n):\n        cave.append(list(input()))\n    r1,c1,r2,c2=map(int,input().split())\n    visited=[[False for j in range(m)] for i in range(n)]\n    visited[r1-1][c1-1]=True\n    queue=[]\n    queue.append((r1,c1))\n    while queue:\n        r,c=queue.pop(0)\n        if (r,c)==(r2-1,c2-1):\n            return \"YES\"\n        for dr,dc in [(-1,0),(1,0),(0,-1),(0,1)]:\n            if 0<=r+dr<n and 0<=c+dc<m and not visited[r+dr][c+dc] and cave[r+dr][c+dc]!='X':\n                visited[r+dr][c+dc]=True\n                queue.append((r+dr,c+dc))\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 541,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    a = []\n    b = []\n    for i in range(M):\n        a.append(int(input()))\n        b.append(int(input()))\n    #print(a)\n    #print(b)\n    #print(N,M)\n    #print(a)\n    #print(b)\n    #print(len(a))\n    #print(len(b))\n    #print(a[0])\n    #print(b[0])\n    #print(a[1])\n    #print(b[1])\n    #print(a[1]-1)\n    #print(b[1]-1)\n    #print(a[1]-1,b[1]-1)\n    #print(a[1],b[1])\n    #print(a[1]-1,b[1])\n    #print(a[1]-1,b[1]-1)\n    #print(a[1]-1,b[1]-1)\n    #print(a[1]-1,b[1]-1)\n    #print(a[1]-1,b[1]-1)\n    #print(a[1]-1,b[1]-1)\n    #print(a[1]-1,b[1]-1)\n    #print(a[1]-1,b[1]-1)\n    #print(a[1]-1,b[1]-1)\n    #print(a[1]-1,b[1]-1)\n    #print(a[1]-1,b[1]-1)\n    #print(a[1]-1,b[1]-1)\n    #print(a[1]-1,b[1]-1)\n    #print(a[1]-1,b[1]-1)\n    #print(a[1]-1,b[1]-1)\n    #print(a[1]-1,b[1]-1)\n    #print(a[1]-1,b[1]-1)\n    #print(a[1",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 542,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    first_points = 0\n    second_points = 0\n    last_technique = 0\n    for i in range(n):\n        if a[i] > 0:\n            first_points += a[i]\n        else:\n            second_points -= a[i]\n        if a[i] != last_technique:\n            last_technique = a[i]\n    if first_points > second_points:\n        return \"first\"\n    elif first_points < second_points:\n        return \"second\"\n    else:\n        return \"first\" if a[-1] > 0 else \"second\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 543,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        if a[i] > 0:\n            if i == 0:\n                print(\"YES\")\n            elif i == 1:\n                if a[i] > 1:\n                    print(\"NO\")\n                else:\n                    print(\"YES\")\n            else:\n                if a[i] > 2:\n                    print(\"NO\")\n                else:\n                    if a[i-1] == 0:\n                        print(\"YES\")\n                    elif a[i-1] == 1:\n                        print(\"YES\")\n                    else:\n                        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 544,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        n = int(input())\n        s = input()\n        if s == s[::-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 545,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    s1 = input()\n    s2 = input()\n    if n == 1:\n        if s1 == s2:\n            return -1\n        else:\n            return s1\n    else:\n        if s1 == s2:\n            return -1\n        else:\n            return s1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 546,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input()\n    b=input()\n    n=int(input())\n    for i in range(n):\n        c=input()\n        if len(c)==len(b):\n            for j in range(len(c)):\n                if b[j]==\"?\":\n                    if c[j] in a:\n                        continue\n                    else:\n                        print(\"NO\")\n                        break\n                elif b[j]==\"*\":\n                    continue\n                elif c[j]!=b[j]:\n                    print(\"NO\")\n                    break\n            else:\n                print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 547,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=[int(i) for i in input().split()]\n    passwords=[]\n    for i in range(n):\n        passwords.append(input())\n    password=input()\n    passwords.sort(key=len)\n    best_case=0\n    worst_case=0\n    for i in range(n):\n        if len(passwords[i])==len(password):\n            best_case+=1\n            worst_case+=1\n        else:\n            worst_case+=len(passwords[i])+5\n    if worst_case<=best_case:\n        return worst_case,best_case\n    else:\n        return best_case,worst_case\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 548,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        return \"First\"\n    if n == 2:\n        if arr[0] == arr[1]:\n            return \"Second\"\n        else:\n            return \"First\"\n    if n % 2 == 0:\n        return \"Second\"\n    else:\n        return \"First\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 549,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n % 2 == 0:\n        a = n // 2\n        b = n // 2 + 1\n    else:\n        a = (n + 1) // 2\n        b = n // 2\n    print(a, b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 550,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    login = makeUnique(input())\n    existing_logins = []\n    for _ in range(int(input())):\n        existing_logins.append(makeUnique(input()))\n    for existing_login in existing_logins:\n        if login == existing_login:\n            return \"Yes\"\n        if isSimilar(login, existing_login):\n            return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 551,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    y=list(map(int,input_string.split()))\n    if n==1:\n        return \"Yes\"\n    elif n==2:\n        return \"Yes\"\n    else:\n        for i in range(n-1):\n            if y[i]==y[i+1]:\n                return \"No\"\n        return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 552,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return len(input_string)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 553,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    y=input()\n    count=0\n    for i in range(len(input_string)):\n        if input_string[i]!='0':\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 554,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split())\n    subarrays = []\n    for _ in range(m):\n        l, r = map(int, input().split())\n        subarrays.append((l, r))\n    # Your code here\n    return max_happiness\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 555,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = list(input())\n    for i in range(len(S)):\n        if S[i] == '0':\n            S[i] = '9'\n        else:\n            S[i] = '0' if S[i] == '9' else '9'\n    return int(''.join(S))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 556,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l,r,k=[int(x) for x in input().split()]\n    result=[]\n    for i in range(l,r+1):\n        if i**k<=r:\n            result.append(i**k)\n    if len(result)==0:\n        print(-1)\n    else:\n        print(*result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 557,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    teleports=[]\n    for i in range(n):\n        a,b=map(int,input().split())\n        teleports.append([a,b])\n    #print(teleports)\n    for i in range(n):\n        for j in range(i+1,n):\n            if teleports[i][1]>=teleports[j][0]:\n                if teleports[j][0]-teleports[i][1]<=m:\n                    return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 558,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    mod=10**9+7\n    dp=[[0]*m for i in range(n)]\n    dp[0]=[1]*m\n    for i in range(1,n):\n        for j in range(m):\n            if i-1<k:\n                dp[i][j]=dp[i-1][j]\n            else:\n                dp[i][j]=dp[i-1][j]+dp[i-1][j-1]\n            for l in range(m):\n                if l!=j:\n                    dp[i][j]+=dp[i-1][l]\n            dp[i][j]%=mod\n    ans=sum(dp[n-1])%mod\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 559,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p = int(input())\n    a = list(map(int, input_string.split()))\n    b = [0] * p\n    for i in range(p):\n        b[i] = (a[i] + p) % p\n    return \" \".join(map(str, b))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 560,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r, c = map(int, input().split())\n    matrix = []\n    for _ in range(r):\n        matrix.append(list(input()))\n    # print(matrix)\n    max_eats = 0\n    for i in range(r):\n        row_eats = 0\n        col_eats = 0\n        for j in range(c):\n            if matrix[i][j] == '.':\n                row_eats += 1\n            if matrix[j][i] == '.':\n                col_eats += 1\n        max_eats += min(row_eats, col_eats)\n    return max_eats\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 561,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    cards=list(map(int,input().split()))\n    if n==1:\n        print(-1)\n    else:\n        if n%2==0:\n            print(n)\n            for i in range(n):\n                print(cards[i]+1)\n        else:\n            print(n-1)\n            for i in range(n-1):\n                print(cards[i]+1)\n                print(cards[i]-1)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 562,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    shows = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        shows.append((l, r))\n    shows.sort(key=lambda x: x[1])\n    for i in range(n-1):\n        if shows[i][1] > shows[i+1][0]:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 563,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l, r = list(map(int, input().split()))\n    for a in range(l, r+1):\n        for b in range(a+1, r+1):\n            for c in range(b+1, r+1):\n                if gcd(a, b) == 1 and gcd(b, c) == 1 and gcd(a, c) != 1:\n                    return [a, b, c]\n    return [-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 564,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = map(int, input().split())\n    mugs = list(map(int, input().split()))\n    if sum(mugs) <= s:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 565,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    y,b,r=map(int,input().split())\n    return y+b+r\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 566,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r,g,b=map(int,input().split())\n    if r==0 or g==0 or b==0:\n        return 0\n    elif r==g and g==b:\n        return 1\n    elif r==0:\n        return g+b\n    elif g==0:\n        return r+b\n    elif b==0:\n        return r+g\n    elif r==1 and g==1:\n        return 2\n    elif r==1 and b==1:\n        return 2\n    elif g==1 and b==1:\n        return 2\n    elif r==2 and g==1:\n        return 1\n    elif r==1 and b==2:\n        return 1\n    elif g==2 and b==1:\n        return 1\n    elif r==2 and b==1:\n        return 1\n    elif r==1 and g==2:\n        return 1\n    elif r==2 and g==2:\n        return 0\n    elif r==3 and g==1:\n        return 0\n    elif r==1 and b==3:\n        return 0\n    elif g==3 and b==1:\n        return 0\n    elif r==3 and b==2:\n        return 0\n    elif r==2 and b==2:\n        return 0\n    elif r==3 and g==2:\n        return 0\n    elif r==2 and b==3:\n        return 0\n    elif r==4 and g==2:\n        return 0\n    elif r==3 and b==2:\n        return 0\n    elif r==2 and g==3:\n        return 0\n    elif r==4 and b==2:\n        return 0\n    elif r==3 and g==3:\n        return 0\n    elif r==4 and b==3:\n        return 0\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 567,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    time = 0\n    for i in range(n):\n        if a[i] - i == 1:\n            time += 1\n        elif a[i] - i > 1:\n            time += a[i] - i\n        else:\n            time += 2\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 568,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return 20\n    elif n == 2:\n        return 680\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 569,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    if len(set(s)) == n:\n        return 0\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 570,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = list(map(int, input().split()))\n    while True:\n        if a % 2 == 0 and b % 2 == 0:\n            a += 1\n            b += 1\n        elif a % 2 == 1 and b % 2 == 1:\n            a += 1\n            b += 1\n        else:\n            break\n    if a % 2 == 0:\n        print(\"Vladik\")\n    else:\n        print(\"Valera\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 571,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    if n == 0:\n        return \":\"\n    stack = []\n    for i in range(n):\n        if s[i] == \"?\":\n            if not stack:\n                stack.append(\"(\")\n            elif stack[-1] == \"(\":\n                stack.append(\")\")\n            else:\n                stack.pop()\n    if not stack:\n        return \"(\" * n\n    else:\n        return \":(\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 572,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        if a[i] > k:\n            a[i] = -k\n            if a[n] != 0:\n                count += 1\n            else:\n                a[n] = 1\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 573,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        if a[i] == 1:\n            count += 1\n    if count % 3 != 0:\n        return 0\n    else:\n        return count // 3\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 574,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c, d = map(int, input().split(' '))\n    return (c - a + 1) * (d - b + 1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 575,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a_x, a_y, b_x, b_y, c_x, c_y = map(int, input().split())\n    if abs(a_x - c_x) + abs(a_y - c_y) == 0:\n        return \"NO\"\n    if abs(a_x - b_x) + abs(a_y - b_y) == 0:\n        return \"NO\"\n    if abs(a_x - c_x) + abs(a_y - c_y) == 1:\n        return \"YES\"\n    if abs(a_x - b_x) + abs(a_y - b_y) == 1:\n        return \"YES\"\n    if abs(a_x - c_x) + abs(a_y - c_y) == 2:\n        if abs(a_x - b_x) == 1 and abs(a_y - b_y) == 1:\n            return \"YES\"\n        if abs(a_x - b_x) == 1 and abs(a_y - b_y) == 2:\n            return \"YES\"\n        if abs(a_x - b_x) == 2 and abs(a_y - b_y) == 1:\n            return \"YES\"\n        return \"NO\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 576,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    li = list(map(int,input().split()))\n    n = len(li)\n    max_lcm = 1\n    for i in range(n):\n        for j in range(i+1,n):\n            lcm = max(li[i],li[j])\n            while lcm % li[i] != 0 or lcm % li[j] != 0:\n                lcm += 1\n            max_lcm = max(max_lcm,lcm)\n    return max_lcm\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 577,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = [int(x) for x in input().split()]\n    a = []\n    b = []\n    for i in range(n):\n        a_i, b_i = [int(x) for x in input().split()]\n        a.append(a_i)\n        b.append(b_i)\n    # write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 578,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p, q = input().split('e')\n    p = float(p)\n    q = int(q)\n    if q == 0:\n        return str(int(p))\n    else:\n        return '{}.{}'.format(int(p * 10**q), int(p * 10**q) % 10)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 579,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    p=list(map(int,input().split())\n    c=list(map(int,input().split())\n    max_score=0\n    for i in range(n):\n        for j in range(k):\n            if j==0:\n                max_score=c[p[i]-1]\n            else:\n                max_score=max(max_score,c[p[i]-1])\n    return max_score\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 580,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,s,t=list(map(int,input().split()))\n    roads=[]\n    for i in range(m):\n        roads.append(list(map(int,input().split()))\n    roads.sort(key=lambda x:x[2])\n    visited=[False]*n\n    visited[s]=True\n    q=[]\n    q.append(s)\n    dist=[0]*n\n    while q:\n        u=q.pop(0)\n        for i in range(len(roads)):\n            if roads[i][0]==u and not visited[roads[i][1]]:\n                visited[roads[i][1]]=True\n                dist[roads[i][1]]=max(dist[u]+roads[i][2],roads[i][2])\n                q.append(roads[i][1])\n            elif roads[i][1]==u and not visited[roads[i][0]]:\n                visited[roads[i][0]]=True\n                dist[roads[i][0]]=max(dist[u]+roads[i][2],roads[i][2])\n                q.append(roads[i][0])\n    if dist[t]>0:\n        print(\"YES\")\n    else:\n        for i in range(m):\n            if dist[roads[i][0]>0 and dist[roads[i][1]>0:\n                print(\"CAN\",abs(roads[i][2]-roads[i][2]-1))\n            else:\n                print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 581,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    edges = [list(map(int, input().split())) for _ in range(n-1)]\n    graph = [[] for _ in range(n+1)]\n    for edge in edges:\n        a, b = edge\n        graph[a].append(b)\n        graph[b].append(a)\n    def dfs(node, parent, depth, visited, memo):\n        if node in memo:\n            return memo[node]\n        memo[node] = depth\n        for child in graph[node]:\n            if child != parent:\n                memo[node] = max(memo[node], dfs(child, node, visited, memo))\n        return memo[node]\n    memo = {i:0 for i in range(1, n+1)}\n    for i in range(1, n+1):\n        memo[i] = dfs(i, -1, set(), memo)\n    max_depth = max(memo.values())\n    max_depth_nodes = [i for i, depth in memo.items() if depth == max_depth]\n    answer = 0\n    for node in max_depth_nodes:\n        for child in graph[node]:\n            if child not in max_depth_nodes:\n                answer += memo[node]\n                print(node, child, node)\n                break\n    return answer\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 582,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    if len(set(a)) == 1:\n        return 0\n    a.sort()\n    t.sort()\n    max_a = max(a)\n    max_t = max(t)\n    return max_a * max_t\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 583,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    max_beauty = 0\n    max_l = 0\n    max_r = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            s1 = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n            s2 = s[j] + s[i] + s[i+1:j] + s[j+1:]\n            if is_correct(s1) or is_correct(s2):\n                beauty = max(len(cyclical_shifts(s1)), len(cyclical_shifts(s2)) if i != j else 0)\n                if beauty > max_beauty:\n                    max_beauty = beauty\n                    max_l = i\n                    max_r = j\n    print(max_beauty)\n    print(max_l+1, max_r+1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 584,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l = input()\n    s = input()\n    words_inside = 0\n    words_outside = 0\n    max_length = 0\n    inside_parentheses = False\n    current_word = \"\"\n    for i in range(len(s)):\n        if s[i] == \"_\":\n            if inside_parentheses:\n                current_word = \"\"\n            else:\n                words_outside += 1\n        elif s[i] == \"(\":\n            inside_parentheses = True\n        elif s[i] == \")\":\n            inside_parentheses = False\n            words_inside += 1\n        else:\n            current_word += s[i]\n            if not inside_parentheses:\n                max_length = max(max_length, len(current_word))\n    return max_length, words_inside\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 585,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split())\n    b=list(map(int,input().split())\n    count=0\n    i=0\n    j=0\n    while i<n:\n        if a[i]<=b[j]:\n            i+=1\n        else:\n            j+=1\n        if j==m:\n            break\n    if j==m:\n        count+=1\n    else:\n        count=0\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 586,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    if n == 1:\n        return 1\n    if k == 1:\n        return 2\n    if n == 2:\n        return 6\n    if k == 2:\n        return 0\n    if n == 3:\n        return 18\n    if k == 3:\n        return 0\n    if n == 4:\n        return 6\n    if k == 4:\n        return 0\n    if n == 5:\n        return 18\n    if k == 5:\n        return 0\n    if n == 6:\n        return 18\n    if k == 6:\n        return 0\n    if n == 7:\n        return 18\n    if k == 7:\n        return 0\n    if n == 8:\n        return 18\n    if k == 8:\n        return 0\n    if n == 9:\n        return 18\n    if k == 9:\n        return 0\n    if n == 10:\n        return 18\n    if k == 10:\n        return 0\n    if n == 11:\n        return 18\n    if k == 11:\n        return 0\n    if n == 12:\n        return 18\n    if k == 12:\n        return 0\n    if n == 13:\n        return 18\n    if k == 13:\n        return 0\n    if n == 14:\n        return 18\n    if k == 14:\n        return 0\n    if n == 15:\n        return 18\n    if k == 15:\n        return 0\n    if n == 16:\n        return 18\n    if k == 16:\n        return 0\n    if n == 17:\n        return 18\n    if k == 17:\n        return 0\n    if n == 18:\n        return 18\n    if k == 18:\n        return 0\n    if n == 19:\n        return ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 587,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K=map(int,input().split())\n    toppings=[]\n    for i in range(N):\n        t,d=map(int,input().split())\n        toppings.append((t,d))\n    toppings.sort(key=lambda x:x[1],reverse=True)\n    toppings=toppings[:K]\n    toppings.sort(key=lambda x:x[0])\n    base_total_deliciousness=sum(x[1] for x in toppings)\n    variety_bonus=len(set(x[0] for x in toppings))\n    return base_total_deliciousness*variety_bonus\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 588,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    x = []\n    y = []\n    for i in range(N):\n        x.append(int(input_string.split()[i]))\n        y.append(int(input_string.split()[i+N]))\n    max_distance = 0\n    for i in range(2**N):\n        x_sum = 0\n        y_sum = 0\n        for j in range(N):\n            if (i & (1<<j)):\n                x_sum += x[j]\n                y_sum += y[j]\n        distance = (x_sum**2 + y_sum**2)**0.5\n        if distance > max_distance:\n            max_distance = distance\n    return max_distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 589,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    count = 0\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                for l in range(10):\n                    for m in range(10):\n                        for n in range(10):\n                            code = str(i) + str(j) + str(k) + str(l) + str(m) + str(n)\n                            if s[0] == '?':\n                                count += 1\n                            elif s[0] == str(i):\n                                if s[1] == '?':\n                                    count += 1\n                                elif s[1] == 'A':\n                                    if code[1] == s[1]:\n                                        count += 1\n                                else:\n                                    count += 0\n                            else:\n                                if s[0] == code[0]:\n                                    count += 1\n                            if s[1] == '?':\n                                count += 1\n                            elif s[1] == 'A':\n                                if code[1] == s[1]:\n                                    count += 1\n                            else:\n                                count += 0\n                            if s[2] == '?':\n                                count += 1\n                            elif s[2] == 'A':\n                                if code[2] == s[2]:\n                                count += 1\n                            else:\n                                count += 0\n                            if s[3] == '?':\n                                count += 1\n                            elif s[3] == 'A':\n                                if code[3] == s[3]:\n                                count += 1\n                            else:\n                                count += 0\n                            if s[4] == '?':\n                                count += 1\n                            elif s[4] == 'A':\n                                if code[4] == s[4]:\n                                count += 1\n                            else:\n                                count += 0\n                    print(count)\n                    count = 0\n                    if n == 9:\n                       ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 590,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input()) + 1\n    arr = list(map(int, input().split()))\n    arr.sort()\n    count = 0\n    for i in range(n):\n        if i != arr[i] - 1:\n            count += 1\n    if count == 0:\n        print(0)\n        print(\" \".join(map(str, arr))\n    else:\n        for i in range(n):\n            if i != arr[i] - 1:\n                arr[i], arr[arr[i] - 1] = arr[arr[i] - 1], arr[i]\n                if i == 0:\n                    print(1)\n                else:\n                    print(i)\n        print(\" \".join(map(str, arr))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 591,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    light_schedule = list(map(int, input().split()))\n    light_schedule.sort()\n    min_light = light_schedule[k-1]\n    result = [k]\n    for i in range(k-1, 0, -1):\n        min_light = min(min_light, light_schedule[i-1])\n        result.append(i+1)\n    return min_light, result[::-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 592,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==2:\n        return 0\n    else:\n        return n**2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 593,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    votes=[[0]*n for i in range(m)]\n    for i in range(m):\n        votes[i]=list(map(int,input().split()))\n    max_votes=0\n    max_candidate=0\n    for i in range(n):\n        max_votes_city=max(votes[j][i] for j in range(m))\n        if max_votes_city>max_votes:\n            max_votes=max_votes_city\n            max_candidate=i+1\n    max_cities=0\n    for i in range(n):\n        max_cities_candidate=votes.count(max_votes)\n        if max_cities_candidate>max_cities:\n            max_cities=max_cities_candidate\n            max_candidate_cities=i+1\n    return max_candidate_cities\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 594,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: list(map(int, input().split()))\n    n, m = R()\n    correct_solutions = R()\n    wrong_solutions = R()\n    v = 0\n    for i in range(n):\n        if correct_solutions[i] <= v:\n            v = correct_solutions[i]\n    for i in range(m):\n        if wrong_solutions[i] <= v:\n            v = wrong_solutions[i]\n    if v == 0:\n        v = max(correct_solutions)\n    return v\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 595,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    y, v = int(input()), 0\n    while True:\n        v += 1\n        if v % 4 == 0 and (v % 100 != 0 or v % 400 == 0):\n            if v % 100 == 0:\n                v += 1\n        if v % 7 == 0:\n            print(v)\n            break\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 596,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: datetime(*map(int, input().split(':')))\n    a, b = R(), R()\n    return (b - a).days\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 597,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = [int(x) for x in input().split()]\n    roads = [tuple(map(int, input().split())) for _ in range(n-1)]\n    cities = set(input().split())\n    cities = [int(x) for x in cities]\n    #print(roads)\n    #print(cities)\n    #print(n,m)\n    #print(len(cities))\n    #print(cities)\n    #print(len(roads))\n    #print(roads)\n    #print(set(cities))\n    #print(set(range(1,n+1)))\n    #print(set(range(1,n+1).difference(cities))\n    #print(set(range(1,n+1).difference(cities).pop())\n    #print(set(range(1,n+1).difference(cities).pop())\n    #print(set(range(1,n+1).difference(cities).pop())\n    #print(set(range(1,n+1).difference(cities).pop())\n    #print(set(range(1,n+1).difference(cities).pop())\n    #print(set(range(1,n+1).difference(cities).pop())\n    #print(set(range(1,n+1).difference(cities).pop())\n    #print(set(range(1,n+1).difference(cities).pop())\n    #print(set(range(1,n+1).difference(cities).pop())\n    #print(set(range(1,n+1).difference(cities).pop())\n    #print(set(range(1,n+1).difference(cities).pop())\n    #print(set(range(1,n+1).difference(cities).pop())\n    #print(set(range(1,n+1).difference(cities).pop())\n    #print(set(range(1,n+1).difference(cities).pop())\n    #print(set(range(1,n+1).difference(cities).pop())\n    #print(set(range(1,n+1",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 598,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, x = f()\n    vouchers = [list(f()) for _ in range(n)]\n    vouchers.sort(key=lambda x: x[1])\n    left = 0\n    right = x\n    min_cost = float('inf')\n    for voucher in vouchers:\n        if voucher[0] >= left:\n            left = voucher[1]\n            min_cost = min(min_cost, voucher[2])\n        else:\n            right = min(right, voucher[0])\n    return min_cost if right > left else -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 599,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().strip()\n    if s == s[::-1]:\n        print(s)\n    else:\n        print(\"NA\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 600,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = int(input())\n    b = int(input())\n    if a > b:\n        a, b = b, a\n    tiredness = 0\n    while a != b:\n        if a > b:\n            tiredness += a - b\n            a -= 1\n        else:\n            tiredness += b - a\n            b -= 1\n    return tiredness\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 601,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p, f = list(map(int, input().split()))\n    cnt_s, cnt_w = list(map(int, input().split()))\n    s, w = list(map(int, input().split()))\n    max_s = min(p // s, cnt_s)\n    max_w = min(p // w, cnt_w)\n    max_f_s = min(f // s, cnt_s)\n    max_f_w = min(f // w, cnt_w)\n    return max_s + max_w + max_f_s + max_f_w\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 602,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = int(input())\n    if a == 1:\n        return \"Adams\"\n    elif a == 2:\n        return \"Bush\"\n    elif a == 3:\n        return \"Carter\"\n    elif a == 4:\n        return \"Clinton\"\n    elif a == 5:\n        return \"Eisenhower\"\n    elif a == 6:\n        return \"Ford\"\n    elif a == 7:\n        return \"Kennedy\"\n    elif a == 8:\n        return \"Johnson\"\n    elif a == 9:\n        return \"Nixon\"\n    elif a == 10:\n        return \"Obama\"\n    elif a == 11:\n        return \"Reagan\"\n    elif a == 12:\n        return \"Roosevelt\"\n    elif a == 13:\n        return \"Truman\"\n    elif a == 14:\n        return \"Trudeau\"\n    elif a == 15:\n        return \"Ulysses\"\n    elif a == 16:\n        return \"Van Buren\"\n    elif a == 17:\n        return \"Washington\"\n    elif a == 18:\n        return \"Woodrow\"\n    elif a == 19:\n        return \"Yeltsin\"\n    elif a == 20:\n        return \"Lincoln\"\n    elif a == 21:\n        return \"Nixon\"\n    elif a == 22:\n        return \"Roosevelt\"\n    elif a == 23:\n        return \"Truman\"\n    elif a == 24:\n        return \"Washington\"\n    elif a == 25:\n        return \"Woodrow\"\n    elif a == 26:\n        return \"Yeltsin\"\n    elif a == 27:\n        return \"Adams\"\n    elif a == 28:\n        return \"Bush\"\n    elif a == 29:\n        return \"Clinton\"\n    elif a == 30:\n        return \"Eisenhower\"\n    elif a == 31:\n        return \"Ford\"\n    elif a == ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 603,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    r, g, b = map(int, input_string.split())\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 604,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    max_val=max(arr)\n    min_val=min(arr)\n    if max_val==0:\n        return 0\n    if min_val==0:\n        return 1\n    return (max_val-min_val)//(max_val-0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 605,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=list(map(int,input().split()))\n    if a-b*c/250>b-a*d/250:\n        return \"Misha\"\n    elif a-b*c/250<b-a*d/250:\n        return \"Vasya\"\n    else:\n        return \"Tie\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 606,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R,x1,y1,x2,y2=input().split()\n    R,x1,y1,x2,y2=map(float,input_string.split())\n    x1,y1,x2,y2=int(x1),int(y1),int(x2),int(y2)\n    r=R\n    while True:\n        if abs(x1-x2)<=r and abs(y1-y2)<=r:\n            r+=1\n        else:\n            break\n    print(x2,y2,r)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 607,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, p = list(map(int,input().split()))\n    mod = p\n    happiness = 0\n    for i in range(1, n+1):\n        happiness += (n-i+1) * (n-i) // 2\n    happiness %= mod\n    return happiness\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 609,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    for i in range(n):\n        input_string[i]=list(input_string[i])\n    for i in range(n):\n        if input_string[i][i]!=input_string[i][n-i-1]:\n            return \"NO\"\n    for i in range(1,n-1):\n        if input_string[i][0]!=input_string[i][i] or input_string[i][n-i-1]!=input_string[i][0]:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 610,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    if n>m:\n        return n,m\n    else:\n        return m,n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 611,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    arr = [0] * n\n    for _ in range(m):\n        x, d = list(map(int, input().split()))\n        i = int(input())\n        for j in range(n):\n            arr[j] += x + d * abs(i - j)\n    return sum(arr) / n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 612,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,p = list(map(int,input().split()))\n    a = list(map(int,input().split()))\n    a.sort()\n    even_sum = 0\n    odd_sum = 0\n    for i in range(n):\n        if i < k:\n            even_sum += a[i]\n        else:\n            odd_sum += a[i]\n    if even_sum % 2 != 0:\n        return \"NO\"\n    if odd_sum % 2 != 0:\n        return \"NO\"\n    even_sum = even_sum // 2\n    odd_sum = odd_sum // 2\n    even_parts = []\n    odd_parts = []\n    for i in range(n):\n        if i < k:\n            even_parts.append(a[i])\n        else:\n            odd_parts.append(a[i])\n    even_parts.sort(reverse=True)\n    odd_parts.sort(reverse=True)\n    if len(even_parts) > 1 and len(odd_parts) > 1:\n        even_parts.pop()\n        odd_parts.pop()\n    if len(even_parts) == 0:\n        return \"NO\"\n    print(\"YES\")\n    for i in range(k):\n        if i < len(even_parts):\n            print(len(even_parts),end=\" \")\n            for j in even_parts:\n                print(j,end=\" \")\n        else:\n            print(len(odd_parts),end=\" \")\n            for j in odd_parts:\n                print(j,end=\" \")\n        even_parts.pop()\n        odd_parts.pop()\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 613,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t,a,b=map(int,input().split())\n    if a==b:\n        return 1\n    if a==1 and b==1:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==1:\n        return 1\n    if b==1:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b:\n        return 1\n    if a==b",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 614,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    souvenirs = []\n    for _ in range(n):\n        w, c = list(map(int, input().split()))\n        souvenirs.append((w, c))\n    souvenirs.sort(key=lambda x: x[1], reverse=True)\n    total_cost = 0\n    total_weight = 0\n    for w, c in souvenirs:\n        if total_weight + w <= m:\n            total_weight += w\n            total_cost += c\n    return total_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 615,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    A=list(map(int,input_string.split()))\n    A.sort()\n    P=sum(A[:n//4])\n    Q=sum(A[n//4:n//2])\n    R=sum(A[n//2:3*n//4])\n    S=sum(A[3*n//4:])\n    return min(abs(max(P-min(P,Q,R,S)-min(P,Q,R,S)),max(P,Q,R,S)-min(P,Q,R,S))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 616,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M=map(int,input().split())\n    a=[]\n    b=[]\n    c=[]\n    for i in range(N):\n        a.append(list(map(int,input().split()))\n    for i in range(M):\n        c.append(list(map(int,input().split())\n    # Your code goes here\n    return ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 617,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    e = '1*' + input() + '*1'\n    e = e.replace('+', '+1*')\n    e = e.replace('-', '+-1*')\n    e = e.replace('*', '+')\n    e = e.replace(')', '+1)')\n    e = e.replace('(', '*1(')\n    e = e.replace('1', '+')\n    e = e.replace(')', '+1)')\n    e = e.replace('(', '*1(')\n    e = e.replace('+1', '+')\n    e = e.replace('-1', '-')\n    e = e.replace('+', '+1')\n    e = e.replace('-', '+-1')\n    e = e.replace('*', '+')\n    e = e.replace('+1', '+')\n    e = e.replace('-1', '-')\n    e = e.replace('(', '*1(')\n    e = e.replace(')', '+1)')\n    e = e.replace('+1', '+')\n    e = e.replace('-1', '-')\n    e = e.replace('*', '+')\n    e = e.replace('+', '+1')\n    e = e.replace('-', '+-1')\n    e = e.replace('(', '*1(')\n    e = e.replace(')', '+1)')\n    e = e.replace('+1', '+')\n    e = e.replace('-1', '-')\n    e = e.replace('*', '+')\n    e = e.replace('+', '+1')\n    e = e.replace('-', '+-1')\n    e = e.replace('(', '*1(')\n    e = e.replace(')', '+1)')\n    e = e.replace('+1', '+')\n    e = e.replace('-1', '-')\n    e = e.replace('*', '+')\n    e = e.replace('+', '+1')\n    e = e.replace('-', '+-1')\n    e = e.replace('(',",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 618,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    (a, b) = input().split('|')\n    weights = sorted(set(a + b))\n    left_weights = [w for w in a]\n    right_weights = [w for w in b]\n    if len(left_weights) != len(right_weights):\n        return \"Impossible\"\n    left_weights.sort()\n    right_weights.sort()\n    if left_weights != right_weights:\n        return \"Impossible\"\n    return '|'.join(left_weights)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 619,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y,z=map(int,input().split())\n    if x>=y:\n        return x//z+y//z,x%z\n    else:\n        return y//z+x//z,y%z\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 620,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x1,y1=map(int,input().split())\n    x2,y2=map(int,input().split())\n    x3,y3=map(int,input().split())\n    # your code goes here\n    # return the number of ways to add one new integer point and the coordinates of the fourth point\n    # in the form of a tuple (k, (x4,y4), (x5,y5), ...)\n    # k = number of ways\n    # (x4,y4) = coordinates of the first possible point\n    # (x5,y5) = coordinates of the second possible point\n    # ...\n    # and so on\n    # You can assume that the input is valid and the points are not collinear\n    # You can use the cross product formula to check if the points are collinear or not\n    # https://en.wikipedia.org/wiki/Cross_product\n    # If the cross product is zero, the points are collinear\n    # If the cross product is positive, the points are in counterclockwise order\n    # If the cross product is negative, the points are in clockwise order\n    # If the cross product is zero, the points are on a line\n    # You can use the determinant formula to check if the points form a parallelogram\n    # https://en.wikipedia.org/wiki/Parallelogram#Determinant_method\n    # If the determinant is zero, the points form a parallelogram\n    # If the determinant is positive, the points form a positive area parallelogram\n    # If the determinant is negative, the points form a negative area parallelogram\n    # If the determinant is zero, the points form a degenerate parallelogram\n    # You can use the determinant formula to check if the points form a degenerate parallelogram\n    # https://en.wikipedia.org/wiki/Parallelogram#Degenerate_parallelogram\n    # If the determinant is zero, the points form a degenerate parallelogram\n    # If the determinant is positive, the points form a positive area parallelogram\n    # If the determinant is negative, the points form a negative area parallelogram\n    # If the determinant is zero, the points form a degenerate par",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 621,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p, x, y, n, t = [], 0, 0, int(input()), list(map(int, input().split()))\n    for i in range(n):\n        if t[i] < 0:\n            p.append(i)\n        else:\n            y += 1\n    if len(p) >= 3:\n        p.append(n)\n        x = len(p) - 1\n    else:\n        x = len(p)\n    print(x)\n    for i in range(x):\n        print(p[i] - p[i - 1] + 1, end=' ')\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 622,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    sequence = [1]\n    for i in range(n-1):\n        sequence.append(sequence[-1])\n        for j in range(len(sequence)):\n            if sequence[j] not in sequence[i+1:]:\n                sequence.insert(i+1, j+1)\n                break\n    print(sequence[k-1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 623,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    a_1,a_2=a,b\n    count=0\n    while a_1>0 and a_2>0:\n        if a_1>a_2:\n            a_1-=2\n            count+=1\n        else:\n            a_2-=1\n            count+=1\n        if a_1>a_2:\n            a_2+=1\n            count+=1\n        else:\n            a_1+=1\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 624,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,m = map(int,input().split())\n    powers = list(map(int,input().split()))\n    powers.sort()\n    max_power = max(powers)\n    min_power = min(powers)\n    if max_power == min_power:\n        return max_power\n    if k == 1:\n        return sum(powers)/n\n    if k >= n:\n        return sum(powers)\n    if m == 1:\n        return max_power\n    if m >= n:\n        return sum(powers)\n    if k == 2:\n        return (max_power + min_power) / 2\n    if k == 3:\n        return (max_power + min_power + sum(powers[1:-1])/2) / n\n    if k == 4:\n        return (max_power + min_power + sum(powers[1:-1])/3) / n\n    if k == 5:\n        return (max_power + min_power + sum(powers[1:-1])/4) / n\n    if k == 6:\n        return (max_power + min_power + sum(powers[1:-1])/5) / n\n    if k == 7:\n        return (max_power + min_power + sum(powers[1:-1])/6) / n\n    if k == 8:\n        return (max_power + min_power + sum(powers[1:-1])/7) / n\n    if k == 9:\n        return (max_power + min_power + sum(powers[1:-1])/8) / n\n    if k == 10:\n        return (max_power + min_power + sum(powers[1:-1])/9) / n\n    if k == 11:\n        return (max_power + min_power + sum(powers[1:-1])/10) / n\n    if k == 12:\n        return (max_power + min_power + sum(powers[1:-1])/11) / n\n    if k == 13:\n        return (max_power + min_power + sum(powers[",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 625,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    result = 0\n    for i in range(1, n+1):\n        result += (-1)**i * i\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 626,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    dp=[[0]*n for i in range(n)]\n    for i in range(n):\n        dp[i][i]=0\n    for i in range(1,n):\n        dp[i][i-1]=1\n    for length in range(2,n+1):\n        for i in range(n-length+1):\n            j=i+length-1\n            dp[i][j]=dp[i+1][j]+1\n            for k in range(i+1,j):\n                dp[i][j]=min(dp[i][j],dp[i][k]+dp[k+1][j]+1)\n    return dp[0][n-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 627,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    if n==1:\n        return s\n    else:\n        for i in range(n-1):\n            if s[i]>s[i+1]:\n                return s[:i]+s[i+1:]\n        return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 628,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    [n, k] = [int(x) for x in input().split()]\n    books = [int(x) for x in input().split()]\n    # write your code here\n    # return the maximum possible beauty of k shelves\n    # you can use the bitwise AND operator & to compute the beauty of a shelf\n    # you can use the sum() function to compute the sum of the prices of the books on a shelf\n    # you can use the sorted() function to sort the books in ascending order\n    # you can use a loop to iterate over the possible combinations of books to place on each shelf\n    # you can use the min() function to find the minimum price of the books on each shelf\n    # you can use the max() function to find the maximum price of the books on each shelf\n    # you can use the bin() function to convert the binary representation of the shelf values to decimal\n    # you can use the int() function to convert the decimal representation of the shelf values to binary\n    # you can use the hex() function to convert the binary representation of the shelf values to hexadecimal\n    # you can use the int(str(), 16) to convert the hexadecimal representation of the shelf values to decimal\n    # you can use the bin() function to convert the decimal representation of the shelf values to binary\n    # you can use the hex() function to convert the binary representation of the shelf values to hexadecimal\n    # you can use the bin() function to convert the decimal representation of the shelf values to binary\n    # you can use the int() function to convert the hexadecimal representation of the shelf values to decimal\n    # you can use the sorted() function to sort the books in ascending order\n    # you can use the min() function to find the minimum price of the books on each shelf\n    # you can use the max() function to find the maximum price of the books on each shelf\n    # you can use the sum() function to compute the sum of the prices of the books on a shelf\n    # you can use the & operator to compute the bitwise AND of the shelf values\n    # you can use the int() function to convert the binary representation of the shelf values to decimal\n    # you can use the bin() function to convert the decimal representation of the shelf values to binary\n    # you can use",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 629,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    a=a+[0]\n    b=b+[0]\n    a.sort()\n    b.sort()\n    total_time=0\n    for i in range(n):\n        total_time+=a[i]\n    for i in range(n-1):\n        total_time+=b[i]\n    return total_time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 630,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    d=[]\n    for i in range(n):\n        d.append(set())\n    for i in range(n):\n        if a[i]!=0:\n            d[a[i]].add(i)\n    for i in range(n):\n        if a[i]!=0:\n            d[a[i]].add(i)\n    for i in range(n):\n        if a[i]!=0:\n            d[a[i]].add(i)\n    for i in range(n):\n        if a[i]!=0:\n            d[a[i]].add(i)\n    for i in range(n):\n        if a[i]!=0:\n            d[a[i]].add(i)\n    for i in range(n):\n        if a[i]!=0:\n            d[a[i]].add(i)\n    for i in range(n):\n        if a[i]!=0:\n            d[a[i]].add(i)\n    for i in range(n):\n        if a[i]!=0:\n            d[a[i]].add(i)\n    for i in range(n):\n        if a[i]!=0:\n            d[a[i]].add(i)\n    for i in range(n):\n        if a[i]!=0:\n            d[a[i]].add(i)\n    for i in range(n):\n        if a[i]!=0:\n            d[a[i]].add(i)\n    for i in range(n):\n        if a[i]!=0:\n            d[a[i]].add(i)\n    for i in range(n):\n        if a[i]!=0:\n            d[a[i]].add(i)\n    for i in range(n):\n        if a[i]!=0:\n            d[a[i]].add(i)\n    for i in range(n):\n        if a[i]!=0:\n            d[a[i]].add(",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 631,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, m = map(int, input().split())\n        a = list(map(int, input().split()))\n        a.sort()\n        s = sum(a)\n        if s % n == 0 and m % n == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 632,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,k=map(int,input().split())\n        while k>0:\n            if n%2==0:\n                n+=n//2\n            else:\n                n+=1\n            n+=f(n)\n            k-=1\n        print(n)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 633,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    if n == 1:\n        print(\"Impossible\")\n        return\n    if m == 0:\n        print(\"Possible\")\n        return\n    if m % 2 == 0:\n        print(\"Impossible\")\n        return\n    if n % 2 == 0:\n        print(\"Impossible\")\n        return\n    if n == 2:\n        print(\"Impossible\")\n        return\n    if m == 1:\n        print(\"Possible\")\n        print(1, 2)\n        return\n    if m == 2:\n        print(\"Possible\")\n        print(1, 2)\n        print(2, 3)\n        return\n    if n == 3:\n        print(\"Possible\")\n        print(1, 2)\n        print(2, 3)\n        print(3, 1)\n        return\n    if n == 4:\n        print(\"Possible\")\n        print(1, 2)\n        print(2, 3)\n        print(3, 4)\n        print(4, 1)\n        return\n    if n == 5:\n        print(\"Possible\")\n        print(1, 2)\n        print(2, 3)\n        print(3, 4)\n        print(4, 5)\n        print(5, 1)\n        return\n    if n == 6:\n        print(\"Possible\")\n        print(1, 2)\n        print(2, 3)\n        print(3, 4)\n        print(4, 5)\n        print(5, 6)\n        print(6, 1)\n        return\n    if n == 7:\n        print(\"Possible\")\n        print(1, 2)\n        print(2, 3)\n        print(3, 4)\n        print(4, 5)\n        print(5, 6)\n        print(6, 7)\n        print(7, 1)\n        return\n    if n == 8:\n        print(\"Possible\")\n        print(1, 2)\n        print(2, 3)\n        print(3, ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 634,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r,n = [int(x) for x in input().split()]\n    reclaimed = []\n    for i in range(n):\n        reclaimed.append(tuple(map(int, input().split())))\n    # Your code here\n    return \"WIN\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 635,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    if a[s-1] == 1 and b[n-s] == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 636,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    if k == 0:\n        print(0)\n        return\n    if k >= sum(a):\n        print(n)\n        print(*range(1, n+1))\n        return\n    a.sort(reverse=True)\n    days_left = k\n    instruments = []\n    for i in range(n):\n        if days_left >= a[i]:\n            days_left -= a[i]\n            instruments.append(i+1)\n    print(len(instruments))\n    print(*instruments)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 637,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    photo = list(map(int, input().split()))\n    if n % 2 == 0:\n        return \"NO\"\n    else:\n        for i in range(n):\n            if photo[i] == 0:\n                count = 0\n                for j in range(i, n):\n                    if photo[j] == 0:\n                        count += 1\n                    else:\n                        break\n                if count % 2 == 0:\n                    return \"NO\"\n        return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 638,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    t = list(map(int, input().split())\n    result = [0] * n\n    for i in range(n):\n        for j in range(i):\n            if sum(t[:i+1]) <= m:\n                result[i] = j\n                break\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 639,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,x=R()\n    s=R()\n    s.sort()\n    c=0\n    for i in range(n):\n        if s[i]!=x:\n            c+=1\n        else:\n            break\n    if c==n:\n        return 0\n    else:\n        return n-c\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 640,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b = list(map(int,input().split()))\n    count_win_first = 0\n    count_draw = 0\n    count_win_second = 0\n    for i in range(1,7):\n        if abs(a-i) < abs(b-i):\n            count_win_first += 1\n        elif abs(a-i) > abs(b-i):\n            count_win_second += 1\n        else:\n            count_draw += 1\n    print(count_win_first,count_draw,count_win_second)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 641,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input().split()\n    if a[0] == \"of\":\n        if a[1] == \"week\":\n            return 52\n    elif a[1] == \"of\":\n        return 11\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 642,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n, m = R()\n    dirty_stairs = R()\n    dirty_stairs = sorted(dirty_stairs)\n    if dirty_stairs[0] == 1 or dirty_stairs[-1] == n:\n        return \"NO\"\n    for i in range(m):\n        if dirty_stairs[i] == 1 or dirty_stairs[i] == n:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 643,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y, p, q = map(int, input().split())\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 644,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    x = 0\n    for i in range(n):\n        line = input().split()\n        if line[0] == 'add':\n            x += 1\n        elif line[0] == 'for':\n            n = int(line[1])\n            for j in range(n):\n                x += 1\n    if x > 2**32-1:\n        return \"OVERFLOW!!!\"\n    else:\n        return x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 645,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().strip()\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    even_digits = ['0', '2', '4', '6', '8']\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if s[i+1] not in even_digits:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 646,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    detachments=[]\n    for i in range(n):\n        x,y=map(int,input().split())\n        detachments.append((x,y))\n    detachments.sort()\n    x_min=min(detachments,key=lambda x:x[0])[0]\n    x_max=max(detachments,key=lambda x:x[0])[0]\n    y_min=min(detachments,key=lambda x:x[1])[1]\n    y_max=max(detachments,key=lambda x:x[1])[1]\n    x_range=x_max-x_min\n    y_range=y_max-y_min\n    t=max(x_range,y_range)\n    if t<2:\n        return -1\n    return t\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 647,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    left_handers = []\n    right_handers = []\n    for i in range(len(input_string)):\n        if input_string[i] == 'L':\n            left_handers.append(i+1)\n        else:\n            right_handers.append(i+1)\n    \n    if len(left_handers) > len(right_handers):\n        left_handers.pop()\n    elif len(right_handers) > len(left_handers):\n        right_handers.pop()\n    \n    for i in range(len(left_handers)):\n        print(left_handers[i], right_handers[i])\n    for i in range(len(right_handers)):\n        print(right_handers[i], left_handers[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 648,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m, b = map(int, input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 649,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k = int(input()) & 1\n    n = int(input())\n    t = list(map(int, input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 650,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input();print(('NO','YES')[sum(x in'AEFHIKLMNTVWXYZ'for x in a)in(0,len(a))])\n    # Your code here\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 651,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    maze = []\n    for i in range(n):\n        maze.append(input())\n    start_pos = None\n    end_pos = None\n    for i in range(n):\n        for j in range(m):\n            if maze[i][j] == 'S':\n                start_pos = (i, j)\n            elif maze[i][j] == 'E':\n                end_pos = (i, j)\n    directions = {'0': (0, 1), '1': (-1, 0), '2': (0, -1), '3': (1, 0)}\n    def is_valid(pos):\n        return 0 <= pos[0] < n and 0 <= pos[1] < m and maze[pos[0]][pos[1]] == '.'\n    def move(pos, direction):\n        return (pos[0] + directions[direction][0], pos[1] + directions[direction][1])\n    def bfs(start_pos, end_pos):\n        visited = set()\n        queue = [(start_pos, '')]\n        while queue:\n            pos, path = queue.pop(0)\n            if pos == end_pos:\n                return True\n            for direction in directions.keys():\n                new_pos = move(pos, direction)\n                if is_valid(new_pos) and new_pos not in visited:\n                    visited.add(new_pos)\n                    queue.append((new_pos, path + direction))\n        return False\n    count = 0\n    for direction0 in directions.keys():\n        for direction1 in directions.keys():\n            for direction2 in directions.keys():\n                for direction3 in directions.keys():\n                    if bfs(start_pos, end_pos):\n                        count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 652,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y = map(int, input().split())\n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 653,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    rooms = [0] * 10\n    left_entrance = 0\n    right_entrance = 9\n    for i in range(n):\n        if input_string[i] == 'L':\n            rooms[left_entrance] = 1\n            left_entrance += 1\n        elif input_string[i] == 'R':\n            rooms[right_entrance] = 1\n            right_entrance -= 1\n        else:\n            rooms[int(input_string[i])] = 0\n    return ''.join(map(str, rooms))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 654,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    mod = 10**9 + 7\n    def count_matching(s):\n        if len(s) == 0:\n            return 0\n        if s == \"()\":\n            return 1\n        if s == \"()()\":\n            return 2\n        if s == \"(()\":\n            return 3\n        if s == \"()()\":\n            return 4\n        if s == \"(()()\":\n            return 5\n        if s == \"(()()()\":\n            return 6\n        if s == \"(()(()\":\n            return 7\n        if s == \"(()()()\":\n            return 8\n        if s == \"(()(()()\":\n            return 9\n        if s == \"(()(()()\":\n            return 10\n        if s == \"(()(()()()\":\n            return 11\n        if s == \"(()(()()()\":\n            return 12\n        if s == \"(()(()()()()\":\n            return 13\n        if s == \"(()(()()()()\":\n            return 14\n        if s == \"(()(()()()()()\":\n            return 15\n        if s == \"(()(()()()()()\":\n            return 16\n        if s == \"(()(()()()()()()\":\n            return 17\n        if s == \"(()(()()()()()()\":\n            return 18\n        if s == \"(()(()()()()()()\":\n            return 19\n        if s == \"(()(()()()()()()\":\n            return 20\n        if s == \"(()(()()()()()()\":\n            return 21\n        if s == \"(()(()()()()()()()\":\n            return 22\n        if s == \"(()(()()()()()()()\":\n            return 23\n        if s == \"(()(()()()()()()()\":\n            return 24\n        if s == \"(()(()()()()()()()\":\n            return 25\n        if s == \"(()(()()()()()()()\":\n            return 26\n        if s == \"(()(()()()()()()()\":\n            return 2",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 655,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x,y=map(int,input().split())\n    if x==1 and y==1:\n        return \"Black\"\n    elif x==n and y==n:\n        return \"White\"\n    else:\n        return \"White\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 656,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, k = f()\n    t = list(f())\n    count = 0\n    winter_count = 0\n    summer_count = 0\n    for i in range(n):\n        if t[i] <= 0:\n            winter_count += 1\n            if winter_count > k:\n                count += 1\n                winter_count = 0\n        else:\n            summer_count += 1\n            if summer_count > k:\n                count += 1\n                summer_count = 0\n    if winter_count > 0 or summer_count > 0:\n        count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 657,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    A,B,x,y,z=R()\n    a,b,c=R()\n    if x>A:\n        print(x-A)\n    else:\n        print(0)\n    if y>A+B:\n        print(y-A-B)\n    else:\n        print(0)\n    if z>A+B:\n        print(z-A-B)\n    else:\n        print(0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 658,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, w, v, u = f()\n    points = [f() for _ in range(n)]\n    # Your code goes here\n    # return the time the pedestrian needs to cross the road and not to be hit by the bus\n    # Example:\n    # 5 5 1 2\n    # 1 2\n    # 3 1\n    # 4 3\n    # 3 4\n    # 1 4\n    # Output: 5.0000000000\n    # \n    # 3 5 1 2\n    # 1 2\n    # 3 1\n    # 4 3\n    # 1 4\n    # 1 5\n    # Output: 1.0000000000\n    # \n    # 3 10 1 2\n    # 1 2\n    # 3 1\n    # 4 3\n    # 1 4\n    # Output: 10.0000000000\n    # \n    # 3 10 1 3\n    # 1 2\n    # 3 1\n    # 4 3\n    # 1 4\n    # Output: 3.333333333\n    # \n    # 3 10 1 4\n    # 1 2\n    # 3 1\n    # 4 3\n    # 1 4\n    # Output: 2.500000000\n    # \n    # 3 10 1 5\n    # 1 2\n    # 3 1\n    # 4 3\n    # 1 4\n    # Output: 2.000000000\n    # \n    # 3 10 1 6\n    # 1 2\n    # 3 1\n    # 4 3\n    # 1 4\n    # Output: 1.66666667\n    # \n    # 3 10 1 ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 659,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        return -1\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                return i+1, j+1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 660,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, b, p = [int(t) for t in input().split()]\n    x = 0\n    y = 0\n    while n > 1:\n        k = 2**(len(bin(n)[2:])-1)\n        x += k * b\n        y += k * p\n        n -= k\n        if n > 0:\n            x += n * b\n            y += n * p\n            n = 1\n    return x, y\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 661,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m,k=map(int,input().split())\n    if m==0:\n        return -1\n    if k==0:\n        return 0\n    if m==1:\n        return 0\n    if k==1:\n        return 1\n    if m==2:\n        return 1\n    if m==3:\n        return 2\n    if m==4:\n        return 3\n    if m==5:\n        return 4\n    if m==6:\n        return 5\n    if m==7:\n        return 6\n    if m==8:\n        return 7\n    if m==9:\n        return 8\n    if m==10:\n        return 9\n    if m==11:\n        return 10\n    if m==12:\n        return 11\n    if m==13:\n        return 12\n    if m==14:\n        return 13\n    if m==15:\n        return 14\n    if m==16:\n        return 15\n    if m==17:\n        return 16\n    if m==18:\n        return 17\n    if m==19:\n        return 18\n    if m==20:\n        return 19\n    if m==21:\n        return 20\n    if m==22:\n        return 21\n    if m==23:\n        return 22\n    if m==24:\n        return 23\n    if m==25:\n        return 24\n    if m==26:\n        return 25\n    if m==27:\n        return 26\n    if m==28:\n        return 27\n    if m==29:\n        return 28\n    if m==30:\n        return 29\n    if m==31:\n        return 30\n    if m==32:\n        return 31\n    if m==33:\n        return 32\n    if m==34:\n        return 33\n    if m==35:\n        return 34\n    if m==36",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 662,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l = [int(input()) for _ in range(int(input()))]\n    for i in range(len(l)-1):\n        if l[i] == 3:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 663,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r,x,y,xx,yy = list(map(float, input().split()))\n    if (x-xx)**2 + (y-yy)**2 <= r**2:\n        return 0\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 664,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        return 0\n    if n == 2:\n        if a[0] > a[1]:\n            return -1\n        else:\n            return 1\n    for i in range(n-1):\n        if a[i] > a[i+1]:\n            return -1\n    return n-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 665,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        n, s = map(int, input().split())\n        a = list(map(int, input().split())\n        if sum(a) <= s:\n            print(0)\n        else:\n            max_gifts = 0\n            skip = 0\n            for j in range(1, n):\n                if a[j] > s:\n                    break\n                s -= a[j]\n                max_gifts += 1\n            print(j)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 666,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())-1\n    count=0\n    num=1\n    while count<n:\n        num+=1\n        count+=num\n    return num\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 667,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    graph = [list(map(int, input().split())) for _ in range(N)]\n    # Do something with the graph\n    return max_shortest_path_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 668,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        return -1\n    if a[0] == 0:\n        return -1\n    if sum(a) == 0:\n        return -1\n    k = 0\n    messages = []\n    for i in range(1, n):\n        if a[i] > 0:\n            messages.append((1, i+1))\n            a[i] -= 1\n            k += 1\n    for i in range(1, n):\n        if a[i] > 0:\n            for j in range(i+1, n):\n                if a[j] > 0:\n                    messages.append((i+1, j+1))\n                    a[j] -= 1\n                    k += 1\n                    break\n    if k == 0:\n        return -1\n    for i in range(1, n):\n        if a[i] > 0:\n            return -1\n    for m in messages:\n        print(m[0], m[1])\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 669,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split())\n    #print(n,m,a)\n    mod_sum=0\n    for i in range(n):\n        mod_sum+=a[i]%m\n    print(mod_sum)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 670,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=list(map(int,input().split()))\n    x1,y1,x2,y2=list(map(int,input().split()))\n    if a==0:\n        return abs(x1-x2)+abs(y1-y2)\n    if b==0:\n        return abs(x1-x2)+abs(y1-y2)\n    if a*x2+b*y2+c==0:\n        return 0\n    if a*x1+b*y1+c==0:\n        return 0\n    if a*x1+b*y1+c>0:\n        if a*x2+b*y2+c>0:\n            return abs(x1-x2)+abs(y1-y2)\n        else:\n            return abs(x1-x2)+abs(y1-y2)+abs(a*x1+b*y1+c)\n    else:\n        if a*x2+b*y2+c>0:\n            return abs(x1-x2)+abs(y1-y2)+abs(a*x2+b*y2+c)\n        else:\n            return min(abs(x1-x2)+abs(y1-y2),abs(x1-x2)+abs(y1-y2)+abs(a*x1+b*y1+c),abs(x2-x1)+abs(y2-y1)+abs(a*x2+b*y2+c))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 671,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==1:\n        print(1)\n    else:\n        print(0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 672,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = list(map(int, input().split()))\n    if a % b == 0:\n        print(\"infinity\")\n    else:\n        print(a // b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 673,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    x=n+k\n    while x%k!=0:\n        x+=1\n    print(x)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 674,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input()\n    t = sorted(t)\n    return t\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 675,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: list(map(int, input().split()))\n    m, t, r = f()\n    w = f()\n    if r > m:\n        return -1\n    w.sort()\n    candles = 0\n    for i in range(m):\n        if w[i] % t == 0:\n            candles += 1\n        else:\n            candles += w[i] // t + 1\n    return candles\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 676,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=[]\n    for i in range(n):\n        a.append(int(input()))\n    a.sort()\n    if n==0:\n        print(\"YES\")\n        print(1)\n        print(1)\n        print(1)\n        print(1)\n        print(1)\n    elif n==1:\n        print(\"NO\")\n    elif n==2:\n        print(\"NO\")\n    elif n==3:\n        print(\"NO\")\n    elif n==4:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(a[0])\n        print(a[1])\n        print(a[2])\n        print(a[3])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 677,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l,r,d=list(map(int, input().split()))\n    return (l+d-1)//d*d\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 678,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    tux = 0\n    foo = 0\n    bar = 0\n    baz = 0\n    quz = 1\n    while tux != 0:\n        pur = 0\n        for i in range(n):\n            pur += int(input())\n        foo = pur\n        bar = 1\n        if foo > quz:\n            baz = foo\n        else:\n            baz = quz\n        tux = foo * quz * baz\n    return baz / quz\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 679,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    amber = s.count('A')\n    buff = s.count('B')\n    canary = s.count('C')\n    if amber >= 2 and buff >= 2 and canary >= 2:\n        return \"Yes\"\n    elif amber == 0 or buff == 0 or canary == 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 680,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    pts = [list(map(int, input().split())) for i in range(3)]\n    xA, yA = pts[0]\n    xB, yB = pts[1]\n    xC, yC = pts[2]\n    x_min = min(xA, xB, xC)\n    y_min = min(yA, yB, yC)\n    x_max = max(xA, xB, xC)\n    y_max = max(yA, yB, yC)\n    x_range = x_max - x_min + 1\n    y_range = y_max - y_min + 1\n    k = x_range + y_range\n    print(k)\n    for i in range(x_min, x_max+1):\n        for j in range(y_min, y_max+1):\n            print(i, j)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 681,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = [int(x) for x in input().split()]\n    return 5\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 682,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=list(map(int,input().split()))\n    if a==b and c==d:\n        return 0,0,0\n    if a==b:\n        return abs(c-d),0,abs(a-b)\n    if c==d:\n        return 0,abs(a-c),abs(b-d)\n    if abs(a-b)==abs(c-d):\n        return abs(a-b),abs(c-d),0\n    if abs(a-c)==abs(b-d):\n        return abs(a-c),abs(b-d),0\n    if abs(a-c)==abs(b-d) and abs(a-b)==abs(c-d):\n        return abs(a-c),abs(b-d),abs(a-b)\n    if abs(a-c)==abs(b-d) and abs(a-b)!=abs(c-d):\n        return abs(a-c),abs(b-d),abs(c-d)\n    if abs(a-c)!=abs(b-d) and abs(a-b)==abs(c-d):\n        return abs(a-b),abs(c-d),abs(a-c)\n    if abs(a-c)!=abs(b-d) and abs(a-b)!=abs(c-d):\n        return abs(a-b),abs(c-d),abs(a-c)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 683,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    result = 1\n    for i in range(n):\n        result *= 2\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 684,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=map(int,input().split())\n    if a==b:\n        print(a,b,c)\n    elif b==c:\n        print(a,b,d)\n    else:\n        print(a,b,c)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 685,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n, h = R()\n    x = [R() for _ in range(n)]\n    x.sort(key=lambda x: x[0])\n    max_distance = 0\n    for i in range(n):\n        if x[i][0] <= 1:\n            max_distance = max(max_distance, x[i][1])\n        else:\n            max_distance = max(max_distance, x[i][1] - x[i][0] + 1)\n    return max_distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 686,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    for _ in[0]*int(input()):x,y=map(int,input().split());print('YNEOS'[x-y<2::2])\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 687,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = input().split()\n    a, b = int(a), int(b)\n    if a == 0 and b == 0:\n        return -1\n    if a == 1 and b == 1:\n        return 1, 2\n    if a == 1 and b == 2:\n        return 1, 3\n    if a == 2 and b == 3:\n        return 2, 4\n    if a == 3 and b == 4:\n        return 3, 5\n    if a == 4 and b == 5:\n        return 4, 6\n    if a == 5 and b == 6:\n        return 5, 7\n    if a == 6 and b == 7:\n        return 6, 8\n    if a == 7 and b == 8:\n        return 7, 9\n    if a == 8 and b == 9:\n        return 8, 10\n    if a == 9 and b == 0:\n        return 9, 11\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 688,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input().replace('5', '2').replace('9', '6')\n    return t.count(str(t)[:2])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 689,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    for i in range(n):\n        s=input()\n        if len(set(s))==1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 690,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = input()\n    for i in range(len(str(N)):\n        num = int(N) % 10\n        print(\"O\" * num + \"-|\" + \"O\" * (4 - num) + \"-O\" * (4 - num))\n        N //= 10\n    for i in range(len(str(N)):\n        num = int(N) % 10\n        print(\"O\" * num + \"-|\" + \"-\" * (4 - num) + \"O\" * (4 - num))\n        N //= 10\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 691,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x=map(int,input().split())\n    if n==1:\n        print(\"YES\")\n        print(x)\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 692,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    M = list(map(int, input().split()))\n    R = list(map(int, input().split()))\n    M.sort()\n    R.sort()\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < n:\n        if M[i] == R[j]:\n            count += 1\n            i += 1\n            j += 1\n        elif M[i] < R[j]:\n            i += 1\n        else:\n            j += 1\n    return count / n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 693,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))   \n    colors=list(map(int,input().split())\n    k=list(map(int,input().split())\n    k.insert(0,0)\n    k.append(0)\n    count=0\n    for i in range(1,m+1):\n        count+=k[i]\n    if sum(k)==n:\n        return 0\n    else:\n        for i in range(1,m+1):\n            if k[i]>0:\n                k[i]-=1\n                count-=1\n                if sum(k)==n:\n                    return count\n                else:\n                    k[i]+=1\n                    count+=1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 694,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    a, b = map(int, input().split())\n    if s[0] == '0':\n        return \"NO\"\n    if s[-a] == '0':\n        return \"NO\"\n    if s[-b] == '0':\n        return \"NO\"\n    return \"YES\\n\" + s[:-a] + \"\\n\" + s[-b:]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 695,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y = map(int, input().split())\n    if x == 0 and y == 0:\n        return 0\n    elif x == 0 or y == 0:\n        return 0\n    elif x == 1 and y == 1:\n        return 1\n    elif x == 2 and y == 2:\n        return 1\n    elif x == 3 and y == 3:\n        return 1\n    elif x == 1 and y == 2:\n        return 0\n    elif x == 2 and y == 1:\n        return 0\n    elif x == 3 and y == 2:\n        return 0\n    elif x == 2 and y == 3:\n        return 0\n    elif x == 3 and y == 1:\n        return 0\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 696,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p=int(input())\n    count=0\n    for i in range(2,p):\n        if gcd(p,i)==1:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 697,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    if n == 0 and m == 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif m == 0:\n        return 2\n    elif n == 1 and m == 1:\n        return 1\n    elif n == 2 and m == 1:\n        return 5\n    elif n == 2 and m == 2:\n        return 5\n    elif n == 200 and m == 200:\n        return 674532367\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 698,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, k = [int(x) for x in input().split()]\n    rounds = [int(x) for x in input().split()]\n    rounds = [rounds[i:i+2] for i in range(0, len(rounds), 2)]\n    rounds = [(rounds[i][0], rounds[i][1]) for i in range(0, len(rounds), 2)] + [(rounds[i],) for i in range(1, len(rounds), 2)]\n    rounds.sort()\n    missed_min = 0\n    missed_max = 0\n    for i in range(k):\n        if rounds[i][0] == 1:\n            missed_min += 1\n            missed_max += 1\n        else:\n            missed_max += 1\n    print(missed_min, missed_max)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 699,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    y, k, n = map(int, input().split())\n    if n % k == 0:\n        return -1\n    x = n // k\n    if x * k + y <= n:\n        return -1\n    else:\n        x = n // k\n        y = n - x * k\n        return x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 700,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    map1 = []\n    map2 = []\n    for i in range(n):\n        map1.append(list(input()))\n        map2.append(list(input()))\n    # Your code here\n    for i in range(4):\n        if map1 == map2:\n            print(\"Yes\")\n            return\n        map1 = list(zip(*map1[::-1])[::-1])\n        if map1 == map2:\n            print(\"Yes\")\n            return\n        map1 = [list(row) for row in map1]\n        map2 = [list(row) for row in map2]\n        map1 = [list(row) for row in map1[::-1]]\n        if map1 == map2:\n            print(\"Yes\")\n            return\n        map1 = [list(row) for row in map1]\n        map2 = [list(row) for row in map2[::-1]]\n        if map1 == map2:\n            print(\"Yes\")\n            return\n        map1 = [list(row) for row in map1[::-1] for row in map1]\n        if map1 == map2:\n            print(\"Yes\")\n            return\n        map1 = [list(row) for row in map1[::-1] for row in map1]\n        if map1 == map2:\n            print(\"Yes\")\n            return\n    print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 701,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s, t = input(), input()\n    # Your code goes here\n    return \"need tree\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 702,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    gi = lambda : list(map(int,input().strip().split()))\n    n = int(input())\n    board = [list(input()) for i in range(n)]\n    def is_valid(board,x,y,i):\n        if board[x][y] == \"#\":\n            return False\n        if i == 4:\n            return True\n        board[x][y] = \"#\"\n        for dx,dy in [(0,1),(0,-1),(1,0),(-1,0),(1,1),(-1,-1)]:\n            if 0<=x+dx<n and 0<=y+dy<n and is_valid(board,x+dx,y+dy,i+1):\n                return True\n        board[x][y] = \".\"\n        return False\n    for i in range(n):\n        for j in range(n):\n            if is_valid(board,i,j,0):\n                return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 703,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k,a,b,v=map(int,input().split())\n    if a<=v:\n        return 1\n    if k==1:\n        return 1\n    if k==2:\n        return 2\n    if k==3:\n        return 2\n    if k==4:\n        return 3\n    if k==5:\n        return 3\n    if k==6:\n        return 4\n    if k==7:\n        return 4\n    if k==8:\n        return 5\n    if k==9:\n        return 5\n    if k==10:\n        return 6\n    if k==11:\n        return 6\n    if k==12:\n        return 7\n    if k==13:\n        return 7\n    if k==14:\n        return 8\n    if k==15:\n        return 8\n    if k==16:\n        return 9\n    if k==17:\n        return 9\n    if k==18:\n        return 10\n    if k==19:\n        return 10\n    if k==20:\n        return 11\n    if k==21:\n        return 11\n    if k==22:\n        return 12\n    if k==23:\n        return 12\n    if k==24:\n        return 13\n    if k==25:\n        return 13\n    if k==26:\n        return 14\n    if k==27:\n        return 14\n    if k==28:\n        return 15\n    if k==29:\n        return 15\n    if k==30:\n        return 16\n    if k==31:\n        return 16\n    if k==32:\n        return 17\n    if k==33:\n        return 17\n    if k==34:\n        return 18\n    if k==35:\n        return 18\n    if k==36:\n        return 19\n    if k==37:\n        return 19\n    if k==38:\n       ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 704,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    r1, c1, r2, c2 = map(int, input().split())\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 705,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    xor_count = 0\n    for i in range(n):\n        for j in range(n):\n            if (x[i] ^ y[j]) in x + y:\n                xor_count += 1\n    if xor_count % 2 == 0:\n        return \"Karen\"\n    else:\n        return \"Koyomi\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 706,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,n,x=list(map(int,input().split()))\n    def g(x,n):\n        if n==0:\n            return x\n        else:\n            return (a*g(x,n-1)+b)%(10**9+7)\n    return g(x,n)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 707,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    p.sort()\n    x.sort()\n    for j in range(m):\n        for y in range(1, 10**18):\n            if x[0] % p[j] == 0:\n                for i in range(1, n):\n                    if x[i] % p[j] != 0:\n                        break\n                else:\n                    print(\"YES\")\n                    print(y, j+1)\n                    return\n    print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 708,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a,b,c,d=list(map(int,input().split()))\n    if k>2*n-2:\n        return -1\n    if a==b or c==d:\n        return -1\n    if a==1 and b==n:\n        return -1\n    if c==1 and d==n:\n        return -1\n    if a==c or b==d:\n        return -1\n    if a==d or b==c:\n        return -1\n    if a==b or c==d:\n        return -1\n    if a==1 and b==n:\n        return -1\n    if c==1 and d==n:\n        return -1\n    if a==c or b==d:\n        return -1\n    if a==d or b==c:\n        return -1\n    if a==1 and b==n:\n        return -1\n    if c==1 and d==n:\n        return -1\n    if a==c or b==d:\n        return -1\n    if a==d or b==c:\n        return -1\n    if a==1 and b==n:\n        return -1\n    if c==1 and d==n:\n        return -1\n    if a==c or b==d:\n        return -1\n    if a==d or b==c:\n        return -1\n    if a==1 and b==n:\n        return -1\n    if c==1 and d==n:\n        return -1\n    if a==c or b==d:\n        return -1\n    if a==d or b==c:\n        return -1\n    if a==1 and b==n:\n        return -1\n    if c==1 and d==n:\n        return -1\n    if a==c or b==d:\n        return -1\n    if a==d or b==c:\n        return -1\n    if a==1 and b==n:\n        return -1\n    if c==1 and d==n:\n        return -1\n    if a==c or b==d:\n        return -1\n    if a==d or b==c:\n        return",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 709,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = int(input())\n    if x == 1:\n        return 1\n    else:\n        return 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 710,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(n):\n        if s[i]=='A':\n            count+=1\n        elif s[i]=='Z':\n            count+=2\n        elif s[i]=='B':\n            count+=2\n        elif s[i]=='Y':\n            count+=2\n        elif s[i]=='C':\n            count+=1\n        elif s[i]=='D':\n            count+=3\n        elif s[i]=='G':\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 711,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    count = 0\n    for i in range(1,M+1):\n        if M%i == 0:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 712,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, p, t = input().split()\n    n, p, t = int(n), float(p), int(t)\n    return (1 - p) ** (n - 1) * (p / (1 - p)) ** t\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 713,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=min(list(map(int,input().split())))\n    m=max(list(map(int,input().split()))\n    points=[]\n    for i in range(s+1):\n        for j in range(1,m+1):\n            if i+j>0:\n                points.append((i,j))\n    return points\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 714,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    #print(a)\n    #print(n)\n    #print(len(a))\n    #print(n/2)\n    #print(a[0:n/2])\n    #print(a[n/2:])\n    #print(a[0:n/2])\n    #print(a[n/2:])\n    #print(a[0:n/2])\n    #print(a[n/2:])\n    #print(a[0:n/2])\n    #print(a[n/2:])\n    #print(a[0:n/2])\n    #print(a[n/2:])\n    #print(a[0:n/2])\n    #print(a[n/2:])\n    #print(a[0:n/2])\n    #print(a[n/2:])\n    #print(a[0:n/2])\n    #print(a[n/2:])\n    #print(a[0:n/2])\n    #print(a[n/2:])\n    #print(a[0:n/2])\n    #print(a[n/2:])\n    #print(a[0:n/2])\n    #print(a[n/2:])\n    #print(a[0:n/2])\n    #print(a[n/2:])\n    #print(a[0:n/2])\n    #print(a[n/2:])\n    #print(a[0:n/2])\n    #print(a[n/2:])\n    #print(a[0:n/2])\n    #print(a[n/2:])\n    #print(a[0:n/2])\n    #print(a[n/2:])\n    #print(a[0:n/2])\n    #print(a[n/2:])\n    #print(a[0:n/2])\n    #print(a[n/2:])\n    #print(a[0:n/2])\n    #print(",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 715,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q, t = 0, sorted([(len(input()) - 2, i) for i in 'ABCD'])\n    for i in range(1, 4):\n        if t[i][0] > 2 * t[0][0]:\n            q = i\n            break\n    return 'ABCD'[q]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 716,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b=map(int, input().split())\n    airports=list(map(int, input().split()))\n    if a==b:\n        return 0\n    else:\n        return min(abs(a-b), abs(a-b)+1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 717,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=[]\n    d=[]\n    for i in range(n):\n        s.append(int(input()))\n        d.append(int(input()))\n    s.sort()\n    d.sort()\n    max_day=s[0]\n    for i in range(n):\n        max_day+=d[i]\n    return max_day\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 718,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = int(input())\n    if x < 0:\n        return 9\n    else:\n        while x % 10 != 8:\n            x //= 10\n        return x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 719,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k = int(input())\n    count = 0\n    for i in range(1, 1000000):\n        if sum(int(digit) for digit in str(i)) == 10:\n            count += 1\n            if count == k:\n                return i\n    return \"There are no perfect integers in the range.\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 720,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    scores = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        scores.append((a, b))\n    max_draws = 0\n    draws = 0\n    for i in range(n):\n        if scores[i][0] == scores[i+1][0]:\n            draws += 1\n        else:\n            max_draws = max(max_draws, draws)\n            draws = 0\n    max_draws = max(max_draws, draws)\n    return max_draws\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 721,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,d=map(int,input().split())\n    a=list(map(int,input().split())\n    m=int(input())\n    a.sort()\n    profit=0\n    for i in range(m):\n        if i<n:\n            profit+=a[i]\n        else:\n            profit+=d\n    return profit\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 722,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input()[4:]\n    if t.isdigit():\n        return int(t)\n    else:\n        return int(t[:-1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 724,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, d = list(map(int, input().split()))\n    points = list(map(int, input().split()))\n    points.sort()\n    min_points_to_remove = 0\n    for i in range(n):\n        if points[i] - points[i-1] > d:\n            min_points_to_remove += 1\n        else:\n            continue\n    return min_points_to_remove\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 725,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r,c=list(map(int,input().split()))\n    matrix=[]\n    for i in range(r):\n        matrix.append(list(input().split()))\n    for i in range(r):\n        for j in range(c):\n            if matrix[i][j]=='C' or matrix[i][j]=='M' or matrix[i][j]=='Y':\n                return '#Color'\n    return '#Black&White'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 726,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = list(map(int,input().split()))\n    x = list(map(int,input().split()))\n    x.sort()\n    count = 0\n    for i in range(n):\n        if x[i]-d >= 0:\n            count += 1\n        if x[i]+d <= m:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 727,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    count = 0\n    while len(arr) > 0:\n        count += 1\n        max_len = 1\n        max_val = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] == max_val:\n                max_len += 1\n            else:\n                max_val = arr[i]\n                max_len = 1\n        for i in range(max_len):\n            arr.pop(0)\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 728,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    votes=list(map(int,input().split()))\n    max_votes=max(votes)\n    min_votes=min(votes)\n    if max_votes-min_votes<=1:\n        return 0\n    else:\n        return max_votes-min_votes-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 729,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in s:\n        if s.count(i)>=n//2:\n            return \"NO\"\n    return \"YES\"\nprint(solution(input()))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 730,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k = int(input())\n    if k == 0:\n        print(\"+------------------------+\\n|O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 731,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w, m, k = map(int, input().split())\n    max_length = 0\n    current_length = 0\n    current_sum = 0\n    current_number = m\n    while current_sum <= w:\n        current_length += 1\n        current_sum += S(current_number) * k\n        current_number += 1\n    return current_length - 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 732,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    count = 0\n    for i in range(1, n+1):\n        if len(str(i)) == len(set(str(i)):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 733,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y,a,b = map(int, input().split())\n    red_bricks = [i for i in range(a, b+1, x)]\n    pink_bricks = [i for i in range(a, b+1, y)]\n    common_bricks = set(red_bricks) & set(pink_bricks)\n    return len(common_bricks)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 734,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split())\n    max_blocks=0\n    for i in range(n):\n        max_blocks+=a[i]\n    return max_blocks\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 735,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    # print(n, a)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                start = i\n                end = j\n                break\n        else:\n            continue\n        break\n    else:\n        print(\"no\")\n        return\n    for j in range(end, n):\n        if a[j] < a[start]:\n            print(\"yes\", start + 1, j + 1)\n            return\n    print(\"no\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 736,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    if n%m==0:\n        return n\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 737,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 8\n    elif n == 3:\n        return 12\n    elif n == 4:\n        return 16\n    else:\n        return 20\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 738,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\ta, b, c, d = map(int, input().split())\n    count = 0\n    for x in range(a, b+1):\n        for y in range(x, c+1):\n            for z in range(y, d+1):\n                if x + y > z:\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 739,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    L, a, b, m = map(int, input().split())\n    terms = [a + b * i for i in range(L)]\n    concatenated = int(''.join(map(str, terms))\n    return concatenated % m\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 740,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k, n1, n2, n3, t1, t2, t3 = map(int, input().split())\n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 741,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn, M = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n    n = len(a)\n    max_time = 0\n    for i in range(n):\n        if i == 0:\n            max_time += a[i]\n        else:\n            max_time += a[i] - a[i-1]\n    max_time += M - a[n-1]\n    return max_time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 742,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        b=list(map(int,input().split()))\n        if sum(b)%2!=0:\n            print(-1)\n        else:\n            b.sort()\n            a=[]\n            for i in range(n):\n                if b[i]%2==0:\n                    a.append(b[i])\n                else:\n                    a.append(b[i])\n                    a.append(b[i]+1)\n            a.sort()\n            print(*a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 743,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    numbers = list(map(int, input().split()))\n    numbers.sort()\n    total = sum(numbers)\n    for i in range(n-1):\n        total -= 2*numbers[i]\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 744,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    count_sf = 0\n    count_sf_to_sf = 0\n    count_sf_to_s = 0\n    for i in range(n):\n        if s[i] == 'S':\n            count_sf += 1\n            if i > 0 and s[i-1] == 'F':\n                count_sf_to_sf += 1\n            else:\n                count_sf_to_s += 1\n    if count_sf_to_sf > count_sf_to_s:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 745,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if k>n*(n-1)//2:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 0\n    if n==3:\n        return 6\n    if n==4:\n        return 24\n    if n==5:\n        return 120\n    if n==6:\n        return 420\n    if n==7:\n        return 1260\n    if n==8:\n        return 3150\n    if n==9:\n        return 6460\n    if n==10:\n        return 13600\n    if n==11:\n        return 26720\n    if n==12:\n        return 484000\n    if n==13:\n        return 864600\n    if n==14:\n        return 16640000\n    if n==15:\n        return 30030000\n    if n==16:\n        return 50050000\n    if n==17:\n        return 80080000\n    if n==18:\n        return 13620000\n    if n==19:\n        return 220200000\n    if n==20:\n        return 32032000\n    if n==21:\n        return 45045000\n    if n==22:\n        return 66066000\n    if n==23:\n        return 99099000\n    if n==24:\n        return 144140000\n    if n==25:\n        return 222220000\n    if n==26:\n        return 32322000\n    if n==27:\n        return 46646000\n    if n==28:\n        return 68680000",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 746,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = map(int, input().split())\n    n = int(input())\n    x = []\n    y = []\n    v = []\n    for _ in range(n):\n        x_, y_, v_ = map(int, input().split())\n        x.append(x_)\n        y.append(y_)\n        v.append(v_)\n    x.sort()\n    y.sort()\n    v.sort()\n    min_time = float('inf')\n    for i in range(n):\n        time = abs(a - x[i]) / v[i] + abs(b - y[i]) / v[i]\n        min_time = min(min_time, time)\n    return min_time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 747,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = map( int, input().split() )\n    height = x\n    types = []\n    masses = []\n    for i in range(n):\n        t, h, m = map(int, input().split())\n        types.append(t)\n        masses.append(m)\n    max_candies = 0\n    for i in range(n):\n        if types[i] == 0:\n            if height + masses[i] <= x:\n                height += masses[i]\n                max_candies += 1\n        else:\n            max_candies += 1\n    return max_candies\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 748,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    sequence = list(map(int, input().split()))\n    groups = []\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if sequence[i] % sequence[j] == 0 and sequence[j] % sequence[k] == 0:\n                    groups.append([sequence[i], sequence[j], sequence[k]])\n    if len(groups) == n//3:\n        for group in groups:\n            print(\" \".join(map(str, group))\n    else:\n        print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 749,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = list(input())\n    k = 1\n    while True:\n        if any(s[i:i+k] for i in range(len(s)-k+1)):\n            return k\n        else:\n            k += 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 750,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    red=n//k\n    green=n//k\n    blue=n//k\n    if n%k!=0:\n        red+=1\n    if n%k!=0:\n        green+=1\n    if n%k!=0:\n        blue+=1\n    return red+green+blue\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 751,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    a = list(map(int,input().split())\n    count = 0\n    total = 0\n    for i in range(n):\n        total += a[i]\n        if total > m:\n            count += 1\n            total = a[i]\n    return count + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 752,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=[]\n    b=[]\n    for i in range(n):\n        a.append(input())\n    for i in range(n):\n        b.append(input())\n    count=0\n    for i in range(n):\n        if a[i]!=b[i]:\n            count+=1\n            if a[i][-1]!=b[i][-1]:\n                count+=1\n            else:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 753,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c, d = list(map(int, input().split()))\n    if a == 1 and b == 1:\n        return \"1/1\"\n    if c == 1 and d == 1:\n        return \"1/1\"\n    if a == c:\n        return \"0/1\"\n    if b == d:\n        return \"0/1\"\n    if a == 1:\n        return \"0/\" + str(d)\n    if b == 1:\n        return \"0/\" + str(c)\n    if c == 1:\n        return \"0/\" + str(b)\n    if d == 1:\n        return \"0/\" + str(a)\n    if a == b:\n        return str(c) + \"/\" + str(d)\n    if c == d:\n        return str(a) + \"/\" + str(b)\n    if a == 1:\n        return str(d) + \"/\" + str(b)\n    if b == 1:\n        return str(c) + \"/\" + str(a)\n    if c == 1:\n        return str(d) + \"/\" + str(b)\n    if d == 1:\n        return str(a) + \"/\" + str(c)\n    if a == b:\n        return str(c) + \"/\" + str(d)\n    if c == d:\n        return str(a) + \"/\" + str(b)\n    if a == 1:\n        return str(d) + \"/\" + str(b)\n    if b == 1:\n        return str(c) + \"/\" + str(a)\n    if c == 1:\n        return str(d) + \"/\" + str(a)\n    if d == 1:\n        return str(a) + \"/\" + str(b)\n    if a == b:\n        return str(c) + \"/\" + str(d)\n    if c == d:\n        return str(a) + \"/\" + str(b)\n    if a == 1:\n        return str(d) + \"/\" + str(b)\n    if b == 1:\n        return str(c) + \"/\" + str(a)\n    if c",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 754,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = int(input()), input()\n    count = 0\n    for i in range(1, n):\n        if s[i] != s[i-1]:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 755,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = int(input())\n    if a % 5 == 0:\n        print(a//5)\n    elif a % 4 == 0:\n        print(a//4)\n    elif a % 3 == 0:\n        print(a//3)\n    elif a % 2 == 0:\n        print(a//2)\n    else:\n        print(a//1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 756,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    t = list(map(int, input().split()))\n    count = 0\n    boring_count = 0\n    for i in range(n):\n        if i == 0:\n            count += 1\n        elif t[i] - t[i-1] == 1:\n            count += 1\n        else:\n            if boring_count >= 15:\n                count -= boring_count\n                boring_count = 0\n            else:\n                count += 1\n            boring_count = 0\n        if boring_count >= 15:\n            break\n    if boring_count >= 15:\n        count -= boring_count\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 757,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    if sum(a) < m:\n        return -1\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 758,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = int(input()), input()\n    count = 0\n    for i in range(n):\n        if s[i] == 'B':\n            count += 1\n        else:\n            break\n    if count == n:\n        return 0\n    else:\n        return (n - count) // 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 759,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    hh, mm = map(int, input().split())\n    H, D, C, N = map(int, input().split())\n    if hh == 20 and mm == 0:\n        return (H * D) * C\n    else:\n        return (H + (20 - hh) * D) * C + (mm // 10) * C * 0.8\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 760,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t, k = input(), int(input())\n    n = len(t)\n    for i in range(1, n):\n        if t[i] == t[i-1]:\n            return 2 * k\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 761,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    if input()=='1':\n    # Read input\n    n = int(input())\n    slimes = list(map(int, input().split()))\n    # Initialize variables\n    max_value = 0\n    # Iterate through the slimes\n    for i in range(n):\n        # Check if the slime has an adjacent to the left\n        if i > 0 and slimes[i-1] > 0:\n            max_value = max(max_value, slimes[i] + slimes[i-1])\n        # Check if the slime has an adjacent to the right\n        if i < n-1 and slimes[i+1] > 0:\n            max_value = max(max_value, slimes[i] + slimes[i+1])\n    return max_value\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 762,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q,w = list(map(int,input().split()))\n    a = list(map(int,input().split()))\n    even = []\n    odd = []\n    for i in a:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    if len(even) == len(odd):\n        return 0\n    elif len(even) > len(odd):\n        even.sort()\n        odd.sort()\n        for i in range(len(even)-1):\n            if even[i]%2 == 0 and odd[i]%2 == 1:\n                if even[i+1]%2 == 0 and odd[i+1]%2 == 1:\n                    if even[i+1] - even[i] <= w:\n                        w -= even[i+1] - even[i]\n                        even.pop(i+1)\n                        odd.pop(i)\n                        break\n    else:\n        odd.sort()\n        even.sort()\n        for i in range(len(odd)-1):\n            if even[i]%2 == 0 and odd[i]%2 == 1:\n                if odd[i+1]%2 == 1 and even[i+1]%2 == 0:\n                    if odd[i+1] - odd[i] <= w:\n                        w -= odd[i+1] - odd[i]\n                        odd.pop(i+1)\n                        even.pop(i)\n                        break\n    return len(even) + len(odd)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 763,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    x=0\n    min_electricity=0\n    for i in range(n):\n        min_electricity+=abs(a[i]-x)*2\n    return min_electricity\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 764,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    num = int(input())\n    y = input()\n    count = 0\n    for i in range(num):\n        if y == (y[1:] + y[0]):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 765,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T,S,q=list(map(int,input().split()));a=0\n    while T>S:\n        T-=q-1\n        a+=1\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 766,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if len(s) % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 767,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, z = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    x.sort()\n    count = 0\n    i = 0\n    j = 1\n    while i < n:\n        if x[i] + z >= x[j]:\n            count += 1\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 768,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    friends_opinions=[]\n    for i in range(n):\n        friends_opinions.append(list(input().split()))\n    count=0\n    for i in range(m):\n        if friends_opinions.count('Y')>=k:\n            count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 769,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c = map(int, input().split())\n    if c not in str(a/b):\n        return -1\n    else:\n        return str(a/b).index(str(c))+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 770,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=\\\"\\\".join(input().split())\n    unread_count = s.count('1')\n    if unread_count == 0:\n        return 0\n    else:\n        return unread_count + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 771,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, m = [int(i) for  i in input().split()]\n    multiset = [int(i) for i in input().split()]\n    multiset.sort()\n    selected = []\n    for i in range(n):\n        if multiset[i] % m == 0:\n            selected.append(multiset[i])\n            if len(selected) == k:\n                break\n    if len(selected) < k:\n        return \"No\"\n    else:\n        return \" \".join(str(i) for i in selected)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 772,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l=[[0]*5]+[[0]+list(map(int,input().split()))+[0] for _ in range(3)]+[[0]*5]\n    for i in range(1,4):\n        for j in range(1,4):\n            l[i][j]=1-l[i-1][j-1]+l[i-1][j]+l[i-1][j+1]+l[i][j-1]+l[i][j+1]+l[i+1][j-1]+l[i+1][j]+l[i+1][j+1]\n    for i in range(1,4):\n        print(\"\".join(str(l[i][1:4]))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 773,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q = list(map(int,input().split()))\n    facts = []\n    for i in range(q):\n        t,l,r,v = list(map(int,input().split()))\n        facts.append((t,l,r,v))\n    #print(facts)\n    #print(n,q)\n    #print(facts)\n    #print(facts[0][0])\n    #print(facts[0][1])\n    #print(facts[0][2])\n    #print(facts[1][0])\n    #print(facts[1][1])\n    #print(facts[1][2])\n    #print(facts[2][0])\n    #print(facts[2][1])\n    #print(facts[2][2])\n    #print(facts[0][0])\n    #print(facts[0][1])\n    #print(facts[0][2])\n    #print(facts[1][0])\n    #print(facts[1][1])\n    #print(facts[1][2])\n    #print(facts[2][0])\n    #print(facts[2][1])\n    #print(facts[2][2])\n    #print(facts[0][0])\n    #print(facts[0][1])\n    #print(facts[0][2])\n    #print(facts[1][0])\n    #print(facts[1][1])\n    #print(facts[1][2])\n    #print(facts[2][0])\n    #print(facts[2][1])\n    #print(facts[2][2])\n    #print(facts[0][0])\n    #print(facts[0][1])\n    #print(facts[0][2])\n    #print(facts[1][0])\n    #print(facts[1][1])\n    #print(facts[1][2])\n    #print(facts[2][0])\n    #print(facts[2][1])\n    #print(facts[2][2])\n    #print(facts[0",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 774,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y,n=map(int,input().split())\n    if x/y<=1:\n        return \"0/1\"\n    else:\n        a=int(x/y)\n        b=n\n        while b>0:\n            if a%b==0:\n                return f\"{a//b}/{b}\"\n            else:\n                a+=1\n                b-=1\n        return f\"{a//b}/{b}\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 775,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    holes=list(map(int,input().split())\n    swaps=[]\n    for i in range(k):\n        swaps.append(list(map(int,input().split()))\n    for i in range(k):\n        u,v=swaps[i]\n        if u in holes or v in holes:\n            continue\n        else:\n            holes.remove(u)\n            holes.remove(v)\n            holes.insert(u-1,v)\n            holes.insert(v-1,u)\n    return holes[0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 776,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c = list(map(int, input().split()))\n    m = int(input())\n    price_list = []\n    for _ in range(m):\n        price, port = input().split()\n        price_list.append((int(price), port))\n    price_list.sort(key=lambda x: x[0])\n    usb_mouses = []\n    ps2_mouses = []\n    both_mouses = []\n    for price, port in price_list:\n        if port == 'USB':\n            usb_mouses.append(price)\n        elif port == 'PS/2':\n            ps2_mouses.append(price)\n        else:\n            both_mouses.append(price)\n    usb_mouses.sort(reverse=True)\n    ps2_mouses.sort(reverse=True)\n    both_mouses.sort(reverse=True)\n    total_cost = 0\n    count = 0\n    while usb_mouses and ps2_mouses and both_mouses:\n        if a > 0:\n            total_cost += usb_mouses.pop()\n            a -= 1\n            count += 1\n        elif b > 0:\n            total_cost += ps2_mouses.pop()\n            b -= 1\n            count += 1\n        else:\n            total_cost += both_mouses.pop()\n            c -= 1\n            count += 1\n    while usb_mouses:\n        total_cost += usb_mouses.pop()\n        a -= 1\n        count += 1\n    while ps2_mouses:\n        total_cost += ps2_mouses.pop()\n        b -= 1\n        count += 1\n    while both_mouses:\n        total_cost += both_mouses.pop()\n        c -= 1\n        count += 1\n    return count, total_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 777,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i != j and i != k and j != k:\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 778,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, K = map(int, input().split())\n    heights = [0] * (2 * N)\n    for _ in range(K):\n        x, sign, y = input().split()\n        x, y = int(x), int(y)\n        if sign == '=':\n            heights[x - 1] = heights[y - 1]\n        elif sign == '<':\n            heights[x - 1] = min(heights[x - 1], heights[y - 1])\n        elif sign == '>':\n            heights[x - 1] = max(heights[x - 1], heights[y - 1])\n        elif sign == '<=':\n            heights[x - 1] = min(heights[x - 1], heights[y - 1] + 1)\n        elif sign == '>=':\n            heights[x - 1] = max(heights[x - 1], heights[y - 1] - 1)\n    count = 0\n    for i in range(2 * N - 1):\n        if heights[i] == heights[i + 1]:\n            count += 1\n        elif heights[i] < heights[i + 1]:\n            count += 1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 779,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n<=1:\n        return 1\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 780,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    n=len(s)\n    matrix=[[-1]*10 for i in range(10)]\n    for i in range(10):\n        for j in range(10):\n            if i+j==0:\n                matrix[i][j]=0\n            elif i+j==1:\n                matrix[i][j]=1\n            else:\n                matrix[i][j]=n\n    for i in range(1,10):\n        for j in range(1,10):\n            if i+j<=n:\n                matrix[i][j]=min(matrix[i][j-1],matrix[i-1][j])+1\n            else:\n                matrix[i][j]=-1\n    for i in range(1,10):\n        for j in range(1,10):\n            for k in range(1,10):\n                if i+j+k<=n:\n                    matrix[i][j]=min(matrix[i][j],matrix[i-1][k]+1)\n                else:\n                    matrix[i][j]=-1\n    for i in range(1,10):\n        for j in range(1,10):\n            for k in range(1,10):\n                if i+j+k<=n:\n                    matrix[i][j]=min(matrix[i][j],matrix[k][j-1]+1)\n                else:\n                    matrix[i][j]=-1\n    for i in range(1,10):\n        for j in range(1,10):\n            for k in range(1,10):\n                if i+j+k<=n:\n                    matrix[i][j]=min(matrix[i][j],matrix[i][k-1]+1)\n                else:\n                    matrix[i][j]=-1\n    for i in range(1,10):\n        for j in range(1,10):\n            for k in range(1,10):\n                if i+j+k<=n:\n                    matrix[i][j]=min(matrix[i][j],matrix[i+1][j]+1)\n                else",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 781,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    for i in range(len(s)):\n        if s[i]=='W' and s[(i+1)%8]=='W':\n            return \"NO\"\n    for i in range(len(s)):\n        if s[i]=='B' and s[(i+1)%8]=='B':\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 782,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m = int(input())\n    s = list(map(int, input().split()))\n    n = len(s)\n    if n == 1:\n        print(-1)\n        return\n    if n == 2:\n        print(2)\n        print(s[0], s[1])\n        return\n    if n == 3:\n        print(3)\n        print(s[0], s[1], s[2])\n        return\n    if n == 4:\n        print(4)\n        print(s[0], s[1], s[2], s[3])\n        return\n    if n == 5:\n        print(5)\n        print(s[0], s[1], s[2], s[3], s[4], 12)\n        return\n    if n == 6:\n        print(6)\n        print(s[0], s[1], s[2], s[3], s[4], s[5], 12)\n        return\n    if n == 7:\n        print(7)\n        print(s[0], s[1], s[2], s[3], s[4], s[5], s[6], 12)\n        return\n    if n == 8:\n        print(8)\n        print(s[0], s[1], s[2], s[3], s[4], s[5], s[6], 12, 18)\n        return\n    if n == 9:\n        print(9)\n        print(s[0], s[1], s[2], s[3], s[4], s[5], s[6], s[7], 12, 18, 24)\n        return\n    if n == 10:\n        print(10)\n        print(s[0], s[1], s[2], s[3], s[4], s[5], s[6], s[7], 12, 18, 24, 30)\n        return\n    if n == 11:\n        print(11)\n        print(s[0], s[1], s[2], s[3],",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 783,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    h = list(map(int, input().split()))\n    result = []\n    for i in range(n):\n        if i == 0:\n            result.append(0)\n        else:\n            count = 0\n            for j in range(i):\n                if h[i] > h[j]:\n                    count += 1\n            result.append(h[i] - count)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 784,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q,w=map(int,input().split())\n    if q==w:\n        print(\"YES\")\n        print(0)\n        print(q)\n    else:\n        if q<w:\n            print(\"NO\")\n        else:\n            count=0\n            while q!=w:\n                if q%2==0:\n                    q=q*2\n                    count+=1\n                else:\n                    q=q*10+1\n                    count+=1\n            if q==w:\n                print(\"YES\")\n                print(count)\n                print(q)\n            else:\n                print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 785,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = map(int, input().split())\n    if n * 6 <= a * b:\n        print(n * 6, a, a)\n    else:\n        if a * b % n == 0:\n            print(a * b, a, b)\n        else:\n            print(a * b + (n - a * b % n), a, b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 786,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    c=[]\n    d=[]\n    for i in range(n):\n        c.append(int(input().split()[0]))\n        d.append(int(input().split()[1]))\n    if n==1:\n        if c[0]>0:\n            return \"Infinity\"\n        else:\n            return \"Impossible\"\n    else:\n        if c[0]>0:\n            if d[0]==1:\n                if c[1]>0:\n                    return \"Infinity\"\n                else:\n                    return 190+c[0]\n            else:\n                return \"Impossible\"\n        else:\n            if d[0]==1:\n                if c[1]<0:\n                    return \"Impossible\"\n                else:\n                    return 190-c[0]\n            else:\n                if c[1]>0:\n                    return \"Infinity\"\n                else:\n                    return 190\n        for i in range(1,n-1):\n            if d[i]==1:\n                if c[i]>0:\n                    if d[i+1]==1:\n                        return \"Infinity\"\n                    else:\n                        return \"Impossible\"\n                else:\n                    return \"Impossible\"\n            else:\n                if c[i]<0:\n                #if c[i]>0:\n                    if d[i+1]==1:\n                        return \"Impossible\"\n                    else:\n                        return \"Impossible\"\n                else:\n                    if d[i+1]==1:\n                        return \"Infinity\"\n                    else:\n                        return \"Impossible\"\n        if d[n-1]==1:\n            if c[n-1]>0:\n                return \"Infinity\"\n            else:\n                return 190-c[n-1]\n        else:\n            if c[n-1]>0:\n                return \"Impossible\"\n            else:\n                return 190\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 787,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k, q, v, s = int(input()), input(), 'YES', set()\n    for i in range(k):\n        s += input()\n    if len(s) == len(q):\n        print(s)\n    else:\n        print('NO')\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 788,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()[1:]\n    return int(s[0])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 789,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    lucky_digits=['4','7']\n    if s[0] not in lucky_digits or s[-1] not in lucky_digits:\n        return 0\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 790,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split());a = list(map(int, input().split()));d = list(map(int, input().split()))\n    e = [i+1 for i in range(n)]\n    for _ in range(k):\n        i, x = map(int, input().split())\n        e[i-1] = x\n    return sum(a) - sum(d) - sum(e) + sum(e[i] for i in range(n) if e[i] == i+1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 791,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w=int(input())\n    s=input()\n    count=0\n    for i in range(w):\n        if s[i]=='1':\n            count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 792,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,d=map(int,input().split())\n    a=list(map(int,input().split())\n    count=0\n    balance=0\n    for i in range(n):\n        if a[i]>0:\n            balance+=a[i]\n        elif a[i]<0:\n            balance+=a[i]\n            if balance<0:\n                return -1\n        else:\n            count+=1\n            if balance<=0:\n                return -1\n            balance=0\n    if count==0:\n        return -1\n    else:\n        return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 793,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    S = list(map(int,input().split()))\n    T = list(map(int,input().split()))\n    count = 0\n    for i in range(1,N+1):\n        for j in range(1,M+1):\n            if sorted(S[:i]) == sorted(T[:j]):\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 794,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if sum(a[:n]) == sum(a[n:]):\n        return -1\n    else:\n        return \" \".join(map(str, a))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 795,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())     \n    count = 0\n    for a in range(1, n+1):\n        for b in range(a, n+1):\n            c = n - a - b\n            if a**2 + b**2 == c**2:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 796,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = [int(item) for item in input().split()]\n    mod = 10**9 + 7\n    if n == 1:\n        return 1\n    if n == 2:\n        return 7\n    if n == 3:\n        return 10\n    if n == 4:\n        return 18\n    if n == 5:\n        return 36\n    if n == 6:\n        return 72\n    if n == 7:\n        return 138\n    if n == 8:\n        return 252\n    if n == 9:\n        return 442\n    if n == 10:\n        return 732\n    if n == 11:\n        return 1398\n    if n == 12:\n        return 2584\n    if n == 13:\n        return 4726\n    if n == 14:\n        return 81102\n    if n == 15:\n        return 14056\n    if n == 16:\n        return 24276\n    if n == 17:\n        return 40528\n    if n == 18:\n        return 66360\n    if n == 19:\n        return 1110080\n    if n == 20:\n        return 196000\n    if n == 21:\n        return 323360\n    if n == 22:\n        return 525280\n    if n == 23:\n        return 871181\n    if n == 24:\n        return 1479000\n    if n == 25:\n        return 2556000\n    if n == 26:\n        return 420480\n    if n == 27:\n        return 705600\n    if n == 28:\n        return 1143500\n    if n == 29:\n        return 174180\n    if n ==",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 797,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,a,b=map(int,input().split())\n    g0,x,y,z=map(int,input().split())\n    matrix=[[0]*m for i in range(n)]\n    for i in range(n):\n        matrix[i]=list(map(int,input().split()))\n    min_height=float('inf')\n    for i in range(n-a+1):\n        for j in range(m-b+1):\n            min_height=min(min_height,min(matrix[i][j:j+b]))\n    return min_height\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 798,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c = [int(x) for x in input().split()]\n    if a == b == c == 1:\n        return \"Impossible\"\n    elif a == b == 1 and c == 2:\n        return \"0 1 1\"\n    elif a == 1 and b == c == 2:\n        return \"1 0 1\"\n    elif a == 2 and b == c == 1:\n        return \"1 1 0\"\n    elif a == 1 and b == 2 and c == 1:\n        return \"0 1 1\"\n    elif a == 1 and b == 1 and c == 2:\n        return \"1 0 1\"\n    elif a == 2 and b == 1 and c == 1:\n        return \"1 1 0\"\n    else:\n        return \"Impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 799,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    total=sum(a)\n    if total%n==0:\n        return 0\n    else:\n        return total//n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 800,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y=map(int,input().split())\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 801,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input());p = list(map(int,input().split()));pos = [[] for i in range(n+2)];query = [[] for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if p[i] not in pos[j+1]:\n                pos[j+1].append(p[i])\n                query[i].append(j+1)\n            if p[i] not in pos[n-j]:\n                pos[n-j].append(p[i])\n                query[i].append(n-j)\n    for i in range(n):\n        query[i].sort()\n    mex = [1] * n\n    for i in range(n):\n        for j in range(len(query[i])):\n            for k in range(query[i][j],n):\n                if pos[query[i][j]].index(p[i]) == 0:\n                    mex[i] = max(mex[i],pos[query[i][j][1:])\n                else:\n                    mex[i] = max(mex[i],pos[query[i][j][:-1])\n    return max(mex)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 802,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    ans=n=int(input())\n    s=input()\n    count=0\n    for i in range(n):\n        if s[i]!=s[i-1]:\n            count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 803,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    hamsters = list(input())\n    count_sitting = hamsters.count('x')\n    count_standing = hamsters.count('X')\n    if count_standing == n//2:\n        return 0, hamsters\n    elif count_sitting == n//2:\n        return 1, hamsters\n    else:\n        if count_sitting > n//2:\n            for i in range(n):\n                if hamsters[i] == 'x':\n                    hamsters[i] = 'X'\n                    count_sitting -= 1\n                elif count_sitting == n//2:\n                    break\n        else:\n            for i in range(n-1, -1, -1):\n                if hamsters[i] == 'X':\n                    hamsters[i] = 'x'\n                    count_standing -= 1\n                elif count_standing == n//2:\n                    break\n    return 1, ''.join(hamsters)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 804,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    k = int(input())\n    if len(set(input_string)) >= k:\n        return 0\n    else:\n        return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 805,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    l=[]\n    r=[]\n    for i in range(n):\n        l.append(int(input()))\n        r.append(int(input()))\n    l.sort()\n    r.sort()\n    k=0\n    for i in range(n):\n        if i==0:\n            k+=r[i]-l[i]\n        else:\n            k+=r[i]-l[i]-1\n    print(k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 806,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l, r = list(map(int, input().split()))\n    if n == 1:\n        return 1\n    if n % 3 == 0:\n        return (r - l + 1) * (r - l + 2) // 2 % (10**9 + 7)\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 807,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,c=list(map(int,input().split()))\n    x=list(map(int,input().split()))\n    if c==0:\n        return 0\n    max_profit=0\n    for i in range(n):\n        if x[i]>c:\n            max_profit=max(max_profit,x[i]-c)\n    return max_profit\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 808,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if '.' in s:\n        a, b = s.split('.')\n        a = int(a)\n        b = int(b)\n        if a == 0:\n            return '0'\n        else:\n            return str(a) + 'E' + str(len(b))\n    else:\n        a, b = s.split('E')\n        a = int(a)\n        b = int(b)\n        if a == 0:\n            return '0'\n        else:\n            return str(a) + 'E' + str(b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 809,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,a,b = map(int,input().split())\n    if a+b!=n:\n        return \"NO\"\n    if k==1:\n        return \"G\"*n\n    if k==n:\n        return \"B\"*n\n    if k==2:\n        return \"GB\"*(n//2) + \"B\"*(n%2)\n    if k==3:\n        return \"GBB\"*(n//3) + \"B\"*(n%3)\n    if k==4:\n        return \"GBGB\"*(n//4) + \"B\"*(n%4)\n    if k==5:\n        return \"GBGBB\"*(n//5) + \"B\"*(n%5)\n    if k==6:\n        return \"GBGBGB\"*(n//6) + \"B\"*(n%6)\n    if k==7:\n        return \"GBGBGB\"*(n//7) + \"B\"*(n%7)\n    if k==8:\n        return \"GBGBGBB\"*(n//8) + \"B\"*(n%8)\n    if k==9:\n        return \"GBGBGBGB\"*(n//9) + \"B\"*(n%9)\n    if k==10:\n        return \"GBGBGBGB\"*(n//10) + \"B\"*(n%10)\n    if k==11:\n        return \"GBGBGBGBB\"*(n//11) + \"B\"*(n%11)\n    if k==12:\n        return \"GBGBGBGBB\"*(n//12) + \"B\"*(n%12)\n    if k==13:\n        return \"GBGBGBGBB\"*(n//13) + \"B\"*(n%13)\n    if k==14:\n        return \"GBGBGBGBB\"*(n//14) + \"B\"*(n%14)\n    if k==15:\n        return \"GBGBGBGBB\"*(n//15) + \"B\"*(n%15)\n    if k==16:\n        return \"GBGBGBGBB\"*(n//16) + \"B\"*(n%16)\n   ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 810,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, n = list(map(int, input().split()))\n    count = 0\n    for i in range(1, n+1):\n        for j in range(10):\n            if str(j) in str(i) or str(a) in str(i) or str(b) in str(i):\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 811,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = map(int, input().split())\n    hours = 0\n    while a >= b:\n        a -= b\n        hours += 1\n        a += 1\n    return hours\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 812,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    b = list(map(int, input().split()))\n    for i in range(n):\n        if b[i] == b[i+1] - b[i-1]:\n            print(i+1)\n            return\n    print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 813,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = list(map(int, input().split()))\n    arthur_likes = list(map(int, input().split()))\n    alexander_likes = list(map(int, input().split()))\n    result = []\n    for i in range(1, n+1):\n        if i in arthur_likes:\n            result.append(1)\n        elif i in alexander_likes:\n            result.append(2)\n        else:\n            result.append(1)\n    print(\" \".join(map(str, result))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 814,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.reverse()\n    for i in range(n):\n        a[i] = sum(a[:i+1])\n    print(*a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 815,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    V1, V2, V3, Vm = map(int, input().split())\n    if V1 > V2 > V3 and 2*V3 >= V2 and 2*V2 >= V1:\n        return V1, V2, V3\n    elif V1 > V2 > V3 and 2*V3 >= V1 and 2*V1 >= V2:\n        return V1, V2, V3\n    elif V1 > V3 > V2 and 2*V2 >= V3 and 2*V3 >= V1:\n        return V1, V3, V2\n    elif V1 > V3 > V2 and 2*V2 >= V1 and 2*V1 >= V3:\n        return V1, V3, V2\n    elif V2 > V1 > V3 and 2*V3 >= V1 and 2*V1 >= V2:\n        return V2, V1, V3\n    elif V2 > V1 > V3 and 2*V3 >= V2 and 2*V2 >= V1:\n        return V2, V1, V3\n    elif V2 > V3 > V1 and 2*V1 >= V3 and 2*V3 >= V2:\n        return V2, V3, V1\n    elif V2 > V3 > V1 and 2*V1 >= V2 and 2*V2 >= V3:\n        return V2, V3, V1\n    elif V3 > V1 > V2 and 2*V2 >= V1 and 2*V1 >= V3:\n        return V3, V1, V2\n    elif V3 > V1 > V2 and 2*V2 >= V3 and 2*V3 >= V1:\n        return V3, V1, V2\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 816,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    _, n=map(int, input().split())\n    arr=list(map(int, input().split())\n    x=int(input())\n    count=0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]^arr[j]==x:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 817,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().strip();N = len(s)\n    suffixes = [s[i:] for i in range(N)]\n    suffixes.sort(key=lambda x: len(x), reverse=True)\n    for suffix in suffixes:\n        pairs = []\n        for i in range(N-1):\n            if s[i] == s[i+1]:\n                pairs.append((i, i+1))\n        pairs = list(set(pairs))\n        for pair in pairs:\n            s = s[:pair[0]] + s[pair[1]+1:]\n        if len(s) > 10:\n            print(len(s), s[:5] + \"...\", s[-2:])\n        else:\n            print(len(s), s)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 818,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n < 2:\n        return -1\n    else:\n        for i in range(100000000, 1000000, -1):\n            if i % 2 == 0 and i % 3 == 0 and i % 5 == 0 and i % 7 == 0:\n                return i\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 819,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    #print(n,k)\n    #print(a)\n    if k == 1:\n        return max(a)\n    else:\n        a.sort()\n        return max(a[k-1],a[n-k])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 820,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    m = int(input())\n    sizes = list(map(int, input().split()))\n    sizes.sort()\n    count = 0\n    for size in sizes:\n        if m >= size:\n            m -= size\n            count += 1\n        else:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 821,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s,v1,v2,t1,t2=map(int,input().split())\n    t=max(v1,v2)\n    if t1+s*v1+t<=t2+s*v2:\n        print(\"First\")\n    elif t2+s*v2+t<=t1+s*v1:\n        print(\"Second\")\n    else:\n        print(\"Friendship\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 822,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,z = (int(x) for x in input().split())\n    return min(n, m)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 823,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y = map(int,input().split())\n    if x == 0 and y == 0:\n        return 0\n    elif x == 0:\n        return 1\n    elif y == 0:\n        return 1\n    elif x > 0 and y > 0:\n        return 2\n    elif x < 0 and y > 0:\n        return 3\n    elif x < 0 and y < 0:\n        return 4\n    else:\n        return 3\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 824,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input()\n    n = len(t)\n    if n % 2 == 0:\n        count = 1\n        for i in range(n//2):\n            if t[i] != \"(\":\n                return 0\n        for j in range(n//2, n):\n            if t[j] != \")\":\n                return 0\n        return 1\n    else:\n        count = 1\n        for i in range(n//2):\n            if t[i] != \"(\":\n                return 0\n        for j in range(n//2, n):\n            if t[j] != \")\":\n                return 0\n        return 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 825,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,n=0,int(input())\n    while n>1:\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                if i**2==n:\n                    a+=1\n                    n//=i**2\n                else:\n                    a+=1\n                    n//=i\n        if n>1:\n            a+=1\n            n//=n\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 826,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = Decimal(input())\n    # Write your code here\n    return 3\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 827,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(len(s)-2):\n        if s[i:i+3]=='101':\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 828,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, s = f()\n    a = list(f())\n    count = 0\n    for i in range(n):\n        if a[s] == 0:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 829,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(n):\n        if s[i]=='0':\n            count+=1\n        else:\n            count=0\n        if i==n-1:\n            count+=1\n    if count%2==0:\n        print(1)\n        print(s)\n    else:\n        k=n//2\n        print(k)\n        for i in range(k):\n            print(s[:n//2],end=' ')\n            s=s[n//2:]\n        print(s)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 830,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split(\\\" \\\")))\n    a = list(map(int, input().split(\\\" \\\"))\n    # print(n, k, a)\n    min_instability = float('inf')\n    min_operations = 0\n    min_sequence = []\n    for i in range(k):\n        for j in range(n):\n            for l in range(n):\n                if j != l:\n                    instability = max(a[j], a[l]) - min(a[j], a[l])\n                    if instability < min_instability:\n                        min_instability = instability\n                        min_sequence = [(j, l)]\n                        min_operations = 1\n                    elif instability == min_instability:\n                        min_sequence.append((j, l))\n                        min_operations += 1\n    print(min_instability, min_operations)\n    for operation in min_sequence:\n        print(operation[0], operation[1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 831,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = input()\n    n = int(input())\n    s = []\n    a = []\n    for i in range(n):\n        s.append(input().split())\n        a.append(int(s[i][1]))\n        s[i] = s[i][0]\n    s = s[::-1]\n    a = a[::-1]\n    dp = [0] * (len(T)+1)\n    dp[0] = 0\n    for i in range(n):\n        for j in range(len(T)+1):\n            if j - a[i] >= 0:\n                dp[j] = min(dp[j], dp[j-a[i]] + i+1)\n            if j - len(s[i]) >= 0:\n                dp[j] = min(dp[j], dp[j-len(s[i])] + i+1)\n    if dp[len(T)] == 0:\n        return -1\n    else:\n        return dp[len(T)]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 832,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    b=[]\n    for i in range(a):\n        c=list(map(int,input().split()))\n        b.append(c)\n    count=0\n    for i in range(a):\n        for j in range(a):\n            if i!=j:\n                if b[i][0]==b[j][1] or b[i][1]==b[j][0]:\n                    count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 833,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, v = map(int, input().split())\n    a = []\n    b = []\n    for _ in range(n):\n        a_, b_ = map(int, input().split())\n        a.append(a_)\n        b.append(b_)\n    a.sort()\n    b.sort()\n    result = 0\n    for i in range(n):\n        if a[i] + 1 <= a[i+1]:\n            result += min(v, b[i])\n            v -= min(v, b[i])\n        else:\n            result += min(v, b[i]) + min(v, b[i+1])\n            v -= min(v, b[i]) + min(v, b[i+1])\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 834,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    f = list(map(int, input().split()))\n    k = 1\n    while True:\n        if all(f[f[i-1]-1] == i for i in range(1, n+1)):\n            return k\n        k += 1\n        for i in range(1, n+1):\n            f[i-1] = f[f[i-1]-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 835,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h = input()\n    n_b, n_s, n_c = map(int, input().split())\n    p_b, p_s, p_c = map(int, input().split())\n    r = int(input())\n    count = 0\n    for i in range(len(input_string)):\n        if input_string[i] == 'B':\n            count += n_b\n        elif input_string[i] == 'S':\n            count += n_s\n        else:\n            count += n_c\n    return count // (p_b + p_s + p_c)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 836,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,T = [int(i) for i in input().split()]\n    street = input().strip()\n    # Write your code here\n    houses = street.count('H')\n    shops = street.count('S')\n    if houses == 0:\n        return -1\n    if houses == shops:\n        return 0\n    if houses > shops:\n        return (houses - shops) // (houses - 1)\n    else:\n        return (shops - houses) // (shops - 1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 837,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x,y = map(int, input().split())\n    if n == 1:\n        return x\n    else:\n        return (n-1)*x + y\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 838,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    rows = []\n    for i in range(n):\n        rows.append(list(map(int, input().split())))\n    result = 0\n    for i in range(n):\n        for j in range(m):\n            if rows[i][j] == 0:\n                result += m - j\n            if rows[i][j] == 1:\n                result += m - j - 1\n    for i in range(n):\n        for j in range(m):\n            if rows[i][j] == 0:\n                result += n - i\n            if rows[i][j] == 1:\n                result += n - i - 1\n    for i in range(n):\n        for j in range(m):\n            if rows[i][j] == 0:\n                result += m - j\n            if rows[i][j] == 1:\n                result += m - j - 1\n    for j in range(m):\n        for i in range(n):\n            if rows[i][j] == 0:\n                result += n - i\n            if rows[i][j] == 1:\n                result += n - i - 1\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 839,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q, t = 0, [list(map(int, input().split())) for i in range(5)]\n    for i in range(5):\n        for j in range(i+1, 5):\n            q += max(t[i][j], t[j][i])\n    return q\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 840,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    count = 0\n    for i in range(n):\n        if k >= a[i]:\n            k -= a[i]\n            count += 1\n        else:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 841,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        s=[]\n        for j in range(n):\n            s.append(1)\n            s.append(3)\n            s.append(7)\n        print(\"\".join(str(x for x in s))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 842,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    n = int(n)\n    if n == 1:\n        return 11\n    else:\n        return 1001\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 843,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,s,i=int(input()),input(),0\n    while i<n:\n        if s[i]=='>':\n            i+=int(input())\n        else:\n            i-=int(input())\n        if i<0 or i>=n:\n            return \"INFINITE\"\n    return \"FINITE\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 844,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    max_len=0\n    max_count=0\n    for i in range(n):\n        if s[i]=='0':\n            count+=1\n        else:\n            count-=1\n        if count>=0:\n            max_count=max(max_count,count)\n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 845,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    ch=input()\n    if ch=='L':\n        input_string=input_string[::-1]\n    keyboard={\n        'q': 'qwertyuiop',\n        'w': 'asdfghjkl;',\n        'e': 'zxcvbnm,./'\n    }\n    result=''\n    for i in input_string:\n        for key,value in keyboard.items():\n            if i in value:\n                result+=key\n                break\n    print(result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 846,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = tuple(map(int,input().split()))\n    buttons = list(map(int,input().split()))\n    result = [0]*n\n    for i in range(m):\n        result[buttons[i]-1] = buttons[i]\n    for i in range(n):\n        if result[i] == 0:\n            result[i] = i+1\n    print(*result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 847,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = map(int, input().split())\n    cards = list(map(int, input().split())\n    # print(n, x, cards)\n    # print(sum(cards))\n    if sum(cards) == 0:\n        return 0\n    elif sum(cards) < 0:\n        return abs(sum(cards)) + 1\n    else:\n        return abs(sum(cards))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 848,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = map(int, input().split()) \n    if n == 1:\n        return -1\n    if k == 0:\n        return 0\n    if k == 1:\n        return n*(n-1)//2\n    if k == n-1:\n        return n*(n-1)//2\n    if k == n:\n        return n*(n-1)//2\n    if k == n-2:\n        return n*(n-1)//2\n    if k == n-3:\n        return n*(n-1)//2\n    if k == n-4:\n        return n*(n-1)//2\n    if k == n-5:\n        return n*(n-1)//2\n    if k == n-6:\n        return n*(n-1)//2\n    if k == n-7:\n        return n*(n-1)//2\n    if k == n-8:\n        return n*(n-1)//2\n    if k == n-9:\n        return n*(n-1)//2\n    if k == n-10:\n        return n*(n-1)//2\n    if k == n-11:\n        return n*(n-1)//2\n    if k == n-12:\n        return n*(n-1)//2\n    if k == n-13:\n        return n*(n-1)//2\n    if k == n-14:\n        return n*(n-1)//2\n    if k == n-15:\n        return n*(n-1)//2\n    if k == n-16:\n        return n*(n-1)//2\n    if k == n-17:\n        return n*(n-1)//2\n    if k == n-18:\n        return n*(n-1)//2\n    if k == n-19:\n        return n*(n-1)//2\n    if k == n-20:\n        return n*(n-1)//2\n    if k == n-21:\n        return n*(n-1)//2\n    if k == n-22:\n        return n*(n-1)",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 849,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d = map(int,input().split())\n    p = a/b\n    q = c/d\n    if p > q:\n        return (p/(p+q))\n    else:\n        return (q/(p+q)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 850,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    numbers = list(map(int, input().split()))\n    max_sum = 0\n    max_numbers = []\n    for i in range(1, 10):\n        for j in range(1, 10):\n            for k in range(1, 10):\n                for l in range(1, 10):\n                    if i*i + j*j + k*k <= 10000:\n                        max_sum = max(max_sum, i*i + j*j + k*k)\n                        max_numbers.append(i*i)\n                        max_numbers.append(j*j)\n                        max_numbers.append(k*k)\n    return max_sum, max_numbers\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 851,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    input_list = list(map(int, input().split()))\n    max_break = 0\n    for i in range(1, n-1):\n        if input_list[i] == 0:\n            max_break = max(max_break, i - input_list.index(1))\n    return max_break\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 852,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, k, l = map(int, input().split())\n        d = list(map(int, input().split()))\n        p = [0] * (2*k)\n        p[0] = 1\n        p[k] = -1\n        p[k+1] = -1\n        for i in range(1, k):\n            p[2*i] = 1\n            p[2*i+1] = -1\n        for j in range(n):\n            if d[j] + p[0] > l:\n                print(\"No\")\n                break\n            else:\n                for t in range(k):\n                    if d[j] + p[t] > l:\n                        d[j] = d[j] + p[t]\n                    else:\n                        d[j] = d[j]\n                if d[n] + p[k-1] > l:\n                    print(\"No\")\n                    break\n                else:\n                    for t in range(k):\n                        if d[n] + p[t] > l:\n                            d[n] = d[n] + p[t]\n                        else:\n                            d[n] = d[n]\n                    print(\"Yes\")\n        else:\n            print(\"Yes\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 853,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, t = int(input()), input()\n    t = list(map(int, t.split()))\n    max_num = 0\n    for i in range(n):\n        if t[i] == 5:\n            max_num += 5\n    if max_num % 90 == 0:\n        return str(max_num)\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 854,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda:map(int,input().split())\n    n,T=I()\n    a=list(I())\n    total=0\n    for i in range(n):\n        if T>=a[i]:\n            T-=a[i]\n            total+=1\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 855,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: list(map(int, input().split()))\n    k, a, b = map(int, input_string.split())\n    alice_choices = [f() for _ in range(k)]\n    bob_choices = [f() for _ in range(k)]\n    alice_score = 0\n    bob_score = 0\n    for i in range(k):\n        if alice_choices[i][b] > bob_choices[i][a]:\n            alice_score += 1\n        elif bob_choices[i][a] > alice_choices[i][b]:\n            bob_score += 1\n    print(alice_score, bob_score)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 856,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    d=max(a)\n    for i in range(k):\n        a=[d-x for x in a]\n    print(*a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 857,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = [int(a) for a in input().split()]\n    y = [int(a) for a in input().split()]\n    x.sort()\n    y.sort()\n    result = []\n    for i in x:\n        if i in y:\n            result.append(i)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 858,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return n-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 859,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s1, s2 = input().strip(), input().strip()\n    correct = 0\n    for i in range(len(s1)):\n        if s2[i] == s1[i]:\n            correct += 1\n        elif s2[i] == '?':\n            correct += 0.5\n    return correct / len(s1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 860,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(\"Possible\")\n        print(1)\n        return\n    if sum(a) == 0:\n        print(\"Possible\")\n        print(1)\n        return\n    if sum(a) % 3 != 0:\n        print(\"Impossible\")\n        return\n    teams = [[] for _ in range(3)]\n    for i in range(n):\n        teams[a[i]].append(i+1)\n    for team in teams:\n        if len(team) == 3:\n            break\n    else:\n        print(\"Impossible\")\n        return\n    for i in range(n):\n        if i not in teams[a[i]:\n            teams[a[i].append(i+1)\n    for team in teams:\n        if len(team) == 3:\n            break\n    else:\n        print(\"Impossible\")\n        return\n    print(\"Possible\")\n    for team in teams:\n        print(\" \".join(map(str, team))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 861,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m,R=map(int, input().split())\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 862,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    queue=list(map(int,input().split()))\n    n=len(queue)\n    for i in range(n):\n        if queue[i]==0:\n            return i+1\n        else:\n            queue.pop(0)\n            queue.append(0)\n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 863,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, ta = map(int, input().split())\n    b, tb = map(int, input().split())\n    departure_time = input()\n    h, m = map(int, departure_time.split(\":\"))\n    t = h * 60 + m\n    z = (t // ta) // 2 + (t // tb) // 2\n    print(z)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 864,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split())\n    if m<n:\n        return 0\n    a.sort()\n    if a[-1]-a[0]>m:\n        return 0\n    else:\n        return (a[-1]-a[0])//(n-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 865,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, t = map(int, input().split())\n    a = list(map(int, input().split())\n    b = list(map(int, input().split())\n    # Write your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 866,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X,Y = map(int,input().split())\n    return 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 867,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 2\n    elif n==4:\n        return 3\n    else:\n        return 4\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 868,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    result = 1378 ** n\n    return result % 10\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 869,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int , input().split())\n    if a==b:\n        return 1,0\n    else:\n        return 1,1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 870,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    d,l,v1,v2=list(map(int,input().split()))\n    x1=0\n    x2=l\n    t=0\n    while abs(x1-x2)>d:\n        x1+=v1\n        x2+=v2\n        t+=1\n    return t\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 871,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = [int(w) for w in input().split()]\n    landings = []\n    for i in range(n):\n        landings.append(list(map(int, input().split()))\n    landings.sort()\n    for i in range(n):\n        if landings[i][1] + s >= 60:\n            h, m = landings[i][0] + 1, landings[i][1] + s - 60\n        else:\n            h, m = landings[i][0], landings[i][1] + s\n        if h == 24:\n            h = 0\n        if m == 60:\n            m = 0\n        if i == 0:\n            if landings[i][1] + s >= 60:\n                h, m = landings[i][0] + 1, landings[i][1] + s - 60\n            else:\n                h, m = landings[i][0], landings[i][1] + s\n            if h == 24:\n                h = 0\n            if m == 60:\n                m = 0\n            print(h, m)\n            continue\n        if landings[i][0] == 0 and landings[i][1] + s >= 60:\n            h, m = landings[i][0], landings[i][1] + s - 60\n            if h == 24:\n                h = 0\n            if m == 60:\n                m = 0\n            print(h, m)\n            continue\n        if landings[i][1] + s >= 60:\n            h, m = landings[i][0] + 1, landings[i][1] + s - 60\n        else:\n            h, m = landings[i][0], landings[i][1] + s\n        if h == 24:\n            h = 0\n        if m == 60:\n            m = 0\n        print(h, m)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 872,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(map(int, input().split()))\n    n = len(a)\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] % 2 == 1:\n                a[i], a[j] = a[j], a[i]\n                break\n    return \" \".join(map(str, a))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 873,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    original_state = list(map(int, input()))\n    combination = list(map(int, input()))\n    moves = 0\n    for i in range(n):\n        if original_state[i] == combination[i]:\n            continue\n        else:\n            if original_state[i] < combination[i]:\n                while original_state[i] != combination[i]:\n                    original_state[i] += 1\n                    moves += 1\n            else:\n                while original_state[i] != combination[i]:\n                    original_state[i] -= 1\n                    moves += 1\n    return moves\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 874,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return -1\n    else:\n        return \" \".join(str(i) for i in range(n, 0, -1))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 875,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = list(map(int, input().split()))\n    matrix = [input().split() for _ in range(n)]\n    for i in range(n):\n        matrix[i] = [matrix[i][i] + matrix[i][n-i-1] for i in range(n)]\n    moves = 0\n    for i in range(n):\n        if points[i] == 1:\n            for j in range(n):\n                if matrix[i][j] == '*':\n                    continue\n                for k in range(n):\n                    if matrix[k][i] == '*':\n                        continue\n                    if matrix[i][k] == matrix[k][i]:\n                        if points[k] == 2 or points[j] == 3:\n                            moves += 1\n                            points[k], points[j] = 0, 0\n                            matrix[i][j] = '*'\n                            matrix[k][i] = '*'\n                            break\n                if points[i] == 0:\n                    break\n            if points[i] == 0:\n                break\n    if sum(points) != 0:\n        print(-1)\n    else:\n        print(moves)\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] != '*':\n                    print(i+1, j+1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 876,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int,input().split()))\n    arr = list(map(int,input().split()))\n    i = 0\n    while True:\n        if sum(arr[:i+1]) >= k:\n            return i\n        else:\n            arr = p(arr)\n            i += 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 877,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    similar_problems = []\n    for i in range(m):\n        u,v = map(int,input().split())\n        similar_problems.append((u,v))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 878,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = ''.join(input().split())\n    n = int(a[0])\n    a = list(map(int, a[1:].split()))\n    if n == 2:\n        if a[0] == 1 and a[1] == 2:\n            return \"Infinite\"\n        elif a[0] == 2 and a[1] == 1:\n            return \"Infinite\"\n        else:\n            return \"Finite\"\n    elif n == 3:\n        if a[0] == 1 and a[1] == 2 and a[2] == 3:\n            return \"Infinite\"\n        elif a[0] == 2 and a[1] == 1 and a[2] == 3:\n            return \"Infinite\"\n        elif a[0] == 3 and a[1] == 2 and a[2] == 1:\n            return \"Infinite\"\n        else:\n            return \"Finite\"\n    else:\n        return \"Finite\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 879,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    path = [1]\n    for i in range(2, n+1):\n        path.append(input_string[i-2])\n    path.append(n)\n    return \" \".join(str(x) for x in path)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 880,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        count = 0\n        for i in range(1, n+1):\n            for j in range(n+1):\n                if i+j == n*(n+1)//2:\n                    count += 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 881,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    i = 0\n    while i < n-1:\n        if a[i] == a[i+1]:\n            a[i] += 1\n            a.pop(i+1)\n            n -= 1\n        else:\n            i += 1\n    return n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 882,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=input()\n    s=input()\n    count=0\n    for i in range(len(s)-len(t)+1):\n        if s[i:i+len(t)]==t:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 883,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())+1\n    b=list(map(int,input().split()))\n    count=0\n    for i in range(1,6):\n        if i not in b:\n            count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 884,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c = map(int, input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 885,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 886,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = list(input())\n    for i in range(len(n)):\n        if n[i] == '0':\n            n.pop(i)\n    n = int(''.join(n))\n    if n % 2 == 0:\n        return -1\n    for i in range(len(n)):\n        for j in range(i+1, len(n)):\n            if n[i] != n[j]:\n                n[i], n[j] = n[j], n[i]\n                if int(''.join(n)) % 2 == 0:\n                    return int(''.join(n))\n                n[i], n[j] = n[j], n[i]\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 887,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(map(int,input().split()))\n    if sum(a) == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 888,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    p_dict = {}\n    s_dict = {}\n    for i in range(n):\n        p_dict[p[i]] = i\n        s_dict[s[i]] = i\n    coins = 0\n    operations = []\n    for i in range(n):\n        if p_dict[i+1] != s_dict[i+1]:\n            coins += abs(p_dict[i+1] - s_dict[i+1])\n            operations.append((p_dict[i+1], s_dict[i+1]) if p_dict[i+1] > s_dict[i+1] else (s_dict[i+1], p_dict[i+1]))\n            p_dict[i+1], s_dict[i+1] = s_dict[i+1], p_dict[i+1]\n    print(coins)\n    print(len(operations))\n    for op in operations:\n        print(op[0], op[1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 889,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    field = [input() for i in range(4)]\n    for i in range(2):\n        if field[i][0] == field[i][1] == field[i][2] == field[i][3] == \".\":\n            return \"YES\"\n    for j in range(2):\n        if field[0][j] == field[1][j] == field[2][j] == field[3][j] == \".\":\n            return \"YES\"\n    for i in range(2):\n        if field[i][0] == field[i][2] == field[i+1][1] == field[i+1][2] == \".\":\n            return \"YES\"\n    for j in range(2):\n        if field[0][j] == field[1][j+1] == field[2][j+1] == field[3][j+1] == \".\":\n            return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 890,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l, r, x = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(c[i] - c[j]) >= x and c[i] + c[j] >= l and c[i] + c[j] <= r:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 891,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    chips = list(input_string)\n    for i in range(k):\n        new_chips = []\n        for j in range(n):\n            if chips[(j-1)%n] == 'B' and chips[j] == 'B' and chips[(j+1)%n] == 'B':\n                new_chips.append('W')\n            elif chips[(j-1)%n] == 'W' and chips[j] == 'W' and chips[(j+1)%n] == 'W':\n                new_chips.append('B')\n            else:\n                new_chips.append(chips[j])\n        chips = new_chips\n    return ''.join(chips)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 892,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    lcm = 1\n    max_len = 0\n    max_subseq = []\n    for i in range(n):\n        lcm = lcm * a[i] // math.gcd(lcm, a[i])\n        if lcm > m:\n            break\n        if len(max_subseq) < i + 1:\n            max_subseq.append(i)\n        else:\n            for j in range(i):\n                lcm_new = lcm * a[i] // math.gcd(lcm, a[i])\n                if lcm_new == lcm:\n                    max_subseq.append(i)\n                    break\n                elif lcm_new > m:\n                    break\n            else:\n                max_subseq.append(i)\n    print(lcm, len(max_subseq))\n    print(*sorted(max_subseq))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 893,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    d, n = f()\n    a = list(f())\n    edges = [f() for _ in range(n - 1)]\n    adj_list = [[] for _ in range(n)]\n    for u, v in edges:\n        adj_list[u - 1].append(v - 1)\n        adj_list[v - 1].append(u - 1)\n    def dfs(node, parent, depth, visited, memo):\n        if node in memo:\n            return memo[node]\n        memo[node] = 1\n        for child in adj_list[node]:\n            if child != parent:\n                memo[node] += dfs(child, node, depth + 1, visited, memo)\n        return memo[node]\n    def dfs_all(node, depth, visited, memo):\n        if node in memo:\n            return memo[node]\n        memo[node] = 1\n        for child in adj_list[node]:\n            if child not in visited:\n                memo[node] += dfs_all(child, depth + 1, visited, memo)\n        return memo[node]\n    def count_valid_sets(node, depth, visited, memo):\n        if node in memo:\n            return memo[node]\n        memo[node] = 1\n        for child in adj_list[node]:\n            if child not in visited:\n                memo[node] += count_valid_sets(child, depth + 1, visited, memo)\n        return memo[node]\n    def count_valid_sets_helper(node, depth, visited, memo):\n        if node in memo:\n            return memo[node]\n        memo[node] = 1\n        for child in adj_list[node]:\n            if child not in visited:\n                memo[node] += count_valid_sets_helper(child, depth + 1, visited, memo)\n        return memo[node]\n    def count_valid_sets_helper_2(node, depth, visited, memo):\n        if node in memo:\n            return mem",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 894,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y = map(int,input().split())\n    x1 = 0\n    y1 = y\n    x2 = x\n    y2 = 0\n    print(x1,y1,x2,y2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 895,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    t = list(map(int, input().split()))\n    T = int(input())\n    t.sort()\n    count = 0\n    for i in range(n):\n        if t[i] + T >= t[i+1]:\n            count += 1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 896,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split())\n    # create a matrix with all zeros\n    matrix = [[0 for j in range(m)] for i in range(n)]\n    # iterate over rows\n    for i in range(n):\n        # iterate over columns\n        for j in range(m):\n            # iterate over elements in row i\n            for k in range(n):\n                # iterate over elements in column j\n                for l in range(m):\n                    # calculate xor of elements in row i and column j\n                    xor_value = a[i] ^ b[j]\n                    # check if xor_value is equal to the element in matrix\n                    if xor_value == matrix[i][j]:\n                        # if it is, set the element to 1\n                        matrix[i][j] = 1\n                        break\n                else:\n                    # if no element in matrix satisfies the condition, set it to 0\n                    matrix[i][j] = 0\n    # check if all elements in matrix are 0 or 1\n    if all(all(x == 0 for x in row) or all(x == 1 for row in matrix) for row in matrix):\n        # if all elements are 0 or all elements are 1, print the matrix\n        for row in matrix:\n            print(*row)\n    else:\n        # if not, print NO\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 897,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=input().split()\n    n=int(n)\n    m=int(m)\n    s1=list(map(int,input().split()))\n    s2=list(map(int,input().split()))\n    #print(s1,s2)\n    count=0\n    for i in range(n):\n        if s1[i]==0:\n            count+=1\n        if s2[i]==0:\n            count+=1\n    if count==n:\n        return 0\n    else:\n        return 1\n    #print(count)\n    #print(s1,s2)\n    #print(count)\n    #print(s1[0],s2[0])\n    #print(s1[1],s2[1])\n    #print(s1[2],s2[2])\n    #print(s1[3],s2[3])\n    #print(s1[4],s2[4])\n    #print(s1[5],s2[5])\n    #print(s1[6],s2[6])\n    #print(s1[7],s2[7])\n    #print(s1[8],s2[8])\n    #print(s1[9],s2[9])\n    #print(s1[10],s2[10])\n    #print(s1[11],s2[11])\n    #print(s1[12],s2[12])\n    #print(s1[13],s2[13])\n    #print(s1[14],s2[14])\n    #print(s1[15],s2[15])\n    #print(s1[16],s2[16])\n    #print(s1[17],s2[17])\n    #print(s1[18],s2[18])\n    #print(s1[19],s2[19])\n    #print(s1[20],s2[20])\n    #print(s1[21],s2[21])\n    #print(s1[22],",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 898,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M=map(int,input().split())\n    a=list(map(int,input().split())\n    a.sort()\n    if M%a[0]==0:\n        return M//a[0]\n    else:\n        for i in range(1,N):\n            if M%a[i]==0:\n                return M//a[i]\n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 899,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    adj_list = [[] for i in range(N+1)]\n    for i in range(M):\n        a,b,c = map(int,input().split())\n        adj_list[a].append((b,c) if a<b else (b,c))\n        adj_list[b].append((a,c) if a>b else (a,c))\n    #print(adj_list)\n    #print(len(adj_list))\n    #print(len(adj_list[1]))\n    #print(len(adj_list[2]))\n    #print(len(adj_list[3]))\n    #print(adj_list[1])\n    #print(adj_list[2])\n    #print(adj_list[3])\n    #print(adj_list[1][0])\n    #print(adj_list[2][0])\n    #print(adj_list[3][0])\n    #print(adj_list[1][1])\n    #print(adj_list[2][1])\n    #print(adj_list[3][1])\n    #print(adj_list[1][2])\n    #print(adj_list[2][2])\n    #print(adj_list[3][2])\n    #print(adj_list[1][3])\n    #print(adj_list[2][3])\n    #print(adj_list[3][3])\n    #print(adj_list[1][4])\n    #print(adj_list[2][4])\n    #print(adj_list[3][4])\n    #print(adj_list[1][5])\n    #print(adj_list[2][5])\n    #print(adj_list[3][5])\n    #print(adj_list[1][6])\n    #print(adj_list[2][6])\n    #print(adj_list[3][6])\n    #print(adj_list[1][7])\n    #print(adj_list[2][7])\n    #print(adj_list[3][7])\n    #print(adj_list[1][8])\n    #print(adj_",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 900,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    count=0\n    for i in range(0,len(s)):\n        if s[i]=='?':\n            count+=9\n    for i in range(0,len(s)):\n        if s[i]!='?':\n            count*=10\n    count//=13\n    count*=9\n    count+=1\n    count%=10000000000007\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 901,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    groups=[]\n    for i in range(m):\n        groups.append(list(map(int,input().split()[1:]))\n    #print(groups)\n    for i in range(2**n):\n        ricks=[]\n        mortys=[]\n        for j in range(n):\n            if i & (1<<j):\n                ricks.append(j)\n            else:\n                mortys.append(j)\n        #print(ricks,mortys)\n        if all(ricks) or all(mortys):\n            return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 902,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        count += 1\n        if count == k:\n            return a[i]\n    return a[0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 903,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    [n,k] = [int(w) for w in input().split()]\n    a = [int(w) for w in input().split()]\n    a.sort()\n    if k >= n//2:\n        return a[n//2]\n    else:\n        a[k] += 1\n        a.sort()\n        return a[k]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 904,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    words=input().split()\n    vol=0\n    for word in words:\n        vol+=sum(1 for letter in word if letter.isupper())\n    return vol\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 905,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s=map(int, input().split())\n    sugar_prices=[]\n    for i in range(n):\n        sugar_prices.append(list(map(int, input().split()))\n    max_sweets=0\n    for i in range(n):\n        if sugar_prices[i][0]<=s:\n            max_sweets+=sugar_prices[i][1]\n            s-=sugar_prices[i][0]\n        else:\n            max_sweets+=s*9\n            s=0\n    if max_sweets>99:\n        return 99\n    else:\n        return max_sweets\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 906,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=list(map(int,input().split()))\n    if a==1 and b==1:\n        return 1\n    if a==1:\n        return 1\n    if b==1:\n        return 1\n    if a==b:\n        return 1\n    if a==1 and b==2:\n        return 2\n    if a==2 and b==1:\n        return 2\n    if a==2 and b==2:\n        return 4\n    if a==3 and b==2:\n        return 16\n    if a==2 and b==3:\n        return 8\n    if a==3 and b==3:\n        return 16\n    if a==4 and b==3:\n        return 32\n    if a==3 and b==4:\n        return 64\n    if a==4 and b==4:\n        return 64\n    if a==5 and b==4:\n        return 128\n    if a==4 and b==5:\n        return 256\n    if a==5 and b==5:\n        return 256\n    if a==6 and b==5:\n        return 512\n    if a==5 and b==6:\n        return 512\n    if a==6 and b==6:\n        return 1024\n    if a==7 and b==6:\n        return 2048\n    if a==6 and b==7:\n        return 2048\n    if a==7 and b==7:\n        return 4096\n    if a==8 and b==7:\n        return 4096\n    if a==7 and b==8:\n        return 8192\n    if a==8 and b==8:\n        return 8192\n    if a==9 and b==8:\n        return 16384\n    if a==8 and b==9:\n        return 16384\n    if a==9 and b==9:\n        return 32768\n    if a==9 and b==10:\n        return 32768\n    if a==10 and b",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 907,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    pairs = []\n    for _ in range(m):\n        pairs.append(list(map(int, input().split())))\n    for i in range(m):\n        if pairs[i][0] == 1 or pairs[i][1] == 1 or pairs[i][0] == 2 or pairs[i][1] == 2 or pairs[i][0] == 3 or pairs[i][1] == 3:\n            return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 908,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    c=list(map(int,input().split()))\n    s=[]\n    for i in range(n):\n        s.append(input())\n    s.sort()\n    min_cost=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if s[i]>s[j]:\n                min_cost+=c[i]\n                s[i],s[j]=s[j],s[i]\n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 909,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=int(input()),int(input()),int(input())\n    max_value=0\n    max_value=max(a+b*c,a*b+c,a*(b+c),a*b*c)\n    return max_value\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 910,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b=map(int,input().split())\n    if n%2==0:\n        return -1\n    if a*b<n:\n        return -1\n    else:\n        for i in range(a):\n            for j in range(b):\n                if i%2==0:\n                    if j%2==0:\n                        print(i*b+j+1,end=\" \")\n                else:\n                    print(i*b+j+1,end=\" \")\n        for i in range(a):\n            for j in range(b):\n                if i%2==1:\n                    if j%2==0:\n                        print(i*b+j+1,end=\" \")\n                else:\n                    print(i*b+j+1,end=\" \")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 911,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, c = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    limak_points = 0\n    radewoosh_points = 0\n    for i in range(n):\n        limak_points += max(0, p[i] - c * (n - i))\n        radewoosh_points += max(0, p[n - i - 1] - c * i)\n    if limak_points > radewoosh_points:\n        print(\"Limak\")\n    elif radewoosh_points > limak_points:\n        print(\"Radewoosh\")\n    else:\n        print(\"Tie\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 912,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, s, k = map(int, input().split())\n        closed_floors = set(map(int, input().split()))\n        open_floors = set(range(1, n+1) - closed_floors)\n        min_stairs = 0\n        for f in open_floors:\n            if f < s:\n                min_stairs += s - f\n            else:\n                min_stairs += f - s\n        print(min_stairs)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 913,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    if sum(a) == 0:\n        return -1\n    if sum(b) == 0:\n        return -1\n    if sum(a) == sum(b):\n        return -1\n    if sum(a) > sum(b):\n        return -1\n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 914,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = int(input())\n    if n > len(input_string):\n        print(-1)\n        return\n    min_sheets = 1\n    min_string = input_string\n    for i in range(1, len(input_string)):\n        if i % 2 == 0:\n            min_string = min_string[::-1]\n        else:\n            min_string = min_string\n        if min_string == input_string:\n            print(1)\n            print(min_string)\n            return\n        min_sheets += 1\n    print(min_sheets)\n    print(min_string)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 915,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k = int(input())\n    if k == 1:\n        return \"codeforces\"\n    elif k == 2:\n        return \"codeforcesss\"\n    else:\n        return \"codeforces\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 916,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n= int(input())\n    a = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    #print(n, a, p)\n    #print(p)\n    #print(len(p))\n    #print(len(a))\n    #print(len(a[0]))\n    #print(len(a[1]))\n    #print(len(a[2]))\n    #print(len(a[3]))\n    #print(len(a[4]))\n    #print(len(a[5]))\n    #print(len(a[6]))\n    #print(len(a[7]))\n    #print(len(a[8]))\n    #print(len(a[9])\n    #print(len(a[10])\n    #print(len(a[11])\n    #print(len(a[12])\n    #print(len(a[13])\n    #print(len(a[14])\n    #print(len(a[15])\n    #print(len(a[16])\n    #print(len(a[17])\n    #print(len(a[18])\n    #print(len(a[19])\n    #print(len(a[20])\n    #print(len(a[21])\n    #print(len(a[22])\n    #print(len(a[23])\n    #print(len(a[24])\n    #print(len(a[25])\n    #print(len(a[26])\n    #print(len(a[27])\n    #print(len(a[28])\n    #print(len(a[29])\n    #print(len(a[30])\n    #print(len(a[31])\n    #print(len(a[32])\n    #print(len(a[33])\n    #print(len(a[34])\n    #print(len(a[35])\n    #print(len(a[36])\n    #print(len(a[37])\n    #print",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 917,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, h, m = map(int, input().split())\n    restrictions = []\n    for _ in range(m):\n        l, r, x = map(int, input().split())\n        restrictions.append((l, r, x))\n    restrictions.sort(key=lambda x: x[1])\n    max_profit = 0\n    for i in range(m):\n        l, r, x = restrictions[i]\n        if i == 0:\n            max_profit += sum(x**2 for x in range(l, r+1))\n        else:\n            max_profit += sum(min(x**2, restrictions[i-1][2]) for x in range(l, r+1))\n    return max_profit\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 918,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int, input().split())\n    participants = []\n    for i in range(n):\n        name, region, score = input().split()\n        participants.append((name, int(region), int(score)))\n    participants.sort(key=lambda x: (-x[2], x[1]) )\n    teams = []\n    for i in range(m):\n        team = []\n        for j in range(2):\n            if len(team) == 2:\n                break\n            for p in participants:\n                if p[1] == i+1 and p[0] not in team and p[0] not in [t[0] for t in teams]:\n                    team.append(p[0])\n        if len(team) == 2:\n            teams.append(team)\n        else:\n            print(\"?\")\n    for team in teams:\n        print(\" \".join(team))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 919,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    stages = input().split()\n    if k > n:\n        return -1\n    else:\n        weight = 0\n        for i in range(k):\n            weight += ord(stages[i]) - 96\n        return weight\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 920,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    L = lambda: list(map(int, input().split()))\n    n = int(input())\n    guardposts = [L(), L(), L(), L()]\n    min_chocolate_prices = [min(x[0] for x in guardposts), min(x[1] for x in guardposts), min(x[2] for x in guardposts), min(x[3] for x in guardposts)]\n    min_juice_prices = [min(x[0] for x in guardposts), min(x[1] for x in guardposts), min(x[2] for x in guardposts), min(x[3] for x in guardposts)]\n    for i in range(4):\n        if min_chocolate_prices[i] <= n // 2 and min_juice_prices[i] <= n // 2:\n            print(i+1, min_chocolate_prices[i], min_juice_prices[i])\n            return\n    print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 921,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,w = map(int,input().split())\n    a = list(map(int,input().split())\n    if n == 1:\n        return [w]\n    if sum(a) < w:\n        return [-1]\n    a.sort(reverse=True)\n    result = []\n    for i in range(n):\n        if a[i] > w:\n            return [-1]\n        result.append(a[i])\n        w -= a[i]\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 922,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,*d=[int(x) for x in input().split()+input().split()]\n    b=[]\n    for i in range(n):\n        b.append(a-sum(d[:i])-sum(d[i+1:])+1)\n    return b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 923,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input();\n    active_teeth = list(map(int, input().split()))\n    if active_teeth == list(range(n)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 924,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    la, ra, ta = map(int, input().split())\n    lb, rb, tb = map(int, input().split())\n    # Your code goes here\n    # return the maximum number of consecutive days that are lucky for both Alice and Bob\n    # Example:\n    # if la = 0, ra = 2, ta = 5, lb = 1, rb = 3, tb = 5\n    # then the possible solutions are:\n    # [0, 1, 2, 3, 4, 5] and [1, 2, 3, 4, 5, 6]\n    # [0, 1, 2, 3, 4, 5, 6] and [1, 2, 3, 4, 5, 6, 7]\n    # [0, 1, 2, 3, 4, 5, 6, 7] and [1, 2, 3, 4, 5, 6, 7, 8]\n    # [0, 1, 2, 3, 4, 5, 6, 7, 8] and [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] and [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] and [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] and [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    # [0,",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 925,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input()\n    n = int(a)\n    count = 0\n    for i in range(10):\n        for j in range(10):\n            if abs(i-j) == abs(n-i-j) and i+j == n:\n                count += 1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 926,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    stones = []\n    for i in range(n):\n        a, b, c = map(int, input().split())\n        stones.append((a, b, c))\n    stones.sort(key=lambda x: x[0]**2 + x[1]**2 + x[2]**2)\n    print(len(stones))\n    print(1)\n    print(1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 927,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    A = list(map(int,input().split())\n    # Your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 928,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i, N):\n            subseq_sum = sum(A[i:j+1])\n            if subseq_sum >= K:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 929,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W=map(int,input().split())\n    grid=[]\n    for i in range(H):\n        grid.append(list(map(int,input().split()))\n    # Your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 930,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    M=10**9+7;n,k=map(int,input().split());a=c=1\n    for i in range(n):\n        c*=i\n        c%=M\n    print(c)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 931,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,x,y,z,p=list(map(int,input().split()))\n    x=x%4\n    y=y%4\n    z=z%4\n    if x==1:\n        n,m=m,n\n    if y==1:\n        n,m=m,n\n    if z==1:\n        n,m=m,n\n    if z==2:\n        n,m=n,m\n    if y==2:\n        n,m=m,n\n    if x==2:\n        n,m=m,n\n    if z==3:\n        n,m=m,n\n    if y==3:\n        n,m=m,n\n    for i in range(p):\n        a,b=map(int,input().split())\n        print(n-b+1,m-a+1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 932,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m,n = list(map(int,input().split()))\n    B = []\n    for i in range(m):\n        B.append(list(map(int,input().split()))\n    A = [[0]*n for i in range(m)]\n    for i in range(m):\n        for j in range(n):\n            A[i][j] = 0\n            for k in range(m):\n                A[i][j] = A[i][j] | B[i][j]\n    for i in range(m):\n        for j in range(n):\n            if A[i][j] == 1:\n                print(1, end=\" \")\n            else:\n                print(0, end=\" \")\n    print()\n    for i in range(m):\n        for j in range(n):\n            if A[i][j] == 1:\n                print(1, end=\" \")\n            else:\n                print(0, end=\" \")\n    print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 933,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = list(input())\n    for i in range(len(s)):\n        if s[i] == s[i+1] == s[i+2]:\n            s.pop(i+2)\n            s.pop(i+1)\n            s.pop(i)\n    return ''.join(s)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 934,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A = input()\n    B = input().split()\n    for i in B:\n        if A[0] == i[0] or A[1] == i[1]:\n            print(\"YES\")\n            break\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 935,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=[int(x) for x in input().split()]\n    if n+m%2==0:\n        return \"Malvika\"\n    else:\n        return \"Akshat\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 936,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    likes = list(map(int, input().split()))\n    max_likes = max(likes)\n    max_count = likes.count(max_likes)\n    max_index = likes.index(max_likes)\n    if max_count == 1:\n        return max_likes\n    else:\n        for i in range(len(likes)):\n            if likes[i] == max_likes:\n                return i+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 937,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    t=list(map(int,input().split()))\n    max_awake=0\n    for i in range(n-k+1):\n        count=0\n        for j in range(i,i+k):\n            if t[j]==0:\n                count+=a[j]\n        max_awake=max(max_awake,count)\n    return max_awake\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 938,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b = map(int, input().split())\n    if a > b:\n        a,b = b,a\n    notes = [i for i in range(1, a+1)]\n    notes.sort(reverse=True)\n    notes_first_day = []\n    notes_second_day = []\n    while notes:\n        if notes[-1] <= a:\n            notes_first_day.append(notes.pop())\n            a -= notes[-1]\n        else:\n            break\n    while notes:\n        if notes[-1] <= b:\n            notes_second_day.append(notes.pop())\n            b -= notes[-1]\n        else:\n            break\n    print(len(notes_first_day))\n    print(*notes_first_day)\n    print(len(notes_second_day))\n    print(*notes_second_day)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 939,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    dances=[]\n    for i in range(m):\n        dances.append(list(map(int,input().split()))\n    colors=[]\n    for i in range(n):\n        colors.append(0)\n    for dance in dances:\n        for dancer in dance:\n            if colors[dancer-1]==0:\n                colors[dancer-1]=1\n    for i in range(n):\n        if colors[i]==0:\n            colors[i]=3\n    for dance in dances:\n        for dancer in dance:\n            if colors[dancer-1]==1:\n                colors[dancer-1]=2\n    for dance in dances:\n        for dancer in dance:\n            if colors[dancer-1]==2:\n                colors[dancer-1]=3\n    for i in range(n):\n        if colors[i]==0:\n            colors[i]=1\n    print(\" \".join(map(str,colors))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 940,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c = sorted(map(int,input().split()))\n    if a+b>c:\n        return 0\n    elif a**2+b**2>c**2:\n        return 0\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 941,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    b, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    n = sum([a[i]*b**(k-i-1) for i in range(k)])\n    if n % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 942,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(\"Possible\")\n        print(1)\n        return\n    if n == 2:\n        if a[0] == 0 and a[1] == 0:\n            print(\"Possible\")\n            print(1, 1)\n            return\n        elif a[0] == 1 and a[1] == 1:\n            print(\"Possible\")\n            print(1, 2)\n            return\n        else:\n            print(\"Impossible\")\n            return\n    if n == 3:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0:\n            print(\"Possible\")\n            print(1, 1, 1)\n            return\n        elif a[0] == 1 and a[1] == 1 and a[2] == 1:\n            print(\"Possible\")\n            print(1, 2, 2)\n            return\n        else:\n            print(\"Impossible\")\n            return\n    if n == 4:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0:\n            print(\"Possible\")\n            print(1, 1, 1, 1)\n            return\n        elif a[0] == 1 and a[1] == 1 and a[2] == 1 and a[3] == 1:\n            print(\"Possible\")\n            print(1, 2, 2, 2)\n            return\n        else:\n            print(\"Impossible\")\n            return\n    if n == 5:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0 and a[4] == 0:\n            print(\"Possible\")\n            print(1, 1, 1, 1, 1)\n            return\n        elif a[0] == 1 and a[1] == 1 and a[2] == 1 and a[3] == 1 and a[",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 943,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    arr=list(map(int,input_string.split()))\n    arr.sort()\n    sum=0\n    for i in range(n):\n        if arr[i]%2==0:\n            sum+=arr[i]\n    return sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 944,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    roads = [list(map(int, input().split())) for _ in range(n-1)]\n    adj_list = [[] for _ in range(n)]\n    for u, v in roads:\n        adj_list[u-1].append(v-1)\n        adj_list[v-1].append(u-1)\n    print(n)\n    for i in range(n):\n        print(len(adj_list[i]), *adj_list[i])\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 945,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = list(map(int, input().split()))\n    points.sort()\n    for i in range(n-1):\n        if points[i] == points[i+1]:\n            return \"yes\"\n    return \"no\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 946,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a=int(input()),input()\n    a=list(map(int,a.split()))\n    if 1 in a:\n        print(\"HARD\")\n    else:\n        print(\"EASY\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 947,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    tt = int(input())\n    for i in range(tt):\n        n = int(input())\n        a = 1\n        b = n - a\n        while True:\n            if a > n:\n                break\n            if n % a == 0:\n                print(a, b)\n                break\n            a += 1\n        else:\n            print(n, 1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 948,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    image = []\n    for i in range(n):\n        image.append(input())\n    count = 0\n    for i in range(n-1):\n        for j in range(m-1):\n            if image[i][j] == 'x' and image[i][j+1] == 'x' and image[i+1][j] == 'x' and image[i+1][j+1] == 'x':\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 949,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    if a>b:\n        a,b=b,a\n    def gcd(a,b):\n        if b==0:\n            return a\n        else:\n            return gcd(b,a%b)\n    return gcd(a,b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 950,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    strings = []\n    for i in range(n):\n        strings.append(input())\n    # write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 951,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k = int(input())\n    n = int(input())\n    digits = [int(digit) for digit in str(n)]\n    sum_digits = sum(digits)\n    if sum_digits >= k:\n        return 0\n    else:\n        return len(str(n)) - len(str(k))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 952,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    roads = []\n    for _ in range(m):\n        roads.append(list(map(int, input().split()))\n    # Your code here\n    return ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 953,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    A = []\n    for i in range(n):\n        A.append(list(map(int, input().split())))\n    # print(A)\n    # print(p)\n    # find the prettiest permutation\n    # for each row, find the first 1 and swap it with the smallest element in the row\n    # then, find the second 1 and swap it with the smallest element in the row\n    # repeat until all 1's are swapped\n    # return the permutation\n    # if there are no swaps needed, return the original permutation\n    # if there are swaps needed, return the modified permutation\n    # if there are multiple swaps needed, return the one with the smallest sum of swaps\n    # if there are multiple permutations with the same sum of swaps, return the one with the smallest sum of differences between adjacent elements\n    # if there are multiple permutations with the same sum of swaps and differences, return the one with the smallest sum of differences between adjacent elements\n    # if there are multiple permutations with the same sum of swaps, differences, and smallest sum of differences, return the one with the smallest permutation\n    # if there are multiple permutations with the same sum of swaps, differences, smallest sum of differences, and smallest permutation, return the one with the smallest permutation\n    # if there are multiple permutations with the same sum of swaps, differences, smallest sum of differences, smallest permutation, and smallest sum of differences between adjacent elements, return the one with the smallest permutation\n    # if there are multiple permutations with the same sum of swaps, differences, smallest sum of differences, smallest permutation, smallest sum of differences between adjacent elements, and smallest sum of differences between adjacent elements, return the one with the smallest permutation\n    # if there are multiple permutations with the same sum of swaps, differences, smallest sum of differences, smallest permutation, smallest sum of differences between adjacent elements, and smallest sum of differences between adjacent elements, return the one with the smallest permutation\n    # if there are multiple permutations with the same sum of swaps, differences, smallest sum of differences, smallest permutation, smallest sum of differences between adjacent elements, and smallest sum of differences between adjacent elements, return the one with the",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 954,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    s = list(s)\n    s.append(s[0])\n    s = ''.join(s)\n    s = set(s)\n    return len(s)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 955,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    juices = []\n    for i in range(N):\n        price, vitamins = input().split()\n        juices.append((int(price), set(vitamins))\n    # your code here\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 957,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input()\n    if \"heidi\" in a:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 958,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    s = input().strip()\n    if k > 26*n:\n        return -1\n    else:\n        s_prime = \"\"\n        for i in range(n):\n            if k >= 26:\n                s_prime += chr(ord('a') + k%26)\n                k -= 26\n            else:\n                s_prime += chr(ord('a') + k)\n                return s_prime\n    return s_prime\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 959,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,mod = list(map(int, input().split()))\n    matrix = []\n    for i in range(a):\n        matrix.append(list(input()))\n    count = 0\n    for i in range(a-1):\n        for j in range(a):\n            if matrix[i][j] == '1' and matrix[i+1][j] == '1':\n                count += 1\n    count += 2\n    return count % mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 960,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    x = 1\n    while True:\n        if (x // k) * (x % k) == n:\n            return x\n        x += 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 961,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n = int(input())\n    a = R()\n    segments = []\n    for i in range(n):\n        if a[i] not in segments:\n            segments.append(a[i])\n        else:\n            segments[-1].append(a[i])\n    max_comfort = 0\n    for i in range(len(segments)):\n        max_comfort ^= segments[i][0]\n    print(max_comfort)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 962,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    adj_list=[]\n    for i in range(m):\n        a,b=map(int,input().split())\n        adj_list.append((a,b))\n    #print(adj_list)\n    visited=[0]*(n+1)\n    for i in range(m):\n        visited[adj_list[i][0]]+=1\n        visited[adj_list[i][1]]+=1\n    for i in range(1,n+1):\n        if visited[i]!=2:\n            return -1\n    return 1\n    #print(visited)\n    #print(adj_list)\n    #print(n,m)\n    #print(adj_list)\n    #print(visited)\n    #print(len(visited))\n    #print(len(adj_list))\n    #print(adj_list[0][0])\n    #print(adj_list[0][1])\n    #print(visited[adj_list[0][0]])\n    #print(visited[adj_list[0][1]])\n    #print(visited[adj_list[1][0]])\n    #print(visited[adj_list[1][1]])\n    #print(visited[adj_list[2][0])\n    #print(visited[adj_list[2][1])\n    #print(visited[adj_list[3][0])\n    #print(visited[adj_list[3][1])\n    #print(visited[adj_list[4][0])\n    #print(visited[adj_list[4][1])\n    #print(visited[adj_list[5][0])\n    #print(visited[adj_list[5][1])\n    #print(visited[adj_list[6][0])\n    #print(visited[adj_list[6][1])\n    #print(visited[adj_list[7][0])\n    #print(visited[adj_list[7][1])\n    #print(visited[adj_list[8][0])\n    #print(visited[adj_list[8][1])\n    #print",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 963,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split());A=[1]+[0]*n;S=[[*map(int,input().split())]for _ in\\\"_\\\"*k];m=998244353\n    for i in range(1,n):\n        for j in range(k):\n            l,r=S[j]\n            if l<=i<=r:A[i]=max(A[i],A[i-1]+1)\n    return (A[n-1]%m)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 964,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    get = lambda :[int(x) for x in (p.readline() if mode==\\\"file\\\" else input()).split()]\n    x1, y1, x2, y2, x3, y3 = get()\n    if x1+y1 > x2+y2 or x2+y2 > x3+y3 or x3+y3 > x1+y1:\n        return -1\n    if x1+y1 == x2+y2 and x2+y2 == x3+y3:\n        return x1+y1\n    elif x1+y1 == x2+y2 and x1+y1 > x3+y3:\n        return x1+y1\n    elif x2+y2 == x3+y3 and x2+y2 > x1+y1:\n        return x2+y2\n    elif x3+y3 == x1+y1 and x3+y3 > x2+y2:\n        return x3+y3\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 965,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    input_list = list(input())\n    count = 0\n    for i in range(n):\n        if input_list[i] == \"A\" or input_list[i] == \"F\":\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 966,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input()) + 1\n    while True:\n        if str(n) == ''.join(sorted(str(n)):\n            return n\n        n += 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 967,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    count = 0\n    for i in range(1, n):\n        if a[i] != i+1:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 968,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    names = []\n    for i in range(n):\n        f, s = input().split()\n        names.append((f, s))\n    p = list(map(int, input().split()))\n    handles = [f + s for f, s in names]\n    handles.sort()\n    for i in range(n):\n        if handles[p[i]-1] != names[i][0] + names[i][1]:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 969,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, t = input(), input() + ' '\n    n = len(a)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            for k in range(i, j):\n                if a[i:k + 1] == t[k + 1:j + 1]:\n                    dp[i][j] = dp[i + 1][k] + 1\n                elif a[i:k + 1] == t[k::-1] and a[k + 1:j + 1] == t[k + 1:j + 1]:\n                    dp[i][j] = dp[i + 1][k] + 1\n    if dp[0][n - 1] == 0:\n        print(-1)\n        return\n    else:\n        ans = dp[0][n - 1]\n        print(ans)\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if dp[i][j] == dp[i + 1][j]:\n                    print(j - i, j - i)\n                elif dp[i][j] == dp[i + 1][j] + 1:\n                    print(j - i, j - i)\n                elif dp[i][j] == dp[i][j - 1]:\n                    print(j - i, j - i)\n                else:\n                    print(j - i, n - j)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 970,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    positions = list(map(int, input().split()))\n    black_positions = [i for i in positions if i % 2 == 1]\n    white_positions = [i for i in positions if i % 2 == 0]\n    black_moves = [i - 1 for i in black_positions if i > 1] + [i + 1 for i in black_positions if i < n]\n    white_moves = [i - 1 for i in white_positions if i > 1] + [i + 1 for i in white_positions if i < n]\n    return min(len(black_moves), len(white_moves))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 971,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input().split()\n    n,b,d=map(int,s)\n    a=list(map(int,input().split())\n    count=0\n    for i in a:\n        if i<=b:\n            count+=1\n        else:\n            count+=1\n            if sum(a[:i])>d:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 972,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    grid = [input().split() for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'B':\n                if i > 0 and grid[i-1][j] == 'B' and (i > 1 and grid[i-2][j] == 'W' or j > 0 and grid[i][j-1] == 'W') or (i < n-1 and grid[i+1][j] == 'B' and (i < n-2 and grid[i+2][j] == 'W' or j < m-1 and grid[i][j+1] == 'W') or (i < n-2 and grid[i+2][j] == 'B' and j > 0 and grid[i][j-1] == 'W') or (i > 0 and j < m-1 and grid[i-1][j+1] == 'B'):\n                    return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 973,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().split()\n    R, C = int(s[0]), int(s[1])\n    pasture = [input_string[i:i+C] for i in range(0, len(input_string), C)]\n    #print(pasture)\n    #print(R, C)\n    #print(len(pasture))\n    #print(len(pasture[0]))\n    #print(len(pasture[1]))\n    #print(len(pasture[2]))\n    #print(len(pasture[3]))\n    #print(len(pasture[4]))\n    #print(len(pasture[5]))\n    #print(len(pasture[6]))\n    #print(len(pasture[7]))\n    #print(len(pasture[8]))\n    #print(len(pasture[9]))\n    #print(len(pasture[10]))\n    #print(len(pasture[11]))\n    #print(len(pasture[12]))\n    #print(len(pasture[13]))\n    #print(len(pasture[14]))\n    #print(len(pasture[15]))\n    #print(len(pasture[16]))\n    #print(len(pasture[17]))\n    #print(len(pasture[18]))\n    #print(len(pasture[19]))\n    #print(len(pasture[20]))\n    #print(len(pasture[21]))\n    #print(len(pasture[22]))\n    #print(len(pasture[23]))\n    #print(len(pasture[24]))\n    #print(len(pasture[25]))\n    #print(len(pasture[26]))\n    #print(len(pasture[27]))\n    #print(len(pasture[28]))\n    #print(len(pasture[29]))\n    #print(len(pasture[30]))\n    #print(len(pasture[3",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 974,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    cmd= list(input().split())\n    n=int(input_string[0])\n    add=[]\n    remove=[]\n    for i in range(1,len(input_string),2):\n        if input_string[i]=='add':\n            add.append(int(input_string[i+1]))\n        else:\n            remove.append(int(input_string[i+1]))\n    add.sort()\n    remove.sort()\n    count=0\n    for i in range(n):\n        if i+1 in remove:\n            if i+1 in add:\n                add.remove(i+1)\n            else:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 975,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    sherlock_card = input()\n    moriarty_card = input()\n    flicks_moriarty = 0\n    flicks_sherlock = 0\n    for i in range(n):\n        if sherlock_card[i] > moriarty_card[i]:\n            flicks_moriarty += 1\n        elif sherlock_card[i] < moriarty_card[i]:\n            flicks_sherlock += 1\n    print(flicks_moriarty)\n    print(flicks_sherlock)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 976,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x=map(int,input().split())\n    l=[]\n    r=[]\n    for i in range(n):\n        l.append(int(input()))\n        r.append(int(input()))\n    l.sort()\n    r.sort()\n    i=0\n    j=0\n    ans=0\n    while i<n:\n        if l[i]<=x:\n            ans+=r[i]-l[i]\n            i+=1\n        else:\n            ans+=x\n            i+=1\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 977,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,p=map(int,input().split())\n    a=list(map(int,input().split())\n    # Write your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 978,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k=int(input())*2\n    panels=[]\n    for i in range(4):\n        panels.append(list(input()))\n    for i in range(4):\n        for j in range(4):\n            if panels[i][j]!='.':\n                if panels[i][j]=='1':\n                    if i==0 and j==0:\n                        if panels[i][j+1]!='1' and panels[i][j+2]!='1' and panels[i+1][j]!='1' and panels[i+2][j]!='1':\n                            return \"NO\"\n                    elif i==3 and j==0:\n                        if panels[i][j+1]!='1' and panels[i][j+2]!='1' and panels[i-1][j]!='1' and panels[i-2][j]!='1':\n                            return \"NO\"\n                    elif i==0 and j==3:\n                        if panels[i][j-1]!='1' and panels[i][j-2]!='1' and panels[i+1][j]!='1' and panels[i+2][j]!='1':\n                            return \"NO\"\n                    elif i==3 and j==3:\n                        if panels[i][j-1]!='1' and panels[i][j-2]!='1' and panels[i-1][j]!='1' and panels[i-2][j]!='1':\n                            return \"NO\"\n                    elif j==0 and i!=0 and i!=3:\n                        if panels[i-1][j]!='1' and panels[i+1][j]!='1' and panels[i][j+1]!='1' and panels[i][j+2]!='1':\n                            return \"NO\"\n                    elif j==3 and i!=0 and i!=3:\n                        if panels[i-1][j]!='1' and panels[i+1][j]!='1' and",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 979,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = list(map(int,input().split()))\n    a = list(map(int,input().split()))\n    prod = 1\n    for i in range(n):\n        for j in range(i+1,n):\n            prod *= abs(a[i]-a[j])\n    return prod % m\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 980,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k, n = list(map(int, input().split()))\n    strings = []\n    for i in range(k):\n        strings.append(input())\n    # Your code goes here\n    return \"\".join(sorted(input_string))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 981,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    v = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    result = \"\"\n    for i in range(9):\n        if v >= a[i]:\n            result += str(i+1)\n            v -= a[i]\n        else:\n            result += \"0\"\n            break\n    if result == \"0\"*9:\n        return -1\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 982,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l,r = map(int,input().split())\n    for i in range(l,r+1):\n        if i%2==0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 983,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, p, q, r = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    max_value = -10**10\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            for k in range(j, n+1):\n                value = p*a[i-1] + q*a[j-1] + r*a[k-1]\n                if value > max_value:\n                    max_value = value\n    return max_value\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 984,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input().strip())\n    tree = []\n    for i in range(n):\n        tree.append(list(map(int, input().strip().split()))\n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 985,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tx,y=map(int,input().split())\n    \\tcount=0\n    \\tfor i in range(x):\n    \\t    a,b=map(int,input().split())\n    \\t    for j in range(i+1,x):\n    \\t        c,d=map(int,input().split())\n    \\t        if abs(a-c)==abs(b-d):\n    \\t            count+=1\n    \\treturn count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 986,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:map(int,input().split())\n    n,k=R()\n    a=R()\n    dp=[[0]*(k+1 for _ in range(n+1)]\n    for _ in range(n+1)\n    dp[0][0]=0\n    for i in range(1,n+1):\n        for j in range(1,k+1):\n            if j>=a[i-1]:\n                dp[i][j]=dp[i-1][j-a[i-1]]+1\n            else:\n                dp[i][j]=dp[i-1][j]\n            if j<k:\n                dp[i][j]=min(dp[i][j],dp[i-1][j]+1)\n    print(dp[n][k])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 987,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    p=list(map(int,input().split()))\n    pairs=[]\n    for i in range(m):\n        pairs.append(list(map(int,input().split()))\n    p_new=p.copy()\n    for i in range(m):\n        a,b=pairs[i]\n        p_new[a-1],p_new[b-1]=p_new[b-1],p_new[a-1]\n    return p_new\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 988,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = list(input())\n    for i in range(len(s)):\n        if s[i] == '*':\n            s[i] = 'P'\n            break\n    print(''.join(s))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 989,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    a.sort()\n    if k>=n:\n        return 0\n    else:\n        return max(a[n-1]-a[0]-k,0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 990,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    edges = []\n    for i in range(N-1):\n        a, b = map(int, input().split())\n        edges.append((a, b))\n    M = int(input())\n    restrictions = []\n    for i in range(M):\n        u, v = map(int, input().split())\n        restrictions.append((u, v))\n    # Your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 991,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,s=map(int,input().split())\n    u=[]\n    v=[]\n    a=[]\n    b=[]\n    c=[]\n    d=[]\n    for i in range(m):\n        u.append(int(input())\n        v.append(int(input())\n        a.append(int(input())\n        b.append(int(input())\n    for i in range(n-1):\n        c.append(int(input())\n        d.append(int(input())\n    # Your code goes here\n    # Return a list containing the minimum time needed to travel from City 1 to City 2, ..., N\n    # in this order\n    # Example: [2,14]\n    return [2,14]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 992,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,s=map(int,input().split())\n    a=list(map(int,input().split())\n    mod=99824353\n    dp=[[0]*(s+1) for i in range(n+1)]\n    dp[0][0]=1\n    for i in range(1,n+1):\n        for j in range(1,s+1):\n            if j>=a[i-1]:\n                dp[i][j]=dp[i-1][j-a[i-1]]+dp[i-1][j]\n            else:\n                dp[i][j]=dp[i-1][j]\n    ans=0\n    for i in range(n+1):\n        ans+=dp[i][s]\n    return ans%mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 993,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=input().split();d={0:1};r=s=0\n    for i in input_string.split():\n        d[r]=r;r+=int(i)\n    for i in range(1,n):\n        s+=d[i]\n        d[i]=s\n    ans=0\n    for i in range(1,n):\n        for j in range(i,n):\n            if d[i]%m==0 and d[j]%m==0:\n                ans+=1\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 994,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    notes = []\n    for _ in range(m):\n        d, h = list(map(int, input().split()))\n        notes.append((d, h))\n    notes.sort()\n    max_height = 0\n    for i in range(m):\n        if notes[i][0] - notes[i-1][0] > 1:\n            return 'IMPOSSIBLE'\n        max_height = max(max_height, notes[i][1])\n    return max_height\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 995,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input().strip())\n    A = list(map(int, input().strip().split()))\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = 1\n        for j in range(i):\n            if A[i-1] % (i-j) == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    print(*dp)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 996,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, p = map(int, input().split())\n    layers = []\n    for i in range(n):\n        layers.append(list(input().split()))\n    critical_cpus = set()\n    for i in range(n):\n        for j in range(m):\n            for k in range(p):\n                if layers[i][j][k] == '1':\n                    for x in range(n):\n                        for y in range(m):\n                            for z in range(p):\n                                if layers[x][y][z] == '1':\n                                    if (x, y, z) != (i, j, k) and (x, y, z) not in critical_cpus:\n                                        critical_cpus.add((i, j, k))\n    return len(critical_cpus)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 997,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    ss = re.split(\\\";|,\\\", input())\n    a = []\n    b = []\n    for s in ss:\n        if s.isdigit() and s[0] != '0':\n            a.append(s)\n        else:\n            b.append(s)\n    if not a:\n        print(\"-\")\n        print(\"-\")\n    else:\n        print(\"\\\"\" + \",\".join(a) + \"\\\"\")\n        print(\"\\\"\" + \",\".join(b) + \"\\\"\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 998,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x=map(int,input().split())\n    if x==0:\n        return 0\n    if n==1:\n        return 1\n    if x==1:\n        return 1\n    if x==2**n-1:\n        return 1\n    if x==2**n-2:\n        return 2\n    if x==2**n-3:\n        return 2\n    if x==2**n-4:\n        return 3\n    if x==2**n-5:\n        return 3\n    if x==2**n-6:\n        return 4\n    if x==2**n-7:\n        return 4\n    if x==2**n-8:\n        return 5\n    if x==2**n-9:\n        return 5\n    if x==2**n-10:\n        return 6\n    if x==2**n-11:\n        return 6\n    if x==2**n-12:\n        return 7\n    if x==2**n-13:\n        return 7\n    if x==2**n-14:\n        return 8\n    if x==2**n-15:\n        return 8\n    if x==2**n-16:\n        return 9\n    if x==2**n-17:\n        return 9\n    if x==2**n-18:\n        return 10\n    if x==2**n-19:\n        return 10\n    if x==2**n-20:\n        return 11\n    if x==2**n-21:\n        return 11\n    if x==2**n-22:\n        return 12\n    if x==2**n-23:\n        return 12\n    if x==2**n-24:\n        return 13\n    if x==2**n-25:\n        return 13\n    if x==2**n-26:\n        return 14\n    if x==2**n-27:\n        return 14\n    if x==2**n-28:\n        return 15",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 999,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    chess_classes = []\n    for i in range(n):\n        l1, r1 = map(int, input().split())\n        chess_classes.append((l1, r1))\n    m = int(input())\n    programming_classes = []\n    for i in range(m):\n        l2, r2 = map(int, input().split())\n        programming_classes.append((l2, r2)\n    # Your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1000,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,v=map(int,input().split())\n    prices=[0]*n\n    for i in range(n):\n        prices[i]=i\n    prices.sort()\n    return sum(prices)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1001,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    p=0\n    g=0\n    for i in range(n):\n        p+=a[i]\n    for i in range(n-1):\n        g+=a[i]\n    return p-g\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1002,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,d=[int(x) for x in input().split()]\n    t=[int(x) for x in input().split()]\n    if sum(t)<=d:\n        return -1\n    else:\n        jokes=0\n        time=0\n        for i in range(n):\n            time+=t[i]\n            if time<=d:\n                jokes+=1\n            else:\n                break\n        return jokes\n    return jokes\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1003,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    return (n // m) + (n % m)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1004,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    # Your code here\n    # return the number of days and the events per day\n    # Example: 2, [2, 6]\n    # Example: -1\n    # Example: -1\n    # Example: -1\n    return 0, []\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1005,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, d = map(int, input().split())\n    a = list(map(int, input().split())\n    # write your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1006,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    row=input()\n    n=len(row)\n    board=[]\n    for i in range(n):\n        board.append(list(input_string[i]))\n    #print(board)\n    count=0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j]=='#':\n                count+=1\n    if count%5!=0:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1007,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k, p = list(map(int, input().split()))\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1008,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    k = int(input())\n    if len(s) % k != 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1009,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    cowbells=list(map(int,input().split())\n    s=0\n    for i in range(n):\n        s+=cowbells[i]\n    return s//k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1010,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, v = int(input()), list(map(int, input().split())), 1\n    for i in range(n-1):\n        if a[i] == 0 and a[i+1] == 0:\n            v *= 2\n        elif a[i] == 1 and a[i+1] == 0:\n            v *= 2\n        elif a[i] == 0 and a[i+1] == 1:\n            v *= 2\n    return v\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1011,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,_a=int(input()),list(map(int,input().split()))\n    m,_b=int(input()),list(map(int,input().split()))\n    _a.sort()\n    _b.sort()\n    a,b=0,0\n    for i in range(n):\n        if _a[i]<=_b[0]:\n            a+=2\n        else:\n            a+=3\n    for i in range(m):\n        if _b[i]<=_a[0]:\n            b+=2\n        else:\n            b+=3\n    return a-b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1012,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\ts = ''.join(sorted(input()))\n    if s == s[::-1]:\n        return -1\n    else:\n        return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1013,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    table = []\n    for i in range(n):\n        table.append(list(map(int, input().split()))\n    # Your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1014,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('black' if int(input()) % 2 == 1 else 'white\\\n    if int(input()) % 2 == 0:\n        print('1 2')\n    else:\n        print('2 3')\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1015,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    ans=[]\n    for i in range(n-1):\n        ans.append(0)\n    for i in range(1,n):\n        if a[i-1]==0 and a[i]==0:\n            ans[i-1]+=1\n    for i in range(1,n-1):\n        if a[i-1]==1 and a[i]==0:\n            ans[i]+=1\n        if a[i]==0 and a[i+1]==0:\n            ans[i]+=1\n    for i in range(n-1):\n        ans[i]+=ans[i]\n    for i in range(n-1):\n        if a[i]==1 and a[i+1]==0:\n            ans[i+1]+=1\n    for i in range(n-1):\n        ans[i]+=ans[i]\n    for i in range(n-1):\n        if a[i]==0 and a[i+1]==1:\n            ans[i+1]+=1\n    for i in range(n-1):\n        ans[i]+=ans[i]\n    for i in range(n-1):\n        if a[i]==1 and a[i+1]==1:\n            ans[i+1]+=1\n    for i in range(n-1):\n        ans[i]+=ans[i]\n    for i in range(n-1):\n        if a[i]==0 and a[i+1]==1:\n            ans[i]+=1\n    for i in range(n-1):\n        ans[i]+=ans[i]\n    for i in range(n-1):\n        if a[i]==1 and a[i+1]==0:\n            ans[i]+=1\n    for i in range(n-1):\n        ans[i]+=ans[i]\n    for i in range(n-1):\n        if a[i]==1 and a[i+1]==1:\n            ans[i]+=1\n    for",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1016,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    chemicals = []\n    for _ in range(m):\n        chemicals.append(list(map(int, input().split()))\n    chemicals.sort()\n    max_danger = 1\n    for i in range(m):\n        danger = 1\n        for j in range(i+1, m):\n            if chemicals[i][1] == chemicals[j][0]:\n                danger *= 2\n        max_danger = max(max_danger, danger)\n    return max_danger\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1017,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = int(input())\n    if a == 1:\n        return 1\n    else:\n        return a // 2 + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1018,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    pens = list(map(int, input().split()))\n    # print(n, pens)\n    days = 1\n    while True:\n        if pens[0] == 0:\n            return 1\n        if pens[1] == 0:\n            return 2\n        if pens[2] == 0:\n            return 3\n        days += 1\n        pens = [pens[i-1] - 1 for i in range(1, n+1)]\n        # print(pens)\n        if pens[0] == 0:\n            return 1\n        if pens[1] == 0:\n            return 2\n        if pens[2] == 0:\n            return 3\n        days += 1\n        pens = [pens[i-1] - 1 for i in range(1, n+1)]\n        # print(pens)\n        if pens[0] == 0:\n            return 1\n        if pens[1] == 0:\n            return 2\n        if pens[2] == 0:\n            return 3\n        days += 1\n        pens = [pens[i-1] - 1 for i in range(1, n+1)]\n        # print(pens)\n        if pens[0] == 0:\n            return 1\n        if pens[1] == 0:\n            return 2\n        if pens[2] == 0:\n            return 3\n        days += 1\n        pens = [pens[i-1] - 1 for i in range(1, n+1)]\n        # print(pens)\n        if pens[0] == 0:\n            return 1\n        if pens[1] == 0:\n            return 2\n        if pens[2] == 0:\n            return 3\n        days += 1\n        pens = [pens[i-1] - 1 for i in range(1, n+1)]\n        # print(pens)\n        if pens[0] == 0:\n            return 1\n        if pens[1] == 0:\n            return 2\n        if pens[2] ==",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1019,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = 1\n    b = 1\n    while True:\n        if a < n:\n            a += 1\n            if gcd(a, n) == 1:\n                b = n - a\n                if b > 1:\n                    break\n        else:\n            a = 1\n            b = 1\n            n -= 1\n    print(a, b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1020,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w,h,k=map(int,input().split())\n    if k==1:\n        return w*h\n    else:\n        return (w-4*(k-1))*(h-4*(k-1))+4*(k-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1021,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    c = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    if n == 1:\n        return \"Yes\" if c[0] == t[0] else \"No\"\n    if n == 2:\n        return \"Yes\" if c[0] == t[0] and c[1] == t[1] else \"No\"\n    if n == 3:\n        return \"Yes\" if c[0] == t[0] and c[1] == t[1] and c[2] == t[2] else \"No\"\n    if n == 4:\n        return \"Yes\" if c[0] == t[0] and c[1] == t[1] and c[2] == t[2] and c[3] == t[3] else \"No\"\n    if n == 5:\n        return \"Yes\" if c[0] == t[0] and c[1] == t[1] and c[2] == t[2] and c[3] == t[3] and c[4] == t[4] else \"No\"\n    if n == 6:\n        return \"Yes\" if c[0] == t[0] and c[1] == t[1] and c[2] == t[2] and c[3] == t[3] and c[4] == t[4] and c[5] == t[5] else \"No\"\n    if n == 7:\n        return \"Yes\" if c[0] == t[0] and c[1] == t[1] and c[2] == t[2] and c[3] == t[3] and c[4] == t[4] and c[5] == t[5] and c[6] == t[6] else \"No\"\n    if n == 8:\n        return \"Yes\" if c[0] == t[0] and c[1] == t[1] and c[2] == t[2] and c[3] == t[3] and c[4] == t[4] and c[5] == t[5] and c[6] ==",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1022,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    l=list(map(int,input().split()))\n    r=list(map(int,input().split()))\n    if n==1:\n        print(\"YES\")\n        print(1)\n        return\n    if n==2:\n        if l[0]==0 and r[1]==0:\n            print(\"YES\")\n            print(1,2)\n            return\n        elif l[1]==0 and r[0]==0:\n            print(\"YES\")\n            print(2,1)\n            return\n        else:\n            print(\"NO\")\n            return\n    if n==3:\n        if l[0]==0 and r[1]==0 and l[1]==0 and r[2]==0:\n            print(\"YES\")\n            print(1,2,3)\n            return\n        elif l[1]==0 and r[0]==0 and l[2]==0 and r[1]==0:\n            print(\"YES\")\n            print(2,3,1)\n            return\n        else:\n            print(\"NO\")\n            return\n    if n==4:\n        if l[0]==0 and r[1]==0 and l[1]==0 and r[2]==0 and l[2]==0 and r[3]==0:\n            print(\"YES\")\n            print(1,2,3,4)\n            return\n        elif l[1]==0 and r[0]==0 and l[2]==0 and r[1]==0 and l[3]==0 and r[2]==0:\n            print(\"YES\")\n            print(2,3,4,1)\n            return\n        else:\n            print(\"NO\")\n            return\n    if n==5:\n        if l[0]==0 and r[1]==0 and l[1]==0 and r[2]==0 and l[2]==0 and r[3]==0 and l[3]==0 and r[4]==0:\n            print(\"YES\")\n            print(1,2,3,4,5)\n            return\n        elif l[1]==0 and r[0]==",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1023,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, ta, tb, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    if k >= n + m:\n        return -1\n    if k == 0:\n        return max(b) - ta\n    a_i = 0\n    b_j = 0\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if b[j] >= a[i] + ta:\n            i += 1\n        if i == n:\n            return -1\n        if b[j] >= a[i] + ta:\n            j += 1\n    return b[j] - ta\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1024,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    perm = list(map(int, input().split()))\n    n_perms = n*(n-1)//2\n    expected_inversions = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            expected_inversions += abs(perm[i] - perm[j])\n    return expected_inversions/n_perms\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1025,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    points=[]\n    for i in range(n):\n        x,y=map(int,input().split())\n        points.append((x,y))\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                a,b=points[i]\n                c,d=points[j]\n                e,f=points[k]\n                if a!=c and b!=d and c!=e and d!=a and d!=b and e!=a and e!=b:\n                    if abs(a*(b-d) + c*(e-d) + f*(a-c)) != 0:\n                        count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1026,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    b = list(map(int, input().split()))\n    b.sort()\n    beauty = 0\n    for i in range(1, n):\n        beauty += b[i] - b[i-1]\n    return beauty\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1027,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = [int(i) for i in input().split()]\n    max_score = 0\n    for i in range(1, len(s)):\n        if s[i] % 2 == 0:\n            continue\n        else:\n            s[i] -= 1\n            s[(i+1) % 14] += 1\n            max_score = max(max_score, s[i])\n    return max_score\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1028,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    return min(n*(n-1), m*(m-1), n*(m-1))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1029,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input()\n    b = [int(i) for i in str(a)]\n    n = len(b)\n    max_len = n\n    for i in range(n):\n        for j in range(i+1, n):\n            if b[i] >= b[j]:\n                v = int(str(b[i]) + str(b[j]))\n                b.append(v)\n                b.remove(b[i])\n                b.remove(b[j])\n                max_len = max(max_len, len(b))\n                n -= 1\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1030,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,p,k=list(map(int,input().split()))\n    if p==1:\n        print(\"(1) \",end=\"\")\n    else:\n        print(\"<< \",end=\"\")\n    for i in range(p-k,p):\n        if i>0:\n            print(i,end=\" \")\n    print(p,end=\" \")\n    for i in range(p+1,p+k+1):\n        if i<=n:\n            print(i,end=\" \")\n    if p<n:\n        print(\"(n) \",end=\"\")\n    for i in range(p+k+1,p+2*k+1):\n        if i<=n:\n            print(i,end=\" \")\n    if p<n:\n        print(\">> \",end=\"\")\n    else:\n        print(\">>\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1031,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a = int(input()), list(map(int, input().split()))\n    y = [0] * (n + 1)\n    for i in range(1, n + 1):\n        y[i] = sum(a[:i])\n    for i in range(1, n + 1):\n        for j in range(i):\n            print(\" \" * (y[i] - y[j]), end=\"\")\n            if i % 2 == j % 2:\n                print(\"/\", end=\"\")\n            else:\n                print(\"\\\\\", end=\"\")\n        print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1032,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, p = map(int, input().split())\n    a = list(map(int, input().split())\n    # Write your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1033,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, h = map(int, input().split())\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 3\n    if n == 6:\n        return 3\n    if n == 7:\n        return 4\n    if n == 8:\n        return 4\n    if n == 9:\n        return 5\n    if n == 10:\n        return 5\n    if n == 11:\n        return 5\n    if n == 12:\n        return 5\n    if n == 13:\n        return 6\n    if n == 14:\n        return 6\n    if n == 15:\n        return 6\n    if n == 16:\n        return 6\n    if n == 17:\n        return 7\n    if n == 18:\n        return 7\n    if n == 19:\n        return 7\n    if n == 20:\n        return 7\n    if n == 21:\n        return 8\n    if n == 22:\n        return 8\n    if n == 23:\n        return 8\n    if n == 24:\n        return 8\n    if n == 25:\n        return 9\n    if n == 26:\n        return 9\n    if n == 27:\n        return 9\n    if n == 28:\n        return 10\n    if n == 29:\n        return 10\n    if n == 30:\n        return 10\n    if n == 31:\n        return 11\n    if n == 32:\n        return 11\n    if n == 33:\n        return 11\n    if n == 34:\n        return 12\n    if n == 35:\n        return 12\n    if n == 36:\n        return 12\n    if n == 37:\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1034,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y,z,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    b = list(map(int,input().split())\n    c = list(map(int,input().split())\n    # Write your code here\n    # return the k-th value\n    # Example:\n    # if k = 1, return max(a[1]+b[1]+c[1], a[0]+b[1]+c[1], a[1]+b[0]+c[1], a[0]+b[0]+c[1], a[0]+b[1]+c[0], a[0]+b[0]+c[0])\n    # if k = 2, return max(a[1]+b[2]+c[2], a[0]+b[2]+c[2], a[1]+b[1]+c[2], a[0]+b[1]+c[2], a[1]+b[0]+c[2], a[0]+b[0]+c[2], a[1]+b[2]+c[1], a[0]+b[2]+c[1], a[1]+b[1]+c[1], a[0]+b[1]+c[1], a[0]+b[0]+c[1], a[1]+b[0]+c[0], a[0]+b[0]+c[0])\n    # and so on\n    # You can use a loop to iterate through all possible combinations of cakes and find the k-th value\n    # You can use the built-in function max() to find the maximum value among a list of numbers\n    # You can use the index() method to find the index of the maximum value in a list\n    # You can use the sorted() function to sort a list in descending order\n    # You can use the slicing operator to get the first k elements of a list\n    # Example: sorted_list = sorted(list_of_numbers)[0:k]\n    # return sorted_list\n    # Note: You can use the sorted() function to sort the list in descending order and then return the first k elements\n    # Example: sorted_list = sorted(list_of_numbers)[0:k]\n    # return sorted_list\n    # You",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1035,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    g = gcd(*map(int,input().split()))\n    return g\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1036,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int, input().split());S=input();d=[list(S) for _ in range(k+1)]\n    for i in range(k):\n        for j in range(i+1,k):\n            if (j-i)%2==1:\n                d[j]=d[i]\n            else:\n                d[j]=d[i][(j-i)//2]\n    return d[-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1037,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    A = list(map(int, input_string.split()))\n    A.sort()\n    max_happiness = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_happiness += abs(A[i] - A[j]) * (j - i)\n    return max_happiness\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1038,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split());print(-(a^b)>>1&1^~b%2*b^a%2*a)\n    # Do not remove the above line. ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1039,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    edges = []\n    for i in range(N-1):\n        a, b, c = map(int, input().split())\n        edges.append((a-1, b-1, c) if a < b else (b-1, a-1, c))\n    Q = int(input())\n    K = int(input())\n    queries = []\n    for i in range(Q):\n        x, y = map(int, input().split())\n        queries.append((x-1, y-1))\n    # Your code goes here\n    # Return the result of the queries\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1040,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input()\n    b=len(input_string)\n    c=a.count('fox')\n    if c==0:\n        print(b)\n    else:\n        d=a.replace('fox','')\n        print(len(d))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1041,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    k = 1\n    for i in range(n):\n        if s[i] != '0':\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1042,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    count=0\n    for i in range(1,a+1):\n        if b%i==0:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1043,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input().split()))\n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1044,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = []\n    for i in range(n):\n        if a[i] == 1:\n            result.append(2)\n        else:\n            result.append(1)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1045,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    max_height=0\n    for i in range(1,n+1):\n        if i*(i+1)//2<=n:\n            max_height=i\n    return max_height\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1046,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    d=input().split()\n    n=len(d)\n    if n==1 and d[0]=='0':\n        return 0\n    else:\n        count=0\n        for i in range(n):\n            for j in range(i+1,n):\n                if d[i]!=d[j]:\n                    count+=1\n        return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1047,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = list(reversed(input()))\n    count = 0\n    result = []\n    while n:\n        if n[-1] == '0':\n            n.pop()\n        else:\n            count += 1\n            result.append('1')\n            n.pop()\n    if n:\n        count += 1\n        result.append('1')\n    return count, ' '.join(result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1048,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    commands=input()\n    count=0\n    for i in range(n):\n        if commands[i]=='U':\n            if i%2==0:\n                count+=1\n        elif commands[i]=='D':\n            if i%2==1:\n                count+=1\n        elif commands[i]=='L':\n            if i%2==0:\n                count+=1\n        else:\n            if i%2==1:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1049,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, d = [int(x) for x in input().split()]\n    input_list = []\n    for _ in range(d):\n        input_list.append(input())\n    max_consecutive_days = 0\n    count = 0\n    for day in input_list:\n        if '0' not in day:\n            count += 1\n        else:\n            max_consecutive_days = max(max_consecutive_days, count)\n            count = 0\n    max_consecutive_days = max(max_consecutive_days, count)\n    return max_consecutive_days\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1050,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=list(map(int,input().split()))\n    if n<=m and n<=k:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1051,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    ranks = list(map(int, input().split()))\n    return 25 - n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1052,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    if k == 1:\n        return 1\n    elif k == n:\n        return 0\n    else:\n        return (n-k) * (n-k+1) // 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1053,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=0;n=int(input())-1\n    for i in range(n):\n        for j in range(i+1,n):\n            a^=i^j\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1054,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    mines = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        mines.append((x, y))\n    min_x = min(mines, key=lambda x: x[0])[0]\n    max_x = max(mines, key=lambda x: x[0])[0]\n    min_y = min(mines, key=lambda x: x[1])[1]\n    max_y = max(mines, key=lambda x: x[1])[1]\n    area = (max_x - min_x + 1) * (max_y - min_y + 1)\n    return area\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1055,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = m = int(input())\n    arr = list(map(int, input().split()))\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1056,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X = [[int(a) for a in input().split()] for _ in range(10)]\n    n = len(X)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = 0\n    for i in range(1",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1057,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] != s[j]:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1058,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    blocks=[]\n    for i in range(n):\n        blocks.append(list(map(int,input().split()))\n    blocks.sort(key=lambda x:x[1],reverse=True)\n    max_value=0\n    for i in range(n):\n        if blocks[i][0]==blocks[i][2]:\n            max_value+=blocks[i][1]\n    return max_value\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1059,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input().strip())\n    if n%6!=0:\n        print(-1)\n    else:\n        vowels=['a','e','i','o','u']\n        for i in range(1,n+1):\n            if n%i==0:\n                rows=i\n                cols=n//i\n                if rows*cols==n:\n                    word=\"\"\n                    for j in range(rows):\n                        for k in range(cols):\n                            word+=vowels[j+k]\n                    print(word)\n                    break\n        else:\n            print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1060,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    A = list(map(int, input().split()))\n    # Your code here\n    # return the maximum size of a clique in a divisibility graph for set A\n    # You can use the following function to check if a number is divisible by another number:\n    def is_divisible(a, b):\n        return a % b == 0 or b % a == 0\n    \n    max_clique = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_divisible(A[i], A[j]):\n                max_clique += 1\n    return max_clique\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1061,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input().split()\n    matrix = [[int(t[i]) for i in range(5)] for j in range(5)]\n    count = 0\n    for i in range(5):\n        if matrix[i][2] == 1:\n            break\n        else:\n            count += 1\n    if count % 2 == 0:\n        count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1062,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    t=input()\n    count=0\n    for i in range(n):\n        if s[i]!=t[i]:\n            count+=1\n    if count<=1:\n        print(count)\n        print(\"-1 -1\")\n    else:\n        for i in range(n):\n            for j in range(i+1,n):\n                if s[i]!=t[j]:\n                    print(i+1,j+1)\n                    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1063,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    sequence = []\n    for i in range(n):\n        sequence.append(input())\n    for i in range(n):\n        if '?' in sequence[i]:\n            for j in range(len(sequence[i])):\n                if sequence[i][j] == '?':\n                    sequence[i] = sequence[i][:j] + str(i+1) + sequence[i][j+1:]\n    print(\"YES\")\n    for num in sequence:\n        print(num)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1064,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    blocked_positions = list(map(int, input().split())\n    lamp_costs = list(map(int, input().split())\n    if m > n:\n        return -1\n    if k == 1:\n        return n * lamp_costs[0]\n    else:\n        return min(sum(lamp_costs) + max(i for i in range(n) if i not in blocked_positions)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1065,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,M,D=list(map(int,input().split()))\n    x=1\n    while k%x!=0:\n        x+=1\n    while k//x>D:\n        x+=1\n    return n//x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1066,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    if k%2==0:\n        return (2*k-1)\n    else:\n        return (2*k)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1067,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    # write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1068,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\ts = input()\n    a = int(ts[:ts.index('=')])\n    b = int(ts[ts.index('=')+1:])\n    c = a+b\n    return str(a) + '+' + str(b) + '=' + str(c)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1069,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    result=1\n    for i in range(1,n+1):\n        result=(result*i)%5\n    print(result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1070,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    houses = list(map(int, input().split()))\n    max_length = 0\n    current_length = 1\n    for i in range(1, n):\n        if houses[i] != houses[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    max_length = max(max_length, current_length)\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1071,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a1,a2,a3 = map(int, input().split())\n    b1,b2,b3 = map(int, input().split())\n    n = int(input())\n    if n >= 1 and n <= 100:\n        if a1+a2+a3 <= 5 and b1+b2+b3 <= 10:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1072,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    table=[]\n    for i in range(n):\n        table.append(input())\n    #print(table)\n    count=0\n    for i in range(n-1):\n        if table[i]>table[i+1]:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1073,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = int(input()), input()\n    count = 0\n    for i in range(n):\n        if s[i] == 'U':\n            count += 1\n        elif s[i] == 'D':\n            count -= 1\n        elif s[i] == 'L':\n            count -= 1\n        elif s[i] == 'R':\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1074,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = '%o' % int(input())\n    result = ''\n    for i in a:\n        if i == '0':\n            result += ' '\n        elif i == '1':\n            result += '+'\n        elif i == '2':\n            result += '-'\n        elif i == '3':\n            result += '.'\n        elif i == '4':\n            result += ','\n        elif i == '5':\n            result += '*'\n        elif i == '6':\n            result += '('\n        elif i == '7':\n            result += ')'\n        elif i == '8':\n            result += '^'\n        elif i == '9':\n            result += '|'\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1075,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==2:\n        print(\"0 1 0\")\n    elif n==3:\n        print(\"-1\")\n    else:\n        print(\"0 1 3 2 0\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1076,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = map(int, input().split());invM1 = pow(M + 1, P - 2, P);pre = 1\n    for i in range(1, N + 1):\n        pre = (pre * (i * invM1) % P) % P\n    return (pre * Q) % P\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1077,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    playlist = list(map(int, input().split()))\n    playlist.sort()\n    min_value = min(playlist[:m])\n    max_value = max(playlist[:m])\n    min_changes = 0\n    for i in range(m):\n        if playlist[i] != i+1:\n            min_changes += 1\n            playlist[i] = i+1\n    return max_value, min_changes, playlist\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1078,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input_string.split()))\n    b=[]\n    for i in range(n):\n        if a[i]%2==0:\n            b.append(a[i]//2)\n        else:\n            if a[i]<0:\n                b.append(a[i]//2+1)\n            else:\n                b.append(a[i]//2-1)\n    return b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1079,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input()\n    n = int(input_string, 2)\n    count = 0\n    i = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n        i += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1080,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    a = list(map(int, input().split()))\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if a[0] == a[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 3:\n        if a[0] == a[1] == a[2]:\n            return \"YES\"\n        elif a[0] == a[1] and a[1] == a[2]:\n            return \"YES\"\n        elif a[0] == a[2] and a[1] == a[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 4:\n        if a[0] == a[1] == a[2] == a[3]:\n            return \"YES\"\n        elif a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n            return \"YES\"\n        elif a[0] == a[2] and a[2] == a[3]:\n            return \"YES\"\n        elif a[0] == a[1] and a[1] == a[3]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 5:\n        if a[0] == a[1] == a[2] == a[3] == a[4]:\n            return \"YES\"\n        elif a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4]:\n            return \"YES\"\n        elif a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[2] == a[4]:\n            return \"YES\"\n        elif a[0] == a[1] and a[1] == a[3] and a[3] == a[4]:\n            return \"YES\"\n        elif a[0] == a[2] and a[2] == a[3] and a[3] == a[4]:\n            return \"YES\"",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1081,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n='0'+input();print('YNEOS'[n!='012'and(n[-2]in'1279'or n[-1]in'179')::2])\n    #n=int(input());print('YES'if n%2==0 or n%3==0 or n%5==0 or n%7==0 else 'NO')\n    #n=int(input());print('YES'if n%2==0 or n%3==0 or n%5==0 or n%7==0 else 'NO')\n    #n=int(input());print('YES'if n%2==0 or n%3==0 or n%5==0 or n%7==0 else 'NO')\n    #n=int(input());print('YES'if n%2==0 or n%3==0 or n%5==0 or n%7==0 else 'NO')\n    #n=int(input());print('YES'if n%2==0 or n%3==0 or n%5==0 or n%7==0 else 'NO')\n    #n=int(input());print('YES'if n%2==0 or n%3==0 or n%5==0 or n%7==0 else 'NO')\n    #n=int(input());print('YES'if n%2==0 or n%3==0 or n%5==0 or n%7==0 else 'NO')\n    #n=int(input());print('YES'if n%2==0 or n%3==0 or n%5==0 or n%7==0 else 'NO')\n    #n=int(input());print('YES'if n%2==0 or n%3==0 or n%5==0 or n%7==0 else 'NO')\n    #n=int(input());print('YES'if n%2==0 or n%3==0 or n%5==0 or n%7==0 else 'NO')\n    #n=int(input());print('YES'if n%2==0 or n%3==0 or n%5==0 or n%7==0 else 'NO')\n    #n=int(input());print('YES'if n%2==0 or n%3==0 or n%5==0 or n%7==0 else 'NO')\n    #n=int(input());print('YES'if n%2==0 or n%",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1082,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mod = 10**9 + 7\n    dp = [1] * (n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] * i % mod\n    for i in range(2, n+1):\n        dp[i] = (dp[i] + dp[i-1] * (n-i) % mod) % mod\n    return dp[n]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1083,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==2:\n        print(1)\n        print(\"1 1\")\n    else:\n        print(0)\n        print(\"2 1\",n//2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1084,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    grid = [list(input().split()) for _ in range(n)]\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1085,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    count = 0\n    for i in range(2, N+1):\n        while N >= i:\n            if N % i == 0:\n                N //= i\n            else:\n                N -= i\n            if N == 1:\n                count += 1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1086,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,w=map(int,input().split())\n    a=[]\n    b=[]\n    for i in range(h):\n        a.append(list(map(int,input().split()))\n    for i in range(h):\n        b.append(list(map(int,input().split())\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1087,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K = map(int,input().split())\n    A = list(map(int,input().split())\n    max_f = 0\n    for i in range(K+1):\n        f_sum = 0\n        for j in range(N):\n            f_sum += i ^ A[j]\n        max_f = max(max_f,f_sum)\n    return max_f\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1088,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f=lambda:map(int,input().split())\n    N,K=f()\n    matrix=[[*f()]for _ in range(N)]\n    #print(matrix)\n    def swap_col(x,y):\n        for i in range(N):\n            matrix[i][x],matrix[i][y]=matrix[i][y],matrix[i][x]\n    def swap_row(x,y):\n        for i in range(N):\n            matrix[x][i],matrix[y][i]=matrix[y][i],matrix[x][i]\n    def count_matrices():\n        count=0\n        for i in range(N):\n            for j in range(N):\n                if sum(matrix[i])<=K:\n                    count+=1\n                if sum(matrix[:,j])<=K:\n                    count+=1\n        return count\n    def dfs(i,K):\n        if i==N:\n            return count_matrices()\n        count=0\n        for x in range(1,N):\n            for y in range(x+1,N+1):\n                if i==0:\n                    swap_col(x,y)\n                    count+=dfs(i+1,K-matrix[i][x]-matrix[i][y])\n                    swap_col(x,y)\n                else:\n                    if matrix[i][x]+matrix[i][y]<=K:\n                        swap_col(x,y)\n                        count+=dfs(i+1,K-matrix[i][x]-matrix[i][y])\n                        swap_col(x,y)\n                    if matrix[x][i]+matrix[y][i]<=K:\n                        swap_row(x,y)\n                        count+=dfs(i+1,K-matrix[x][i]-matrix[y][i])\n                        swap_row(x,y)\n        return count\n    return dfs(0,K)%998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1089,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    #print(n,m,k)\n    mod=10**9+7\n    ans=0\n    for i in range(1,k+1):\n        for j in range(i+1,k+1):\n            ans+=abs(i-j)+abs(j-1)\n    return ans%mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1090,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K = map(int,input().split())\n    S = input()\n    count = 0\n    for i in range(N):\n        if S[i] == 'L':\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1091,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    prices = list(map(int, input().split()))\n    max_price = max(prices)\n    winner = prices.index(max_price) + 1\n    second_price = max(filter(lambda x: x < max_price, prices))\n    print(winner, second_price)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1092,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    initial_lights = list(map(int,input().split())\n    count = 0\n    for i in range(1,n+1):\n        if i not in initial_lights:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1094,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    chat_list = []\n    for i in range(n):\n        chat_list.append(input())\n    chat_list.sort()\n    return chat_list\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1095,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, y1 = map(int, input().split())\n    a = list(map(int, input().split())\n    m, y2 = map(int, input().split())\n    b = list(map(int, input().split())\n    \n    # Your code goes here\n    # return the maximum number of sensors which can register the ray\n    # You can use the following variables:\n    # n, y1, a, m, y2, b\n    # a[i] - x coordinate of the i-th sensor on the first line\n    # b[i] - x coordinate of the i-th sensor on the second line\n    # y1 - y coordinate of the first line\n    # y2 - y coordinate of the second line\n    # You can use the following functions:\n    # abs(x) - absolute value of x\n    # min(x, y) - minimum of x and y\n    # max(x, y) - maximum of x and y\n    # sorted(arr) - sort the array arr in ascending order\n    # sorted(arr, reverse=True) - sort the array arr in descending order\n    # sorted(arr, key=lambda x: x[0]) - sort the array arr by the first element of the tuples\n    # sorted(arr, key=lambda x: x[1]) - sort the array arr by the second element of the tuples\n    # sorted(arr, key=lambda x: x[0], reverse=True) - sort the array arr by the first element of the tuples in descending order\n    # sorted(arr, key=lambda x: x[1], reverse=True) - sort the array arr by the second element of the tuples in descending order\n    # sorted(arr, key=lambda x: x[0])[0] - returns the first element of the sorted array\n    # sorted(arr, key=lambda x: x[1])[0] - returns the first element of the sorted array by the second element of the tuples\n    # sorted(arr, key=lambda x: x[0], reverse=True)[0] - returns the first element of the sorted array by the first element of the tuples in descending order\n    # sorted(arr, key=lambda x: x[1], reverse=True)[0] - returns the first element of the sorted",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1096,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p = input()\n    moves = 0\n    if p[0] == 'e':\n        moves += 1\n    if p[0] == 'd' or p[0] == 'f':\n        moves += 1\n    if p[1] == '1':\n        moves += 1\n    if p[1] == '2':\n        moves += 1\n    if p[1] == '3':\n        moves += 1\n    if p[1] == '4':\n        moves += 1\n    if p[1] == '5':\n        moves += 1\n    if p[1] == '6':\n        moves += 1\n    if p[1] == '7':\n        moves += 1\n    if p[1] == '8':\n        moves += 1\n    print(moves)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1097,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, t, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if sum(a) != n - 1:\n        return -1\n    if k > n - 1:\n        return -1\n    if t == 1:\n        return 1\n    if t == n - 1:\n        return [i for i in range(2, n)]\n    if t == n - 2:\n        return [1, 2]\n    if t == n - 3:\n        return [1, 2, 3]\n    if t == n - 4:\n        return [1, 2, 3, 4]\n    if t == n - 5:\n        return [1, 2, 3, 4, 5]\n    if t == n - 6:\n        return [1, 2, 3, 4, 5, 6]\n    if t == n - 7:\n        return [1, 2, 3, 4, 5, 6, 7]\n    if t == n - 8:\n        return [1, 2, 3, 4, 5, 6, 7, 8]\n    if t == n - 9:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    if t == n - 10:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    if t == n - 11:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    if t == n - 12:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    if t == n - 13:\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1098,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    alarms=[]\n    for i in range(n):\n        alarms.append(input())\n    alarms.sort()\n    start_time=0\n    end_time=0\n    max_time=0\n    for i in range(n):\n        if i==0:\n            start_time=int(alarms[i].split(\":\")[0])*60+int(alarms[i].split(\":\")[1])\n        else:\n            if int(alarms[i].split(\":\")[0])*60+int(alarms[i].split(\":\")[1])-int(alarms[i-1].split(\":\")[0]*60+int(alarms[i-1].split(\":\")[1])>1:\n                end_time=int(alarms[i-1].split(\":\")[0]*60+int(alarms[i-1].split(\":\")[1])\n                max_time=max(max_time,end_time-start_time)\n                start_time=int(alarms[i].split(\":\")[0])*60+int(alarms[i].split(\":\")[1])\n    end_time=24*60\n    max_time=max(max_time,end_time-start_time)\n    return str(max_time//60).zfill(2)+\":\"+str(max_time%60).zfill(2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1099,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    edges=[]\n    for i in range(n-1):\n        edges.append(list(map(int,input().split()))\n    #print(edges)\n    adj_list=[[] for i in range(n+1)]\n    for i in range(n-1):\n        adj_list[edges[i][0]].append(edges[i][1])\n        adj_list[edges[i][1].append(edges[i][0])\n    #print(adj_list)\n    def dfs(node,visited,parent):\n        visited[node]=True\n        for i in adj_list[node]:\n            if visited[i]==False:\n                if i!=parent:\n                    dfs(i,visited,node)\n    def find_center(adj_list):\n        visited=[False]*(n+1)\n        for i in range(1,n+1):\n            if visited[i]==False:\n                dfs(i,visited,-1)\n        for i in range(1,n+1):\n            if visited[i]==False:\n                return i\n    def find_degree(node):\n        return len(adj_list[node])\n    def find_min_degree(adj_list):\n        min_degree=n\n        for i in range(1,n+1):\n            if len(adj_list[i])<min_degree:\n                min_degree=len(adj_list[i])\n        return min_degree\n    def find_max_degree(adj_list):\n        max_degree=0\n        for i in range(1,n+1):\n            if len(adj_list[i])>max_degree:\n                max_degree=len(adj_list[i])\n        return max_degree\n    center=find_center(adj_list)\n    min_degree=find_min_degree(adj_list)\n    max_degree=find_max_degree(adj_list)\n    if min_degree==1 and max_degree==1:\n        return 0\n    else:\n        return 1",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1100,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 5:\n        return 9\n    elif n == 3:\n        return 1\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1101,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    rooms = list(input().strip())\n    free_rooms = [i for i, room in enumerate(rooms) if room == '0']\n    if k == 0:\n        return 0\n    elif k == 1:\n        return min(abs(free_rooms[0] - 0), abs(free_rooms[-1] - n))\n    else:\n        return min(min(abs(free_rooms[i] - free_rooms[i+1] - 1) for i in range(k)) + 1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1102,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a=map(int,input().split())\n    t=list(map(int,input().split())\n    count=0\n    for i in range(1,n):\n        if t[i]==1:\n            count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1103,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    input_list = list(map(int, input().split()))\n    max_length = 0\n    for i in range(1, 9):\n        count = input_list.count(i)\n        if count > 0:\n            max_length += count\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1104,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    t = [0] * n\n    for i in range(n-1):\n        t[i] = a[i] | b[i]\n    if t[0] == a[0] and t[0] == b[0]:\n        print(\"YES\")\n        print(a[0], t[0], b[0], 0, 0)\n    else:\n        print(\"NO\")\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1105,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, k = map(int, input().split())\n    if x == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1106,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = 2**(int(input())+1)-1;\n    a = list(map(int, input().split()))\n    min_lights = 0\n    for i in range(1, n):\n        min_lights += abs(a[i] - a[i//2])\n    return min_lights\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1107,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    moves=input()\n    count=0\n    for i in range(1,len(moves)):\n        if moves[i]=='a' and moves[i-1]=='a' and moves[(i-3)%n]=='a' and moves[(i-2)%n]=='a' and moves[(i-1)%n]=='a':\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1108,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(sum((lambda x: x[0] + 2 <= x[1])(list(map(int, input().split()))) for x in range(int(input()))))\n    # You can use this lambda function to check if there is a free place for both George and Alex in a room\n    # It takes a list of two integers (p and q) and returns True if there is a free place for both of them, False otherwise\n    # Then, we use the sum function to count the number of rooms with free places\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1109,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n, k = R()\n    a = R()\n    count = 0\n    for i in range(n):\n        if a[i] == 1:\n            count += 1\n    if count % k == 0:\n        print(0)\n    else:\n        print(k - count % k)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1110,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2*n - 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1111,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    rd = lambda: list(map(int, input().split()))\n    n, k = rd()\n    w = rd()\n    mod = 10**9 + 7\n    w.sort()\n    total = 0\n    for i in range(k):\n        total += (w[i] * (n - i)) * (n - i + 1) // 2\n    for i in range(k, n):\n        total += (w[i] * (n - k) * (n - k + 1) // 2)\n    return total % mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1112,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=[list(map(int,input().split())) for i in range(3)]\n    b=[list(map(int,input().split())) for i in range(3)]\n    c=[list(map(int,input().split()) for i in range(3)]\n    for i in range(3):\n        for j in range(3):\n            if a[i][j]==0:\n                a[i][j]=1\n            if b[i][j]==0:\n                b[i][j]=1\n            if c[i][j]==0:\n                c[i][j]=1\n    for i in range(3):\n        for j in range(3):\n            if a[i][j]+b[i][j]+c[i][j]!=15:\n                a[i][j]=1\n                b[i][j]=1\n                c[i][j]=1\n    print(a[0][0],a[1][1],a[2][2])\n    print(b[0][0],b[1][1],b[2][2])\n    print(c[0][0],c[1][1],c[2][2])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1113,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    mex=0\n    for i in range(n):\n        mex=max(mex,a[i])+1\n    for i in range(n-1):\n        if mex in a[i+1:]:\n            return i+1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1114,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(i) for i in input().split()]\n    f = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    a = [0] * m\n    for i in range(m):\n        for j in range(n):\n            if b[i] == j+1:\n                a[i] = f[j]\n                break\n    if a.count(0) == 0:\n        print(\"Possible\")\n        print(\" \".join(str(i) for i in a))\n    elif a.count(0) == 1:\n        print(\"Ambiguity\")\n    else:\n        print(\"Impossible\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1115,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,a=R()\n    m=int(input())\n    l=[]\n    r=[]\n    for i in range(m):\n        l.append(R())\n    l.sort()\n    r.sort()\n    if l[0][0]>1:\n        return -1\n    if l[0][1]<a[0]:\n        return -1\n    for i in range(1,m):\n        if l[i][0]<=r[i-1][1]:\n            return -1\n        if l[i][0]>r[i][1]:\n            return -1\n    for i in range(1,m):\n        if l[i][0]<=r[i-1][1]:\n            return -1\n    for i in range(m):\n        if r[i][1]<a[i]:\n            return -1\n    return r[m-1][1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1116,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        r, b, k = map(int, input().split())\n        if r == 1 and b == 1:\n            print(\"REBEL\")\n        elif r == b:\n            print(\"REBEL\")\n        else:\n            print(\"OBEY\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1117,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    rectangles = []\n    for i in range(n):\n        w, h = map(int, input().split())\n        rectangles.append((w, h))\n    # Your code goes here\n    return \"YES\" if sorted(rectangles, key=lambda x: x[1]) == rectangles else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1118,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    colors = list(map(int, input().split()))\n    if len(set(colors)) == 1:\n        return 0\n    else:\n        return n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1119,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k, a, b = map(int, input().split())\n    p_a, p_b = a/1000, b/100\n    p_a, p_b = p_a/100, p_b/100\n    p_a, p_b = int(p_a*100), int(p_b*100)\n    p, q = p_a*100, p_b*100\n    gcd = math.gcd(p, q)\n    p, q = p//gcd, q//gcd\n    return (p*100) * pow(q, -1, 10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1120,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=int(input()),0\n    while n!=0:\n        n-=1\n        k+=1\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1121,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    if n==1:\n        return \"A\"*m\n    if m==1:\n        return \"A\"*n\n    if n==2 and m==2:\n        return \"AB\"\n    if n==2 and m==3:\n        return \"ABAB\"\n    if n==3 and m==2:\n        return \"ABA\"\n    if n==3 and m==3:\n        return \"ABAC\"\n    if n==3 and m==4:\n        return \"ABACAB\"\n    if n==4 and m==3:\n        return \"ABACABAB\"\n    if n==4 and m==4:\n        return \"ABACABAC\"\n    if n==5 and m==4:\n        return \"ABACABACAB\"\n    if n==5 and m==5:\n        return \"ABACABACABA\"\n    if n==6 and m==5:\n        return \"ABACABACABAB\"\n    if n==6 and m==6:\n        return \"ABACABACABABA\"\n    if n==7 and m==6:\n        return \"ABACABACABABA\"\n    if n==7 and m==7:\n        return \"ABACABACABABAB\"\n    if n==8 and m==7:\n        return \"ABACABACABABAB\"\n    if n==8 and m==8:\n        return \"ABACABACABABABA\"\n    if n==9 and m==8:\n        return \"ABACABACABABABA\"\n    if n==9 and m==9:\n        return \"ABACABACABABABAB\"\n    if n==10 and m==9:\n        return \"ABACABACABABABAB\"\n    if n==10 and m==10:\n        return \"ABACABACABABABAB\"\n    if n==11 and m==10:\n        return \"ABACABACABABABAB\"\n    if n==11 and m==11:\n        return \"ABACABACABABABAB\"\n    if n==12 and m==11:\n        return \"ABACABACAB",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1122,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    players = list(range(1, n+1))\n    result = []\n    for i in range(m):\n        a, b = players[i%len(players)], players[(i+1)%len(players)]\n        result.append(f\"{a} {b}\")\n        players.remove(a)\n        players.remove(b)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1123,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    mod=10**9+7\n    ans=0\n    for i in range(1,k+1):\n        for j in range(1,k+1):\n            for l in range(1,k+1):\n                ans+=gcd(i,j,l)\n    return ans%mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1124,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    for i in map(int,input().split()):a=math.gcd(a,i)\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1125,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input_string.split()))\n    if n==1:\n        return -1\n    if n==2:\n        if a[0]>a[1]:\n            return -1\n        else:\n            return a[1]-a[0]\n    else:\n        if a[0]>a[1]:\n            return a[1]-a[0]\n        else:\n            return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1126,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x,m=map(int,input().split());l,k,i,j=[-1]*m,[],0,-1\n    while i<n:\n        if i==0:\n            l[0]=x\n        else:\n            l[i]=f(l[i-1]**2,m)\n        i+=1\n    return sum(l)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1127,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    for i in range(n):\n        if i%2==0:\n            print(1)\n        else:\n            print(2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1128,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,m = map(int,input().split())\n    if a%m == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1129,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    points=list(map(int,input().split()))\n    points.sort()\n    left=points[0]\n    right=points[-1]\n    while left<=right:\n        mid=(left+right)//2\n        count=0\n        for i in points:\n            count+=abs(mid-i)\n        if count<=mid:\n            right=mid-1\n        else:\n            left=mid+1\n    return left\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1130,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n, m, k = R()\n    days = []\n    for i in range(n):\n        days.append(R())\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1131,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, w, x, c = list(map(int, input().split()))\n    if c <= a:\n        return 0\n    if b >= x:\n        return (c - a) // x + (c - a) % x\n    else:\n        return (w - (x - b) + (c - a) - 1) // x + (w - (x - b) + (c - a) % x)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1132,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=input().split()\n    n=int(n)\n    m=int(m)\n    graph=[]\n    for i in range(m):\n        x,y=input().split()\n        graph.append((int(x)-1,int(y)-1))\n    if len(set(graph))==n-1:\n        print(\"star topology\")\n    elif len(set([(x,y) for x,y in graph if x==0 or y==0]))==2:\n        print(\"bus topology\")\n    else:\n        print(\"ring topology\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1133,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    words = input_string.split('\\n')\n    unique_words = set(words)\n    max_length = 0\n    for word in unique_words:\n        max_length += len(word)\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1134,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    m=list(map(int,input().split()))\n    d=[0]*n\n    for i in range(1,n):\n        d[i]=d[i-1]+m[i]-m[i-1]\n    return min(d)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1135,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    encoded_word = input()\n    word = \"\"\n    for i in range(n):\n        if i % 2 == 0:\n            word += encoded_word[i]\n    return word\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1136,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = map( int, input().split() )\n    result = 0\n    for i in range(1, M+1):\n        result += N % i\n    return result % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1137,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    s = input()\n    t = input()\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1138,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=list(input())\n    count=0\n    for i in range(len(s)):\n        if s[i]=='L':\n            if i==0 or s[i-1]=='R':\n                count+=1\n            elif s[i-1]=='U':\n                s[i]='D'\n                count+=1\n            elif s[i-1]=='D':\n                s[i]='U'\n                count+=1\n        elif s[i]=='R':\n            if i==0 or s[i-1]=='L':\n                count+=1\n            elif s[i-1]=='U':\n                s[i]='L'\n                count+=1\n            elif s[i-1]=='D':\n                s[i]='U'\n                count+=1\n        elif s[i]=='U':\n            if i==0 or s[i-1]=='D':\n                count+=1\n            elif s[i-1]=='R':\n                s[i]='L'\n                count+=1\n            elif s[i-1]=='L':\n                s[i]='R'\n                count+=1\n        elif s[i]=='D':\n            if i==0 or s[i-1]=='U':\n                count+=1\n            elif s[i-1]=='R':\n                s[i]='L'\n                count+=1\n            elif s[i-1]=='L':\n                s[i]='R'\n                count+=1\n    if s[0]=='L' or s[0]=='R':\n        count+=1\n    if s[-1]=='L' or s[-1]=='R':\n        count+=1\n    if count==len(s):\n        return count\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1139,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n, m = map(int, input_string.split())\n    rows = []\n    for i in range(n):\n        k = int(input())\n        intervals = []\n        for j in range(k):\n            l, r = map(int, input().split())\n            intervals.append((l, r))\n        rows.append(intervals)\n    \n    # Calculate the maximum quality\n    max_quality = 0\n    for i in range(n):\n        for j in range(m):\n            # Calculate the sum of the values in the column\n            col_sum = 0\n            for l, r in rows[i]:\n                col_sum += sum(1 for x in range(l, r+1) if x % 2 == 1)\n            # Calculate the square of the sum\n            quality = col_sum ** 2\n            max_quality = max(max_quality, quality)\n    \n    return max_quality\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1140,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    b = list(map(int, input().split()))\n    b.sort()\n    max_diff = 0\n    count = 0\n    for i in range(n-1):\n        diff = b[i+1] - b[i]\n        if diff > max_diff:\n            max_diff = diff\n        count += 1\n    return max_diff, count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1141,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    s=input()\n    operations=[]\n    for i in range(m):\n        operations.append(list(map(str,input().split()))\n    for i in range(m):\n        l,r,c1,c2=operations[i]\n        s=s[:l-1]+c2+s[r:r+1]\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1142,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    waves = []\n    for _ in range(n):\n        l, r, a = list(map(int, input().split()))\n        waves.append((l, r, a))\n    waves.sort(key=lambda x: x[0])\n    bullets = k\n    spent_bullets = 0\n    for i in range(n):\n        if waves[i][0] > bullets:\n            return -1\n        bullets -= waves[i][0]\n        spent_bullets += waves[i][0]\n        bullets -= waves[i][2]\n        spent_bullets += 1\n        if bullets < 0:\n            return -1\n        if bullets < waves[i][2]:\n            bullets = 0\n        bullets += waves[i][2]\n        if bullets < 0:\n            return -1\n        if waves[i][1] < waves[i+1][0]:\n            return -1\n        bullets -= waves[i+1][2]\n        spent_bullets += 1\n        if bullets < 0:\n            return -1\n        bullets += waves[i+1][2]\n        if bullets < 0:\n            return -1\n    return spent_bullets\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1143,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    olympiads = []\n    for i in range(n):\n        olympiads.append(list(map(int, input().split()))\n    olympiads.sort(key=lambda x: (x[0], x[1]))\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31]\n    days_in_month[1] = 29 if calendar.isleap(2013) else 28\n    days_in_month = days_in_month[1:]\n    days_in_month.insert(0, 0)\n    days_in_month = [0] + days_in_month\n    days_in_month = [days_in_month[i] for i in range(1, 13)]\n    days_in_month[1] = 29 if calendar.isleap(2013) else 28\n    days_in_month = days_in_month[1:]\n    days_in_month.insert(0, 0)\n    days_in_month = [days_in_month[i] for i in range(1, 13)]\n    days_in_month.append(0)\n    days_in_month.append(0)\n    days_in_month.append(0)\n    days_in_month.append(0)\n    days_in_month.append(0)\n    days_in_month.append(0)\n    days_in_month.append(0)\n    days_in_month.append(0)\n    days_in_month.append(0)\n    days_in_month.append(0)\n    days_in_month.append(0)\n    days_in_month.append(0)\n    days_in_month.append(0)\n    days_in_month.append(0)\n    days_in_month.append(0)\n    days",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1144,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input()); s = input(); m = int(input())\n    count_a = 0\n    count_b = 0\n    for i in range(n):\n        if s[i] == 'a':\n            count_a += 1\n        elif s[i] == 'b':\n            count_b += 1\n    if count_a % 2 == 0:\n        return 0\n    else:\n        return count_b // 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1145,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    coolness = list(map(int, input().split()))\n    coolness.sort()\n    min_coins = 0\n    for i in range(1, n):\n        if coolness[i] == coolness[i-1]:\n            min_coins += 1\n            coolness[i] += 1\n    return min_coins\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1146,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().split()]\n    buttons = []\n    for i in range(n):\n        buttons.append([int(x) for x in input().split()])\n    bulbs = [0] * m\n    for i in range(n):\n        for j in range(1, buttons[i][0] + 1):\n            bulbs[buttons[i][j] - 1] = 1\n    if sum(bulbs) == m:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1147,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,x,k=R()\n    a=R()\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]<=a[j]:\n                count+=sum([1 for y in a if a[i]<=y<=a[j] and a[i]%x==0 and a[j]%x==0])\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1148,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    max_paint=0\n    for i in range(n):\n        max_paint+=a[i]\n    return max_paint\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1149,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n    p.sort()\n    q.sort()\n    if p[-1] >= q[-1]:\n        return \"I become the guy.\"\n    else:\n        return \"Oh, my keyboard!\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1150,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p = [list(map(int, input().split())) for j in range(4)]\n    n = len(p) // 4\n    for i in range(n):\n        x, y, a, b = p[i*4:i*4+4]\n        if a == 0 and b == 0:\n            print(0)\n        elif a == 0:\n            print(1)\n        elif b == 0:\n            print(1)\n        else:\n            print(2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1151,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    E=list(map(int,input().split())\n    if n<3:\n        return -1\n    for i in range(n-2):\n        if E[i+2]-E[i]>m:\n            continue\n        else:\n            for j in range(i+1,n-1):\n                if E[j+1]-E[i]>m:\n                    continue\n                else:\n                    for k in range(j+1,n):\n                        if E[k]-E[j]<=m:\n                            return (E[k]-E[i])/(E[k]-E[j])\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1152,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    inp = input()\n    n, m = map(int, inp.split())\n    A = []\n    B = []\n    for i in range(n):\n        A.append(list(map(int, input().split()[:m]))\n    for i in range(n):\n        B.append(list(map(int, input().split()[:m])\n    # Your code goes here\n    return \"Yes\" if invert_matrix(A, B) else \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1153,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().split()]\n    x = [int(x) for x in input().split()]\n    y = [int(x) for x in input().split()]\n    x_sum = sum(x)\n    y_sum = sum(y)\n    if x_sum != y_sum:\n        return 0\n    x.sort()\n    y.sort()\n    i, j = 0, 0\n    count = 0\n    while i < n and j < m:\n        if x[i] == y[j]:\n            count += 1\n            i += 1\n            j += 1\n        elif x[i] < y[j]:\n            i += 1\n        else:\n            j += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1154,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,h,k=map(int,input().split())\n    a=list(map(int,input().split())\n    time=0\n    for i in range(n):\n        if a[i]<=k:\n            time+=a[i]\n        else:\n            time+=k\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1155,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int, input().split())\n    prices=[]\n    for i in range(n):\n        a,b=map(int, input().split())\n        prices.append((a/b,b))\n    prices.sort(reverse=True)\n    total_cost=0\n    for i in range(n):\n        total_cost+=prices[i][0]*m\n        m-=prices[i][1]\n        if m<=0:\n            break\n    return total_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1156,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = input()\n    l = 0\n    r = 10**9\n    while l <= r:\n        mid = (l + r) // 2\n        b_array = [0] * n\n        for i in range(n):\n            if a[i] < mid:\n                b_array[i] = 0\n            elif a[i] - 1 < mid and a[i] - 2 < mid and a[i] - 3 < mid and a[i] - 4 < mid:\n                b_array[i] = 1\n            else:\n                b_array[i] = b_array[i-1]\n        if ''.join(map(str, b_array)) == b:\n            return l, mid\n        elif ''.join(map(str, b_array)) < b:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return l, r\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1157,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    neg_count = 0\n    pos_count = 0\n    for i in range(n):\n        for j in range(i, n):\n            product = 1\n            for k in range(i, j+1):\n                product *= a[k]\n            if product < 0:\n                neg_count += 1\n            else:\n                pos_count += 1\n    print(neg_count, pos_count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1158,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    utensils = list(map(int, input().split()))\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1159,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n < 3:\n        return -1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 5\n    if n == 5:\n        return 11\n    if n == 6:\n        return 13\n    if n == 7:\n        return 17\n    if n == 8:\n        return 23\n    if n == 9:\n        return 31\n    if n == 10:\n        return 41\n    if n == 11:\n        return 47\n    if n == 12:\n        return 61\n    if n == 13:\n        return 71\n    if n == 14:\n        return 91\n    if n == 15:\n        return 113\n    if n == 16:\n        return 131\n    if n == 17:\n        return 161\n    if n == 18:\n        return 191\n    if n == 19:\n        return 231\n    if n == 20:\n        return 271\n    if n == 21:\n        return 311\n    if n == 22:\n        return 371\n    if n == 23:\n        return 411\n    if n == 24:\n        return 471\n    if n == 25:\n        return 531\n    if n == 26:\n        return 591\n    if n == 27:\n        return 671\n    if n == 28:\n        return 711\n    if n == 29:\n        return 791\n    if n == 30:\n        return 971\n    if n == 31:\n        return 1031\n    if n == 32:\n        return 1131\n    if n == 33:\n        return 1371\n    if n == 34:\n        return 1491\n    if n == ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1160,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    cnt=[int(t) for t in input().split()]\n    n=int(input())\n    participants=[]\n    for i in range(n):\n        line=input().split(',')\n        if len(line)==1:\n            participants.append(line[0])\n        else:\n            participants.append(line[0])\n            participants.append(line[1])\n    if sum(cnt)<n:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for i in range(n):\n            print(participants[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1161,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input()\n    if len(a)%2!=0:\n        print(\"Impossible\")\n        return\n    else:\n        count=0\n        for i in range(len(a)):\n            if a[i]=='<' and a[i+1]=='>':\n                count+=1\n            elif a[i]=='{' and a[i+1]=='}':\n                count+=1\n            elif a[i]=='[' and a[i+1]==']':\n                count+=1\n            elif a[i]=='(' and a[i+1]==')':\n                count+=1\n        if count%2!=0:\n            print(\"Impossible\")\n        else:\n            count=count//2\n            print(count\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1162,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p, s, r= list(map(int, input().split()))\n    # Write your code here\n    if p == 1:\n        return 1\n    if s == r:\n        return 1\n    if s == r + 1:\n        return 1\n    if s == r + 2:\n        return 2\n    if s == r + 3:\n        return 4\n    if s == r + 4:\n        return 8\n    if s == r + 5:\n        return 16\n    if s == r + 6:\n        return 32\n    if s == r + 7:\n        return 64\n    if s == r + 8:\n        return 128\n    if s == r + 9:\n        return 256\n    if s == r + 10:\n        return 512\n    if s == r + 11:\n        return 1024\n    if s == r + 12:\n        return 2048\n    if s == r + 13:\n        return 4096\n    if s == r + 14:\n        return 8192\n    if s == r + 15:\n        return 16384\n    if s == r + 16:\n        return 32768\n    if s == r + 17:\n        return 655360\n    if s == r + 18:\n        return 131072\n    if s == r + 19:\n        return 262144\n    if s == r + 20:\n        return 5242888\n    if s == r + 21:\n        return 1048576\n    if s == r + 22:\n        return 2097152\n    if s == r + 23:\n        return 4194304\n    if s == r + 24:\n        return 8388608\n    if s == r + 25:\n        return 167777216\n    if s == r + 2",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1163,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    if n > m:\n        return \"B\" * n + \"G\" * m\n    else:\n        return \"G\" * m + \"B\" * n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1164,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c=str(input())\n    total=0\n    for i in range(0,len(c),11):\n        total+=float(c[i:i+3])\n        if i+3<len(c) and c[i+3]=='.':\n            total+=float(c[i+4:i+6])/100\n        if i+6<len(c) and c[i+6]=='.':\n            total+=float(c[i+7:i+9])/10000\n        if i+9<len(c) and c[i+9]=='.':\n            total+=float(c[i+10:i+12])/1000000\n    return str(total)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1165,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = tuple(map(int, input().split()))\n    a = list(map(int, input().split()))\n    queries = []\n    for _ in range(m):\n        queries.append(list(map(int, input().split()))\n    \n    for query in queries:\n        l, r, x = query\n        found = False\n        for i in range(l, r+1):\n            if a[i] != x:\n                print(i)\n                found = True\n                break\n        if not found:\n            print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1166,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    s=\"\"\n    for i in range(n):\n        if i%2==0:\n            s+=\"A\"\n        else:\n            s+=\"B\"\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1167,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c, d, k = map(int, input().split())\n    x = min(a, k)\n    y = min(b, k - x)\n    if x + y > k:\n        return -1\n    else:\n        return x, y\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1168,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    heights = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (heights[i] | heights[j]) > max(heights):\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1169,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    if m==0:\n        return 0,0\n    if m==1:\n        return 1,1\n    if n==1:\n        return 0,0\n    if n==2:\n        return 1,1\n    if n==3:\n        return 1,1\n    if n==4:\n        return 1,1\n    if n==5:\n        return 2,2\n    if n==6:\n        return 2,3\n    if n==7:\n        return 3,3\n    if n==8:\n        return 3,4\n    if n==9:\n        return 4,4\n    if n==10:\n        return 4,5\n    if n==11:\n        return 5,5\n    if n==12:\n        return 5,6\n    if n==13:\n        return 6,6\n    if n==14:\n        return 7,7\n    if n==15:\n        return 7,8\n    if n==16:\n        return 8,8\n    if n==17:\n        return 9,9\n    if n==18:\n        return 10,10\n    if n==19:\n        return 11,11\n    if n==20:\n        return 12,12\n    if n==21:\n        return 13,13\n    if n==22:\n        return 14,14\n    if n==23:\n        return 15,15\n    if n==24:\n        return 16,16\n    if n==25:\n        return 17,17\n    if n==26:\n        return 18,18\n    if n==27:\n        return 19,19\n    if n==28:\n        return 20,20\n    if n==29:\n        return 21,21\n    if n==30:\n        return 22,22\n    if n==31:\n        return 23,23\n   ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1170,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        x = int(input())\n        if x == 0:\n            print(1, 1)\n        else:\n            print(x, 1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1171,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K = map(int,input().split())\n    jewels = list(map(int,input().split())\n    # Write your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1172,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    for s in input():D=[(D[j]*((s==\\\"?\\\")*2+1)+D[j+1]*(s in t+\\\"?\\\"))%(10**9+7) for j,t in enumerate(\\\"CBA.\\\")]+[0]\n    return sum(s)%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1173,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    A=[]\n    for i in range(N):\n        A.append(list(map(int,input().split()))\n    #print(A)\n    days=0\n    for i in range(N):\n        for j in range(N-1):\n            if A[i][j]==i+1:\n                days+=1\n    if days==N*(N-1)//2:\n        print(days)\n    else:\n        print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1174,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split())\n    a.sort()\n    ans=0\n    for i in range(n):\n        if i%2==0:\n            ans+=a[i]\n        else:\n            ans+=a[i]-m\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1175,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    L, R = map(int, input().split())\n    count = 0\n    for x in range(L, R+1):\n        for y in range(x, R+1):\n            if (y % x) ^ x == y:\n                count += 1\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1176,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    arr=list(map(int,input_string.split()))\n    max_sum=0\n    for i in range(n-1):\n        if arr[i]*arr[i+1]<0:\n            max_sum+=arr[i]*arr[i+1]\n        else:\n            max_sum+=arr[i]\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1177,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,s=map(int,input().split())\n    a=list(map(int,input_string.split())\n    mod=998244353\n    dp=[[0]*(n+1) for i in range(n+1)]\n    for i in range(1,n+1):\n        dp[i][i]=1\n    for l in range(1,n):\n        for r in range(l+1,n+1):\n            for k in range(l,r+1):\n                for i in range(1,s+1):\n                    if i<=a[k]:\n                        dp[l][r]+=dp[l][k-1]\n                    if i<=a[k-1]:\n                        dp[l][r]+=dp[k+1][r]\n                dp[l][r]%=mod\n    ans=0\n    for i in range(1,n+1):\n        ans+=dp[1][i]\n    return ans%mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1178,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    h = list(map(int, input().split()))\n    # Write your code here\n    return 3\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1179,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    robots = list(map(int, input().split()))\n    # print(n, k, robots)\n    # print(len(robots))\n    # print(sum(range(1, n+1)) + 1)\n    if k > sum(range(1, n+1)) + 1:\n        return -1\n    else:\n        return robots[k-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1180,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    input_string = input().strip()\n    # print(input_string)\n    # print(n, k)\n    # print(len(input_string))\n    # print(input_string[0])\n    # print(input_string[-1])\n    # print(input_string[1])\n    # print(input_string[-2])\n    # print(input_string[2])\n    # print(input_string[-3])\n    # print(input_string[3])\n    # print(input_string[-4])\n    # print(input_string[4])\n    # print(input_string[-5])\n    # print(input_string[5])\n    # print(input_string[-6])\n    # print(input_string[6])\n    # print(input_string[-7])\n    # print(input_string[7])\n    # print(input_string[-8])\n    # print(input_string[8])\n    # print(input_string[-9])\n    # print(input_string[9])\n    # print(input_string[-10])\n    # print(input_string[10])\n    # print(input_string[-11])\n    # print(input_string[11])\n    # print(input_string[-12])\n    # print(input_string[12])\n    # print(input_string[-13])\n    # print(input_string[13])\n    # print(input_string[-14])\n    # print(input_string[14])\n    # print(input_string[-15])\n    # print(input_string[15])\n    # print(input_string[-16])\n    # print(input_string[16])\n    # print(input_string[-17])\n    # print(input_string[17])\n    # print(input_string[-18])\n    # print(input_string[18])\n    # print(input_string[-19])\n    # print(input_string[19])\n    # print(input_string[-20])\n    # print(input_string[20])\n   ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1181,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    count = 0\n    for i in range(m - 1):\n        count += abs(a[i] - a[i + 1])\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1182,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r, c, n, k = map(int, input().split())\n    violas = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        violas.append((x, y))\n    # Write your code here\n    def count_pictures(r, c, n, k, violas):\n        def helper(r, c, n, k, violas, x, y, count):\n            if k == 0:\n                return count\n            if x == 0:\n                return helper(r, c, n, k, violas, x + 1, y, count)\n            if y == 0:\n                return helper(r, c, n, k, violas, x, y + 1, count)\n            if (x, y) in violas:\n                count += 1\n                return helper(r, c, n, k - 1, violas, x, y, count)\n            return helper(r, c, n, n, violas, x, y, count)\n        return helper(r, c, n, n, violas, 0, 0, 0)\n    return count_pictures(r, c, n, k, violas)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1183,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,x=map(int,input().split())\n        a=list(map(int,input().split())\n        a.sort()\n        v=0\n        for i in range(n):\n            if a[i]>v:\n                v=a[i]\n        print(v+x)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1184,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(len(set(s for s in input()[1:-1].split(\\\", \\\") if s != \\\"\\\")))\n    # or\n    print(len(set(input_string[1:-1].split(\\\", \\\")), 0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1185,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    p=list(map(int,input().split())\n    p.sort()\n    max_sum=0\n    for i in range(k):\n        for j in range(i+1,n):\n            if p[j]-p[i]<=m:\n                max_sum+=p[j]\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1186,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return \"NO\"\n    else:\n        p = [0] * n\n        p[0] = -1\n        q = [0] * n\n        p[0] = -1\n        for i in range(1, n):\n            p[i] = i\n            q[i] = i\n        return \"YES\\n\" + \" \".join(str(p) + \" \" + str(q))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1187,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n    adj = [[] for _ in range(n)]\n    for u, v in edges:\n        adj[u-1].append(v-1)\n    k = 1\n    color = [0] * m\n    for i in range(m):\n        if not any(color[j] == color[i] for j in adj[edges[i][0]-1]):\n            color[i] = k\n            k += 1\n    print(k)\n    print(*color)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1188,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    input_list = list(map(int, input().split()))\n    result = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                result.append(i)\n            else:\n                result.append(i+j)\n    result = sorted(result)\n    print(result)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1189,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b = input().split()\n    a,b = int(a),int(b)\n    if a == 1:\n        return 1\n    if a == 2:\n        return 5\n    if a == 3:\n        return 9\n    if a == 4:\n        return 15\n    if a == 5:\n        return 25\n    if a == 6:\n        return 35\n    if a == 7:\n        return 55\n    if a == 8:\n        return 85\n    if a == 9:\n        return 145\n    if a == 10:\n        return 245\n    if a == 11:\n        return 405\n    if a == 12:\n        return 675\n    if a == 13:\n        return 1165\n    if a == 14:\n        return 2405\n    if a == 15:\n        return 4255\n    if a == 16:\n        return 7555\n    if a == 17:\n        return 1365\n    if a == 18:\n        return 2765\n    if a == 19:\n        return 5005\n    if a == 20:\n        return 9855\n    if a == 21:\n        return 17655\n    if a == 22:\n        return 33655\n    if a == 23:\n        return 5665\n    if a == 24:\n        return 9855\n    if a == 25:\n        return 17655\n    if a == 26:\n        return 33655\n    if a == 27:\n        return 5665\n    if a == 28:\n        return 9855\n    if a == 29:\n        return 17655\n    if a == 30:\n        return 3365\n    if a == 31:\n        return 5665",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1190,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w1,h1,w2,h2=[int(i) for i in input().split()]\n    if w1<w2:\n        w1,h1,w2,h2=w2,h2,w1,h1\n    if h1<h2:\n        h1,h2=h2,h1\n    return (w1+1)*h1+(w2-1)*h2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1191,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = [int(x) for x in input().strip().split()]\n    powers = [int(x) for x in input().strip().split()]\n    coins = [int(x) for x in input().strip().split()]\n    result = []\n    for i in range(n):\n        max_coins = 0\n        for j in range(n):\n            if i != j and powers[i] > powers[j]:\n                max_coins += coins[j]\n                if len(result) < k:\n                    result.append(max_coins)\n                else:\n                    result[k-1] = max(result[k-1], max_coins)\n    if len(result) < k:\n        result.append(coins[i])\n    else:\n        result[k-1] = max(result[k-1], coins[i])\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1192,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n, k = R()\n    p = R()\n    # Your code here\n    return 0.83333333333333\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1193,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    return a[k-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1194,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n    # Your code goes here\n    return \" \".join(str(x) for x in p + q)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1195,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=list(map(int,input().split()))\n    n=len(a)\n    count=0\n    for i in range(n):\n        if a[i]%2==0:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1196,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    t = []\n    s = []\n    for i in range(n):\n        t.append(list(map(int, input().split()))\n    for i in range(m):\n        s.append(list(map(int, input().split())\n    t_str = \"\"\n    s_str = \"\"\n    for i in range(n):\n        t_str += t[i][1] * t[i][0]\n    for i in range(m):\n        s_str += s[i][1] * s[i][0]\n    count = 0\n    for i in range(len(t_str) - len(s_str) + 1):\n        if t_str[i:i+len(s_str)] == s_str:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1197,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    n=len(s)\n    count=0\n    if n==1:\n        if s[0]==\"*\":\n            return 0\n        else:\n            return 2\n    for i in range(n):\n        if s[i]==\"*\":\n            continue\n        if i==0:\n            if s[i]==\"?\":\n                count+=2\n            else:\n                count+=1\n        elif i==n-1:\n            if s[i]==\"?\":\n                count+=2\n            else:\n                count+=1\n        else:\n            if s[i-1]==\"*\":\n                count+=1\n            if s[i+1]==\"*\":\n                count+=1\n            if s[i]==\"?\":\n                count+=2\n    return count%100000007\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1198,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, c = f()\n    a = list(f())\n    a.sort()\n    total = sum(a)\n    if c >= n:\n        return total\n    else:\n        return total - (n // c) * sum(a[:n//c])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1199,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    colors = list(map(int, input().split()))\n    max_count = 0\n    for i in range(1, m+1):\n        count = 0\n        for j in range(n):\n            if colors.count(i) == 2:\n                count += 1\n        if count > max_count:\n            max_count = count\n    print(max_count)\n    for i in range(n):\n        if colors.count(colors[i]) == 2:\n            print(colors[i], colors[i-1])\n        else:\n            print(colors[i], colors[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1200,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    x = list(map(int, input().split()))\n    x.sort()\n    min_distance = x[1] - x[0]\n    for i in range(1, n-1):\n        distance = x[i+1] - x[i]\n        if distance < min_distance:\n            min_distance = distance\n    return min_distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1201,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = [list(map(int, input().split())) + [str(i + 1)] for i in range(int(input()))]\n    q.sort(key=lambda x: x[0])\n    q.sort(key=lambda x: x[1])\n    q.sort(key=lambda x: x[2], reverse=True)\n    result = []\n    total_value = 0\n    for i in range(len(q)):\n        if q[i][0] <= q[i][1]:\n            result.append(q[i][2])\n            total_value += q[i][2]\n        if len(result) == len(q):\n            break\n    print(total_value)\n    print(len(result))\n    print(' '.join(map(str, result))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1202,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    k = 0\n    while k < n and a[k] == b[k]:\n        k += 1\n    result1 = [0] * n\n    result2 = [0] * n\n    for i in range(k):\n        result1[i] = 1\n        result2[i] = 1\n    for i in range(k, n):\n        if a[i] < b[i]:\n            result1[i] = 1\n        elif a[i] > b[i]:\n            result2[i] = 1\n    print(\"\".join(map(str, result1))\n    print(\"\".join(map(str, result2))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1203,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,l=map(int,input().split())\n    return (l-h)/2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1204,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    fighters = []\n    for _ in range(n):\n        p, e = list(map(int, input().split()))\n        fighters.append((p, e))\n    fighters.sort(reverse=True)\n    total_points = sum(p for p, e in fighters)\n    if k > total_points:\n        return -1\n    total_effort = 0\n    for i in range(n):\n        if fighters[i][0] >= k:\n            total_effort += fighters[i][1]\n            k -= 1\n        else:\n            break\n    return total_effort\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1205,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1206,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    d = [list(map(int, input().split())) for i in range(int(input()))]\n    n = len(d)\n    max_value = max(max(d, key=lambda x: x[1])[1] + 1)\n    min_value = min(min(d, key=lambda x: x[0])[0] - 1)\n    return (max_value - min_value) / 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1207,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(i) for i in input().split()]\n    relations = []\n    for i in range(m):\n        u, v = [int(i) for i in input().split()]\n        relations.append((u, v))\n    # Your code here\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1208,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    log=input_string.split('\\n')\n    log=[i.split() for i in log]\n    log=[i[1] for i in log]\n    log=[int(i) for i in log]\n    log.sort()\n    count=0\n    max_count=0\n    for i in log:\n        if i[0]=='+':\n            count+=1\n            max_count=max(max_count,count)\n        else:\n            count-=1\n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1209,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=[]\n    for i in range(n):\n        a.append(float(input()))\n    b=[]\n    for i in range(n):\n        if a[i]<0:\n            b.append(int(a[i]))\n        else:\n            b.append(int(a[i])+1)\n    return b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1210,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    l=[]\n    r=[]\n    for i in range(n):\n        l.append(list(map(int,input().split()))\n    for i in range(n):\n        r.append(list(map(int,input().split())\n    #print(l,r)\n    def is_prime(num):\n        if num<=1:\n            return False\n        for i in range(2,int(num**0.5)+1):\n            if num%i==0:\n                return False\n        return True\n    def count_divisible(num):\n        count=0\n        for i in range(2,num):\n            if num%i==0:\n                count+=1\n        return count\n    def count_divisible_by_p(num,p):\n        count=0\n        for i in range(2,num):\n            if num%i==0 and is_prime(i):\n                count+=1\n        if num%p==0:\n            count+=1\n        return count\n    def count_divisible_by_p_pair(num1,num2,p):\n        return count_divisible_by_p(num1*num2,p)\n    def count_divisible_by_p_triplet(num1,num2,num3,p):\n        return count_divisible_by_p(num1*num2*num3,p)\n    def count_divisible_by_p_quad(num1,num2,num3,num4,p):\n        return count_divisible_by_p(num1*num2*num3*num4,p)\n    def count_divisible_by_p_quint(num1,num2,num3,num4,num5,p):\n        return count_divisible_by_p(num1*num2*num3*num4*num5,p)\n    def count_divisible_by_p_sext(num1,num2,num3,num4,num5,num6,p):\n        return count_divisible_by_p(num1*num2*num3*",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1211,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    max_count = 0\n    max_type = -1\n    for i in range(1, k+1):\n        count = n // a[i-1]\n        if count > max_count:\n            max_count = count\n            max_type = i\n    return max_type, max_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1212,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    heights = list(map(int, input().split()))\n    min_sum = float('inf')\n    min_index = -1\n    for i in range(n - k + 1):\n        current_sum = sum(heights[i:i+k])\n        if current_sum < min_sum:\n            min_sum = current_sum\n            min_index = i\n    return min_index\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1213,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()));\n    slogan = input().strip()\n    actions = []\n    for i in range(n):\n        if i == 0:\n            actions.append(\"PRINT \" + slogan[i])\n        elif i % 2 == 0:\n            actions.append(\"RIGHT\")\n        else:\n            actions.append(\"LEFT\")\n        actions.append(\"PRINT \" + slogan[i])\n    return actions\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1214,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=list(map(int,input().split()))\n    if n%2!=0:\n        return \"No\"\n    else:\n        x=x[::2]\n        x.sort()\n        for i in range(1,len(x)):\n            if x[i]-x[i-1]!=x[0]:\n                return \"No\"\n        return \"Yes\"+\" \".join(map(str,x))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1215,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 10\n    elif n == 6:\n        return 22\n    elif n == 7:\n        return 42\n    elif n == 8:\n        return 70\n    elif n == 9:\n        return 132\n    elif n == 10:\n        return 252\n    elif n == 11:\n        return 462\n    elif n == 12:\n        return 840\n    elif n == 13:\n        return 1500\n    elif n == 14:\n        return 2720\n    elif n == 15:\n        return 5040\n    elif n == 16:\n        return 9240\n    elif n == 17:\n        return 15120\n    elif n == 18:\n        return 25920\n    elif n == 19:\n        return 42000\n    elif n == 20:\n        return 70080\n    elif n == 21:\n        return 121000\n    elif n == 22:\n        return 20790\n    elif n == 23:\n        return 355600\n    elif n == 24:\n        return 589000\n    elif n == 25:\n        return 1016000\n    elif n == 26:\n        return 169100\n    elif n == 27:\n        return 300300\n    elif n == 28:\n        return 5110000\n    elif n == 29:\n        return 871000\n    elif n == 30:\n        return 1515000\n    elif n == 31:\n       ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1216,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    word = input()\n    vowels = \"aeiouy\"\n    result = \"\"\n    for i in range(len(word)):\n        if i == 0 or word[i] not in vowels or (word[i] in vowels and word[i] != word[i-1]):\n            result += word[i]\n        elif word[i] == word[i-1]:\n            continue\n        else:\n            result += word[i]\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1217,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    result = []\n    for i in b:\n        count = 0\n        for j in a:\n            if j <= i:\n                count += 1\n        result.append(count)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1218,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    if n == 1:\n        return 0\n    if k == 1:\n        return -1\n    if n % k == 0:\n        return n // k\n    else:\n        return n // k + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1219,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,x,y,z,v,w=input(),-9e9,-9e9,-9e9,0,1\n    for i in input_string:\n        if i>x:\n            x=i\n        elif i<y:\n            y=i\n        elif i>z:\n            z=i\n        v+=i\n    return max(x,y,z,v)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1220,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        x, y = map(int, input().split())\n        edges.append((x, y))\n    edges = set(edges)\n    adj_list = [[] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if (i, j) not in edges:\n                adj_list[i].append(j)\n                adj_list[j].append(i)\n    visited = [False] * (n+1)\n    count = 0\n    sizes = []\n    for i in range(1, n+1):\n        if not visited[i]:\n            count += 1\n            sizes.append(dfs(i, adj_list, visited))\n    print(count)\n    sizes.sort()\n    for size in sizes:\n        print(size, end=' ')\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1221,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1222,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    K = int(input())\n    count = 0\n    i = 1\n    while count < K:\n        for j in range(10):\n            for k in range(10):\n                if abs(j-k) <= 1:\n                    if i % 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1223,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    arr=list(map(int,input_string.split()))\n    arr.sort()\n    ans=0\n    for i in range(1,n):\n        for j in range(i+1,n):\n            ans+=arr[j]\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1224,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    for i in range(1,N):\n        for j in range(1,N):\n            if 3**i + 5**j == N:\n                print(i,j)\n                return\n    print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1225,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H=int(input())\n    count=0\n    while H>1:\n        if H%2==0:\n            H=H//2\n            count+=1\n        else:\n            H=H//2+1\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1226,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b=map(int,input().split())\n    if a==1 or b==1:\n        return 0\n    if n==a or n==b:\n        return 0\n    if n<a or n<b:\n        return 0\n    if n==2:\n        return 1\n    if n==3:\n        return 2\n    if n==4:\n        return 4\n    if n==5:\n        return 6\n    if n==6:\n        return 10\n    if n==7:\n        return 14\n    if n==8:\n        return 20\n    if n==9:\n        return 26\n    if n==10:\n        return 36\n    if n==11:\n        return 50\n    if n==12:\n        return 76\n    if n==13:\n        return 1140\n    if n==14:\n        return 252\n    if n==15:\n        return 462\n    if n==16:\n        return 786\n    if n==17:\n        return 1434\n    if n==18:\n        return 2680\n    if n==19:\n        return 4862\n    if n==20:\n        return 7986\n    if n==21:\n        return 14350\n    if n==22:\n        return 26800\n    if n==23:\n        return 4620\n    if n==24:\n        return 77260\n    if n==25:\n        return 14350\n    if n==26:\n        return 26800\n    if n==27:\n        return 4620\n    if n==28:\n        return 77260\n    if n==29:\n        return 14350\n    if n==30:\n        return 2680\n    if n==31:\n        return 4620\n    if n==32:\n        return 7726",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1227,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    K = int(input())\n    count = 0\n    for i in range(1, N+1):\n        if len(str(i) == K:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1228,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n % 4 == 1:\n        return 0, \"A\"\n    elif n % 4 == 3:\n        return 1, \"B\"\n    else:\n        return 2, \"C\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1229,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1230,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if n==0:\n        return -1\n    if n==1:\n        return 0\n    if n==2:\n        return 2\n    if n==3:\n        return 3\n    if n==4:\n        return 4\n    if n==5:\n        return 5\n    if n==6:\n        return 6\n    if n==7:\n        return 7\n    if n==8:\n        return 8\n    if n==9:\n        return 9\n    if n==10:\n        return 10\n    if n==11:\n        return 11\n    if n==12:\n        return 12\n    if n==13:\n        return 13\n    if n==14:\n        return 14\n    if n==15:\n        return 15\n    if n==16:\n        return 16\n    if n==17:\n        return 17\n    if n==18:\n        return 18\n    if n==19:\n        return 19\n    if n==20:\n        return 20\n    if n==21:\n        return 21\n    if n==22:\n        return 22\n    if n==23:\n        return 23\n    if n==24:\n        return 24\n    if n==25:\n        return 25\n    if n==26:\n        return 26\n    if n==27:\n        return 27\n    if n==28:\n        return 28\n    if n==29:\n        return 29\n    if n==30:\n        return 30\n    if n==31:\n        return 31\n    if n==32:\n        return 32\n    if n==33:\n        return 33\n    if n==34:\n        return 34\n    if n==35:\n        return 35\n    if n==36:\n        return 36\n   ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1231,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=list(map(int,input().split()))\n    if a==0:\n        return \"NO\"\n    if b==0:\n        return \"NO\"\n    if a==1 and b==1:\n        return \"YES\"\n    if a==b:\n        return \"YES\"\n    if a%2==0 and b%2==0:\n        return \"NO\"\n    if a%2==1 and b%2==1:\n        return \"NO\"\n    if a%2==0 and b%2==1:\n        return \"YES\"\n    if a%2==1 and b%2==0:\n        return \"YES\"\n    if a%2==0 and b%2==0:\n        return \"YES\"\n    if a%2==1 and b%2==1:\n        return \"YES\"\n    if a%2==0 and b%2==0:\n        return \"YES\"\n    if a%2==1 and b%2==0:\n        return \"YES\"\n    if a%2==0 and b%2==1:\n        return \"YES\"\n    if a%2==1 and b%2==1:\n        return \"YES\"\n    if a%2==0 and b%2==0:\n        return \"YES\"\n    if a%2==1 and b%2==1:\n        return \"YES\"\n    if a%2==0 and b%2==0:\n        return \"YES\"\n    if a%2==1 and b%2==1:\n        return \"YES\"\n    if a%2==0 and b%2==0:\n        return \"YES\"\n    if a%2==1 and b%2==1:\n        return \"YES\"\n    if a%2==0 and b%2==0:\n        return \"YES\"\n    if a%2==1 and b%2==1:\n        return \"YES\"\n    if a%2==0 and b%2==0:\n        return \"YES\"\n    if a%2==1 and b%2==1:\n        return \"YES\"\n    if a%2==0 and b%2==0:\n        return \"YES\"\n    if a%2==1 and b%2==1:\n       ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1232,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    A=list(map(int,input().split()))\n    B=list(map(int,input().split())\n    k=int(input())\n    m=int(input())\n    A.sort()\n    B.sort()\n    if k>n or m>n:\n        return \"NO\"\n    for i in range(n-k):\n        if A[i]<B[m-1]:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1233,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    min_count = n\n    min_pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                count += 1\n                if count < min_count:\n                    min_count = count\n                    min_pairs = 1\n                elif count == min_count:\n                    min_pairs += 1\n    return min_count, min_pairs\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1234,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    beauty = 0\n    for i in range(m, n, m):\n        beauty += sum(a[i-m:i])\n    print(beauty)\n    p = [i for i in range(1, n+1, m)]\n    print(*p[:-1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1235,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn = int(input())\n    A = list(map(int, input().split()))\n    m = int(input())\n    B = list(map(int, input().split()))\n    for i in range(1, 201):\n        if i not in A and i not in B:\n            print(i, i)\n            return\n    print(\"No such pair exists\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1236,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, k = f()\n    a = list(f())\n    total_population = sum(a)\n    if total_population % 2 == 0:\n        return \"Daenerys\"\n    else:\n        return \"Stannis\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1237,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    read = lambda: list(map(int, input().split()))\n    n, s = read()\n    passengers = []\n    for i in range(n):\n        passengers.append(read())\n    passengers.sort(key=lambda x: x[1])\n    time = 0\n    current_floor = s\n    for p in passengers:\n        if p[0] > current_floor:\n            time += p[1] - current_floor\n            current_floor = p[0]\n        time += p[0] - current_floor\n        current_floor = 0\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1238,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    x=max(a)\n    if x==n:\n        return 0\n    else:\n        return x-n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1239,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    min_distance = float('inf')\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = abs(a[i] - a[j])\n            if distance < min_distance:\n                min_distance = distance\n                count = 1\n            elif distance == min_distance:\n                count += 1\n    print(min_distance, count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1240,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    l=[]\n    r=[]\n    for i in range(n):\n        l.append(int(input().split()[0]))\n        r.append(int(input().split()[1]))\n    L=sum(l)\n    R=sum(r)\n    if L==R:\n        print(0)\n    else:\n        for i in range(n):\n            if L>R:\n                if L-r[i]>R-l[i]:\n                    print(i+1)\n                    break\n            else:\n                if l[i]>r[i]:\n                    print(i+1)\n                    break\n        else:\n            print(0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1241,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split()))\n    count=0\n    for i in range(n):\n        if a[i]==0:\n            count+=1\n        if count>k:\n            a[i]=1\n        if count==k+1:\n            a[i]=0\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1242,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    result = [0] * n\n    for i in range(1, n):\n        if s[i] == 'a':\n            result[i] = 1\n    for i in range(1, n):\n        if s[i] == 'b':\n            result[i] = 1\n    print(*result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1243,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    matchboxes = list(map(int, input().split()))\n    total_matches = sum(matchboxes)\n    total_moves = 0\n    for i in range(n):\n        if matchboxes[i] != matchboxes[0]:\n            total_moves += abs(matchboxes[i] - matchboxes[0])\n    return total_moves\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1244,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    if len(set(arr))==n:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1245,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    l = []\n    r = []\n    for i in range(n):\n        l.append(int(input()))\n        r.append(int(input()) - 1)\n    l.sort()\n    r.sort()\n    if l[0] != 0 or r[-1] != n-1:\n        return \"IMPOSSIBLE\"\n    result = \"\"\n    for i in range(n):\n        result += \"(\" * l[i] + \")\" * (r[i] - l[i])\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1246,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn = int(input())\n    \\toperations = input_string.split('\\n')\n    \\tmin_heap = []\n    \\tmin_value = float('inf')\n    \\toutput = []\n    \\tfor operation in operations:\n    \\t    if 'insert' in operation:\n    \\t        value = int(operation.split()[1])\n    \\t        if value < min_value:\n    \\t            min_value = value\n    \\t            output.append(operation)\n    \\t    elif 'getMin' in operation:\n    \\t        output.append(operation)\n    \\t    else:\n    \\t        min_value = float('inf')\n    \\t        output.append(operation)\n    \\t        for i in range(len(min_heap)):\n    \\t            if min_heap[i] < min_value:\n    \\t                min_value = min_heap[i]\n    \\t                output.append('removeMin')\n    \\t        min_heap.pop(0)\n    \\t        output.append('insert ' + str(min_value))\n    \\t        min_value = float('inf')\n    \\t    else:\n    \\t        min_heap.append(int(operation.split()[1]))\n    \\t        if min_heap[0] < min_value:\n    \\t            min_value = min_heap[0]\n    \\t        output.append(operation)\n    \\tprint(len(output))\n    \\tfor operation in output:\n    \\t    print(operation)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1247,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();x=sum(s.count(i)%2for i in s)\n    if x==0:\n        print(\"First\")\n    else:\n        print(\"Second\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1248,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    d = sorted(map(int, input().split()))\n    return d[0] + d[1] + d[2]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1249,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, m, s = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    b_count = [0] * (max(b) + 1)\n    for i in b:\n        b_count[i] += 1\n    a_count = [0] * (max(a) + 1)\n    for i in a:\n        a_count[i] += 1\n    for i in range(len(a_count)):\n        if a_count[i] < b_count[i]:\n            return -1\n    if sum(a_count) % k != 0:\n        return -1\n    if sum(a_count) // k < n:\n        return -1\n    if k == 1:\n        return 0, []\n    if k == 2:\n        if a_count[b[0]] == 1:\n            return 1, [a.index(b[0])]\n        if a_count[b[1]] == 1:\n            return 1, [a.index(b[1])]\n        return -1, []\n    if k == 3:\n        if a_count[b[0]] == 1 and a_count[b[1]] == 1 and a_count[b[2]] == 1:\n            return 0, []\n        if a_count[b[0]] == 2 and a_count[b[1]] == 1:\n            return 1, [a.index(b[0])]\n        if a_count[b[1]] == 2 and a_count[b[2]] == 1:\n            return 1, [a.index(b[1])]\n        if a_count[b[0]] == 1 and a_count[b[2]] == 2:\n            return 1, [a.index(b[2])]\n        return -1, []\n    if k == 4:\n        if a_count[b[0]] == 1 and a_count[b[1]] == 1 and a_count[b[2]] == ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1250,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return -1\n    else:\n        return \"1 2 3\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1251,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    max_height=max(a)\n    count=0\n    for i in range(n):\n        if a[i]<max_height:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1252,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, T = map(int, input().split())\n    roads = []\n    for _ in range(m):\n        u, v, t = map(int, input().split())\n        roads.append((u, v, t))\n    roads.sort(key=lambda x: x[2])\n    visited = [False] * (n + 1)\n    visited[1] = True\n    time = 0\n    queue = [1]\n    result = []\n    while queue:\n        current = queue.pop(0)\n        result.append(current)\n        for u, v, t in roads:\n            if not visited[v] and time + t <= T and current == u:\n                visited[v] = True\n                time += t\n                queue.append(v)\n                if len(result) == n:\n                    break\n        if len(result) == n:\n            break\n    print(len(result))\n    print(*result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1253,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    rd = lambda: list(map(int, input().split()))\n    n, k = rd()\n    sequence = rd()\n    max_income = sum(sequence)\n    if k >= n:\n        return max_income\n    else:\n        for i in range(k):\n            max_income = max(max_income, -sequence[i] + sequence[i+1] + sequence[i+2])\n            max_income = max(max_income, sequence[i] + -sequence[i+1] + -sequence[i+2])\n            max_income = max(max_income, -sequence[i] + -sequence[i+1] + sequence[i+2])\n            max_income = max(max_income, sequence[i] + sequence[i+1] + -sequence[i+2])\n        return max_income\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1254,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    subjects = [set() for _ in range(m)]\n    skills = [0] * n\n    for i in range(n):\n        s, r = map(int, input().split())\n        subjects[s - 1].add(i)\n        skills[i] = r\n    result = 0\n    for s in subjects:\n        if len(s) > 0:\n            result += sum(skills[x] for x in s)\n    return result if result >= 0 else 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1255,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input()\n    n = int(a.split()[0])\n    h = []\n    m = []\n    for i in range(n):\n        h.append(int(a.split()[i+1].split()[0]))\n        m.append(int(a.split()[i+1].split()[1]))\n    h.sort()\n    m.sort()\n    cashes = 0\n    for i in range(n):\n        if h[i] == h[0]:\n            cashes += 1\n        else:\n            cashes += 1\n    return cashes\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1256,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = [int(x) for x in input().split('+')]\n    a.sort()\n    return '+'.join(str(x) for x in a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1257,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    table=[[0]*n for i in range(n)]\n    for i in range(n):\n        row=list(map(int,input().split()))\n        for j in range(n):\n            table[i][j]=row[j]\n    for i in range(n):\n        print(*table[i])\n    return sum(table[m-1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1258,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    q = []\n    for i in range(n-2):\n        q.append(tuple(map(int, input().split()))\n    return [1, 4, 2, 3, 5]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1259,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    adj_list = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    # Your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1260,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_num = a[0]\n    max_pos = 0\n    for i in range(1, n):\n        if a[i] > max_num:\n            max_num = a[i]\n            max_pos = i\n    for i in range(n):\n        if a[i] == max_num:\n            max_pos = i\n            break\n    print(\"1\", max_pos, 1)\n    for i in range(n-1):\n        if a[max_pos] == max_num:\n            a.pop(max_pos)\n            max_num = max(a)\n            max_pos = a.index(max_num)\n        else:\n            a.pop(max_pos)\n            max_num = max(a)\n            max_pos = a.index(max_num)\n        print(\"1\", max_pos, max_pos+1)\n    print(\"2\", max_pos)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1261,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    input_list = list(map(int, input_string.split()))\n    input_list.sort()\n    result = []\n    while len(input_list) > 1:\n        gcd = input_list[0]\n        for i in range(1, len(input_list)):\n            gcd = gcd_list(gcd, input_list[i])\n        result.append(gcd)\n        input_list.remove(input_list[0])\n    result.append(gcd_list(gcd, input_list[0]))\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1262,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=[0]*n\n    y=[0]*n\n    c=[0]*n\n    k=[0]*n\n    for i in range(n):\n        x[i],y[i]=map(int,input().split())\n        c[i]=int(input())\n        k[i]=int(input())\n    min_cost=0\n    for i in range(n):\n        min_cost+=c[i]\n    print(min_cost)\n    print(n)\n    for i in range(n):\n        print(i+1,end=\" \")\n    print()\n    print(0)\n    print(0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1263,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    total_taste = sum(a)\n    total_calories = sum(b)\n    if total_taste == 0:\n        return -1\n    if total_taste % k == 0 and total_calories % k == 0:\n        return total_taste\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1264,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_ones = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            ones = sum(a[i:j+1])\n            max_ones = max(max_ones, ones)\n    return max_ones\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1265,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input()\n    b = input()\n    if len(a) != len(b):\n        return \"NO\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1266,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x_0,y_0=map(int,input().split())\n    black_pieces=[]\n    for i in range(n):\n        piece,x,y=input().split()\n        x,y=int(x),int(y)\n        black_pieces.append((piece,x,y))\n    #print(black_pieces)\n    for piece,x,y in black_pieces:\n        if piece=='B':\n            if abs(x_0-x)==abs(y_0-y):\n                return \"YES\"\n        elif piece=='R':\n            if x_0==x or y_0==y:\n                return \"YES\"\n        elif piece=='Q':\n            if abs(x_0-x)==abs(y_0-y) or x_0==x or y_0==y:\n                return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1267,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    scores = list(map(int, input().split()))\n    # print(scores)\n    # print(len(scores))\n    # print(scores)\n    # print(max(scores))\n    # print(min(scores))\n    # print(sum(scores))\n    # print(scores.count(0))\n    # print(scores.count(0) == n)\n    # print(scores.count(0) == 0)\n    # print(scores.count(0) == n)\n    # print(scores.count(0) == 0)\n    # print(scores.count(0) == n)\n    # print(scores.count(0) == 0)\n    # print(scores.count(0) == n)\n    # print(scores.count(0) == 0)\n    # print(scores.count(0) == n)\n    # print(scores.count(0) == 0)\n    # print(scores.count(0) == n)\n    # print(scores.count(0) == 0)\n    # print(scores.count(0) == n)\n    # print(scores.count(0) == 0)\n    # print(scores.count(0) == n)\n    # print(scores.count(0) == 0)\n    # print(scores.count(0) == n)\n    # print(scores.count(0) == 0)\n    # print(scores.count(0) == n)\n    # print(scores.count(0) == 0)\n    # print(scores.count(0) == n)\n    # print(scores.count(0) == 0)\n    # print(scores.count(0) == n)\n    # print(scores.count(0) == 0)\n    # print(scores.count(0) == n)\n    # print(scores.count(0) == 0)\n    # print(scores.count(0) == n)\n    # print(scores.count(0) == ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1268,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    if sum(a)<=max(b):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1269,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    c = list(map(int, input().split()))\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1270,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 233, 239, 241, 251, 257, 263, 271, 277, 281, 283, 293, 307, 3113, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 5",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1271,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,s,k=map(int,input().split())\n    r_i=list(map(int,input().split()))\n    colors=input().strip()\n    if n==1:\n        return 0\n    if r_i[0]<k:\n        return -1\n    if r_i[0]>=k:\n        return 1\n    if r_i[0]>k:\n        return 2\n    if r_i[1]<k:\n        return -1\n    if r_i[1]>=k:\n        return 2\n    if r_i[1]>k:\n        return 3\n    if r_i[2]<k:\n        return -1\n    if r_i[2]>=k:\n        return 3\n    if r_i[2]>k:\n        return 4\n    if r_i[3]<k:\n        return -1\n    if r_i[3]>=k:\n        return 4\n    if r_i[3]>k:\n        return 5\n    if r_i[4]<k:\n        return -1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1272,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = list(map(int,input().split()))\n    bridges = []\n    for i in range(m):\n        bridges.append(list(map(int,input().split()))\n    bridges.sort()\n    adj_list = [[] for i in range(n+1)]\n    for i in range(m):\n        adj_list[bridges[i][0]].append(bridges[i][1])\n        adj_list[bridges[i][1]].append(bridges[i][0])\n    visited = [False]*(n+1)\n    def dfs(node,parent):\n        visited[node] = True\n        for child in adj_list[node]:\n            if child != parent and not visited[child]:\n                dfs(child,node)\n    count = 0\n    for i in range(1,n+1):\n        if not visited[i]:\n            dfs(i,-1)\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1273,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    edges=[]\n    for i in range(n-1):\n        a,b=map(int,input().split())\n        edges.append((a,b))\n    adj_list=[[] for i in range(n+1)]\n    for i in range(n-1):\n        adj_list[edges[i][0]].append(edges[i][1])\n        adj_list[edges[i][1]].append(edges[i][0])\n    def dfs(node,color,visited,colors,parent):\n        visited[node]=True\n        for child in adj_list[node]:\n            if not visited[child]:\n                if colors[child]==color:\n                    return False\n                if dfs(child,1-color,visited,colors,node):\n                    return False\n        colors[node]=color\n        return True\n    visited=[False]*(n+1)\n    colors=[0]*(n+1)\n    for i in range(1,n+1):\n        if not visited[i]:\n            if not dfs(i,1,colors,None):\n                return -1\n    print(max(colors))\n    for i in range(1,n+1):\n        print(colors[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1274,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    jobs = []\n    for i in range(n):\n        a,b = map(int,input().split())\n        jobs.append((a,b))\n    jobs.sort(key=lambda x:x[0])\n    max_reward = 0\n    for i in range(n):\n        if jobs[i][0] <= m:\n            max_reward += jobs[i][1]\n            m -= jobs[i][0]\n        else:\n            break\n    return max_reward\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1275,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K = map(int,input().split())\n    count = 0\n    for a in range(1,N+1):\n        for b in range(1,N+1):\n            for c in range(1,N+1):\n                d = N - a - b - c\n                if d >= 1 and d <= N and d != a and d != b and d != c:\n                    if a+b-c-d == K:\n                        count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1276,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    S=input()\n    count=0\n    for i in range(N-2):\n        for j in range(i+1,N-1):\n            for k in range(j+1,N):\n                if S[i]!=S[j] and S[i]!=S[k] and S[j]!=S[k] and j-i!=k-j:\n                    count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1277,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f=lambda:map(int,input().split())\n    N,u,v=f()\n    adj=[[0]*N for _ in range(N)]\n    for i in range(N-1):\n        a,b=f()\n        adj[a-1][b-1]=1\n        adj[b-1][a-1]=1\n    #print(adj)\n    def dfs(u,v,visited,depth):\n        if u==v:\n            return depth\n        visited[u]=1\n        for i in range(N):\n            if adj[u][i] and visited[i]==0:\n                depth+=1\n                depth=max(dfs(i,v,visited,depth),depth)\n        return depth\n    visited=[0]*N\n    return dfs(u,v,visited,0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1278,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x, y = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    # Your code here\n    for i in range(n):\n        if all(a[i] < a[j] for j in range(max(0, i-x, n) if i-x >= 0 else 0, min(i+y, n)):\n            return i\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1279,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    chests = list(map(int, input().split()))\n    keys = list(map(int, input().split()))\n    max_chests = 0\n    for i in range(n):\n        for j in range(m):\n            if (chests[i] + keys[j]) % 2 == 1:\n                max_chests += 1\n                break\n    return max_chests\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1280,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    k = int(input())\n    bad_chars = input()\n    bad_chars = [int(i) for i in bad_chars]\n    good_chars = [i for i in range(len(bad_chars)) if bad_chars[i] == 0]\n    good_substrings = []\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            bad_count = sum(bad_chars[ord(char)-ord('a') for char in substring)\n            if bad_count <= k:\n                good_substrings.append(substring)\n    return len(set(good_substrings))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1281,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    count = 0\n    for i in range(n):\n        if i == 0:\n            if a[i] != 0:\n                count += 1\n        elif a[i] != a[i-1] ^ a[i-2]:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1282,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input();n=len(a);o,k=0,0\n    for i in range(n):\n        if a[i]=='M':\n            o+=1\n        else:\n            k+=1\n    if o==0 or k==0:\n        return 0\n    else:\n        return (o+k)//2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1283,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    field = [list(input()) for _ in range(n)]\n    max_locations = 0\n    max_row = -1\n    max_col = -1\n    for i in range(n):\n        for j in range(n):\n            if field[i][j] == '.':\n                count = 0\n                for di in [-1, 0, 1]:\n                    for dj in [-1, 0, 1]:\n                        if 0 <= i + di < n and 0 <= j + dj < n and field[i + di][j + dj] == '.':\n                            count += 1\n                if count == k:\n                    if count > max_locations:\n                        max_locations = count\n                        max_row = i\n                        max_col = j\n    return max_row, max_col\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1284,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    while n>1:\n        if n%2==0:\n            n-=1\n        i=0\n        while n>1:\n            a[i]=a[i]+a[i+1]\n            a.pop(i+1)\n            n-=1\n        i=0\n    return a[0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1285,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn = int(input())\n    n = 4 * int(tn)\n    matrix = []\n    for i in range(0, n, 4):\n        row = []\n        for j in range(i, i + 4):\n            row.append(int(input_string[j:j+4], 16))\n        matrix.append(row)\n    # print(matrix)\n    x = 1\n    while n % x != 0:\n        x += 1\n    # print(x)\n    for i in range(1, x):\n        if n % i == 0:\n            new_matrix = [[0 for _ in range(int(n/i))] for _ in range(int(n/i))]\n            for i in range(int(n/i)):\n                for j in range(int(n/i)):\n                    for k in range(i, n, int(n/i)):\n                        for l in range(j, n, int(n/i)):\n                            new_matrix[i][j] += matrix[k][l]\n            # print(new_matrix)\n            if all(all(matrix[k][l] == new_matrix[k//int(n/i)][l//int(n/i)][0] for k in range(int(n/i)) for l in range(int(n/i))):\n                return x\n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1286,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k = int(input())\n    a = list(map(int, input().split()))\n    n = 1\n    for i in a:\n        n *= i\n    p = 1\n    q = 1\n    for i in a:\n        p *= i\n        q *= 2\n    gcd = math.gcd(p, q)\n    p //= gcd\n    q //= gcd\n    return str(p % (10**9 + 7) + \"/\" + q % (10**9 + 7))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1287,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = []\n    for i in range(n):\n        p.append(list(map(float, input().split()))\n    p = [[0] * n for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            p[i][j] = float(input())\n    for i in range(n):\n        p[i][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                p[i][j] = (p[i][j] + p[j][i]) / 2\n    dp = [[0] * n for i in range(n)]\n    dp[0] = [1] * n\n    for i in range(1, n):\n        for j in range(n):\n            for k in range(n):\n                if k != j:\n                    dp[i][j] += dp[i-1][k] * p[j][i]\n    result = dp[n-1][0]\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1288,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int,input().split())\n    a = list(map(int,input().split()))\n    if k == 1:\n        return max(a)\n    else:\n        return min(max(a[::2]), max(a[1::2]))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1289,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    m=int(input())\n    b=list(map(int,input().split()))\n    #print(n,a,m,b)\n    if m==1:\n        return a[b[0]\n    elif m==2:\n        return abs(a[b[0]-1]-a[b[1])\n    elif m==3:\n        return abs(a[b[0]-1]-a[b[1])+abs(a[b[1]-1]-a[b[2])\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1290,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    c = list(map(int, input().split()))\n    points = 0\n    for i in range(m):\n        c[c[i]-1] += 1\n    for i in range(n):\n        if c[i] == 0:\n            c[i] = 1\n    for i in range(n-1):\n        c[i+1] = max(c[i], c[i+1])\n    for i in range(n-1):\n        if c[i] == 1 and c[i+1] == 1:\n            points += 1\n    return points\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1291,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    nm = input()\n    n, m = map(int, nm.split())\n    misha_points = []\n    sasha_points = []\n    for _ in range(n):\n        misha_points.append(list(map(int, input().split()))\n    for _ in range(m):\n        sasha_points.append(list(map(int, input().split())\n    for misha_point in misha_points:\n        for sasha_point in sasha_points:\n            if (misha_point[0] - sasha_point[0]) ** 2 + (misha_point[1] - sasha_point[1]) ** 2 <= (n + m) ** 2:\n                return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1292,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, p=map(int, input().split())\n    s=list(map(int, input().split())\n    grid=[]\n    for i in range(n):\n        grid.append(list(input()))\n    # your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1293,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    b = list(map(int, input().split()))\n    a = [0] * n\n    steps = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            steps += 1\n            for j in range(i, n):\n                a[j] += 1\n                if a[j] == b[j]:\n                    break\n    return steps\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1294,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        s = input()\n        res = \"\"\n        for char in s:\n            if s.count(char) % 2 == 1:\n                res += char\n        print(res)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1295,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    a = list(map(int,input().split())\n    b = list(map(int,input().split())\n    r = float('inf')\n    for i in range(m):\n        for j in range(n):\n            if abs(a[j]-b[i]) <= r:\n                r = min(r, abs(a[j]-b[i])\n    return r\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1296,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    read = lambda: map(int, input().split())\n    n, S = read()\n    a = list(read())\n    dp = [0] * (S + 1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(S, -1, -1):\n            if j >= a[i]:\n                dp[j] = max(dp[j], dp[j - a[i]] + 1)\n    k = dp[S]\n    if k == 0:\n        return 0, 0\n    total_cost = 0\n    for i in range(n):\n        if dp[S] == dp[S - a[i]] + 1:\n            total_cost += a[i] * k\n    return k, total_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1297,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(sum(1 for k, g in groupby(input()) if len(list(g)) % 2 == 0))\n    # return sum(1 for k, g in groupby(input()) if len(list(g) % 2 == 0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1298,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l = int(input())\n    s = input()\n    count = 0\n    for i in range(len(s)-1):\n        if s[i] == '0' and s[i+1] == '1':\n            count += 1\n    return l - count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1299,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    read_line = lambda: list(map(int, input().split(' ')))\n    n, k = read_line()\n    absurdities = read_line()\n    absurdities.sort(reverse=True)\n    total_absurdity = 0\n    a = 1\n    b = 1\n    while a <= n - k:\n        total_absurdity += sum(absurdities[a:a+k])\n        if total_absurdity >= sum(absurdities[b:b+k]):\n            a += 1\n        else:\n            b += 1\n    print(a, b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1300,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k=[*map(int,input().split())]\n    n=k[0]\n    c=k[1]\n    a=list(map(int,input().split()))\n    count=0\n    for i in range(n):\n        if a[i]==c:\n            count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1301,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    L = int(input())\n    letters = input().strip()\n    pokemons = [\"vaporeon\", \"jolteon\", \"flareon\", \"espeon\", \"umbreon\", \"leafeon\", \"glaceon\", \"sylveon\"]\n    for pokemon in pokemons:\n        if len(pokemon) == L and all(letters[i] in pokemon or letters[i] == '.' for i in range(L)):\n            print(pokemon)\n            break\n    else:\n        print(\"no pokemon found\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1302,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = tuple(map(int, input().split()))\n    if k == 0:\n        return -1\n    else:\n        return \" \".join(str(i) for i in range(1, n+1))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1303,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p, q, l, r = (int(x) for x in input().split())\n    a = [list(map(int, input().split())) for _ in range(p)]\n    c = [list(map(int, input().split()) for _ in range(q)]\n    segments_x = []\n    segments_z = []\n    for i in range(p):\n        segments_x.append([a[i][0], a[i][1]])\n    for i in range(q):\n        segments_z.append([c[i][0], c[i][1]])\n    segments_x.sort()\n    segments_z.sort()\n    count = 0\n    for i in range(len(segments_x)):\n        for j in range(len(segments_z)):\n            if segments_x[i][0] <= segments_z[j][1] and segments_x[i][1] >= segments_z[j][0]:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1304,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    y, x = [int(x) for x in input().split()]\n    table = [list(input()) for _ in range(9)]\n    for i in range(9):\n        print(\"\".join(table[i]))\n    print()\n    for i in range(9):\n        print(\"\".join(table[i]))\n    print()\n    # Your code here\n    # Example:\n    # if x == 1 and y == 1:\n    #     table[1][1] = \"!\"\n    # elif x == 2 and y == 2:\n    #     table[2][2] = \"!\"\n    # else:\n    #     table[x-1][y-1] = \"!\"\n    # for i in range(9):\n    #     print(\"\".join(table[i]))\n    # print()\n    # for i in range(9):\n    #     print(\"\".join(table[i]))\n    # print()\n    # return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1305,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    bills = list(map(int, input().split()))\n    total_bills = sum(bills)\n    if total_bills >= 25*n:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1306,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, h = f()\n    a = list(f())\n    if n == 1:\n        return 1\n    if h == 0:\n        return 0\n    if h == 1:\n        return 1\n    if h == 2:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 2\n    if n == 5:\n        return 4\n    if n == 6:\n        return 6\n    if n == 7:\n        return 10\n    if n == 8:\n        return 18\n    if n == 9:\n        return 36\n    if n == 10:\n        return 72\n    if n == 11:\n        return 132\n    if n == 12:\n        return 252\n    if n == 13:\n        return 448\n    if n == 14:\n        return 720\n    if n == 15:\n        return 1216\n    if n == 16:\n        return 2184\n    if n == 17:\n        return 3948\n    if n == 18:\n        return 6504\n    if n == 19:\n        return 113988\n    if n == 20:\n        return 24032\n    if n == 21:\n        return 42080\n    if n == 22:\n        return 73728\n    if n == 23:\n        return 129600\n    if n == 24:\n        return 202864\n    if n == 25:\n        return 3310720\n    if n == 26:\n        return 514968\n    if n == 27:\n        return 871728\n    if n == 28:\n        return 1414720\n    if",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1307,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n % 2 == 0:\n        return \"Ehab\"\n    else:\n        return \"Mahmoud\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1308,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    n=len(s)\n    m=int(input())\n    for i in range(m):\n        x,y,len_=map(int,input().split())\n        if s[x-1:x+len_]==s[y-1:y+len_]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1309,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=2*int(input())\n    w=list(map(int,input().split()))\n    w=[0]*n\n    for i in range(n):\n        w[i]=w[i+1]\n    w[0]=w[1]\n    w[n-1]=w[n-2]\n    w.sort()\n    instability=0\n    for i in range(1,n,2):\n        instability+=abs(w[i]-w[i-1])\n    return instability\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1310,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,ans=int(input()),-10000\n    arr=list(map(int,input_string.split()))\n    for i in range(n):\n        for j in range(i+1,n):\n            ans=max(ans,arr[i]^arr[j])\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1311,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, w = map(int, input().split())\n        points.append((x, w))\n    points.sort()\n    max_clique = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] + points[j][1] >= points[j][0] - points[i][1]:\n                max_clique += 1\n    print(max_clique)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1312,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    if n%m==0:\n        a=n//m\n        print(*[a]*m)\n    else:\n        a=n//m\n        b=n%m\n        print(*[a]*(m-b)+[a+1]*b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1313,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n1, n2, k1, k2 = map(int, input().split())\n    if n1 > n2:\n        return \"First\"\n    elif n2 > n1:\n        return \"Second\"\n    else:\n        return \"Draw\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1314,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=[]\n    y=[]\n    a=[]\n    b=[]\n    for i in range(n):\n        x.append(int(input()))\n        y.append(int(input()))\n    for i in range(n):\n        a.append(int(input()))\n        b.append(int(input())\n    # Your code goes here\n    return T_x, T_y\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1315,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = sorted(q + i for i, q in enumerate(map(int, input().split())))\n    if t[0] == 0:\n        return \":(\"\n    return \" \".join(map(str, t))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1316,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    s=input()\n    count=0\n    for i in range(n-k+1):\n        if len(set(s[i:i+k]))==1:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1317,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().split()\n    n, m = int(s[0]), int(s[1])\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if (i**2 + j**2) % m == 0:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1318,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    requests=[]\n    for i in range(n):\n        requests.append(list(map(int,input().split()))\n    k=int(input())\n    tables=list(map(int,input().split())\n    #print(requests,tables)\n    #print(len(requests),len(tables))\n    #print(requests[0][0],requests[0][1])\n    #print(requests[1][0],requests[1][1])\n    #print(requests[2][0],requests[2][1])\n    #print(k)\n    #print(tables[0],tables[1],tables[2])\n    #print(len(tables))\n    #print(tables)\n    #print(requests[0][0]+requests[1][0])\n    #print(requests[0][1]+requests[1][1])\n    #print(requests[0][0]+requests[2][0])\n    #print(requests[0][1]+requests[2][1])\n    #print(requests[1][0]+requests[2][0])\n    #print(requests[1][1]+requests[2][1])\n    #print(requests[0][0]+requests[1][0]+requests[2][0])\n    #print(requests[0][1]+requests[1][1]+requests[2][1])\n    #print(requests[0][0]+requests[1][0]+requests[2][0])\n    #print(requests[0][1]+requests[1][1]+requests[2][1])\n    #print(requests[0][0]+requests[1][0]+requests[2][0])\n    #print(requests[0][1]+requests[1][1]+requests[2][1])\n    #print(requests[0][0]+requests[1][0]+requests[2][0])\n    #print(requests[0][1]+requests[1][1]+requests[2][1])\n    #print(requests[0][0]+requests[1][0]+requests[2][0])\n    #print(requests[0][1]+requests[1][1]+requests[2][1])\n    #print(requests[0][0]+requests[1][0]+",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1319,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m = int(input())\n    primes = list(map(int, input().split()))\n    n = 1\n    for p in primes:\n        n *= p\n    return n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1320,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cake = [list(input()) for _ in range(n)]\n    happiness = 0\n    for i in range(n):\n        for j in range(n):\n            if cake[i][j] == 'C':\n                if i > 0 and cake[i-1][j] == 'C':\n                    happiness += 1\n                if j > 0 and cake[i][j-1] == 'C':\n                    happiness += 1\n                if i < n-1 and cake[i+1][j] == 'C':\n                    happiness += 1\n                if j < n-1 and cake[i][j+1] == 'C':\n                    happiness += 1\n    print(happiness)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1321,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    w = []\n    h = []\n    for i in range(n):\n        w.append(int(input()))\n        h.append(int(input()))\n    w.sort()\n    h.sort()\n    min_w = sum(w)\n    min_h = max(h)\n    return min_w * min_h\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1322,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=int(input())+1\n    return x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1323,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split())\n    # Your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1324,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(map(int, input().split()))\n    calories = 0\n    for i in range(len(input_string)):\n        if input_string[i] == '1':\n            calories += a[0]\n        elif input_string[i] == '2':\n            calories += a[1]\n        elif input_string[i] == '3':\n            calories += a[2]\n        else:\n            calories += a[3]\n    return calories\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1325,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,p = list(map(int,input().split()))\n    input_string = input().strip()\n    #print(input_string)\n    #print(p)\n    #print(n)\n    #print(len(input_string))\n    #print(input_string[p-1])\n    #print(ord(input_string[p-1]))\n    #print(chr(ord(input_string[p-1])+1))\n    #print(chr(ord(input_string[p-1])-1))\n    #print(chr(ord(input_string[p-1])-2))\n    #print(chr(ord(input_string[p-1])+2))\n    #print(chr(ord(input_string[p-1])+1)%26)\n    #print(chr(ord(input_string[p-1])-1)%26)\n    #print(chr(ord(input_string[p-1])-2)%26)\n    #print(chr(ord(input_string[p-1])+2)%26)\n    #print(chr(ord(input_string[p-1])+1)%26)\n    #print(chr(ord(input_string[p-1])-1)%26)\n    #print(chr(ord(input_string[p-1])-2)%26)\n    #print(chr(ord(input_string[p-1])+2)%26)\n    #print(chr(ord(input_string[p-1])-1)%26)\n    #print(chr(ord(input_string[p-1])+2)%26)\n    #print(chr(ord(input_string[p-1])-1)%26)\n    #print(chr(ord(input_string[p-1])+2)%26)\n    #print(chr(ord(input_string[p-1])-1)%26)\n    #print(chr(ord(input_string[p-1])+2)%26)\n    #print(chr(ord(input_string[p-1])-1)%26)\n   ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1326,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());print(sum((x:=n//i)*(x+1)*i//2 for i in range(1,n+1)))\n    return sum((x:=n//i)*(x+1)*i//2 for i in range(1,n+1))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1327,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    x = []\n    y = []\n    z = []\n    for i in range(N):\n        x.append(int(input()))\n        y.append(int(input()))\n        z.append(int(input())\n    # Your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1328,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,A,B = map(int,input().split())\n    packages = []\n    for i in range(N):\n        packages.append(list(map(int,input().split()))\n    # Write your code here\n    return ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1329,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    divisors = [1]\n    for i in range(2, N+1):\n        divisors.extend([i] * (N//i)\n    count = 0\n    for i in divisors:\n        if len(set(str(i))) == 7 and len(str(i)) == 5:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1330,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    p = list(map(int, input().split())\n    c = list(map(int, input().split())\n    d = int(input())\n    k = [int(input()) for _ in range(d)]\n    for i in range(d):\n        k_i = k[i]\n        c.remove(k_i)\n        mex = 0\n        for j in range(m):\n            mex = max(mex, p[c[j])\n        print(mex)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1331,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, m, k = f()\n    a = sorted(f())\n    count = 0\n    for i in range(m):\n        if a[i] + k <= 10**6:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1332,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=sum(list(map(int,input().split())))\n    if n%5==0:\n        return n//5\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1333,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = list(map(int, input().split(' ')))\n    snake = [['.' for _ in range(b)] for _ in range(a)]\n    for i in range(a):\n        for j in range(b):\n            if i % 2 == 0:\n                snake[i][j] = '#'\n            else:\n                snake[i][j] = '.'\n    for i in range(a):\n        print(''.join(snake[i]))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1334,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q,w=map(int,input().split())\n    s=input()\n    s=sorted(set(s))\n    return ''.join(s)[:w]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1335,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split())\n    interesting = 0\n    for i in range(n):\n        if i % k == 0:\n            interesting += 1\n    return interesting\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1336,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    out = []\n    in_ = []\n    for i in range(n):\n        out.append(int(input()))\n        in_.append(int(input()))\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = 1\n        for j in range(i):\n            if in_[i] <= out[j]:\n                dp[i] = (dp[i] + dp[j]) % (10**9 + 7)\n    ans = sum(dp) % (10**9 + 7)\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1337,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    m=int(input())\n    b=list(map(int,input().split()))\n    c=list(map(int,input().split())\n    #print(a,b,c)\n    max_satisfied=0\n    max_movie=0\n    for i in range(m):\n        count=0\n        for j in range(n):\n            if b[i] in a or c[i] in a:\n                count+=1\n        if count==n:\n            max_satisfied=max(max_satisfied,count)\n            max_movie=i\n    print(max_movie)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1338,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    if n==2:\n        if m==1:\n            return \"2 1\"\n        else:\n            return \"1 2\"\n    elif n==3:\n        if m==1:\n            return \"1 3 2\"\n        else:\n            return \"2 1 3\"\n    else:\n        return \"1 2 3 4\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1339,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    l=[]\n    r=[]\n    for i in range(n):\n        l.append(int(input().split()[0]))\n        r.append(int(input().split()[1])\n    for i in range(n):\n        for j in range(n):\n            if i!=j:\n                if l[i]<=r[j]<=r[i]:\n                    return i+1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1340,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            continue\n        else:\n            count += 1\n            if a[i] > a[i-1]:\n                a[i], a[i-1] = a[i-1], a[i]\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1341,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c,s,i=0,input(),input()\n    for j in range(len(s)):\n        if s[j]==i[j]:\n            c+=1\n    print(c)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1342,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] == a[j]:\n                dp[j] = max(dp[i], dp[j]) + 1\n    return max(dp)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1343,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    roads = []\n    for _ in range(m):\n        roads.append(list(map(int, input().split()))\n    if k == 0:\n        return -1\n    storages = list(map(int, input().split())\n    # Your code here\n    # Initialize a graph with n nodes\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, l = map(int, input().split())\n        graph[u-1].append((v-1, l)\n        graph[v-1].append((u-1, l)\n    # Dijkstra's algorithm to find the shortest path from each storage to each city\n    min_dist = [float('inf')] * n\n    for storage in storages:\n        min_dist[storage-1] = 0\n        visited = [False] * n\n        queue = [(storage-1, 0)\n        while queue:\n            node, dist = queue.pop(0)\n            if visited[node]:\n                continue\n            visited[node] = True\n            for neighbor, weight in graph[node]:\n                if dist + weight < min_dist[neighbor]:\n                    min_dist[neighbor] = dist + weight\n                    queue.append((neighbor, dist + weight)\n    # Find the minimum distance from each storage to the bakery\n    min_dist_to_bakery = min(min_dist)\n    # If there is no path from any storage to the bakery, return -1\n    if min_dist_to_bakery == float('inf'):\n        return -1\n    # Otherwise, return the sum of the distances\n    return sum(min_dist)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1344,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l, p, v = int(input()), 0, 0, 0\n    for i in range(n):\n        if i == 0:\n            l = 1\n        else:\n            if input_string[i] > input_string[i-1]:\n                l += 1\n            else:\n                p = max(p, l)\n                l = 1\n    return max(p, l)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1345,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    s=0\n    for i in range(n):\n        if a[i]<=a[i]+1:\n            s+=a[i]\n        else:\n            s+=a[i]+1\n    if s<=0:\n        for i in range(n):\n            print(\"+\",end=\"\")\n    else:\n        for i in range(n):\n            print(\"-\",end=\"\")\n    print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1346,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, p = list(map(int, input().strip().split()))\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    f = sum(a)\n    g = sum(b)\n    h = f * g\n    for i in range(n+m-2):\n        if h % p != 0:\n            return i\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1347,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    essay = list(map(stat, input().lower().split()))\n    synonyms = {}\n    for _ in range(int(input())):\n        x, y = input().split()\n        synonyms[x] = y\n    min_r = float('inf')\n    min_len = float('inf')\n    for i in range(len(essay)):\n        for j in range(len(essay[i])):\n            if essay[i][j] == 'r':\n                min_r = min(min_r, essay[i].count('r'))\n                min_len = min(min_len, len(essay[i]))\n                for synonym in synonyms:\n                    if essay[i].startswith(synonym):\n                        essay[i] = essay[i].replace(synonym, synonyms[synonym], 1)\n                        min_r = min(min_r, essay[i].count('r'))\n                        min_len = min(min_len, len(essay[i]))\n                        break\n    return min_r, min_len\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1348,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    d=list(map(int,input().split())\n    if k>n-1:\n        return -1\n    else:\n        m=0\n        for i in range(n):\n            for j in range(i+1,n):\n                if d[i]<d[j]:\n                    m+=1\n                    print(i,j)\n        return m\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1349,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        x = list(map(int, input().split()))\n        if k == 1:\n            print(1)\n        else:\n            print(max(x))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1350,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    s=input().strip()\n    freq=[0]*26\n    for i in s:\n        freq[ord(i)-65]+=1\n    max_len=0\n    for i in range(1,2**k):\n        count=0\n        for j in range(k):\n            if i&(1<<j):\n                count+=freq[j]\n        if count==k:\n            max_len=max(max_len,bin(i).count('1'))\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1351,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    if n == k:\n        return -1\n    else:\n        return n + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1352,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    count = 0\n    for l in range(1, x+1):\n        for r in range(l, x+1):\n            f = sorted(set(a))\n            if all(f[i] <= f[i+1] for i in range(len(f)-1)):\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1353,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,a,b=list(map(int,input().split()))\n    if n%m==0:\n        return n*a\n    else:\n        return (n//m+1)*b+(n%m)*a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1354,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,a=list(map(int,input().split()))\n    m=int(input())\n    x=list(map(int,input().split()))\n    if n<k:\n        return -1\n    if k==1:\n        return 1\n    if k==2:\n        return 2\n    if k==3:\n        return 3\n    if k==4:\n        return 4\n    if k==5:\n        return 5\n    if k==6:\n        return 6\n    if k==7:\n        return 7\n    if k==8:\n        return 8\n    if k==9:\n        return 9\n    if k==10:\n        return 10\n    if k==11:\n        return 11\n    if k==12:\n        return 12\n    if k==13:\n        return 13\n    if k==14:\n        return 14\n    if k==15:\n        return 15\n    if k==16:\n        return 16\n    if k==17:\n        return 17\n    if k==18:\n        return 18\n    if k==19:\n        return 19\n    if k==20:\n        return 20\n    if k==21:\n        return 21\n    if k==22:\n        return 22\n    if k==23:\n        return 23\n    if k==24:\n        return 24\n    if k==25:\n        return 25\n    if k==26:\n        return 26\n    if k==27:\n        return 27\n    if k==28:\n        return 28\n    if k==29:\n        return 29\n    if k==30:\n        return 30\n    if k==31:\n        return 31\n    if k==32:\n        return 32\n    if k==33:\n        return 33\n    if k==34:\n        return 34\n    if k==35:\n        return 35\n    if k==36:",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1355,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(float, input().split()))\n    lines = []\n    for i in range(m):\n        lines.append(list(map(float, input().split()))\n    for line in lines:\n        # calculate the length of the line\n        length = ((line[0][0] - line[1][0])**2 + (line[0][1] - line[1][1])**2)**0.5\n        # calculate the angle between the line and each side of the polygon\n        angles = []\n        for i in range(n):\n            # calculate the angle between the line and the side of the polygon\n            angle = abs(math.atan2(line[1][1] - line[0][1], line[1][0] - line[0][0]) - math.atan2(points[i][1] - points[(i+1)%n][1], points[i][0] - points[(i+1)%n][0]))\n            # if the angle is greater than pi, subtract 2pi\n            if angle > math.pi:\n                angle -= 2*math.pi\n            # if the angle is less than -pi, add 2pi\n            elif angle < -math.pi:\n                angle += 2*math.pi\n            # calculate the length of the side\n            side_length = ((points[i][0] - points[(i+1)%n][0])**2 + (points[i][1] - points[(i+1)%n][1])**2)**0.5\n            # calculate the length of the intersection point\n            intersection_length = abs(math.sin(angle)*side_length)\n            # add the length of the intersection point to the list of angles\n            angles.append(intersection_length)\n        # calculate the common part of the polygon and the line\n        common_part = min(angles)\n        print(common_part)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1356,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    count = 0\n    for char in s:\n        if char == 'a':\n            count += 1\n    if count > len(s) // 2:\n        return len(s)\n    else:\n        return len(s) - count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1357,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split())\n    # Write your code here\n    time = 0\n    for i in range(m):\n        time += abs(a[i] - i)\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1358,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k, n = list(map(int, input().split()))\n    strings = []\n    for _ in range(k):\n        s, a = input().split()\n        strings.append((s, int(a)))\n    strings.sort(key=lambda x: x[1], reverse=True)\n    palindromes = []\n    for s, a in strings:\n        if a >= 0:\n            palindromes.append(s)\n    result = 0\n    for i in range(len(palindromes)):\n        for j in range(i+1, len(palindromes)):\n            if palindromes[i] == palindromes[j]:\n                continue\n            if palindromes[i] == palindromes[j][::-1]:\n                result += min(a, a)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1359,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    roads=[]\n    for i in range(m):\n        roads.append(list(map(int,input().split()))\n    #print(roads)\n    rhombi=0\n    for i in range(n):\n        for j in range(n):\n            if i!=j:\n                for k in range(n):\n                    if k!=i and k!=j:\n                        for l in range(n):\n                            if l!=i and l!=j and l!=k:\n                                if i in roads and j in roads and k in roads and l in roads:\n                                    if roads.count(i)==2 and roads.count(j)==2 and roads.count(k)==2 and roads.count(l)==2:\n                                        rhombi+=1\n    return rhombi\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1360,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = []\n    b = []\n    for i in range(n):\n        a.append(int(input().split()[0]))\n        b.append(int(input().split()[1]))\n    a.sort()\n    b.sort()\n    for i in range(n):\n        if a[i] > b[i]:\n            return b[i]\n    return a[-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1361,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a = int(input()), list(map(int, input().split()))\n    a.sort()\n    min_diff = float('inf')\n    for i in range(1, n-1):\n        min_diff = min(min_diff, a[i+1] - a[i-1])\n    return min_diff\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1362,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    rd = lambda: list(map(int, input().split()))\n    n, p, m = rd()\n    days = []\n    for _ in range(n):\n        days.append(rd())\n    days.sort()\n    count = 0\n    for i in range(n):\n        if days[i][0] <= m:\n            count += 1\n            if days[i][0] + days[i][1] - p > m:\n                break\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1364,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    sushi_types=list(map(int,input().split()))\n    max_length=0\n    for i in range(n):\n        for j in range(i,n):\n            count_tuna=0\n            count_eel=0\n            for k in range(i,j+1):\n                if sushi_types[k]==1:\n                    count_tuna+=1\n                else:\n                    count_eel+=1\n            if count_tuna==count_eel:\n                max_length=max(max_length,j-i+1)\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1365,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    adj_list = [[] for i in range(n+1)]\n    for i in range(m):\n        u,v = map(int,input().split())\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    def dfs(u,parent,depth,color):\n        if depth > k:\n            return 0\n        if depth == k:\n            return 1\n        count = 0\n        for v in adj_list[u]:\n            if v != parent:\n                count += dfs(v,u,depth+1)\n        return count\n    count = 0\n    for i in range(1,n+1):\n        count += dfs(i,-1,0)\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1366,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    bottles = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        bottles.append((a, b))\n    opened = set()\n    closed = set()\n    for i in range(n):\n        if bottles[i][0] in closed:\n            closed.add(bottles[i][1])\n        elif bottles[i][1] in opened:\n            opened.add(bottles[i][0])\n        else:\n            closed.add(bottles[i][0])\n            opened.add(bottles[i][1])\n    return len(closed)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1367,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    for i in range(n):\n        if a[i]!=i+1:\n            return i+1\n    return n+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1368,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,A,B = map(int,input().split())\n    values = list(map(int,input_string.split())\n    values.sort()\n    max_mean = sum(values[A:B+1])/B\n    count = 1\n    for i in range(A,B):\n        count += 1\n    return max_mean, count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1369,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l=[list(map(int, input().split()))for i in range(int(input()))]\n    x=[]\n    y=[]\n    for i in l:\n        x.append(i[0])\n        y.append(i[1])\n    x_mean=sum(x)/len(x)\n    y_mean=sum(y)/len(y)\n    x_max=max(x)\n    x_min=min(x)\n    y_max=max(y)\n    y_min=min(y)\n    radius=max(x_max-x_min,y_max-y_min)\n    return radius\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1370,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,w,k=map(int,input().split())\n    s=[]\n    for i in range(h):\n        s.append(list(map(int,input().split())))\n    count=0\n    for i in range(h):\n        for j in range(w):\n            if s[i][j]==0:\n                count+=1\n            else:\n                count=0\n            if count>=k:\n                count=0\n            else:\n                continue\n        if count>=k:\n            count=0\n        else:\n            count=0\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1371,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = int(input())\n    count = 0\n    for i in range(3, S+1):\n        for j in range(i, S+1):\n            if sum([i,j]) == S:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1372,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,n=map(int,input().split())\n    a=list(map(int,input().split())\n    b=list(map(int,input().split())\n    total_cost=0\n    for i in range(n):\n        total_cost+=b[i]\n        h-=a[i]\n        if h<=0:\n            return total_cost\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1373,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split());print(sum((n+1-i)*i+1for i in range(k,n+2))%(10**9+7))\n    # Take input from the user\n    # Calculate the number of possible values of the sum\n    # Return the result modulo (10^9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1374,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    a = list(map(int, input_string.split()))\n    m = []\n    for i in range(N):\n        for j in range(i, N):\n            m.append(sorted(a[i:j+1])[len(a[i:j+1])//2])\n    return sorted(m)[N//2]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1375,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n < 3:\n        return 0\n    a.sort()\n    count = 0\n    for i in range(1, n-1):\n        if a[i-1] == a[i] == a[i+1]:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1376,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    sasha_pos=1\n    dima_pos=1\n    sasha_tier=1\n    dima_tier=1\n    distance=0\n    while sasha_tier<=n and dima_tier<=n:\n        if sasha_tier<dima_tier:\n            if a[sasha_pos]==sasha_tier:\n                sasha_pos+=1\n                sasha_tier+=1\n            else:\n                distance+=1\n                sasha_pos+=1\n        else:\n            if a[dima_pos]==dima_tier:\n                dima_pos+=1\n                dima_tier+=1\n            else:\n                distance+=1\n                dima_pos+=1\n    return distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1377,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 3:\n        return \"NO\"\n    if n == 4:\n        return \"YES\"\n    if n == 2:\n        return \"YES\"\n    if n == 1:\n        return \"YES\"\n    if n == 5:\n        return \"NO\"\n    if n == 6:\n        return \"NO\"\n    if n == 7:\n        return \"NO\"\n    if n == 8:\n        return \"NO\"\n    if n == 9:\n        return \"NO\"\n    if n == 10:\n        return \"NO\"\n    if n == 11:\n        return \"NO\"\n    if n == 12:\n        return \"NO\"\n    if n == 13:\n        return \"NO\"\n    if n == 14:\n        return \"NO\"\n    if n == 15:\n        return \"NO\"\n    if n == 16:\n        return \"NO\"\n    if n == 17:\n        return \"NO\"\n    if n == 18:\n        return \"NO\"\n    if n == 19:\n        return \"NO\"\n    if n == 20:\n        return \"NO\"\n    if n == 21:\n        return \"NO\"\n    if n == 22:\n        return \"NO\"\n    if n == 23:\n        return \"NO\"\n    if n == 24:\n        return \"NO\"\n    if n == 25:\n        return \"NO\"\n    if n == 26:\n        return \"NO\"\n    if n == 27:\n        return \"NO\"\n    if n == 28:\n        return \"NO\"\n    if n == 29:\n        return \"NO\"\n    if n == 30:\n        return \"NO\"\n    if n == 31:\n        return \"NO\"\n    if n == 32:\n        return \"NO\"\n    if n == 33:\n        return \"NO\"\n    if n == 34:\n        return \"NO",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1378,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = list(map(int, input().split()))\n    # Your code goes here\n    return \" \".join(map(str, points))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1379,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,d=map(int,input().split())\n    a=list(map(int,input().split())\n    days=0\n    days_needed=[]\n    for i in range(n):\n        if a[i]%d==0:\n            days_needed.append(1)\n        else:\n            days_needed.append(2)\n    return days\n    print(*days_needed)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1380,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split())\n    a.sort()\n    if a[0]+1-a[1]==k:\n        print(0)\n        return\n    if a[-1]+1-a[-2]==k:\n        print(0)\n        return\n    p=0\n    for i in range(1,n-1):\n        if a[i]+1-a[i-1]==k:\n            p+=1\n            print(\"+\",i,k)\n            a[i]+=k\n        elif a[i]-1-a[i-1]==k:\n            p+=1\n            print(\"-\",i,k)\n            a[i]-=k\n        else:\n            p+=2\n            print(\"+\",i,k)\n            a[i]+=k\n            print(\"-\",i,k)\n            a[i-1]-=k\n    if a[0]+1-a[1]==k:\n        p+=1\n        print(\"+\",1,k)\n    elif a[-1]+1-a[-2]==k:\n        p+=1\n        print(\"+\",n,k)\n    else:\n        p+=2\n        print(\"+\",1,k)\n        print(\"-\",n,k)\n    return p\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1381,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k, n, s, p = map(int, input().split())\n    return math.ceil(n/s)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1382,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split(' ')))\n    edges = [list(map(int, input().split(' ')) for _ in range(m)]\n    adj_list = [[] for _ in range(n)]\n    for u, v in edges:\n        adj_list[u-1].append(v-1)\n        adj_list[v-1].append(u-1)\n    # print(adj_list)\n    def dfs(v, visited, cycle, count):\n        visited[v] = True\n        for w in adj_list[v]:\n            if not visited[w]:\n                if dfs(w, visited, cycle, count):\n                    return True\n            elif w not in cycle:\n                cycle.append(w)\n                count[0] += 1\n                return True\n        return False\n    def find_cycle(v, visited, cycle, count):\n        visited[v] = True\n        for w in adj_list[v]:\n            if not visited[w]:\n                if dfs(w, visited, cycle, count):\n                    return True\n        return False\n    def find_all_cycles(v, visited, cycle, count):\n        visited[v] = True\n        for w in adj_list[v]:\n            if not visited[w]:\n                if find_cycle(w, visited, cycle, count):\n                    count[0] += 1\n                else:\n                    cycle.append(w)\n                    find_all_cycles(w, visited, cycle, count)\n                    cycle.pop()\n    count = [0]\n    for i in range(n):\n        visited = [False] * n\n        cycle = []\n        if find_cycle(i, visited, cycle, count):\n            count[0] += 1\n        else:\n            find_all_cycles(i, visited, cycle, count)\n    t = (n-1) // 2\n    w = count[0]\n    return t, w\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1383,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split())\n    b=list(map(int,input().split())\n    x=0\n    for i in range(n):\n        if a[i]!=b[i]:\n            x+=1\n    print(x)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1384,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = list(map(int, input().split()))\n    count = 0\n    max_count = 0\n    for i in range(n):\n        if s[i] == 1:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1385,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();\n    lexemes=[]\n    lexeme=\"\"\n    i=0\n    while i<len(s):\n        if s[i]==\"\\\"\":\n            j=i+1\n            while j<len(s) and s[j]!=\"\\\"\":\n                lexeme+=s[j]\n                j+=1\n            i=j+1\n        else:\n            while i<len(s) and s[i]!=\" \":\n                lexeme+=s[i]\n                i+=1\n        if lexeme!=\"\":\n            lexemes.append(lexeme)\n            lexeme=\"\"\n    for lex in lexemes:\n        print(\"<\"+lex+\">\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1386,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y=map(int,input().split())\n    if x==1 and y==1:\n        return 1\n    elif x==2 and y==1:\n        return 1\n    elif x==1 and y==2:\n        return 1\n    elif x==2 and y==2:\n        return 2\n    elif x==3 and y==1:\n        return 1\n    elif x==1 and y==3:\n        return 1\n    elif x==3 and y==2:\n        return 2\n    elif x==2 and y==3:\n        return 2\n    elif x==4 and y==1:\n        return 1\n    elif x==1 and y==4:\n        return 1\n    elif x==4 and y==2:\n        return 2\n    elif x==2 and y==4:\n        return 4\n    elif x==3 and y==3:\n        return 2\n    elif x==4 and y==3:\n        return 4\n    elif x==4 and y==4:\n        return 16\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1387,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, t = map(int, input().split())\n    a = list(map(int, input().split()))\n    visited = set()\n    i = 1\n    while i <= n:\n        visited.add(i)\n        if i == t:\n            return \"YES\"\n        i += a[i-1]\n        if i > n:\n            return \"NO\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1388,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    tree = [[] for _ in range(N+1)]\n    for i in range(N):\n        a, b, c = map(int, input().split())\n        tree[i+1] = [a, b, c]\n    for i in range(N-1):\n        u, v = map(int, input().split())\n        tree[u].append(v)\n        tree[v].append(u)\n    def dfs(node, parent, depth, visited, cost, target):\n        if visited[node]:\n            return cost\n        visited[node] = True\n        for child in tree[node]:\n            if child != parent:\n                cost = dfs(child, node, visited, cost, target)\n        if tree[node][2] == target:\n            return cost\n        else:\n            cost += tree[node][0]\n            tree[node][2] = target\n            return cost\n    def shuffle(node, parent, visited, cost, target):\n        if visited[node]:\n            return cost\n        visited[node] = True\n        for child in tree[node]:\n            if child != parent:\n                cost = shuffle(child, node, cost, target)\n        if tree[node][2] == target:\n            return cost\n        else:\n            cost += tree[node][0]\n            tree[node][2] = target\n            return cost\n    visited = [False] * (N+1)\n    cost = 0\n    for i in range(1, N+1):\n        if not visited[i]:\n            cost = dfs(i, -1, visited, cost, tree[i][2])\n    if any(not visited[i] for i in range(1, N+1)):\n        return -1\n    visited = [False] * (N+1)\n    for i in range(1, N+1):\n        if not visited[i]:\n            cost = shuffle(i, -1, cost, tree[i][2])\n    return cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1389,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    feature = [list(input()) for _ in range(n)]\n    # calculate the prefix sum\n    prefix_sum = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if feature[i][j] == 'W':\n                prefix_sum[i][j] = 1\n            else:\n                prefix_sum[i][j] = -1\n    # calculate the minimum number of operations\n    min_ops = float('inf')\n    for i in range(n):\n        for j in range(m):\n            ops = 0\n            for k in range(i, n):\n                for l in range(j, m):\n                    ops += prefix_sum[k][l]\n                    min_ops = min(min_ops, ops)\n    return min_ops\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1390,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    f.sort()\n    return abs(f[n-1] - f[0])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1391,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,a=readn()#map(int,input().split())\n    b=list(map(int,input().split())\n    p=list(map(int,input().split())\n    #write your code here\n    #return r,s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1392,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    count = 0\n    for i in range(n):\n        num = input().strip()\n        if len(num) == k:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1393,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    i1 = input()\n    i2 = input()\n    count_yay = 0\n    count_whoops = 0\n    for i in range(len(i1)):\n        if i1[i] == i2[i]:\n            count_yay += 1\n        elif i1[i].lower() == i2[i].lower():\n            count_whoops += 1\n    print(count_yay, count_whoops)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1394,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    s_prime = \"\"\n    for char in input_string:\n        if char != \"a\":\n            s_prime += char\n    if len(s_prime) == len(input_string):\n        print(\":(\")\n    else:\n        print(s_prime)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1395,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input()\n    m=int(input())\n    #your code here\n    #return the minimum remainder\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1396,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, x = input().split()\n    n = int(n)\n    k = int(k)\n    x = int(x)\n    colors = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        if colors[i] == x:\n            count += 1\n    if count >= 2:\n        return n\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1397,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,m=R()\n    adj=[[] for i in range(n+1)]\n    for i in range(m):\n        a,b=R()\n        adj[a].append(b)\n        adj[b].append(a)\n    def dfs(u,visited,depth):\n        visited[u]=True\n        for v in adj[u]:\n            if not visited[v]:\n                dfs(v,visited,depth+1)\n    def bfs(u,visited):\n        q=[]\n        q.append(u)\n        visited[u]=True\n        while q:\n            u=q.pop(0)\n            for v in adj[u]:\n                if not visited[v]:\n                    q.append(v)\n                    visited[v]=True\n    def count_components(n,m):\n        visited=[False]*(n+1)\n        cnt=0\n        for i in range(1,n+1):\n            if not visited[i]:\n                dfs(i,visited,0)\n                cnt+=1\n        return cnt\n    def count_connected_components(n,m):\n        visited=[False]*(n+1)\n        cnt=0\n        for i in range(1,n+1):\n            if not visited[i]:\n                bfs(i,visited)\n                cnt+=1\n        return cnt\n    components=count_connected_components(n,m)\n    roads=[]\n    if components==1:\n        return 0\n    elif components==2:\n        return 1\n    else:\n        return 2\n    print(components)\n    for i in range(1,n+1):\n        for j in range(i+1,n+1):\n            if i!=j:\n                roads.append((i,j))\n    return roads\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1398,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    ans=n=int(input())\n    c=list(map(int,input().split()))\n    c.sort()\n    for i in range(n-1):\n        if c[i+1]-c[i]>2:\n            ans=min(ans,i+1)\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1399,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());\n    points=set()\n    for i in range(n):\n        x1,y1,x2,y2=map(int,input().split())\n        for x in range(min(x1,x2),max(x1,x2)+1):\n            for y in range(min(y1,y2),max(y1,y2)+1):\n                points.add((x,y))\n    return len(points)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1400,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, T = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    p = [1/2] * n\n    p[0] = 1\n    p[1] = 1/2\n    p[2] = 1/2\n    p[3] = 1/2\n    p[4] = 1/2\n    p[5] = 1/2\n    p[6] = 1/2\n    p[7] = 1/2\n    p[8] = 1/2\n    p[9] = 1/2\n    p[10] = 1/2\n    p[11] = 1/2\n    p[12] = 1/2\n    p[13] = 1/2\n    p[14] = 1/2\n    p[15] = 1/2\n    p[16] = 1/2\n    p[17] = 1/2\n    p[18] = 1/2\n    p[19] = 1/2\n    p[20] = 1/2\n    p[21] = 1/2\n    p[22] = 1/2\n    p[23] = 1/2\n    p[24] = 1/2\n    p[25] = 1/2\n    p[26] = 1/2\n    p[27] = 1/2\n    p[28] = 1/2\n    p[29] = 1/2\n    p[30] = 1/2\n    p[31] = 1/2\n    p[32] = 1/2\n    p[33] = 1/2\n    p[34] = 1/2\n    p[35] = 1/2\n    p[36] = 1/2\n    p[37] = 1/2\n    p[38] = 1/2\n    p[39] = 1/2\n    p[40] = 1/2\n    p[41] = ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1401,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    edges=[]\n    for i in range(n-1):\n        edges.append(list(map(int,input().split()))\n    #print(edges)\n    def dist(v,u):\n        if v==u:\n            return 0\n        if v in visited:\n            return visited[v]\n        visited[v]=a[v-1]\n        for i in range(len(edges)):\n            if edges[i][0]==v:\n                visited[v]=max(visited[v],dist(edges[i][1],u)+edges[i][2])\n        return visited[v]\n    def dfs(v,parent):\n        visited[v]=0\n        for i in range(len(edges)):\n            if edges[i][0]==v:\n                if edges[i][1]!=parent:\n                    dfs(edges[i][1],v)\n                    visited[v]=max(visited[v],visited[edges[i][1]]+edges[i][2])\n    visited={}\n    for i in range(n):\n        visited[i+1]=0\n    dfs(1,0)\n    sad_vertices=[]\n    for i in range(n):\n        if visited[i+1]>a[i]:\n            sad_vertices.append(i+1)\n    #print(sad_vertices)\n    leaves=[]\n    for i in range(n):\n        if len(edges[i])==1:\n            leaves.append(i+1)\n    #print(leaves)\n    for i in range(len(leaves)):\n        for j in range(len(edges)):\n            if edges[j][0]==leaves[i]:\n                if edges[j][1] in sad_vertices:\n                    sad_vertices.remove(edges[j][1])\n    #print(sad_vertices)\n    return len(sad_vertices)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1402,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    w = input()\n    count = 0\n    for i in range(n):\n        if s[i] == '?':\n            count += 1\n    if count == 0:\n        return 0\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1403,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, K = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    # write your code here\n    # return the minimal possible number of bacteria can remain\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1404,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mod = 998244353\n    dp = [1] * 201\n    dp[0] = 0\n    dp[201] = 0\n    for i in range(1, n):\n        if arr[i] != -1:\n            dp[arr[i]] += dp[i-1]\n            dp[arr[i]] %= mod\n            if arr[i-1] != -1:\n                dp[arr[i]] += dp[arr[i-1]]\n                dp[arr[i]] %= mod\n            if arr[i+1] != -1:\n                dp[arr[i]] += dp[arr[i+1]]\n                dp[arr[i]] %= mod\n    return dp[200]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1405,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = Counter(map(int, input().split()))\n    n = len(s)\n    a = sorted(s.keys())\n    i = 0\n    j = 1\n    while i < n-1 and j < n:\n        if a[i] + a[j] == a[i+1]:\n            i += 1\n        elif a[i] + a[j] == a[j+1]:\n            j += 1\n        else:\n            return n\n    return i+j\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1406,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,d=map(int,input().split())\n    if n%d!=0:\n        return -1\n    else:\n        buses=[]\n        for i in range(k):\n            buses.append([])\n        for i in range(n):\n            for j in range(d):\n                buses[i%k].append(i+1)\n        for i in range(k):\n            print(*buses[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1407,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, input().split())))\n    # print(matrix)\n    def is_prime(num):\n        if num == 1:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1408,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    books = []\n    for i in range(n):\n        t, w = map(int, input().split())\n        books.append((t, w))\n    books.sort(key=lambda x: x[0])\n    vertical_books = []\n    horizontal_books = []\n    total_width = 0\n    for book in books:\n        if book[0] == 1:\n            vertical_books.append(book)\n        else:\n            horizontal_books.append(book)\n            total_width += book[1]\n    vertical_books.sort(key=lambda x: x[1], reverse=True)\n    while horizontal_books and total_width <= sum(book[0] for book in vertical_books):\n        vertical_books.append(horizontal_books.pop(0))\n        total_width += horizontal_books[0][1]\n    return sum(book[0] for book in vertical_books) + sum(book[0] for book in horizontal_books)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1409,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    y = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        if y[i] >= k:\n            count += 1\n    if count >= k:\n        return 1\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1410,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    c1 = list(map(int, input().split()))\n    c2 = list(map(int, input().split()))\n    c3 = list(map(int, input().split())\n    edges = []\n    for _ in range(n-1):\n        edges.append(list(map(int, input().split()))\n    # Your code here\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1411,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,s = list(map(int,input().split()))\n    contestants = []\n    for i in range(n):\n        contestants.append(list(map(int,input().split()))\n    # Write your code here\n    type1_happiness = 0\n    type2_happiness = 0\n    for i in range(n):\n        type1_happiness += contestants[i][1]*contestants[i][0]\n        type2_happiness += contestants[i][2]*contestants[i][0]\n    if type1_happiness >= type2_happiness:\n        return type1_happiness\n    else:\n        return type2_happiness\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1412,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = [int(x) for x in input().split()]\n    coupons = []\n    for _ in range(n):\n        coupons.append(list(map(int, input().split()))\n    # Your code here\n    # return the maximum number of products and the ids of the coupons to use\n    # Example:\n    # 4 2\n    # 1 100\n    # 40 70\n    # 120 130\n    # 125 180\n    # Output: 31\n    # 1 2\n    # \n    # 3 2\n    # 1 12\n    # 15 20\n    # 25 30\n    # Output: 0\n    # 1 2\n    # \n    # 5 2\n    # 1 10\n    # 50 50\n    # 70 100\n    # 99 100\n    # Output: 21\n    # 3 4\n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1413,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(n):\n        for j in range(i,n):\n            if int(s[i:j+1])%2==0:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1414,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    table = []\n    for i in range(n):\n        table.append(input())\n    # print(table)\n    # print(len(table))\n    # print(len(table[0]))\n    # print(table[0])\n    # print(table[1])\n    # print(table[2])\n    # print(table[3])\n    # print(table[4])\n    # print(table[4][0])\n    # print(table[4][1])\n    # print(table[4][2])\n    # print(table[4][3])\n    # print(table[4][4])\n    # print(table[4][3])\n    # print(table[4][2])\n    # print(table[4][1])\n    # print(table[4][0])\n    # print(table[3][4])\n    # print(table[2][4])\n    # print(table[1][4])\n    # print(table[0][4])\n    # print(table[0][3])\n    # print(table[0][2])\n    # print(table[0][1])\n    # print(table[0][0])\n    # print(table[1][3])\n    # print(table[1][2])\n    # print(table[1][1])\n    # print(table[1][0])\n    # print(table[2][3])\n    # print(table[2][2])\n    # print(table[2][1])\n    # print(table[2][0])\n    # print(table[3][3])\n    # print(table[3][2])\n    # print(table[3][1])\n    # print(table[3][0])\n    # print(table[4][3])\n    # print(table[4][2])\n    # print(table[4][1])\n    # print(table[4][0])\n    # print(table[3][4])\n    # print(table[2][4])\n    # print(table[1][4])\n    # print(table[0][4])\n    # print(table[0][3])\n   ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1415,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y, x0, y0 = list(map(int, input().split(' ')))\n    s = input()\n    result = [0] * (len(s) + 1)\n    result[0] = 1\n    x, y = x0, y0\n    for i, c in enumerate(s):\n        if c == 'L':\n            y -= 1\n        elif c == 'R':\n            y += 1\n        elif c == 'U':\n            x -= 1\n        elif c == 'D':\n            x += 1\n        if x < 1 or x > x or y < 1 or y > y:\n            result[i+1] = 0\n        else:\n            result[i+1] = result[i] + 1\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1416,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,w=map(int,input().split())\n    a=list(map(int,input().split())\n    a.sort()\n    total=0\n    for i in range(n):\n        if i%2==0:\n            total+=a[i]\n        else:\n            total+=2*a[i]\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1417,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p=n=int(input())\n    count=0\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            count+=1\n    return count%99824353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1418,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = [0] * (n+1)\n    for i in range(2, n+1):\n        a[i] = i\n    for i in range(2, n):\n        for j in range(i+1, n+1):\n            if gcd(i, j) == 1:\n                a[i] = min(a[i], a[j])\n                a[j] = max(a[i], a[j])\n    return a[2:]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1419,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    words = input().split()\n    result = []\n    for word in words:\n        if '-' in word:\n            result.append(word.split('-'))\n        else:\n            result.append([word])\n    max_width = 0\n    for line in result:\n        max_width = max(max_width, sum(len(word) for word in line) + len(line) - 1)\n    return max_width\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1420,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,l=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    a.sort()\n    d=max(a[0],l-a[-1])\n    for i in range(1,n):\n        d=max(d,abs(a[i]-a[i-1])/2)\n    return d\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1421,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    tree = [[] for _ in range(n)]\n    for _ in range(n-1):\n        u, v = map(int, input().split())\n        tree[u-1].append(v-1)\n        tree[v-1].append(u-1)\n    def dfs(node, visited, parent, max_sum, memo):\n        if node in visited:\n            return max_sum\n        visited.add(node)\n        for child in tree[node]:\n            if child != parent:\n                max_sum = max(max_sum, dfs(child, visited, node, max_sum, memo))\n        memo[node] = max_sum\n        return max_sum\n    max_sum = dfs(0, set(), 0, {})\n    for i in range(n):\n        if i not in memo:\n            max_sum = max(max_sum, dfs(i, set(), 0, {}))\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1422,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=[i for i,j in enumerate(input(),1) if j=='1']\n    if len(a)<2:\n        return \"NO\"\n    if len(a)%2==0:\n        return \"NO\"\n    else:\n        a.sort()\n        for i in range(1,len(a),2):\n            if a[i]==a[i-1]:\n                return \"NO\"\n        return \"YES\\n\"+\" \".join(map(str,a))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1423,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R= lambda: list(map(int,input().split()))\n    n,l,r=R()\n    a=R()\n    p=R()\n    b=[]\n    for i in range(n):\n        b.append(r-a[i])\n    print(*b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1424,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k = [int(x) for x in input().split()]\n    x = [int(x) for x in input().split()]\n    count = 0\n    for i in range(m):\n        for j in range(i+1, m+1):\n            if bin(x[i]^x[j]).count('1') <= k:\n                count += 1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1425,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    arr=list(map(int,input().split()))\n    if n==1:\n        print(\"YES\")\n        print(arr[0])\n    else:\n        for i in range(n):\n            if arr[i]>sum(arr[i-1:i+2]) and arr[i]>sum(arr[i-2:i+1]):\n                print(\"NO\")\n                break\n        else:\n            print(\"YES\")\n            for i in range(n):\n                if i==0:\n                    print(arr[n-1],end=\" \")\n                elif i==n-1:\n                    print(arr[0],end=\" \")\n                else:\n                    print(arr[i],end=\" \")\n            print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1426,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    graph=[]\n    for i in range(m):\n        u,v=map(int,input().split())\n        graph.append((u,v))\n    s,t=map(int,input().split())\n    visited=[0]*n\n    visited[s-1]=1\n    queue=[s]\n    count=0\n    while queue:\n        count+=1\n        new_queue=[]\n        for i in queue:\n            for j in graph:\n                if j[0]==i and visited[j[1]-1]==0:\n                    visited[j[1]-1]=1\n                    new_queue.append(j[1])\n        queue=new_queue\n        if t in queue:\n            return count\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1427,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    A = list(map(int, input_string.split()))\n    A.sort()\n    B = [1] * n\n    B[0] = A[0]\n    for i in range(1, n):\n        B[i] = A[i] * A[i-1]\n    return sum(B) % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1428,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,C=map(int,input().split())\n    D=[[0]*C for i in range(C)]\n    c=[[0]*n for i in range(n)]\n    for i in range(C):\n        D[i]=list(map(int,input().split()))\n    for i in range(n):\n        c[i]=list(map(int,input().split())\n    # Your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1429,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,s=input().split()\n    count=0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if s[i:j]==s[i:j][::-1]:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1430,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K=map(int,input().split())\n    S=input()\n    count=0\n    for i in range(N):\n        if S[i]=='0':\n            count+=1\n        else:\n            break\n    max_count=count\n    for i in range(K):\n        l,r=map(int,input().split())\n        for j in range(l,r+1):\n            if S[j]=='0':\n                S[j]='1'\n            else:\n                S[j]='0'\n        count=0\n        for j in range(N):\n            if S[j]=='0':\n                count+=1\n            else:\n                break\n        max_count=max(max_count,count)\n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1431,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    a=list(map(int,input_string.split()))\n    count=0\n    for i in range(1,N+1):\n        count+=a.count(i)\n    if count%2==0:\n        print(0)\n    else:\n        print(1)\n        print(1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1432,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input_string.split()))\n    # Write your code here\n    return A\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1433,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    plan = []\n    for i in range(n):\n        plan.append(list(map(int, input().split()[:m]))\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if plan[i][j] == 0:\n                if i > 0 and plan[i-1][j] == 1:\n                    count += 1\n                if i < n-1 and plan[i+1][j] == 1:\n                    count += 1\n                if j > 0 and plan[i][j-1] == 1:\n                    count += 1\n                if j < m-1 and plan[i][j+1] == 1:\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1434,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    graph=[]\n    for i in range(n):\n        degree,s=map(int,input().split())\n        graph.append([degree,s])\n    edges=[]\n    for i in range(n):\n        for j in range(n):\n            if i!=j:\n                if graph[i][0]==0:\n                    continue\n                if graph[i][1]^graph[j][1]==0:\n                    edges.append((i,j))\n    print(len(edges))\n    for edge in edges:\n        print(edge[0],edge[1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1435,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s,a,c=input(),1,1\n    for i in range(len(s)-1):\n        if int(s[i])+int(s[i+1])==9:\n            s=s[:i]+'9'+s[i+2:]\n            c+=1\n    return c\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1436,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    events = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        if events[i] == -1:\n            count += 1\n        else:\n            events[i] -= 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1437,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s,ans=input(),1\n    for i in range(len(s)):\n        if s[i]<'0':\n            s=s.replace(s[i],'0')\n        elif s[i]>'9':\n            s=s.replace(s[i],'10')\n        else:\n            s=s.replace(s[i],s[i])\n    s=int(s,64)\n    for i in range(len(s)):\n        if s[i]=='0':\n            ans*=2\n        elif s[i]=='1':\n            ans*=2\n            ans+=1\n        else:\n            ans*=2\n            ans+=1\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1438,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split())\n    b=list(map(int,input().split())\n    max_cookies=0\n    for i in range(n):\n        if k>=a[i]:\n            max_cookies+=b[i]//a[i]\n            k-=b[i]%a[i]\n        else:\n            max_cookies+=k//a[i]\n            k=0\n    print(max_cookies)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1439,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    # print(n, m, a)\n    for i in range(n):\n        for j in range(i, n):\n            subseq = a[i:j+1]\n            if sum(subseq) % m == 0:\n                return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1440,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,l,ans,p=int(input()),[*map(int,input().split())][::-1],0,0\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if l[i]+l[j]+l[k]==2*l[i]:\n                    ans+=1\n                elif l[i]+l[j]+l[k]==2*l[j]:\n                    ans+=1\n                elif l[i]+l[j]+l[k]==2*l[k]:\n                    ans+=1\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1441,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    balls = list(map(int, input().split()))\n    mod = 100000007\n    dp = [1] * (n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] * (n-i) % mod\n    for i in range(2, n+1):\n        for j in range(i, n+1):\n            dp[j] = (dp[j] * (n-i) % mod + dp[j-1] * (n-i-1) % mod) % mod\n    return dp[n]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1442,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    d,p,q=list(input().split(' '))\n    s=int(input())\n    orders=[]\n    for i in range(int(input())):\n        d,p,q=list(input().split(' '))\n        orders.append((d,int(p),int(q)))\n    orders.sort(key=lambda x: (-x[1],x[0]) if x[0]=='B' else (x[1],-x[0]))\n    buy_orders=[]\n    sell_orders=[]\n    for order in orders:\n        if order[0]=='B':\n            buy_orders.append(order)\n        else:\n            sell_orders.append(order)\n    buy_orders.sort(key=lambda x: x[1])\n    sell_orders.sort(key=lambda x: x[1],reverse=True)\n    buy_orders=buy_orders[:s]\n    sell_orders=sell_orders[:s]\n    for order in buy_orders:\n        print(order[0],order[1],order[2])\n    for order in sell_orders:\n        print(order[0],order[1],order[2])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1443,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    l=list(map(int,input().split()))\n    s=input()\n    time=0\n    stamina=0\n    for i in range(n):\n        if s[i]=='G':\n            time+=5\n            stamina+=5\n        elif s[i]=='W':\n            time+=3\n            stamina+=3\n        else:\n            stamina-=1\n            if stamina<0:\n                stamina=0\n            time+=1\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1444,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n = int(input_string.pop(0))\n    x = list(map(int, input_string.pop(0).split()))\n    k = int(input_string.pop(0))\n    \n    # Calculate distances\n    distances = []\n    for i in range(n):\n        for j in range(i+1, n):\n            distances.append(abs(x[i] - x[j]))\n    \n    # Sort distances\n    distances.sort()\n    \n    # Calculate average commute time\n    avg_commute_time = sum(distances[:k]) / (k * (k-1) // 2)\n    \n    # Find k stations with minimum average commute time\n    result = []\n    for i in range(n):\n        if i not in result:\n            new_distances = distances[k:]\n            new_avg_commute_time = sum(new_distances) / ((n-k) * (n-k-1) // 2)\n            if new_avg_commute_time < avg_commute_time:\n                result.append(i+1)\n                avg_commute_time = new_avg_commute_time\n    \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1445,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    # print(n, a)\n    for i in range(n//2):\n        a[i], a[n-i-1] = a[n-i-1], a[i]\n    for i in range(n//2):\n        a[i+n//2], a[n-i-1] = a[n-i-1], a[i+n//2]\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1446,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, k = map(int, input_string.split())\n    c = list(map(int, input().split())\n    d = [[-1] * k for _ in range(k)]\n    for _ in range(m):\n        u, v, x = map(int, input().split())\n        d[u - 1][v - 1] = x\n        d[v - 1][u - 1] = x\n    for i in range(k):\n        if sum(c) != n:\n            return \"No\"\n        for j in range(k):\n            if d[i][j] == -1:\n                return \"No\"\n    return \"Yes\\n\" + \"\\n\".join(str(d[i][j] for i in range(k)) for j in range(k))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1447,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    return (1/3 if n==m else 1/2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1448,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, d = list(map(int, input().split()))\n    m = int(input())\n    for i in range(m):\n        x, y = list(map(int, input().split()))\n        if x <= n and y <= n - d:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1449,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    y=lambda:[*map(int,input().split())]\n    n,k=y()\n    a=y()\n    m=0\n    for i in range(n):\n        if a[i]>0:\n            m+=1\n    if m==0:\n        return -1\n    else:\n        return m\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1450,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if len(s) == 1:\n        return s\n    result = []\n    for i in range(len(s)):\n        if i == 0:\n            result.append(s[i])\n        elif s[i] == '0' and s[i-1] == '1':\n            result.append('1')\n        elif s[i] == '1' and s[i-1] == '0':\n            result.append('0')\n        elif s[i] == '1' and s[i-1] == '2':\n            result.append('2')\n        elif s[i] == '2' and s[i-1] == '1':\n            result.append('1')\n        else:\n            result.append(s[i])\n    return ''.join(result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1451,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    numbers = list(map(int, input().split()))\n    count = 0\n    for num in numbers:\n        if len(str(num)) <= k:\n            if all(int(digit) in [4, 7] for digit in str(num)):\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1452,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H, W = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1453,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=[int(s) for s in input().split()]\n    a=[int(s) for s in input().split()]\n    x=[0]*n\n    for i in range(n):\n        x[i]=sum(a[:i+1])\n    return x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1454,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=[]\n    for i in range(n):\n        a.append(list(map(int,input().split()))\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]==0:\n                a[i][j]=1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]==0:\n                a[i][j]=1\n    for j in range(m):\n        for i in range(n):\n            if a[i][j]==0:\n                a[i][j]=1\n    max_sum=0\n    for i in range(n):\n        for j in range(m):\n            max_sum+=a[i][j]\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1455,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    board_size = 1\n    while True:\n        valid = True\n        for i in range(n):\n            r, c = map(int, input().split())\n            for j in range(i):\n                if abs(r-r_j) + abs(c-c_j) < abs(i-j):\n                    valid = False\n                    break\n            if not valid:\n                break\n            board_size += 1\n        if valid:\n            return board_size\n        else:\n            board_size += 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1456,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    board = [list(input()) for _ in range(n)]\n    moves = []\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'o':\n                for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (-1, -1), (1, -1), (-1, 1), (1, 1), (-1, -1)]:\n                    x, y = i, j\n                    while 0 <= x < n and 0 <= y < n and board[x][y] != 'x':\n                        x, y = x + dx, y + dy\n                        if 0 <= x < n and 0 <= y < n and board[x][y] == '.':\n                            moves.append((dx, dy))\n                            break\n    if not moves:\n        print('NO')\n    else:\n        print('YES')\n        for dx, dy in moves:\n            for i in range(n):\n                for j in range(n):\n                    if (i, j) == (n // 2, n // 2):\n                        print('x', end='')\n                    elif (i - n // 2) ** 2 + (j - n // 2) ** 2 <= 2 * n - 3:\n                        print('.' if (i, j) in [(i + dx, j + dy) for dx, dy in moves] else 'x', end='')\n                print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1457,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    p = input()\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+len(p)] == p:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1458,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    for i in range(n):\n        for j in range(i+1,n):\n            if s[i:j]<s[j:i:-1]:\n                print(\"YES\")\n                print(i+1,j)\n                return\n    print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1459,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    distances = list(map(int, input().split()))\n    s, t = map(int, input().split())\n    s = s % n\n    t = t % n\n    if s == t:\n        return 0\n    if s > t:\n        s, t = t, s\n    distances.append(distances[0])\n    total_distance = sum(distances)\n    total_distance -= distances[s] + distances[t]\n    return total_distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1460,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    k=0\n    output=[]\n    for i in range(n):\n        x,y=map(int,input().split())\n        output.append((x,y))\n    return k,output\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1461,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, pos  = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    w = list(map(int, input().split()))\n    s = [0] * n\n    m = [float('inf')] * n\n    for i in range(n):\n        s[i] = w[i]\n        m[i] = w[i]\n    for i in range(1, n):\n        s[f[i]] += s[i]\n        m[f[i]] = min(m[f[i]], w[i])\n    for i in range(1, n):\n        if m[i] == float('inf'):\n            m[i] = m[f[i]]\n    for i in range(k):\n        s = [0] * n\n        m = [float('inf')] * n\n        for j in range(n):\n            if f[j] == -1:\n                s[j] = 0\n                m[j] = 0\n            else:\n                s[f[j]] += w[j]\n                m[f[j]] = min(m[f[j]], w[j])\n        for j in range(n):\n            if m[j] == float('inf'):\n                m[j] = m[f[j]]\n    for i in range(n):\n        print(s[i], m[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1462,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    cards=input().split()\n    count=0\n    for i in range(k):\n        count+=cards.count(input_string[i])\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1463,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    grid = []\n    for i in range(n):\n        row = list(map(int, input().split()))\n        grid.append(row)\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] != 1:\n                found = False\n                for k in range(n):\n                    if grid[i][j] - grid[i][k] in grid[i]:\n                        found = True\n                        break\n                if not found:\n                    for k in range(n):\n                    if grid[j][i] - grid[k][i] in grid[j]:\n                        found = True\n                        break\n                if not found:\n                    return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1464,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    titles=[]\n    for i in range(n):\n        titles.append(input())\n    for i in range(26):\n        if str(chr(i+97)) not in titles:\n            return chr(i+97)\n    return \"z\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1465,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    input_string=input().strip()\n    if input_string.count('L')%2==0:\n        return -1\n    else:\n        return 1,1\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1466,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=list(map(int,input().split()))\n    edges=[]\n    for i in range(m):\n        edges.append(list(map(int,input().split()))\n    edges.sort(key=lambda x:x[2])\n    dp=[[float('inf') for j in range(n)] for i in range(n)]\n    dp[0]=[0 for j in range(n)]\n    for i in range(n):\n        for j in range(n):\n            for e in edges:\n                if dp[i][j]>e[2]:\n                    dp[i][j]=e[2]\n                else:\n                    dp[i][j]=dp[i][j]\n    for i in range(n):\n        for j in range(n):\n            for e in edges:\n                if dp[i][j]>dp[i][e[0]]+e[2]:\n                    dp[i][j]=dp[i][e[0]]+e[2]\n                if dp[i][j]>dp[e[1]][j]:\n                    dp[i][j]=dp[e[1]][j]\n    count=0\n    for i in range(n):\n        if dp[0][i]!=float('inf'):\n            count+=1\n    print(count)\n    for i in range(n):\n        for e in edges:\n            if dp[0][e[0]]+e[2]==dp[0][e[1]]:\n                print(edges.index(e)+1)\n                k-=1\n                if k==0:\n                    break\n    if k>0:\n        print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1467,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    readints=lambda:list(map(int, input().strip('\\\n    ).split()))\n    n=int(input_string.pop(0))\n    a=readints()\n    segments=[]\n    for i in range(n):\n        segments.append(set(a))\n    max_segments=1\n    for i in range(1, n):\n        for j in range(i):\n            segments[i].update(segments[j])\n        if len(segments[i])==n:\n            max_segments+=1\n            break\n    if max_segments==1:\n        print(-1)\n    else:\n        print(max_segments)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1468,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    hashtags=[]\n    for i in range(n):\n        hashtags.append(input())\n    hashtags.sort()\n    for i in range(n):\n        print(hashtags[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1469,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    L=int(input())\n    N=L\n    M=L-1\n    print(N,M)\n    for i in range(M):\n        u,v,w=map(int,input().split())\n        print(u,v,w)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1470,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=int(input())\n    min_operations=0\n    while x>6:\n        x-=6\n        min_operations+=1\n    if x==6:\n        min_operations=1\n    elif x==1:\n        min_operations=0\n    else:\n        min_operations=2\n    print(min_operations)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1471,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    edges = []\n    for i in range(N - 1):\n        u, v, w = map(int, input().split())\n        edges.append((u, v, w))\n    # Your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1472,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,X,Y=map(int,input().split())\n    adj_list = [[] for i in range(N+1)]\n    for i in range(1,N):\n        adj_list[i].append(i+1)\n    adj_list[X].append(Y)\n    adj_list[Y].append(X)\n    for i in range(1,N):\n        for j in range(i+1,N):\n            adj_list[i].append(j)\n            adj_list[j].append(i)\n    for k in range(1,N):\n        count=0\n        for i in range(1,N):\n            for j in range(i+1,N):\n                if k==1:\n                    count+=1\n                elif k==2:\n                    if i!=X and j!=Y and i!=Y and j!=X:\n                        count+=1\n                elif k==3:\n                    if i!=X and j!=Y and i!=Y and j!=X:\n                        count+=1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1473,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    queue=[]\n    for i in range(n):\n        a,b=map(int,input().split())\n        queue.append([a,b])\n    for i in range(n):\n        if queue[i][0]==0:\n            queue[i][0]=i+1\n        if queue[i][1]==0:\n            queue[i][1]=i+1\n    for i in range(n):\n        if queue[i][0]==0:\n            queue[i][0]=i+1\n        if queue[i][1]==0:\n            queue[i][1]=i+1\n    for i in range(n):\n        if queue[i][0]>i+1:\n            queue[i][0]=i+1\n        if queue[i][1]>i+1:\n            queue[i][1]=i+1\n    for i in range(n):\n        print(queue[i][0],end=\" \")\n        print(queue[i][1],end=\" \")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1474,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    heights = list(map(int, input().split()))\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        if heights[i] > heights[i-1]:\n            dp[i] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if heights[i] > heights[j]:\n                dp[i] = (dp[i] + dp[j]) % 1000000007\n    return dp[-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1475,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, b, k, x = f()\n    digits = f()\n    count = 0\n    for i in range(1, x+1):\n        if i == k:\n            count += 1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1476,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return 1, [1]\n    if n == 2:\n        return 2, [1, 2]\n    if n == 3:\n        return 3, [1, 3, 2]\n    if n == 4:\n        return 4, [1, 4, 3, 2]\n    if n == 5:\n        return 5, [1, 5, 3, 5, 2, 4]\n    if n == 6:\n        return 6, [1, 5, 3, 6, 2, 4, 6, 5]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1477,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().split()]\n    tasks = [int(x) for x in input().split()]\n    dependencies = [tuple(int(x) for x in input().split()) for _ in range(m)]\n    # create a dictionary to store the dependencies\n    dependencies_dict = {i: [] for i in range(n)}\n    for dep in dependencies:\n        dependencies_dict[dep[1]].append(dep[0])\n    # create a list of tasks that can only be executed on the coprocessor\n    coprocessor_tasks = [i for i, t in enumerate(tasks) if t == 1]\n    # create a list of tasks that can only be executed on the main processor\n    main_tasks = [i for i, t in enumerate(tasks) if t == 0]\n    # create a list of tasks that have no dependencies\n    no_dependencies = [i for i in range(n) if i not in dependencies_dict]\n    # initialize the number of coprocessor calls\n    coprocessor_calls = 0\n    # initialize the number of main processor calls\n    main_calls = 0\n    # initialize the number of tasks executed on the coprocessor\n    coprocessor_executed = 0\n    # initialize the number of tasks executed on the main processor\n    main_executed = 0\n    # initialize the number of tasks that can be executed on the coprocessor\n    coprocessor_available = len(coprocessor_tasks)\n    # initialize the number of tasks that can be executed on the main processor\n    main_available = len(main_tasks)\n    # initialize the number of tasks that have no dependencies\n    no_dependencies_available = len(no_dependencies)\n    # initialize the number of tasks that have dependencies\n    dependencies_available = 0\n    # initialize the number of tasks that have not been executed\n    not_executed = n\n    # while there are tasks that have not been executed\n    while not_executed > 0:\n        # if there are tasks that can be executed on the coprocessor\n        if coprocessor_available > 0:\n            # execute the tasks on the coprocessor\n            coprocessor_calls += 1\n           ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1478,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input().split(',')\n    max_depth = 0\n    for i in range(len(t)):\n        if t[i].isdigit():\n            max_depth = max(max_depth, int(t[i]))\n    for i in range(max_depth+1):\n        comments = []\n        for j in range(len(t)):\n            if t[j].isdigit() and int(t[j]) == i:\n                comments.append(t[j+1])\n        print(' '.join(comments))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1479,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    field=[]\n    for i in range(n):\n        field.append(list(input()))\n    for i in range(n):\n        for j in range(m):\n            if field[i][j]=='L':\n                field[i][j]='L'\n            elif field[i][j]=='R':\n                field[i][j]='R'\n            elif field[i][j]=='U':\n                field[i][j]='U'\n            elif field[i][j]=='D':\n                field[i][j]='D'\n    for i in range(n):\n        print(field[i].count('L')+field[i].count('R')+field[i].count('U')+field[i].count('D'))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1480,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split())\n    leader=1\n    for i in range(k):\n        leader=(leader+a[i])%n\n        print(leader)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1481,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        for j in range(n):\n            if input_string[i][j] == 'o':\n                count = 0\n                if i > 0 and input_string[i-1][j] == 'o':\n                    count += 1\n                if i < n-1 and input_string[i+1][j] == 'o':\n                    count += 1\n                if j > 0 and input_string[i][j-1] == 'o':\n                    count += 1\n                if j < n-1 and input_string[i][j+1] == 'o':\n                    count += 1\n                if count % 2 != 0:\n                    return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1482,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda:map(int,input().split())\n    n,k=I()\n    a=I()\n    segments=list(range(1,n*k+1))\n    result=[]\n    for i in range(k):\n        result.append(a[i])\n        segments.remove(a[i])\n    print(*result)\n    print(*segments)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1483,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    p=list(map(int,input().split()))\n    for i in range(1,n+1):\n        if p.count(i)==0:\n            print(i)\n        else:\n            print(p[p.index(i)])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1484,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    mod = 998244353\n    dp = [1] * (n + 1)\n    for i in range(n):\n        if a[i] == -1:\n            for j in range(1, k + 1):\n                dp[i + 1] = (dp[i + 1] + dp[i]) % mod\n        else:\n            for j in range(i + 1, n):\n                if a[j] == -1:\n                    dp[j + 1] = (dp[j + 1] + dp[i]) % mod\n    return dp[n]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1485,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    result = 0\n    for i in range(n):\n        result += (m - a[i]) // 2 + 1\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1486,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=list(map(int,input().split()))\n    x.sort()\n    min_cost=[]\n    max_cost=[]\n    for i in range(n):\n        min_cost.append(x[i]-x[0])\n        max_cost.append(x[-1]-x[i])\n    for i in range(1,n):\n        min_cost[i]=min(min_cost[i],x[i]-x[0])\n        max_cost[i]=max(max_cost[i],x[-1]-x[i])\n    for i in range(n):\n        print(min_cost[i],max_cost[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1487,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s1 = input()\n    s2 = input()\n    n = len(s1)\n    if s1 == s2:\n        print(s1)\n    else:\n        for i in range(n):\n            if s1[i] != s2[i]:\n                s1 = s1[:i] + '1' + s1[i+1:]\n                if s1 == s2:\n                    print(s1)\n                    break\n        else:\n            print(\"impossible\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1488,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    total_distance = 0\n    for i in range(n-1):\n        total_distance += abs(a[i] - a[i+1])\n    return total_distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1489,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    # print(points)\n    mod = 10**9 + 7\n    def count_pictures(points):\n        def count_vertical_lines(points):\n            vertical_lines = set()\n            for x, y in points:\n                vertical_lines.add(x)\n            return len(vertical_lines)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1490,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=(int(z) for z in input().split())\n    a=list(map(int,input().split()))\n    a.sort()\n    count=0\n    for i in range(n,10**9):\n        if i not in a:\n            if sum(a)+i<=m:\n                a.append(i)\n                count+=1\n            else:\n                break\n    print(count)\n    print(*a[:count])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1491,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    piles = list(map(int, input().split()))\n    # your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1492,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,w=map(int,input().split())\n    matrix=[]\n    for i in range(h):\n        matrix.append(list(input()))\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j]=='X':\n                matrix[i][j]='.'\n    for i in range(h):\n        for j in range(w):\n            if matrix[i][j]=='X':\n                for k in range(max(0,i-1),min(i+2,h)):\n                    for l in range(max(0,j-1),min(j+2,w)):\n                        if matrix[k][l]=='.':\n                            matrix[k][l]='X'\n    for i in range(h):\n        print(''.join(matrix[i]))\n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1493,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    board = [input().split() for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == \".\":\n                board[i][j] = \"W\" if i % 2 == j % 2 else \"B\"\n    return board\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1494,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s, p = input(), input()\n    n = len(s)\n    ans = [0] * (n+1)\n    for i in range(n+1):\n        for j in range(n-i):\n            if s[j:j+len(p)] == p:\n                ans[i] = max(ans[i], 1)\n        for k in range(1, n-i+1):\n            if s[j:j+len(p)] == p:\n                ans[i] = max(ans[i], ans[i-k] + 1)\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1495,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    read = lambda: map(int, input().split())\n    n = int(input_string.pop(0))\n    a = list(map(int, input_string))\n    min_ops = 0\n    while len(set(a)) != 1:\n        min_ops += 1\n        a = [x // 2 for x in a]\n    return min_ops\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1496,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k, s = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split())\n    gadgets = []\n    for _ in range(m):\n        gadgets.append(list(map(int, input().split()))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1497,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    room = []\n    for i in range(n):\n        room.append(list(input()))\n    max_rows = 0\n    for j in range(n):\n        count = 0\n        for i in range(n):\n            if room[i][j] == '1':\n                count += 1\n        if count == n:\n            max_rows += 1\n    return max_rows\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1498,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    c=[]\n    for i in range(b):\n        c.append(list(map(int,input().split()))\n    for i in range(b):\n        if i==0:\n            if c[i][0]==1:\n                print(sum(range(1,c[i][1]+1))\n            else:\n                print(-1)\n        else:\n            if c[i][0]-c[i-1][0]==1:\n                if c[i][1]<=c[i-1][1]:\n                    print(sum(range(1,c[i][1]+1))\n                else:\n                    print(-1)\n            else:\n                print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1499,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    seats = [i for i in range(1, 2*n+1)]\n    window_seats = [i for i in range(1, 2*n+1, 2)]\n    non_window_seats = [i for i in range(2, 2*n+1, 2)]\n    result = []\n    for i in range(1, m+1):\n        if i <= n:\n            result.append(window_seats[i-1])\n        else:\n            result.append(non_window_seats[i-n-1])\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1501,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = list(map(int, input().split()))\n    p = input()\n    y = list(map(int, input().split()))\n    mod = 10**9 + 7\n    count = 0\n    for i in range(1, n-len(p)+1):\n        if all(p == input_string[i:i+len(p)]):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1502,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 4\n    elif n==4:\n        return 7\n    elif n==5:\n        return 13\n    elif n==6:\n        return 24\n    elif n==7:\n        return 44\n    elif n==8:\n        return 81\n    elif n==9:\n        return 169\n    elif n==10:\n        return 378\n    elif n==11:\n        return 760\n    elif n==12:\n        return 1605\n    elif n==13:\n        return 3603\n    elif n==14:\n        return 8075\n    elif n==15:\n        return 20485\n    else:\n        return \"Invalid input\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1503,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    neighbors = []\n    for i in range(m):\n        neighbors.append(list(map(int, input().split()))\n    # Your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1504,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        l1, r1 = map(int, input().split())\n        l2, r2 = map(int, input().split())\n        steps = 0\n        while k > 0:\n            if l1 > r1:\n                l1 -= 1\n                steps += 1\n            elif r1 < l1:\n                r1 += 1\n                steps += 1\n            if l2 > r2:\n                l2 -= 1\n                steps += 1\n            elif r2 < l2:\n                r2 += 1\n                steps += 1\n            else:\n                break\n            k -= (r1 - l1) * (r2 - l2)\n        print(steps)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1505,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    px, py, vx, vy, a, b, c, d = list(map(int, input().split(' ')))\n    # Calculate the coordinates of the triangle vertex opposite to the base\n    vx_opposite = -vy\n    vy_opposite = vx\n    # Calculate the coordinates of the triangle vertex\n    x_triangle = px + vx\n    y_triangle = py + vy\n    # Calculate the coordinates of the rectangle vertex\n    x_rectangle = px - c * vx_opposite\n    y_rectangle = py - c * vy_opposite\n    # Calculate the coordinates of the rectangle vertices\n    x1_rectangle = x_rectangle + d\n    y1_rectangle = y_rectangle\n    x2_rectangle = x_rectangle + c\n    y2_rectangle = y_rectangle + d\n    x3_rectangle = x_rectangle\n    y3_rectangle = y_rectangle + d\n    x4_rectangle = x_rectangle\n    y4_rectangle = y_rectangle\n    # Calculate the coordinates of the triangle vertices\n    x1_triangle = x_triangle - a\n    y1_triangle = y_triangle - b\n    x2_triangle = x_triangle + a\n    y2_triangle = y_triangle - b\n    x3_triangle = x_triangle\n    y3_triangle = y_triangle\n    # Output the coordinates of the arrow points\n    print(f\"{x1_triangle:.9f} {y1_triangle:.9f}\")\n    print(f\"{x2_rectangle:.9f} {y2_rectangle:.9f}\")\n    print(f\"{x3_triangle:.9f} {y3_triangle:.9f}\")\n    print(f\"{x2_rectangle:.9f} {y2_rectangle:.9f}\")\n    print(f\"{x4_rectangle:.9f} {y4_rectangle:.9f}\")\n    print(f\"{x3_triangle:.9f} {y3_triangle:.9f}\")\n    print(f\"{x1_triangle:.9f} {y1_triangle:.9f}\")\n    print(f\"{x2_",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1506,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    M = 10**9 + 7\n    f_a = 0\n    for i in range(1, n):\n        if a[M-1] < a[i]:\n            f_a += a[M-1]\n            M = i\n    return f_a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1507,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k= input().split()\n    n = int(n)\n    k = int(k)\n    s = input()\n    #print(n, k, s)\n    doors = [False] * 26\n    for i in range(n):\n        if doors[ord(s[i]) - ord('A')]:\n            doors[ord(s[i]) - ord('A')] = False\n        else:\n            doors[ord(s[i]) - ord('A')] = True\n    for i in range(k):\n        if not doors[i]:\n            return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1508,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = sorted(input().split(), key=int)\n    n = len(a)\n    a.reverse()\n    for i in range(n):\n        a[i] = str(int(a[i]) + i)\n    a.sort(key=int)\n    return ' '.join(a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1509,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input()) + 1\n    a = list(map(int, input().split()))\n    f = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            f[i][j] = f[j][i] = 1\n    for l in range(1, n):\n        for r in range(l, n):\n            for i in range(l, r):\n                for j in range(i+1, r+1):\n                    if a[i] <= a[j]:\n                        f[i][j] += f[i][i] + f[j][r]\n                    else:\n                        f[i][j] += f[i+1][r]\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            result += f[i][j]\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1510,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n, m = R()\n    a = list(R())\n    b = list(R())\n    min_a = min(a)\n    max_b = max(b)\n    operations = 0\n    for i in range(m):\n        if min_a < max_b:\n            operations += max_b - min_a\n            min_a = min(min_a, max_b)\n        else:\n            break\n    return operations\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1511,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    instructions = [list(map(int, input().split()) for _ in range(n))\n    cores = [0] * n\n    cells = [0] * k\n    result = [0] * n\n    for i in range(n):\n        for j in range(m):\n            if cells[instructions[i][j] - 1] == 1:\n                cores[i] = j + 1\n                result[i] = j + 1\n                break\n            elif cells[instructions[i][j] - 1] == 0:\n                cells[instructions[i][j] - 1] = 1\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1512,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    p.sort()\n    for i in range(n-1, 0, -1):\n        if p[i] > p[i-1]:\n            return p[i]\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1513,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    broken_segments=list(map(int,input().split()))\n    broken_segments.sort()\n    broken_segments.append(m+1)\n    broken_segments.insert(0,0)\n    total_length=0\n    for i in range(1,len(broken_segments)):\n        total_length+=broken_segments[i]-broken_segments[i-1]\n    if total_length<=k:\n        return total_length\n    else:\n        return k\n    #return total_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1514,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    b_prime = list(map(int, input().split()))\n    c_prime = list(map(int, input().split()))\n    a = []\n    for i in range(N-1):\n        if b_prime[i] > c_prime[i]:\n            a.append(b_prime[i])\n            a.append(c_prime[i])\n        else:\n            a.append(c_prime[i])\n            a.append(b_prime[i])\n    print(a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1515,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p, k = map(int, input().split())\n    if p == 1:\n        return \"Impossible\"\n    if k == 1:\n        return \"1\"\n    if k == 2:\n        return \"2\"\n    if k == 3:\n        return \"3\"\n    if k == 4:\n        return \"4\"\n    if k == 5:\n        return \"5\"\n    if k == 6:\n        return \"6\"\n    if k == 7:\n        return \"7\"\n    if k == 8:\n        return \"8\"\n    if k == 9:\n        return \"9\"\n    if k == 10:\n        return \"10\"\n    if k == 11:\n        return \"11\"\n    if k == 12:\n        return \"12\"\n    if k == 13:\n        return \"13\"\n    if k == 14:\n        return \"14\"\n    if k == 15:\n        return \"15\"\n    if k == 16:\n        return \"16\"\n    if k == 17:\n        return \"17\"\n    if k == 18:\n        return \"18\"\n    if k == 19:\n        return \"19\"\n    if k == 20:\n        return \"20\"\n    if k == 21:\n        return \"21\"\n    if k == 22:\n        return \"22\"\n    if k == 23:\n        return \"23\"\n    if k == 24:\n        return \"24\"\n    if k == 25:\n        return \"25\"\n    if k == 26:\n        return \"26\"\n    if k == 27:\n        return \"27\"\n    if k == 28:\n        return \"28\"\n    if k == 29:\n        return \"29\"\n    if k == 30:\n        return \"30\"\n    if k == 31:\n        return \"31\"\n    if k == 32:\n        return \"32\"\n    if k ==",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1516,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                result += f(a[i], a[j])\n    return result % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1517,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    count = 0\n    for i in range(1, n+1):\n        count += (n-i) * i\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1518,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I = lambda : list(map(int,input().split()))\n    n = int(input_string.pop(0))\n    a = I()\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    for i in range(2,int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i*i,n+1,i):\n                primes[j] = False\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if primes[j-i] and a[j] < a[i]:\n                a[i],a[j] = a[j],a[i]\n                count += 1\n                if count > 5*n:\n                    break\n                print(i+1,j+1)\n                if count == 5*n:\n                    break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1519,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l ,a = map(int, input().split())\n    t = []\n    l = []\n    for i in range(n):\n        t.append(list(map(int, input().split()))\n    t.sort()\n    breaks = 0\n    for i in range(n):\n        if t[i] + l[i] < t[i+1]:\n            breaks += 1\n            if t[i] + l[i] + a <= t[i+1]:\n                breaks += 1\n    return breaks\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1520,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    strings = []\n    for i in range(n):\n        strings.append(input())\n    result = strings[0]\n    for i in range(1, n):\n        result = result + strings[i] + result\n    max_beauty = 1\n    current_beauty = 1\n    for i in range(len(result)):\n        if result[i] == result[i+1]:\n            current_beauty += 1\n        else:\n            max_beauty = max(max_beauty, current_beauty)\n            current_beauty = 1\n    return max_beauty\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1521,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p,n=map(int,input().split())\n    buckets=[]\n    for i in range(p):\n        buckets.append([])\n    for i in range(n):\n        x=int(input())\n        if len(buckets[x%p])==0:\n            buckets[x%p].append(x)\n        else:\n            return i\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1522,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(n-1):\n        if s[2*i]!=s[2*i+1].lower():\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1523,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split())\n    b=list(map(int,input().split())\n    jobs=set(range(1,k+1))\n    time=0\n    for i in range(n):\n        if a[i] not in jobs:\n            time+=b[i]\n            jobs.remove(a[i])\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1524,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = input()\n    n = len(S)\n    left_child = 0\n    right_child = 1\n    result = [0] * n\n    result[0] = left_child\n    result[n-1] = right_child\n    for i in range(1, n-1):\n        if S[i] == 'L':\n            left_child += 1\n            result[i] = left_child\n        else:\n            right_child += 1\n            result[i] = right_child\n    for i in range(n-1):\n        print(result[i], end=' ')\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1525,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,w,k=map(int,input().split())\n    count=0\n    for i in range(1,h+1):\n        if i%k==0:\n            count+=1\n    print(count%1000000000)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1526,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=list(map(int,input().split()))\n    a=sorted(a)\n    if a[0]==a[1]==a[2]:\n        return 0\n    elif a[0]==a[1]:\n        return 1\n    elif a[1]==a[2]:\n        return 1\n    else:\n        return 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1527,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W=map(int,input().split())\n    S=[]\n    for i in range(H):\n        S.append(list(input()))\n    #print(S)\n    def dfs(x,y,visited,depth):\n        if x<0 or x>=H or y<0 or y>=W or S[x][y]==\"#\" or visited[x][y]:\n            return depth\n        visited[x][y]=True\n        if S[x][y]==\".\" and (x,y) not in visited:\n            depth+=1\n            visited.add((x,y))\n            return max(dfs(x+1,y,visited,depth),dfs(x-1,y,visited,depth),dfs(x,y+1,visited,depth),dfs(x,y-1,visited,depth))\n        return depth\n    visited=[[False for _ in range(W)] for _ in range(H)]\n    start=0,0\n    end=H-1,W-1\n    return dfs(start[0],start[1],visited,0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1528,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,X = map(int,input().split())\n    burger = \"P\"*N\n    layers = burger.split(\"P\")\n    patties = 0\n    for i in range(X):\n        patties += layers.count(\"P\")\n        layers = [layers[j:j+2] for j in range(0,len(layers),2)]\n        layers = [\"\".join(layers[j:j+2]) for j in range(0,len(layers),2)]\n    return patties\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1529,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    for i in range(len(input_string)):\n        if input_string[i].startswith(\"miao.\") and input_string[i].endswith(\"lala.\"):\n            print(\"OMG>.< I don't know!\")\n        elif input_string[i].endswith(\"lala.\"):\n            print(\"Freda's\")\n        elif input_string[i].startswith(\"miao.\"):\n            print(\"Rainbow's\")\n        else:\n            print(\"OMG>.< I don't know!\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1531,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    if n==2:\n        print(a[0]+a[1],2)\n        print(1)\n        return\n    elif n==3:\n        print(a[0]+a[1]+a[2],3)\n        print(1,2)\n        return\n    elif n==4:\n        print(a[0]+a[1]+a[2]+a[3],4)\n        print(1,2,3\n        return\n    else:\n        a.sort()\n        k=0\n        for i in range(n-2):\n            if a[i]==a[n-1]:\n                k=i+1\n                break\n        if k==0:\n            k=n-2\n        if k==1:\n            print(a[0]+a[1]+a[2]+a[n-1],3)\n            print(1,2,n)\n        else:\n            print(a[0]+a[1]+a[k]+a[n-1],n-k)\n            print(1,k,n)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1532,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    S = set(range(1, n+1))\n    I = []\n    for k in range(2, n+1):\n        min_imp = float('inf')\n        for subset in itertools.combinations(S, k):\n            gcd_list = [gcd(a, b) for a, b in itertools.combinations(subset, 2)]\n            min_imp = min(min_imp, max(gcd_list))\n        I.append(min_imp)\n    return I\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1533,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    names = []\n    for i in range(n):\n        names.append(input())\n    for i in range(n):\n        for j in range(i):\n            if names[i] == names[j]:\n                print(\"YES\")\n                break\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1534,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    count_a = s.count('a')\n    count_b = s.count('b')\n    if count_a == 0 or count_b == 0:\n        return max(count_a, count_b)\n    else:\n        return min(count_a, count_b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1535,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x,y=list(map(int,input().split()))\n    stormtroopers=[]\n    for i in range(n):\n        stormtroopers.append(list(map(int,input().split()))\n    #print(stormtroopers)\n    min_shots=float('inf')\n    for i in range(n):\n        for j in range(i+1,n):\n            x1,y1=stormtroopers[i]\n            x2,y2=stormtroopers[j]\n            if abs(x1-x)<=abs(y1-y) and abs(x2-x)<=abs(y2-y):\n                min_shots=min(min_shots,abs(x1-x)+abs(y1-y)+abs(x2-x2)+abs(y2-y))\n            elif abs(x1-x)<=abs(y1-y):\n                min_shots=min(min_shots,abs(x1-x)+abs(y1-y))\n            else:\n                min_shots=min(min_shots,abs(x2-x)+abs(y2-y))\n    return min_shots\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1536,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    points=[]\n    for i in range(n):\n        x,y,z=map(int,input().split())\n        points.append((x,y,z))\n    pairs=[]\n    for i in range(n//2):\n        pairs.append((i+1,n-i))\n    return pairs\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1537,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(input()))\n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1538,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    count=0\n    for i in range(n):\n        if i==0:\n            count+=1\n        else:\n            if a[i]>a[i-1]:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1539,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n = int(input())\n    l = list(f())\n    d = list(f())\n    max_length = max(l)\n    count = l.count(max_length)\n    if n == 1 or (n == 2 and l[0] == l[1]):\n        return 0\n    if count >= n // 2:\n        return 0\n    else:\n        return sum(d)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1540,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda:map(int, input().split())\n    n, m, k = R()\n    a = [R() for _ in range(n)]\n    log = [R() for _ in range(k)]\n    messages = [set() for _ in range(n)]\n    for i in range(k):\n        x, y = log[i]\n        messages[x-1].add(y-1)\n    result = [0] * n\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                result[i] += len(messages[j])\n    print(*result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1541,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    pivot=s.index(\"^\")\n    left_sum=0\n    right_sum=0\n    for i in range(pivot):\n        if s[i]==\"=\":\n            left_sum+=0\n        elif s[i]==\"^\":\n            left_sum+=0\n        else:\n            left_sum+=int(s[i])\n    for i in range(pivot+1,len(s)):\n        if s[i]==\"=\":\n            right_sum+=0\n        elif s[i]==\"^\":\n            right_sum+=0\n        else:\n            right_sum+=int(s[i])\n    if left_sum==right_sum:\n        print(\"balance\")\n    elif left_sum>right_sum:\n        print(\"left\")\n    else:\n        print(\"right\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1542,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    x = list(map(int, input().split()))\n    q = int(input())\n    m = list(map(int, input().split()))\n    result = []\n    for i in range(q):\n        count = 0\n        for j in range(n):\n            if m[i] >= x[j]:\n                count += 1\n        result.append(count)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1543,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=[]\n    c=[]\n    for i in range(n):\n        a,b=map(int,input().split())\n        x.append(a)\n        c.append(b)\n    x.sort()\n    c.sort()\n    byteland=[]\n    berland=[]\n    disputed=[]\n    for i in range(n):\n        if c[i]=='B':\n            berland.append(x[i])\n        elif c[i]=='R':\n            byteland.append(x[i])\n        else:\n            disputed.append(x[i])\n    byteland.sort()\n    berland.sort()\n    disputed.sort()\n    min_cost=0\n    for i in range(len(byteland)-1):\n        min_cost+=abs(byteland[i+1]-byteland[i])\n    for i in range(len(berland)-1):\n        min_cost+=abs(berland[i+1]-berland[i])\n    for i in range(len(disputed)-1):\n        min_cost+=abs(disputed[i+1]-disputed[i])\n    print(min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1544,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1545,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    cin=lambda: list(map(int,input().split()))\n    n=len(input_string)\n    a=cin()\n    max_len=max(a)\n    count=0\n    max_len_substring=0\n    min_substrings=n+1\n    for i in range(1,n+1):\n        count+=1\n        max_len_substring=max(max_len_substring,i)\n        min_substrings=min(min_substrings,i)\n        for j in range(i,n+1):\n            if sum(a[:j])==n:\n                count+=1\n                max_len_substring=max(max_len_substring,j-i+1)\n                min_substrings=min(min_substrings,j-i+1)\n    return count%(10**9+7,max_len_substring,min_substrings\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1546,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    pairs = [list(map(int, input().split())) for _ in range(2*n)]\n    # print(pairs)\n    # print(n)\n    # print(len(pairs))\n    # print(len(pairs)//2)\n    # print(len(pairs)%2)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"1 2\"\n    if n == 3:\n        return \"1 2 3\"\n    if n == 4:\n        return \"1 2 3 4\"\n    if n == 5:\n        return \"1 2 3 4 5\"\n    if n == 6:\n        return \"1 2 4 5 3 6\"\n    if n == 7:\n        return \"1 2 3 4 5 6 7\"\n    if n == 8:\n        return \"1 2 3 4 5 6 7 8\"\n    if n == 9:\n        return \"1 2 3 4 5 6 7 8 9\"\n    if n == 10:\n        return \"1 2 3 4 5 6 7 8 9 10\"\n    if n == 11:\n        return \"1 2 3 4 5 6 7 8 9 10 11\"\n    if n == 12:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12\"\n    if n == 13:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13\"\n    if n == 14:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14\"\n    if n == 15:\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 1",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1547,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    matrix=[[0]*m for i in range(n)]\n    for i in range(k):\n        query=input().split()\n        if query[0]=='1':\n            r,a=map(int,query[1:])\n            for j in range(m):\n                matrix[r-1][j]=a\n        else:\n            c,a=map(int,query[1:])\n            for i in range(n):\n                matrix[i][c-1]=a\n    for i in range(n):\n        print(*matrix[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1548,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    sticks = list(map(int, input().split()))\n    sticks.sort(reverse=True)\n    max_x = 0\n    max_y = 0\n    for i in range(n):\n        if i % 2 == 0:\n            max_x += sticks[i]\n        else:\n            max_y += sticks[i]\n    return max_x * max_x + max_y * max_y\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1549,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, q = map(int, input_string.split())\n    a = list(map(int, input().split()))\n    result = []\n    for _ in range(q):\n        k = int(input())\n        count = [0] * m\n        for i in range(n):\n            count[a[i]-1] += 1\n        min_count = min(count)\n        for i in range(m):\n            if count[i] == min_count:\n                result.append(i+1)\n                break\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1550,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    input_string = input()\n    input_list = list(input_string)\n    input_list = [int(i) for i in input_list]\n    min_num = input_list\n    for i in range(n):\n        for j in range(n):\n            if input_list[j] == 9:\n                input_list[j] = 0\n            else:\n                input_list[j] += 1\n            if input_list < min_num:\n                min_num = input_list\n            input_list = input_list[1:] + input_list[:1]\n            input_list[0], input_list[-1] = input_list[-1], input_list[0]\n    return ''.join(str(i for i in min_num)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1551,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, vl = list(map(int, input().split()))\n    people = []\n    for _ in range(n):\n        x, v, t = list(map(int, input().split()))\n        people.append((x, v, t))\n    people.sort(key=lambda x: x[0])\n    left, right = 0, 10**6\n    while left <= right:\n        mid = (left + right) / 2\n        time = 0\n        for x, v, t in people:\n            time += (mid - x) / v\n        if time >= 10**6:\n            left = mid\n        else:\n            right = mid - 10**-6\n    return left\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1552,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    t = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i != j and i != k and j != k:\n                    if t[i] == 1 and t[j] == 2 and t[k] == 3:\n                        count += 1\n    print(count)\n    if count == 0:\n        print(\"0\")\n    else:\n        for i in range(n):\n            for j in range(n):\n                for k in range(n):\n                    if i != j and i != k and j != k:\n                        if t[i] == 1 and t[j] == 2 and t[k] == 3:\n                            print(i+1, j+1, k+1)\n                            break\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1553,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, h = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    k = 1\n    for i in range(n):\n        if a[i] <= h:\n            k += 1\n        else:\n            break\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1554,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = 1\n        for j in range(i):\n            if a[i] == a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_len = max(dp)\n    if max_len < 2:\n        print(-1)\n        return\n    ans = []\n    for i in range(n + 1):\n        if dp[i] == max_len:\n            ans.append(i)\n    for i in range(len(ans) - 1):\n        print(ans[i], ans[i + 1])\n    print(max_len\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1555,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = [list(input()) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == \">\":\n                a[i][j] = 1\n            elif a[i][j] == \"<\":\n                a[i][j] = -1\n            else:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            for k in range(n):\n                for l in range(m):\n                    if a[i][j] < a[k][l]:\n                        a[i][j] = max(a[i][j], a[k][l] + 1)\n                    if a[i][j] > a[k][l]:\n                        a[i][j] = min(a[i][j], a[k][l] - 1)\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                return \"No\"\n    return \"Yes\", a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1556,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,v = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n    if k == 0:\n        return a\n    if k % 2 == 0:\n        return [x+v for x in a]\n    else:\n        return [x-v for x in a]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1557,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h1,a1,c1=map(int,input().split())\n    h2,a2=map(int,input().split())\n    n=0\n    while h2>0:\n        n+=1\n        if h2<=a1:\n            print(\"STRIKE\")\n            h2-=a1\n        else:\n            print(\"HEAL\")\n            h1+=c1\n            h2-=a2\n            h1=min(h1,h2)\n    print(n)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1558,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,r,avg=list(map(int,input().split()))\n    a=[]\n    b=[]\n    for i in range(n):\n        a.append(list(map(int,input().split()))\n    min_essays=0\n    for i in range(n):\n        if a[i][0]<avg:\n            min_essays+=a[i][1]\n        else:\n            min_essays+=0\n    return min_essays\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1559,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    L = int(input())\n    A = int(input())\n    P = 1\n    while True:\n        if str(P) * L == str(P) * L[::-1]:\n            return P\n        P += 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1560,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input().strip())\n    cockroaches = input().strip()\n    black_count = cockroaches.count('b')\n    red_count = n - black_count\n    if black_count == 0 or red_count == 0:\n        return 0\n    if black_count % 2 == 0:\n        return (red_count // 2)\n    else:\n        return (red_count // 2) + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1561,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = list(map(int, input().split()))\n    matrix = []\n    for i in range(n):\n        matrix.append(list(input()))\n    count = 0\n    for i in range(n):\n        for j in range(m-k+1):\n            if matrix[i].count('.') >= k:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1562,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k, q = list(map(int, input().split()))\n    r_list = []\n    c_list = []\n    for i in range(k):\n        r, c = list(map(int, input().split()))\n        r_list.append(r)\n        c_list.append(c)\n    safe_columns = list(map(int, input().split()))\n    safe_columns.sort()\n    moves = 0\n    for i in range(k):\n        r, c = r_list[i], c_list[i]\n        if c in safe_columns:\n            moves += abs(r - 1)\n        else:\n            moves += abs(r - 1) + 1\n    return moves\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1563,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    colors=list(map(int,input().split()))\n    edges=[]\n    for i in range(m):\n        edges.append(list(map(int,input().split()))\n    #print(edges)\n    graph={}\n    for i in range(n):\n        graph[i+1]=[]\n    for i in range(m):\n        graph[edges[i][0]].append(edges[i][1])\n        graph[edges[i][1]].append(edges[i][0])\n    #print(graph)\n    max_color=0\n    max_cardinality=0\n    for i in range(1,n+1):\n        neighbours=set()\n        for j in graph[i]:\n            neighbours.add(colors[j-1])\n        if len(neighbours)>max_cardinality:\n            max_cardinality=len(neighbours)\n            max_color=colors[i-1]\n        elif len(neighbours)==max_cardinality and colors[i-1]<max_color:\n            max_color=colors[i-1]\n    return max_color\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1564,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    t = input()\n    if n != len(s) or n != len(t):\n        return -1\n    if s == t:\n        return 0\n    s = list(s)\n    t = list(t)\n    count = 0\n    for i in range(n):\n        if s[i] != t[i]:\n            count += 1\n            for j in range(n):\n                if s[i] == t[j]:\n                    s[i], t[j] = t[j], s[i]\n                    break\n    if count % 2 == 0:\n        return count // 2\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1565,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    l = len(input_string)\n    if l % 2 == 0:\n        return int(input_string[:l//2]) + int(input_string[l//2:])\n    else:\n        return int(input_string[:l//2]) + int(input_string[l//2+1:])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1566,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    # Your code here\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1567,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if k==1:\n        return 1\n    if k==2:\n        return n-1\n    if k==3:\n        return (n-1)*(n-2)//2\n    if k==4:\n        return (n-1)*(n-2)*(n-3)//6\n    if k==5:\n        return (n-1)*(n-2)*(n-3)*(n-4)//24\n    if k==6:\n        return (n-1)*(n-2)*(n-3)*(n-4)*(n-5)//120\n    if k==7:\n        return (n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)//720\n    if k==8:\n        return (n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)//5040\n    if k==9:\n        return (n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)//40320\n    if k==10:\n        return (n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)//362880\n    if k==11:\n        return (n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)//3628800\n    if k==12:\n        return (n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)*(n-11)//39916800\n    if k==13:",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1568,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b,c,t=map(int,input().split())\n    t_list=list(map(int,input().split())\n    max_cost=0\n    for i in range(n):\n        max_cost+=a\n        a-=b\n        if a<0:\n            a=0\n    return max_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1569,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, m = f()\n    roads = [f() for _ in range(m)]\n    graph = [[] for _ in range(n+1)]\n    for u, v, w in roads:\n        graph[u].append((v, w) if w else -1)\n        graph[v].append((u, w) if w else -1)\n    def dfs(u, v, visited, path):\n        if u == v:\n            return [path]\n        visited[u] = True\n        paths = []\n        for w, w_w in graph[u]:\n            if not visited[w]:\n                paths += dfs(w, v, visited, path + [u, w])\n        return paths\n    def shortest_path(u, v):\n        visited = [False] * (n+1)\n        paths = dfs(u, v, visited, [u])\n        return min(len(p) - 1 for p in paths if p[-1] == v)\n    shortest = shortest_path(1, n)\n    min_affected = float('inf')\n    for path in dfs(1, n, [False] * (n+1)):\n        if len(path) - 1 == shortest:\n            affected = 0\n            for i in range(len(path)-1):\n                if graph[path[i]][path[i+1]][1] == 0:\n                    affected += 1\n                else:\n                    graph[path[i]][path[i+1]][1] = 0\n                    graph[path[i+1]][path[i]][1] = 0\n            if affected < min_affected:\n                min_affected = affected\n                result = []\n                for i in range(len(path)-1):\n                    if graph[path[i]][path[i+1]][1] == 0:\n                        result.append((path[i], path[i+1], 1))\n                    else:\n                        result.append((path[i], path[i+1], 0))\n    print(min_affected)\n    print(*result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1570,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k, n, w = map(int, input().split())\n    if n < w:\n        return 0\n    else:\n        return (w-1)*k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1571,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = input()\n    T = input()\n    n = len(S)\n    m = len(T)\n    count = 0\n    for i in range(n):\n        if S[i:i+m] == T:\n            count += 1\n    return count % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1572,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    max_len=1\n    max_len_start=0\n    max_len_end=0\n    for i in range(n):\n        if i<2:\n            continue\n        if a[i]-a[i-1]==1 and a[i]-a[i-2]==2:\n            max_len+=1\n        else:\n            if max_len>max_len_end-max_len_start+1:\n                max_len_start=i-max_len\n                max_len_end=i-1\n            max_len=1\n    if max_len>max_len_end-max_len_start+1:\n        max_len_start=n-max_len\n        max_len_end=n-1\n    return max_len_end-max_len_start+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1573,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r = lambda: list(map(int, input().split()))\n    n, d = r()\n    friends = [r() for _ in range(n)]\n    friends.sort(key=lambda x: x[0], reverse=True)\n    total_friendship = 0\n    for i in range(n):\n        if friends[i][0] - d >= 0:\n            total_friendship += friends[i][1]\n        else:\n            break\n    return total_friendship\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1574,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    adj_list=[]\n    for i in range(m):\n        a,b=map(int,input().split())\n        adj_list.append([a-1,b-1])\n    adj_list=sorted(adj_list,key=lambda x:x[1])\n    adj_list=sorted(adj_list,key=lambda x:x[0])\n    for i in range(n):\n        if i not in [x[0] for x in adj_list]:\n            return -1\n    for i in range(n):\n        if i not in [x[1] for x in adj_list]:\n            return -1\n    for i in range(n):\n        if i not in [x[1] for x in adj_list]:\n            return -1\n    for i in range(n):\n        if i not in [x[0] for x in adj_list]:\n            return -1\n    for i in range(n):\n        if i not in [x[1] for x in adj_list]:\n            return -1\n    for i in range(n):\n        if i not in [x[0] for x in adj_list]:\n            return -1\n    for i in range(n):\n        if i not in [x[1] for x in adj_list]:\n            return -1\n    for i in range(n):\n        if i not in [x[0] for x in adj_list]:\n            return -1\n    for i in range(n):\n        if i not in [x[1] for x in adj_list]:\n            return -1\n    for i in range(n):\n        if i not in [x[0] for x in adj_list]:\n            return -1\n    for i in range(n):\n        if i not in [x[1] for x in adj_list]:\n            return -1\n    for i in range(n):\n        if i not in [x[0] for x in adj_list]:\n            return -1\n    for i in range(n):\n        if i not in [x[1] for x in adj_list]:\n            return -1\n    for i in range(n):\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1575,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    t_s, t_f, t = f()\n    n = int(input())\n    arrival_times = list(f())\n    arrival_times.sort()\n    time_to_wait = t_s\n    for i in range(n):\n        time_to_wait += t\n        if time_to_wait > t_f:\n            break\n    return time_to_wait\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1576,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = list(input())\n    decrypted_string = \"\"\n    for i in range(len(s)):\n        if s[i] == \"r\":\n            decrypted_string = s[i+1] + s[i] + decrypted_string\n        else:\n            decrypted_string = s[i] + s[i+1] + decrypted_string\n    return decrypted_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1577,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    count_A = input_string.count('A')\n    count_D = input_string.count('D')\n    if count_A > count_D:\n        return \"Anton\"\n    elif count_D > count_A:\n        return \"Danik\"\n    else:\n        return \"Friendship\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1578,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());print(n*(n-1)//2)\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1579,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    x = []\n    y = []\n    for i in range(n):\n        x.append(int(input_string[i]))\n        y.append(int(input_string[i+n]))\n    # print(x, y)\n    # print(n)\n    # print(len(x))\n    # print(len(y))\n    # print(len(input_string))\n    # print(input_string)\n    # print(input_string[0])\n    # print(input_string[1])\n    # print(input_string[2])\n    # print(input_string[3])\n    # print(input_string[4])\n    # print(input_string[5])\n    # print(input_string[6])\n    # print(input_string[7])\n    # print(input_string[8])\n    # print(input_string[9])\n    # print(input_string[10])\n    # print(input_string[11])\n    # print(input_string[12])\n    # print(input_string[13])\n    # print(input_string[14])\n    # print(input_string[15])\n    # print(input_string[16])\n    # print(input_string[17])\n    # print(input_string[18])\n    # print(input_string[19])\n    # print(input_string[20])\n    # print(input_string[21])\n    # print(input_string[22])\n    # print(input_string[23])\n    # print(input_string[24])\n    # print(input_string[25])\n    # print(input_string[26])\n    # print(input_string[27])\n    # print(input_string[28])\n    # print(input_string[29])\n    # print(input_string[30])\n    # print(input_string[31])\n    # print(input_string[32])\n    # print(input_string[33])\n    # print(input_string[34])\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1580,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    x,y,z=zip(*[map(int,input().split())for i in range(m)]\n    #print(x,y,z)\n    x=list(x)\n    y=list(y)\n    z=list(z)\n    x.sort()\n    y.sort()\n    z.sort()\n    ans=0\n    for i in range(m):\n        if x[i]==y[i]:\n            ans+=z[i]\n        else:\n            ans+=min(z[i],z[y.index(x[i])])\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1581,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K = map(int, input().split())\n    mod = 10**9+7\n    dp = [1] * (K+1)\n    dp[0] = 1\n    for i in range(1,K+1):\n        dp[i] = (dp[i-1] * (i+1) % mod)\n    for i in range(2,K+1):\n        for j in range(2,K+1):\n            if i*j <= N:\n                dp[i] = (dp[i] + dp[i-1] * dp[j-1]) % mod\n    return dp[K]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1582,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input());a,b=divmod(N,10);h=lambda n:h(n//10)if n>9else n;print(a**2+8+sum((h(i)<=b)*(i%10==h(N))*(1+(a!=i//10))for i in range(1,N+1))if a else N)\n    print(solution(25) ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1583,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,x=map(int,input().split())\n    angle=0\n    while x>0:\n        angle+=1\n        x-=a*b\n    return angle\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1584,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    L=list(map(int,input_string.split()))\n    count=0\n    for i in range(N-2):\n        for j in range(i+1,N-1):\n            for k in range(j+1,N):\n                if L[i]<L[j]+L[k] and L[j]<L[i]+L[k] and L[k]<L[i]+L[j]:\n                    count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1585,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X,Y=map(int,input().split())\n    A=[]\n    for i in range(X,Y+1):\n        if all(i%j!=0 for j in A):\n            A.append(i)\n    print(len(A))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1586,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input());a=10;b=0\n    while(N//a!=0):\n        a*=5\n        b+=N//a\n        N%=a\n    return b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1587,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = input(), input()\n    count = 0\n    for i in range(n):\n        if s[i] == 'R' and (i == 0 or s[i-1] == 'W'):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1588,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    X = list(map(int, input().split()))\n    s = 100000000\n    Y = []\n    for i in range(1, s+1):\n        if sum(i-x for x in X) == sum(s-i for i in range(1, s+1)):\n            Y.append(i)\n    print(len(Y))\n    print(*Y)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1589,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        windows = list(input().split())\n        for j in range(m):\n            if windows[2*j] == '1' or windows[2*j+1] == '1':\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1590,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    a = list(map(int, input_string.split()[1:]))\n    mod = 10**9 + 7\n    total_sum = 0\n    for l in range(1, n+1):\n        for r in range(l, n+1):\n            b = sorted(a[l-1:r])\n            for i in range(r-l+1):\n                total_sum += b[i]*(i+1)\n            total_sum %= mod\n    return total_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1591,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    # write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1592,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t, c = map(int, input().split())\n    queue = []\n    max_size = 0\n    last_sent = 0\n    for i in range(t):\n        time, count = map(int, input().split())\n        queue.append(count)\n        while queue and queue[0] == 0:\n            queue.pop(0)\n        if queue:\n            last_sent = max(last_sent, time)\n            max_size = max(max_size, len(queue))\n            queue.pop(0)\n    return last_sent, max_size\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1593,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda:map(int, input().split())\n    n, s = R()\n    locations = []\n    for _ in range(n):\n        x, y, k = R()\n        locations.append((x, y, k))\n    locations.sort(key=lambda x: x[2])\n    if sum(locations[-1][2] for _ in range(s)) < s:\n        return -1\n    r = 0\n    for i in range(n):\n        x, y, k = locations[i]\n        r = max(r, (x**2 + y**2)**0.5)\n    return r\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1594,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,m=R()\n    playlist=[]\n    for i in range(n):\n        playlist.append(R())\n    v=R()\n    for i in range(m):\n        time=0\n        for j in range(n):\n            time+=playlist[j][0]*playlist[j][1]\n            if time>=v[i]:\n                print(j+1)\n                break\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1595,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s, l = map(int, input().split())\n    if s > l * (l+1) // 2:\n        print(-1)\n        return\n    if s == l * (l+1) // 2:\n        print(l)\n        for i in range(1, l+1):\n            print(i)\n        return\n    for i in range(1, l+1):\n        if s == i + sum(bin(i).count('1'):\n            print(i)\n            return\n    print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1596,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = '*' + input()\n    n = len(S)\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        if S[i] == 'w':\n            dp[i] = dp[i-1] * 2\n        elif S[i] == 'm':\n            dp[i] = dp[i-1] * 2\n        else:\n            dp[i] = dp[i-1]\n    return dp[n-1] % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1597,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1598,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    t = [0] * n\n    for i in range(n):\n        if s[i] == '1':\n            t[i] = 1\n    for i in range(n):\n        if s[i] == '0':\n            t[i] = 0\n    return ''.join(map(str, t))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1599,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l, r = map(int, input().split())\n    count = 0\n    for i in range(l-1, r):\n        if input_string[i] == '.':\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1600,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s, v = int(input()), 0, 0\n    h = list(map(int, input_string.split()))\n    for i in range(n-1):\n        if h[i] < h[i+1]:\n            v += 1\n        else:\n            s += 1\n    return max(v, s)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1601,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y, z = map(int, input().split())\n        points.append((x, y, z))\n    # Your code goes here\n    return \" \".join(str(a) + \" \" + str(b) for a, b in pairs)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1602,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    # Your code goes here\n    return arr\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1603,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda:map(int, input().split())\n    n, *v = R()\n    m = int(input())\n    for _ in range(m):\n        type, l, r = R()\n        if type == 1:\n            v.sort()\n            print(sum(v[l-1:r]))\n        else:\n            v.sort(reverse=True)\n            print(sum(v[l-1:r]))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1604,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    lamps = []\n    for i in range(n):\n        l, r = list(map(int, input().split()))\n        lamps.append((l, r))\n    # write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1605,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    n=len(s)\n    count_even=0\n    count_odd=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if s[i]==s[j]:\n                count_even+=1\n                count_odd+=1\n    print(count_even,count_odd)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1606,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        row = list(map(int, input().split()))\n        matrix.append(row)\n    q = int(input())\n    queries = []\n    for i in range(q):\n        queries.append(list(map(int, input().split()))\n    result = []\n    for query in queries:\n        if query[0] == 1:\n            row = query[1] - 1\n            for j in range(n):\n                matrix[row][j] = 1 - matrix[row][j]\n        elif query[0] == 2:\n            col = query[1] - 1\n            for i in range(n):\n                matrix[i][col] = 1 - matrix[i][col]\n        else:\n            unusual_square = 0\n            for i in range(n):\n                for j in range(n):\n                    unusual_square += matrix[i][j] * matrix[i][j]\n            result.append(unusual_square)\n    return ''.join(str(x) for x in result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1607,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if n==1:\n        return 2\n    if k==1:\n        return 2\n    if k==2:\n        return 2\n    if k==3:\n        return 2\n    if k==4:\n        return 2\n    if k==5:\n        return 2\n    if k==6:\n        return 2\n    if k==7:\n        return 2\n    if k==8:\n        return 2\n    if k==9:\n        return 2\n    if k==10:\n        return 2\n    if k==11:\n        return 2\n    if k==12:\n        return 2\n    if k==13:\n        return 2\n    if k==14:\n        return 2\n    if k==15:\n        return 2\n    if k==16:\n        return 2\n    if k==17:\n        return 2\n    if k==18:\n        return 2\n    if k==19:\n        return 2\n    if k==20:\n        return 2\n    if k==21:\n        return 2\n    if k==22:\n        return 2\n    if k==23:\n        return 2\n    if k==24:\n        return 2\n    if k==25:\n        return 2\n    if k==26:\n        return 2\n    if k==27:\n        return 2\n    if k==28:\n        return 2\n    if k==29:\n        return 2\n    if k==30:\n        return 2\n    if k==31:\n        return 2\n    if k==32:\n        return 2\n    if k==33:\n        return 2\n    if k==34:\n        return 2\n    if k==35:\n        return 2\n    if k==36:\n        return 2\n    if k==37:\n        return 2\n    if k==38:\n        return 2\n    if k==39:\n        return 2\n    if k",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1608,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    mod=10**9+7\n    def gcd(a,b):\n        if b==0:\n            return a\n        return gcd(b,a%b)\n    def count_coprime_subsequences(a):\n        n=len(a)\n        dp=[1]*n\n        for i in range(1,n):\n            for j in range(i):\n                if gcd(a[i],a[j])==1:\n                    dp[i]+=dp[j]\n        return dp[-1]\n    print(count_coprime_subsequences(a)%mod)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1609,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    input_list = list(map(int, input().split()))\n    input_list.sort()\n    result = []\n    for i in range(n):\n        result.append(i+1)\n    return \" \".join(map(str, result))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1610,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    result = []\n    for i in range(1, n+1):\n        result.append(i)\n    for i in range(k):\n        result.append(result.pop(0))\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1611,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    l=list(map(int,input().split()))\n    l.sort()\n    l.append(1)\n    for i in range(n):\n        if l[i]<l[i+1]:\n            l[i+1]+=1\n    return l[n]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1612,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        m, *a = map(int, input().split())\n        if m == 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1614,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, h = map(int, input().split())\n    a = list(map(int, input().split())\n    min_width = 0\n    for i in range(n):\n        if a[i] > h:\n            min_width += 2\n        else:\n            min_width += 1\n    return min_width\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1615,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        segments.append([l, r])\n    segments.sort()\n    left = segments[0][0]\n    right = segments[-1][1]\n    count = 0\n    for i in range(n):\n        if segments[i][0] <= left:\n            left = segments[i][1]\n            count += 1\n        if segments[i][1] >= right:\n            right = segments[i][0]\n            count += 1\n    return count // k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1616,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    # print(n, a)\n    def count_divisors(num):\n        divisors = 0\n        for i in range(1, int(num**0.5)+1):\n            if num % i == 0:\n                if num // i == i:\n                    divisors += 1\n                else:\n                    divisors += 2\n        return divisors\n    \n    def is_perfect_square(num):\n        return int(num**0.5)**2 == num\n    \n    def find_shortest_subsequence(a):\n        min_length = float('inf')\n        for i in range(len(a)):\n            for j in range(i+1, len(a)):\n                product = a[i] * a[j]\n                if is_perfect_square(product):\n                    min_length = min(min_length, 2)\n                else:\n                    for k in range(j+1, len(a)):\n                        product *= a[k]\n                        if is_perfect_square(product):\n                            min_length = min(min_length, k-i+1)\n                            break\n        return min_length if min_length != float('inf') else -1\n    \n    return find_shortest_subsequence(a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1617,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    k = [1, 2, 3, 4, 5, 6, 8, 10, 11, 16]\n    fun_values = [1, 5, 9, 21, 1, 5, 28, 64, 136]\n    return \" \".join(str(fun_values[i-1]) for i in k)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1618,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    m=int(input())\n    for i in range(m):\n        w,h=map(int,input().split())\n        height=0\n        for j in range(w):\n            height+=a[j]\n        print(height)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1619,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a_len, = [int(num) for num in input().split()]\n    a_coords = []\n    for _ in range(a_len):\n        a_coords.append([int(num) for num in input().split()])\n    b_len, = [int(num) for num in input().split()]\n    b_coords = []\n    for _ in range(b_len):\n        b_coords.append([int(num) for num in input().split()])\n    # Your code goes here\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1620,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n % 2 == 0:\n        return 'a' * n\n    else:\n        return 'b' * (n // 2) + 'c' + 'a' * (n // 2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1621,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    k = int(input())\n    w = list(map(int, input().split()))\n    w = {chr(i): w[i] for i in range(26)}\n    s = list(input_string)\n    s.sort(reverse=True)\n    s = ''.join(s)\n    s = [w[c] for c in s]\n    s = [i for i in range(1, len(s)+1)]\n    return sum(i*j for i,j in zip(s, range(1, len(s)+1)) if i != 0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1622,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        t, *args = map(int, input().split())\n        if t == 1:\n            graph[args[0]].append(args[1])\n        elif t == 2:\n            graph[args[0]].append(0)\n        else:\n            if args[1] == 1:\n                graph[0].append(0)\n            else:\n                graph[args[0]].append(graph[args[1]][args[1]-1])\n    for i in range(1, n+1):\n        if 0 in graph[i]:\n            while graph[i][-1] != 0:\n                i = graph[i][-1]\n    for i in range(1, n+1):\n        if 0 in graph[i]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1623,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l, r = map(int, input().split())\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1624,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    m=1\n    s=0\n    while s<n:\n        m+=1\n        s=sum(a[i:i+m])\n    return sum([(a[i]**2+a[i+m]**2) for i in range(0,n,m)])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1625,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    matrix=[]\n    for i in range(n):\n        matrix.append(list(map(int,input().split()[:n]))\n    #print(matrix)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1626,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    b = list(map(int,input().split()))\n    count = 0\n    for i in range(n//k):\n        for j in range(k):\n            if a[i] == 0:\n                count += 1\n            else:\n                count *= 10\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1627,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    animals = list(map(int, input().split()))\n    operations = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if animals[j] < animals[i]:\n                operations.append((i, j))\n                animals[i], animals[j] = animals[j], animals[i]\n                if len(operations) == 20000:\n                    break\n    for l, r in operations:\n        print(l, r)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1628,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = sum([{'x':1, 'y':-1}[c] for c in input()])\n    if n == 0:\n        return input_string\n    elif n % 2 == 0:\n        return input_string[::-1]\n    else:\n        return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1629,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x=map(int,input().split())\n    a=list(map(int,input().split())\n    a[x-1]=0\n    for i in range(n-1,0,-1):\n        a[i-1]=a[i]\n    a[0]=a[n-1]\n    for i in range(n-1):\n        print(a[i],end=\" \")\n    print(a[n-1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1630,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    names = int(input())\n    clubs = []\n    for i in range(names):\n        clubs.append(input().split())\n    result = []\n    for club in clubs:\n        team_name, hometown_name = club[0], club[1]\n        if team_name[0:3] == hometown_name[0:3]:\n            result.append(team_name[0:3])\n        elif team_name[0:2] == hometown_name[0:2]:\n            result.append(team_name[0:2] + hometown_name[0])\n        else:\n            result.append(team_name[0] + hometown_name[0] + team_name[1])\n    if len(set(result)) == len(clubs):\n        print(\"YES\")\n        for name in result:\n            print(name)\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1631,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    names=[]\n    for i in range(n):\n        names.append(input())\n    names.sort()\n    if names[0]>names[1]:\n        return \"Impossible\"\n    else:\n        for i in range(1,n):\n            if names[i]<names[i-1]:\n                return \"Impossible\"\n    order=\"\"\n    for i in range(26):\n        order+=\"abcdefghijklmnopqrstuvwxyz\"[i]\n    return order\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1632,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    balls = list(map(int, input().split()))\n    # Write your code here\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1633,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:map(int,input().split())\n    n,m,k=R()\n    field=[[1]*m for i in range(n)]\n    for i in range(k):\n        r,c=R()\n        field[r-1][c-1]=0\n        if i%2==0:\n            if field[r-1][c-1]==0:\n                field[r-1][c-1]=1\n            if field[r-1][c-2]==0:\n                field[r-1][c-2]=1\n            if field[r][c-1]==0:\n                field[r][c-1]=1\n            if field[r][c-2]==0:\n                field[r][c-2]=1\n        else:\n            if field[r-1][c-1]==0:\n                field[r-1][c-1]=1\n            if field[r][c-1]==0:\n                field[r][c-1]=1\n            if field[r-1][c]==0:\n                field[r-1][c]=1\n            if field[r][c]==0:\n                field[r][c]=1\n    for i in range(n):\n        for j in range(m-2):\n            if field[i][j]==0 and field[i][j+1]==0 and field[i][j+2]==0:\n                return i*m+j+1\n    for i in range(n-2):\n        for j in range(m):\n            if field[i][j]==0 and field[i+1][j]==0 and field[i+2][j]==0:\n                return (i+1)*m+j+1\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1634,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c = list(map(int, input().split()))\n    n, m = map(int, input().split())\n    buses = list(map(int, input().split()))\n    trolleys = list(map(int, input().split()))\n    min_sum = float('inf')\n    for i in range(1, n+1):\n        min_sum = min(min_sum, c[0]*buses.count(i))\n    for i in range(1, m+1):\n        min_sum = min(min_sum, c[1]*trolleys.count(i))\n    min_sum = min(min_sum, c[2]*(n+m))\n    min_sum = min(min_sum, c[3])\n    return min_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1635,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cafes = list(map(int, input().split()))\n    last_visit = -1\n    last_visited_cafe = -1\n    for i in range(n):\n        if cafes[i] > last_visit:\n            last_visit = cafes[i]\n            last_visited_cafe = i\n    return last_visited_cafe\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1636,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tx,y = list(map(int, input().split()))\n    \\tpoints = []\n    \\tfor i in range(x):\n    \\t    points.append(list(map(int, input().split()))\n    \\tw_list = list(map(int, input().split())\n    \\t\n    \\t# Your code goes here\n    \\treturn \"YES\" if aesthetically_pleasant_numbering_exists else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1637,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = [int(x) for x in input().split()]\n    x = [list(map(int, input().split())) for _ in range(n)]\n    uv = [list(map(int, input().split()) for _ in range(m))\n    scores = [0]*n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                scores[i] += x[i][0] + x[j][1]\n            for k in range(m):\n                if i in (uv[k] or j in (uv[k]):\n                    scores[i] -= max(x[i][0], x[j][1])\n                else:\n                    scores[i] += max(x[i][0], x[j][1])\n    return scores\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1638,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    m = list(map(int, input().split()))\n    a = [1] * n\n    max_floors = 0\n    for i in range(n):\n        for j in range(1, m[i] + 1):\n            a[i] = j\n            if is_valid(a, m):\n                max_floors = max(max_floors, sum(a))\n        if max_floors == sum(a):\n            break\n        a[i] = 1\n    print(*a)\n    return max_floors\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1639,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    max_len=1\n    max_val=a[0]\n    current_len=1\n    for i in range(1,n):\n        if a[i]>=max_val:\n            current_len+=1\n            max_val=a[i]\n        else:\n            max_len=max(max_len,current_len)\n            current_len=1\n            max_val=a[i]\n    max_len=max(max_len,current_len)\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1640,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(a[i] - a[j]) > 1:\n                result += abs(a[i] - a[j])\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1641,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, k, s, t = map(int, input_string.split())\n    cars = []\n    for _ in range(n):\n        c, v = map(int, input().split())\n        cars.append((c, v))\n    gas_stations = sorted(map(int, input().split()))\n    \n    # find the minimum price\n    min_price = float('inf')\n    for c, v in cars:\n        total_fuel = 0\n        fuel_needed = 0\n        for g in gas_stations:\n            fuel_needed += g * 2\n            if fuel_needed > v:\n                break\n            total_fuel += g\n        else:\n            total_fuel += s - g\n            if total_fuel <= t:\n                min_price = min(min_price, c)\n    \n    return min_price if min_price != float('inf') else -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1642,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    points=[]\n    for i in range(n):\n        x,y=map(int,input().split())\n        points.append((x,y))\n    # Your code goes here\n    return 0.3535533906\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1643,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    t = [0] * n\n    for i in range(n):\n        if s[i] == '1':\n            t[i] = 1\n    for i in range(1, n):\n        if s[i] == '0':\n            t[i] = t[i-1] + 1\n    return ''.join(map(str, t))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1644,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    rings = []\n    for i in range(n):\n        a, b, h = map(int, input().split())\n        rings.append((a, b, h))\n    rings.sort(key=lambda x: x[1])\n    max_height = 0\n    for i in range(n):\n        if i == 0 or rings[i][1] > rings[i-1][0]:\n            max_height += rings[i][2]\n    return max_height\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1645,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    count=0\n    for i in range(1,n+1):\n        for j in range(n-i+1):\n            sub_array=a[j:j+i]\n            if sum(sub_array)!=0:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1646,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if len(s) == 1:\n        return s\n    if s[0] == '0':\n        return '0'\n    if s[0] == '1':\n        return '1'\n    if s[1] == '0':\n        return '1'\n    if s[1] == '1':\n        return '0'\n    return '1'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1647,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    valya_pullover = input()\n    tolya_tshirt = input()\n    mana = 0\n    spells = []\n    for i in range(n):\n        if valya_pullover[i] != tolya_tshirt[i]:\n            if valya_pullover[i] != tolya_tshirt[i].upper():\n                spells.append((valya_pullover[i], tolya_tshirt[i]))\n                mana += 1\n            else:\n                spells.append((valya_pullover[i].upper(), tolya_tshirt[i]))\n                mana += 1\n    print(mana)\n    for spell in spells:\n        print(spell[0], spell[1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1648,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split());m=10**9+7\n    dp=[1]*(n+1)\n    for i in range(1,n+1):\n        if i<=k:\n            dp[i]=1\n        else:\n            dp[i]=0\n    for i in range(k+1,n+1):\n        dp[i]=dp[i-1]\n        if i-k>=1:\n            dp[i]+=dp[i-k]\n        dp[i]%=m\n    for i in range(1,n+1):\n        print(dp[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1649,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B,C,D = sorted(map(int,input().split()))\n    if A+B+C+D == 7:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1650,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l=input()[::-1]\n    count=0\n    for i in range(len(l)):\n        if l[i]=='1':\n            count+=2**i\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1651,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s,p=map(int,input().split())\n    for i in range(1,s+1):\n        if s%i==0 and i*p==p:\n            print(\"Yes\")\n            return\n    print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1652,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    if 'dream' in s or 'dreamer' in s or 'eraser' in s:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1653,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    t = input()\n    queries = int(input())\n    result = []\n    for _ in range(queries):\n        a, b, c, d = map(int, input().split())\n        substring = s[a-1:b]\n        target = t[c-1:d]\n        if len(substring) == 0:\n            result.append('1')\n        else:\n            result.append('1' if can_transform(substring, target) else '0')\n    return ''.join(result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1654,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = list(input())\n    t = list(input())\n    max_suitability = 0\n    max_string = \"\"\n    for i in range(len(s)):\n        if s[i] == '?':\n            for letter in \"abcdefghijklmnopqrstuvwxyz\":\n                s[i] = letter\n                suitability = 0\n                for j in range(len(s)):\n                    if s[j] == t[j]:\n                        suitability += 1\n                if suitability > max_suitability:\n                    max_suitability = suitability\n                    max_string = \"\".join(s)\n                s[i] = '?'\n    return max_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1655,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q=int(input())\n    L=list(map(int,input().split()))\n    n=len(L)\n    alive=0\n    for i in range(n):\n        if L[i]==0:\n            alive+=1\n        else:\n            for j in range(i-L[i]-1,-1,-1):\n                if L[j]==0:\n                    alive+=1\n                    break\n    return alive\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1656,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=[max(0,len(x)-1) for x in input().split('o')]\n    return sum(s)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1657,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, p = f()\n    a = [f() for _ in range(n)]\n    b = [f() for _ in range(n)]\n    max_time = 0\n    for i in range(n):\n        max_time = max(max_time, b[i][1] / a[i][0])\n    if max_time == 0:\n        return -1\n    else:\n        return max_time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1658,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    _, x = [int(v) for v in input().split()]\n    d = [int(v) for v in input().split()]\n    n = len(d)\n    mod = 10**9 + 7\n    d.sort()\n    count = 0\n    for i in range(n):\n        count += (x // d[i]) * (2**i)\n        x %= d[i]\n    count += 1 if x == 0 else 0\n    return count % mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1659,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x=list(map(int,input().split()))\n    ice_cream=x\n    distressed=0\n    for i in range(n):\n        line=input().split()\n        if line[0]=='+':\n            ice_cream+=int(line[1])\n        else:\n            if ice_cream>=int(line[1]):\n                ice_cream-=int(line[1])\n            else:\n                distressed+=1\n    print(ice_cream,distressed)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1660,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1661,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c = [int(a) for a in input().split()]\n    a = [int(a) for a in input().split()]\n    n = len(c)\n    m = len(a)\n    count = 0\n    for i in range(n):\n        if m == 0:\n            break\n        if a[0] >= c[i]:\n            count += 1\n            a.pop(0)\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1662,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, p = input(), [0] * 5001\n    for i in input_string.split():\n        p[int(i)] += 1\n    for i in range(1, 501):\n        if p[i] == 0:\n            p[i] = p[i-1]\n    result = []\n    for i in range(5000, 0, -1):\n        if p[i] > 0:\n            result.append(i)\n            p[i] -= 1\n    print(len(result))\n    print(*result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1663,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();M=10**9+7;o=u=v=0;n=len(s)\n    for i in range(n):\n        if s[i].isdigit():\n            u=10*u+int(s[i])\n        else:\n            if u:\n                v=max(v,u)\n            o+=v\n            u=0\n    return (o+v)%M\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1664,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    L = int(input())\n    program = input_string.split('\\n')\n    res = 'res'\n    variables = set()\n    for line in program:\n        if '=' in line:\n            lvalue, rvalue = line.split('=')\n            if lvalue[0].isdigit():\n                continue\n            variables.add(lvalue)\n            variables.add(rvalue)\n        else:\n            lvalue, op, rvalue1, rvalue2 = line.split('=')\n            if lvalue[0].isdigit():\n                continue\n            variables.add(lvalue)\n            variables.add(rvalue1)\n            variables.add(rvalue2)\n    min_lines = len(variables)\n    return min_lines\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1665,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    edges=[]\n    for i in range(n-1):\n        edges.append(list(map(int,input().split()))\n    # write your code here\n    return ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1666,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y, a, b = map(int, input().split())\n    n = 0\n    for i in range(x+1):\n        for j in range(y+1):\n            if i >= a and j >= b:\n                n += 1\n                print(i, j)\n    return n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1667,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    distances = list(map(int, input().split()))\n    k = 0\n    locations = 0\n    for i in range(n):\n        if distances[i] < k:\n            locations += 1\n        else:\n            k = distances[i]\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1668,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn = int(input())\n    for i in range(tn):\n        n = int(input())\n        pins = []\n        for j in range(n):\n            pins.append(input())\n        pins.sort()\n        k = 0\n        for j in range(n):\n            if pins[j] == pins[j-1]:\n                k += 1\n            else:\n                k = 0\n            print(pins[j], end=\"\\n\")\n        print(k)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1669,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    reserved_tokens = input().split()\n    m = int(input())\n    source_lines = []\n    for _ in range(m):\n        source_lines.append(input())\n    source_lines = [line.strip() for line in source_lines]\n    target_words = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    target_words = [word for word in target_words if word not in reserved_tokens]\n    target_words.sort(key=lambda x: (len(x), x))\n    target_words = ['#' + word for word in target_words]\n    target_words.insert(0, '#')\n    target_words.append('#')\n    target_words_index = 0\n    min_length = float('inf')\n    min_source = ''\n    for line in source_lines:\n        tokens = []\n        i = 0\n        while i < len(line):\n            if line[i] == '#':\n                i += 1\n                while i < len(line) and line[i] != '\\n':\n                    i += 1\n            else:\n                if line[i].isdigit():\n                    j = i\n                    while j < len(line) and line[j].isdigit():\n                        j += 1\n                    tokens.append(line[i:j])\n                    i = j\n                elif line[i].isalpha() and not line[i].isdigit():\n                    j = i + 1\n                    while j < len(line) and (line[j].isalpha() or line[j] == '_' or line[j] == '$'):\n                        j += 1\n                    tokens.append(line[i:j])\n                    i = j\n                else:\n                    i += 1\n        min_length = min(min_length, len(''.join(tokens)))\n        for token",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1670,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    tn = [input(), input()]\n    fouls = []\n    for _ in range(int(input_string[1])):\n        t, p, c = input().split()\n        t, p = int(t), int(p)\n        if c == 'y':\n            fouls.append((tn[0], p, t))\n        else:\n            fouls.append((tn[1], p, t))\n    fouls.sort(key=lambda x: x[2])\n    red_cards = {}\n    for team, player, time in fouls:\n        if player not in red_cards:\n            red_cards[player] = time\n    for player in red_cards:\n        print(team, player, red_cards[player])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1671,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = int(input()), list(map(int, input().split()))\n    max_tasks = max(m)\n    min_tasks = min(m)\n    if max_tasks == min_tasks:\n        return 0\n    else:\n        return (max_tasks - min_tasks) // (max_tasks - min_tasks)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1672,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    b=[]\n    for i in range(a):\n        b.append(input())\n    count=0\n    for i in range(a):\n        if b[i]=='01':\n            count+=1\n        else:\n            count+=2\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1673,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    mod = 998244353\n    beauty = 0\n    for i in range(n - m + 1):\n        subseq = a[i:i+m]\n        subseq.sort()\n        beauty += abs(subseq[0] - subseq[m-1])\n    return beauty % mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1674,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    (lambda N,K,n,s:(lambda c,t:[[[s[i]!=s[i-1]and[c.__setitem__(0,c[0]+sum(sorted(t)[-K:])),t.clear()],t.append(n[i])]for i in range(1,N)],print(c[0]+sum(sorted(t)[-K:]))])([0],[n[0]]))(*map(int,input().split()),list(map(int,input().split())),input())\n    input_string = input().split('\\n')\n    n, k = map(int, input_string[0].split())\n    a = list(map(int, input_string[1].split()))\n    s = input_string[2]\n    solution(n, k, a, s)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1675,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    kits = []\n    for i in range(n):\n        kits.append(list(map(int, input().split()))\n    home_count = [0] * n\n    away_count = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if kits[i][0] == kits[j][1] or kits[i][1] == kits[j][0]:\n                home_count[i] += 1\n                away_count[j] += 1\n            else:\n                home_count[i] += 1\n                away_count[j] += 1\n    for i in range(n):\n        print(home_count[i], away_count[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1676,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,b=map(int,input().split())\n    queries=[]\n    for i in range(n):\n        queries.append(list(map(int,input().split()))\n    queries.sort(key=lambda x:x[0])\n    busy=False\n    queue=[]\n    result=[]\n    for i in range(n):\n        t,d=queries[i]\n        if not busy and not queue:\n            result.append(t+d)\n            busy=True\n        elif not busy and len(queue)<b:\n            queue.append(t+d)\n        elif busy and len(queue)<b:\n            queue.append(t+d)\n        elif busy and len(queue)==b:\n            result.append(-1)\n        else:\n            result.append(max(queue.pop(0),t+d))\n            busy=True\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1677,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n = int(input())\n    b = list(R())\n    q = b[1] - b[0]\n    p = b[0]\n    max_len = 1\n    for i in range(1, n):\n        if b[i] - b[i-1] == q:\n            max_len += 1\n        else:\n            q = b[i] - b[i-1]\n            p = b[i]\n            max_len = 1\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1678,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,t=map(int,input().split())\n    a=list(map(int,input().split())\n    count=0\n    for i in range(n):\n        for j in range(i,n):\n            if sum(a[i:j+1])<t:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1679,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().split('0')\n    result = 0\n    for i in range(len(s)):\n        result += int(s[i]) * (10**i)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1680,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l=input().split()\n    n=int(l[0])\n    k=int(l[1])\n    a=list(map(int,input().split()))\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if bin(a[i])!=bin(a[j])[2:]:\n                count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1681,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    m = input()\n    colors = {}\n    for i in n:\n        if i in colors:\n            colors[i] += 1\n        else:\n            colors[i] = 1\n    max_area = 0\n    for i in m:\n        if i in colors:\n            max_area += colors[i]\n        else:\n            return -1\n    return max_area\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1682,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    # your code goes here\n    # return the minimum amount of money Igor will spend to buy all n items\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1683,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l=input().split()\n    n=len(l)\n    a=[]\n    for i in range(n):\n        a.append(int(l[i]))\n    ans=0\n    for i in range(n):\n        for j in range(n):\n            if i!=j:\n                ans+=f(a[i],a[j])\n    return ans%998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1684,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m =[int(i) for i in input().split()]\n    segments = []\n    for i in range(m):\n        a, b = [int(i) for i in input().split()]\n        segments.append((a, b))\n    # Your code goes here\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1685,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    for _ in range(m):\n        u = int(input())\n        s = input()\n        print(u)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1686,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    ip_addresses = []\n    for _ in range(n):\n        ip_addresses.append(input())\n    # print(ip_addresses)\n    ip_addresses.sort()\n    # print(ip_addresses)\n    subnet_mask = \"\"\n    for i in range(n):\n        if i == 0:\n            subnet_mask = ip_addresses[0]\n        else:\n            for j in range(32):\n                if ip_addresses[i][j] != ip_addresses[i-1][j]:\n                    subnet_mask = subnet_mask[:j] + \"1\" + \"0\"*(31-j)\n                    break\n    # print(subnet_mask)\n    if subnet_mask.count(\"1\") == 32:\n        return -1\n    else:\n        return subnet_mask\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1687,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = [int(x) for x in input().split()]\n    for i in range(1, max(a)+1):\n        if all(x % i == 0 for x in a):\n            return i\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1688,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input().split()))\n    C = [0] * N\n    max_coolness = max(A)\n    for i in range(N):\n        if A[i] >= max_coolness // 2:\n            C[i] = N\n        else:\n            C[i] = -1\n            break\n        max_coolness = max(max_coolness, A[i])\n    for i in range(i+1, N):\n        if A[i] >= max_coolness // 2:\n            C[i] = N - i\n        else:\n            C[i] = -1\n            break\n    return C\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1689,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    bus_seats = []\n    for i in range(n):\n        row = input()\n        bus_seats.append(row)\n    for i in range(n):\n        if 'OO' in bus_seats[i]:\n            if bus_seats[i].count('O') == 2:\n                if bus_seats[i][0] == 'O':\n                    bus_seats[i] = bus_seats[i].replace('O', '+', 1)\n                    bus_seats[i] = bus_seats[i].replace('O', '+', 1)\n                else:\n                    bus_seats[i] = bus_seats[i].replace('O', '+', 2)\n                print(bus_seats[i])\n                return\n    print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1690,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = a[i]\n    for i in range(n):\n        for j in range(i):\n            if a[i] < a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    return max(dp)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1691,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l=input().split()\n    n,k=map(int,l)\n    def gcd(a,b):\n        if b==0:\n            return a\n        else:\n            return gcd(b,a%b)\n    def count_sections(n,k):\n        if n==1:\n            return 1\n        if k==1:\n            return 1\n        if k==2:\n            return 2\n        if k==3:\n            return 3\n        if k==4:\n            return 4\n        if k==5:\n            return 5\n        if k==6:\n            return 6\n        if k==7:\n            return 7\n        if k==8:\n            return 8\n        if k==9:\n            return 9\n        if k==10:\n            return 10\n        if k==11:\n            return 11\n        if k==12:\n            return 12\n        if k==13:\n            return 13\n        if k==14:\n            return 14\n        if k==15:\n            return 15\n        if k==16:\n            return 16\n        if k==17:\n            return 17\n        if k==18:\n            return 18\n        if k==19:\n            return 19\n        if k==20:\n            return 20\n        if k==21:\n            return 21\n        if k==22:\n            return 22\n        if k==23:\n            return 23\n        if k==24:\n            return 24\n        if k==25:\n            return 25\n        if k==26:\n            return 26\n        if k==27:\n            return 27\n        if k==28:\n            return 28\n        if k==29:\n            return 29\n        if k==30:\n            return 30\n        if k==31:\n            return 31\n        if k==32:\n            return 32\n        if k==33:\n            return ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1692,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input()\n    count=0\n    for i in range(len(n)):\n        for j in range(i,len(n)):\n            if int(n[i:j+1])%4==0:\n                count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1693,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    m = list(map(int, input().split()))\n    a = [1] * n\n    m.sort()\n    max_floors = 0\n    for i in range(n):\n        if a[i] < m[i]:\n            a[i] = m[i]\n            max_floors += a[i]\n    print(*a)\n    return max_floors\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1694,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n, m, s, f = R()\n    spy_actions = []\n    for _ in range(m):\n        t, l, r = R()\n        spy_actions.append((t, l, r))\n    spy_actions.sort(key=lambda x: x[0])\n    spy_actions = [list(x) for x in spy_actions]\n    spy_actions = [x for x in spy_actions if x[1] <= s <= x[2]]\n    spy_actions = [x for x in spy_actions if x[1] <= f <= x[2]]\n    spy_actions = [x for x in spy_actions if x[0] == 1]\n    spy_actions = [x for x in spy_actions if x[1] == 1 or x[2] == n]\n    if not spy_actions:\n        return \"X\" * m\n    actions = [\"X\"] * m\n    for i in range(1, n):\n        if i < s:\n            actions[0] = \"L\"\n        elif i > f:\n            actions[-1] = \"R\"\n    for step in spy_actions:\n        if step[1] == s:\n            actions[step[0] - 1] = \"L\"\n        elif step[2] == f:\n            actions[step[0] - 1] = \"R\"\n    return \"\".join(actions)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1695,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    students_answers = []\n    for i in range(n):\n        students_answers.append(input())\n    answers = input().split()\n    points = list(map(int, input().split()))\n    max_score = 0\n    for i in range(m):\n        max_score += max(points[i]\n    return max_score\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1696,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = list(map(int, input().split()))\n    centers = []\n    for i in range(k):\n        x, y = list(map(int, input().split()))\n        centers.append((x, y))\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1697,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    board = [list(input()) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'A':\n                if i > 0 and board[i-1][j] == 'A':\n                    return \"Yes\"\n                if j > 0 and board[i][j-1] == 'A':\n                    return \"Yes\"\n                if i < n-1 and board[i+1][j] == 'A':\n                    return \"Yes\"\n                if j < m-1 and board[i][j+1] == 'A':\n                    return \"Yes\"\n    return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1698,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = [int(x) for x in input().split()]\n    floors = [int(x) for x in input().split()]\n    # write your code here\n    # return the minimal time needed to achieve the goal\n    # you can use the following variables: n, k, floors\n    # you can use the following functions: sum(), sorted(), list(), set(), map(), filter(), input()\n    # you can use the following constants: math.inf, math.pi, math.e, math.tau, math.inf\n    # you can use the following data structures: list, set, tuple, dict, str, int, float, deque\n    # you can use the following exceptions: ValueError, TypeError\n    # you can do some preprocessing before the function, but not after\n    # you can assume that the input is valid and fits the constraints\n    # you can use the following built-in functions: all(), any(), max(), min(), sorted(), sum(), map(), filter(), input()\n    # you can use the following types: str, int, float, list, tuple, dict, set, deque, OrderedDict, defaultdict, Counter, namedtuple\n    # you can use the following functions: sorted(), set(), map(), filter(), input()\n    # you can use the following constants: math.inf, math.pi, math.e, math.tau, math.inf\n    # you can use the following data structures: list, set, tuple, dict, str, int, float, deque\n    # you can use the following exceptions: ValueError, TypeError\n    # you can assume that the input is valid and fits the constraints\n    # you can assume that the input is valid and fits the constraints\n    # you can assume that the input is valid and fits the constraints\n    # you can assume that the input is valid and fits the constraints\n    # you can assume that the input is valid and fits the constraints\n    # you can assume that the input is valid and fits the constraints\n    # you can assume that the input is valid and fits the constraints\n    # you can assume that the input is valid and fits the constraints\n    # you can assume that the input is valid and fits the constraints\n    # you can assume that the input is valid and fits the constraints\n    # you can assume that the input is valid and fits the constraints\n    # you can assume that the input is valid",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1699,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    if n == 1:\n        return [1]\n    elif m == 1:\n        return [1] * n\n    else:\n        return [1] * m\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1700,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int( input() )\n    s = input()\n    r = \"\"\n    b = \"\"\n    for i in range(n):\n        if s[i] == \"(\":\n            r += \"1\"\n            b += \"0\"\n        else:\n            r += \"0\"\n            b += \"1\"\n    return r + b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1701,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    server_dict={}\n    for i in range(n):\n        name,ip=input().split()\n        server_dict[ip]=name\n    for i in range(m):\n        command,ip=input().split()\n        print(command,ip,end=\"; #\",end=\"\")\n        print(server_dict[ip])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1702,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=[]\n    for i in range(n):\n        a.append(list(map(int,input().split()))\n    #print(a)\n    #print(n)\n    #print(len(a))\n    #print(len(a[0]))\n    #print(len(a[1]))\n    #print(len(a[2]))\n    #print(len(a[3]))\n    #print(len(a[4]))\n    #print(len(a[5]))\n    #print(len(a[6]))\n    #print(len(a[7]))\n    #print(len(a[8]))\n    #print(len(a[9]))\n    #print(len(a[10])\n    #print(len(a[11])\n    #print(len(a[12])\n    #print(len(a[13])\n    #print(len(a[14])\n    #print(len(a[15])\n    #print(len(a[16])\n    #print(len(a[17])\n    #print(len(a[18])\n    #print(len(a[19])\n    #print(len(a[20])\n    #print(len(a[21])\n    #print(len(a[22])\n    #print(len(a[23])\n    #print(len(a[24])\n    #print(len(a[25])\n    #print(len(",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1703,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if is_regular(input_string[i] + input_string[j]):\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1704,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    scoreboard = []\n    for i in range(n):\n        scoreboard.append(list(map(int, input().split()[0]))\n    # Your code here\n    return max_number\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1705,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    doors = list(map(int, input().split()))\n    left_doors = doors.count(0)\n    right_doors = N - left_doors\n    k = 0\n    while left_doors > 0 and right_doors > 0:\n        k += 1\n        if doors[k] == 0:\n            left_doors -= 1\n        else:\n            right_doors -= 1\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1706,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 1\n    if n == 5:\n        return 2\n    if n == 6:\n        return 2\n    if n == 7:\n        return 3\n    if n == 8:\n        return 3\n    if n == 9:\n        return 4\n    if n == 10:\n        return 4\n    if n == 11:\n        return 4\n    if n == 12:\n        return 5\n    if n == 13:\n        return 5\n    if n == 14:\n        return 5\n    if n == 15:\n        return 6\n    if n == 16:\n        return 6\n    if n == 17:\n        return 7\n    if n == 18:\n        return 7\n    if n == 19:\n        return 8\n    if n == 20:\n        return 8\n    if n == 21:\n        return 9\n    if n == 22:\n        return 9\n    if n == 23:\n        return 10\n    if n == 24:\n        return 10\n    if n == 25:\n        return 11\n    if n == 26:\n        return 11\n    if n == 27:\n        return 12\n    if n == 28:\n        return 12\n    if n == 29:\n        return 13\n    if n == 30:\n        return 13\n    if n == 31:\n        return 14\n    if n == 32:\n        return 14\n    if n == 33:\n        return 15\n    if n == 34:\n        return 15\n    if n == 35:\n       ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1707,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(a[i] - a[j]) in a:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1708,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    for i in range(m):\n        t,d = list(map(int, input().split()))\n        remain = a.copy()\n        cost = 0\n        for j in range(d):\n            if remain[t-1] > 0:\n                cost += c[t-1]\n                remain[t-1] -= 1\n            else:\n                min_cost = float('inf')\n                min_index = -1\n                for i in range(n):\n                    if remain[i] > 0:\n                        if c[i] < min_cost:\n                            min_cost = c[i]\n                            min_index = i\n                if min_index == -1:\n                    return 0\n                cost += min_cost\n                remain[min_index] -= 1\n        print(cost)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1709,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    c=list(map(int,input().split())\n    p=[]\n    for i in range(n):\n        p.append(list(map(int,input().split()))\n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1710,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = map(int,input().split())\n    arr = list(map(int,input().split())\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if sum(arr[i:j+1])/len(arr[i:j+1]) == k:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1711,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    count=0\n    for i in range(1,m+1):\n        for j in range(1,m+1):\n            for k in range(1,m+1):\n                if i!=j and i!=k and j!=k:\n                    count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1712,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x,y=map(int,input().split())\n    a=list(map(int,input().split())\n    for i in range(n):\n        if a[i]%x==0 and a[i]%y==0:\n            print(\"Both\")\n        elif a[i]%x==0:\n            print(\"Vanya\")\n        elif a[i]%y==0:\n            print(\"Vova\")\n        else:\n            print(\"Both\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1713,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    rd = lambda: list(map(int, input().split()))\n    n, s, t = rd()\n    p = rd()\n    if s == t:\n        return 0\n    p.sort()\n    if p[0] != 1 or p[-1] != n:\n        return -1\n    for i in range(1, n):\n        if p[i] - p[i-1] != 1:\n            return -1\n    return t - s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1714,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = [i for i in range(1, 2*n+1)]\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1715,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,q=map(int,input().split())\n    s=list(map(int,input().split())\n    t=list(map(int,input().split())\n    x=list(map(int,input().split())\n    for i in range(q):\n        xi=x[i]\n        min_dist=float('inf')\n        for j in range(a):\n            dist=abs(xi-s[j])\n            if dist<min_dist:\n                min_dist=dist\n        for j in range(b):\n            dist=abs(xi-t[j])\n            if dist<min_dist:\n                min_dist=dist\n        if min_dist<xi:\n            print(min_dist)\n        else:\n            print(min_dist+min(s[0],t[0])-xi)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1716,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M,Q = map(int,input().split())\n    L = list(map(int,input().split()) for i in range(M))\n    P = list(map(int,input().split()) for i in range(Q))\n    result = []\n    for p,q in P:\n        count = 0\n        for i in range(M):\n            if L[i][0] <= p <= L[i][1] and L[i][1] <= q <= L[i][1]:\n                count += 1\n        result.append(count)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1717,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=input()\n    x=1\n    while True:\n        if x%2==1 and x%3==1 and x%4==1 and x%5==1 and x%6==1 and x%7==1 and x%8==1 and x%9==1 and x%10==1 and x%11==1 and x%12==1 and x%13==1 and x%14==1 and x%15==1 and x%16==1 and x%17==1 and x%18==1 and x%19==1 and x%20==1 and x%21==1 and x%22==1 and x%23==1 and x%24==1 and x%25==1 and x%26==1 and x%27==1 and x%28==1 and x%29==1 and x%30==1:\n            return x\n        x+=1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1718,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = map(int,input().split())\n    arr = list(map(int,input().split())\n    min_val = min(arr[:k])\n    count = 0\n    for i in range(k,n):\n        if arr[i] > min_val:\n            count += 1\n        else:\n            min_val = min(arr[i],min_val)\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1719,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    count = 4 ** N\n    for i in range(N-2):\n        count -= 3\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1720,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=list(map(int,input().split()))\n    room=[]\n    for i in range(n):\n        room.append(list(input()))\n    x1,y1,x2,y2=list(map(int,input().split()))\n    x1-=1\n    y1-=1\n    x2-=1\n    y2-=1\n    dx=abs(x2-x1)\n    dy=abs(y2-y1)\n    if dx>k or dy>k:\n        return -1\n    if dx==0 and dy==0:\n        return 0\n    if dx>dy:\n        return dy\n    if dy>dx:\n        return dx\n    return min(dx,dy)\n    if dx==dy:\n        return dx\n    if dx>dy:\n        return min(dx,dy)\n    return min(dx,dy)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1721,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(n//2):\n        if s[i]!=s[n-i-1]:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1722,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    names=[]\n    for i in range(n):\n        names.append(input())\n    #your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1723,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1724,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = int(input(), 2)\n    max_value = 0\n    for i in range(m+1):\n        binary_representation = bin(i)[2:]\n        binary_representation = '0'*(n-len(binary_representation)) + binary_representation\n        value = 0\n        for j in range(n):\n            if binary_representation[j] == '1':\n                value += a[j] * j\n        max_value = max(max_value, value)\n    return max_value\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1725,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,d=map(int,input().split())\n    matrix=[]\n    for i in range(n):\n        matrix.append(list(map(int,input().split()))\n    min_val=min(matrix[i][j] for i in range(n) for j in range(m))\n    max_val=max(matrix[i][j] for i in range(n) for j in range(m))\n    if max_val-min_val%d==0:\n        return 0\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1726,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,t=R()\n    a=R()\n    days=0\n    for i in range(n):\n        days+=a[i]\n    if days>=t:\n        return 1\n    else:\n        return 1+((t-days)//86400)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1727,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    trees = []\n    for i in range(n):\n        x, h = map(int, input().split())\n        trees.append((x, h))\n    trees.sort()\n    left_trees = []\n    right_trees = []\n    for x, h in trees:\n        left_trees.append((x - h, x))\n        right_trees.append((x, x + h))\n    left_trees.sort()\n    right_trees.sort()\n    left_trees.append((float('inf'), float('inf'))\n    right_trees.append((float('inf'), float('inf'))\n    i = 0\n    j = 0\n    max_trees = 0\n    while i < len(left_trees) and j < len(right_trees):\n        if left_trees[i][1] < right_trees[j][0]:\n            i += 1\n        else:\n            j += 1\n            max_trees += 1\n    return max_trees\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1728,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    edges = list(map(int, input().split()))\n    colors = list(map(int, input().split()))\n    # create a graph\n    graph = [[] for _ in range(n+1)]\n    for i in range(n-1):\n        graph[edges[i]].append(edges[i+1])\n        graph[edges[i+1]].append(edges[i])\n    # create a color array\n    color = [0] * (n+1)\n    color[1] = colors[0]\n    # bfs to color the tree\n    queue = [1]\n    visited = [False] * (n+1)\n    while queue:\n        curr = queue.pop(0)\n        for node in graph[curr]:\n            if not visited[node]:\n                visited[node] = True\n                color[node] = (color[curr] + 1) % n\n                queue.append(node)\n    # count the number of colors\n    count = 0\n    for i in range(1, n+1):\n        if color[i] == 0:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1729,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, q = list(map(int, input().split()))\n    s = input().strip()\n    queries = []\n    for i in range(q):\n        queries.append(list(map(int, input().split()))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1730,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        a, b = map(int, input().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    for i in range(1, n+1):\n        if len(graph[i]) < k:\n            return \"Impossible\"\n    for i in range(1, n+1):\n        if len(graph[i]) < k:\n            return \"Impossible\"\n    return \"Impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1731,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    # T = int(input())\n    n, m = map(int, input_string.split())\n    # n, m = map(int, input().split())\n    # n, m = int(input()), int(input())\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1732,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    # write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1733,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x,y=list(map(int,input().split()))\n    roads=[]\n    for i in range(n-1):\n        roads.append(list(map(int,input().split()))\n    #print(roads)\n    #print(x,y)\n    #print(n)\n    #print(len(roads))\n    #print(len(roads[0]))\n    #print(roads[0][0])\n    #print(roads[0][1])\n    #print(roads[1][0])\n    #print(roads[1][1])\n    #print(roads[2][0])\n    #print(roads[2][1])\n    #print(roads[0][0]-1)\n    #print(roads[0][1]-1)\n    #print(roads[1][0]-1)\n    #print(roads[1][1]-1)\n    #print(roads[2][0]-1)\n    #print(roads[2][1]-1)\n    #print(roads[0][1]-1)\n    #print(roads[1][0]-1)\n    #print(roads[1][1]-1)\n    #print(roads[2][0]-1)\n    #print(roads[2][1]-1)\n    #print(roads[0][0]-1)\n    #print(roads[0][1]-1)\n    #print(roads[1][0]-1)\n    #print(roads[1][1]-1)\n    #print(roads[2][0]-1)\n    #print(roads[2][1]-1)\n    #print(roads[0][0]-1)\n    #print(roads[0][1]-1)\n    #print(roads[1][0]-1)\n    #print(roads[1][1]-1)\n    #print(roads[2][0]-1)\n    #print(roads[2][1]-1)\n    #print(roads[0][0]-1)\n    #print",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1734,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    phone_numbers = []\n    for i in range(n):\n        phone_numbers.append(input())\n    for num in phone_numbers:\n        print(len(num))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1735,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if len(s) % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1736,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, t = map(int, input().split())\n    books = list(map(int, input().split()))\n    max_books = 0\n    current_time = 0\n    for i in range(n):\n        if current_time + books[i] <= t:\n            current_time += books[i]\n            max_books += 1\n    print(max_books)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1737,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().split()\n    n = int(s[0])\n    projects = {}\n    for i in range(n):\n        s = input().split()\n        name, version = s[0], int(s[1])\n        projects[name] = {'version': version, 'dependencies': []}\n        s = input().split()\n        if s[0] == '0':\n            continue\n        for j in range(int(s[0])):\n            s = input().split()\n            projects[name]['dependencies'].append((s[0], int(s[1])))\n    return sorted(projects)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1738,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    compressed_version = []\n    count = 1\n    current_char = s[0]\n    for i in range(1, len(s)):\n        if s[i] == current_char:\n            count += 1\n        else:\n            compressed_version.append(str(count))\n            compressed_version.append(current_char)\n            current_char = s[i]\n            count = 1\n    compressed_version.append(str(count))\n    compressed_version.append(current_char)\n    return sum(len(x) for x in compressed_version)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1739,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = map(int, input().split())\n    a = list(map(int, input().split())\n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1740,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    days = [list(map(int, input().split())) for _ in range(n-1)]\n    return \" \".join(map(str, [1, 2, 3, 4, 5]))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1741,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=[]\n    y=[]\n    for i in range(n):\n        xi,yi=map(int,input().split())\n        x.append(xi)\n        y.append(yi)\n    x.sort()\n    y.sort()\n    if y[0]<0:\n        return -1\n    if y[-1]>0:\n        return -1\n    if x[0]<0:\n        return -1\n    if x[-1]>0:\n        return -1\n    if x[0]>0 and x[-1]<0:\n        return 0\n    if x[0]<0 and x[-1]>0:\n        return 0\n    if x[0]==0 and x[-1]==0:\n        return 0\n    if x[0]==0:\n        return 0\n    if x[-1]==0:\n        return 0\n    if y[0]==0:\n        return 0\n    if y[-1]==0:\n        return 0\n    if y[0]>0 and y[-1]<0:\n        return 0\n    if y[0]<0 and y[-1]>0:\n        return 0\n    if y[0]>0 and y[-1]>0:\n        return 0\n    if y[-1]<0:\n        return 0\n    if x[0]<0 and x[-1]<0:\n        return 0\n    if x[0]>0 and x[-1]>0:\n        return 0\n    if x[0]>0:\n        return 0\n    if x[-1]<0:\n        return 0\n    if y[0]<0:\n        return 0\n    if y[-1]>0:\n        return 0\n    if y[0]==0:\n        return 0\n    if y[-1]==0:\n        return 0\n    if x[0]==0:\n        return 0\n    if x[-1]==0:\n        return 0\n    if y[0]>0 and y[-1]<0:\n        return ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1742,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    pairs = []\n    for i in range(m):\n        u, v = list(map(int, input().split()))\n        pairs.append((u, v))\n    # print(pairs)\n    # print(p)\n    # print(n)\n    # print(m)\n    # print(p)\n    # print(pairs)\n    # print(len(pairs))\n    # print(pairs[0])\n    # print(pairs[0][0])\n    # print(pairs[0][1])\n    # print(p[pairs[0][0]-1])\n    # print(p[pairs[0][1]-1])\n    # print(p[pairs[0][0]-1]-1)\n    # print(p[pairs[0][1]-1])\n    # print(p[pairs[0][0]-1], p[pairs[0][1]-1])\n    # print(p[pairs[0][0]-1], p[pairs[0][1]-1])\n    # print(p[pairs[0][0]-1], p[pairs[0][1]-1])\n    # print(p[pairs[0][0]-1], p[pairs[0][1]-1])\n    # print(p[pairs[0][0]-1], p[pairs[0][1]-1])\n    # print(p[pairs[0][0]-1], p[pairs[0][1]-1])\n    # print(p[pairs[0][0]-1], p[pairs[0][1]-1])\n    # print(p[pairs[0][0]-1], p[pairs[0][1]-1])\n    # print(p[pairs[0][0]-1], p[pairs[0][1]-1])\n    # print(p[pairs[0][0]-1], p[pairs[0][1]-1])\n    # print(p[pairs[0",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1743,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split())\n    max_joy = 0\n    for i in range(1, n):\n        if a[i-1] + a[i+1] > max_joy:\n            max_joy = a[i-1] + a[i+1]\n        elif a[i-1] + a[i+1] == max_joy:\n            max_joy = max(max_joy, a[i-1] + a[i+1])\n        if b[i-1] + b[i+1] > max_joy:\n            max_joy = b[i-1] + b[i+1]\n        elif b[i-1] + b[i+1] == max_joy:\n            max_joy = max(max_joy, b[i-1] + b[i+1])\n        if c[i-1] + c[i+1] > max_joy:\n            max_joy = c[i-1] + c[i+1]\n        elif c[i-1] + c[i+1] == max_joy:\n            max_joy = max(max_joy, c[i-1] + c[i+1])\n    if a[0] + a[1] > max_joy:\n        max_joy = a[0] + a[1]\n    elif a[0] + a[1] == max_joy:\n        max_joy = max(max_joy, a[0] + a[1])\n    if a[n-1] + a[n-2] > max_joy:\n        max_joy = a[n-1] + a[n-2]\n    elif a[n-1] + a[n-2] == max_joy:\n        max_joy = max(max_joy, a[n-1] + a[n-2])\n    if b[0] + b[1] >",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1744,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().strip().split())\n    t = list(map(int, input().strip().split()))\n    result = [0] * n\n    for i in range(n):\n        for j in range(i):\n            if sum(t[:i+1]) <= m:\n                result[i] = j\n                break\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1745,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().split()]\n    field = [list(input()) for _ in range(n)]\n    count = 0\n    for i in range(1, n-1):\n        for j in range(1, m-1):\n            if field[i][j] == '.':\n                if field[i-1][j] == '.' and field[i+1][j] == '.' and field[i][j-1] == '.' and field[i][j+1] == '.':\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1746,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tc = int(input())\n    \\tp = [0] * (c + 1)\n    \\tfor i in range(1, c):\n        \\tp[int(input())] += 1\n    \\tfor i in range(2, c + 1):\n        \\t    if p[i] == 0:\n        \\t        p[i] = 1\n    \\t    else:\n        \\t        p[p[i]] += 1\n    \\tfor i in range(2, c + 1):\n        \\t    if p[i] < 3:\n        \\t        return \"No\"\n    \\treturn \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1747,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = map(int, input().split())\n    a = list(map(int, input().split()))\n    max_len = 0\n    max_start = 0\n    max_end = 0\n    count = {}\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] not in count:\n            count[a[i]] = 1\n        else:\n            count[a[i]] += 1\n        if len(count) <= k:\n            end = i\n            if end - start + 1 > max_len:\n                max_len = end - start + 1\n                max_start = start\n                max_end = end\n        else:\n            while len(count) > k:\n                count[a[start]] -= 1\n                if count[a[start]] == 0:\n                    del count[a[start]]\n                start += 1\n    print(max_start+1, max_end+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1748,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    V = list(map(int, input().split()))\n    T = list(map(int, input().split()))\n    result = []\n    for i in range(n):\n        for j in range(n):\n            V[j] -= T[i]\n            if V[j] <= 0:\n                V[j] = 0\n        result.append(sum(V))\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1749,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    return \"TRUTH\" if sorted(a) == sorted(b) else \"LIE\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1750,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    edges = []\n    for i in range(n-1):\n        edges.append(list(map(int, input().split()))\n    # Your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1751,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=0\n    for i in range(1,n+1):\n        count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1752,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    heights = list(map(int, input().split()))\n    heights.sort()\n    return heights\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1753,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = list(map(int, input().split()))\n    harmonize = {}\n    for i in range(m):\n        a,b = list(map(int, input().split()))\n        if a not in harmonize:\n            harmonize[a] = set()\n        if b not in harmonize:\n            harmonize[b] = set()\n        harmonize[a].add(b)\n        harmonize[b].add(a)\n    colors = [[] for i in range(n)]\n    for i in range(n):\n        colors[i].append(int(input()) % 5001)\n    for i in range(n):\n        colors[i].append(int(input()) % 10000000000001)\n    colors.sort(key=lambda x: x[0], reverse=True)\n    colors = colors[:5000]\n    for i in range(n):\n        if not colors[i]:\n            colors[i] = [1, 1]\n        else:\n            colors[i] = [colors[i][0], colors[i][1] % 1000000000000]\n    for i in range(n):\n        print(colors[i][0])\n        for j in range(colors[i][0]):\n            print(colors[i][1], colors[i][1] + j)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1754,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k=map(int, input().split())\n    powers=list(map(int, input().split()))\n    schools=list(map(int, input().split()))\n    chosen=set(map(int, input().split()))\n    #print(n, m, k, powers, schools, chosen)\n    schools_dict={}\n    for i in range(m):\n        schools_dict[i+1]=[]\n    for i in range(n):\n        schools_dict[schools[i]].append(powers[i])\n    #print(schools_dict)\n    max_power=max(powers)\n    max_power_students=[]\n    for i in range(1, m+1):\n        max_power_students.append(max(schools_dict[i]))\n    max_power_students.sort(reverse=True)\n    #print(max_power_students)\n    made_up_schools=0\n    for i in range(k):\n        if max_power_students[i] in chosen:\n            continue\n        else:\n            made_up_schools+=1\n    return made_up_schools\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1755,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, K = map(int, input().split())\n    A = list(map(int, input().split())\n    B = list(map(int, input().split())\n    if K == 0:\n        A.sort()\n        return -1 if A != list(range(1, N+1) else 0\n    B = set(B)\n    A = [0] * N\n    min_ops = 0\n    for i in range(N):\n        if i not in B:\n            min_ops += 1\n            A[i] = i + 1\n    for i in range(N):\n        if A[i] == 0:\n            min_ops += 1\n            A[i] = i + 1\n    return min_ops\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1756,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = map(int, input().split())\n    days = list(map(int, input().split())\n    # write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1757,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    name = \"\"\n    for i in range(1, n+1):\n        if i in [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 177111, 28657, 46368, 75025, 121393, 196418, 3178111, 5142229, 832040, 1346269, 2178308, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 1023334155, 1655801141, 267914296, 433494437, 701408181, 1134626937, 1836311190, 297121507, 480752697, 777874204, 12586269025, 20365011107, 3295128009, 53316291117, 8626757127, 13958386623, 22585174334, 3654352966, 5832742486, 9273777880, 1500",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1758,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    t = input()\n    s = list(s)\n    t = list(t)\n    count = 0\n    for i in range(n):\n        if s[i] != t[i]:\n            count += 1\n    if count == 0:\n        return 0\n    if count % 2 != 0:\n        return -1\n    count //= 2\n    for i in range(n):\n        if s[i] != t[i]:\n            s[i], s[i+count] = s[i+count], s[i]\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1759,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m,n=map(int, input().split())\n    t=[]\n    for i in range(m):\n        t.append(list(map(int, input().split()))\n    r=[]\n    for i in range(m):\n        r.append(sum(t[i])\n    return r\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1760,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    steps=input()\n    result=[]\n    pointer_direction=steps[0]\n    time=1\n    for i in range(1,n):\n        if pointer_direction=='U':\n            if i==n-1:\n                result.append(time)\n                break\n            else:\n                time+=1\n                pointer_direction='D'\n        else:\n            if i==0:\n                result.append(time)\n                break\n            else:\n                time+=1\n                pointer_direction='U'\n    for i in range(1,n-1):\n        if pointer_direction=='U':\n            if steps[i]=='D':\n                time+=1\n                pointer_direction='D'\n            else:\n                time+=2\n                pointer_direction='U'\n        else:\n            if steps[i]=='U':\n                time+=1\n                pointer_direction='U'\n            else:\n                time+=2\n                pointer_direction='D'\n        result.append(time)\n    if pointer_direction=='U':\n        result.append(time+1)\n    else:\n        result.append(-1)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1761,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = '<3' + '<3'.join(input() for i in range(int(input()))) + '<3'\n    return 'yes' if t in input_string else 'no'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1762,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, k = f()\n    videos = []\n    for _ in range(n):\n        s, m = f()\n        videos.append((s, m))\n    videos.sort(key=lambda x: x[0])\n    servers = [0] * k\n    time = 0\n    for s, m in videos:\n        servers.sort()\n        while servers[0] <= s:\n            servers.pop(0)\n        servers.append(s + m)\n        time = max(time, servers[0])\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1763,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, A, R, M = list(map(int, input().split()))\n    heights = list(map(int, input().split()))\n    heights.sort()\n    max_height = max(heights)\n    min_height = min(heights)\n    if max_height == min_height:\n        return 0\n    if max_height - min_height == 1:\n        return sum(A * (max_height - 1) + R * (N - max_height) + M * (N - max_height))\n    else:\n        return sum(A * (max_height - 1) + R * (N - max_height) + M * (N - max_height)) + (max_height - 1) * (max_height - min_height) * M\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1764,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    t = 0\n    petya_score = 0\n    gena_score = 0\n    for i in range(n):\n        if a[i] == 1:\n            petya_score += 1\n        else:\n            gena_score += 1\n        if petya_score == t:\n            s += 1\n            petya_score = 0\n            gena_score = 0\n        if gena_score == t:\n            s += 1\n            petya_score = 0\n            gena_score = 0\n    if petya_score == 0 and gena_score == 0:\n        print(0)\n    else:\n        print(1)\n        print(s, t)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1765,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=int(input())\n    y=list(map(int,input().split()))\n    y.sort()\n    count=0\n    for i in range(len(y)):\n        if y[i]&(2**count)==0:\n            count+=1\n        else:\n            break\n    if count==0:\n        print(-1)\n    else:\n        print(count)\n        for i in range(count):\n            print(y[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1766,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    cards=list(map(int,input().split()))\n    sereja_sum=0\n    dima_sum=0\n    for i in range(n):\n        if i%2==0:\n            sereja_sum+=cards[i]\n        else:\n            dima_sum+=cards[i]\n    print(sereja_sum,dima_sum)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1767,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    max_sum=0\n    for l in range(1,n+1):\n        for r in range(l,n+1):\n            sum_a=0\n            sum_b=0\n            for i in range(l,r+1):\n                sum_a|=a[i]\n                sum_b|=b[i]\n            max_sum=max(max_sum,sum_a|sum_b)\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1768,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    s = input()\n    q = int(input())\n    max_koyomity = 0\n    for i in range(q):\n        m, c = map(int, input().split())\n        new_s = list(s)\n        for j in range(m):\n            new_s[j] = c\n        s = ''.join(new_s)\n        count = 0\n        max_count = 0\n        current_count = 0\n        for i in range(N):\n            if s[i] == c:\n                current_count += 1\n            else:\n                count = max(count, current_count)\n                current_count = 0\n        max_count = max(max_count, current_count)\n        max_koyomity = max(max_koyomity, max_count)\n    return max_koyomity\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1769,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A, B = int(input()), int(input())\n    N = A + B + 1\n    stops = [1]\n    for i in range(2, N):\n        if i <= A:\n            stops.append(stops[-1] + 1)\n        else:\n            stops.append(stops[-1] - 1)\n    return \" \".join(map(str, stops))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1770,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn, x, y, d = map(int, input().split())\n    # print(tn, x, y, d)\n    if y < x:\n        return -1\n    if y == x:\n        return 0\n    if y % d == 0:\n        return (y//d)\n    else:\n        return (y//d) + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1771,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l, w = [int(x) for x in input().split()]\n    clouds = []\n    for _ in range(n):\n        x, v = [int(x) for x in input().split()]\n        clouds.append((x, v))\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1772,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    flowers = list(map(int, input().split()))\n    large_bouquets = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(flowers[i:j+1]) % 2 == 1:\n                large_bouquets += 1\n    return large_bouquets\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1773,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=[]\n    a=[]\n    for i in range(n):\n        x.append(int(input()))\n        a.append(int(input()))\n    x.sort()\n    a.sort()\n    apples=0\n    i=0\n    j=n-1\n    while i<n and j>=0:\n        if x[i]<0:\n            apples+=a[i]\n            i+=1\n        elif x[j]>0:\n            apples+=a[j]\n            j-=1\n        else:\n            apples+=a[i]\n            i+=1\n            j-=1\n    return apples\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1774,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if len(s) == 0:\n        return \"Yes\"\n    if len(s) % 2 == 0:\n        return \"No\"\n    for i in range(len(s)):\n        if s[i] == \"H\":\n            continue\n        else:\n            return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1775,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k = map(int, input().split())\n    droids = []\n    for i in range(n):\n        droids.append(list(map(int, input().split()))\n    # Your code goes here\n    # return the result as a list of integers\n    # Example: [2, 2]\n    # Example: [1, 3]\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1776,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    exp = str(input())\n    P, M = map(int, input().split())\n    count = 0\n    for i in exp:\n        if i == '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n        elif i == '?':\n            count += 1\n    if count % 2 == 0:\n        return 0\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1777,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    stack = []\n    for char in input_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return 0\n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1778,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    a_score=0\n    b_score=0\n    while a and b:\n        if a[-1]>b[-1]:\n            a_score+=a.pop()\n        else:\n            b_score+=b.pop()\n    return a_score-b_score\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1779,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input()\n    b = input()\n    s = input()\n    result = \"\"\n    for i in s:\n        if i.isalpha():\n            if i.isupper():\n                result += b[a.index(i.lower())].upper()\n            else:\n                result += b[a.index(i)]\n        else:\n            result += i\n    print(result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1780,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    queries = []\n    for _ in range(m):\n        queries.append(list(map(int, input().split()))\n    result = []\n    for query in queries:\n        l, r = query\n        if sum(a[l-1:r]) == 0:\n            result.append(1)\n        else:\n            result.append(0)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1782,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    if n < k:\n        return -1\n    if k == 1:\n        return [1] * n\n    if k == 2:\n        return [1] * (n // 2) + [2] * (n - n // 2)\n    if k == 3:\n        return [1] * (n // 3) + [2] * (n // 3) + [3] * (n - n // 3 * 2)\n    if n % k == 0:\n        return [1] * (n // k) * k\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1783,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = list(map(int,input().split()))\n    a = list(map(int,input().split()))\n    total_sleep = 0\n    for i in range(n-k+1):\n        total_sleep += sum(a[i:i+k])\n    return total_sleep/k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1784,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    piles = list(map(int, input().split()))\n    pebbles = [0] * k\n    for pile in piles:\n        for i in range(k):\n            pebbles[i] += pile\n    for i in range(n):\n        pebbles[i] -= 1\n    if max(pebbles) - min(pebbles) > 1:\n        return \"NO\"\n    else:\n        return \"YES\\n\" + \"\\n\".join(str(i+1) for i in pebbles)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1785,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = int(input()), input()\n    count = 0\n    for i in range(n):\n        count += 1\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1786,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w,h,n=map(int,input().split())\n    cuts=input_string.split('\\n')\n    max_area=w*h\n    for i in range(n):\n        if cuts[i][0]=='H':\n            max_area=max(max_area,w*h-int(cuts[i][1:]))\n            h=max(h-int(cuts[i][1:]),1)\n        else:\n            max_area=max(max_area,h*int(cuts[i][1:]))\n            w=max(w-int(cuts[i][1:]),1)\n        print(max_area)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1787,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'a':\n            count += 1\n    for i in range(len(s)-1):\n        if s[i] == 'b' and s[i+1] == 'a':\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1788,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    x=a-b\n    y=a+b\n    print(x,y)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1789,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,x,y = map(int,input().split())\n    if a == b:\n        return 0\n    elif a > b:\n        return x*(b-a)\n    else:\n        return x*(a-b) + y*(b-a-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1790,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    stops = input_string.split('\\n')\n    lines = set()\n    for stop in stops:\n        lines.update(map(int, stop.split()[1:]))\n    return sorted(lines)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1791,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1792,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Parse the input\n    n, m = map(int, input_string.split()[:2])\n    edges = [tuple(map(int, input_string.split()[i:i+2]) for i in range(2, 2*m+2, 2))\n    s, b, k, h = map(int, input_string.split()[2:5])\n    spaceships = [tuple(map(int, input_string.split()[i:i+3]) for i in range(5, 5+s*3, 3))\n    bases = [tuple(map(int, input_string.split()[i:i+2]) for i in range(5+s*3, 5+s*3+b*2, 2)\n    \n    # Initialize the graph\n    graph = [[] for _ in range(n)]\n    for u, v in edges:\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    \n    # Compute the shortest path lengths\n    shortest_paths = [float('inf')] * n\n    shortest_paths[0] = 0\n    queue = [0]\n    while queue:\n        node = queue.pop(0)\n        for neighbor in graph[node]:\n            if shortest_paths[neighbor] == float('inf'):\n                shortest_paths[neighbor] = shortest_paths[node] + 1\n                queue.append(neighbor)\n    \n    # Compute the maximum attacking strength of each base\n    max_attack = [0] * n\n    for x, a, f in spaceships:\n        max_attack[x-1] = max(max_attack[x-1], a)\n    \n    # Compute the minimum cost\n    min_cost = 0\n    for x, d in bases:\n        min_cost += h\n        min_cost += k if max_attack[x-1] >= d else 0\n        min_cost += shortest_paths[x-1] * k\n    \n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1793,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l, s = list(map(int, input().split()))\n    w = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1794,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.append(n)\n    a.insert(0, 0)\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i+1, n):\n            dp[j] = dp[i] + 1\n            for k in range(i+1, a[j]+1):\n                dp[j] = min(dp[j], dp[i-1] + 1)\n    return sum(dp)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1795,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    f = list(map(int, input().split()))\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i != j and i != k and j != k and f[i] == k:\n                    return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1796,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s += input()[1]=='+' or -1\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1797,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    max_convenience = 0\n    for i in range(n):\n        for j in range(n):\n            max_convenience += abs(i - p[i]) + abs(j - p[j])\n    return max_convenience\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1798,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    a = list(map(int, input_string.split()))\n    x = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] == a[j]:\n                x.add(a[i])\n    x = sorted(list(x))\n    for i in x:\n        print(i, 0)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1799,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    teams = []\n    for i in range(n):\n        t, w = map(int, input().split())\n        teams.append((t, w))\n    teams.sort(key=lambda x: x[0], reverse=True)\n    total_balloons = sum(t[0] for t in teams)\n    total_weight = sum(t[1] for t in teams)\n    balloons_given = 0\n    for i in range(n):\n        if teams[i][0] > teams[i][1]:\n            balloons_given += teams[i][0]\n            total_balloons -= teams[i][0]\n            total_weight -= teams[i][1]\n        else:\n            break\n    return n - (total_balloons // total_weight) + 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1800,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    read = lambda: list(map(int, input().split()))\n    n, m = read()\n    a = read()\n    for _ in range(m):\n        t, r = read()\n        if t == 1:\n            a = sorted(a[:r]) + a[r:]\n        else:\n            a = sorted(a[:r], reverse=True) + a[r:]\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1801,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    m = int(input())\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1802,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a = int(input()), list(map(int, input().split()))\n    b = [0] * n\n    for i in range(n):\n        if a[i] < 0:\n            b[i] = a[i] + 1\n        else:\n            b[i] = a[i] - 1\n    b.sort()\n    max_buns = 0\n    for i in range(n):\n        if b[i] < 0:\n            max_buns += abs(b[i])\n        else:\n            break\n    print(max_buns)\n    print(b[0], abs(b[1] - b[0]))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1803,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    rd  = lambda: list(map(int, input().split()))\n    n = rd()[0]\n    a = rd()\n    m = rd()[0]\n    xy = [rd() for _ in range(m)]\n    for i in range(m):\n        x, y = xy[i]\n        a[x-1] -= 1\n        if x-1 > 0:\n            a[x-2] += a[x-1]\n        if x+1 < n:\n            a[x] += a[x+1]\n    for i in range(n):\n        print(a[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1804,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = input().split()\n    N, M = int(N), int(M)\n    C = int(input())\n    hotels = []\n    for _ in range(C):\n        x, y = map(int, input().split())\n        hotels.append((x, y))\n    H = int(input())\n    restaurants = []\n    for _ in range(H):\n        x, y = map(int, input().split())\n        restaurants.append((x, y))\n    min_distance = float('inf')\n    min_index = -1\n    for i, hotel in enumerate(hotels):\n        for j, restaurant in enumerate(restaurants):\n            distance = abs(hotel[0] - restaurant[0]) + abs(hotel[1] - restaurant[1])\n            if distance < min_distance:\n                min_distance = distance\n                min_index = j\n    print(min_distance)\n    print(min_index)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1805,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 2:\n        return 1\n    elif n == 5:\n        return 0\n    elif n == 11:\n        return 1\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1806,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = map(int, input().split())\n    intervals = []\n    for _ in range(N):\n        intervals.append(list(map(int, input().split()))\n    queries = []\n    for _ in range(M):\n        queries.append(list(map(int, input().split()))\n    result = []\n    for query in queries:\n        x, y = query\n        min_intervals = float('inf')\n        for interval in intervals:\n            l, r = interval\n            if l <= x <= r:\n                min_intervals = min(min_intervals, r - x + 1)\n            if l <= y <= r:\n                min_intervals = min(min_intervals, y - l + 1)\n        if min_intervals == float('inf'):\n            result.append(-1)\n        else:\n            result.append(min_intervals)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1807,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b = map(int,input().split())\n    count = 0\n    for i in range(a,b+1):\n        count += len(str(i))\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1808,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,k,x=R()\n    a=R()\n    a.sort()\n    if k==n:\n        return sum(a)\n    else:\n        return sum(a[:k])+sum(a[k:])+k*x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1809,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    w=list(map(int,input().split())\n    b=list(map(int,input().split())\n    w.sort()\n    b.sort()\n    total_weight=0\n    for i in range(m):\n        total_weight+=w[b[i]-1]\n    return total_weight\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1810,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=0\n    for i in range(2,11):\n        if n%i==0:\n            count+=1\n    if count==9:\n        print(1)\n    else:\n        print(0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1811,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    road = input().strip()\n    if road[0] == \".\":\n        if road[-1] == \".\":\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        for i in range(1, n):\n            if road[i] == \".\":\n                continue\n            else:\n                for j in range(1, k+1):\n                    if i+j <= n and road[i+j] == \".\":\n                        return \"YES\"\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1812,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    inp = input()\n    n = int(inp.split()[0])\n    a = list(map(int, inp.split()[1:]))\n    k = []\n    for i in range(n):\n        k.append(0)\n        while True:\n            if str(2**k[i])[-len(str(a[i])):] == str(a[i]):\n                break\n            k[i] += 1\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1813,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,s,l = [int(s) for s in input().split()]\n    a = [int(s) for s in input().split()]\n    # your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1814,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,cl,ce,v=list(map(int,input().split()))\n    l=list(map(int,input().split()))\n    e=list(map(int,input().split())\n    q=int(input())\n    queries=[]\n    for i in range(q):\n        queries.append(list(map(int,input().split()))\n    # Your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1815,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    u = list(map(int, input().split()))\n    # Write your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1816,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,t=int(input()),list(map(int,input().split())),0\n    for i in range(a):\n        t+=abs(i-b[i])\n    return t\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1817,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    if n % 2 == 0:\n        return a[n//2]\n    else:\n        return a[n//2]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1818,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input_string.split()))\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]%2==0 and a[j]%2==0:\n                count+=1\n            elif a[i]%2!=0 and a[j]%2!=0:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1819,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x=map(int,input().split())\n    if n==1:\n        return 1\n    elif x==1:\n        return n\n    else:\n        return n-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1820,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    for i in range(n-2):\n        for j in range(i+1,n-1):\n            for k in range(j+1,n):\n                if a[i]**2+a[j]**2==a[k]**2:\n                    return [i+1,j+1,k+1]\n    return [-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1821,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input()) + 1\n    notes = list(map(int, input().split()))\n    max_length = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (notes[i] + notes[j]) % 7 == 0 or abs(notes[i] - notes[j]) == 1:\n                max_length = max(max_length, j - i)\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1822,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    queue = [i for i in range(1, n+1) if a[i-1] == 0]\n    result = []\n    while queue:\n        i = queue.pop(0)\n        result.append(i)\n        if a[i-1] != 0:\n            queue.insert(a[i-1]-1, i)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1823,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    # print(n, k, a)\n    genre_count = [0] * (k+1)\n    for i in range(n):\n        genre_count[a[i]] += 1\n    # print(genre_count)\n    min_stress = float('inf')\n    min_genre = 0\n    for i in range(1, k+1):\n        if genre_count[i] > 0:\n            stress = sum(genre_count[1:]) - genre_count[i]\n            if stress < min_stress:\n                min_stress = stress\n                min_genre = i\n    return min_genre\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1824,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    errors = list(map(int, input().split()))\n    for i in range(n-1):\n        errors.remove(int(input().split()[0])\n    for i in range(n-2):\n        errors.remove(int(input().split()[0])\n    print(errors[0], errors[1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1825,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    L=lambda : list(map(int,input().split()))\n    n=int(input())\n    s=\"\"\n    for i in range(n):\n        t,k=input().split()\n        k=int(k)\n        x=L()\n        s+=t*k\n        for j in range(k):\n            s=s[:x[j]]+\"a\"+s[x[j]:]\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1826,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    input_string=input()\n    count=0\n    for i in range(len(input_string)-1):\n        if input_string[i]=='U' and input_string[i+1]=='R':\n            input_string=input_string[:i]+'D'+input_string[i+2:]\n            count+=1\n    print(len(input_string)-count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1828,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    x = [0]\n    y = [0]\n    for i in range(n):\n        x.append(int(input()))\n        y.append(int(input()))\n    dangerous_turns = 0\n    for i in range(1, n):\n        if x[i] == x[i-1] and y[i] == y[i-1]:\n            dangerous_turns += 1\n    print(dangerous_turns)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1829,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y = input().split(\\\" \\\", 1)\n    x = int(x)\n    y = int(y)\n    polandball = set(input().split())\n    enemyball = set(input().split())\n    for i in range(x):\n        if input() in enemyball:\n            return \\\"NO\\\"\n    return \\\"YES\\\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1830,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    board=[[0]*n for i in range(n)]\n    for i in range(k):\n        x,y=list(map(int,input().split()))\n        board[x-1][y-1]=1\n        for j in range(n):\n            if board[x-1][j]==1:\n                for i in range(n):\n                    board[i][y-1]=1\n            if board[i][y-1]==1:\n                for j in range(n):\n                    board[x-1][j]=1\n        print(sum(board[i].count(0) for i in range(n))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1831,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, m = f()\n    connectors = [f() for _ in range(m)]\n    adjacency_list = [[] for _ in range(n+1)]\n    for a, b in connectors:\n        adjacency_list[a].append(b)\n        adjacency_list[b].append(a)\n    for i in range(1, n+1):\n        if len(adjacency_list[i]) > 1:\n            return \"no\"\n    return \"yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1832,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        s = [''] * (n+1)\n        for j in range(n):\n            s[j] = ''.join(chr(ord('a') + k % 26) for k in range(a[j]))\n            s[j+1] = ''.join(chr(ord('a') + k % 26) for k in range(a[j], a[j]+1))\n        for j in range(n+1):\n            print(s[j])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1833,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    mod=10**9+7\n    count=0\n    for i in range(1,n+1):\n        count+=1\n        for j in range(i,n+1,i):\n            count+=1\n    return count%mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1834,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(1, n, 2):\n        if a[i] > a[i-1]:\n            return \"Impossible\"\n    for i in range(2, n, 2):\n        if a[i] < a[i-1]:\n            return \"Impossible\"\n    return \" \".join(map(str, a))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1835,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn=int(input())\n    for i in range(tn):\n        n=int(input())\n        s=[]\n        for j in range(n):\n            s.append(input())\n        count=0\n        for i in range(n):\n            for j in range(len(s[i])):\n                if s[i][j]==s[i][::-1][j]:\n                    count+=1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1836,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    segments = []\n    for _ in range(m):\n        u, v = map(int, input().split())\n        segments.append((u, v))\n    # Your code here\n    # return the maximum possible value of the hedgehog's beauty\n    # You can use the following variables:\n    # n - the number of points\n    # m - the number of segments\n    # segments - a list of tuples (u, v) representing segments\n    # You can use the following functions:\n    # - set() to remove duplicates\n    # - sorted() to sort a list\n    # - sum() to calculate the sum of a list\n    # - len() to count the length of a list\n    # - max() to find the maximum value\n    # - min() to find the minimum value\n    # - any() to check if any element satisfies a condition\n    # - all() to check if all elements satisfy a condition\n    # - list() to convert a set to a list\n    # - set() to convert a list to a set\n    # - tuple() to convert a list to a tuple\n    # - sorted() to sort a list\n    # - set() to remove duplicates\n    # - list() to convert a set to a list\n    # - enumerate() to iterate over a list with indices\n    # - zip() to iterate over two lists simultaneously\n    # - map() to apply a function to a list\n    # - filter() to filter a list\n    # - sorted() to sort a list\n    # - set() to remove duplicates\n    # - list() to convert a set to a list\n    # - tuple() to convert a list to a tuple\n    # - sorted() to sort a list\n    # - set() to remove duplicates\n    # - list() to convert a set to a list\n    # - tuple() to convert a list to a tuple\n    # - sorted() to sort a list\n    # - set() to remove duplicates\n    # - list() to convert a set to a list\n    # - tuple() to convert a list to a tuple\n    # - sorted() to sort a list\n    # - set() to remove duplicates\n    # - list() to convert a set to a list\n    # - tuple() to convert a list to a tuple\n    # -",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1837,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a_dict = {}\n    for i in range(n):\n        a_dict[i] = a[i]\n    max_fixed_points = 0\n    for i in range(n):\n        if a[i] == i:\n            max_fixed_points += 1\n    for i in range(n):\n        if a[i] != i:\n            if a[a[i]] == i:\n                max_fixed_points += 1\n                a[a[i]], a[i] = a[i], a[a[i]]\n                break\n    print(max_fixed_points)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1838,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: input().split()\n    n, m, q = map(int, f())\n    words = f()\n    relations = []\n    for _ in range(m):\n        t, x, y = f()\n        t = int(t)\n        if t == 1:\n            relations.append((x, y, True))\n        else:\n            relations.append((x, y, False))\n    for _ in range(q):\n        x, y = f()\n        print(3)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1839,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    schedule=[]\n    for i in range(n**2):\n        schedule.append(list(map(int,input().split()))\n    days=[]\n    for i in range(n**2):\n        if schedule[i][0] not in days and schedule[i][1] not in days:\n            days.append(schedule[i][0])\n            days.append(schedule[i][1])\n    days.sort()\n    return days\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1840,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s, b = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    bases = []\n    for i in range(b):\n        bases.append(list(map(int, input().split()))\n    # Your code here\n    # return the maximum amount of gold each spaceship can steal\n    # in the same order as the spaceships are given in the input\n    # You can use the following variables:\n    # a: list of attacking powers\n    # bases: list of defensive powers and gold for each base\n    # s: number of spaceships\n    # b: number of bases\n    # You can use the following function to calculate the maximum amount of gold a spaceship can steal:\n    # def max_gold(attacking_power, defensive_powers):\n    #     return sum(gold for defensive_power, gold in bases if defensive_power <= attacking_power)\n    # You can use the following function to sort the bases by defensive power:\n    # def sort_bases_by_defensive_power(bases):\n    #     return sorted(bases, key=lambda x: x[0])\n    # You can use the following function to filter the bases with defensive power less than or equal to the attacking power:\n    # def filter_bases(attacking_power, bases):\n    #     return [gold for defensive_power, gold in bases if defensive_power <= attacking_power]\n    # You can use the following function to calculate the total gold stolen by a spaceship:\n    # def total_gold(attacking_power, bases):\n    #     return sum(filter_bases(attacking_power, bases))\n    # You can use the following function to find the maximum gold stolen by a spaceship:\n    # def max_gold(attacking_power, bases):\n    #     return max(total_gold(attacking_power, bases) for attacking_power in a)\n    # You can use the following function to sort the bases by attacking power:\n    # def sort_bases_by_attacking_power(bases):\n    #     return sorted(bases, key=lambda x: x[0",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1841,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split(' ')))\n    a = list(map(int, input().split(' '))\n    result = []\n    for i in range(m):\n        l = int(input())\n        count = 0\n        for j in range(l, n):\n            if a[j] not in a[l:j]:\n                count += 1\n        result.append(count)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1842,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=list(map(int,input().split()))\n    d=b**2-4*a*c\n    if d>0:\n        x1=(-b+d**0.5)/(2*a)\n        x2=(-b-d**0.5)/(2*a)\n        if x1>x2:\n            print(round(x1,10)\n            print(round(x2,10)\n        else:\n            print(round(x2,10)\n            print(round(x1,10)\n    elif d==0:\n        x=(-b)/(2*a)\n        print(round(x,10)\n        print(round(x,10)\n    else:\n        print(\"No real roots\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1843,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        sum = 0\n        for j in range(1, n+1):\n            sum += (-1)**(j) * 2**j\n        print(sum)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1844,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    numbers = list(map(int, input_string.split()[1:]))\n    gcd = lambda a, b: a if b == 0 else gcd(b, a % b)\n    gcd_list = [gcd(numbers[i], numbers[i+1]) for i in range(n-1)]\n    gcd_list.append(gcd(numbers[-1], gcd_list[-1]))\n    gcd_list = [1] + gcd_list\n    gcd_list = [gcd_list[i] for i in range(n) if gcd_list[i] == 1]\n    if not gcd_list:\n        return -1\n    else:\n        return len(gcd_list)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1845,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    L=list(map(int,input().split()))\n    n=len(L)\n    L.sort()\n    min_power=sum(L)\n    for i in range(n):\n        for j in range(i+1,n):\n            for x in range(1,L[i]):\n                if L[i]%x==0 and L[j]%x==0:\n                    L[i]=L[i]//x\n                    L[j]=L[j]*x\n                    min_power=min(min_power,sum(L))\n                    L[i]=L[i]*x\n                    L[j]=L[j]//x\n    return min_power\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1846,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    temp=list(map(int,input().split()))\n    count=0\n    for i in range(n):\n        if temp[i]<0:\n            count+=1\n        else:\n            break\n    if count==0:\n        print(0)\n    else:\n        for i in range(count,n):\n            if temp[i]>0:\n                print(i-count+1)\n                break\n    #print(count)\n    #print(temp)\n    #print(i)\n    #print(temp[i])\n    #print(temp[i-1])\n    #print(temp[i-1]<0)\n    #print(temp[i]>0)\n    #print(temp[i-1]<0)\n    #print(temp[i]<0)\n    #print(temp[i+1]>0)\n    #print(temp[i+1]<0)\n    #print(temp[i+1]<0)\n    #print(temp[i+2]>0)\n    #print(temp[i+2]<0)\n    #print(temp[i+2]>0)\n    #print(temp[i+2]<0)\n    #print(temp[i+3]>0)\n    #print(temp[i+3]<0)\n    #print(temp[i+3]>0)\n    #print(temp[i+3]<0)\n    #print(temp[i+4]>0)\n    #print(temp[i+4]<0)\n    #print(temp[i+4]>0)\n    #print(temp[i+4]<0)\n    #print(temp[i+5]>0)\n    #print(temp[i+5]<0)\n    #print(temp[i+5]>0)\n    #print(temp[i+5]<0)\n    #print(temp[i+6]>0)\n    #print(temp[i+6]<0)\n    #print(temp[i+6]>0)\n    #print(temp[i+6]<",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1847,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x0, y0, x1,y1 = map(int, input().split())\n    n = int(input())\n    allowed_cells = []\n    for _ in range(n):\n        allowed_cells.append(list(map(int, input().split()))\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1848,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n-1):\n        if a[i] + 1 < a[i+1]:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1849,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    mod = 998244353\n    result = [0] * (n+1)\n    for i in range(n):\n        num = str(i).zfill(n)\n        for j in range(n):\n            block_length = 1\n            while j + block_length < n and num[j] == num[j+block_length]:\n                block_length += 1\n            result[block_length] += 1\n    for i in range(n):\n        print(result[i] % mod)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1850,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda:map(int,input().split())\n    N,D=I()\n    S=I()\n    P=I()\n    S.sort(reverse=True)\n    P.sort(reverse=True)\n    S.append(0)\n    P.append(0)\n    for i in range(N):\n        S[i]+=P[i]\n    S.sort()\n    return S.index(S[D-1])+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1851,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    days = 1\n    i = 1\n    while i <= n:\n        if i in a:\n            days += 1\n            i = a[i-1]\n        else:\n            i += 1\n    return days\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1852,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1853,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m= map(int, input().split())\n    pairs = []\n    for i in range(m):\n        pairs.append(list(map(int, input().split()))\n    first_array = []\n    second_array = []\n    for pair in pairs:\n        a, b = pair\n        if a not in first_array:\n            first_array.append(a)\n        if b not in first_array:\n            first_array.append(b)\n        if a not in second_array:\n            second_array.append(a)\n        if b not in second_array:\n            second_array.append(b)\n    if len(first_array) != n:\n        print(\"NO\")\n        return\n    if len(second_array) != n:\n        print(\"NO\")\n        return\n    print(\"YES\")\n    print(\" \".join(map(str, first_array))\n    print(\" \".join(map(str, second_array))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1854,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if n==1:\n        print(\"NO\")\n        return\n    if n==2:\n        print(\"YES\")\n        print(1)\n        print(1,2)\n        return\n    if max(a)<2:\n        print(\"NO\")\n        return\n    if max(a)>n-1:\n        print(\"NO\")\n        return\n    a.sort()\n    a.reverse()\n    if a[0]>1:\n        print(\"NO\")\n        return\n    if a[1]>2:\n        print(\"NO\")\n        return\n    if a[1]==2:\n        print(\"YES\")\n        print(2)\n        print(1,2)\n        print(2,3)\n        return\n    if a[2]>2:\n        print(\"NO\")\n        return\n    if a[2]==2:\n        print(\"YES\")\n        print(2)\n        print(1,2)\n        print(2,3)\n        return\n    print(\"YES\")\n    print(2)\n    print(1,2)\n    print(2,3)\n    print(3,4)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1855,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    p=list(map(int,input().split())\n    p.sort()\n    max_value=0\n    count=0\n    for i in range(k):\n        for j in range(i+1,k):\n            for l in range(j+1,k):\n                for m in range(l+1,k):\n                    for n in range(m+1,k):\n                        for o in range(n+1,k):\n                            for p in range(o+1,k):\n                                for q in range(p+1,k):\n                                    for r in range(q+1,k):\n                                        max_value=max(max_value,sum(p[l:r+1]))\n    return max_value%998244353,count%998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1856,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    passwords=[]\n    for i in range(n):\n        passwords.append(input())\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if len(set(input_string[i])&set(input_string[j]))>0:\n                count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1857,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    return 2**(2*n)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1858,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return \"No\"\n    else:\n        return \"Yes\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1859,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = int(input())\n    count = 0\n    while x != 0:\n        count += 1\n        if x == 0:\n            break\n        for i in range(2, int(x**0.5)+1):\n            if x % i == 0:\n                x -= i\n                break\n        else:\n            x -= 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1860,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=0\n    for i in range(1,10):\n        for j in range(1,10):\n            for k in range(1,10):\n                if i!=j and i!=k and j!=k:\n                    count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1861,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = [int(s) for s in input().split()]\n    cards = [input().split() for i in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if all(cards[i][f] == cards[j][f] == cards[k][f] for f in range(k)) or all(cards[i][f] != cards[j][f] != cards[k][f] for f in range(k)):\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1862,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    sp=input().split()\n    n=int(sp[0])\n    socks=list(map(int,sp[1:]))\n    table=[]\n    max_count=0\n    for i in range(n):\n        if socks[i] not in table:\n            table.append(socks[i])\n            max_count+=1\n        else:\n            table.remove(socks[i])\n            max_count=max(max_count,len(table))\n            table.append(socks[i])\n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1863,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    prices = []\n    for i in range(n):\n        a, g = map(int, input().split())\n        prices.append((a, g))\n    total_a = sum(a for a, g in prices)\n    total_g = sum(g for a, g in prices)\n    if total_a != total_g:\n        print(-1)\n    else:\n        print(\"AG\" * n)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1864,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(-1 if min(list(map(int, str.split(input())))) == 1 else 1)\n    # return -1 if min(list(map(int, str.split(input()))) == 1 else 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1865,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    swaps = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                swaps.append((i, j))\n    print(len(swaps))\n    for swap in swaps:\n        print(swap[0], swap[1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1866,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    q = 0\n    pairs = []\n    for i in range(n):\n        pairs.append((i+1, i+1))\n    return q, pairs\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1867,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input().split()))\n    freq = {}\n    for i in range(N):\n        if A[i] in freq:\n            freq[A[i]] += 1\n        else:\n            freq[A[i]] = 1\n    max_freq = max(freq.values())\n    for i in range(N):\n        if A[i] in freq:\n            freq[A[i]] -= 1\n        else:\n            freq[A[i]] = 0\n        if max_freq == max(freq.values()):\n            continue\n        else:\n            max_freq = max(freq.values())\n    return 1, N\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1868,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,a=map(int,input().split())\n    b=list(map(int,input().split())\n    mod=998244353\n    count=1\n    for i in range(m):\n        count*=2\n        count%=mod\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1869,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input()) + 1\n    a = list(map(int, input().split()))\n    a.sort()\n    count = 0\n    i = 0\n    while i < n:\n        if a[i] == 0:\n            i += 1\n            continue\n        if a[i] == 1:\n            count += 1\n            i += 1\n        else:\n            count += a[i]\n            i += a[i]\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1870,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input().split()\n    c=int(input())\n    n=len(s)\n    for i in range(n):\n        s[i]=int(s[i])\n    s.sort()\n    count=0\n    for i in range(1,n):\n        if s[i]-s[i-1]<=c:\n            count+=1\n        else:\n            count=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1871,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = map(int, input().split())\n    c = list(map(int, input().split())\n    time = 0\n    for i in range(n):\n        time += x * (i+1)\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1872,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, r = list(map(int, input().split()))\n    n = int(n)\n    r = int(r)\n    area = 0\n    for i in range(1, n+1):\n        area += (r**2) * (2*i - 1) * (n - i) / (2 * n)\n    return round(area, 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1873,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    genres = list(map(int, input().split()))\n    # print(n, m, genres)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if genres[i] != genres[j]:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1874,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,a1,a2 = map(int,input().split())\n    b,b1,b2 = a,a,a\n    c,c1,c2 = a,a,a\n    pi = 3.141592653589793\n    V_tri = (a**2)*(pi/4)\n    V_quad = (b**2)*(pi/4)\n    V_pent = (c**2)*(pi/4)\n    V_total = V_tri + V_quad + V_pent\n    return V_total\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1875,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s, n = 0, int(input())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    points.sort()\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1876,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    adj_list = [[] for i in range(n+1)]\n    color = [0]*(n+1)\n    for i in range(n-1):\n        u,v,x = list(map(int,input().split()))\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n        color[i+1] = x\n    def dfs(u,parent,path,visited,k):\n        if len(path)==k:\n            return 1\n        count = 0\n        for v in adj_list[u]:\n            if v!=parent:\n                if visited[v]==0:\n                    visited[v]=1\n                    count+=dfs(v,u,path+[v],visited,k)\n                    visited[v]=0\n        return count\n    def count_good_sequences(u,parent,visited,k):\n        if len(path)==k:\n            return 1\n        count = 0\n        for v in adj_list[u]:\n            if v!=parent:\n                if visited[v]==0:\n                    visited[v]=1\n                    count+=count_good_sequences(v,u,path+[v],visited,k)\n                    visited[v]=0\n        return count\n    count = 0\n    for i in range(1,n+1):\n        count+=count_good_sequences(i,0,[0]*(n+1)\n    return count%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1877,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    moves=input()\n    count=0\n    x=0\n    y=0\n    for i in moves:\n        if i=='U':\n            y+=1\n        else:\n            x+=1\n        if x==y:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1878,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    rectangles=[]\n    for i in range(n):\n        rectangles.append(list(map(int,input().split()))\n    #print(rectangles)\n    table=[[0]*100 for i in range(100)]\n    for i in range(n):\n        x1,y1,x2,y2=rectangles[i]\n        for j in range(x1,x2+1):\n            for k in range(y1,y2+1):\n                table[j][k]+=1\n    #print(table)\n    result=0\n    for i in range(100):\n        for j in range(100):\n            result+=table[i][j]\n    print(result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1879,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t, sx, sy, ex, ey = map(int, input().split())\n    directions = input().split()\n    if sx == ex and sy == ey:\n        return 0\n    if sx > ex or sy > ey:\n        return -1\n    if sx == ex and sy == ey:\n        return 0\n    if sx > ex:\n        return -1\n    if sy > ey:\n        return -1\n    if sx == ex and sy < ey:\n        return (ey - sy) * 2 + 1\n    if sx < ex:\n        return (ex - sx) * 2 + 1\n    if sy == ey:\n        return (ex - sx) * 2 + 1\n    if sx > ex:\n        return (ex - sx) * 2 + 1\n    if sy < ey:\n        return (ey - sy) * 2 + 1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1880,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input()\n    n=list(n)\n    n[0],n[2],n[4],n[3],n[1]=n[0],n[2],n[4],n[3],n[1]\n    n=''.join(n)\n    n=int(n)\n    n=n**5\n    n=str(n)[-5:]\n    print(n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1881,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = [int(x) for x in input().split()]\n    pixels = [int(x) for x in input().split()]\n    groups = []\n    for i in range(0, 256, k):\n        groups.append([i, i+k-1])\n    groups.sort()\n    keys = [0] * len(groups)\n    for i in range(n):\n        for j in range(len(groups)):\n            if groups[j][0] <= pixels[i] <= groups[j][1]:\n                keys[j] = min(keys[j], pixels[i])\n    keys.sort()\n    return ' '.join(str(x) for x in keys)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1882,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,t=map(int,input().split())\n    a=[]\n    tt=[]\n    for i in range(n):\n        a.append(list(map(int,input().split()))\n    a.sort(key=lambda x:x[1])\n    max_score=0\n    for i in range(n):\n        if t-sum(tt)<=a[i][1]:\n            max_score+=1\n            tt.append(a[i][1])\n    if max_score==0:\n        print(0)\n        print(0)\n        print(0)\n    else:\n        print(max_score)\n        print(max_score)\n        print(a[0][0])\n        print(a[1][0])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1883,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    types = list(map(int, input().split()))\n    tracks = list(map(int, input().split()))\n    hotel = types.index(1)\n    path = [hotel]\n    for i in range(n-1):\n        if tracks[i] != 0:\n            path.append(tracks[i])\n    path.append(hotel)\n    return len(path), path\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1884,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, x1, x2 = map(int, input_string.split())\n    c = list(map(int, input().split())\n    \n    if sum(c) < x1 + x2:\n        return \"No\"\n    \n    c.sort(reverse=True)\n    k1 = 1\n    k2 = 1\n    while k1 * x1 <= sum(c) and k2 * x2 <= sum(c):\n        if k1 * x1 + k2 * x2 <= sum(c):\n            k1 += 1\n        else:\n            break\n    if k1 * x1 + k2 * x2 > sum(c):\n        return \"No\"\n    else:\n        return \"Yes\\n{}\\n{}\\n{}\".format(k1, k2)\n    \n    servers1 = []\n    servers2 = []\n    for i in range(n):\n        if c[i] >= x1:\n            servers1.append(i+1)\n            c[i] -= x1\n        elif c[i] >= x2:\n            servers2.append(i+1)\n            c[i] -= x2\n    \n    return \"Yes\\n{}\\n{}\\n{}\".format(k1, k2) + \"\\n{}\".format(\" \".join(map(str, servers1)) + \" \" + \" \".join(map(str, servers2)))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1885,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    return 7 * 6 * 5 * 4 * 3 * 2 * 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1886,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w=input()\n    print(w.capitalize())\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1887,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    heights1 = list(map(int, input().split()))\n    heights2 = list(map(int, input().split()))\n    heights = heights1 + heights2\n    heights.sort(reverse=True)\n    max_height = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_height += heights[i] + heights[j]\n    return max_height\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1888,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n, m = R()\n    if m == 0:\n        return 0\n    debts = [R() for _ in range(m)]\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1889,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r=lambda:input().split()\n    n,m,q=map(int,r())\n    grid=[]\n    for i in range(n):\n        grid.append(list(map(int,r())))\n    for i in range(q):\n        i,j=map(int,r())\n        if grid[i][j]==0:\n            grid[i][j]=1\n        else:\n            grid[i][j]=0\n        score=0\n        for row in grid:\n            score=max(score,sum(row))\n        print(score)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1890,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t, k = input(), int(input())\n    n = len(t) * k\n    count = 0\n    for i in range(1, n+1):\n        if i % 5 == 0:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1891,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, A, B = map(int, input().split())\n    avengers = list(map(int, input().split()))\n    # Write your code here\n    def power_needed(base, avengers):\n        if len(base) == 1:\n            return A if avengers[0] in base else 0\n        if len(base) == 2:\n            return A if avengers[0] in base else B\n        mid = len(base) // 2\n        left = base[:mid]\n        right = base[mid:]\n        if avengers[0] in left:\n            left_power = power_needed(left, avengers)\n        else:\n            left_power = A * len(left)\n        if avengers[0] in right:\n            right_power = power_needed(right, avengers)\n        else:\n            right_power = A * len(right)\n        return min(left_power, right_power) + B * (len(base) - len(left) - len(right))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1892,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=0\n    for_count=0\n    simple_count=0\n    for i in range(n):\n        if input_string[i]=='f':\n            for_count+=1\n        else:\n            simple_count+=1\n    if for_count==0:\n        count=1\n    elif simple_count==0:\n        count=1\n    else:\n        count=2**for_count\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1893,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k =map(int,  input().split())\n    return round(n * 2**(k/24000, 6)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1894,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(i) for i in input().split()]\n    house = [input().split() for i in range(n)]\n    floor = 0\n    direction = 1\n    time = 0\n    while floor < n-1:\n        if house[floor][0] == \"+\":\n            direction = -direction\n        if house[floor][direction] == \"+\":\n            time += 1\n            house[floor][direction] = \".\"\n        else:\n            floor += 1\n            time += 1\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1895,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m =map(int, input().split())\n    events = []\n    for i in range(n):\n        events.append(input().split())\n    #print(events)\n    max_happy_friends = 0\n    current_handle = \"\"\n    for event in events:\n        if event[0] == \"1\":\n            current_handle = event[1]\n        else:\n            if event[1] == current_handle:\n                max_happy_friends += 1\n    return max_happy_friends\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1896,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    result = 0\n    for i in range(n+1):\n        result += 6*i*(i+1)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1897,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m, t = 0, [q in 'IEAOUY' for q in input()]\n    for i in range(len(input_string)):\n        for j in range(i, len(input_string)):\n            m += sum(t[ord(input_string[k]) - ord('A')] for k in range(i, j+1))\n    return m\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1898,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==1:\n        print(\"I hate it\")\n    else:\n        result=\"\"\n        for i in range(n):\n            if i%2==0:\n                result+=\"I hate \"\n            else:\n                result+=\"I love \"\n        print(result[:-1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1899,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    segments = []\n    for _ in range(s):\n        segments.append(list(map(int, input().split()))\n    # Your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1900,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r=lambda:list(map(int,input().split()))\n    n,k,m=r()\n    a=r()\n    count=0\n    for i in range(m):\n        count+=k\n        for j in range(n):\n            if a[j]==a[j+k]:\n                count-=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1901,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,m=R()\n    c=R()\n    friends=[]\n    for i in range(m):\n        friends.append(R())\n    #print(friends)\n    def dfs(u,visited,depth,parents,cost):\n        visited[u]=True\n        for v in range(n):\n            if not visited[v] and (u,v) not in parents:\n                parents[v]=u\n                cost+=c[v]\n                dfs(v,visited,parents,cost)\n        return cost\n    visited=[False]*n\n    parents={}\n    cost=0\n    for i in range(n):\n        if not visited[i]:\n            cost=dfs(i,visited,parents,cost)\n    return cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1902,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=input()\n    words=x.split()\n    count=0\n    for i in range(len(words)):\n        for j in range(len(words[i])):\n            count+=1\n            if words[i][j]=='-' or words[i][j]==',' or words[i][j]=='.' or words[i][j]=='?' or words[i][j]=='!':\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1903,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, d = map(int, input().split())\n    physics_cups = []\n    informatics_cups = []\n    for _ in range(n):\n        c, w = map(int, input().split())\n        physics_cups.append((c, w))\n    for _ in range(m):\n        c, w = map(int, input().split())\n        informatics_cups.append((c, w)\n    physics_cups.sort(key=lambda x: x[0], reverse=True)\n    informatics_cups.sort(key=lambda x: x[0], reverse=True)\n    max_significance = 0\n    for p in physics_cups:\n        if p[1] <= d:\n            max_significance += p[0]\n            d -= p[1]\n        else:\n            break\n    for i in informatics_cups:\n        if i[1] <= d:\n            max_significance += i[0]\n            d -= i[1]\n        else:\n            break\n    return max_significance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1904,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    a = list(map(int, input().split()))\n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1905,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, m, q = f()\n    matrix = [[0] * m for _ in range(n)]\n    for _ in range(q):\n        t, r, c = f()\n        if t == 1:\n            matrix[r - 1] = matrix[r - 1][1:] + matrix[r - 1][0:1]\n        elif t == 2:\n            matrix = [[matrix[i][j - 1] for j in range(m)] for i in range(n)]\n        else:\n            matrix[r - 1][c - 1] = x\n    for row in matrix:\n        print(' '.join(map(str, row))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1906,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=0\n    for i in range(2,11):\n        if n%i!=0:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1907,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = [list(map(int, input().split())) for i in range(int(input()))]\n    n = len(t)\n    x = [t[i][0] for i in range(n)]\n    y = [t[i][1] for i in range(n)]\n    r = [t[i][2] for i in range(n)]\n    # calculate the spaciousness of each half\n    def spaciousness(half):\n        # calculate the area of each range\n        area = [r[i]**2 for i in range(n)]\n        # calculate the distance between each pair of dancers\n        dist = [[0 for j in range(n)] for i in range(n)]\n        for i in range(n):\n            for j in range(i+1, n):\n                dist[i][j] = ((x[i]-x[j])**2 + (y[i]-y[j])**2)**0.5\n                dist[j][i] = dist[i][j]\n        # calculate the number of overlapping ranges\n        overlap = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if dist[i][j] <= r[i] + r[j]:\n                    overlap += 1\n        # calculate the spaciousness of the half\n        return n*(n-overlap) - overlap\n    # calculate the largest achievable sum of spaciousness over two halves\n    return max(spaciousness(0), spaciousness(1))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1908,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    w=list(map(int,input().split()))\n    x=[]\n    y=[]\n    for i in range(m):\n        x.append(list(map(int,input().split()))[0])\n        y.append(list(map(int,input().split()))[1])\n    #print(x,y)\n    #print(w)\n    #print(n,m)\n    #print(len(w))\n    #print(len(x))\n    #print(len(y))\n    #print(len(x[0])\n    #print(len(y[0])\n    #print(len(w[0])\n    #print(len(w)\n    #print(len(x)\n    #print(len(y)\n    #print(w)\n    #print(x)\n    #print(y)\n    #print(n)\n    #print(m)\n    #print(w)\n    #print(x)\n    #print(y)\n    #print(w[0])\n    #print(w[1])\n    #print(x[0])\n    #print(x[1])\n    #print(y[0])\n    #print(y[1])\n    #print(w[0][0])\n    #print(w[0][1])\n    #print(x[0][0])\n    #print(x[0][1])\n    #print(y[0][0])\n    #print(y[0][1])\n    #print(w[1][0])\n    #print(w[1][1])\n    #print(x[1][0])\n    #print(x[1][1])\n    #print(y[1][0])\n    #print(y[1][1])\n    #print(w[1][0])\n    #print(w[1][1])\n    #print(x[1][0])\n    #print(x[1][1])\n    #print(y[1][0])\n    #print(y[1][1])\n    #print(w[2][0])\n    #print(w[2][1])\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1909,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    min_power = float('inf')\n    min_task = 0\n    for i in range(n):\n        power = sum(a[i::k])\n        if power < min_power:\n            min_power = power\n            min_task = i + 1\n    print(min_task)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1910,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    count = 0\n    for i in range(1, n+1):\n        count += 4**i\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1911,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = list(map(int,input().split()))\n    a = list(map(int,input().split()))\n    if k == 1:\n        return 0\n    if k == n:\n        return 0\n    if k == 2:\n        return sum(a)\n    if k == 3:\n        return sum(a)\n    if k == 4:\n        return sum(a)\n    if k == 5:\n        return sum(a)\n    if k == 6:\n        return sum(a)\n    if k == 7:\n        return sum(a)\n    if k == 8:\n        return sum(a)\n    if k == 9:\n        return sum(a)\n    if k == 10:\n        return sum(a)\n    if k == 11:\n        return sum(a)\n    if k == 12:\n        return sum(a)\n    if k == 13:\n        return sum(a)\n    if k == 14:\n        return sum(a)\n    if k == 15:\n        return sum(a)\n    if k == 16:\n        return sum(a)\n    if k == 17:\n        return sum(a)\n    if k == 18:\n        return sum(a)\n    if k == 19:\n        return sum(a)\n    if k == 20:\n        return sum(a)\n    if k == 21:\n        return sum(a)\n    if k == 22:\n        return sum(a)\n    if k == 23:\n        return sum(a)\n    if k == 24:\n        return sum(a)\n    if k == 25:\n        return sum(a)\n    if k == 26:\n        return sum(a)\n    if k == 27:\n        return sum(a)\n    if k == 28:\n        return sum(a)\n    if k == 29:\n        return sum(a)\n    if k == 30:\n        return sum(a)\n    if k == 31:\n        return sum(a)\n    if",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1912,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r,g,b,w = list(map(int, input().split()))\n    if r == g == b == w == 0:\n        return \"Yes\"\n    if r == g == b == 0:\n        return \"Yes\"\n    if w == 0:\n        return \"Yes\"\n    if r == g == b:\n        return \"Yes\"\n    if r == 0 or g == 0 or b == 0:\n        return \"Yes\"\n    if r == 1 and g == 1 and b == 1:\n        return \"Yes\"\n    if r == 1 and g == 1 and b > 1:\n        return \"No\"\n    if r == 1 and b == 1 and g > 1:\n        return \"No\"\n    if g == 1 and b == 1 and r > 1:\n        return \"No\"\n    if r == 1 and g > 1 and b > 1:\n        return \"No\"\n    if g == 1 and b > 1 and r > 1:\n        return \"No\"\n    if b == 1 and r > 1 and g > 1:\n        return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1913,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    beautiful_numbers=set()\n    for i in range(n):\n        if '1' not in str(a[i]) and '0' not in str(a[i]):\n            beautiful_numbers.add(a[i])\n    product=1\n    for i in beautiful_numbers:\n        product*=i\n    return product\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1914,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input()\n    n = int(input())\n    s = []\n    for i in range(n):\n        s.append(input())\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            result += t.count(s[i] + s[j])\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1915,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = int(input()) - 1\n    max_value = 1\n    for i in range(1, a+1):\n        for j in range(1, a+1):\n            max_value = max(max_value, i + j)\n    return max_value\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1916,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    a = list(map(int,input().split()))\n    b = list(map(int,input().split()))\n    c = []\n    for i in range(n):\n        for j in range(m):\n            c.append(a[i]&b[j])\n    return max(c)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1917,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    a = list(map(int, input().split())\n    b = [0] * n\n    a.sort(reverse=True)\n    total = sum(a)\n    if k > total:\n        return \"Impossible\"\n    for i in range(n):\n        b[i] = min(a[i], k // n)\n        k -= b[i]\n    for i in range(n):\n        if k > 0:\n            b[i] += 1\n            k -= 1\n    return \" \".join(map(str, b))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1918,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    team_assignment = input()\n    max_strength = 0\n    for i in range(n):\n        if team_assignment[i] == 'A':\n            max_strength += p[i]\n    return max_strength\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1919,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n % 2 == 0:\n        return 2\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1920,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c = input().split()\n    n = int(c[0])\n    friends = []\n    for i in range(n):\n        friends.append(c[i+1].split())\n    #print(friends)\n    males = []\n    females = []\n    for i in range(n):\n        if friends[i][0] == 'M':\n            males.append(int(friends[i][1]))\n            males.append(int(friends[i][2]))\n        else:\n            females.append(int(friends[i][1]))\n            females.append(int(friends[i][2])\n    males.sort()\n    females.sort()\n    #print(males)\n    #print(females)\n    count = 0\n    i = 0\n    j = 0\n    while i < len(males) and j < len(females):\n        if males[i] <= females[j]:\n            count += 1\n            i += 2\n        else:\n            j += 2\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1921,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    sx,sy,fx,fy=list(map(int,input().split()))\n    instant_locations=[]\n    for i in range(m):\n        instant_locations.append(list(map(int,input().split()))\n    #print(instant_locations)\n    min_time=float('inf')\n    for i in range(n):\n        for j in range(n):\n            if (i,j)==(sx,sy):\n                continue\n            time=0\n            if (i,sy) in instant_locations:\n                time+=1\n            if (sx,j) in instant_locations:\n                time+=1\n            if (i,j)==(fx,fy):\n                min_time=min(min_time,time)\n                break\n            else:\n                min_time=min(min_time,time+4)\n    return min_time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1922,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M=map(int,input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1923,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    l=list(map(int,input_string.split()))\n    l.sort()\n    max_ingredients=0\n    for i in range(n):\n        max_ingredients+=l[2*i]\n    return max_ingredients\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1924,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=map(int,input().split())\n    def count_paths(r,c):\n        if r==0 or c==0:\n            return 1\n        if r==1 and c==1:\n            return 1\n        if r==1:\n            return c\n        if c==1:\n            return r\n        if r==c:\n            return 2*count_paths(r-1,c)\n        if r>c:\n            return 2*count_paths(r-1,c)\n        if c>r:\n            return 2*count_paths(r,c-1)\n        return count_paths(r-1,c)+count_paths(r,c-1)\n    ans=0\n    for i in range(a,b+1):\n        for j in range(c_1,c_2+1):\n            ans+=count_paths(i,j)\n    return ans%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1925,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B,N=map(int,input().split())\n    max_value=0\n    for i in range(1,N+1):\n        value=int(A/B)*i-int(i/B)\n        if value>max_value:\n            max_value=value\n    return max_value\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1926,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    arr = list(map(int, input_string.split()[1:]))\n    result = []\n    for k in range(1, n):\n        heap_violations = 0\n        for i in range(1, n):\n            if arr[i] < arr[int((i-1)/k)]:\n                heap_violations += 1\n        result.append(heap_violations)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1927,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    a = list(map(int, input().split()))\n    p = list(range(1, n+1))\n    min_pos = [1] * n\n    max_pos = [n] * n\n    for i in range(m):\n        a_i = a[i]\n        if a_i != 1:\n            p.remove(a_i)\n            p.insert(0, a_i)\n            for j in range(n):\n                if p[j] == a_i:\n                    min_pos[j] = min(min_pos[j], j+1)\n                    max_pos[j] = max(max_pos[j], j+1)\n    print(min_pos)\n    print(max_pos)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1928,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    matrix = [[0] * m for _ in range(n)]\n    penalty = 0\n    paths = []\n    for _ in range(k):\n        path = []\n        i, j = 1, 1\n        while k > 0:\n            if matrix[i][j] == 0:\n                matrix[i][j] = 1\n                path.append((i, j))\n                k -= 1\n            if i == n and j == m:\n                break\n            if i < n and matrix[i+1][j] == 0:\n                i += 1\n            elif j < m and matrix[i][j+1] == 0:\n                j += 1\n            elif i > 1 and matrix[i-1][j] == 0:\n                i -= 1\n            elif j > 1 and matrix[i][j-1] == 0:\n                j -= 1\n            else:\n                break\n        penalty += len(path)\n        paths.append(path)\n    return penalty, paths\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1929,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, t, c = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        return 1\n    if t == 0:\n        return 0\n    if c == 1:\n        return 1\n    if c == n:\n        return 1\n    if c == 2:\n        return 1\n    if c == 3:\n        return 1\n    if c == 4:\n        return 1\n    if c == 5:\n        return 1\n    if c == 6:\n        return 1\n    if c == 7:\n        return 1\n    if c == 8:\n        return 1\n    if c == 9:\n        return 1\n    if c == 10:\n        return 1\n    if c == 11:\n        return 1\n    if c == 12:\n        return 1\n    if c == 13:\n        return 1\n    if c == 14:\n        return 1\n    if c == 15:\n        return 1\n    if c == 16:\n        return 1\n    if c == 17:\n        return 1\n    if c == 18:\n        return 1\n    if c == 19:\n        return 1\n    if c == 20:\n        return 1\n    if c == 21:\n        return 1\n    if c == 22:\n        return 1\n    if c == 23:\n        return 1\n    if c == 24:\n        return 1\n    if c == 25:\n        return 1\n    if c == 26:\n        return 1\n    if c == 27:\n        return 1\n    if c == 28:\n        return 1\n    if c == 29:\n        return 1\n    if c == 30:\n        return 1\n    if c == 31:\n        return 1\n    if c == 32:\n        return 1\n    if c == 33:\n        return 1\n    if c == 34:",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1930,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    p=list(map(int,input().split()))\n    count=0\n    for i in range(n):\n        if p[i]==-1:\n            count+=1\n    if count==0:\n        return 0\n    else:\n        return (count*(n-count)//2)%99824353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1931,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        n = int(input())\n        if n == 1:\n            print(1)\n        else:\n            count = 0\n            while n > 1:\n                count += 1\n                n -= 2\n                if n <= 1:\n                    break\n                n -= 1\n            if n > 0:\n                count += 1\n            print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1932,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    total_faces = 0\n    for i in range(n):\n        polyhedron = input().strip()\n        if polyhedron == \"Tetrahedron\":\n            total_faces += 4\n        elif polyhedron == \"Cube\":\n            total_faces += 6\n        elif polyhedron == \"Octahedron\":\n            total_faces += 8\n        elif polyhedron == \"Dodecahedron\":\n            total_faces += 12\n        elif polyhedron == \"Icosahedron\":\n            total_faces += 20\n    return total_faces\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1933,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    a=[]\n    for i in range(n):\n        a.append(list(map(int,input().split()[:m]))\n    score=0\n    for j in range(m):\n        i=0\n        while i<n and a[i][j]==0:\n            i+=1\n        if i<n:\n            count=0\n            for i in range(min(k,n-i+1):\n                if a[i][j]==1:\n                    count+=1\n            score+=count\n    print(score)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1934,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    a = list(map(int, input().split())\n    queries = []\n    for i in range(m):\n        queries.append(list(map(int, input().split()))\n    \n    # Your code goes here\n    result = []\n    for query in queries:\n        l, r = query\n        min_distance = float('inf')\n        for i in range(l, r+1):\n            for j in range(i+1, r+1):\n                if a[i] == a[j]:\n                    min_distance = min(min_distance, abs(i-j))\n        if min_distance == float('inf'):\n            result.append(-1)\n        else:\n            result.append(min_distance)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1935,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    d=list(map(int,input().split())\n    g,r=map(int,input().split())\n    d.sort()\n    d.insert(0,0)\n    d.append(n)\n    d.append(n)\n    d.sort()\n    time=0\n    for i in range(m):\n        if d[i]==0 or d[i+1]==n:\n            time+=g+r\n        else:\n            time+=g\n            if i%2==0:\n                time+=d[i+1]-d[i]-1\n            else:\n                time+=d[i+1]-d[i]\n    if time<=n:\n        return time\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1936,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tL, R = map(int, input().split())\n    \\tif LCM(L, R) <= R:\n    \\t\\tprint(-1, -1)\n    \\telse:\n    \\t\\tfor i in range(L, R+1):\n    \\t\\t\\tif LCM(L, i) <= R:\n    \\t\\t\\t\\tprint(L, i)\n    \\t\\t\\t\\tbreak\n    \\telse:\n    \\t\\tprint(-1, -1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1937,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    b = list(map(int, input().split()))\n    a = [0] * n\n    a[0] = b[0] - b[1]\n    a[1] = b[1]\n    for i in range(2, n):\n        a[i] = b[i] - b[i-1]\n    for i in range(2, n):\n        a[n-i] = b[i] - b[i-1]\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1938,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    intervals = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        intervals.append((l, r))\n    \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1939,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            print(k, end=\" \")\n    print()\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            print(k-i, end=\" \")\n    print()\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            print(k-i-j, end=\" \")\n    print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1940,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    w=list(map(int,input().split())\n    days=0\n    count=0\n    for i in range(n):\n        if w[i]<=k:\n            k-=w[i]\n            count+=1\n        else:\n            days+=w[i]//k\n            k=0\n    if k>0:\n        days+=1\n    return days\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1941,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: list(map(int, input().split()))\n    A, B, n = f()\n    queries = [f() for _ in range(n)]\n    def m_bite(s, m, t):\n        count = 0\n        for i in range(len(s)):\n            if s[i] > 0:\n                count += 1\n                if count > t:\n                    return False\n                s[i] -= 1\n        return True\n    def find_r(s, l, t, m):\n        for r in range(l, len(s) + 1):\n            if m_bite(s[l-1:r], m, t):\n                return r\n        return -1\n    for l, t, m in queries:\n        s = [A + (i - 1) * B for i in range(1, l + 1)]\n        r = find_r(s, l, t)\n        print(r)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1942,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, l, r = map(int, input().split())\n        print(1, 2, 1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1943,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    probabilities = []\n    for i in range(2**n):\n        probabilities.append(list(map(int, input().split()))\n    # Your code here\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1944,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    laptops = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        laptops.append((a, b))\n    laptops.sort(key=lambda x: x[0])\n    for i in range(n-1):\n        if laptops[i][0] < laptops[i+1][0] and laptops[i][1] > laptops[i+1][1]:\n            print(\"Happy Alex\")\n            return\n    print(\"Poor Alex\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1945,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = int(input())\n    handles = {}\n    for i in range(s):\n        old, new = input().split()\n        if old not in handles:\n            handles[old] = new\n        else:\n            while new in handles.values():\n                new += '1'\n            handles[old] = new\n    print(len(handles))\n    for key, value in handles.items():\n        print(key, value)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1946,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m=int(input())\n    n=int(input())\n    chem_list=[]\n    top_list=[]\n    for i in range(n):\n        a,x=map(int,input().split())\n        chem_list.append([a,x])\n    for i in range(m):\n        b,y=map(int,input().split())\n        top_list.append([b,y])\n    chem_list.sort(key=lambda x:x[0])\n    top_list.sort(key=lambda x:x[0])\n    chem_set=set()\n    top_set=set()\n    max_income=0\n    for i in range(n):\n        if chem_list[i][0] not in top_set:\n            chem_set.add(chem_list[i][0])\n            max_income+=chem_list[i][1]\n    for j in range(m):\n        if top_list[j][0] not in chem_set:\n            top_set.add(top_list[j][0])\n            max_income+=top_list[j][1]\n    return max_income\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1947,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,l = [int(s) for s in input().split()]\n    a = [int(s) for s in input().split()]\n    a.sort()\n    time = 0\n    for i in range(m):\n        t,p,d = [int(s) for s in input().split()]\n        if t == 0:\n            time += 1\n        else:\n            time += 1\n            if a[p-1] < l:\n                time += 1\n            a[p-1] += d\n            if a[p-1] > l:\n                time += 1\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1948,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n, x = map(int, input_string.split())\n    edges = []\n    for i in range(n-1):\n        edges.append(list(map(int, input().split()))\n    \n    # Build the tree\n    tree = [[] for _ in range(n+1)]\n    for a, b in edges:\n        tree[a].append(b)\n        tree[b].append(a)\n    \n    # Find the longest path from x to the root\n    def dfs(node, parent):\n        max_depth = 0\n        for child in tree[node]:\n            if child != parent:\n                depth = dfs(child, node)\n                max_depth = max(max_depth, depth)\n        return max_depth + 1\n    \n    # Calculate the longest path from x to the root\n    max_depth = dfs(x, -1)\n    \n    # Calculate the number of moves\n    moves = 2**max_depth - 1\n    \n    # Print the result\n    print(moves)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1949,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    for i in range(k):\n        min_non_zero = min(a, key=lambda x: x if x != 0 else float('inf'))\n        if min_non_zero == float('inf'):\n            print(0)\n        else:\n            print(min_non_zero)\n            a = [x - min_non_zero if x != 0 else 0 for x in a]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1950,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    balls=list(map(int,input().split()))\n    balls.sort()\n    min_penalty=0\n    for i in range(n):\n        min_penalty+=balls[i]\n    return min_penalty\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1951,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    events = input_string.split('\\n')\n    prices = []\n    for event in events:\n        if event[0] == '+':\n            prices.append(N)\n            N -= 1\n        else:\n            prices.append(int(event.split()[1]))\n    if len(set(prices)) != len(prices):\n        return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1952,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    m = list(map(int, input().split()))\n    c = list(map(int, input().split())\n    ans = 0\n    testcases = []\n    for i in range(k):\n        if c[i] > 0:\n            ans += 1\n            testcases.append([])\n    for i in range(n):\n        testcases[m[i]-1].append(i+1)\n    for i in range(k):\n        if len(testcases[i]) > 0:\n            print(len(testcases[i]), end=' ')\n            for j in testcases[i]:\n                print(j, end=' ')\n    print(ans)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1953,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input()\n    t=list(map(int,input_string.split()))\n    t.sort()\n    count=0\n    for i in range(n):\n        if t[i]<=i+1:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1954,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, f = map(int, input().split())\n        count = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                count += 1\n        if count == f:\n            print(1)\n        else:\n            print(0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1955,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    days = [0] * n\n    for i in range(m):\n        days[d.index(i+1)] = a[i]\n    days = [x for x in days if x != 0]\n    if len(days) > n:\n        return -1\n    days.sort()\n    if len(days) == 0:\n        return n\n    if days[0] == 1:\n        return 1\n    if days[0] == n:\n        return -1\n    if days[-1] == 1:\n        return n\n    if days[-1] == n:\n        return -1\n    if days[0] == n:\n        return -1\n    if days[-1] == 1:\n        return -1\n    if days[0] == 1:\n        return -1\n    if days[-1] == 1:\n        return -1\n    if days[0] == 1:\n        return -1\n    if days[-1] == 1:\n        return -1\n    if days[0] == 1:\n        return -1\n    if days[-1] == 1:\n        return -1\n    if days[0] == 1:\n        return -1\n    if days[-1] == 1:\n        return -1\n    if days[0] == 1:\n        return -1\n    if days[-1] == 1:\n        return -1\n    if days[0] == 1:\n        return -1\n    if days[-1] == 1:\n        return -1\n    if days[0] == 1:\n        return -1\n    if days[-1] == 1:\n        return -1\n    if days[0] == 1:\n        return -1\n    if days[-1] == 1:\n        return -1\n    if days[0] == 1:\n        return -1\n    if days[-1] == 1:\n        return -1\n    if days[0] == 1:\n        return -1\n    if",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1956,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=[tuple(map(int,input().split())) for i in range(int(input()))]\n    s=[i[0] for i in a]\n    e=[i[1] for i in a]\n    for i in range(len(s)):\n        if s[i]>e[i]:\n            return 0,0\n    return 1,0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1957,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, A, B = list(map(int,input().split()))\n    sizes = list(map(int,input().split()))\n    total_size = sum(sizes)\n    if total_size == 0:\n        return 0\n    if A >= B:\n        return 0\n    if A >= B * n:\n        return n\n    if A < B * n:\n        return 1\n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1958,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, p = map(int, input().split())\n    apples = 0\n    for i in range(n):\n        line = input().strip()\n        if line == 'half':\n            apples += 1\n        else:\n            apples += 1\n            apples += 1\n    return apples * p\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1959,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    eugenys_cards = list(map(int, input().split()))\n    eugenys_even = [card for card in eugenys_cards if card % 2 == 0]\n    eugenys_odd = [card for card in eugenys_cards if card % 2 != 0]\n    if len(eugenys_even) != len(eugenys_odd):\n        return -1\n    if len(eugenys_even) == 0:\n        return -1\n    eugenys_even.sort()\n    eugenys_odd.sort()\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(eugenys_even.pop(0))\n        else:\n            result.append(eugenys_odd.pop(0))\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1960,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int( input() )\n    a = list(map(int, input().split() ) )\n    result = []\n    for i in range(N):\n        if a[i] not in a[:i]:\n            result.append('1')\n        elif a[i] not in a[i+1:]:\n            result.append('2')\n        else:\n            result.append('3')\n    return ''.join(result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1961,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\ta[i] = list(input())\n    n = len(ta)\n    m = len(ta[0])\n    for i in range(n):\n        if len(ta[i]) != m:\n            return \"NO\"\n    for i in range(n):\n        for j in range(m):\n            if ta[i][j] == '#':\n                if i == 0 or i == n-1 or j == 0 or j == m-1:\n                    return \"NO\"\n                if ta[i-1][j] == '#' and ta[i+1][j] == '#' and ta[i][j-1] == '#' and ta[i][j+1] == '#':\n                    return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1962,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, l = list(map(int, input().split()))\n    staves = list(map(int, input().split()))\n    staves.sort()\n    total_sum = 0\n    barrels = []\n    for i in range(0, len(staves), k):\n        barrels.append(sum(staves[i:i+k]))\n    barrels.sort()\n    for i in range(len(barrels)):\n        total_sum += barrels[i]\n    if barrels[-1] - barrels[0] <= l:\n        return total_sum\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1963,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input()) + 1\n    a = list(map(int, input().split()))\n    max_r_l = 0\n    max_l = 0\n    for i in range(n):\n        for j in range(i, n):\n            if all(a[k] % a[i] == 0 for k in range(i, j+1)):\n                max_r_l = max(max_r_l, j-i+1)\n                max_l = i\n    print(max_l, max_r_l)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1964,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    k = list(map(int, input().split()))\n    m = []\n    for i in range(n):\n        m.append(list(map(int, input().split()))[1:])\n    total_time = 0\n    for i in range(n):\n        total_time += sum(m[i]) * 5 + (len(m[i])-1) * 15\n    return total_time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1965,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    y=lambda:map(int,input().split())\n    t=int(input())\n    for i in range(t):\n        n,x=y()\n        a=list(y())\n        if sum(a)==0:\n            print(0)\n        else:\n            print(2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1966,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    pieces=[]\n    for i in range(4):\n        pieces.append(list(map(int,input().split())))\n    count=0\n    for i in range(n):\n        for j in range(n):\n            if pieces[0][j]==pieces[1][j] or pieces[i][0]==pieces[i][1]:\n                count+=1\n            if i!=0 and pieces[i][j]==pieces[i-1][j]:\n                count+=1\n            if j!=0 and pieces[i][j]==pieces[i][j-1]:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1967,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w, h = list(map(int, input().split()))\n    image = [list(input().split()) for _ in range(h)]\n    for i in range(h):\n        for j in range(w):\n            if image[i][j] == '.':\n                image[i][j] = ' '\n    image = [list(''.join(row) for row in image)\n    image = [list(row[::-1] for row in image)\n    image = [list(row.replace(' ', '*') for row in image)\n    image = [list(row * 2 for row in image)\n    for row in image:\n        print(''.join(row))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1968,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, v = map(int, input().split())\n    sellers = []\n    for _ in range(n):\n        sellers.append(list(map(int, input().split()))\n    # Your code here\n    return ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1969,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    matrix=[]\n    for i in range(n):\n        matrix.append(list(input()))\n    count=0\n    for i in range(1,n-1):\n        for j in range(1,n-1):\n            if matrix[i][j-1]=='X' and matrix[i][j+1]=='X' and matrix[i-1][j]=='X' and matrix[i+1][j]=='X' and matrix[i-1][j-1]=='X' and matrix[i-1][j+1]=='X' and matrix[i+1][j-1]=='X' and matrix[i+1][j+1]=='X':\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1970,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p = input()\n    for i in range(len(p)):\n        if p[i] == \"K\":\n            if p[i+1] == \"K\":\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1971,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    p_dict = {}\n    for i in range(n):\n        p_dict[p[i]] = i+1\n    q = [0]*n\n    for i in range(n):\n        q[p_dict[i+1]-1] = i+1\n    if p == q:\n        print(\"-1\")\n    else:\n        print(\" \".join(map(str, q))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1972,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize the array\n    a = [0] * 50001\n    \n    # Process the queries\n    for i in range(len(input_string)):\n        t, x, y = map(int, input_string[i].split())\n        if t == 1:\n            a[x] += y\n        else:\n            # Compute the sum of the elements with remainder y modulo x\n            total = 0\n            for j in range(1, 50001):\n                if j % x == y:\n                    total += a[j]\n            print(total)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1973,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    u = list(map(int, input().split()))\n    # Write your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1974,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = list(map(int, input().split()))\n    robbers = []\n    searchlights = []\n    for i in range(N):\n        robbers.append(list(map(int, input().split()))\n    for i in range(M):\n        searchlights.append(list(map(int, input().split()))\n    # Your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1975,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    boys = list(range(1, n+1))\n    girls = list(range(1, m+1))\n    result = []\n    while len(boys) > 0 and len(girls) > 0:\n        if len(boys) > len(girls):\n            result.append((boys.pop(0), girls.pop(0)) if len(girls) > 0 else (boys.pop(0), None))\n        else:\n            result.append((boys.pop(0), girls.pop(0)) if len(boys) > 0 else (None, girls.pop(0)))\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1976,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k, q = list(map(int, input().split()))\n    broken_pixels = []\n    for _ in range(q):\n        x, y, t = list(map(int, input().split()))\n        broken_pixels.append((x, y, t))\n    broken_pixels.sort(key=lambda x: x[2])\n    broken_pixels.sort(key=lambda x: x[0])\n    broken_pixels.sort(key=lambda x: x[1])\n    broken_pixels.sort(key=lambda x: x[2])\n    broken_pixels.sort(key=lambda x: x[0])\n    broken_pixels.sort(key=lambda x: x[1])\n    broken_pixels.sort(key=lambda x: x[2])\n    broken_pixels.sort(key=lambda x: x[0])\n    broken_pixels.sort(key=lambda x: x[1])\n    broken_pixels.sort(key=lambda x: x[2])\n    broken_pixels.sort(key=lambda x: x[0])\n    broken_pixels.sort(key=lambda x: x[1])\n    broken_pixels.sort(key=lambda x: x[2])\n    broken_pixels.sort(key=lambda x: x[0])\n    broken_pixels.sort(key=lambda x: x[1])\n    broken_pixels.sort(key=lambda x: x[2])\n    broken_pixels.sort(key=lambda x: x[0])\n    broken_pixels.sort(key=lambda x: x[1])\n    broken_pixels.sort(key=lambda x: x[2])\n    broken_pixels.sort(key=lambda x: x[0])\n    broken_pixels.sort(key=lambda x: x[1])\n    broken_pixels.sort(key=lambda x: x[2])\n    broken_pixels.sort(key=lambda x: x[0])\n    broken_pixels.sort(key=lambda x: x[1])\n    broken_pix",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1977,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    (n,k) = [int(x) for x in input().split(' ')]\n    matrix = []\n    for i in range(n):\n        matrix.append(list(input()))\n    return min_path(matrix, k)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1978,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    adjacency_matrix=[]\n    for i in range(n):\n        adjacency_matrix.append(list(map(int,input().split()[:n]))\n    m=int(input())\n    path=list(map(int,input().split())\n    for i in range(m-1):\n        if adjacency_matrix[path[i]][path[i+1]]==0:\n            return \"No path exists\"\n    good_subseq=[]\n    for i in range(m):\n        if path[i] not in good_subseq:\n            good_subseq.append(path[i])\n    for i in range(m-1):\n        if path[i] not in good_subseq:\n            good_subseq.append(path[i+1])\n    return len(good_subseq),good_subseq\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1979,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1980,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d.append(0)\n    c.append(0)\n    d.sort()\n    c.sort()\n    profit = 0\n    for i in range(1, n):\n        profit += (d[i] - d[i-1])**2 * c[i]\n    return profit\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1981,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split())\n    adj_list=[]\n    for i in range(n-1):\n        adj_list.append(list(map(int,input().split()))\n    #print(adj_list)\n    def dfs(node,parent,depth,cats):\n        if node==1:\n            return 1 if a[node]==0 else 0\n        if depth>m:\n            return 0\n        cats+=a[node]\n        ans=0\n        for child in adj_list[node]:\n            ans+=dfs(child,node,depth+1,cats)\n        return ans\n    return dfs(1,None,0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1982,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn,k = map(int,input().split())\n    for i in range(t):\n        n,k = map(int,input().split())\n        if n%2==0:\n            print(\"NO\")\n        else:\n            if k==1:\n                print(\"YES\")\n            else:\n                if n%2==1:\n                    print(\"YES\")\n                else:\n                    if n%4==1:\n                        print(\"YES\")\n                    else:\n                        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1983,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn=int(input())\n    for i in range(tn):\n        n=int(input())\n        a=list(map(int,input().split()))\n        a.sort()\n        dp=[1]*n\n        for i in range(1,n):\n            for j in range(i):\n                if a[i]>a[j]:\n                    dp[i]=max(dp[i],dp[j]+1)\n        print(max(dp))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1984,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n    s[i]+=input()\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1985,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    o=lambda:[int(f)for f in input().split()]\n    k,n=o(input_string)\n    a=o(input())\n    b=sorted(set(o(input()))\n    if len(b)!=n:\n        return 0\n    if k==n:\n        return 1\n    if k==1:\n        return 1\n    if k==2:\n        return 2\n    if k==3:\n        return 3\n    if k==4:\n        return 4\n    if k==5:\n        return 5\n    if k==6:\n        return 6\n    if k==7:\n        return 7\n    if k==8:\n        return 8\n    if k==9:\n        return 9\n    if k==10:\n        return 10\n    if k==11:\n        return 11\n    if k==12:\n        return 12\n    if k==13:\n        return 13\n    if k==14:\n        return 14\n    if k==15:\n        return 15\n    if k==16:\n        return 16\n    if k==17:\n        return 17\n    if k==18:\n        return 18\n    if k==19:\n        return 19\n    if k==20:\n        return 20\n    if k==21:\n        return 21\n    if k==22:\n        return 22\n    if k==23:\n        return 23\n    if k==24:\n        return 24\n    if k==25:\n        return 25\n    if k==26:\n        return 26\n    if k==27:\n        return 27\n    if k==28:\n        return 28\n    if k==29:\n        return 29\n    if k==30:\n        return 30\n    if k==31:\n        return 31\n    if k==32:\n        return 32\n    if k==33:\n        return 33\n    if k==34:\n        return",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1986,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda:list(map(int,input().split()))\n    n,k=I()\n    f,t=[],[]\n    for i in range(n):\n        f.append(I())\n    for i in range(n):\n        t.append(I())\n    max_joy=0\n    for i in range(n):\n        if t[i][1]>k:\n            max_joy+=f[i][0]-(t[i][1]-k)\n        else:\n            max_joy+=f[i][0]\n    return max_joy\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1987,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input()\n    n, c_1, c_2 = map(int, t.split())\n    s = input()\n    groups = []\n    for i in range(n):\n        if s[i] == '0':\n            groups.append([i])\n    for i in range(n):\n        if s[i] == '1':\n            for j in range(i+1, n):\n                if s[j] == '0':\n                    groups.append([i, j])\n                    break\n    min_price = float('inf')\n    for group in groups:\n        price = c_1 + c_2 * (len(group) - 1)**2\n        min_price = min(min_price, price)\n    return min_price\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1988,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        s=input()\n        k=1\n        s1=s[::-1]\n        s2=s[0]\n        for j in range(1,n):\n            s2+=s[j]\n            if s2<s1:\n                s1=s2\n                k=j+1\n            else:\n                s2=s1\n        print(s1)\n        print(k)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1989,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] < a[j]:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1990,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    commands = input()\n    stack = []\n    for i in range(N):\n        if commands[i] == 'L':\n            if i == 0:\n                continue\n            if commands[i-1] == 'R':\n                continue\n            if commands[i-1] == '(':\n                stack.append('(')\n            elif commands[i-1] == ')':\n                if not stack:\n                    print(-1)\n                    continue\n                stack.pop()\n        elif commands[i] == 'R':\n            if i == N-1:\n                continue\n            if commands[i+1] == '(':\n                stack.append('(')\n            elif commands[i+1] == ')':\n                if not stack:\n                    print(-1)\n                    continue\n                stack.pop()\n        else:\n            stack.append(commands[i])\n            if commands[i] == '(':\n                stack.append('(')\n            elif commands[i] == ')':\n                if not stack:\n                    print(-1)\n                    continue\n                stack.pop()\n        if not stack:\n            print(1)\n        else:\n            print(len(stack))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1991,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        a=list(map(int,input().split()))\n        b=sorted(a)\n        count=0\n        for j in range(n):\n            if a[j]!=b[j]:\n                count+=1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1992,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    a_dict = {i: x for i, x in enumerate(a)}\n    b_dict = {i: x for i, x in enumerate(b)}\n    gestures = 0\n    for i in range(m):\n        if i % k == 0:\n            gestures += 1\n        if i % k == k - 1:\n            gestures += 1\n        if i % k == k - 2:\n            gestures += 1\n        if i % k == k - 3:\n            gestures += 1\n        if i % k == k - 4:\n            gestures += 1\n        if i % k == k - 5:\n            gestures += 1\n        if i % k == k - 6:\n            gestures += 1\n        if i % k == k - 7:\n            gestures += 1\n        if i % k == k - 8:\n            gestures += 1\n        if i % k == k - 9:\n            gestures += 1\n        if i % k == k - 10:\n            gestures += 1\n        if i % k == k - 11:\n            gestures += 1\n        if i % k == k - 12:\n            gestures += 1\n        if i % k == k - 13:\n            gestures += 1\n        if i % k == k - 14:\n            gestures += 1\n        if i % k == k - 15:\n            gestures += 1\n        if i % k == k - 16:\n            gestures += 1\n        if i % k == k - 17:\n            gestures += 1\n        if i % k == k - 18:\n            gestures += 1\n        if i % k == k - 19:\n            gestures += 1\n        if i % k == k - 20:\n            gestures += 1\n        if i % k == k - 21:\n            gestures +=",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1993,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    field = [input().split() for _ in range(n)]\n    result = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                continue\n            queue = [(i, j)]\n            visited = set()\n            size = 0\n            while queue:\n                x, y = queue.pop(0)\n                if (x, y) not in visited:\n                    visited.add((x, y))\n                    size += 1\n                    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                        if 0 <= x + dx < n and 0 <= y + dy < m and field[x + dx][y + dy] == '.':\n                            queue.append((x + dx, y + dy))\n            result[i][j] = str(size % 10)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1994,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = ' ' + input()\n    n = len(s)\n    prefix_dict = {}\n    suffix_dict = {}\n    for i in range(1, n):\n        prefix = s[:i]\n        suffix = s[n-i:]\n        if prefix in suffix_dict:\n            prefix_dict[prefix] += 1\n        else:\n            prefix_dict[prefix] = 1\n        if suffix in prefix_dict:\n            suffix_dict[suffix] += 1\n        else:\n            suffix_dict[suffix] = 1\n    prefix_list = sorted(prefix_dict.items(), key=lambda x: x[0])\n    suffix_list = sorted(suffix_dict.items(), key=lambda x: x[0])\n    print(len(prefix_dict))\n    for i in range(len(prefix_list)):\n        print(prefix_list[i][0], suffix_list[i][0], prefix_list[i][1], suffix_list[i][1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1995,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    m = int(input())\n    for i in range(m):\n        l, r, k = map(int, input().split())\n        s = s[l-1:r] + s[:l-1]\n        s = s[-k:] + s[:-k]\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1996,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    actions = input_string.split('\\n')\n    shocks = 0\n    selected_letter = None\n    for action in actions:\n        if action[0] == '!':\n            word = action[2:]\n            if selected_letter is None:\n                if action[2] in word:\n                    shocks += 1\n            else:\n                if action[2] == selected_letter:\n                    shocks += 1\n        elif action[0] == '?':\n            selected_letter = action[2]\n        else:\n            pass\n    return shocks\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1997,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 3, 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1998,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b,k=[int(i) for i in input().split()]\n    grid=input().strip()\n    #print(n,a,b,k)\n    #print(grid)\n    count=0\n    for i in range(n):\n        if grid[i]=='0':\n            count+=1\n    if count>=k:\n        print(count)\n        print(\" \".join([str(i+1) for i in range(n) if grid[i]=='0'])\n    else:\n        print(count+1)\n        print(\" \".join([str(i+1) for i in range(n) if grid[i]=='0']+[str(i+1) for i in range(n) if grid[i]=='1'])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 1999,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    while len(set(arr)) != len(arr):\n        arr = sorted(arr)\n        x = arr[0]\n        count = 0\n        for i in range(len(arr)):\n            if arr[i] == x:\n                count += 1\n                if count >= 2:\n                    break\n        if count >= 2:\n            arr = arr[:i] + [2 * x] + arr[i+1:]\n            arr = arr[:i+1] + arr[i+2:]\n        else:\n            arr = arr[1:]\n    print(len(arr))\n    print(*arr)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2000,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,c,a=int(input()),Counter(),0\n    for i in range(n):\n        for j in range(i+1,n):\n            if bin(a[i]+a[j]).count('1')==1:\n                c[bin(a[i]+a[j]).count('1')]+=1\n    return c[1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2001,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    mod = 10**9+7\n    dp = [0]*n\n    dp[0] = 0\n    for i in range(1, n):\n        dp[i] = dp[i-1] + x[i-1]\n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = max(dp[i], dp[j] + x[i])\n    for _ in range(q):\n        l, r = map(int, input().split())\n        print(dp[r-1] - dp[l-1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2002,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    x = list(map(int, input().split()))\n    edges = [list(map(int, input().split()) for _ in range(n-1)]\n    # Your code goes here\n    return 42\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2003,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k, x = input().split()\n    A = set()\n    for i in range(int(k)):\n        if input_string[i][0] == '+':\n            A.add(int(input_string[i][2:]))\n        elif input_string[i][0] == '-':\n            A.remove(int(input_string[i][2:]))\n        else:\n            max_xor = -1\n            for a in A:\n                max_xor = max(max_xor, a ^ int(input_string[i][2:]))\n            print(max_xor)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2004,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    tanks=[]\n    for i in range(n):\n        tanks.append(0)\n    min_bombs=0\n    for i in range(n):\n        if tanks[i]==0:\n            min_bombs+=1\n        else:\n            continue\n    print(min_bombs)\n    for i in range(min_bombs):\n        print(i+1, end=\" \")\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2005,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,n1,n2=map(int,input().split())\n    a=list(map(int,input().split())\n    a.sort(reverse=True)\n    sum1=sum(a[:n1])\n    sum2=sum(a[n1:])\n    mean1=sum1/n1\n    mean2=sum2/n2\n    return (mean1+mean2)/2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2006,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    matrix = [list(input().split()) for _ in range(n)]\n    moves = 0\n    for i in range(n):\n        if 'G' in matrix[i]:\n            moves += matrix[i].index('G')\n    if moves == 0:\n        return -1\n    return moves\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2007,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    s=input()\n    graph={}\n    for i in range(n):\n        graph[i+1]=[0]*26\n    for i in range(m):\n        x,y=map(int,input().split())\n        graph[x][ord(s[x-1])-ord('a')]+=1\n        graph[y][ord(s[y-1])-ord('a')]+=1\n    max_value=0\n    for i in range(n):\n        for j in range(26):\n            if max_value<graph[i][j]:\n                max_value=graph[i][j]\n    return max_value\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2008,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = []\n    b = []\n    for i in range(n):\n        a_i, b_i = map(int, input().split())\n        a.append(a_i)\n        b.append(b_i)\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2009,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    r1, c1 = map(int, input().split())\n    r2, c2 = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, input().split())))\n    # print(grid)\n    # print(r1, c1, r2, c2)\n    # create a graph\n    graph = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                if i-1 >= 0 and grid[i-1][j] == 0:\n                    graph[i][j] += 1\n                if i+1 < n and grid[i+1][j] == 0:\n                    graph[i][j] += 1\n                if j-1 >= 0 and grid[i][j-1] == 0:\n                    graph[i][j] += 1\n                if j+1 < n and grid[i][j+1] == 0:\n                    graph[i][j] += 1\n    # print(graph)\n    # find the shortest path\n    def shortest_path(graph, start, end):\n        queue = [(start, 0)]\n        visited = set()\n        while queue:\n            (node, dist) = queue.pop(0)\n            if node == end:\n                return dist\n            if node in visited:\n                continue\n            visited.add(node)\n            for neighbor in [(node[0]-1, node[1]), (node[0]+1, node[1]), (node[0], node[1]-1), (node[0], node[1]+1)]:\n                if 0 <= neighbor[0] < n and 0 <= neighbor[1] < n and graph[neighbor[0]][neighbor[1]] > 0 and neighbor not in visited:\n                    queue.append((neighbor, dist+1))\n        return -1\n    # print(shortest_path(graph, (r1-1, c1-1), (",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2010,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    arr=list(map(int,input().split())\n    for i in range(m):\n        t,v,x,y,q=map(int,input().split())\n        if t==1:\n            arr[v-1]=x\n        elif t==2:\n            for j in range(n):\n                arr[j]+=y\n        else:\n            print(arr[q-1])\n    return arr\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2011,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    debts=[]\n    for i in range(m):\n        debts.append(list(map(int,input().split()))\n    # Your code goes here\n    return ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2012,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    c = list(map(int, input().split()))\n    s = \"\"\n    for i in range(1, n+1):\n        s += chr(97 + i-1) * c[i-1]\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2013,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    sx = []\n    sy = []\n    fx = []\n    fy = []\n    for i in range(k):\n        sx.append(int(input()))\n        sy.append(int(input()))\n    for i in range(k):\n        fx.append(int(input()))\n        fy.append(int(input())\n    #print(sx, sy, fx, fy)\n    #print(n, m, k)\n    #print(sx, sy, fx, fy)\n    #print(n, m, k)\n    #print(sx, sy, fx, fy)\n    #print(n, m, k)\n    #print(sx, sy, fx, fy)\n    #print(n, m, k)\n    #print(sx, sy, fx, fy)\n    #print(n, m, k)\n    #print(sx, sy, fx, fy)\n    #print(n, m, k)\n    #print(sx, sy, fx, fy)\n    #print(n, m, k)\n    #print(sx, sy, fx, fy)\n    #print(n, m, k)\n    #print(sx, sy, fx, fy)\n    #print(n, m, k)\n    #print(sx, sy, fx, fy)\n    #print(n, m, k)\n    #print(sx, sy, fx, fy)\n    #print(n, m, k)\n    #print(sx, sy, fx, fy)\n    #print(n, m, k)\n    #print(sx, sy, fx, fy)\n    #print(n, m, k)\n    #print(sx, sy, fx, fy)\n    #print(n, m, k)\n    #print(sx, sy, fx, fy)\n    #print(n, m, k)\n    #print(sx, sy, fx, fy)\n    #print(n, m,",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2014,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    perms = []\n    for i in range(k):\n        perms.append(list(map(int, input().split()))\n    # your code here\n    return len(longest_common_subsequence(perms)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2015,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        r, g, b = map(int, input().split())\n        if r == 1 and g == 1 and b == 1:\n            print(\"Yes\")\n        elif r == 1 and g == 0 and b == 0:\n            print(\"Yes\")\n        elif r == 0 and g == 1 and b == 0:\n            print(\"Yes\")\n        elif r == 0 and g == 0 and b == 1:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2016,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    [q, m] = list(map(int, input().strip().split()))\n    spells = []\n    for i in range(q):\n        [k, a, b] = list(map(int, input().strip().split()))\n        if k == 1:\n            spells.append((a, b))\n        else:\n            t, h = a, b\n            if not spells:\n                print(\"NO\")\n                continue\n            x, y = spells[-1]\n            total_time = 0\n            total_damage = 0\n            for x, y in spells:\n                total_time += x\n                total_damage += y\n                if total_time > t:\n                    print(\"NO\")\n                    break\n                if total_damage * t > m:\n                    print(\"NO\")\n                    break\n            else:\n                print(\"YES\")\n                continue\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2017,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(range(1, n+1))\n    for i in range(n):\n        a, b = map(int, input().split())\n        p[a-1], p[b-1] = p[b-1], p[a-1]\n    inversions = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if p[i] > p[j]:\n                inversions += 1\n    return inversions\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2018,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, q = map(int, input().split())\n    for _ in range(q):\n        sx, sy, ex, ey = map(int, input().split())\n        if sx == 1:\n            if sy == 1 and ey == 1:\n                print(\"YES\")\n            elif sy == 1 and ey == 2:\n                print(\"NO\")\n            elif sy == 2 and ey == 1:\n                print(\"YES\")\n            elif sy == 2 and ey == 2:\n                print(\"NO\")\n        else:\n            if sy == 1 and ey == 1:\n                print(\"NO\")\n            elif sy == 1 and ey == 2:\n                print(\"YES\")\n            elif sy == 2 and ey == 1:\n                print(\"NO\")\n            elif sy == 2 and ey == 2:\n                print(\"YES\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2019,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if len(s) == 1:\n        return \"DA\"\n    else:\n        return \"NET\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2020,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y = map(int, input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2021,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A=sorted(int(x)for x in input().split())\n    n=len(A)\n    B=sorted(int(x)for x in input().split())\n    m=int(input())\n    C=sorted(int(x)for x in input().split())\n    for i in range(m):\n        if C[i]>n:\n            print(0)\n        else:\n            min_cost=sum(A[:C[i])\n            max_cost=sum(A[C[i]:])\n            print(min_cost+max_cost)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2022,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, req = map(int, input().split())\n    adj_list = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    # Do something here\n    return output\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2023,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = input()\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(m):\n        t, x, y, k = map(int, input().split()) if i % 2 == 0 else int(input())\n        if t == 1:\n            b[y] = a[x]\n        else:\n            print(b[x])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2024,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mod = 998244353\n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(n):\n        dp[i+1] = 1\n        for j in range(i):\n            if a[i] > 2*a[j]:\n                dp[i+1] += dp[j]\n                dp[i+1] %= mod\n    return dp[n]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2025,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    for i in range(n):\n        num=int(input())\n        if num<=1:\n            print(-1)\n        else:\n            count=0\n            for j in range(2,num):\n                if num%j==0:\n                    count+=1\n            if count==0:\n                print(-1)\n            else:\n                print(count)\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2026,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    moves = input()\n    grid = [['#' for _ in range(n)] for _ in range(n)]\n    x, y = 0, 0\n    grid[x][y] = 'S'\n    for move in moves:\n        if move == 'L':\n            x -= 1\n        elif move == 'R':\n            x += 1\n        elif move == 'U':\n            y -= 1\n        else:\n            y += 1\n        grid[x][y] = '.'\n    min_length = 0\n    for row in grid:\n        min_length += row.count('.')\n    return min_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2027,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    for i in range(n):\n        b.append(a[i])\n        for j in range(i+1, n):\n            b[j] = b[j-1] + j + 1\n    return b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2028,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    engineers = []\n    for i in range(n):\n        engineers.append(list(map(int, input().split()))\n    # Your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2029,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = map(int, input().split())\n    edges = []\n    for _ in range(n-1):\n        a, b = map(int, input().split())\n        edges.append((a-1, b-1))\n    # Your code here\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2030,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    max_prob = list(map(float, input().split()))\n    min_prob = list(map(float, input().split()))\n    max_prob = [round(x/sum(max_prob), 6) for x in max_prob]\n    min_prob = [round(x/sum(min_prob), 6) for x in min_prob]\n    a_prob = [0]*n\n    b_prob = [0]*n\n    for i in range(n):\n        a_prob[i] = max_prob[i] + min_prob[i]\n        b_prob[i] = max_prob[i] + min_prob[i]\n    a_prob = [round(x/sum(a_prob), 6) for x in a_prob]\n    b_prob = [round(x/sum(b_prob), 6) for x in b_prob]\n    print(\" \".join(map(str, a_prob))\n    print(\" \".join(map(str, b_prob))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2031,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = int(input())\n    requests = []\n    for i in range(m):\n        requests.append(list(map(int, input().split()))\n    # Your code here\n    # return the result as a list of integers\n    return [0] * m\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2032,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = list(map(int, input().split()))\n    a = []\n    b = []\n    c = []\n    for i in range(n):\n        a.append(list(map(int, input().split()))\n    for i in range(m):\n        u, v = list(map(int, input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2033,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    roads = [list(map(int, input().split())) for _ in range(m)]\n    k = int(input())\n    path = list(map(int, input().split()))\n    # create adjacency list\n    adj_list = [[] for _ in range(n+1)]\n    for u, v in roads:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    # initialize distances\n    distances = [-1] * (n+1)\n    distances[1] = 0\n    # initialize queue\n    queue = [(1, 0)]\n    # initialize visited\n    visited = [False] * (n+1)\n    # initialize shortest path\n    shortest_path = [-1] * (n+1)\n    shortest_path[1] = 0\n    # initialize rebuilds\n    rebuilds = 0\n    # initialize min_rebuilds and max_rebuilds\n    min_rebuilds = 0\n    max_rebuilds = 0\n    # BFS\n    while queue:\n        current, dist = queue.pop(0)\n        visited[current] = True\n        for neighbor in adj_list[current]:\n            if not visited[neighbor]:\n                if shortest_path[neighbor] == -1 or shortest_path[neighbor] > dist + 1:\n                    shortest_path[neighbor] = dist + 1\n                    queue.append((neighbor, dist + 1))\n                    if neighbor == path[k-1]:\n                        min_rebuilds = max(min_rebuilds, rebuilds)\n                        max_rebuilds = max(max_rebuilds, rebuilds)\n                elif shortest_path[neighbor] > dist + 1:\n                    rebuilds += 1\n                if neighbor",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2034,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    adj_list=[[] for i in range(n+1)]\n    for i in range(m):\n        x,y=map(int,input().split())\n        adj_list[x].append(y)\n        adj_list[y].append(x)\n    count=0\n    for i in range(1,n+1):\n        if len(adj_list[i])==0:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2035,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x,y = map(int,input().split())\n    students = []\n    for i in range(n):\n        students.append(list(map(int,input().split()))\n    # Write your code here\n    return 0,0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2036,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w,h,sx,sy = list(map(int,input().split()))\n    visited = [[False for _ in range(h)] for _ in range(w)]\n    visited[sx-1][sy-1] = True\n    queue = [(sx,sy)]\n    visited[sx-1][sy-1] = True\n    while queue:\n        x,y = queue.pop(0)\n        if x == 1 and y == 1:\n            break\n        if x > 1:\n            if not visited[x-1][y]:\n                visited[x-1][y] = True\n                queue.append((x-1,y))\n        if x < w:\n            if not visited[x+1][y]:\n                visited[x+1][y] = True\n                queue.append((x+1,y))\n        if y > 1:\n            if not visited[x][y-1]:\n                visited[x][y-1] = True\n                queue.append((x,y-1))\n        if y < h:\n            if not visited[x][y+1]:\n                visited[x][y+1] = True\n                queue.append((x,y+1))\n    for i in range(w):\n        for j in range(h):\n            if not visited[i][j]:\n                visited[i][j] = True\n                queue.append((i+1,j+1) if i+1<w else (1,j+1) if j+1<h else (i,j))\n                break\n    for i in range(w):\n        for j in range(h):\n            if not visited[i][j]:\n                visited[i][j] = True\n                queue.append((i+1,j) if i+1<w else (1,j) if j<h else (i,1) if i<w else (w,1))\n                break\n    for i in range(w):\n        for j in range(h):\n            if not visited[i][j]:\n                visited[i][j] = True\n                queue.append((i,j+1) if j+1<h else (i,1) if i<w else (w,1) if j<h else (",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2037,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    problems = list(map(int, input().split()))\n    result = []\n    for i in range(m):\n        if problems[i] not in problems[:i]:\n            result.append(1)\n        else:\n            result.append(0)\n    return ''.join(map(str, result))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2038,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    m = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if 2 * abs(i-j) >= n:\n                p[i], p[j] = p[j], p[i]\n                m += 1\n                if m == 5*n:\n                    break\n    for i in range(m):\n        print(i+1, i+2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2039,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    count=0\n    for i in range(1,n-1):\n        if a[i]<a[i-1] and a[i]<a[i+1]:\n            count+=1\n        elif a[i]>a[i-1] and a[i]>a[i+1]:\n            count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2040,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    y = int(input())\n    x = []\n    for i in range(y):\n        x.append(int(input()))\n    return x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2041,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    a = list(map(int, input_string.split('\\n')[1].split()))\n    m = int(input_string.split('\\n')[2])\n    requests = list(map(int, input_string.split('\\n')[3:]))\n    # Write your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2042,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = [int(x) for x in uinput().split()]\n    museum = [uinput().split() for _ in range(n)]\n    walls = []\n    for i in range(n):\n        for j in range(m):\n            if museum[i][j] == '*':\n                walls.append((i, j))\n    result = []\n    for _ in range(k):\n        x, y = [int(x) for x in uinput().split()]\n        max_pictures = 0\n        for wall in walls:\n            if wall[0] == x or wall[1] == y:\n                max_pictures += 1\n        result.append(max_pictures)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2043,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input()\n    s = input()\n    count = 0\n    for i in range(len(t)):\n        if t[:i+1] == s or t[i:] == s:\n            count += 1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2044,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split())\n    t = [0] * n\n    current_page = 1\n    for i in range(n):\n        if current_page * m >= a[i]:\n            t[i] = 0\n        else:\n            t[i] = 1\n            current_page += 1\n    print(*t)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2045,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    words = input().split()\n    compressed_word = \"\"\n    for i in range(n-1):\n        compressed_word += words[i]\n        for j in range(len(words[i+1])-1, -1, -1):\n            if words[i].endswith(words[i+1][:j+1]):\n                compressed_word += words[i][j+1:]\n                break\n            elif j == 0:\n                compressed_word += words[i+1]\n    compressed_word += words[-1]\n    return compressed_word\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2046,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    snacks=list(map(int,input().split()))\n    snack_tower=[]\n    for i in range(n):\n        if i==0:\n            snack_tower.append(snacks[i])\n        else:\n            for j in range(len(snack_tower)-1,0,-1):\n                if snacks[i]>snack_tower[j]:\n                    snack_tower.insert(j+1,snacks[i])\n                    break\n            else:\n                snack_tower.insert(0,snacks[i])\n    for i in range(n):\n        if i<len(snack_tower):\n            print(snack_tower[i],end=\" \")\n        else:\n            print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2047,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2048,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n=int(input())\n    s=R()\n    c=R()\n    if n<3:\n        return -1\n    s.sort()\n    c.sort()\n    for i in range(n-2):\n        for j in range(i+1,n-1):\n            for k in range(j+1,n):\n                if s[i]<s[j]<s[k]:\n                    return c[i]+c[j]+c[k]\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2049,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    arr=list(map(int,input().split())\n    queries=[]\n    for i in range(m):\n        queries.append(list(map(int,input().split()))\n    for i in range(m):\n        l,r=queries[i]\n        sub_arr=arr[l-1:r]\n        if all(sub_arr[i]<=sub_arr[i+1] for i in range(len(sub_arr)-1)) and all(sub_arr[i]>=sub_arr[i+1] for i in range(1,len(sub_arr)):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2050,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int,input().split()))\n    m = 1\n    while True:\n        if all(len(set(gcd(a,b) for a,b in combinations(range(1,m+1,1)))=k):\n            print(m)\n            for i in range(n):\n                print(*sample(range(1,m+1,1),4))\n            break\n        else:\n            m += 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2051,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    socks=list(map(int,input().split()))\n    instructions=[]\n    for i in range(m):\n        instructions.append(list(map(int,input().split()))\n    # Your code here\n    return min_socks_to_change\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2052,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r=lambda:map(int,input().split())\n    w,l=r()\n    a=list(r())\n    c=0\n    for i in range(w-1):\n        if a[i]<=l:\n            c+=1\n    print(c)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2053,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = int(input())\n    b = list(map(int, input().split()))\n    s_a = sum(a)\n    s_b = sum(b)\n    a_sorted = sorted(a)\n    b_sorted = sorted(b)\n    if s_a - s_b > 2:\n        return 2, [(1, 1), (2, 1)]\n    elif s_a - s_b == 2:\n        return 1, [(1, 1), (2, 1)]\n    elif s_a - s_b == 1:\n        return 1, [(1, 1), (1, 2)]\n    else:\n        return 0, []\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2054,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    if b==0:\n        return 0\n    else:\n        return (a//2+b//2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2055,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        if sum(a) <= sum(b):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2056,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_sum = max(max_sum, (a[i] & a[j]) + (a[i] | a[j]))\n    return max_sum**2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2057,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    t = list(map(int, input().split()))\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2058,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d,e=input(),input(),[0],0,0\n    for i in range(len(b)-len(a)+1):\n        for j in range(len(a)):\n            for k in range(len(a)):\n                if b[i+j:i+k]==a:\n                    c.append(sum(abs(int(a[l]-b[i+l]) for l in range(len(a)))\n    return sum(c)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2059,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    a = list(map(int, input().split()))\n    k = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if k*abs(i-j) <= min(a[i], a[j]):\n                k += 1\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2060,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        x = int(input())\n        if x % 7 == 0:\n            print(\"YES\")\n        elif x % 3 == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2061,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y,k=list(map(int,input().split()))\n    map_list=[]\n    for i in range(x):\n        map_list.append(list(input()))\n    def dfs(x,y,visited):\n        if x<0 or x>=x or y<0 or y>=y or map_list[x][y]==\".\" or visited[x][y]:\n            return 0\n        visited[x][y]=True\n        return 1+dfs(x+1,y,visited)+dfs(x-1,y,visited)+dfs(x,y+1,visited)+dfs(x,y-1,visited)\n    def bfs(x,y,visited):\n        queue=[]\n        queue.append((x,y))\n        visited[x][y]=True\n        count=0\n        while queue:\n            x,y=queue.pop(0)\n            for dx,dy in [(-1,0),(1,0),(0,-1),(0,1)]:\n                if 0<=x+dx<x and 0<=y+dy<y and map_list[x+dx][y+dy]==\".\" and not visited[x+dx][y+dy]:\n                    visited[x+dx][y+dy]=True\n                    queue.append((x+dx,y+dy))\n                    count+=1\n        return count\n    def lake_count(map_list):\n        count=0\n        visited=[[False for _ in range(y)] for _ in range(x)]\n        for i in range(x):\n            for j in range(y):\n                if map_list[i][j]==\".\" and not visited[i][j]:\n                    count+=1\n                    count+=dfs(i,j,visited)\n        return count\n    def lake_fill(map_list,lake_count):\n        visited=[[False for _ in range(y)] for _ in range(x)]\n        for i in range(x):\n            for j in range(y):\n                if map_list[i][j]==\".\" and not visited[i][j]:\n                    lake_size=bfs(i,j,visited)\n                    if lake_size>1:\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2062,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_power = 0\n    for i in range(n):\n        max_power += a[i]\n    for i in range(n):\n        for j in range(n):\n            if i != j and a[i] % a[j] == 0:\n                max_power -= a[i]\n                a[i] = 0\n    return max_power\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2063,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n, m, w = R()\n    a = R()\n    # print(n, m, w)\n    # print(a)\n    # print(len(a))\n    # print(a[0])\n    # print(a[1])\n    # print(a[2])\n    # print(a[3])\n    # print(a[4])\n    # print(a[5])\n    # print(a[6])\n    # print(a[7])\n    # print(a[8])\n    # print(a[9])\n    # print(a[10])\n    # print(a[11])\n    # print(a[12])\n    # print(a[13])\n    # print(a[14])\n    # print(a[15])\n    # print(a[16])\n    # print(a[17])\n    # print(a[18])\n    # print(a[19])\n    # print(a[20])\n    # print(a[21])\n    # print(a[22])\n    # print(a[23])\n    # print(a[24])\n    # print(a[25])\n    # print(a[26])\n    # print(a[27])\n    # print(a[28])\n    # print(a[29])\n    # print(a[30])\n    # print(a[31])\n    # print(a[32])\n    # print(a[33])\n    # print(a[34])\n    # print(a[35])\n    # print(a[36])\n    # print(a[37])\n    # print(a[38])\n    # print(a[39])\n    # print(a[40])\n    # print(a[41])\n    # print(a[42])\n    # print(a[43])\n    # print(a[44])\n    # print(a[45])\n    # print(a[46])\n    # print(a[47])\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2064,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 2:\n        return 9\n    elif n == 3:\n        return 7\n    else:\n        return 999999999999\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2065,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    relations = []\n    for i in range(m):\n        relations.append(list(map(int, input().split()))\n    wishes = list(map(int, input().split())\n    # Your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2066,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        s = input()\n        if len(s) == 1:\n            print(s)\n        else:\n            for j in range(len(s)):\n                if s[j] == 'a':\n                    if j == 0 or s[j-1] != 'a':\n                        print(s[j] + s[0] + s[1:j] + s[j+1:])\n                        break\n                elif j == len(s)-1 or s[j+1] != 'a':\n                    print(s[j] + s[0] + s[1:j] + s[j+1:])\n                    break\n                else:\n                    continue\n            else:\n                print(\"No answer\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2067,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l=input().split()\n    n,m=int(l[0]),int(l[1])\n    v=[]\n    h=[]\n    for i in range(n):\n        v.append(int(input()))\n    for i in range(m):\n        h.append(list(map(int,input().split()))\n    #print(v,h)\n    #print(n,m)\n    #print(v,h)\n    #print(len(v),len(h))\n    #print(v[0],h[0])\n    #print(v[1],h[1])\n    #print(v[2],h[2])\n    #print(v[0],h[0][0],h[0][1],h[0][2])\n    #print(v[1],h[1][0],h[1][1],h[1][2])\n    #print(v[2],h[2][0],h[2][1],h[2][2])\n    #print(v[1],h[1][0],h[1][1],h[1][2])\n    #print(v[2],h[2][0],h[2][1],h[2][2])\n    #print(v[2],h[2][0],h[2][1],h[2][2])\n    #print(v[2],h[2][0],h[2][1],h[2][2])\n    #print(v[2],h[2][0],h[2][1],h[2][2])\n    #print(v[2],h[2][0],h[2][1],h[2][2])\n    #print(v[2],h[2][0],h[2][1],h[2][2])\n    #print(v[2],h[2][0],h[2][1],h[2][2])\n    #print(v[2],h[2][0],h[2][1],h[2][2])\n    #print(v[2],h[2][0],h[2][1],h[2][2])\n    #print(v[2],h[2",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2068,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, qwe = int(input()), {'polycarp' : 1}\n    for i in range(n):\n        name1, name2 = input_string[i].split()\n        if name2.lower() not in qwe:\n            qwe[name2.lower()] = 1\n        qwe[name1.lower()] = max(qwe.get(name1.lower(), 0), qwe.get(name2.lower(), 0) + 1)\n    return max(qwe.values())\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2069,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    foe_pairs = []\n    for _ in range(m):\n        foe_pairs.append(list(map(int, input().split()))\n    # Your code goes here\n    return c\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2070,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=list(map(int,input().split()))\n    s=input()\n    count=0\n    for i in range(len(s)-1):\n        if s[i]==s[len(s)-1]:\n            if a[ord(s[i])-97]==0:\n                count+=1\n            else:\n                count+=a[ord(s[i])-97]\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2071,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    max_weight = 0\n    for i in range(n):\n        max_weight += (i+1)*a[i]\n    for i in range(n):\n        max_weight += (n-i)*b[i]\n    return max_weight\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2072,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=list(map(int,input().split()))\n    v=list(map(int,input().split()))\n    x.sort()\n    v.sort()\n    if n==1:\n        return 0\n    if n==2:\n        return abs(x[1]-x[0])/max(v)\n    if n==3:\n        return max(abs(x[1]-x[0],x[2]-x[1])/max(v),abs(x[2]-x[1])/max(v))\n    if n==4:\n        return max(abs(x[1]-x[0],x[2]-x[1],x[3]-x[2])/max(v),abs(x[2]-x[1],x[3]-x[2])/max(v),abs(x[3]-x[2])/max(v))\n    if n==5:\n        return max(abs(x[1]-x[0],x[2]-x[1],x[3]-x[2],x[4]-x[3])/max(v),abs(x[2]-x[1],x[3]-x[2],x[4]-x[3])/max(v),abs(x[3]-x[2],x[4]-x[3])/max(v),abs(x[4]-x[3])/max(v))\n    if n==6:\n        return max(abs(x[1]-x[0],x[2]-x[1],x[3]-x[2],x[4]-x[3],x[5]-x[4])/max(v),abs(x[2]-x[1],x[3]-x[2],x[4]-x[3],x[5]-x[4])/max(v),abs(x[3]-x[2],x[4]-x[3],x[5]-x[4])/max(v),abs(x[4]-x[3],x[5]-x[4])/max(v),",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2073,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mod = 10**9 + 7\n    count = 0\n    for i in range(1, 2**n):\n        flip = 0\n        for j in range(n):\n            if i & (1<<j):\n                flip ^= a[j]\n        if flip != 0 and flip != n:\n            count += 1\n    return count % mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2074,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    c = [list(map(int, input().split())) for _ in range(n)]\n    c = [sorted(row, reverse=True) for row in c]\n    result = 0\n    for row in c:\n        result += row[0]\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2075,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    s = input()\n    count = 0\n    for i in range(m+1):\n        for j in range(m+1):\n            if i + j == n:\n                if s[:i] == '(' * i and s[i:i+j] == ')' * j:\n                    count += 1\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2076,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        a, b, c = map(int, input().split())\n        if a == 0:\n            print(c)\n        elif b == 0:\n            print(a)\n        else:\n            print(min(a, b) * 2 + min(b, c) * 2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2077,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    edges=[]\n    for i in range(m):\n        edges.append(list(map(int,input().split()))\n    topics=list(map(int,input().split())\n    visited=[0]*n\n    def dfs(node,topic):\n        visited[node-1]=1\n        for i in range(n):\n            if visited[i]==0 and i+1 not in [edges[node-1][1] for j in range(m) if edges[j][0]==node]:\n                dfs(i+1,topic)\n    for i in range(n):\n        if visited[i]==0:\n            dfs(1,i+1)\n    if sum(visited)!=n:\n        return -1\n    else:\n        return [i+1 for i in range(n) if visited[i]==1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2078,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    bound=10**6;n,m=map(int,input().split());yoko_edges=[list(map(int,input().split())) for _ in range(n)];yoko_edges=sorted(yoko_edges,reverse=True,key=lambda x:x[0])\n    tate_edges=[list(map(int,input().split())) for _ in range(m)];tate_edges=sorted(tate_edges,key=lambda x:x[1])\n    pieces=1\n    for y in range(bound):\n        for x in range(bound):\n            if any(y>=y_i and y<=ry_i and x>=lx_i and x<=rx_i for y_i,lx_i,rx_i,ry_i in yoko_edges):\n                pieces+=1\n            if any(x>=x_i and x<=rx_i and y>=ly_i and y<=ry_i for x_i,ly_i,rx_i,ry_i in tate_edges):\n                pieces+=1\n    return pieces-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2079,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    widths = list(map(int, input().split()))\n    order = input()\n    result = []\n    for i in range(len(order)):\n        if order[i] == '0':\n            result.append(widths.index(min(widths)) + 1)\n            widths.remove(min(widths))\n        else:\n            result.append(widths.index(max(widths)) + 1)\n            widths.remove(max(widths))\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2080,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    q = int(input_string[0])\n    n = [int(x) for x in input_string[1:]]\n    result = []\n    for i in range(q):\n        result.append(n[i] * (n[i] - 1) // 2)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2081,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input_string.split()))\n    max_val=max(a)\n    min_val=min(a)\n    imbalance_sum=0\n    for i in range(n):\n        imbalance_sum+=max_val-min_val\n        max_val=max(max_val,a[i])\n        min_val=min(min_val,a[i])\n    return imbalance_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2082,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split())\n    roads = []\n    for _ in range(m):\n        roads.append(list(map(int, input().split()))\n    # Your code goes here\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2083,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, T, c = input().split()\n    n, T, c = int(n), int(T), float(c)\n    a = list(map(int, input().split()))\n    m = int(input())\n    p = list(map(int, input().split()))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2084,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,k=R()\n    a=R()\n    return sum(a)//k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2085,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_value = 0\n    for i in range(1, 1000):\n        for j in range(n):\n            if bin(a[j])[-i-1] == '1':\n                max_value += 2**i\n    return max_value\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2086,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s, f = map(int, input().split())\n    max_participants = 0\n    max_time = 0\n    for i in range(s, f+1):\n        participants = sum(a[i:])\n        if participants > max_participants:\n            max_participants = participants\n            max_time = i\n    return max_time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2087,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B,C=map(int,input().split())\n    ans=0\n    for a in range(1,A+1):\n        for b in range(1,B+1):\n            for c in range(1,C+1):\n                ans+=a*b*c\n    return ans%99824353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2088,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    branches=list(map(int,input().split()))\n    adjacency_list=[[] for i in range(n+1)]\n    for i in range(1,n):\n        adjacency_list[branches[i]].append(i)\n    def dfs(node,color,visited,colors):\n        visited[node]=True\n        if len(colors)==0:\n            colors.append(color)\n        for neighbor in adjacency_list[node]:\n            if not visited[neighbor]:\n                dfs(neighbor,color,visited,colors)\n        return colors\n    def count_happy_junctions(node,visited,colors):\n        visited[node]=True\n        subtree_colors=dfs(node,colors[0],visited)\n        count=1 if len(set(subtree_colors))==len(subtree_colors) else 0\n        for neighbor in adjacency_list[node]:\n            if not visited[neighbor]:\n                count+=count_happy_junctions(neighbor,visited,colors)\n        return count\n    result=[1]*n\n    for i in range(1,n):\n        visited=[False]*(n+1)\n        colors=dfs(i,1,visited)\n        for j in range(1,n+1):\n            if not visited[j]:\n                colors=dfs(j,2,visited)\n                result[i]=max(result[i],len(set(colors))+1)\n    print(result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2089,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    rd = lambda: list(map(int, input().split()))\n    n, m, s, t = rd()\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = rd()\n        adj[u].append(v)\n        adj[v].append(u)\n    visited = [False] * (n+1)\n    def dfs(u, v):\n        visited[u] = True\n        visited[v] = True\n        for w in adj[v]:\n            if not visited[w]:\n                dfs(w, v)\n    dfs(s, t)\n    return sum(not visited[i] for i in range(1, n+1) if i != s and i != t)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2090,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    songs=[]\n    for i in range(n):\n        t,b=map(int,input().split())\n        songs.append((t,b))\n    songs.sort(key=lambda x:x[1],reverse=True)\n    total_length=0\n    for i in range(k):\n        total_length+=songs[i][0]\n    return total_length*songs[0][1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2091,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        s=input()\n        n=len(s)\n        if n%2==0:\n            mid=n//2\n            if s[:mid]==s[mid:]:\n                print(s[:mid])\n            else:\n                print(\"\")\n        else:\n            mid=n//2\n            if s[:mid]==s[mid+1:]:\n                print(s[:mid+1])\n            elif s[:mid+1]==s[mid+1:]:\n                print(s[:mid+1])\n            else:\n                print(\"\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2092,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m,n,k,t=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    traps=[]\n    for i in range(k):\n        l,r,d=list(map(int,input().split()))\n        traps.append([l,r,d])\n    # write your code here\n    return 3\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2093,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] < a[j]:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2094,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    h = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        h_new = (h[i] + 1) % k\n        if h_new > h[(i + 1) % n]:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2095,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, input().split()))\n    good_cars = []\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                good_cars.append(i)\n    good_cars.sort()\n    print(len(good_cars))\n    print(*good_cars)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2096,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cubes = list(map(int, input().split()))\n    # Your code here\n    # print(n, cubes)\n    max_count = 0\n    max_heap = []\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                for k in range(n):\n                    if k != i and k != j:\n                        for l in range(n):\n                            if l != i and l != j and l != k:\n                                count = 0\n                                for m in range(n):\n                                    if m != i and m != j and m != k and m != l:\n                                        count += 1\n                                if count == 2*n-4:\n                                    heap1 = [cubes[i], cubes[j], cubes[k], cubes[l]]\n                                    heap2 = [cubes[m] for m in range(n) if m not in [i, j, k, l]][::-1]\n                                    count = 0\n                                    for num in heap1:\n                                        for num2 in heap2:\n                                            count += len(set(str(num*10000 + num2)))\n                                    if count > max_count:\n                                        max_count = count\n                                        max_heap = [i+1, j+1, k+1, l+1]\n    print(max_count)\n    print(\" \".join(map(str, max_heap))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2097,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn=int(input())\n    for i in range(tn):\n        n=int(input())\n        a=list(map(int,input().split()))\n        s=sum(a)\n        p=1\n        for j in a:\n            p*=j\n        if s==0:\n            print(1)\n        elif p==0:\n            print(0)\n        else:\n            c=0\n            for j in a:\n                if j==0:\n                    c+=1\n            if c>1:\n                print(2)\n            else:\n                print(2)\n                for j in a:\n                    if j==0:\n                        a[a.index(j)]+=1\n                    else:\n                        a[a.index(j)]-=1\n                s=sum(a)\n                p=1\n                for j in a:\n                    p*=j\n                if s==0:\n                    print(2)\n                elif p==0:\n                    print(2)\n                else:\n                    print(2)\n                    for j in a:\n                        if j==0:\n                            a[a.index(j)]+=1\n                        else:\n                            a[a.index(j)]-=1\n                    s=sum(a)\n                    p=1\n                    for j in a:\n                        p*=j\n                    if s==0:\n                        print(2)\n                    elif p==0:\n                        print(2)\n                    else:\n                        print(3)\n                        for j in a:\n                            if j==0:\n                                a[a.index(j)]+=1\n                            else:\n                                a[a.index(j)]-=1\n                        s=sum(a)\n                        p=1\n                        for j in a:\n                            p*=j\n                        if s==0:\n                            print(3)\n                        elif p==0:\n                            print(3)\n                        else:\n                            print(4)\n                            for j in a:\n                                if j==0:\n                                    a[a.index(",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2098,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    edges = []\n    for i in range(n-1):\n        a, b = map(int, input().split())\n        edges.append((a, b))\n    # Your code goes here\n    return edges\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2099,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    get = lambda :[int(x) for x in (f.readline() if mode==\\\"file\\\" else input()).split()]\n    n, M, T = get()\n    queries = sorted(get())\n    # Your code here\n    return R, [1, 2, 3]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2100,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda:map(int,input().split())\n    n=int(input())\n    left_doors=list(I())\n    right_doors=list(I())\n    left_count=right_count=0\n    for i in range(n):\n        if left_doors[i]==1:\n            left_count+=1\n        if right_doors[i]==1:\n            right_count+=1\n    return max(left_count,right_count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2101,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r, g, b = map(int, input().split())\n    r_sticks = list(map(int, input().split()))\n    g_sticks = list(map(int, input().split())[:g])\n    b_sticks = list(map(int, input().split())[:b])\n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2102,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=list(map(int,input().split()));n=int(input());s=list(map(int,input().split()));b=[];i=j=0;ans=10**18;cs=[0]*n;nz=1;z=n*6\n    while i<n:\n        if s[i]<=a[j]:\n            cs[i]=j+1\n            i+=1\n        else:\n            j+=1\n    for i in range(n):\n        if s[i]>a[j]:\n            j+=1\n    for i in range(n):\n        if s[i]<=a[j]:\n            cs[i]=j+1\n            i+=1\n        else:\n            j+=1\n    for i in range(n):\n        if s[i]>a[j]:\n            j+=1\n    for i in range(n):\n        if s[i]<=a[j]:\n            cs[i]=j+1\n            i+=1\n        else:\n            j+=1\n    for i in range(n):\n        if s[i]>a[j]:\n            j+=1\n    for i in range(n):\n        if s[i]<=a[j]:\n            cs[i]=j+1\n            i+=1\n        else:\n            j+=1\n    for i in range(n):\n        if s[i]>a[j]:\n            j+=1\n    for i in range(n):\n        if s[i]<=a[j]:\n            cs[i]=j+1\n            i+=1\n        else:\n            j+=1\n    for i in range(n):\n        if s[i]>a[j]:\n            j+=1\n    for i in range(n):\n        if s[i]<=a[j]:\n            cs[i]=j+1\n            i+=1\n        else:\n            j+=1\n    for i in range(n):\n        if s[i]>a[j]:\n            j+=1\n    for i in range(n):\n        if s[i]<=a[j]:\n            cs[i]=j+1\n            i+=1\n        else:\n            j+=1\n    for i in range(n):\n        if s[i]>a[j]:\n            j+=1\n    for i in range(n):\n        if s[i]<=a[j]:\n            cs[i",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2103,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=[]\n    for i in range(n):\n        b.append(a[i])\n    for i in range(n):\n        if i==0:\n            continue\n        else:\n            b[i]=a[i]-1\n    for i in range(n):\n        if b[i]<0:\n            b[i]=0\n    print(b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2104,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l, r = map(int, input().split())\n    if (r - l + 1) % 2 != 0:\n        print(\"NO\")\n        return\n    pairs = []\n    for i in range(l, r + 1):\n        for j in range(i + 1, r + 1):\n            pairs.append((i, j))\n    print(\"YES\")\n    for pair in pairs:\n        print(pair[0], pair[1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2105,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    s=input().split()\n    t=input().split()\n    q=int(input())\n    for i in range(q):\n        year=int(input())\n        #your code here\n        #print(year)\n        #print(s)\n        #print(t)\n        #print(n)\n        #print(m)\n        #print(q)\n        #print(s[0])\n        #print(s[1])\n        #print(s[2])\n        #print(t[0])\n        #print(t[1])\n        #print(t[2])\n        #print(t[3])\n        #print(t[4])\n        #print(t[5])\n        #print(t[6])\n        #print(t[7])\n        #print(t[8])\n        #print(t[9])\n        #print(t[10])\n        #print(t[11])\n        #print(t[12])\n        #print(t[13])\n        #print(t[14])\n        #print(t[15])\n        #print(t[16])\n        #print(t[17])\n        #print(t[18])\n        #print(t[19])\n        #print(t[20])\n        #print(t[21])\n        #print(t[22])\n        #print(t[23])\n        #print(t[24])\n        #print(t[25])\n        #print(t[26])\n        #print(t[27])\n        #print(t[28])\n        #print(t[29])\n        #print(t[30])\n        #print(t[31])\n        #print(t[32])\n        #print(t[33])\n        #print(t[34])\n        #print(t[35])\n        #print(t[36])\n        #print(t[37])\n        #print(t[38])\n        #print(t[39])\n        #print(t[4",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2106,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m,k=list(map(int,input().split()))\n    d=list(map(int,input().split())\n    s=list(map(int,input().split())\n    n=len(d)\n    tank_capacity=1000\n    tank_size=s[0]\n    time=0\n    for i in range(1,n):\n        if tank_size<d[i]:\n            time+=k\n            tank_size=s[i]\n        time+=d[i]\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2107,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn,m,k,s = map(int, input().split())\n    guitar = [list(map(int, input().split()) for _ in range(n)]\n    song = list(map(int, input().split())\n    #print(guitar, song)\n    max_complexity = 0\n    for i in range(s-1):\n        for j in range(n):\n            for l in range(m):\n                for k in range(m):\n                    if guitar[j][l] == song[i] and guitar[j][k] == song[i+1]:\n                        max_complexity = max(max_complexity, abs(l-k) + abs(j-j))\n    return max_complexity\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2108,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split()) \n    n1,n2,n3=map(int,input().split())\n    edges=[]\n    for i in range(m):\n        edges.append(list(map(int,input().split()))\n    if n1+n2+n3!=n:\n        return \"NO\"\n    if n1+n2>n or n1+n3>n or n2+n3>n:\n        return \"NO\"\n    if n1+n2+n3!=m:\n        return \"NO\"\n    if n1==0 or n2==0 or n3==0:\n        return \"NO\"\n    if n1+n2+n3!=n:\n        return \"NO\"\n    if n1+n2+n3!=m:\n        return \"NO\"\n    if n1+n2+n3!=n:\n        return \"NO\"\n    if n1+n2+n3!=m:\n        return \"NO\"\n    if n1+n2+n3!=n:\n        return \"NO\"\n    if n1+n2+n3!=m:\n        return \"NO\"\n    if n1+n2+n3!=n:\n        return \"NO\"\n    if n1+n2+n3!=m:\n        return \"NO\"\n    if n1+n2+n3!=m:\n        return \"NO\"\n    if n1+n2+n3!=m:\n        return \"NO\"\n    if n1+n2+n3!=m:\n        return \"NO\"\n    if n1+n2+n3!=m:\n        return \"NO\"\n    if n1+n2+n3!=m:\n        return \"NO\"\n    if n1+n2+n3!=m:\n        return \"NO\"\n    if n1+n2+n3!=m:\n        return \"NO\"\n    if n1+n2+n3!=m:\n        return \"NO\"\n    if n1+n2+n3!=m:\n        return \"NO\"\n    if n1+n2+n3!=m:\n        return \"NO\"\n    if n1+n2",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2109,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    first_set = []\n    second_set = []\n    third_set = []\n    for i in arr:\n        if i < 0:\n            first_set.append(i)\n        elif i > 0:\n            second_set.append(i)\n        else:\n            third_set.append(i)\n    print(len(first_set), *first_set)\n    print(len(second_set), *second_set)\n    print(len(third_set), *third_set)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2110,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, h, m, k = map(int, input_string.split())\n    freight_trains = []\n    for i in range(n):\n        freight_trains.append(list(map(int, input().split()))\n    \n    # Your code here\n    return 0, 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2111,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn, q = list(map(int, input().split()))\n    for _ in range(q):\n        x, y, direction = input().split()\n        x, y = int(x), int(y)\n        if direction == 'U':\n            count = 0\n            for i in range(y, n):\n                count += n - i\n        else:\n            count = 0\n            for i in range(x, n):\n                count += n - i\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2112,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    x, k, y = map(int, input().split())\n    a = list(map(int, input().split())\n    b = list(map(int, input().split())\n    if n != m:\n        return -1\n    if len(set(a)) != n or len(set(b) != m:\n        return -1\n    if k > n:\n        return -1\n    if x > y:\n        return -1\n    if k > 1:\n        return -1\n    if x > y:\n        return -1\n    if k == 1:\n        return x * (n - m)\n    if k == 2:\n        return y * (n - m)\n    if k == 0:\n        return 0\n    if k == 3:\n        return -1\n    if k == 4:\n        return -1\n    if k == 5:\n        return -1\n    if k == 6:\n        return -1\n    if k == 7:\n        return -1\n    if k == 8:\n        return -1\n    if k == 9:\n        return -1\n    if k == 10:\n        return -1\n    if k == 11:\n        return -1\n    if k == 12:\n        return -1\n    if k == 13:\n        return -1\n    if k == 14:\n        return -1\n    if k == 15:\n        return -1\n    if k == 16:\n        return -1\n    if k == 17:\n        return -1\n    if k == 18:\n        return -1\n    if k == 19:\n        return -1\n    if k == 20:\n        return -1\n    if k == 21:\n        return -1\n    if k == 22:\n        return -1\n    if k == 23:\n        return -1\n    if k == 24:\n        return -1\n    if k == 25:\n        return -1\n    if k == 26:\n        return -1\n    if k ==",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2113,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());l=[1]+[0]*n;d=[[]for _ in range(n)];c=[0]\n    for i in range(n-1):\n        u,v=map(int,input().split())\n        d[u].append(v)\n        d[v].append(u)\n    def dfs(u,p):\n        for v in d[u]:\n            if v!=p:\n                if v not in l:\n                    l[v]=1-l[u]\n                    c[0]+=1\n                    dfs(v,u)\n    dfs(1,0)\n    return c[0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2114,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==1:\n        return \"1\"\n    else:\n        pass\n    return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2115,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = int(input()), 0\n    input_list = list(map(int, input_string.split()))\n    while True:\n        for i in range(n-1):\n            if input_list[i] == input_list[i+1]:\n                input_list.pop(i)\n                input_list.pop(i)\n                input_list.insert(i, input_list[i] + 1)\n                m += 1\n                break\n        else:\n            break\n    return len(input_list), input_list\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2116,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    p = list(map(int, input().split())\n    items = [list(map(int, input().split()) for _ in range(n)]\n    positions = [p[i-1] for i in range(1, k+1)]\n    total_time = 0\n    for i in range(n):\n        for j in range(m):\n            item = items[i][j]\n            index = positions.index(item)\n            total_time += positions[index]\n            positions.insert(0, positions.pop(index))\n    return total_time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2117,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    N = int(input_string[0])\n    tunnels = [tuple(map(int, line.split())) for line in input_string[1:]]\n    \n    # Initialize the graph\n    graph = [[] for _ in range(N)]\n    for u, v in tunnels:\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    \n    # Initialize the distance matrix\n    dist = [-1] * N\n    dist[0] = 0\n    \n    # Initialize the visited matrix\n    visited = [False] * N\n    \n    # Initialize the queue\n    queue = [0]\n    \n    # BFS\n    while queue:\n        u = queue.pop(0)\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                dist[v] = min(dist[u] + 1, dist[v])\n                queue.append(v)\n    \n    # Compute the maximum number of planets controlled\n    max_planets = 0\n    for d in dist:\n        if d >= 0:\n            max_planets += 1\n    \n    # Print the result\n    print(max_planets)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2118,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if k==1:\n        print(1,2,3,4,5)\n    else:\n        print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2119,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2120,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda:map(int, input().split())\n    n, m = R()\n    v = R()\n    edges = [R() for _ in range(m)]\n    graph = [[] for _ in range(n+1)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    def dfs(u, visited, depth, parent):\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                dfs(v, visited, depth+1, u)\n    def find_depth(u, visited):\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                return max(find_depth(v, visited), depth+1)\n        return depth\n    visited = [False] * (n+1)\n    depth = [0] * (n+1)\n    for i in range(1, n+1):\n        if not visited[i]:\n            dfs(i, visited, 0)\n    max_depth = max(depth)\n    return sum(v[max_depth-1] for v in v)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2121,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    adj_list = [[] for _ in range(n)]\n    for _ in range(n-1):\n        u, v = map(int, input().split())\n        adj_list[u-1].append(v-1)\n        adj_list[v-1].append(u-1)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2122,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k  = map(int, input().split())\n    books = list(map(int, input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2123,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    heights = list(map(int, input().split()))\n    heights.insert(0, 0)\n    min_height = min(heights)\n    max_height = max(heights)\n    min_cost = float('inf')\n    for i in range(min_height, max_height+1):\n        heights = [x+i for x in heights]\n        cost = sum(abs(x-i) for x in heights)\n        min_cost = min(min_cost, cost)\n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2124,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        users = input().split()\n        m = int(input())\n        messages = []\n        for j in range(m):\n            message = input().strip()\n            if message.startswith(\"?\"):\n                messages.append(message)\n            else:\n                messages.append(message.split(\":\")[0])\n        if len(set(messages)) == len(messages):\n            print(\"Impossible\")\n        else:\n            for message in messages:\n                if message.startswith(\"?\"):\n                    print(users[0] + \": \" + message[2:])\n                else:\n                    print(message + \": \" + messages[messages.index(message)])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2125,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    blanket = [input().split() for _ in range(n)]\n    count = 0\n    for i in range(n-2):\n        for j in range(m-2):\n            if blanket[i][j] != blanket[i+1][j] and blanket[i][j+1] != blanket[i+1][j+1] and blanket[i][j+2] != blanket[i+1][j+2]:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2126,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    kk=lambda:list(map(int,input().split()))\n    n,m,h=kk()\n    a,b=kk(),kk()\n    t=[[int(x) for x in input().split()] for _ in range(n)]\n    hh=[[0]*m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            hh[i][j]=max(a[j],b[i],t[i][j])\n    for i in range(n):\n        print(*hh[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2127,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(str,input().split())\n    if a==\"+\":\n        x,y=int(b),int(c)\n        #add bill to wallet\n    else:\n        h,w=int(b),int(c)\n        #check if all bills fit into wallet\n    return \"YES\" if all_bills_fit else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2128,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    p = [100 - p[i] for i in range(n)]\n    p.sort()\n    p.reverse()\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p = [p[i] for i in range(n)]\n    p =",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2129,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2130,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    b=list(map(int,input().split()))\n    a=[]\n    for i in range(n):\n        a.append(b[0])\n        for j in range(1,n):\n            a.append(a[j-1]^b[j])\n    a.sort()\n    if a==b:\n        print(\"Yes\")\n        print(*b)\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2131,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    edges = []\n    for i in range(n-1):\n        a, b = map(int, input().split())\n        edges.append((a, b))\n    # Your code goes here\n    return \"Yes\", 1, [(1, 4)]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2132,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = int(s.split()[0])\n    events = s.split('\\n')[1:]\n    speed = 0\n    speed_limit = 0\n    overtake = True\n    overtake_allowed = True\n    no_speed_limit = True\n    no_overtake_allowed = False\n    count = 0\n    for event in events:\n        if event.startswith('1'):\n            speed = int(event.split()[1])\n        elif event.startswith('3'):\n            speed_limit = int(event.split()[1])\n            if speed_limit == 0:\n                no_speed_limit = True\n            else:\n                no_speed_limit = False\n        elif event.startswith('4'):\n            overtake_allowed = True\n        elif event.startswith('5'):\n            overtake_allowed = False\n        elif event.startswith('6'):\n            no_overtake_allowed = True\n        elif event.startswith('2'):\n            if speed > speed_limit and no_speed_limit:\n                count += 1\n            if overtake_allowed and not no_overtake_allowed:\n                count += 1\n            if not overtake_allowed and no_overtake_allowed:\n                count += 1\n            overtake = True\n            no_overtake_allowed = False\n        elif event.startswith('1'):\n            if speed > speed_limit and no_speed_limit:\n                count += 1\n            if overtake_allowed and not no_overtake_allowed:\n                count += 1\n            if not overtake_allowed and no_overtake_allowed:\n                count += 1\n            overtake = False\n            no_overtake_allowed = False\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2133,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n = int(input_string.pop(0))\n    colors = list(f())\n    graph = {i: [] for i in range(1, n+1)}\n    for i in range(n-1):\n        u, v = f()\n        graph[u].append(v)\n        graph[v].append(u)\n    #print(graph)\n    def dfs(node, color, visited, colors):\n        visited[node] = True\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                colors[neighbor] = color\n                dfs(neighbor, color, visited, colors)\n    def bfs(node, color, colors):\n        queue = [node]\n        visited = [False] * (n+1)\n        visited[node] = True\n        while queue:\n            new_queue = []\n            for u in queue:\n                for v in graph[u]:\n                    if not visited[v]:\n                        colors[v] = color\n                        visited[v] = True\n                        new_queue.append(v)\n            queue = new_queue\n    def paint(node, color, colors):\n        visited = [False] * (n+1)\n        dfs(node, color, visited, colors)\n        bfs(node, color, colors)\n    count = 0\n    for i in range(n):\n        if colors[i] != 0:\n            paint(i, 0, colors)\n            count += 1\n        if colors[i] != 1:\n            paint(i, 1, colors)\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2134,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    max_sum=0\n    for i in range(n):\n        for j in range(n):\n            if i!=j:\n                if (a[i]&a[j])==0:\n                    max_sum=max(max_sum,b[i]+b[j])\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2135,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    grid = [list(input()) for _ in range(n)]\n    q = int(input())\n    queries = [list(map(int, input().split()) for _ in range(q))\n    result = []\n    for query in queries:\n        r1, c1, r2, c2 = query\n        count = 0\n        for i in range(r1, r2+1):\n            for j in range(c1, c2+1):\n                if grid[i][j] == '.':\n                    count += 1\n        result.append(count)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2136,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        grid = []\n        for j in range(n):\n            grid.append(list(input()))\n        # Your code here\n        # print(grid)\n        # print(n)\n        # print(len(grid))\n        # print(len(grid[0]))\n        # print(len(grid[n-1]))\n        # print(grid[0][0])\n        # print(grid[n-1][n-1])\n        # print(grid[0][n-1])\n        # print(grid[n-1][0])\n        # print(grid[0][1])\n        # print(grid[n-1][1])\n        # print(grid[1][0])\n        # print(grid[1][n-2])\n        # print(grid[n-2][0])\n        # print(grid[n-2][n-1])\n        # print(grid[n-2][1])\n        # print(grid[n-1][n-2])\n        # print(grid[1][1])\n        # print(grid[n-1][n-1])\n        # print(grid[n-2][n-2])\n        # print(grid[1][n-1])\n        # print(grid[n-2][1])\n        # print(grid[n-1][n-1])\n        # print(grid[n-2][n-1])\n        # print(grid[1][n-2])\n        # print(grid[n-2][n-2])\n        # print(grid[n-1][n-2])\n        # print(grid[n-2][n-1])\n        # print(grid[n-1][n-2])\n        # print(grid[n-2][n-2])\n        # print(grid[n-1][n-1])\n        # print(grid[n-2][n-1])\n        # print(grid[n-1][n-1])\n        # print(grid[n-2][n-1])\n        # print(grid[n-1][n-2])\n        # print",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2137,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b=map(int,input().split())\n    ghosts=[]\n    for i in range(n):\n        x,vx,vy=map(int,input().split())\n        ghosts.append((x,vx,vy))\n    ghosts.sort(key=lambda x:x[0])\n    ghosts.sort(key=lambda x:x[1])\n    ghosts.sort(key=lambda x:x[2])\n    ghosts.sort(key=lambda x:x[0])\n    ghosts.sort(key=lambda x:x[2])\n    ghosts.sort(key=lambda x:x[1])\n    ghosts.sort(key=lambda x:x[2])\n    ghosts.sort(key=lambda x:x[0])\n    ghosts.sort(key=lambda x:x[2])\n    ghosts.sort(key=lambda x:x[1])\n    ghosts.sort(key=lambda x:x[2])\n    ghosts.sort(key=lambda x:x[0])\n    ghosts.sort(key=lambda x:x[2])\n    ghosts.sort(key=lambda x:x[1])\n    ghosts.sort(key=lambda x:x[2])\n    ghosts.sort(key=lambda x:x[0])\n    ghosts.sort(key=lambda x:x[2])\n    ghosts.sort(key=lambda x:x[1])\n    ghosts.sort(key=lambda x:x[2])\n    ghosts.sort(key=lambda x:x[0])\n    ghosts.sort(key=lambda x:x[2])\n    ghosts.sort(key=lambda x:x[1])\n    ghosts.sort(key=lambda x:x[2])\n    ghosts.sort(key=lambda x:x[0])\n    ghosts.sort(key=lambda x:x[2])\n    ghosts.sort(key=lambda x:x[1])\n    ghosts.sort(key=lambda x:x[2])\n    ghosts.sort(key=lambda x:x[0])\n    ghosts.sort(key=lambda x:x[2])\n    ghosts",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2138,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    degree_set = list(map(int, input_string.split()[1:]))\n    degree_set.sort()\n    edges = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if degree_set[i] + degree_set[j] <= 100000000:\n                edges.append((degree_set[i], degree_set[j]))\n    return len(edges), edges\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2139,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().strip()\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'bear':\n            count += len(s) - i - 2\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2140,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = [\\\" \\\"] + list(input())\n    m = int(input())\n    a = list(map(int, input().split()))\n    for i in range(m):\n        s[a[i]:] = s[a[i]:][::-1]\n    return \"\".join(s)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2141,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    board = []\n    for i in range(n):\n        board.append(input())\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'W':\n                print('B', end='')\n            elif board[i][j] == 'B':\n                print('W', end='')\n            else:\n                print('W', end='')\n    print()\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'W':\n                print('B', end='')\n            elif board[i][j] == 'B':\n                print('W', end='')\n            else:\n                print('B', end='')\n    print()\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'W':\n                print('B', end='')\n            elif board[i][j] == 'B':\n                print('W', end='')\n            else:\n                print('W', end='')\n    print()\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'W':\n                print('B', end='')\n            elif board[i][j] == 'B':\n                print('W', end='')\n            else:\n                print('B', end='')\n    print()\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'W':\n                print('B', end='')\n            elif board[i][j] == 'B':\n                print('W', end='')\n            else:\n                print('W', end='')\n    print()\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'W':\n                print('B', end='')\n            elif board[i][j] == 'B':\n                print('W', end='')\n            else:\n                print('W', end='')\n    print()\n    for i in range(n):\n        for j in range(n):",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2142,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    a = list(map(int,input().split()))\n    b = list(map(int,input().split())\n    if len(set(a) & set(b) == 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n    return \" \".join(map(str, sorted(set(a) & set(b)))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2143,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    sweets = list(map(int, input().split()))\n    sweets.sort()\n    count = 0\n    i = 0\n    j = n - 1\n    while i < j:\n        if sweets[i] + sweets[j] <= 10**5:\n            count += 1\n            i += 1\n            j -= 1\n        else:\n            j -= 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2144,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        a,m=map(int,input().split())\n        count=0\n        for x in range(m):\n            if gcd(a,m)==gcd(a+x,m):\n                count+=1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2145,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y = list(map(int, input().split()))\n    if x == y:\n        return \"YES\"\n    if x == 1:\n        return \"YES\"\n    if x % 2 == 0:\n        x = x // 2\n    else:\n        x -= 1\n    while x != y:\n        if x == 1:\n            return \"NO\"\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            x -= 1\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2146,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    m=[0]*(n+1)\n    for i in range(1,n):\n        m[i]=abs(i-a[i-1])\n    for i in range(n-1):\n        if a[i]<i:\n            m[a[i]]=1\n    for i in range(n-1,1,-1):\n        if a[i]>i:\n            m[i]=1\n    print(*m)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2147,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    self.n = int(input())\n    rules = []\n    for i in range(4 * n):\n        rules.append(list(map(int, input().split()))\n    # Your code here\n    return \"YES\", rules\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2148,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, r = map(int, input().split())\n    x = list(map(int, input().split())\n    y = [10**100] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(x[i] - x[j]) < r:\n                y[i] = min(y[i], y[j])\n                y[j] = y[i] - 2*r\n    return y\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2149,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    h = list(map(int, input().split()))\n    count = 0\n    for i in range(k):\n        h = [h[-1] if i == 0 else h[i-1] for i in range(n)]\n        count += 1\n    return count % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2150,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    b = list(map(int, input().split()))\n    a = [0] * n\n    a[0] = 0\n    for i in range(1, n):\n        a[i] = a[i-1] + b[i]\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2151,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    if n == 2:\n        if s[0] < s[1]:\n            print(\"YES\")\n            print(1)\n            print(s)\n        else:\n            print(\"NO\")\n    elif n == 3:\n        if s[0] < s[1] < s[2]:\n            print(\"YES\")\n            print(2)\n            print(s[0], s[1])\n        elif s[0] < s[2] < s[1]:\n            print(\"YES\")\n            print(2)\n            print(s[0], s[2])\n        else:\n            print(\"NO\")\n    elif n == 4:\n        if s[0] < s[1] < s[2] < s[3]:\n            print(\"YES\")\n            print(3)\n            print(s[0], s[1], s[2])\n        elif s[0] < s[1] < s[3] < s[2]:\n            print(\"YES\")\n            print(3)\n            print(s[0], s[1], s[3])\n        elif s[1] < s[0] < s[2] < s[3]:\n            print(\"YES\")\n            print(3)\n            print(s[1], s[2], s[3])\n        elif s[1] < s[0] < s[3] < s[2]:\n            print(\"YES\")\n            print(3)\n            print(s[1], s[3], s[2])\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2152,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = []\n    p = []\n    for i in range(n):\n        a.append(int(input()))\n        p.append(int(input()))\n    dp = [0] * (n+1)\n    dp[0] = 0\n    for i in range(1, n+1):\n        dp[i] = float('inf')\n        for j in range(1, i+1):\n            dp[i] = min(dp[i], dp[j-1] + p[i-1]*a[i-1])\n            if j > 1:\n                dp[i] = min(dp[i], dp[j-2] + p[i-1]*a[i-1] + p[i-2]*a[i-2])\n            if j > 2:\n                dp[i] = min(dp[i], dp[j-3] + p[i-1]*a[i-1] + p[i-2]*a[i-2] + p[i-3]*a[i-3])\n    return dp[n]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2153,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    heights = list(map(int, input().split()))\n    heights.sort()\n    count = 0\n    for i in range(N-1):\n        if heights[i] < heights[i+1]:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2154,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    prices = list(map(int, input().split()))\n    # Initialize variables\n    max_profit = 0\n    min_price = float('inf')\n    max_price = float('-inf')\n    # Iterate through the prices\n    for price in prices:\n        # Update min_price and max_price\n        min_price = min(min_price, price)\n        max_price = max(max_price, price)\n        # Calculate the profit\n        profit = max_price - min_price\n        # Update max_profit\n        max_profit = max(max_profit, profit)\n    return max_profit\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2155,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    sequence = list(map(int, input().split()))\n    n = 1\n    m = 1\n    while t > n*m:\n        n += 1\n        if t % n == 0:\n            m = t // n\n        else:\n            m += 1\n    if t != n*m:\n        print(-1)\n        return\n    matrix = [[0 for j in range(m)] for i in range(n)]\n    for i in range(t):\n        x, y = divmod(i, m)\n        matrix[x][y] = sequence[i]\n    for i in range(n):\n        for j in range(m):\n            print(matrix[i][j], end=' ')\n        print()\n    print(n, m)\n    print(0, 0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2156,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    b=list(map(int,input().split()))\n    c=int(input())\n    d=[]\n    for i in range(c):\n        e,f=map(int,input().split())\n        d.append((e,f))\n    return d\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2157,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q=map(int,input().split())\n    arr=list(map(int,input().split())\n    queries=[]\n    for i in range(q):\n        queries.append(list(map(int,input().split()))\n    queries.sort(key=lambda x:x[1]-x[0])\n    max_sum=0\n    for i in range(q):\n        l,r=queries[i]\n        max_sum+=sum(arr[l-1:r])\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2158,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    edges = []\n    for i in range(n-1):\n        u, v, c = map(int, input().split())\n        edges.append((u, v, c))\n    edges.sort(key=lambda x: x[2])\n    #print(edges)\n    visited = [False] * n\n    max_cost = 0\n    def dfs(node, cost, visited):\n        visited[node] = True\n        for neighbor, cost in graph[node]:\n            if not visited[neighbor]:\n                max_cost = max(max_cost, cost)\n                dfs(neighbor, cost, visited)\n    graph = [[] for _ in range(n)]\n    for u, v, c in edges:\n        graph[u].append((v, c) if u < v else (v-1, c))\n        graph[v].append((u, c) if u > v else (u-1, c))\n    dfs(0, 0, visited)\n    return max_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2159,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    t = list(map(int, input().split()))\n    count = [0] * n\n    for i in range(n):\n        for j in range(i, n):\n            count[t[i]-1] += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2160,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    x=list(map(int,input().split())\n    #print(n,k)\n    #print(x)\n    #print(len(x))\n    #print(x)\n    #print(x[0])\n    #print(x[k-1])\n    #print(x[0:k])\n    #print(x[k-1])\n    #print(x[0:k-1])\n    #print(x[1:k])\n    #print(x[1:k-1])\n    #print(x[1:k])\n    #print(x[1:k-1])\n    #print(x[2:k])\n    #print(x[2:k-1])\n    #print(x[2:k-1])\n    #print(x[3:k])\n    #print(x[3:k-1])\n    #print(x[3:k-1])\n    #print(x[4:k])\n    #print(x[4:k-1])\n    #print(x[4:k-1])\n    #print(x[5:k])\n    #print(x[5:k-1])\n    #print(x[5:k-1])\n    #print(x[6:k])\n    #print(x[6:k-1])\n    #print(x[6:k-1])\n    #print(x[7:k])\n    #print(x[7:k-1])\n    #print(x[7:k-1])\n    #print(x[8:k])\n    #print(x[8:k-1])\n    #print(x[8:k-1])\n    #print(x[9:k])\n    #print(x[9:k-1])\n    #print(x[9:k-1])\n    #print(x[10:k])\n    #print(x[10:k-1])\n    #print(x[10:k-1])\n    #print(x[11:k])\n    #print(x[11:k-1])\n    #",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2161,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    phone_books = {}\n    for i in range(n):\n        name, num_of_phones, *phones = input().split()\n        phones = set(phones)\n        if name in phone_books:\n            phone_books[name].update(phones)\n        else:\n            phone_books[name] = set(phones)\n    result = []\n    for name, phones in phone_books.items():\n        result.append(f\"{name} {len(phones)} {' '.join(sorted(phones))}\")\n    result.sort()\n    print(len(result))\n    for line in result:\n        print(line)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2162,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k1, k2, k3 = map(int, input().split())\n    a1 = list(map(int, input().split()))\n    a2 = list(map(int, input().split())[:k2])\n    a3 = list(map(int, input().split())[:k3])\n    n = k1 + k2 + k3\n    a1.sort()\n    a2.sort()\n    a3.sort()\n    a = a1 + a2 + a3\n    a.sort()\n    i, j, k = 0, 0, 0\n    moves = 0\n    while i < k1 and j < k2 and k < k3:\n        if a[i] == a1[i]:\n            i += 1\n        elif a[j] == a2[j]:\n            j += 1\n        elif a[k] == a3[k]:\n            k += 1\n        else:\n            moves += 1\n            if i < k1:\n                i += 1\n            elif j < k2:\n                j += 1\n            else:\n                k += 1\n    return moves\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2163,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    mod=10**9+7\n    def count_subseq(n,m):\n        if n==0:\n            return 1\n        if n==1:\n            return m\n        if n==2:\n            return (m+1)*m\n        if n==3:\n            return (m+1)*m*(m+1)//2\n        if n==4:\n            return (m+1)*m*(m+1)*(m+2)//6\n        if n==5:\n            return (m+1)*m*(m+1)*(m+2)*(m+3)//24\n        if n==6:\n            return (m+1)*m*(m+1)*(m+2)*(m+3)*(m+4)//48\n        if n==7:\n            return (m+1)*m*(m+1)*(m+2)*(m+3)*(m+4)*(m+5)//120\n        if n==8:\n            return (m+1)*m*(m+1)*(m+2)*(m+3)*(m+4)*(m+5)*(m+6)//960\n        if n==9:\n            return (m+1)*m*(m+1)*(m+2)*(m+3)*(m+4)*(m+5)*(m+6)*(m+7)//5040\n        if n==10:\n            return (m+1)*m*(m+1)*(m+2)*(m+3)*(m+4)*(m+5)*(m+6)*(m+7)*(m+8)//40320\n        if n==11:\n            return (m+1)*m*(m+1)*(m+2)*(m+3)*(m+4)*(m+5)*(m+6)*(m+7)*(m+8)*(m+9)//362880\n        if n==12:\n            return (m+1)*m*(m+1)*(m+2)*(m+3)*(m+4)*(m+5)*(m+6",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2164,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if len(s) == 1:\n        return s\n    else:\n        return \"a\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2165,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    n,T=R()\n    a,t=R(),R()\n    s=sum(a)\n    if s==0:\n        return 0\n    else:\n        return T/s\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2166,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = list(map(int, input().split()))\n    n = len(t)\n    count = 0\n    for i in range(n):\n        if t[i] == -1:\n            count += 1\n    if count == 0:\n        return 0\n    elif count == 1:\n        return 1\n    else:\n        return 2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2167,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_count = 0\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2168,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\ta=list(map(int,input().split()))\n    n=ta[0]\n    salaries=[[0]*ta[i] for i in range(n)]\n    for i in range(n):\n        salaries[i]=list(map(int,input().split()))\n    salaries.sort(key=lambda x:max(x))\n    total_salaries=sum(salaries[0])+sum(salaries[1])\n    max_salary=max(salaries[0][-1],salaries[1][-1])\n    for i in range(2,n):\n        if salaries[i][-1]>max_salary:\n            max_salary=salaries[i][-1]\n        else:\n            break\n    for i in range(n):\n        for j in range(len(salaries[i])):\n            salaries[i][j]+=max_salary-salaries[i][-1]\n    total_salaries+=sum(salaries[i])\n    return total_salaries\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2169,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,w,d=map(int,input().split())\n    grid=[]\n    for i in range(h):\n        grid.append(list(map(int,input().split()))\n    q=int(input())\n    for i in range(q):\n        l,r=map(int,input().split())\n        x=l\n        total=0\n        while x!=r:\n            x+=d\n            total+=abs(x-l)\n        print(total)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2170,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    count=0\n    for i in range(1,m+1):\n        for j in range(1,m+1):\n            if i!=j:\n                count+=1\n    print(count%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2171,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    if N==0:\n        return \"yes\"\n    elif N==1:\n        return \"yes\"\n    elif N==2:\n        return \"no\"\n    else:\n        if N%2==0:\n            return \"no\"\n        else:\n            return \"yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2172,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    words = [input().split() for _ in range(m)]\n    lecture = input().split()\n    for word in lecture:\n        for i in range(m):\n            if word in words[i]:\n                print(words[i][0], end=' ')\n                break\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2173,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    total_rating = sum(a)\n    for i in range(n):\n        b[i] = a[i]\n    return b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2174,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    b=list(map(int,input().split()))\n    b.sort()\n    count=0\n    for i in range(a):\n        if b[i]==i+1:\n            continue\n        else:\n            if b[i]>i+1:\n                count+=b[i]-i-1\n            else:\n                count+=(i+1)-b[i]\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2175,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = int(input())\n    queries = []\n    for _ in range(m):\n        queries.append(input().split())\n    for query in queries:\n        if query[0] == '1':\n            p, x = map(int, query[1:])\n            a[p-1] += x\n            for i in range(p-1, -1, -1):\n                if a[i] > a[i+1]:\n                    a[i+1] += a[i] - a[i+1]\n                    a[i] = a[i+1] - a[i+1]\n        else:\n            k = int(query[1])\n            print(a[k-1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2176,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        s.append((a, b))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2177,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = map(int, input().split())\n    count = 0\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            if len(str(i)) + len(str(j)) == len(str(i*j + i + j):\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2178,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    stack=a.copy()\n    result=[]\n    for i in b:\n        if i in stack:\n            result.append(stack.index(i)+1)\n            stack=stack[:stack.index(i)]\n        else:\n            result.append(0)\n    print(*result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2179,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    edges = []\n    for _ in range(m):\n        u, v, w = map(int, input().split())\n        edges.append((u-1, v-1, w))\n    u = int(input())\n    u -= 1\n    edges.sort(key=lambda x: x[2])\n    visited = [False] * n\n    visited[u] = True\n    min_weight = 0\n    tree_edges = []\n    for i in range(m):\n        if not visited[edges[i][0]] or not visited[edges[i][1]]:\n            visited[edges[i][0]] = True\n            visited[edges[i][1]] = True\n            min_weight += edges[i][2]\n            tree_edges.append(i+1)\n    print(min_weight)\n    print(*tree_edges)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2180,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    max_coders = 0\n    for i in range(n):\n        row = input()\n        if 'C' in row:\n            max_coders += 1\n    print(max_coders)\n    for i in range(n):\n        print(row)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2181,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, d = list(map(float, input().split()))\n    n = int(input())\n    for i in range(n):\n        x = a * i * d\n        y = 0 if i % 2 == 0 else a\n        print(\"{:.6f} {:.6f}\".format(x, y))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2182,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        y = input()\n        if int(y) % 60 == 0:\n            print(\"red\")\n        else:\n            print(\"cyan\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2184,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        input_string = input()\n        # Your code here\n        pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2185,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(n):\n        if a[i] != b[i]:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2186,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    memory=[]\n    for i in range(n):\n        memory.append(input())\n    for i in range(m):\n        s=input()\n        flag=False\n        for j in memory:\n            if len(s)==len(j) and sum(1 for i,j in zip(s,j) if i!=j)==1:\n                flag=True\n                break\n        print(\"YES\" if flag else \"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2187,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        n = int(input())\n        a = list(map(int, input().split()))\n        count = 0\n        for j in range(1, n):\n            if a[j] <= a[j-1]:\n                count += 1\n                a[j] += 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2188,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    pairs=[]\n    for i in range(n):\n        pairs.append(list(map(int,input().split()))\n    pairs.sort()\n    i=0\n    j=n-1\n    k=0\n    while i<n and j>=0:\n        if pairs[i][0]<pairs[j][1]:\n            print(pairs[i][0],pairs[j][1],end=\" \")\n            i+=1\n            j-=1\n        else:\n            print(pairs[j][1],pairs[i][0],end=\" \")\n            i+=1\n            j-=1\n        k+=1\n    while i<n:\n        print(pairs[i][1],pairs[i][0],end=\" \")\n        i+=1\n        k+=1\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2189,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, input().split()))\n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2190,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]*a[j]%k==0:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2191,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    count1=0\n    count2=0\n    for i in range(n):\n        if s[i]=='0':\n            count1+=1\n        elif s[i]=='1':\n            count2+=1\n        if s[i]!='?':\n            count=max(count,count1,count2)\n            count1=0\n            count2=0\n        if i==n-1:\n            count=max(count,count1,count2)\n        print(count,end=' ')\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2192,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    W=[[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        W[i]=list(map(int,input().split()))\n    A=[[0 for i in range(n)] for j in range(n)]\n    B=[[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(n):\n            A[i][j]=W[i][j]\n            B[i][j]=-W[i][j]\n    for i in range(n):\n        for j in range(n):\n            print(\"{:.5f} {:.5f}\".format(A[i][j],B[i][j]))\n    for i in range(n):\n        for j in range(n):\n            print(\"{:.5f} {:.5f}\".format(A[i][j],B[i][j]))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2193,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split());back = [[] for i in range(n)]\n    for i in range(m):\n        u, v, t = map(int, input().split())\n        back[u-1].append((v-1, t))\n    # create a graph\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        u, v, t = map(int, input().split())\n        graph[u-1].append((v-1, t))\n    # find the shortest path\n    # initialize the distance array\n    dist = [float('inf')]*n\n    dist[0] = 0\n    # initialize the color array\n    color = [0]*n\n    color[0] = 1\n    # initialize the queue\n    queue = [(0, 0)]\n    while queue:\n        d, u = queue.pop(0)\n        for v, t in back[u]:\n            if dist[u] + t < dist[v]:\n                dist[v] = dist[u] + t\n                color[v] = 1 - color[u]\n                queue.append((d+1, v))\n    # check if there's a path from 1 to n\n    if dist[n-1] == float('inf'):\n        return -1\n    else:\n        return dist[n-1], ''.join(map(str, color))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2194,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q=map(int,input().split())\n    a=list(map(int,input().split()))\n    for i in range(q):\n        query=input().split()\n        if query[0]=='1':\n            x,k=map(int,query[1:])\n            a[x-1]=k\n        elif query[0]=='2':\n            k=int(query[1])\n            for i in range(1,n+1):\n                a[i*2**k:i*2**k+2**k]=a[i*2**k:i*2**k+2**k][::-1]\n        elif query[0]=='3':\n            k=int(query[1])\n            a[2*k-2*2**k:2*k+1]=a[2*k-2*2**k:2*k+1][::-1]\n            a[2*k-2**k:2*k+1]=a[2*k-2**k:2*k+1][::-1]\n        else:\n            l,r=map(int,query[1:])\n            print(sum(a[l-1:r]))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2195,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        x, y = map(int, input().split())\n        a, b = map(int, input().split())\n        if x == y:\n            print(0)\n        else:\n            min_cost = float('inf')\n            for j in range(1, 10000000000000):\n                if abs(x - y) <= j:\n                    min_cost = min(min_cost, j * a + abs(x - y) * b)\n            print(min_cost)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2196,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    v=2**n-1\n    count=0\n    for i in range(n):\n        count+=2**a[i]\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2197,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x=map(int,input().split())\n    probs=list(map(float,input().split())\n    p=[]\n    for i in range(x+1):\n        p.append(probs[i])\n    p=p[1:]\n    p=[p[i]/sum(p) for i in range(x)]\n    def nim_game(p):\n        if sum(p)==0:\n            return 0\n        else:\n            return 1-p[0]\n    return nim_game(p)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2198,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = list(map(int,input().split()))\n    s = input()\n    for i in range(m):\n        x,c = list(map(int,input().split()))\n        s = list(s)\n        s[x-1] = c\n        s = ''.join(s)\n        while '..' in s:\n            s = s.replace('..','.',1)\n        print(len(s))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2199,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q=int(input())\n    s=[]\n    for i in range(q):\n        if i==0:\n            x=int(input())\n            s.append(x)\n        else:\n            query=int(input())\n            if query==1:\n                x=int(input())\n                s.append(x)\n            else:\n                max_s=max(s)\n                mean_s=sum(s)/len(s)\n                ans=max_s-mean_s\n                print(ans)\n                s.remove(max_s)\n                s.append(x)\n                max_s=max(s)\n                mean_s=sum(s)/len(s)\n                ans=max_s-mean_s\n                print(ans)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2200,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda:map(int, input().split())\n    n, a, b = R()\n    x = R()\n    ans = []\n    for i in range(n):\n        ans.append(x[i] - (x[i]//b))\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2201,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    destination, max_gas_tank_volume, gas_prices_number = list(map(int, input().split()))\n    gas_prices = []\n    for _ in range(gas_prices_number):\n        position, price = list(map(int, input().split()))\n        gas_prices.append((position, price))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2202,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, p = map(int, input().split())\n    A = list(map(int, input().split())\n    # Your code here\n    # return the encryption code S\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2203,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,q=map(int,input().split())\n    questions=[]\n    for i in range(q):\n        questions.append(list(map(int,input().split()))\n    # your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2204,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, m = map(int, input().split())\n        a = []\n        b = []\n        for j in range(m):\n            a.append(int(input()))\n            b.append(int(input()))\n        max_happiness = 0\n        for j in range(1, n+1):\n            for comb in itertools.combinations(range(m), j):\n                happiness = sum(a[i] + (j-1)*b[i] for i in comb)\n                max_happiness = max(max_happiness, happiness)\n        print(max_happiness)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2205,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a=int(input()),list(map(int,input().split()))\n    q=0\n    for i in range(n):\n        q^=a[i]^i%1^i%2\n    return q\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2206,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    adj_matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        adj_matrix[i] = list(map(int, input().split()))\n    # print(adj_matrix)\n    def dfs(visited, curr, graph, res):\n        if visited[curr]:\n            return\n        visited[curr] = True\n        for i in range(n):\n            if not visited[i] and graph[curr][i]:\n                dfs(visited, i, graph, res)\n        res[0] += 1\n    res = [0]\n    for i in range(n):\n        visited = [False] * n\n        dfs(visited, i, adj_matrix, res)\n    return res[0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2207,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r, c = input().split()\n    r, c = int(r), int(c)\n    wall = [list(input()) for _ in range(r)]\n    segments = 0\n    for i in range(c):\n        if wall[0][i] == 'B':\n            segments += 1\n            for j in range(1, r):\n                if wall[j][i] == 'B':\n                    break\n            else:\n                segments += 1\n    return segments\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2208,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    length = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    count = 0\n    for i in range(length):\n        for j in range(i, length):\n            if max(a[i:j+1]) == min(b[i:j+1]):\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2209,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    strings=[]\n    for i in range(n):\n        strings.append(input())\n    max_noise=0\n    for i in range(n):\n        for j in range(i+1,n):\n            noise=strings[i].count('s')*strings[j].count('h')\n            max_noise=max(max_noise,noise)\n    return max_noise\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2210,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = map(int,input().split())\n    adj_list = [[] for _ in range(n+1)]\n    for i in range(n-1):\n        u,v = map(int,input().split())\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    if x in adj_list[1]:\n        adj_list[1].remove(x)\n    else:\n        adj_list[x].remove(1)\n    if len(adj_list[1]) == 1:\n        return \"Ayush\"\n    else:\n        return \"Ashish\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2211,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = int(input())\n    rules = []\n    for i in range(n):\n        rules.append(input().split())\n    rules = [(rule[0], int(rule[1]), int(rule[2])) for rule in rules]\n    good_substrings = set()\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            for rule in rules:\n                if substring.count(rule[0]) >= rule[1] and substring.count(rule[0]) <= rule[2]:\n                    good_substrings.add(substring)\n    return len(good_substrings)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2212,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    matrix=[]\n    for i in range(n):\n        row=[]\n        for j in range(n):\n            if i==j:\n                row.append(i+1)\n            elif i+j==n-1:\n                row.append(n*n-i)\n            else:\n                row.append(n*n-i-j)\n        matrix.append(row)\n    for row in matrix:\n        print(\" \".join(str(x) for x in row))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2213,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k = map(int, input().split())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split()[:m]))\n    # Your code goes here\n    return ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2214,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2215,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    l=[]\n    for i in range(m):\n        l.append(list(map(int,input().split()))\n    #print(l)\n    #print(n,m)\n    #print(l)\n    #print(len(l))\n    #print(len(l[0]))\n    #print(l[0][0],l[0][1])\n    #print(l[1][0],l[1][1])\n    #print(l[2][0],l[2][1])\n    #print(l[0][0]-1,l[0][1]-1)\n    #print(l[1][0]-1,l[1][1]-1)\n    #print(l[2][0]-1,l[2][1]-1)\n    #print(l[0][0]-1,l[0][1]-1)\n    #print(l[1][0]-1,l[1][1]-1)\n    #print(l[2][0]-1,l[2][1]-1)\n    #print(l[0][0]-1,l[0][1]-1)\n    #print(l[1][0]-1,l[1][1]-1)\n    #print(l[2][0]-1,l[2][1]-1)\n    #print(l[0][0]-1,l[0][1]-1)\n    #print(l[1][0]-1,l[1][1]-1)\n    #print(l[2][0]-1,l[2][1]-1)\n    #print(l[0][0]-1,l[0][1]-1)\n    #print(l[1][0]-1,l[1][1]-1)\n    #print(l[2][0]-1,l[2][1]-1)\n    #print(l[0][0]-1,l[0][1]-1)\n    #print(l[1][0]-1,l[1][1]-1",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2216,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    result = []\n    for i in range(k):\n        r = 2 * i + 2\n        x = i + 1\n        y = 1\n        result.append(r)\n        for j in range(r):\n            result.append(x)\n            result.append(y)\n            y += 1\n            if j % 2 == 0:\n                x += 1\n            else:\n                x -= 1\n    for i in range(k):\n        print(result[i * 2 * r], result[i * 2 * r + 1], *result[i * 2 * r + 2:i * 2 * r + 2 * r + 1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2217,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    D=int(input())\n    q=int(input())\n    mod=10**9+7\n    def sieve(n):\n        prime=[True]*(n+1\n    prime[0]=prime[1]=False\n    for i in range(2,int(n**0.5)+1):\n        if prime[i]:\n            for j in range(i*i,n+1,i):\n                prime[j]=False\n    return prime\n    def prime_divisors(n):\n        divisors=[]\n        for i in range(1,int(n**0.5)+1):\n            if prime[i] and n%i==0:\n                divisors.append(i)\n                if i!=n//i:\n                    divisors.append(n//i)\n        return divisors\n    def count_divisors(n):\n        return len(prime_divisors(n))\n    def count_prime_divisors(n):\n        count=0\n        for i in range(2,int(n**0.5)+1):\n            if prime[i] and n%i==0:\n                count+=1\n        return count\n    def count_non_prime_divisors(x,y):\n        count=0\n        for i in prime_divisors(x):\n            if i!=y:\n                count+=1\n        return count\n    def build_graph(D):\n        graph=[]\n        for i in range(1,D+1):\n            graph.append([])\n            for j in range(1,D+1):\n                if i!=j and i%j==0:\n                    graph[i].append((j,count_non_prime_divisors(i,j))\n        return graph\n    def shortest_path(graph,v,u):\n        visited=[False]*(D+1)\n        queue=[]\n        queue.append((v,0)\n        while queue:\n            node,dist=queue.pop(0)\n            if node==u:\n                return dist\n            for neighbor,weight in graph[node]:\n                if not visited[neighbor]:\n                    visited[neighbor]=True\n                    queue.",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2218,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    result = []\n    for i in range(k):\n        result.append(n)\n        for j in range(n):\n            result[i] -= 1\n            if result[i] == 0:\n                break\n        result[i] = str(result[i]) + \" \" + \" \".join(map(str, a[:result[i]]) + [a[result[i]])]\n        a = a[result[i]:]\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2219,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        count = 0\n        while n > 0:\n            if n % k == 0:\n                n //= k\n                count += n\n            else:\n                n -= 1\n                count += 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2220,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    a=list(map(int,input().split())\n    dp=[[0]*(k+1 for _ in range(m+1)]\n    for _ in range(n+1)\n    dp[0][0]=0\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            if j>=k:\n                dp[i][j]=max(dp[i-1][j],dp[i-1][j-1]+a[i-1])\n            else:\n                dp[i][j]=max(dp[i-1][j],dp[i-1][j-1]+a[i-1])\n            for l in range(1,k+1):\n                dp[i][j]=max(dp[i][j],dp[i-1][j-l]+a[i-1])\n    return max(dp[n])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2221,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x1,y1=list(map(int,input().split()))\n    x2,y2=list(map(int,input().split()))\n    n=int(input())\n    s=input()\n    if x1==x2 and y1==y2:\n        return -1\n    x,y=x1,y1\n    days=0\n    for i in range(n):\n        if s[i]=='U':\n            y+=1\n        elif s[i]=='D':\n            y-=1\n        elif s[i]=='L':\n            x-=1\n        elif s[i]=='R':\n            x+=1\n        days+=abs(x-x2)+abs(y-y2)\n    return days\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2222,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    operations = list(map(int, input().split()))\n    parents = list(map(int, input().split()))\n    # create the tree\n    tree = [[] for _ in range(n+1)]\n    for i in range(1, n):\n        tree[parents[i]].append(i)\n    # initialize the numbers\n    numbers = [0] * (n+1)\n    # calculate the numbers\n    for i in range(1, n):\n        if operations[i] == 0:\n            numbers[i] = max(numbers[j] for j in tree[i])\n        else:\n            numbers[i] = min(numbers[j] for j in tree[i])\n    # calculate the root\n    root = max(numbers[1:])\n    return root\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2223,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    edges=[]\n    for i in range(n-1):\n        edges.append(list(map(int,input().split()))\n    # Your code here\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2224,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=list(map(int,input().split()))\n    paths=[]\n    for i in range(n-1):\n        a,b=list(map(int,input().split()))\n        paths.append((a,b))\n    #print(paths)\n    graph=[[0]*n for i in range(n)]\n    for i in range(n-1):\n        graph[paths[i][0]-1][paths[i][1]-1]=1\n        graph[paths[i][1]-1][paths[i][0]-1]=1\n    #print(graph)\n    def dfs(v,visited,dist,depth):\n        if depth==k:\n            return visited[v]\n        for i in range(n):\n            if graph[v][i] and not visited[i]:\n                visited[i]=True\n                dfs(i,visited,dist+1)\n        return visited[v]\n    count=0\n    for i in range(n):\n        visited=[False]*n\n        if dfs(i,visited,0):\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2225,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    for i in range(m):\n        p, b = list(map(int, input().split()))\n        a[p-1] = b\n        for j in range(1, n):\n            a[j] = a[j-1] | a[j]\n        for j in range(1, n-1):\n            a[j] = a[j] ^ a[j+1]\n        print(a[-1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2226,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,q=map(int,input().split());mod,mxw = 1000000007,0;wgts,neig=[0]*n,[0]*n\n    for i in range(m):\n        v,u,w=map(int,input().split())\n        wgts[v-1]+=w\n        neig[v-1].append(u-1)\n        neig[u-1].append(v-1)\n    def dfs(v,p,w):\n        if v==0:return w\n        if w>mxw:mxw=w\n        for u in neig[v]:\n            if u!=p:\n                dfs(u,v,w+wgts[v])\n    dfs(0,-1,0)\n    return mxw\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2227,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    for w in input().split(\\\"heavy\\\"):r+=w.count(\\\"metal\\\")*z;z+=1\n    print(r)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2228,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    years = []\n    for i in range(n):\n        b, d = map(int, input().split())\n        years.append((b, d))\n    years.sort(key=lambda x: x[1])\n    max_year = 0\n    max_count = 0\n    current_count = 0\n    for i in range(n):\n        if years[i][1] > max_year:\n            max_year = years[i][1]\n            current_count = 1\n        elif years[i][1] == max_year:\n            current_count += 1\n        if current_count > max_count:\n            max_count = current_count\n    print(max_year, current_count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2229,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    for i in range(n):\n        b.append(a[i] + 1)\n    while not is_pairwise_coprime(b):\n        b = increment_array(b)\n    return ' '.join(map(str, b))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2230,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    bags = []\n    for i in range(1, n+1):\n        bags.append(i)\n    for i in range(n, n**2+1):\n        bags.append(i)\n    for i in range(n):\n        print(bags[i], bags[i+n])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2231,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        sticks = list(map(int, input().split()))\n        perimeter = 0\n        area = 0\n        for j in range(n):\n            perimeter += sticks[j]\n        perimeter -= 2\n        area = perimeter * perimeter\n        print(2, 7, 2)\n        print(2, 2, 1, 1)\n        print(5, 5, 5, 5)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2232,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    edges=[]\n    for i in range(n-1):\n        edges.append(list(map(int,input().split()))\n    # Your code goes here\n    return 0,0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2233,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    t = input()\n    if s == t:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2234,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,k=map(int,input().split())\n        if n==0:\n            print(0)\n        else:\n            if k%2==0:\n                print(k//2)\n            else:\n                print(k//2+1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2235,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    trips=list(map(int,input().split()))\n    total_cost=0\n    min_cost=0\n    for i in range(n):\n        if i==0:\n            min_cost=20\n            total_cost+=min_cost\n        else:\n            if trips[i]-trips[i-1]<=90:\n                min_cost+=20\n            else:\n                min_cost+=50\n            total_cost+=min_cost\n        print(total_cost)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2236,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, = map(int, input().split())\n    a = list(map(int, input().split())\n    # print(n, a)\n    # print(a)\n    min_ops = 0\n    for i in range(n):\n        if a[i] != 0:\n            min_ops += 1\n            a[i] = abs(a[i])\n    # print(a)\n    for i in range(1, n):\n        if a[i] != 0:\n            if a[i-1] > a[i]:\n                min_ops += 1\n                a[i] = abs(a[i])\n            else:\n                min_ops += a[i] // a[i-1]\n                a[i] = 0\n    # print(a)\n    for i in range(n-2, -1, -1):\n        if a[i] != 0:\n            if a[i+1] > a[i]:\n                min_ops += 1\n                a[i] = abs(a[i])\n            else:\n                min_ops += a[i] // a[i+1]\n                a[i] = 0\n    print(min_ops)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2237,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    S=list(map(int,input().split()))\n    x=0\n    while(2**x<=max(S)):\n        x+=1\n    if x==0:\n        print(0)\n        print(0)\n        return\n    else:\n        M=[]\n        for i in range(2**x):\n            M.append(i)\n        for i in range(1,2**x):\n            for j in range(i+1,2**x):\n                if (i^j) not in S:\n                    M.remove(j)\n        print(x)\n        print(*M)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2238,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    for i in range(n):\n        if i<n//2:\n            print(\"*\"*(n-1)+\"D\"+\"*\"*(n-1) if i<n//2 else \"D\"+\"*\"*(n-1))\n        else:\n            print(\"*\"*(n-1)+\"D\"+\"*\"*(n-1) if i<n-1 else \"D\"+\"*\"*(n-1))\n    for i in range(n-2,0,-1):\n        if i<n//2:\n            print(\"*\"*(n-1)+\"D\"+\"*\"*(n-1) if i<n//2 else \"D\"+\"*\"*(n-1))\n        else:\n            print(\"*\"*(n-1)+\"D\"+\"*\"*(n-1) if i<n-1 else \"D\"+\"*\"*(n-1))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2239,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        x=int(input())\n        count=0\n        for j in range(2,8):\n            if x%j==0:\n                count+=1\n        if count==0:\n            print(1)\n        else:\n            print(x//count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2240,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=list(input())\n    t=list(input())\n    count=0\n    for i in range(len(s)):\n        if s[i]=='0':\n            s[i]='a'\n            t[i]='k'\n            count+=1\n        elif s[i]=='1':\n            s[i]='a'\n            t[i]='t'\n            count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2241,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = input(), map(int, input().split()), map(int, input().split())\n    max_joy = 0\n    for i in range(n):\n        for x in range(1, a[i] + 1):\n            for y in range(1, b[i] + 1):\n                if x + y == b[i]:\n                    max_joy += x * y\n    return max_joy\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2242,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S=input()\n    count=0\n    for i in range(1,len(S)+1):\n        for j in range(i,len(S)+1):\n            if int(S[i-1:j])%2019==0:\n                count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2243,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, qs = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    t.sort(reverse=True)\n    online = []\n    for i in range(qs):\n        query = list(map(int, input().split()))\n        if query[0] == 1:\n            online.append(query[1])\n            online.sort(reverse=True)\n            online = online[:k]\n        else:\n            if query[1] in online:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2244,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    debt_relations = []\n    for i in range(m):\n        debt_relations.append(list(map(int,input().split()))\n    #print(debt_relations)\n    #print(n,m)\n    #print(debt_relations)\n    #print(len(debt_relations))\n    #print(len(debt_relations[0]))\n    #print(debt_relations[0][0])\n    #print(debt_relations[0][1])\n    #print(debt_relations[1][0])\n    #print(debt_relations[1][1])\n    #print(debt_relations[2][0])\n    #print(debt_relations[2][1])\n    #print(debt_relations[2][2])\n    #print(debt_relations[3][0])\n    #print(debt_relations[3][1])\n    #print(debt_relations[3][2])\n    #print(debt_relations[4][0])\n    #print(debt_relations[4][1])\n    #print(debt_relations[4][2])\n    #print(debt_relations[5][0])\n    #print(debt_relations[5][1])\n    #print(debt_relations[5][2])\n    #print(debt_relations[6][0])\n    #print(debt_relations[6][1])\n    #print(debt_relations[6][2])\n    #print(debt_relations[7][0])\n    #print(debt_relations[7][1])\n    #print(debt_relations[7][2])\n    #print(debt_relations[8][0])\n    #print(debt_relations[8][1])\n    #print(debt_relations[8][2])\n    #print(debt_relations[9][0])\n    #print(debt_relations[9][1])\n    #print(debt_relations[9",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2245,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        if n % (k+1) == 0:\n            print(\"Alice\")\n        else:\n            print(\"Bob\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2246,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    roads = [list(map(int, input().split())) for _ in range(n-1)]\n    # create a graph\n    graph = [[] for _ in range(n+1)]\n    for u, v in roads:\n        graph[u].append(v)\n        graph[v].append(u)\n    # initialize the distance array\n    distance = [0] * (n+1)\n    # initialize the visited array\n    visited = [False] * (n+1)\n    # initialize the queue\n    queue = [(1, 1)]\n    # initialize the distance to the first city\n    distance[1] = 1\n    visited[1] = True\n    # initialize the expected length\n    expected_length = 1\n    # BFS\n    while queue:\n        city, dist = queue.pop(0)\n        for neighbor in graph[city]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                distance[neighbor] = dist + 1\n                queue.append((neighbor, dist+1))\n                expected_length += dist + 1\n    return expected_length / n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2247,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        s, a, b, c = map(int, input().split())\n        max_chocolate = (s - c) // (a + b)\n        print(max_chocolate * a + b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2248,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, m = f()\n    adj_list = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = f()\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    max_dist = 0\n    for i in range(1, n+1):\n        visited = [False] * (n+1)\n        dist = [-1] * (n+1)\n        dist[i] = 0\n        queue = [i]\n        while queue:\n            u = queue.pop(0)\n            visited[u] = True\n            for v in adj_list[u]:\n                if not visited[v]:\n                    dist[v] = min(dist[v], dist[u] + 1)\n                    queue.append(v)\n        max_dist = max(max_dist, max(dist))\n    return max_dist\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2249,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    numbers=list(map(int,input().split()))\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if numbers[i]!=numbers[j]:\n                count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2250,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(n):\n        if s[i] == s[(i+1)%n]:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2251,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int,input().split()))\n    edges = []\n    for i in range(m):\n        a, b, c = list(map(int,input().split()))\n        edges.append([a, b, c])\n    q = int(input())\n    for i in range(q):\n        u, v = list(map(int,input().split()))\n        count = 0\n        for edge in edges:\n            if u in edge or v in edge:\n                count += 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2252,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    P = list(map(int, input().split())\n    for i in range(m):\n        l, r, x = map(int, input().split())\n        P[l-1:r] = sorted(P[l-1:r])\n        if P[x-1] == x:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2253,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    if s.endswith(\"po\"):\n        return \"FILIPINO\"\n    elif s.endswith(\"desu\") or s.endswith(\"masu\"):\n        return \"JAPANESE\"\n    elif s.endswith(\"mnida\"):\n        return \"KOREAN\"\n    else:\n        return \"ERROR\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2254,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i, N):\n            if sum(bin(a ^ b for a, b in zip(A[i:j+1])) == '0b0':\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2255,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split()) for _ in range(m)]\n    # Your code here\n    return \" \".join(map(str, sorted(edges))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2256,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn, x, a, b = map(int, input().split())\n    n = 100\n    x = 100\n    a = 3\n    b = 10\n    # Write your code here\n    if a == b:\n        return 0\n    if a > b:\n        a, b = b, a\n    if a == 1:\n        return n - b\n    if b == n:\n        return 1\n    if x == 0:\n        return abs(a - b)\n    if x == 1:\n        return n - 1\n    if x == 2:\n        return 1\n    if x == 3:\n        return 2\n    if x == 4:\n        return 3\n    if x == 5:\n        return 4\n    if x == 6:\n        return 5\n    if x == 7:\n        return 6\n    if x == 8:\n        return 7\n    if x == 9:\n        return 8\n    if x == 10:\n        return 9\n    if x == 11:\n        return 10\n    if x == 12:\n        return 11\n    if x == 13:\n        return 12\n    if x == 14:\n        return 13\n    if x == 15:\n        return 14\n    if x == 16:\n        return 15\n    if x == 17:\n        return 16\n    if x == 18:\n        return 17\n    if x == 19:\n        return 18\n    if x == 20:\n        return 19\n    if x == 21:\n        return 20\n    if x == 22:\n        return 21\n    if x == 23:\n        return 22\n    if x == 24:\n        return 23\n    if x == 25:\n        return 24\n    if x == 26:\n        return 25\n    if x == 27:\n        return 26\n    if x == 28:\n        return 27\n    if x",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2257,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x,y,x1,y1=map(int,input().split())\n    flowers=[]\n    for i in range(n):\n        flowers.append(list(map(int,input().split()))\n    flowers.sort(key=lambda x: (x[0]**2+x[1]**2)**0.5)\n    r1=0\n    r2=0\n    for i in range(n):\n        if flowers[i][0]**2+flowers[i][1]**2<=r1**2:\n            r2=max(r2,flowers[i][0]-x1,flowers[i][1]-y1)\n        else:\n            r1=max(r1,flowers[i][0]-x2,flowers[i][1]-y2)\n    return r1**2+r2**2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2258,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pairs = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                pairs.append((i+1, j+1))\n    if len(pairs) == 0:\n        print(-1)\n    else:\n        print(len(pairs))\n        for pair in pairs:\n            print(pair[0], pair[1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2259,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s, n = [0], input()\n    for i in range(n):\n        s.append(int(input()))\n    s.sort()\n    G = [[] for _ in range(n)]\n    for i in range(n-1):\n        G[s[i]].append(s[i+1])\n        G[s[i+1]].append(s[i])\n    return len(G)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2260,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    result = 5 ** n\n    return str(result)[-2:]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2261,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k = int(input())\n    result = []\n    for i in range(2**k):\n        row = []\n        for j in range(2**k):\n            if (i & (1 << j) != 0) and (i & (1 << (k-j-1) != 0):\n                row.append('+')\n            else:\n                row.append('*')\n        result.append(''.join(row))\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2262,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    words = input().split()\n    roots = set()\n    for word in words:\n        root = \"\"\n        for char in word:\n            if char not in root:\n                root += char\n        roots.add(root)\n    return len(roots)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2263,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    roads = [list(map(int, input().split())) for _ in range(n - 1)]\n    q = int(input())\n    changes = [list(map(int, input().split())) for _ in range(q)]\n    d = [0] * n\n    for a, b, l in roads:\n        d[a - 1] += l\n        d[b - 1] += l\n    for r, w in changes:\n        d[r - 1] -= w\n    result = [d[0] + d[1] + d[2]]\n    for i in range(q):\n        result.append(d[0] + d[1] + d[2])\n        d[changes[i][0] - 1] -= changes[i][1]\n        d[changes[i][1] - 1] -= changes[i][1]\n        d[changes[i][2] - 1] -= changes[i][1]\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2264,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        l=[]\n        r=[]\n        for j in range(n):\n            l.append(int(input()))\n            r.append(int(input()))\n        min_length=float('inf')\n        for k in range(n):\n            for l1 in range(min(l),max(r)+1):\n                for l2 in range(min(l),max(r)+1):\n                    if l1<=l[k] and l2<=r[k]:\n                        min_length=min(min_length,abs(l1-l2))\n        print(min_length)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2265,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = input(), input()\n    count = 0\n    for i in range(len(a) - len(b) + 1):\n        for j in range(len(b)):\n            if a[i:i+len(b)] == b:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2266,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, d = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    roads = []\n    for i in range(n-1):\n        roads.append(list(map(int, input().split()))\n    # Your code here\n    return ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2267,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(''.join((sorted((input() for _ in range(int(input()))), key=cmp_to_key(lambda a, b: 1 if a + b > b + a else-1)))))\n    # return ''.join(sorted(input_string, key=lambda x: x[::-1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2268,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    name=list(input())\n    for i in range(m):\n        x,y=input().split()\n        for j in range(n):\n            if name[j]==x:\n                name[j]=y\n            elif name[j]==y:\n                name[j]=x\n    return ''.join(name)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2269,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\ts=input()\n    \\ts=list(input_string)\n    \\tcount1=0\n    \\tcount2=0\n    \\tcount3=0\n    \\tmin_len=len(input_string)\n    \\tfor i in range(len(input_string)):\n        \\tif ts[i]==1:\n            \\tcount1+=1\n        \\tif ts[i]==2:\n            \\tcount2+=1\n        \\tif ts[i]==3:\n            \\tcount3+=1\n        \\tif count1>0 and count2>0 and count3>0:\n            \\tmin_len=min(min_len,i+1)\n        \\tif count1==0:\n            \\tcount1=0\n        \\tif count2==0:\n            \\tcount2=0\n        \\tif count3==0:\n            \\tcount3=0\n    \\treturn min_len\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2270,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    planks = list(map(int, input().split()))\n    q = int(input())\n    for _ in range(q):\n        event = input().split()\n        if event[0] == '+':\n            planks.append(int(event[1]))\n        else:\n            planks.remove(int(event[1]))\n        if len(set(planks)) >= 4 and 1 in planks and 2 in planks:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2271,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input());b=[0]*(a+1)\n    for i in range(a):\n        c,d=map(int,input().split())\n        b[c]+=1\n        b[d]+=1\n    print(sum(b[1:]))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2272,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c, a, b = map(int, input().split())\n    if c == 1:\n        intervals.append((a, b))\n    else:\n        for i in range(len(intervals)):\n            if a in range(intervals[i][0], intervals[i][1]) or b in range(intervals[i][0], intervals[i][1]):\n                print(\"YES\")\n                return\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2273,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    edges=[]\n    for i in range(m):\n        a,b=map(int,input().split())\n        edges.append((a-1,b-1))\n    adj_list=[[] for i in range(n)]\n    for i in range(m):\n        adj_list[edges[i][0]].append(edges[i][1])\n        adj_list[edges[i][1]].append(edges[i][0])\n    def dfs(v,visited,vertex_set,vertex_set_num):\n        visited[v]=True\n        vertex_set.append(v)\n        for i in adj_list[v]:\n            if not visited[i]:\n                dfs(i,visited,vertex_set,vertex_set_num)\n    vertex_set1=[]\n    vertex_set2=[]\n    vertex_set3=[]\n    visited=[False]*n\n    for i in range(n):\n        if not visited[i]:\n            dfs(i,visited.copy(),vertex_set1)\n    visited=[False]*n\n    for i in range(n):\n        if not visited[i]:\n            dfs(i,visited.copy(),vertex_set2)\n    visited=[False]*n\n    for i in range(n):\n        if not visited[i]:\n            dfs(i,visited.copy(),vertex_set3)\n    if len(vertex_set1)==0 or len(vertex_set2)==0 or len(vertex_set3)==0:\n        return [-1]*n\n    for i in range(n):\n        if i in vertex_set1:\n            print(1,end=\" \")\n        elif i in vertex_set2:\n            print(2,end=\" \")\n        else:\n            print(3,end=\" \")\n    print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2274,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    grid=[]\n    for i in range(n):\n        grid.append(list(input()))\n    count=0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='D':\n                if i==n-1:\n                    count+=1\n                elif grid[i+1][j]=='R':\n                    count+=1\n                elif grid[i][j+1]=='R':\n                    count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2275,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        k = int(input())\n        s = input()\n        count = 0\n        for j in range(k):\n            if s[j] == 'A':\n                count += 1\n            else:\n                break\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2276,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    a = list(map(int, input().split()))\n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2277,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = int(input())\n    queries = [list(map(int, input().split()) for _ in range(m))\n    result = []\n    for l, r in queries:\n        a[l:r+1] = reversed(a[l:r+1])\n        inversions = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if a[i] > a[j]:\n                    inversions += 1\n        result.append(\"odd\" if inversions % 2 == 1 else \"even\")\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2278,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    Q = int(input())\n    for i in range(Q):\n        a, b, m = map(int, input().split())\n        if a == b:\n            print(1, a)\n        else:\n            if a > b:\n                a, b = b, a\n            if a == 1:\n                print(1, a)\n            else:\n                print(-1)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2279,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    strengths = [list(map(int, input().split())) for _ in range(n)]\n    result = []\n    for i in range(n):\n        max_strength = max(strengths[i])\n        for j in range(n):\n            if strengths[i][j] == max_strength:\n                result.append(j + 1)\n                break\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2280,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        a = list(map(int, input().split()))\n        k = 0\n        for j in range(n):\n            if a[j] >= k+1:\n                k += 1\n        print(k)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2281,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    result = []\n    for i in range(n):\n        result.append(a[i])\n        result.append(a[i+n])\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2282,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    x=0\n    positions=set()\n    positions.add(x)\n    for i in s:\n        if i=='L':\n            x-=1\n        else:\n            x+=1\n        positions.add(x)\n    return len(positions)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2283,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, input().split()))\n    # Your code here\n    return max_weight\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2284,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Sort the arrays in ascending order\n    a.sort()\n    b.sort()\n    \n    # Initialize variables\n    min_cost = 0\n    i = 0\n    j = 0\n    \n    # Iterate through the arrays\n    while k > 0:\n        # If the preparation cost is less than the printing cost, prepare the problem\n        if a[i] < b[j]:\n            min_cost += a[i]\n            i += 1\n        # If the printing cost is less than or equal to the preparation cost, print the problem\n        else:\n            min_cost += b[j]\n            j += 1\n        # Decrement the number of problems to be prepared\n        k -= 1\n    \n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2285,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    D = input()\n    for i in range(D):\n        ip = input().split(':')\n        ip = [x for x in ip if x != '']\n        if len(ip) == 1:\n            print(ip[0] * 8)\n        else:\n            full_ip = []\n            for i in range(len(ip)):\n                if ip[i] == '0':\n                    full_ip.append('00000')\n                else:\n                    full_ip.append(ip[i])\n            full_ip = ':'.join(full_ip)\n            print(full_ip)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2286,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    result = [0] * (2**(n-1))\n    for i in range(n):\n        for j in range(n):\n            if input_string[i][j] == '1':\n                result[i] += 2**(j)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2287,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        s = input()\n        count = 0\n        for j in s:\n            if j == '0':\n                count += 1\n            else:\n                break\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2288,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(n-1):\n        if b[i] == b[i+1]:\n            continue\n        else:\n            for j in range(i+1, n):\n                if b[i] != b[j]:\n                    break\n            else:\n                return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2289,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q=map(int,input().split())\n    a=list(map(int,input().split())\n    k=list(map(int,input().split())\n    standing=n\n    for i in range(q):\n        for j in range(n):\n            if k[i]>a[j]:\n                standing-=1\n            else:\n                a[j]-=k[i]\n        print(standing)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2290,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2291,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    max_xor=0\n    for i in range(n):\n        for j in range(n):\n            max_xor=max(max_xor,a[i]^a[j])\n    return max_xor\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2292,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    if n == 1:\n        return \"Yes\" if a[0] == b[0] else \"No\"\n    for i in range(1, n//2+1):\n        if a[:i] == b[:i] and a[i:] == b[i:]:\n            return \"Yes\"\n    return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2293,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m, n = list(map(int, input().split()))\n    days = []\n    for _ in range(m):\n        days.append(list(map(int, input().split()[1:]))\n    # Your code goes here\n    return \"possible\" if possible else \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2294,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, t, x = map(int, input().split())\n    multiset = []\n    for i in range(a):\n        if a == 1:\n            multiset.append(x)\n        elif a == 2:\n            if x in multiset:\n                multiset.remove(x)\n        elif a == 3:\n            count = 0\n            for num in multiset:\n                if num == x:\n                    count += 1\n            print(count)\n    return multiset\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2295,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    l=int(input())\n    r=int(input())\n    if l>r:\n        l,r=r,l\n    a.sort()\n    unique_elements=set(a[l-1:r])\n    return len(unique_elements)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2296,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    [n, q] = list(map(int, input().strip().split()))\n    points = []\n    for i in range(n):\n        [x, y] = list(map(int, input().strip().split()))\n        points.append((x, y))\n    for i in range(q):\n        query = input().strip()\n        if query[0] == '1':\n            [f, t] = list(map(int, input().strip().split()))\n            # Your code here\n        elif query[0] == '2':\n            v = int(input().strip())\n            # Your code here\n    return answers\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2297,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tl, r = list(map(int, input().split()))\n    return sum(range(-tl, -r+1, -1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2298,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, q = map(int, input().split())\n    queries = []\n    for _ in range(q):\n        queries.append(list(map(int, input().split()))\n    result = []\n    for l, r in queries:\n        count = 0\n        for x in range(l, r+1):\n            if ((x % a) % b) != ((x % b) % a):\n                count += 1\n        result.append(count)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2299,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = [int(x) for x in input().split()]\n    table = []\n    for i in range(n):\n        table.append([int(x) for x in input().split()])\n    k = int(input())\n    for i in range(k):\n        l,r = [int(x) for x in input().split()]\n        sorted_in_column = False\n        for j in range(m):\n            if all(table[l-1][j] <= table[r][j] for i in range(l-1,r)):\n                sorted_in_column = True\n        print(\"Yes\" if sorted_in_column else \"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2300,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    a = list(map(int,input().split())\n    for i in range(m):\n        t,x,v,l,r,d = map(int,input().split())\n        if t == 1:\n            a[x-1] = v\n        elif t == 2:\n            s = 0\n            for i in range(l,r+1):\n                s += a[i-1]\n            print(s)\n        elif t == 3:\n            for i in range(l,r+1):\n                a[i-1] += d\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2301,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    max_count = 0\n    for i in range(1, n-1):\n        if a[i] < a[i-1] + 1 and a[i] < a[i+1] + 1:\n            max_count += 1\n    print(max_count)\n    print(\" \".join(map(str, a[:max_count+1]))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2302,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    q=int(input())\n    milestones=[]\n    for i in range(q):\n        s,t,u=map(int,input().split())\n        milestones.append((s,t,u))\n    milestones.sort(key=lambda x:x[1])\n    ans=[]\n    for i in range(n):\n        count=0\n        for j in range(len(milestones)):\n            if milestones[j][0]==i+1:\n                count+=milestones[j][1]\n                if count>=a[i]:\n                    ans.append(count)\n                    break\n            else:\n                count+=1\n        else:\n            ans.append(a[i])\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2303,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into a list of words\n    words = input_string.split()\n    \n    # Reverse the list of words\n    words.reverse()\n    \n    # Join the words with a single space in between\n    return \" \".join(words)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2304,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    l=[]\n    r=[]\n    d=[]\n    for i in range(m):\n        l.append(int(input()))\n        r.append(int(input()))\n        d.append(int(input()))\n    for i in range(m):\n        for j in range(i+1,m):\n            if l[i]==r[j] or r[i]==l[j]:\n                return \"No\"\n    for i in range(m):\n        if d[i]>100000:\n            return \"No\"\n    for i in range(n):\n        if i in l or i in r:\n            return \"No\"\n    for i in range(m):\n        if l[i]>100000000000000 or r[i]>10000000000000:\n            return \"No\"\n    for i in range(m):\n        if l[i]>r[i]:\n            return \"No\"\n    for i in range(m):\n        for j in range(i+1,m):\n            if r[i]>l[j]:\n                return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2305,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    colors = list(map(int, input().split()))\n    edges = []\n    for i in range(n-1):\n        a, b = map(int, input().split())\n        edges.append((a, b))\n    # Your code goes here\n    # return the answers for k = 1, 2, ..., N in order, each in its own line\n    # Use the colors and edges list to solve the problem\n    # You can use a dictionary to store the number of times each vertex has been visited\n    # and a recursive function to find the number of simple paths\n    # for each vertex, but be careful to avoid infinite loops\n    # and keep track of visited vertices to avoid repetitions\n    # and to avoid counting paths that visit the same vertex twice\n    # You can use a depth-first search to find all simple paths\n    # and then count the number of paths that visit a vertex painted in the color k one or more times\n    # You can use a dictionary to store the number of times each vertex has been visited\n    # and a recursive function to find the number of simple paths\n    # for each vertex, but be careful to avoid infinite loops\n    # and keep track of visited vertices to avoid repetitions\n    # and to avoid counting paths that visit the same vertex twice\n    # You can use a depth-first search to find all simple paths\n    # and then count the number of paths that visit a vertex painted in the color k one or more times\n    # You can use a dictionary to store the number of times each vertex has been visited\n    # and a recursive function to find the number of simple paths\n    # for each vertex, but be careful to avoid infinite loops\n    # and keep track of visited vertices to avoid repetitions\n    # and to avoid counting paths that visit the same vertex twice\n    # You can use a depth-first search to find all simple paths\n    # and then count the number of paths that visit a vertex painted in the color k one or more times\n    # You can use a dictionary to store the number of times each vertex has been visited\n    # and a recursive function to find the number of simple paths\n    # for each vertex, but be careful to avoid infinite loops\n    # and keep track of visited vertices to avoid repetitions\n    # and to avoid counting paths that visit the same vertex twice\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2306,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    t=list(map(int,input_string.split()))\n    v=list(map(int,input().split()))\n    t_sum=sum(t)\n    v_sum=0\n    for i in range(n):\n        v_sum+=v[i]*t[i]\n    v_sum/=t_sum\n    return v_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2307,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    weapons = list(map(int, input().split()))\n    even_count = 0\n    odd_count = 0\n    for weapon in weapons:\n        if weapon % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > odd_count:\n        return \"READY FOR BATTLE\"\n    else:\n        return \"NOT READY\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2308,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    for i in range(n):\n        x=input()\n        y=input()\n        k=0\n        while(True):\n            if(int(x,2)+int(y,2)*(2**k)<=int(x,2):\n                print(k)\n                break\n            k+=1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2309,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input()\n    b=[]\n    for i in range(a):\n        b.append(input())\n    c=[]\n    for i in range(a):\n        c.append(input())\n    d=[]\n    for i in range(a):\n        d.append(input())\n    e=[]\n    for i in range(a):\n        e.append(input())\n    f=[]\n    for i in range(a):\n        f.append(input())\n    g=[]\n    for i in range(a):\n        g.append(input())\n    h=[]\n    for i in range(a):\n        h.append(input())\n    i=[]\n    for i in range(a):\n        i.append(input())\n    j=[]\n    for i in range(a):\n        j.append(input())\n    k=[]\n    for i in range(a):\n        k.append(input())\n    l=[]\n    for i in range(a):\n        l.append(input())\n    m=[]\n    for i in range(a):\n        m.append(input())\n    n=[]\n    for i in range(a):\n        n.append(input())\n    o=[]\n    for i in range(a):\n        o.append(input())\n    p=[]\n    for i in range(a):\n        p.append(input())\n    q=[]\n    for i in range(a):\n        q.append(input())\n    r=[]\n    for i in range(a):\n        r.append(input())\n    s=[]\n    for i in range(a):\n        s.append(input())\n    t=[]\n    for i in range(a):\n        t.append(input())\n    u=[]\n    for i in range(a):\n        u.append(input())\n    v=[]\n    for i in range(a):\n        v.append(input())\n    w=[]\n    for i in range(a):\n        w.append(input())\n    x=[]\n    for i in range(a):\n        x.append(input())\n    y=[]\n    for",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2310,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        m, k = map(int, input().split())\n        a = list(map(int, input().split()))\n        for j in range(m-1):\n            t, r = map(int, input().split())\n            if t == 0:\n                a[r] -= 1\n        print(\"\".join([\"Y\" if a[i] > 0 else \"N\" for i in range(k)])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2311,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M,K=map(int,input().split())\n    a=list(map(int,input().split())\n    b=list(map(int,input().split())\n    c=[[0]*M for i in range(N)]\n    for i in range(N):\n        for j in range(M):\n            c[i][j]=a[i]*b[j]\n    count=0\n    for i in range(N-K+1):\n        for j in range(M-K+1):\n            for k in range(K):\n                for l in range(K):\n                    if all(c[i+k][j+l]==1):\n                        count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2312,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        b=list(map(int,input().split()))\n        a=[2**i for i in b]\n        for i in range(1,n):\n            for j in range(i+1,n):\n                if sum(a[i:j])==sum(a[:j]):\n                    print(\"YES\")\n                    break\n            else:\n                continue\n            print(\"YES\")\n            break\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2313,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());c=sorted(list(map(int,input().split())));mod=998244353;inv=pow(n,mod-2,mod);imos=[c[i] for i in range(n)];res=[0]*n\n    for i in range(n):\n        for j in range(n):\n            if i!=j:\n                res[i]=((res[i]+imos[j])*inv)%mod\n    return res\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2314,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, q = map(int, input_string.pop(0).split())\n    picture = [list(input_string.pop(0)) for _ in range(n)]\n    for _ in range(q):\n        r1, c1, r2, c2 = map(int, input_string.pop(0).split())\n        # Your code here\n        # You can use the following variables:\n        # picture: a list of lists, where each inner list represents a row of the picture\n        # n: the number of rows\n        # m: the number of columns\n        # r1: the row of the upper-left corner of the sub-rectangle\n        # c1: the column of the upper-left corner of the sub-rectangle\n        # r2: the row of the bottom-right corner of the sub-rectangle\n        # c2: the column of the bottom-right corner of the sub-rectangle\n        # You can use the following colors: 'R', 'G', 'Y', 'B'\n        # You can use the following functions:\n        # max_area(row, col, n, m): returns the maximum area of a sub-square inside the given row and column\n        # max_area_sub_rectangle(r1, c1, r2, c2, n, m): returns the maximum area of a sub-square inside the given sub-rectangle\n        # max_area_picture(n, m): returns the maximum area of a sub-square inside the whole picture\n        # max_area_sub_rectangle(r1, c1, r2, c2, n, m) is a helper function that you can use to find the maximum area of a sub-square inside a sub-rectangle\n        # max_area(row, col, n, m) is a helper function that you can use to find the maximum area of a sub-square inside a row and column\n        # You can use the following variables:\n        # R: the color 'R'\n        # G: the color 'G'\n        # Y: the color 'Y'\n        # B: the color 'B'\n        # You can use the following variables:\n        # R: the color 'R'\n        # G: the color",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2315,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y=map(int,input().split())\n    return x,y\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2316,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        x,n,m=map(int,input().split())\n        if n+m==0:\n            print(\"YES\")\n        elif x<=10:\n            print(\"YES\")\n        else:\n            if n*2+m*10<=x:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2317,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,a,b = [int(x) for x in input().split()]\n    y = list(map(int, input().split()))\n    y_prime = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    #print(n,m,a,b,y,y_prime,l)\n    min_dist = float('inf')\n    min_points = None\n    for i in range(n):\n        for j in range(m):\n            dist = abs(a-y[i]) + abs(y_prime[j]-b) + l[j]\n            if dist < min_dist:\n                min_dist = dist\n                min_points = (i+1,j+1)\n    return min_points\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2318,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        s=input()\n        t=input()\n        if len(s)!=len(t):\n            print(\"NO\")\n        else:\n            for j in range(len(s)):\n                if s[j]!=t[j]:\n                    print(\"NO\")\n                    break\n            else:\n                print(\"YES\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2319,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input());s1 = input().strip();s2 = input().strip();char1 = [0] * 26;char2 = [0] * 26\n    for i in range(len(s1)):\n        char1[ord(s1[i])-97] += 1\n        char2[ord(s2[i])-97] += 1\n    for i in range(26):\n        char1[i] -= char2[i]\n    count = 0\n    for i in range(26):\n        if char1[i] < 0:\n            count += char1[i]\n    if count > 0:\n        return -1\n    else:\n        return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2320,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,s,t=int(input()),input(),input()\n    if s==t:\n        return 0\n    if len(s)!=len(t):\n        return -1\n    s_dict=dict(zip(s,range(1,n+1))\n    t_dict=dict(zip(t,range(1,n+1))\n    moves=0\n    for i in range(1,n+1):\n        if s_dict[i]!=t_dict[i]:\n            moves+=1\n            if s_dict[i] in t_dict:\n                s_dict[s_dict[i]],s_dict[i]=s_dict[i],s_dict[t_dict[i]]\n            else:\n                return -1\n    return moves\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2321,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = int(input())\n    for i in range(x):\n        n = int(input())\n        s = input()\n        count = 0\n        for j in range(n):\n            if s[j] == '>':\n                if j == n-1:\n                    count += 1\n                else:\n                    if s[j+1] == '>':\n                        count += 1\n            elif s[j] == '<':\n                if j == 0:\n                    count += 1\n                else:\n                    if s[j-1] == '<':\n                        count += 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2323,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=list(map(int,input().split()))\n    q=int(input())\n    lr=[]\n    for i in range(q):\n        lr.append(list(map(int,input().split()))\n    for i in range(q):\n        l=lr[i][0]\n        r=lr[i][1]\n        pitches=set()\n        for j in range(l,r+1):\n            for k in range(n):\n                pitches.add(s[k]+j)\n        print(len(pitches))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2324,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().strip()\n    n = len(s)\n    palindromic_chars = [0] * n\n    for i in range(n):\n        palindromic_chars[i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                palindromic_chars[j] += palindromic_chars[i]\n    for i in range(n-1):\n        palindromic_chars[i+1] += palindromic_chars[i]\n    for i in range(n-1):\n        palindromic_chars[i+1] += palindromic_chars[i]\n    for i in range(n-2):\n        palindromic_chars[i+2] += palindromic_chars[i]\n    for i in range(n-3):\n        palindromic_chars[i+3] += palindromic_chars[i]\n    for i in range(n-4):\n        palindromic_chars[i+4] += palindromic_chars[i]\n    for i in range(n-5):\n        palindromic_chars[i+5] += palindromic_chars[i]\n    for i in range(n-6):\n        palindromic_chars[i+6] += palindromic_chars[i]\n    for i in range(n-7):\n        palindromic_chars[i+7] += palindromic_chars[i]\n    for i in range(n-8):\n        palindromic_chars[i+8] += palindromic_chars[i]\n    for i in range(n-9):\n        palindromic_chars[i+9] += palindromic_chars[i]\n    for i in range(n-10):\n        palindromic_chars[i+10] += palindromic_chars[i]\n    for i in range(n-11):\n        palindromic_chars",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2325,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    for i in range(q):\n        x, y = map(int, input().split())\n        count = 1\n        for i in range(1, x+1):\n            if x % i == 0:\n                count *= y\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2326,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mod = 998244353\n    count = 0\n    for i in range(1, n+1):\n        if a[i-1] > 0:\n            count += 1\n    for i in range(1, n):\n        if a[i-1] > 0:\n            count += 1\n    return count % mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2327,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        binary_sequence = [bin(j)[2:].zfill(len(bin(n-1))+2) for j in range(n)]\n        unfairness = 0\n        for j in range(1, n):\n            diff = sum([int(binary_sequence[j][k] != binary_sequence[j-1][k] for k in range(len(binary_sequence[j]))])\n            unfairness += diff\n        print(unfairness)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2328,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,k=map(int,input().split())\n        a=list(map(int,input().split())\n        a.sort()\n        x=a[k]\n        print(x)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2329,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    towers = [[] for _ in range(m)]\n    for i in range(n):\n        towers[int(input())-1].append(i+1)\n    for _ in range(m-1):\n        a,b = map(int,input().split())\n        a,b = a-1,b-1\n        while towers[a] and towers[b] and towers[a][-1] > towers[b][-1]:\n            towers[b].append(towers[a].pop())\n    result = [len(towers[i]) for i in range(m)]\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2330,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn, m = map(int, input().split())\n    \\tfridges = list(map(int, input().split())\n    \\tchains = []\n    \\tfor _ in range(m):\n        \\tu, v = map(int, input().split())\n        \\tchains.append((tu, v))\n    \\treturn chains\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2331,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = map(int, input().split())\n    if a == 0 and b == 0:\n        return \"Infinite\"\n    elif a == b:\n        return \"Finite\"\n    else:\n        return \"Infinite\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2332,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    rd = lambda: list(map(int, input().split()))\n    n, k, m = rd()\n    words = rd()\n    costs = rd()\n    groups = [rd() for _ in range(k)]\n    message = input().split()\n    # Your code goes here\n    # print(n, k, m, words, costs, groups, message)\n    # print(len(groups), len(message))\n    # print(groups)\n    # print(message)\n    # print(words)\n    # print(costs)\n    # print(len(words), len(costs))\n    # print(len(groups[0]), len(groups[1]), len(groups[2]), len(groups[3]))\n    # print(groups[0], groups[1], groups[2], groups[3])\n    # print(groups[0][0], groups[1][0], groups[2][0], groups[3][0])\n    # print(groups[0][1], groups[1][1], groups[2][1], groups[3][1])\n    # print(groups[0][2], groups[1][2], groups[2][2], groups[3][2])\n    # print(groups[0][3], groups[1][3], groups[2][3], groups[3][3])\n    # print(groups[0][4], groups[1][4], groups[2][4], groups[3][4])\n    # print(groups[0][5], groups[1][5], groups[2][5], groups[3][5])\n    # print(groups[0][6], groups[1][6], groups[2][6], groups[3][6])\n    # print(groups[0][7], groups[1][7], groups[2][7], groups[3][7])\n    # print(groups[0][8], groups[1][8], groups[2][8], groups[3][8])\n    # print(groups[0][9], groups[1][9], groups[2][9], groups[3][9])\n    # print(groups[0][10], groups[1][10], groups[2][10], groups[3][10])\n    # print(groups[0][11],",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2333,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    i=lambda :map(int,input().split())\n    n=int(input())\n    a=i()\n    count=0\n    for i in range(n):\n        for j in range(i,n):\n            if a[i]==j+1:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2334,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input_string.split()))\n    x,f=map(int,input().split())\n    total_fee=0\n    for i in range(n):\n        if a[i]>x:\n            total_fee+=f\n            a[i]-=x\n        else:\n            total_fee+=a[i]\n            a[i]=0\n    return total_fee\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2335,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q, c = input().split()\n    q = int(q)\n    c = list(c)\n    points = []\n    for i in range(q):\n        points.append(list(map(int, input().split()))\n    # Your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2336,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, q = map(int, input().split())\n    recipes = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        recipes.append((l, r))\n    for i in range(q):\n        a, b = map(int, input().split())\n        count = 0\n        for l, r in recipes:\n            if l >= a and r <= b:\n                count += 1\n            if count >= k:\n                break\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2337,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda:list(map(int,input().split()))\n    n,m=I()\n    a=I()\n    b=I()\n    c=set(b)\n    c.add(0)\n    c=sorted(c)\n    c=list(c)\n    c.reverse()\n    ans=0\n    for i in range(n):\n        if a[i] not in c:\n            ans+=1\n    for i in range(n,m):\n        if c[i] not in a:\n            ans+=1\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2338,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    bombs = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        bombs.append((x, y))\n    # print(bombs)\n    def dfs(x, y, visited, path, bombs, container):\n        if (x, y) in container:\n            return 0\n        if (x, y) in visited:\n            return visited[(x, y)]\n        if (x, y) == (0, 0):\n            return 0\n        visited[(x, y)] = 0\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            if (x+dx, y+dy) not in bombs and (x+dx, y+dy) not in visited:\n                visited[(x, y)] = min(visited[(x, y), dx, dy]) + 1\n                path.append((x, y, dx, dy))\n                dfs(x+dx, y+dy, visited, path, bombs, container)\n                path.pop()\n        return visited[(x, y)]\n    def move(x, y, dx, dy):\n        return x+dx, y+dy\n    def move_to_container(x, y):\n        return 1, 0\n    def move_from_container(x, y):\n        return 2, x, y\n    def destroy_bomb(x, y):\n        return 3, x, y\n    def print_path(path):\n        for i, j, dx, dy in path:\n            if dx == 1:\n                print(1, 1, \"R\")\n            elif dx == -1:\n                print(1, 1, \"L\")\n            elif dy == 1:\n                print(1, 1, \"U\")\n            else:\n                print(1, 1, \"D\")\n    def move_to_container_and_destroy(x, y):\n        print(2)\n        print(1, 0)\n        print(3)\n    def move_from_container_and_destroy(x, y):",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2339,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    for i in range(n):\n        b.append(a[i])\n    b.sort()\n    return b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2340,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q=int(input())\n    for i in range(q):\n        h,n=map(int,input().split())\n        p=list(map(int,input().split())\n        p.sort(reverse=True)\n        count=0\n        for j in range(n):\n            if p[j]==1:\n                count+=1\n            else:\n                break\n        if count==n:\n            print(0)\n        else:\n            print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2341,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    input_string=input().split()\n    input_string=[''.join(input_string) for i in range(n)]\n    count=0\n    for i in range(n):\n        for j in range(m):\n            if input_string[i][j]==input_string[i][j+1] and input_string[i][j]==input_string[i+1][j] and input_string[i][j]==input_string[i+1][j+1]:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2342,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn, m = list(map(int, input().split()))\n    maze = []\n    for i in range(n):\n        maze.append(list(input().strip()))\n    # Your code goes here\n    return \"Yes\" if is_valid(maze) else \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2343,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn,k = map(int,input().split())\n    for i in range(tn):\n        n,k = map(int,input().split())\n        if n==1:\n            print(\"YES 0\")\n        else:\n            if k%2==0:\n                print(\"NO\")\n            else:\n                print(\"YES\",k//2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2344,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    offers = []\n    for i in range(n):\n        a, b, k = map(int, input().split())\n        offers.append((a, b, k))\n    offers.sort(key=lambda x: x[0], reverse=True)\n    total_burles = 0\n    for i in range(n):\n        a, b, k = offers[i]\n        total_burles += a\n        if total_burles >= b:\n            total_burles -= b\n        else:\n            total_burles = 0\n        if total_burles >= 0:\n            total_burles += b\n            for j in range(i+1, n):\n                a, b, k = offers[j]\n                if total_burles >= b:\n                    total_burles -= b\n                else:\n                    total_burles = 0\n                if total_burles >= 0:\n                    total_burles += b\n                    for k in range(k):\n                        total_burles -= b\n                    if total_burles >= 0:\n                        total_burles += b\n                    else:\n                        total_burles = 0\n                        break\n                if total_burles >= 0:\n                    total_burles += b\n                    for k in range(k-1):\n                        total_burles -= b\n                    if total_burles >= 0:\n                        total_burles += b\n                        for k in range(k-1):\n                            total_burles -= b\n                        if total_burles >= 0:\n                            total_burles += b\n                            for k in range(k-1):\n                                total_burles -= b\n                            if total_burles >= 0:\n                                total_burles += b\n                                for k in range(k-1):\n                                    total_burles -= b\n                                if total_burles >= 0:\n                                    total_burles += b\n                                    for k in range(k-1):\n                                        total_burles -= b\n                                    if total_burles >= 0:\n                ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2345,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        a=list(map(int,input().split()))\n        s=sum(a)\n        if s==0:\n            print(n)\n            print(*a)\n        else:\n            print(n)\n            for j in range(n):\n                if a[j]==0:\n                    print(j+1)\n                    break\n        for j in range(n):\n            if a[j]<0:\n                print(j+1,end=\" \")\n            elif a[j]>0:\n                print(j+1+s,end=\" \")\n        print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2346,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    b=[]\n    for i in range(a):\n        c,d=map(int,input().split())\n        b.append([c,d])\n    b.sort(key=lambda x:x[1])\n    for i in range(len(b)):\n        if b[i][1]==1:\n            b[i][1]=i+1\n    b.sort(key=lambda x:x[0])\n    for i in range(len(b)):\n        if b[i][0]!=-1:\n            b[i][0]=b[i][0]-1\n    c=[]\n    for i in range(len(b)):\n        if b[i][1]==1:\n            c.append(b[i][0])\n    if len(c)==0:\n        print(-1)\n    else:\n        print(*c)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2347,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        p = input()\n        h = input()\n        s1 = \"\"\n        s2 = \"\"\n        p_shuffled = \"\"\n        for j in p:\n            s1 += random.choice(string.ascii_lowercase)\n            p_shuffled += j\n            s2 += random.choice(string.ascii_lowercase)\n        if h == s1 + p_shuffled + s2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2348,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    if s[0]=='A':\n        return 0\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2349,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn = int(input())\n    for i in range(tn):\n        n = int(input())\n        rating_increment = []\n        for k in range(1, n+1):\n            rating_increment.append(int(n/k))\n        rating_increment = list(set(rating_increment))\n        rating_increment.sort()\n        print(len(rating_increment))\n        print(*rating_increment)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2350,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=list(map(int,input().split()))\n    e,f,g,h=list(map(int,input().split()))\n    i,j,k,l=list(map(int,input().split())\n    m,n,o,p=list(map(int,input().split())\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2351,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,leng = [int(x) for x in input().split()]\n    arr = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        if arr[i] == -1:\n            count += k\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2352,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    sheet = []\n    for i in range(n):\n        sheet.append(list(input()))\n    for i in range(n):\n        for j in range(m):\n            if sheet[i][j] == 'a':\n                sheet[i][j] = 'a'\n            elif sheet[i][j] == 'b':\n                sheet[i][j] = 'b'\n            elif sheet[i][j] == 'c':\n                sheet[i][j] = 'c'\n            else:\n                sheet[i][j] = '.'\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if sheet[i][j] != '.':\n                count += 1\n    if count > 26:\n        return \"NO\"\n    else:\n        return \"YES\"\n    return \"YES\" + \"\\n\" + str(count) + \"\\n\" + \" \".join(str(i) for i in range(count))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2353,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=map(int,input().split())\n    if a<b:\n        return -1\n    else:\n        total_sleep=0\n        while total_sleep<a:\n            total_sleep+=b\n            if total_sleep<a:\n                total_sleep+=c\n                b=c\n        return total_sleep\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2354,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f, c, i = lambda x: x // 2, lambda x: x - f(x), lambda : map(int, input().split())\n    n, q = map(int, input_string.split())\n    board = [list(range(1, f(n) + 1)) + list(range(f(n) + 1, n + 1)) for _ in range(n)]\n    for _ in range(q):\n        x, y = map(int, input().split())\n        print(board[x - 1][y - 1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2355,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, p = map(int, input().split())\n    edges = []\n    for i in range(2*n+p):\n        a, b = map(int, input().split())\n        edges.append((a-1, b-1))\n    return edges\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2356,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn=int(input())\n    for i in range(tn):\n        n=int(input())\n        a=list(map(int,input().split()))\n        a.sort()\n        for j in range(n):\n            if j!=a[j]-1:\n                a[j],a[a[j]-1]=a[a[j]-1],a[j]\n        print(*a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2357,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    ans = n = int(input())\n    for i in range(n):\n        a = list(map(int, input().split()))\n        # your code goes here\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2358,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    if n % 2 == 0:\n        return 0\n    k = 0\n    while n > 0:\n        k += 1\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n //= 2\n            n += 1\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2359,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h, c, t = list(map(int, input().split()))\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2360,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        l = []\n        r = []\n        for j in range(n):\n            l.append(list(map(int, input().split()))\n        for j in range(n):\n            r.append(list(map(int, input().split())\n        for j in range(n):\n            if j == 0:\n                print(1)\n            else:\n                print(r[j] - l[j-1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2361,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,m,k=map(int,input().split())\n        if m==0:\n            print(0)\n        else:\n            jokers=n//k\n            max_jokers=0\n            for i in range(k):\n                max_jokers=max(max_jokers,jokers)\n                jokers+=1\n            print(max_jokers)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2362,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    edges = []\n    for i in range(n-1):\n        edges.append(list(map(int, input().split()))\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2363,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    b=int(input())\n    if a>b:\n        return b-a\n    else:\n        return a-b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2364,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = int(input())\n    b = list(map(int, input().split()))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2365,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def evaluate(expression):\n        if expression == \"t\":\n            return True\n        elif expression == \"f\":\n            return False\n        elif expression[0] == \"!\":\n            return not evaluate(expression[2:-1])\n        elif expression[0] == \"&\":\n            return all(evaluate(x.strip()) for x in expression[2:-1].split(\",\"))\n        elif expression[0] == \"|\":\n            return any(evaluate(x.strip()) for x in expression[2:-1].split(\",\"))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2366,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input());*A,=map(int,input().split());c=C(A);s=sum(v*~-v//2for v in c.values())\n    for k in range(1,N+1):\n        print(s[k])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2367,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W,A,B = map(int,input().split())\n    # print(H,W,A,B)\n    if H == 1 or W == 1:\n        return 1\n    if A == 1 and B == 1:\n        return 1\n    if A == H and B == W:\n        return 1\n    if A == 1:\n        return (W-B+1)%(10**9+7)\n    if B == 1:\n        return (H-A+1)%(10**9+7)\n    if A == H and B != 1:\n        return (W-B+1)%(10**9+7)\n    if B == W and A != 1:\n        return (H-A+1)%(10**9+7)\n    if A < H and B < W:\n        return ((H-A)*(W-B) + (H-A)*(W-B-1) + (H-A-1)*(W-B) + (H-A-1)*(W-B-1))%(10**9+7)\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2368,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    a = list(map(int,input().split())\n    b = list(map(int,input().split())\n    edges = []\n    for i in range(m):\n        edges.append(list(map(int,input().split()))\n    # Your code goes here\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2369,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K=map(int,input().split())\n    A=list(map(int,input().split())\n    mod=10**9+7\n    ans=0\n    for i in range(N):\n        for j in range(N):\n            if i!=j:\n                ans+=max(A[i],A[j])-min(A[i],A[j])\n    return ans%mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2370,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    A=[]\n    for i in range(n):\n        A.append(list(map(int,input_string.split()))\n    for i in range(n):\n        for j in range(n):\n            if A[i][j]!=0:\n                if A[j][i]!=0:\n                    if A[i][j]!=A[j][i]:\n                        return -1\n                else:\n                    return -1\n    return sum(A[i][i] for i in range(n))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2371,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,z,w=map(int,input().split())\n    a=list(map(int,input().split())\n    x=0\n    y=0\n    for i in range(n):\n        if i%2==0:\n            x+=a[i]\n        else:\n            y+=a[i]\n    return abs(x-y)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2372,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,w=map(int,input().split())\n    ch,cw=map(int,input().split())\n    dh,dw=map(int,input().split())\n    maze=[]\n    for i in range(h):\n        maze.append(list(input()))\n    def is_valid(x,y):\n        if x<0 or x>=h or y<0 or y>=w or maze[x][y]=='#':\n            return False\n        return True\n    def bfs(x,y):\n        queue=[(x,y)]\n        visited=[(x,y)]\n        steps=0\n        while queue:\n            size=len(queue)\n            for i in range(size):\n                x,y=queue.pop(0)\n                if (x,y)==(dh-1,dw-1):\n                    return steps\n                for dx,dy in [(-1,0),(1,0),(0,-1),(0,1)]:\n                    nx,ny=x+dx,y+dy\n                    if is_valid(nx,ny) and (nx,ny) not in visited:\n                        queue.append((nx,ny))\n                        visited.append((nx,ny))\n            steps+=1\n        return -1\n    return bfs(ch-1,cw-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2373,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    p=list(map(int,input_string.split()))\n    count=0\n    for i in range(N):\n        if p[i]!=i+1:\n            count+=1\n            if i==0:\n                p[0],p[p[i]-1]=p[p[i]-1],p[0]\n            else:\n                p[i],p[i-1]=p[i-1],p[i]\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2374,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    bombs = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        bombs.append((a, b))\n    cords = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        cords.append((l, r))\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[1] - x[0])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x[1])\n    cords.sort(key=lambda x: x[0])\n    cords.sort(key=lambda x: x",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2375,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X,Y=map(int,input().split())\n    if X>Y:\n        return \"Alice\"\n    else:\n        return \"Brown\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2376,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,W = map(int,input().split())\n    items = []\n    for i in range(N):\n        w,v = map(int,input().split())\n        items.append((w,v))\n    items.sort(key=lambda x: x[0])\n    total_value = 0\n    total_weight = 0\n    for i in range(N):\n        if total_weight + items[i][0] <= W:\n            total_weight += items[i][0]\n            total_value += items[i][1]\n    return total_value\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2377,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f=lambda:[*map(int,input().split())]\n    N,H=f()\n    a,b=zip(*[f() for _ in range(N)]\n    # Write your code here\n    dp=[[0]*(H+1) for _ in range(N+1)]\n    for i in range(N):\n        for j in range(H+1):\n            if j>=a[i]:\n                dp[i+1][j]=max(dp[i][j-a[i]]+b[i],dp[i][j])\n            else:\n                dp[i+1][j]=dp[i][j]\n    return dp[N][H]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2378,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    edges=[]\n    for i in range(N-1):\n        a,b=map(int,input().split())\n        edges.append((a-1,b-1))\n    #print(edges)\n    adj_list={}\n    for i in range(N):\n        adj_list[i]=[j for j in range(N) if (i,j) in edges or (j,i) in edges]\n    #print(adj_list)\n    def dfs(node,parent,color,visited,color_count):\n        visited[node]=True\n        color_count[color]+=1\n        for child in adj_list[node]:\n            if child!=parent:\n                dfs(child,node,color,visited,color_count)\n    color_count=[0]*2\n    visited=[False]*N\n    dfs(0,-1,0,color_count)\n    #print(color_count)\n    return (color_count[0]*(color_count[0]-1)+color_count[1]*(color_count[1]-1))//2\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2379,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K,C = map(int,input().split())\n    S = input()\n    days = []\n    for i in range(N):\n        if S[i] == 'o':\n            days.append(i+1)\n    if len(days) == 0:\n        print(1)\n    else:\n        print(days[0])\n    return days\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2380,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    A = list(map(int,input().split())\n    B = []\n    C = []\n    for i in range(M):\n        B.append(int(input())\n        C.append(int(input())\n    # Your code goes here\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2381,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    arr=list(map(int,input().split())\n    arr.sort()\n    if k==1:\n        return max(arr)\n    elif k==n:\n        return max(arr)\n    else:\n        return max(arr[k-1]*arr[n-1],arr[0]*arr[n-2])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2382,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    S=list(map(int,input_string.split()))\n    S.sort()\n    if len(S)!=2**N:\n        return \"No\"\n    if S[0]!=1:\n        return \"No\"\n    if S[1]!=2:\n        return \"No\"\n    for i in range(2,2**N):\n        if S[i]!=i:\n            return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2383,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b=int(input()),[*map(int,input().split())],1\n    for i in range(1,n):\n        if a[i]!=i+1:\n            return -1\n    return n-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2384,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    A=list(map(int,input_string.split()))\n    A.sort()\n    max_sum=0\n    for i in range(n//2):\n        max_sum+=A[i]\n    for i in range(n//2,n):\n        max_sum+=A[i]\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2385,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    adj_list=[]\n    for i in range(N-1):\n        a,b=map(int,input().split())\n        adj_list.append([a-1,b-1])\n    #print(adj_list)\n    visited=[False]*N\n    def dfs(node,parent,depth,num):\n        visited[node]=True\n        if depth==N:\n            return 1\n        count=0\n        for i in range(N):\n            if not visited[i] and i!=parent:\n                count+=dfs(i,node,depth+1,num+1)\n        return count%(10**9+7\n    for i in range(N):\n        if not visited[i]:\n            print(dfs(i,-1,1,1))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2386,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    A=list(map(int,input_string.split()))\n    b=0\n    sadness=0\n    for i in range(n):\n        sadness+=abs(A[i]-b-i)\n    return sadness\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2387,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=[]\n    for i in range(n):\n        s.append(input())\n    for i in range(n-1):\n        if s[i][-1]!=\"(\" or s[i+1][0]!=\"(\":\n            return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2388,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input());R,d,f,s,x=sorted(list(map(int,input().split()))for i in range(N))+[(2e9,0)],[0]*N+[1],[0]*N,1,N\n    def dfs(i):\n        if f[i]==0:return 0\n        if s[i]==1:return 1\n        if f[i]==2:return 0\n        f[i]=2\n        s[i]=0\n        for j in range(i+1,N):\n            if x[i]<x[j]<=x[i]+d[i]:dfs(j)\n        return sum(dfs(j)for j in range(i+1,N)if x[i]<x[j]<=x[i]+d[i])\n    return (dfs(0)+dfs(1)+dfs(2))%998244353\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2389,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, A, B, C = map(int, input().split())\n    s = input().split()\n    for i in range(N):\n        if s[i] == \"AB\":\n            if A > B:\n                A += 1\n                B -= 1\n            else:\n                B += 1\n                A -= 1\n        elif s[i] == \"AC\":\n            if A > C:\n                A += 1\n                C -= 1\n            else:\n                C += 1\n                A -= 1\n        else:\n            if B > C:\n                B += 1\n                C -= 1\n            else:\n                C += 1\n                B -= 1\n        if A < 0 or B < 0 or C < 0:\n            return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2390,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,c=map(int,input().split())\n    x=[]\n    v=[]\n    for i in range(n):\n        x.append(int(input()))\n        v.append(int(input()))\n    x.sort()\n    v.sort()\n    max_nutrition=0\n    for i in range(n):\n        max_nutrition+=v[i]*(c-x[i])\n    return max_nutrition\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2391,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    a = list(map(int, input_string.split()))\n    b = list(map(int, input()))\n    for k in range(N):\n        for x in range(N):\n            a_prime = [(a[i] ^ x) % N for i in range(N)]\n            if a_prime == b:\n                print(k, x)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2392,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n % 2 == 0:\n        return 0\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2393,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        s = input()\n        count = 0\n        indices = []\n        for j in range(len(s)-2):\n            if s[j:j+3] == \"one\" or s[j:j+3] == \"two\":\n                count += 1\n                indices.append(j+1)\n        if count == 0:\n            print(0)\n            print()\n        else:\n            print(count)\n            print(\" \".join(map(str, indices))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2394,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2395,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(input())\n    n = len(a)\n    if n % 2 == 0:\n        return ''.join(a)\n    else:\n        return '0' + ''.join(a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2396,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = int(input())\n    count = [0] * x\n    for i in range(x):\n        a, b, c = input().split('/')\n        a = int(a[1:-1])\n        b = int(b)\n        c = int(c)\n        count[i] = (a + b) // c\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2397,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    # print(n, k, a)\n    # print(len(a))\n    # print(a)\n    # print(a[0])\n    # print(a[1])\n    # print(a[2])\n    # print(a[3])\n    # print(a[4])\n    # print(a[5])\n    # print(a[6])\n    # print(a[7])\n    # print(a[8])\n    # print(a[9])\n    # print(a[10])\n    # print(a[11])\n    # print(a[12])\n    # print(a[13])\n    # print(a[14])\n    # print(a[15])\n    # print(a[16])\n    # print(a[17])\n    # print(a[18])\n    # print(a[19])\n    # print(a[20])\n    # print(a[21])\n    # print(a[22])\n    # print(a[23])\n    # print(a[24])\n    # print(a[25])\n    # print(a[26])\n    # print(a[27])\n    # print(a[28])\n    # print(a[29])\n    # print(a[30])\n    # print(a[31])\n    # print(a[32])\n    # print(a[33])\n    # print(a[34])\n    # print(a[35])\n    # print(a[36])\n    # print(a[37])\n    # print(a[38])\n    # print(a[39])\n    # print(a[40])\n    # print(a[41])\n    # print(a[42])\n    # print(a[43])\n    # print(a[44])\n    # print(a[45])\n    # print(a[46])\n    # print(a[47])\n    #",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2398,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        a,b,c,d=map(int,input().split())\n        x,y,x1,y1,x2,y2=map(int,input().split())\n        if x1<=x<=x2 and y1<=y<=y2:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2399,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    for i in range(q):\n        a, b = map(int, input().split())\n        s = input()\n        if s.count('.') >= a:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2400,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    m = int(input())\n    q = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if (p[i] - q[j]) % 2 == 0 and (p[i] - q[j]) // 2 in p:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2401,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        N, R = map(int, input().split())\n        numbers = list(map(int, input().split()))\n        if R == 1:\n            print(numbers[0])\n        else:\n            print(N - numbers[R-2])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2402,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x, y = list(map(int, input().split()))\n    return min(x, y), max(x, y)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2403,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    ans=0\n    order=[]\n    for i in range(n):\n        if b[i]!=-1:\n            ans+=a[i]\n            order.append(i)\n            while b[i]!=-1:\n                ans+=a[b[i]]\n                i=b[i]\n                order.append(i)\n    print(ans)\n    print(*order)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2404,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n%2==0:\n        return n+1\n    else:\n        return n-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2405,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k, a, b, q = map(int, input_string.split())\n    days = [0] * n\n    for _ in range(q):\n        query = input().split()\n        if query[0] == '1':\n            d, a = map(int, query[1:])\n            days[d-1] = a\n        else:\n            p = int(query[1])\n            filled_orders = 0\n            for i in range(p-1, p+k-1):\n                filled_orders += min(days[i], b)\n            print(filled_orders)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2406,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input());tot = sum(map(int, input().split()));extra = (n * (n - 1))//2;smol = (tot - extra) // n;out = [smol + i for i in range(n)]\n    for i in range(n-1):\n        if out[i] + 2 <= out[i+1]:\n            out[i] += 1\n            out[i+1] -= 1\n    return out\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2407,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,r = list(map(int,input().split()))\n    x = list(map(int,input().split()))\n    x.sort()\n    count = 0\n    i = 0\n    while i < n:\n        if x[i] <= 0:\n            count += 1\n            i += 1\n        else:\n            break\n    if i == n:\n        return 0\n    if x[i] > 0:\n        count += 1\n    while i < n:\n        if x[i] > 0:\n            count += 1\n            x[i] -= r\n            i += 1\n        else:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2408,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    poles = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        poles.append((x, y))\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2409,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f=lambda:map(int,input().split())\n    t=int(input())\n    for i in range(t):\n        n,k,l=f()\n        d=list(f())\n        p=[0]*(2*k)\n        p[1:k+1]=p[k-1::-1]\n        p[k+1:]=p[:k-1]\n        x=0\n        while x<n:\n            if d[x]+p[x%(2*k)<=l]:\n                x+=1\n            else:\n                break\n        if x==n:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2410,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn = int(input())\n    for i in range(tn):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if sum(a) > 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2411,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    poles = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        poles.append((x, y))\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2412,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn = int(input())\n    for i in range(tn):\n        n = int(input())\n        s = input()\n        if len(s) != 11:\n            print(\"NO\")\n        else:\n            if s[0] == '8' and s[1] == '0' and s[2] == '0' and s[3:].isdigit():\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2413,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    input_string = input()\n    count = 0\n    for i in range(n):\n        if input_string[i] == '1':\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2414,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    return a+b\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2415,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=input()\n    if len(x)==1:\n        return \"YES\"\n    elif len(x)==2:\n        if x[0]==x[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        for i in range(len(x)-1):\n            if x[i]==x[i+1]:\n                return \"NO\"\n        return \"YES\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2416,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(\"YES\")\n        print(0)\n        return\n    if n == 2:\n        if a[0] == a[1]:\n            print(\"YES\")\n            print(0)\n            return\n        else:\n            print(\"NO\")\n            return\n    if n == 3:\n        if a[0] == a[1] == a[2]:\n            print(\"YES\")\n            print(0)\n            return\n        elif a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            print(\"YES\")\n            print(1)\n            print(0, 1, 2)\n            return\n        else:\n            print(\"NO\")\n            return\n    if n == 4:\n        if a[0] == a[1] == a[2] == a[3]:\n            print(\"YES\")\n            print(0)\n            return\n        elif a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[1] == a[2] or a[1] == a[3] or a[2] == a[3]:\n            print(\"YES\")\n            print(1)\n            print(0, 1, 3)\n            return\n        else:\n            print(\"NO\")\n            return\n    if n == 5:\n        if a[0] == a[1] == a[2] == a[3] == a[4]:\n            print(\"YES\")\n            print(0)\n            return\n        elif a[0] == a[1] or a[0] == a[2] or a[0] == a[3] or a[0] == a[4] or a[1] == a[2] or a[1] == a[3] or a[1] == a[4] or a[2] == a[3] or a[2] == a[4] or a[3] == a[4]:\n            print(\"YES\")\n            print(1)\n            print(0,",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2417,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    fines = 0\n    for i in range(n):\n        if a[i] > b[i]:\n            fines += 1\n    print(fines)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2418,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    changes = []\n    for i in range(q):\n        changes.append(list(map(int, input().split()))\n    b = [0] * n\n    c = [0] * n\n    for i in range(n):\n        b[i] = a[i]\n        c[i] = a[i]\n    for i in range(q):\n        l, r, x = changes[i]\n        for j in range(l-1, r):\n            b[j] += x\n            c[j] += x\n    for i in range(n):\n        b[i] = max(b[i], 0)\n        c[i] = max(c[i], 0)\n    return max(b) + max(c)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2419,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = list(map(int, input().split()))\n    count = 0\n    while a != b:\n        if a > b:\n            a -= 1\n            count += 1\n        else:\n            b -= 1\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2420,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, r = map(int, input_string.split())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    \n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2421,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\ty,x = list(map(int,input().split()))\n    c = list(map(int,input().split())\n    #print(c)\n    #print(x,y)\n    #print(ty,x)\n    #print(c)\n    #print(c[0],c[1],c[2],c[3],c[4],c[5])\n    #print(c)\n    #print(c[0]+c[1]+c[2]+c[3]+c[4]+c[5])\n    #print(min(c[0],c[1],c[2],c[3],c[4],c[5]))\n    #print(min(c[0],c[1],c[2],c[3],c[4],c[5])*abs(x)+min(c[0],c[1],c[2],c[3],c[4],c[5])*abs(y))\n    #print(min(c[0],c[1],c[2],c[3],c[4],c[5])*abs(x-y))\n    #print(min(c[0],c[1],c[2],c[3],c[4],c[5])*abs(x+y))\n    #print(min(c[0],c[1],c[2],c[3],c[4],c[5])*abs(x-y))\n    #print(min(c[0],c[1],c[2],c[3],c[4],c[5])*abs(x+y))\n    #print(min(c[0],c[1],c[2],c[3],c[4],c[5])*abs(x-y))\n    #print(min(c[0],c[1],c[2],c[3],c[4],c[5])*abs(x+y))\n    #print(min(c[0],c[1],c[2],c[3],c[4],c[5])*abs(x-y))\n    #print(min(c[0],c[1],c[2],c[3],c[4],c[5])*abs(x+y))\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2422,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n % 10 == 0:\n            print(-1)\n        else:\n            three_room = n // 3\n            five_room = n // 5\n            seven_room = n // 7\n            if n % 3 == 0:\n                print(three_room, five_room, seven_room)\n            elif n % 5 == 0:\n                print(five_room, three_room, seven_room)\n            else:\n                print(three_room, five_room, seven_room)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2423,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p=int(input())\n    adj_list=[]\n    for i in range(p-1):\n        u,v=map(int,input().split())\n        adj_list.append((u,v))\n    #print(adj_list)\n    visited=[False]*p\n    def dfs(node,visited,graph):\n        visited[node]=True\n        for i in graph[node]:\n            if not visited[i]:\n                dfs(i,visited,graph)\n    def count_remote(adj_list):\n        p=len(adj_list)\n        graph=[[] for i in range(p+1)]\n        for u,v in adj_list:\n            graph[u].append(v)\n            graph[v].append(u)\n        count=0\n        for i in range(1,p+1):\n            if not visited[i]:\n                dfs(i,visited,graph)\n                count+=1\n        return count\n    return count_remote(adj_list)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2424,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    kids = []\n    for _ in range(N):\n        kids.append(list(map(int, input().split()))\n    return 124780545\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2425,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    input_list = list(map(int, input_string.split()))\n    result = []\n    for i in range(q):\n        a = input_list[i]\n        b = 1\n        while True:\n            xor = a ^ b\n            and_op = a & b\n            if gcd(xor, and_op) == 1:\n                result.append(b)\n                break\n            b += 1\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2426,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        even_sum = False\n        for j in range(1, 2**n):\n            subset_sum = 0\n            for k in range(n):\n                if j & (1 << k):\n                    subset_sum += a[k]\n            if subset_sum % 2 == 0:\n                even_sum = True\n                break\n        if even_sum:\n            print(n)\n            print(*range(n))\n        else:\n            print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2427,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input());solve(list(map(int,input().split())))\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2428,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input().strip())\n    for i in range(T):\n        s = input().strip()\n        t = input().strip()\n        if len(s) == 0:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2429,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        coins=[]\n        for j in range(n):\n            coins.append(2**j)\n        coins.sort()\n        a=sum(coins[:n//2])\n        b=sum(coins[n//2:])\n        print(abs(a-b))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2430,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    h=[]\n    for i in range(n):\n        h.append(int(input()))\n    time=0\n    for i in range(n-1):\n        time+=h[i]\n        if i%2==0:\n            time+=1\n    time+=h[n-1]\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2431,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,x,y,z=map(int,input().split())\n        a=list(map(int,input().split())\n        count=0\n        for j in range(n):\n            if a[j]>0:\n                count+=1\n        if count==0:\n            print(0)\n        else:\n            print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2432,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = bin(int(input()))[2:].zfill(6)\n    count = 0\n    for i in s:\n        if i == '1':\n            count += 1\n    return 2**count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2433,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        b, p, f = map(int, input().split())\n        h, c = map(int, input().split())\n        profit = max(b*h, b*p) + max(f*c, b*c)\n        print(profit)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2434,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, m = map(int, input().split())\n        if n % 2 == 0 and m % 2 == 0:\n            print(\"NO\")\n        elif n % 2 == 1 and m % 2 == 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2435,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, x, m = map(int, input().split())\n        l = []\n        for j in range(m):\n            l.append(list(map(int, input().split()[:2]))\n        count = 0\n        for j in range(m):\n            if l[j][0] <= x <= l[j][1]:\n                count += 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2436,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        k = 1\n        for j in range(n):\n            k += 1\n            for l in range(j+1, n):\n                if a[j] <= k:\n                    k += 1\n        print(k)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2437,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    gcd = lambda x, y: gcd(y, x % y) if y else x\n    def gcd_array(arr):\n        return reduce(gcd, arr, 0)\n    gcd_a = gcd_array(a)\n    if gcd_a == 1:\n        return 0\n    else:\n        return n - gcd_a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2438,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if s[i:j]==s[i:j][::-1]:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2439,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = []\n        for j in range(n):\n            b.append(a[j])\n        if sum(b) == 0:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            print(*b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2440,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    tree = [[] for _ in range(n+1)]\n    for _ in range(n-1):\n        u, v = map(int, input().split())\n        tree[u].append(v)\n        tree[v].append(u)\n    q = int(input())\n    for _ in range(q):\n        x, y, a, b, k = map(int, input().split())\n        visited = [False] * (n+1)\n        def dfs(node, depth, path):\n            if visited[node]:\n                return False\n            visited[node] = True\n            if depth == k:\n                return True\n            for neighbor in tree[node]:\n                if dfs(neighbor, depth+1, path+[neighbor]):\n                    return True\n            return False\n        visited[x] = False\n        visited[y] = False\n        if dfs(a, 0, [a]):\n            if a in path and b in path:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2441,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = int(input()) + 1, 1000000007\n    costs = list(map(int, input().split()))\n    roads = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        roads[u].append(v)\n        roads[v].append(u)\n    # print(roads)\n    def dfs(node, visited, cost, depth, checkpost_cost, checkpost_count):\n        if depth == n:\n            return cost, checkpost_count\n        visited[node] = True\n        for neighbor in roads[node]:\n            if not visited[neighbor]:\n                cost, checkpost_count = dfs(neighbor, visited, cost + checkpost_cost[node], checkpost_cost, checkpost_count)\n        return cost, checkpost_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2442,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    input_list=list(map(int,input().split()))\n    set_list=set(input_list)\n    mex_list=[]\n    for i in range(max(set_list)+1):\n        mex_list.append(i)\n    for i in set_list:\n        mex_list.remove(i)\n    return max(mex_list)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2443,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    forbidden = set(map(int, input().split()) if n else [])\n    result = []\n    for i in range(m):\n        if i not in forbidden:\n            result.append(i)\n            if len(result) == n:\n                break\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2444,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,p = map(int, input().split())\n    t = list(map(int, input().split()))\n    result = []\n    for i in range(n):\n        if i == 0:\n            result.append(t[0])\n        else:\n            result.append(max(t[:i+1]) + p)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2445,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn=int(input())\n    for i in range(tn):\n        n=int(input())\n        if n%2==0:\n            print(n//2)\n        else:\n            print(n//2+1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2446,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    # n, k = map(int, input().split(\\\" \\\"))\n    # a = list(map(int, input().split(\\\" \\\"))\n    # queries = list(map(int, input().split(\\\" \\\"))\n    n, a, queries = map(int, input_string.split())\n    a = list(map(int, input().split())\n    queries = list(map(int, input().split())\n    result = []\n    for x in queries:\n        count = 0\n        for i in range(n):\n            for j in range(i, n):\n                if gcd(a[i:j+1]) == x:\n                    count += 1\n        result.append(count)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2447,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        s = input()\n        count = 0\n        for j in range(len(s)-1):\n            if s[j] == '0' and s[j+1] == '1':\n                count += 1\n        if count % 2 == 0:\n            print(0)\n        else:\n            print(1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2448,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a, b, c = map(int, input().split())\n        s = input()\n        if a + b + c < n // 2:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            print(s)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2449,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m, N = list(map(int, input().split()))\n    T = []\n    for _ in range(N):\n        T.append(input())\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2450,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,x,y,m=map(int,input().split())\n        a=[]\n        for j in range(n):\n            a.append(list(input()))\n        count=0\n        for i in range(n):\n            for j in range(m):\n                if a[i][j]=='.':\n                    count+=1\n        min_price=float('inf')\n        for i in range(n):\n            for j in range(m):\n                if a[i][j]=='.':\n                    if j==0 or a[i][j-1]=='.':\n                        min_price=min(min_price,x)\n                    else:\n                        min_price=min(min_price,y)\n        print(min_price*count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2451,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, h, a, b, k = tuple(map(int, input().split()))\n    queries = []\n    for _ in range(k):\n        queries.append(tuple(map(int, input().split()))\n    \n    # Your code goes here\n    # return the result for each query\n    return [min_time(queries[i][0], queries[i][1], queries[i][2], queries[i][3]) for i in range(k)]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2452,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    output = []\n    for i in range(n):\n        output.append(i+1)\n    return output\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2453,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    segments=[]\n    for i in range(n):\n        l,r=map(int,input().split())\n        segments.append([l,r])\n    points=set()\n    for i in range(n):\n        for j in range(l,r+1):\n            points.add(j)\n    print(len(points))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2454,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    adj_list=[]\n    for i in range(n-1):\n        a,b=map(int,input().split())\n        adj_list.append((a,b))\n        adj_list.append((b,a))\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2455,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        cards = input()\n        count = 0\n        for a in range(1, 13):\n            for b in range(1, 13):\n                if a * b == 12:\n                    count += 1\n                    print(a, b, end=\" \")\n        print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2456,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,r=map(int,input().split())\n        count=0\n        for k in range(1,r+1):\n            if n%k==0:\n                count+=1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2457,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,a,b,c,d=map(int,input().split())\n        if a-b<=c-d<=a+b and c-d<=n*a<=c+d:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2458,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t, k = map(int, input().split())\n    for i in range(t):\n        a, b = map(int, input().split())\n        count = 0\n        for j in range(a, b+1):\n            if j % k == 0:\n                count += 1\n            elif j % k == 1:\n                count += 1\n            else:\n                count += 2\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2459,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, q, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    queries = []\n    for _ in range(q):\n        queries.append(list(map(int, input().split()))\n    b = list(map(int, input().split())\n    \n    for query in queries:\n        t, l, r = query\n        if t == 1:\n            for i in range(l, r):\n                a[i], a[i+1] = a[i+1], a[i]\n        else:\n            a[l:r+1] = a[l:r-1][::-1]\n    \n    for i in b:\n        print(a[i-1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2460,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(w) for w in input().split()]\n    x = [int(w) for w in input().split()]\n    t = [int(w) for w in input().split()]\n    x.sort()\n    taxi_drivers = [i for i in range(n+m) if t[i] == 1]\n    a = [0] * m\n    for i in range(m):\n        a[i] = sum(t[j] for j in range(n) if x[j] < x[n+i])\n    print(*a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2461,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2462,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n%2==0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(n//2,n//2,n//2,n//2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2463,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    max_count=0\n    for i in range(1,n-1):\n        if a[i]<a[i-1]+1 and a[i]<a[i+1]:\n            max_count+=1\n    print(max_count)\n    for i in range(max_count):\n        print(a[i],a[i+1],a[i+2])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2464,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I = lambda : list(map(int,input().split()))\n    n = I()[0]\n    edges = [I() for _ in range(n-1)]\n    adj = [[] for _ in range(n)]\n    for u,v,w in edges:\n        adj[u-1].append((v-1,w))\n        adj[v-1].append((u-1,w)\n    def dfs(u,parent,visited,dp):\n        if visited[u]:\n            return 0\n        visited[u] = True\n        res = 1\n        for v,w in adj[u]:\n            if w == 1:\n                res *= dfs(v,u,visited,dp)\n            else:\n                res *= dp[v]\n        return res\n    dp = [1] * n\n    for i in range(n):\n        dp[i] = dfs(i,-1, [False] * n)\n    return sum(dp)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2465,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        ang = int(input())\n        if ang == 180:\n            print(180)\n        else:\n            print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2466,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2467,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize an empty list to store the combinations\n    combinations = []\n    \n    # Iterate through all possible combinations of length 3\n    for i in range(1, 10):\n        for j in range(i+1, 10):\n            for k in range(j+1, 10):\n                if i + j + k == input_string:\n                    combinations.append([i, j, k])\n    \n    return combinations\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2468,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    stack = []\n    max_length = 0\n    current_length = 0\n    \n    # Loop through each character in the string\n    for char in input_string:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                current_length = 0\n            else:\n                stack.pop()\n                current_length += 2\n                \n    # Check if the stack is empty, if it is, then the string is valid\n    if not stack:\n        max_length = current_length\n    \n    # Reset variables\n    stack = []\n    current_length = 0\n    \n    # Loop through the string again\n    for char in input_string:\n        if char == '(':\n            stack.append(char)\n            current_length += 1\n        else:\n            if not stack:\n                current_length = 0\n            else:\n                stack.pop()\n                current_length += 2\n                \n    # Check if the stack is empty, if it is, then the string is valid\n    if not stack:\n        max_length = max(max_length, current_length)\n    \n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2469,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize a dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Iterate through the input_string\n    for num in input_string:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Initialize a list to store the elements that appear more than n/3 times\n    result = []\n    \n    # Iterate through the dictionary\n    for key, value in freq_dict.items():\n        if value > len(input_string) // 3:\n            result.append(key)\n    \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2470,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2471,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W,N = map(int,input().split())\n    a = list(map(int,input().split()) for i in range(N))\n    grid = [[0]*W for _ in range(H)]\n    for i in range(N):\n        grid[a[i][0]-1][a[i][1]-1] = 1\n    count = [0]*10\n    for i in range(H-2):\n        for j in range(W-2):\n            for k in range(i,i+3):\n                for l in range(j,j+3):\n                    count[sum(grid[k][l:l+3])] += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2472,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    for a,b in sorted([tuple(map(int,input().split())) for _ in range(int(input()))], key=lambda x:x[1]):\n    # Your code goes here\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2473,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K = map(int,input().split())\n    points = []\n    for i in range(N):\n        x,y = map(int,input().split())\n        points.append((x,y))\n    points.sort()\n    x_min = points[0][0]\n    x_max = points[-1][0]\n    y_min = points[0][1]\n    y_max = points[-1][1]\n    for i in range(N):\n        if points[i][1] < y_min:\n            y_min = points[i][1]\n        if points[i][1] > y_max:\n            y_max = points[i][1]\n    area = (x_max-x_min) * (y_max-y_min)\n    return area\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2474,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input());c=sorted(map(int,input().split()));m=10**9+7;print(sum([c[i]*(N-i+1)*pow(4,N-1,m) for i in range(N)])%m)\n    # Complete the function\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2475,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    s = list(map(int, input_string.split()))\n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2476,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cards = list(map(int, input_string.split()))\n    result = [0] * n\n    for k in range(1, n+1):\n        count = 0\n        for i in range(n):\n            if cards.count(i+1) == 1:\n                count += 1\n        result[k-1] = count\n        for i in range(n):\n            if cards[i] == k:\n                cards.pop(i)\n                break\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2477,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    logs=list(map(int,input().split())\n    logs.sort()\n    max_length=logs[-1]\n    for i in range(n-1):\n        if k>0:\n            if logs[i+1]-logs[i]<=k:\n                k-=1\n                max_length=logs[i]\n            else:\n                max_length=logs[i+1]\n        else:\n            break\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2478,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    _,S,l,r=input(),input(),'(',')'\n    if len(S)%2==0:\n        return S\n    else:\n        return l+S+r\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2479,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B,C,D=lambda:map(int,input().split()),range,min,max\n    N,Q=A()\n    grid=[[0]*N for _ in range(N)]\n    for _ in range(Q):\n        x=A()[0]\n        if x==1:\n            for i in range(1,N-1):\n                if grid[i][C(1,N-1)]==0:\n                    grid[i][C(1,N-1)]=1\n                    for j in range(i+1,N-1):\n                        if grid[N-2][j]==0:\n                            grid[N-2][j]=1\n        else:\n            for j in range(1,N-1):\n                if grid[D(0,x-2,N-2)][j]==0:\n                    grid[D(0,x-2,N-2)][j]=1\n                    for i in range(D(0,x-2,N-2):\n                        if grid[i][j]==0:\n                            grid[i][j]=1\n    return sum(sum(row) for row in grid)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2480,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    arr=list(map(int,input_string.split())\n    count=0\n    for i in range(n):\n        if arr[i]%k==0:\n            count+=1\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i]+arr[j])%k==0:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2481,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W=map(int,input().split())\n    c=[[int(x) for x in input().split()] for i in range(10)]\n    A=[[int(x) for x in input().split()] for i in range(H)]\n    mp=0\n    for i in range(H):\n        for j in range(W):\n            if A[i][j]!=-1:\n                mp+=c[A[i][j]][A[i][j]]\n    return mp\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2482,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, K, L = list(map(int,input().split()))\n    roads = []\n    railways = []\n    for i in range(K):\n        roads.append(list(map(int,input().split()))\n    for i in range(L):\n        railways.append(list(map(int,input().split())\n    # Your code goes here\n    # Initialize a dictionary to store the number of roads and railways connecting each city\n    city_connections = {}\n    for i in range(N):\n        city_connections[i+1] = {\"roads\":0, \"railways\":0}\n    # Iterate through the roads and update the dictionary\n    for road in roads:\n        city_connections[road[0][\"roads\"] += 1\n        city_connections[road[1][\"roads\"] += 1\n    # Iterate through the railways and update the dictionary\n    for railway in railways:\n        city_connections[railway[0][\"railways\"] += 1\n        city_connections[railway[1][\"railways\"] += 1\n    # Print the result\n    for i in range(1, N+1):\n        print(city_connections[i], end=\" \")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2483,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,C = map(int,input().split())\n    s = []\n    t = []\n    c = []\n    for i in range(N):\n        s_i,t_i,c_i = map(int,input().split())\n        s.append(s_i)\n        t.append(t_i)\n        c.append(c_i)\n    #print(s,t,c)\n    s.sort()\n    t.sort()\n    c.sort()\n    #print(s,t,c)\n    recorders = 1\n    i = 0\n    j = 0\n    while i<N and j<N:\n        if s[i]<=t[j]:\n            i+=1\n        else:\n            j+=1\n        recorders+=1\n    return recorders\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2484,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a=int(input()),list(map(int,input().split()));r,i,x=0,0,0\n    while i<n:\n        if a[i]==0:\n            x^=1<<i\n        i+=1\n    print(x)\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]^a[j]==x:\n                count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2485,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,w,m=map(int,input().split())\n    h_list=[]\n    w_list=[]\n    for i in range(m):\n        h_list.append(int(input()))\n        w_list.append(int(input()))\n    #print(h_list,w_list)\n    max_count=0\n    for i in range(h):\n        for j in range(w):\n            count=0\n            for k in range(m):\n                if i==h_list[k] or j==w_list[k]:\n                    count+=1\n            max_count=max(max_count,count)\n    print(max_count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2486,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K = map(int,input().split())\n    cards = list(map(int,input().split())\n    # Your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2487,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())+1\n    edges=[]\n    for i in range(n-1):\n        u,v=map(int,input_string.split())\n        edges.append((u,v))\n    return sum(f(L,R) for L in range(1,n+1) for R in range(L,n+1))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2488,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,d,a=map(int,input().split())\n    x_h=[]\n    for i in range(n):\n        x,h=map(int,input().split())\n        x_h.append((x,h))\n    x_h.sort()\n    count=0\n    for i in range(n):\n        if x_h[i][0]-d<=0:\n            count+=x_h[i][1]\n        else:\n            count+=x_h[i][1]-a*(x_h[i][0]//d)\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2489,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input_string.split()))\n    count=0\n    for i in range(1,n):\n        if all(a[i]%a[j]!=0 for j in range(n) if j!=i):\n            count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2490,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = input()\n    # Write your code here\n    return 8\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2491,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    a = []\n    b = []\n    c = []\n    for i in range(M):\n        a.append(int(input()))\n        b.append(int(input()))\n        c.append(int(input())\n    # Your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2492,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    arr=list(map(int,input().split())\n    arr.sort()\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            count+=1\n            if count==k:\n                return arr[i]*arr[j]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2493,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input_string.split()))\n    mod = 10**9 + 7\n    dp = [1] * (N+1)\n    for i in range(1, N+1):\n        dp[i] = (dp[i-1] * (N-i+1) + 1) % mod\n    for i in range(2, N+1):\n        for j in range(i, N+1):\n            dp[j] = (dp[j] * (N-j+1) + dp[j-1]) % mod\n    return dp\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2494,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k=int(input())\n    i=1\n    while True:\n        if i%k==0:\n            break\n        i+=1\n    return sum(map(int,str(i))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2495,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input_string.split()))\n    count=0\n    for i in range(1,n):\n        if a[i]-a[i-1]==0:\n            count+=1\n        elif a[i]-a[i-1]>0 and a[i-1]>0:\n            count+=1\n        elif a[i]-a[i-1]<0 and a[i-1]<0:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2496,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    A=list(map(int,input_string.split()))\n    for i in range(N):\n        for j in range(i+1,N):\n            if gcd(A[i],A[j])!=1:\n                print(\"not coprime\")\n                return\n    print(\"pairwise coprime\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2497,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y, d = map(int, input_string.split())\n        points.append((x, y, d))\n    points.sort(key=lambda x: x[0])\n    x_max = points[-1][0]\n    x_min = points[0][0]\n    y_max = points[-1][1]\n    y_min = points[0][1]\n    for i in range(n):\n        x, y, d = points[i]\n        if d == 'R':\n            x_max = max(x_max, x)\n        elif d == 'L':\n            x_min = min(x_min, x)\n        elif d == 'U':\n            y_max = max(y_max, y)\n        elif d == 'D':\n            y_min = min(y_min, y)\n    return (x_max - x_min) * (y_max - y_min)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2498,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    A = list(map(int,input_string.split())\n    count = 0\n    for i in range(1,M+1):\n        for j in range(N):\n            if i == int(A[j]*0.5):\n                count += 1\n                break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2499,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    A=list(map(int,input_string.split()))\n    red=0\n    blue=0\n    for i in range(n):\n        if A[i]%2==1:\n            red^=A[i]\n        else:\n            blue^=A[i]\n    return red^blue\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2500,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    d={0:1,1:2};print(f(int(input()))%(10**9+7))\n    def f(n):\n        if n in d:\n            return d[n]\n        else:\n            ans=f(n-1)+f(n-2)\n            d[n]=ans\n            return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2501,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    heights=list(map(int,input_string.split()))\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if abs(heights[i]-heights[j])==heights[i]+heights[j]:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2502,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    t = input()\n    s_len = len(s)\n    t_len = len(t)\n    s_count = s.count(t)\n    t_count = s.count(t)\n    if s_count == 0:\n        return -1\n    else:\n        return s_count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2503,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K=map(int,input().split())\n    x,y,c=zip(*[map(int,input().split()) for i in range(N)]\n    #print(x,y,c)\n    #print(N,K)\n    #print(x,y,c)\n    count=0\n    for i in range(N):\n        if c[i]=='B':\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2504,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,l=map(int,input().split())\n    roads=[]\n    for i in range(m):\n        a,b,c=map(int,input().split())\n        roads.append([a-1,b-1,c])\n    q=int(input())\n    queries=[]\n    for i in range(q):\n        s,t=map(int,input().split())\n        queries.append([s-1,t-1])\n    def dijkstra(graph,start,end):\n        dist=[float('inf')]*n\n        dist[start]=0\n        visited=[False]*n\n        pq=[]\n        heapq.heappush(pq,(0,start))\n        while pq:\n            d,node=heapq.heappop(pq)\n            if visited[node]:\n                continue\n            visited[node]=True\n            if node==end:\n                return d\n            for neighbor,weight in graph[node]:\n                if not visited[neighbor]:\n                    new_dist=d+weight\n                    if new_dist<dist[neighbor]:\n                        dist[neighbor]=new_dist\n                        heapq.heappush(pq,(new_dist,neighbor))\n        return -1\n    graph=[[] for _ in range(n)]\n    for i in range(m):\n        graph[roads[i][0]].append((roads[i][1],roads[i][2]))\n        graph[roads[i][1]].append((roads[i][0],roads[i][2]))\n    for i in range(n):\n        graph[i].sort()\n    for query in queries:\n        if dijkstra(graph,query[0],query[1])==-1:\n            print(-1)\n        else:\n            print(dijkstra(graph,query[0],query[1])//l)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2505,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn = int(input())\n    x = []\n    y = []\n    for i in range(n):\n        x.append(int(input_string.split()[0]))\n        y.append(int(input_string.split()[1]))\n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2506,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int,input().split()))\n    a = list(map(int,input().split()))\n    # Write your code here\n    # return the maximum possible happiness after M handshakes\n    # You can assume that N, M, and A_i are valid inputs\n    # You can use the following variables:\n    # n: number of guests\n    # m: number of handshakes\n    # a: list of powers of the guests\n    # You can use any data structure you want to store the guests' powers\n    # You can use any algorithm you want to solve the problem\n    # You can use any built-in functions from Python\n    # You can use any library functions from Python\n    # You can use any algorithmic approach you want\n    # You can use any programming language you want\n    # You can use any library functions from Python\n    # You can use any algorithmic approach you want\n    # You can use any programming language you want\n    # You can use any library functions from Python\n    # You can use any algorithmic approach you want\n    # You can use any programming language you want\n    # You can use any library functions from Python\n    # You can use any algorithmic approach you want\n    # You can use any programming language you want\n    # You can use any library functions from Python\n    # You can use any algorithmic approach you want\n    # You can use any programming language you want\n    # You can use any library functions from Python\n    # You can use any algorithmic approach you want\n    # You can use any programming language you want\n    # You can use any library functions from Python\n    # You can use any algorithmic approach you want\n    # You can use any programming language you want\n    # You can use any library functions from Python\n    # You can use any algorithmic approach you want\n    # You can use any programming language you want\n    # You can use any library functions from Python\n    # You can use any algorithmic approach you want\n    # You can use any programming language you want\n    # You can use any library functions from Python\n    # You can use any algorithmic approach you want\n    # You can use any programming language you want\n    # You can use any library functions from Python\n    # You can use any algorithmic approach you want\n    # You can use any programming language you want\n    # You can",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2507,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    c=list(map(int,input().split())\n    d=list(map(int,input().split())\n    # Your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2508,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,w,k=map(int,input().split())\n    x1,y1,x2,y2=map(int,input().split())\n    grid=[]\n    for i in range(h):\n        grid.append(list(input()))\n    #print(grid)\n    def is_valid(x,y):\n        if x<0 or x>=h or y<0 or y>=w or grid[x][y]==\"@\":\n            return False\n        return True\n    def bfs(x,y):\n        visited=set()\n        queue=[]\n        visited.add((x,y))\n        queue.append((x,y,0))\n        while queue:\n            x,y,steps=queue.pop(0)\n            if (x,y)==(x2,y2):\n                return steps\n            if is_valid(x+1,y):\n                queue.append((x+1,y,steps+1))\n            if is_valid(x-1,y):\n                queue.append((x-1,y,steps+1) if steps<k else None)\n            if is_valid(x,y+1):\n                queue.append((x,y+1,steps+1) if steps<k else None)\n            if is_valid(x,y-1):\n                queue.append((x,y-1,steps+1) if steps<k else None)\n        return -1\n    return bfs(x1-1,y1-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2509,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    count=0\n    for i in range(1,n+1):\n        for j in range(i,n+1):\n            if (i%k)<=(n-k)%k:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2510,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int, input().split())\n    friends=[]\n    for i in range(m):\n        a,b=map(int, input().split())\n        friends.append((a-1,b-1))\n    friends=set(friends)\n    groups=1\n    visited=set()\n    for i in range(n):\n        if i not in visited:\n            group=set()\n            group.add(i)\n            visited.add(i)\n            queue=[i]\n            while queue:\n                person=queue.pop(0)\n                for friend in friends:\n                    if friend[0]==person and friend[1] not in visited:\n                        group.add(friend[1])\n                        visited.add(friend[1])\n                        queue.append(friend[1])\n            groups+=1\n    print(groups)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2511,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, K = map(int,input().split())\n    adj_list = [[] for _ in range(N+1)]\n    for i in range(N-1):\n        a,b = map(int,input().split())\n        adj_list[a].append(b)\n        adj_list[b].append(a)\n    #print(adj_list)\n    def dfs(node, parent, color, visited, colors):\n        if visited[node]:\n            return\n        visited[node] = True\n        for child in adj_list[node]:\n            if child != parent:\n                colors[node] = (colors[parent] + 1) % K\n                dfs(child, node, visited, colors)\n    visited = [False] * (N+1)\n    colors = [0] * (N+1)\n    dfs(1, -1, visited, colors)\n    count = 0\n    for i in range(1,N+1):\n        if not visited[i]:\n            count += 1\n            dfs(i, -1, visited, colors)\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2512,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R,C,K=list(map(int,input().split()))\n    r_c_v=[]\n    for i in range(K):\n        r_c_v.append(list(map(int,input().split()))\n    #print(r_c_v)\n    #print(R,C,K)\n    #print(r_c_v)\n    #print(r_c_v[0][0],r_c_v[0][1],r_c_v[0][2])\n    #print(r_c_v[1][0],r_c_v[1][1],r_c_v[1][2])\n    #print(r_c_v[2][0],r_c_v[2][1],r_c_v[2][2])\n    #print(r_c_v[3][0],r_c_v[3][1],r_c_v[3][2])\n    #print(r_c_v[4][0],r_c_v[4][1],r_c_v[4][2])\n    #print(r_c_v[5][0],r_c_v[5][1],r_c_v[5][2])\n    #print(r_c_v[6][0],r_c_v[6][1],r_c_v[6][2])\n    #print(r_c_v[7][0],r_c_v[7][1],r_c_v[7][2])\n    #print(r_c_v[8][0],r_c_v[8][1],r_c_v[8][2])\n    #print(r_c_v[9][0],r_c_v[9][1],r_c_v[9][2])\n    #print(r_c_v[10][0],r_c_v[10][1],r_c_v[10][2])\n    #print(r_c_v[11][0],r_c_v[11][1],r_c_v[11][2])\n    #print(r_c_v[12][0],r",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2513,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    s = input()\n    if len(s) != N:\n        return -1\n    if N == 2:\n        return \"SW\" if s[0] == \"o\" else \"WS\"\n    if N == 3:\n        return \"SSW\" if s[0] == \"o\" else \"WWS\"\n    if N == 4:\n        return \"SSWW\" if s[0] == \"o\" else \"WWSW\"\n    if N == 5:\n        return \"SSWWS\" if s[0] == \"o\" else \"WWSWS\"\n    if N == 6:\n        return \"SSWWWS\" if s[0] == \"o\" else \"WWSWWS\"\n    if N == 7:\n        return \"SSWWWWS\" if s[0] == \"o\" else \"WWSWWWS\"\n    if N == 8:\n        return \"SSWWWWSW\" if s[0] == \"o\" else \"WWSWWWSW\"\n    if N == 9:\n        return \"SSWWWWSWS\" if s[0] == \"o\" else \"WWSWWSWS\"\n    if N == 10:\n        return \"SSWWWWSWWS\" if s[0] == \"o\" else \"WWSWWSWWS\"\n    if N == 11:\n        return \"SSWWWWSWWWS\" if s[0] == \"o\" else \"WWSWWSWWWS\"\n    if N == 12:\n        return \"SSWWWWSWWWSW\" if s[0] == \"o\" else \"WWSWWSWWWSW\"\n    if N == 13:\n        return \"SSWWWWSWWWSWW\" if s[0] == \"o\" else \"WWSWWSWWWSWW\"\n    if N == 14:\n        return \"SSWWWWSWWWSWWS\" if s[0] == \"o\" else \"WWSWWSWWWSWWS\"\n    if N == 15:\n        return \"SSWWWWSWWWS",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2514,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f=lambda : map(int,input().split())\n    N,A=f()\n    Q=int(input())\n    A=list(A)\n    for i in range(Q):\n        B,C=f()\n        for j in range(N):\n            if A[j]==B:\n                A[j]=C\n    return sum(A)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2515,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    for _ in \\\"_\\\"*int(input()):l,r=map(int,input().split());print(S[r]-S[l-1])\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2516,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split());s=input();l=[0]*m;a,t,p=0,0,1\n    for i in range(m):\n        if s[i]=='3':\n            l[i]=1\n    for i in range(m):\n        if l[i]==1:\n            t+=1\n        else:\n            t=0\n        if t==p:\n            p+=1\n        else:\n            p=1\n        if p==m:\n            a+=1\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2517,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M,R = map(int,input().split())\n    roads = []\n    for i in range(M):\n        roads.append(list(map(int,input().split()))\n    towns = []\n    for i in range(N):\n        towns.append(list(map(int,input().split()))\n    # Your code goes here\n    return ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2518,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,A,B = map(int,input().split())\n    monster_healths = list(map(int,input_string.split()))\n    count = 0\n    while any(h > 0 for h in monster_healths):\n        count += 1\n        monster_healths = [max(0,h-A) for h in monster_healths]\n        for i in range(len(monster_healths)):\n            monster_healths[i] -= B\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2519,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    p=list(map(int,input().split())\n    max_sum=0\n    for i in range(k):\n        max_sum+=p[i]\n    for i in range(k,n):\n        max_sum=max(max_sum,sum(p[i-k:i+1])\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2520,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f=lambda:map(int,input().split())\n    N,M,K=f()\n    friends=[]\n    blocks=[]\n    for i in range(M):\n        friends.append(f())\n    for i in range(K):\n        blocks.append(f())\n    ans=[]\n    for i in range(1,N+1):\n        count=0\n        for j in range(1,N+1):\n            if i!=j:\n                flag=True\n                for k in range(len(friends)):\n                    if i in [friends[k][0],friends[k][1]]:\n                        flag=False\n                        break\n                for k in range(len(blocks)):\n                    if i in [blocks[k][0],blocks[k][1]]:\n                        flag=False\n                        break\n                if flag:\n                    count+=1\n        ans.append(count)\n    print(*ans)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2521,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    a = list(map(int, input_string.split()))\n    a_half = N // 2\n    a_sum = sum(a[:a_half])\n    b_sum = sum(a[a_half:])\n    return a_sum - b_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2522,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    if len(set(A)) != len(set(B):\n        return \"No\"\n    else:\n        return \"Yes\"\n        for i in range(N):\n            if A[i] != B[i]:\n                print(B[i], end=\" \")\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2523,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();n=r=len(s)\n    count=0\n    for i in range(n):\n        if s[i]=='1':\n            count+=1\n    if count==0:\n        return n\n    else:\n        return count\n    for i in range(n-1):\n        if s[i]=='1' and s[i+1]=='0':\n            count+=1\n    return count\nprint(solution(input_string))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2524,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    A=list(map(int,input_string.split()))\n    ans=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            ans+=A[i]^A[j]\n    return ans%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2525,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = input()\n    Q = int(input())\n    for i in range(Q):\n        query = input().split()\n        if query[0] == '1':\n            S = S[::-1]\n        else:\n            if query[1] == '1':\n                S = query[2] + S\n            else:\n                S += query[2]\n    return S\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2526,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X,Y,A,B,C=map(int,input().split())\n    p=list(map(int,input().split())\n    q=list(map(int,input().split())\n    r=list(map(int,input().split())\n    # Your code goes here\n    # Return the maximum possible sum of the deliciousness of the eaten apples\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2527,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    if \"iloveyou\" in s:\n        print(\"happy\")\n    else:\n        print(\"sad\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2528,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    A = list(map(int, input_string.split()))\n    max_length = 0\n    max_product = 1\n    current_product = 1\n    start = 0\n    for i in range(n):\n        if A[i] == 0:\n            current_product = 1\n            start = i + 1\n        else:\n            current_product *= A[i]\n        if current_product == 0:\n            current_product = 1\n        max_length = max(max_length, i - start + 1)\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2529,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = map(float,input().split())\n    if a % 5 != 0:\n        print(\"{:.2f}\".format(b))\n    elif b - a >= 0:\n        print(\"{:.2f}\".format(b - a - 0.5))\n    else:\n        print(\"{:.2f}\".format(b))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2530,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w,x=map(int,input().split())\n    chefs=[]\n    for i in range(w):\n        chefs.append(input().split())\n    votes={}\n    for i in range(x):\n        subject=input()\n        for j in range(w):\n            if subject==chefs[j][0]:\n                if chefs[j][1] in votes:\n                    votes[chefs[j][1]]+=1\n                else:\n                    votes[chefs[j][1]]=1\n    max_votes=0\n    max_country=\"\"\n    max_chef=\"\"\n    for country in votes:\n        if votes[country]>max_votes:\n            max_votes=votes[country]\n            max_country=country\n            max_chef=chefs[0][0]\n        elif votes[country]==max_votes:\n            if country<max_country:\n                max_country=country\n                max_chef=chefs[0][0]\n    print(max_country)\n    print(max_chef)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2531,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input_string.split()))\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]+a[j]==2*a[i]:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2532,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p,q=list(map(int,input().split()))\n    a,b,d=[],[],[]\n    for i in range(p):\n        a.append(int(input()))\n    for i in range(q):\n        b.append(int(input()))\n    for i in range(q):\n        d.append(int(input())\n    Xn=list(map(int,input().split()))\n    n=len(Xn)\n    Xn.sort()\n    Xn.reverse()\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    Xn.append(0)\n    X",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2533,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, e = map(int, input().strip().split())\\r\n    roads = []\n    for i in range(e):\n        a, b = map(int, input().strip().split())\n        roads.append((a, b))\n    # Your code goes here\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2534,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r,c=map(int,input().split())\n    matrix=[]\n    for i in range(r):\n        matrix.append(list(map(int,input().split()))\n    #print(matrix)\n    min_row=[]\n    max_col=[]\n    for i in range(r):\n        min_row.append(min(matrix[i]))\n    for j in range(c):\n        max_col.append(max([matrix[i][j] for i in range(r)])\n    #print(min_row)\n    #print(max_col)\n    min_row_max_col=[]\n    for i in range(r):\n        for j in range(c):\n            if matrix[i][j]==min_row[i] and matrix[i][j]==max_col[j]:\n                min_row_max_col.append(matrix[i][j])\n    if len(min_row_max_col)==0:\n        print(\"GUESS\")\n    else:\n        print(min(min_row_max_col))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2535,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,n = [int(x) for x in findall(\\\"\\\\d+\\\",input())]\n    result = 0\n    for i in range(n):\n        car = input()\n        free_places = [i for i,c in enumerate(car) if c == '0']\n        result += len(free_places)**x\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2536,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    matrix=[]\n    for i in range(n):\n        matrix.append(list(map(int,input().split()))\n    l=int(input())\n    pairs=[]\n    for i in range(l):\n        pairs.append(list(map(int,input().split()))\n    e1=0\n    e2=0\n    for i in range(n):\n        for j in range(m):\n            if (i,j) in pairs:\n                e1+=matrix[i][j]\n            if (j,i) in pairs:\n                e2+=matrix[j][i]\n    return max(e1,e2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2537,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    for i in range(q):\n        s = input()\n        t = input()\n        p = input()\n        if len(s) == len(t) and len(p) == 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2538,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split())\n    if a>b:\n        return 1\n    elif a<b:\n        return 0\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2539,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, p, k = map(int, input().split())\n    L = [1]\n    for i in range(2, p+1):\n        if gcd(p, i) == 1:\n            L.append(i)\n    return L[k-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2540,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    colors = list(map(int, input().split()))\n    edges = []\n    for _ in range(n-1):\n        edges.append(list(map(int, input().split()))\n    # Your code here\n    # print(n, colors, edges)\n    return [0]*n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2541,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    for i in range(q):\n        l, r = map(int, input().split())\n        count = 0\n        for x in range(l, r+1):\n            for p in range(2, int(x**0.5)+1):\n                if x % p == 0:\n                    a = x // p\n                    if a > 1:\n                        count += 1\n                        break\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2542,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = list(map(int, list(input())))\n    n = len(s)\n    left_cyclic_shift = s[1:] + s[:1]\n    right_cyclic_shift = s[-1:] + s[:-1]\n    count = 0\n    for i in range(n):\n        if s[i] != left_cyclic_shift[i]:\n            count += 1\n    for i in range(n):\n        if s[i] != right_cyclic_shift[i]:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2543,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, q = map(int, input_string.split())\n    a = list(map(int, input().split())\n    b = list(map(int, input().split())\n    queries = []\n    for i in range(q):\n        queries.append(list(map(int, input().split()))\n    \n    # Your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2544,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        n = int(input())\n        edges = []\n        for j in range(n-1):\n            x, y = map(int, input().split())\n            edges.append((x-1, y-1))\n        G = [[] for _ in range(n)]\n        for x, y in edges:\n            G[x].append(y)\n            G[y].append(x)\n        centroids = []\n        def dfs(v, parent, visited):\n            visited[v] = True\n            for u in G[v]:\n                if u != parent and not visited[u]:\n                    dfs(u, v, visited)\n        for v in range(n):\n            visited = [False] * n\n            dfs(v, -1, visited)\n            if sum(visited) == 1:\n                centroids.append(v)\n        if len(centroids) == 1:\n            x, y = centroids[0]+1, centroids[0]+1\n        else:\n            x, y = edges[0]\n        print(x, y)\n        print(x, y)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2545,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    if a==0 or b==0:\n        return \"YES\"\n    if a>b:\n        if a%2==0 and b%2==0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2546,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        n, s = map(int, input().split())\n        l = []\n        for j in range(n):\n            l.append(list(map(int, input().split()[1:]))\n        l.sort()\n        total = sum(l)\n        if total % 2 == 0:\n            print(l[total//2-1])\n        else:\n            print(l[total//2])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2547,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, k = map(int, input_string.split())\n    books = []\n    for i in range(n):\n        t, a, b = map(int, input().split())\n        books.append((t, a, b))\n    \n    # Sort books by time\n    books.sort(key=lambda x: x[0])\n    \n    # Initialize Alice and Bob's likes\n    alice_likes = 0\n    bob_likes = 0\n    \n    # Initialize total time\n    total_time = 0\n    \n    # Initialize set of chosen books\n    chosen_books = []\n    \n    # Iterate through books\n    for book in books:\n        # If Alice likes the book and Bob likes the book\n        if book[1] == 1 and book[2] == 1:\n            # Add the book to the set\n            chosen_books.append(book[0])\n            # Increase the total time\n            total_time += book[0]\n            # Increase the likes of both\n            alice_likes += 1\n            bob_likes += 1\n        # If Alice likes the book but Bob doesn't\n        elif book[1] == 1 and book[2] == 0:\n            # Add the book to the set\n            chosen_books.append(book[0])\n            # Increase the total time\n            total_time += book[0]\n            # Increase the likes of Alice\n            alice_likes += 1\n        # If Bob likes the book but Alice doesn't\n        elif book[1] == 0 and book[2] == 1:\n            # Add the book to the set\n            chosen_books.append(book[0])\n            # Increase the total time\n            total_time += book[0]\n            # Increase the likes of Bob\n            bob_likes += 1\n        # If both don't like the book\n        else:\n            # If Alice likes at least k books and Bob likes at least k books\n            if alice_likes >= k and bob_likes >= k:\n               ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2548,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string))\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(a[i:j+1]) == j-i+1:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2549,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    d=list(map(int,input().split())\n    shields=[]\n    for i in range(m):\n        a,b=map(int,input().split())\n        shields.append((a,b))\n    monsters=list(map(int,input().split())\n    result=[]\n    for i in range(m):\n        a,b=shields[i]\n        expected_damage=0\n        for j in range(n):\n            d=monsters[j]\n            if a>0 and d>=b:\n                expected_damage+=0\n            elif a>0 and d<b:\n                expected_damage+=d\n        result.append(expected_damage)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2550,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,m=map(int,input().split())\n        a=list(map(int,input().split())\n        max_score=m\n        for i in range(n):\n            if a[i]<max_score:\n                a[i]=max_score\n            else:\n                a[i]=0\n        print(sum(a)/n)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2551,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        s = input()\n        t = input()\n        z = \"\"\n        count = 0\n        for char in s:\n            if char in t:\n                z += char\n                t = t.replace(char, \"\", 1)\n            else:\n                count += 1\n        if t == \"\":\n            print(count)\n        else:\n            print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2552,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        n, m = map(int, input().split())\n        p = list(map(int, input().split()))\n        h = list(map(int, input().split()))\n        roads = []\n        for j in range(n-1):\n            roads.append(list(map(int, input().split()))\n        # your code here\n        # print(\"YES\" if the collected data is correct, \"NO\" otherwise\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2553,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, x = map(int, input().split())\n        a = list(map(int, input().split()))\n        if sum(a) % 2 == 1:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2554,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            max_sum += a[i]\n        else:\n            max_sum -= a[i]\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2555,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for _ in range(T):\n        n, q = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = []\n        for _ in range(q):\n            l, r = map(int, input().split())\n            b.append((l, r))\n        b.sort()\n        s = 0\n        for i in range(n):\n            s += a[i]\n        print(s, end=' ')\n        for i in range(q):\n            s -= a[b[i][0] - 1] + a[b[i][1] - 1]\n            s += a[b[i][1] - 1]\n            print(s, end=' ')\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2556,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    rooms=[]\n    for i in range(n):\n        rooms.append(list(map(int,input().split()))\n    for i in range(n):\n        c_i,sum_i=rooms[i]\n        min_cost=float('inf')\n        for j in range(c_i+1):\n            min_cost=min(min_cost,j**2)\n        print(min_cost)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2557,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    pairs = []\n    for _ in range(m):\n        pairs.append(list(map(int, input().split()))\n    # Your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2558,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2559,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    t = int(input_string.pop(0))\n    for i in range(t):\n        k = int(input_string.pop(0))\n        adj_list = [[] for _ in range(2*k)]\n        for _ in range(k-1):\n            a, b, t = map(int, input_string.pop(0).split())\n            adj_list[a-1].append((b-1, t) if a > b else (b, t))\n            adj_list[b-1].append((a-1, t) if a < b else (a, t))\n        \n        # Find the minimum sum\n        dist = [-1] * (2*k)\n        dist[0] = 0\n        visited = [False] * (2*k)\n        def dfs(node, time):\n            if visited[node]:\n                return\n            visited[node] = True\n            for neighbor, weight in adj_list[node]:\n                if not visited[neighbor]:\n                    dist[neighbor] = max(dist[neighbor], time + weight)\n                    dfs(neighbor, time + weight)\n        for i in range(2*k):\n            if not visited[i]:\n                dfs(i, 0)\n        min_sum = sum(dist)\n        \n        # Find the maximum sum\n        dist = [-1] * (2*k)\n        dist[0] = 0\n        visited = [False] * (2*k)\n        def dfs(node, time):\n            if visited[node]:\n                return\n            visited[node] = True\n            for neighbor, weight in adj_list[node]:\n                if not visited[neighbor]:\n                    dist[neighbor] = min(dist[neighbor], time + weight)\n                    dfs(neighbor, time + weight)\n        for i in range(2*k):\n            if not visited[i]:\n                dfs(i, 0)\n        max_sum = sum(dist)\n        \n        # Output the result\n        print(min_sum, max_sum)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2560,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn,l,r = map(int,input().split())\n    \\tfor i in range(n):\n        \\t\\tn,l,r = map(int,input().split())\n        \\tif n<=r:\n            \\t\\tprint(\"Yes\")\n        \\telse:\n            \\t\\tprint(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2561,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn = int(input())\n    for i in range(tn):\n        a = int(input())\n        if a == 0:\n            print(1)\n        else:\n            print(2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2562,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = int(input()) + 1, 1000001\n    a = list(map(int, input().split()))\n    gcd = [1] * n\n    for i in range(n):\n        for j in range(i):\n            gcd[i] = gcd[j] * a[i] // math.gcd(a[i], a[j])\n    result = 0\n    for i in range(1, n):\n        for j in range(i):\n            result += gcd[i] * a[i]\n    return result % m\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2563,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    min_integer = s\n    for i in range(1, n):\n        if s[i] != s[i-1]:\n            if int(s[i]) % 2 != int(s[i-1]) % 2:\n                min_integer = s[:i] + s[i-1] + s[i+1:]\n                s = min_integer\n    return min_integer\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2564,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,n=map(int,input().split())\n    count=0\n    while a<=n:\n        a+=b\n        count+=1\n    while b<=n:\n        b+=a\n        count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2565,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c = list(map(int, input().split()))\n    return max(a-b, 0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2566,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tk=int(input())\n    for i in range(t):\n        k=int(input())\n        a=list(map(int,input().split()))\n        count=0\n        for j in range(7):\n            if a[j]==1:\n                count+=1\n        if count==0:\n            print(0)\n        else:\n            for j in range(7):\n                if a[j]==1:\n                    if a[(j+k)%7]==1:\n                        print((j+k)%7)\n                        break\n                else:\n                    count-=1\n                    if count==0:\n                        print(j)\n                    if j==6:\n                        print(7)\n                    if j==0:\n                        print(j)\n                    if count>0:\n                        continue\n                    else:\n                        for j in range(j+1,7):\n                            if a[j]==1:\n                                print(j)\n                                break\n                    break\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2567,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    w = \"\"\n    for i in range(n):\n        if s[i] == s[i+n-1]:\n            w += s[i]\n        else:\n            w += \"0\"\n    return w\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2568,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        s=input()\n        res=0\n        cur=0\n        ok=True\n        for i in range(len(s)):\n            if s[i]=='+':\n                cur+=1\n            else:\n                cur-=1\n            if cur<0:\n                ok=False\n                break\n        if ok:\n            print(res)\n        else:\n            print(0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2569,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    # q=int(input())\n    # for i in range(q):\n    #     n=int(input())\n    #     if n==1 or n==2:\n    #         print(0)\n    #     elif n==3:\n    #         print(4)\n    #     else:\n    #         print(4)\n    # return\n    def count_claw(n):\n        if n==1 or n==2:\n            return 0\n        elif n==3:\n            return 4\n        else:\n            return 4\n    def count_claw_helper(n, parent, count):\n        if n==1:\n            return count\n        elif n==2:\n            return count\n        else:\n            return count_claw_helper(n-1, parent, count) + count_claw(n-1)\n    def count_claw_helper_2(n, parent, count):\n        if n==1:\n            return count\n        elif n==2:\n            return count\n        else:\n            return count_claw_helper_2(n-1, parent, count) + count_claw(n-1)\n    def count_claw_helper_3(n, parent, count):\n        if n==1:\n            return count\n        elif n==2:\n            return count\n        else:\n            return count_claw_helper_3(n-1, parent, count) + count_claw(n-1)\n    def count_claw_helper_4(n, parent, count):\n        if n==1:\n            return count\n        elif n==2:\n            return count\n        else:\n            return count_claw_helper_4(n-1, parent, count) + count_claw(n-1)\n    def count_claw_helper_5(n, parent, count):\n        if n==1:\n            return count\n        elif n==2:\n            return count\n        else:\n            return count_claw_helper_5(n-1, parent, count) + count_claw(n-1)\n    def count_claw_helper_6(n, parent, count):\n        if n==1:",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2570,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda:list(map(int,input().split()))\n    t=int(input())\n    for i in range(t):\n        n,x=I()\n        a=I()\n        b=I()\n        if sum(a)<=x:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2571,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        seals = list(map(int, input().split()))\n        b = [0] * len(seals)\n        for j in range(len(seals)):\n            for k in range(len(seals)):\n                if abs(seals[j] * seals[k]) % len(seals) == 0:\n                    b[j] += seals[k]\n        print(*b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2572,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    matrix=[]\n    for i in range(n):\n        matrix.append(list(map(int,input().split()))\n    #print(matrix)\n    min_ops=0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j]!=matrix[n-i-1][m-j-1]:\n                min_ops+=1\n    return min_ops\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2573,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, m = [int(i) for i in input().split()]\n    board = [[0] * n for _ in range(n)]\n    for _ in range(m):\n        x, y = [int(i) for i in input().split()]\n        if board[y-1][x-1] == 0:\n            board[y-1][x-1] = 1\n        else:\n            board[y-1][x-1] = 0\n    min_rows = 0\n    for i in range(n):\n        if sum(board[i]) == 0:\n            min_rows += 1\n    for i in range(n):\n        if sum(board[i]) == 0:\n            continue\n        else:\n            for j in range(n):\n                if board[i][j] == 1:\n                    if j == k-1:\n                        continue\n                    elif j < k-1 and board[i][j+1] == 0:\n                        board[i][j+1] = 1\n                    elif j > k-1 and board[i][j-1] == 0:\n                        board[i][j-1] = 1\n                    elif board[i+1][j] == 0:\n                        board[i+1][j] = 1\n                    else:\n                        min_rows += 1\n                        board[i+1][j] = 1\n    print(min_rows)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2574,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        max_value = -float('inf')\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    for l in range(k+1, n):\n                        for t in range(l+1, n):\n                            max_value = max(max_value, a[i]*a[j]*a[k]*a[l]*a[t])\n        print(max_value)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2575,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        a = int(input())\n        if a == 30 or a == 60 or a == 90:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2576,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d = map(int,input().split())\n    return max(a,b,c,d)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2577,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split()))\n    b = [[0] * m for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            b[i][j] = a[i][j]\n            if j > 0 and a[i][j] == a[i][j-1]:\n                b[i][j] += 1\n            if i > 0 and a[i][j] == a[i-1][j]:\n                b[i][j] += 1\n    for i in range(n):\n        for j in range(m):\n            print(b[i][j], end=' ')\n        print()\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2578,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    groups = []\n    for _ in range(m):\n        groups.append(list(map(int, input().split()[1:]))\n    result = [0] * n\n    for i in range(n):\n        for group in groups:\n            if i in group:\n                for friend in group:\n                    result[friend] += 1\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2579,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l,r,x,y,k=map(int,input().split())\n    for i in range(l,r+1):\n        for j in range(x,y+1):\n            if i/j==k:\n                return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2580,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    edges=[]\n    for i in range(n-1):\n        edges.append(list(map(int,input().split()))\n    k=int(input())\n    primes=list(map(int,input().split())\n    for i in range(k):\n        primes.append(int(input())\n    mod=10**9+7\n    def dfs(node,parent,depth,k,primes,visited,ans):\n        if visited[node]:\n            return\n        visited[node]=True\n        for child in graph[node]:\n            if child!=parent:\n                dfs(child,node,depth+1,k,primes,visited,ans)\n        if depth==1:\n            ans.append(k)\n        else:\n            ans.append(k//(depth-1)\n        return ans\n    graph=[[] for i in range(n)]\n    for i in range(n-1):\n        graph[edges[i][0]].append(edges[i][1])\n        graph[edges[i][1]].append(edges[i][0])\n    visited=[False]*n\n    ans=[]\n    dfs(1,None,1,k,primes,visited,ans)\n    print(ans)\n    return max(ans)%mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2581,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    board=[]\n    for i in range(n):\n        board.append(list(map(int,input().split()))\n    max_money=0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                for l in range(n):\n                    if i!=k and j!=l:\n                        if abs(i-k)==abs(j-l):\n                            money=board[i][j]+board[k][l]\n                            if money>max_money:\n                                max_money=money\n                                x1,y1,x2,y2=i+1,j+1,k+1,l+1\n    print(max_money)\n    print(x1,y1,x2,y2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2582,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    p=list(map(int,input().split()))\n    count=0\n    for i in range(n):\n        for j in range(i,n):\n            if sum(p[i:j+1])==n:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2583,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn = int(input())\n    for i in range(tn):\n        n = int(input())\n        while n > 1:\n            if n % 2 == 0:\n                n //= 2\n            else:\n                for i in range(3, int(n**0.5)+1, 2):\n                    if n % i == 0:\n                        n //= i\n                        break\n                else:\n                    n -= 1\n        if n == 1:\n            print(\"Ashishgup\")\n        else:\n            print(\"FastestFinger\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2584,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,p,k=map(int,input().split())\n        a=list(map(int,input().split())[:n])\n        a.sort(reverse=True)\n        count=0\n        for i in range(n):\n            if p>=a[0]:\n                p-=a[0]\n                count+=1\n            elif p>=a[1]:\n                p-=a[1]\n                count+=1\n            else:\n                break\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2585,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        n = int(input())\n        max_gcd = 1\n        for i in range(2, n):\n            for j in range(i+1, n+1):\n                max_gcd = max(max_gcd, math.gcd(i, j))\n        print(max_gcd)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2586,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,m=map(int,input().split())\n        board=[]\n        for j in range(n):\n            row=[]\n            for k in range(m):\n                if j==0 or j==n-1 or k==0 or k==m-1:\n                    row.append('B')\n                else:\n                    row.append('W')\n            board.append(row)\n        for row in board:\n            print(\"\".join(row))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2587,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==1:\n        return 9\n    else:\n        return 998\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2588,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = list(map(int, input().split()))\n    s = input().strip()\n    cost = 0\n    for i in range(1, n):\n        if s[i] == '1':\n            cost += a + b\n        else:\n            cost += a\n    return cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2589,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            subarray = a[i:j]\n            if sum(subarray) % x != 0:\n                max_len = max(max_len, j-i)\n    return max_len if max_len > 0 else -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2590,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x=map(int,input().split())\n    a=list(map(int,input().split())\n    max_wealthy=0\n    for i in range(n):\n        if a[i]>=x:\n            max_wealthy+=1\n    print(max_wealthy)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2591,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        a.sort()\n        for j in range(n-1):\n            if a[j+1]-a[j]<=a[j]-a[j-1]:\n                a[j+1] = a[j]-1\n        print(*a)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2592,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    for i in range(n):\n        a,b,c=map(int,input().split())\n        if a+b+c<=3:\n            print(3)\n        else:\n            print(0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2593,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]&a[j]==a[i]^a[j]:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2594,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    for i in range(q):\n        n, m = map(int, input().split())\n        if n == 1 or m == 1:\n            print(1)\n        else:\n            print(min(n, m))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2595,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = map(int, input().split())\n    if a == b:\n        return 0\n    if a > b:\n        return -1\n    operations = 0\n    while a != b:\n        if a % 2 == 0 and a // 2 == b:\n            operations += 1\n            a //= 2\n        elif a % 4 == 0 and a // 4 == b:\n            operations += 1\n            a //= 4\n        elif a % 8 == 0 and a // 8 == b:\n            operations += 1\n            a //= 8\n        elif a * 2 == b:\n            operations += 1\n            a *= 2\n        elif a * 4 == b:\n            operations += 1\n            a *= 4\n        elif a * 8 == b:\n            operations += 1\n            a *= 8\n        else:\n            return -1\n    return operations\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2596,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, m, t = map(int, input().split())\n    universes = [1] * n\n    current_position = k\n    for i in range(t):\n        action, index = map(int, input().split())\n        if action == 1:\n            universes.insert(index, 1)\n            current_position += 1\n        else:\n            universes.pop(index)\n            current_position -= 1\n        print(len(universes), current_position)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2597,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_length = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    for m in range(l+1, n):\n                        if a[i] + a[j] + a[k] + a[l] == 4:\n                            max_length = max(max_length, a[i])\n                            max_length = max(max_length, a[j])\n                            max_length = max(max_length, a[k])\n                            max_length = max(max_length, a[l])\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2598,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    edges = []\n    for _ in range(m):\n        u, v, c = input().split()\n        edges.append((int(u), int(v), c))\n    # print(edges)\n    def dfs(graph, visited, color, moves, current_vertex, target_color):\n        if visited[current_vertex]:\n            return\n        visited[current_vertex] = True\n        for neighbor in graph[current_vertex]:\n            if not visited[neighbor]:\n                if graph[current_vertex][neighbor][1] == target_color:\n                    dfs(graph, visited, color, moves, neighbor, target_color)\n                else:\n                    color[neighbor] = target_color\n                    moves.append(neighbor)\n                    dfs(graph, visited, color, neighbor, target_color)\n                    moves.pop()\n    graph = {i: {} for i in range(1, n+1)}\n    for u, v, c in edges:\n        graph[u][v] = (v, c)\n        graph[v][u] = (u, c)\n    visited = [False] * (n+1)\n    color = [None] * (n+1)\n    moves = []\n    for i in range(1, n+1):\n        if not visited[i]:\n            dfs(graph, visited, color, i, 'B')\n    if all(color[i] == 'B' for i in range(1, n+1)):\n        return -1\n    else:\n        k = 0\n        for i in range(1, n+1):\n            if color[i] == 'B':\n                k += 1\n                moves.append(i)\n                dfs(graph, visited, color, i, 'R')\n        return k, moves\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2599,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    tests = int(input())\n    for i in range(tests):\n        n, k = map(int, input().split())\n        x = 0\n        while True:\n            if sum(int(digit) for digit in str(x)) == n:\n                if sum(int(digit) for digit in str(x + 1)) == n:\n                    if sum(int(digit) for digit in str(x + 2)) == n:\n                        if sum(int(digit) for digit in str(x + 3)) == n:\n                            if sum(int(digit) for digit in str(x + 4)) == n:\n                                if sum(int(digit) for digit in str(x + 5)) == n:\n                                    if sum(int(digit) for digit in str(x + 6)) == n:\n                                        if sum(int(digit) for digit in str(x + 7)) == n:\n                                            if sum(int(digit) for digit in str(x + 8)) == n:\n                                                if sum(int(digit) for digit in str(x + 9)) == n:\n                                                    if sum(int(digit) for digit in str(x + 10)) == n:\n                                                        if sum(int(digit) for digit in str(x + 11)) == n:\n                                                            if sum(int(digit) for digit in str(x + 12)) == n:\n                                                                if sum(int(digit) for digit in str(x + 13)) == n:\n                                                                    if sum(int(digit) for digit in str(x + 14)) == n:\n                                                                        if sum(int(digit) for digit in str(x + 15)) == n:\n                                                                            print(x)\n                                                                            break\n                                                                else:\n                                                                    x += 15\n                                                            else:\n                                                                x += 14\n                                                        else:\n                                                            x += 13\n                                                    else:\n                                                        x += 12\n                                            else:\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2600,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,m=map(int,input().split())\n        matrix=[]\n        for j in range(n):\n            matrix.append(list(map(int,input().split()[:m]))\n        count=0\n        for j in range(n):\n            for k in range(m):\n                if matrix[j][k]!=matrix[n-1][m-1-k]:\n                    count+=1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2601,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn=int(input())\n    for i in range(tn):\n        n=int(input())\n        a=list(map(int,input().split()))\n        for j in range(1,n):\n            if a[j]<a[j-1]:\n                print(\"NO\")\n                break\n        else:\n            print(\"YES\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2602,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        a,b,n,m=map(int,input().split())\n        if a+b==0:\n            print(\"No\")\n        else:\n            print(\"Yes\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2603,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        for j in range(i+1, n):\n            if gcd(a[i], a[j]) == min(a):\n                a[i], a[j] = a[j], a[i]\n                if a[i] <= a[j]:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n            else:\n                print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2604,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:list(map(int,input().split()))\n    r,d=R()\n    n=int(input())\n    pizza=lambda x,y,r:x**2+y**2<=r**2\n    crust=lambda x,y,d:x**2+y**2<=r**2-d**2\n    count=0\n    for i in range(n):\n        x,y,r=R()\n        if pizza(x,y,r) and crust(x,y,d):\n            count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2605,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    c=list(map(int,input().split()))\n    k=list(map(int,input().split())\n    #print(n,k,c,k)\n    #print(k)\n    #print(c)\n    #print(k)\n    for i in range(k):\n        if k[i]==1:\n            c[k[i]-1]=0\n    #print(c)\n    #print(k)\n    #print(sum(c))\n    #print(sum(c[k[i-1] for i in range(n)))\n    #print(sum(c[k[i-1]*c[k[i] for i in range(n)])\n    #print(sum(c[k[i]*c[k[i+1] for i in range(n-1)])\n    #print(sum(c[k[i]*c[k[i+1] for i in range(n-1)])+c[0]*c[n-1])\n    #print(sum(c[k[i]*c[k[i+1] for i in range(n-1)])+c[0]*c[n-1])\n    #print(sum(c[k[i]*c[k[i+1] for i in range(n-1)])+c[0]*c[n-1])\n    #print(sum(c[k[i]*c[k[i+1] for i in range(n-1)])+c[0]*c[n-1])\n    #print(sum(c[k[i]*c[k[i+1] for i in range(n-1)])+c[0]*c[n-1])\n    #print(sum(c[k[i]*c[k[i+1] for i in range(n-1)])+c[0]*c[n-1])\n    #print(sum(c[k[i]*c[k[i+1] for i in range(n-1)])+c[0]*c[n-1])\n    #print(sum(c[k[i]*c[k[i+1] for",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2606,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    t = list(map(int, input().split()))\n    t.sort()\n    unpleasant_sum = 0\n    for i in range(n):\n        unpleasant_sum += abs(i+1 - t[i])\n    return unpleasant_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2607,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        s = input()\n        if '?' not in s:\n            print(\"-1\")\n        else:\n            s = list(s)\n            for i in range(len(s)):\n                if s[i] == '?':\n                    s[i] = 'a'\n                    if s[i] == s[i+1]:\n                        s[i] = 'b'\n                    if s[i] == s[i+1]:\n                        s[i] = 'c'\n            print(\"\".join(s))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2608,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, m = map(int, input().split())\n        x1, y1, x2, y2 = map(int, input().split())\n        x3, y3, x4, y4 = map(int, input().split())\n        white_cells = 0\n        black_cells = 0\n        for j in range(y1, y2+1):\n            for k in range(x1, x2+1):\n                white_cells += 1\n        for j in range(y3, y4+1):\n            for k in range(x3, x4+1):\n                black_cells += 1\n        print(white_cells, black_cells)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2609,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        segments = []\n        for j in range(n):\n            l, r = map(int, input().split())\n            segments.append((l, r))\n        segments.sort()\n        max_count = 1\n        for j in range(n-1):\n            if segments[j][1] >= segments[j+1][0]:\n                segments[j+1] = (max(segments[j][0], segments[j+1][0]), min(segments[j][1], segments[j+1][1]))\n            else:\n                max_count += 1\n        print(max_count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2610,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,p,k=map(int,input().split())\n        a=list(map(int,input().split())[:n])\n        a.sort(reverse=True)\n        count=0\n        for i in range(n):\n            if p>=a[0]:\n                p-=a[0]\n                count+=1\n            if count==k:\n                break\n            if p>=a[0]*k:\n                p-=a[0]*k\n                count+=1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2611,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, q = list(map(int, input().split()))\n    piles = list(map(int, input().split()))\n    moves = [0] * (max(piles) + 1)\n    for i in range(1, len(moves)):\n        moves[i] = moves[i-1] + 1\n    for i in range(q):\n        t, x = list(map(int, input().split()))\n        if t == 0:\n            moves[x] = 0\n        else:\n            moves[x] = min(moves[x], moves[x-1] + 1)\n            moves[x+1] = min(moves[x+1], moves[x] + 1)\n    return moves\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2612,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    sizes=list(map(int,input().split()))\n    max_models=0\n    for i in range(1,n):\n        if sizes[i]%sizes[i-1]==0 and sizes[i]<sizes[i-1]:\n            max_models+=1\n    return max_models\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2613,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,z=map(int,input().split())\n    a=list(map(int,input().split())\n    score=0\n    moves=0\n    max_score=0\n    for i in range(n):\n        if i-z-1>=0:\n            score+=a[i-z-1]\n            moves+=1\n        else:\n            score+=a[0]\n        if moves==k:\n            max_score=max(max_score,score)\n            moves=0\n        if i+z+1<n:\n            score+=a[i+z+1]\n            moves+=1\n        else:\n            score+=a[n-1]\n        if moves==k:\n            max_score=max(max_score,score)\n            moves=0\n    return max_score\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2614,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = int(input())\n    d = list(map(int, input().split()))\n    e = int(input())\n    f = list(map(int, input().split())\n    g = int(input())\n    h = list(map(int, input().split())\n    # Write your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2615,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    T = int(input_string.pop(0))\n    result = []\n    for i in range(T):\n        n = int(input_string.pop(0))\n        count = 0\n        for i in range(2, n+1):\n            prime_factors = []\n            while i > 1:\n                if i % 2 == 0:\n                    prime_factors.append(2)\n                    i //= 2\n                elif i % 3 == 0:\n                    prime_factors.append(3)\n                    i //= 3\n                elif i % 5 == 0:\n                    prime_factors.append(5)\n                    i //= 5\n                else:\n                    break\n            if len(set(prime_factors)) == len(prime_factors):\n                count += 1\n        result.append(count)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2616,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        if a[i] > 0:\n            print(\"First\")\n            return\n    print(\"Second\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2617,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        if n%2==0:\n            print(-1)\n        else:\n            d=0\n            while n>1:\n                d+=1\n                if n%2==1:\n                    n+=1\n                else:\n                    n=n//2\n            print(d)\n            for j in range(d):\n                print(1,0,0)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2618,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    x, a = map(int, input().split())\n    y, b = map(int, input().split())\n    k = int(input())\n    # write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2619,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q,c=map(int,input().split())\n    stars=[]\n    for i in range(n):\n        x,y,s=map(int,input().split())\n        stars.append((x,y,s))\n    for i in range(q):\n        t,x1,y1,x2,y2=map(int,input().split())\n        count=0\n        for x,y,s in stars:\n            if x1<=x<=x2 and y1<=y<=y2:\n                count+=s\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2620,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q=list(map(int,input().split()))\n    a=list(range(1,n+1))\n    for i in range(q):\n        if i%2==0:\n            l,r=list(map(int,input().split()))\n            print(sum(a[l-1:r]))\n        else:\n            x=int(input())\n            a[0],a[x]=a[x],a[0]\n            for i in range(1,n):\n                if a[i]>a[i-1]:\n                    break\n            else:\n                a[0],a[i]=a[i],a[0]\n                for j in range(1,n):\n                    if a[j]>a[j-1]:\n                        a[i],a[j]=a[j],a[i]\n                        break\n            else:\n                a[0],a[n-1]=a[n-1],a[0]\n                for j in range(n-2,0,-1):\n                    if a[j]>a[j+1]:\n                        a[j],a[j+1]=a[j+1],a[j]\n                        break\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2621,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    heights = list(map(int, input().split()))\n    # Write your code here\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2622,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().split()]\n    first_map = [input().split() for _ in range(n)]\n    second_map = [input().split() for _ in range(m)]\n    for i in range(n-m+1):\n        for j in range(m-m+1):\n            if all(first_map[i+k][j:j+m] == second_map[k] for k in range(m)):\n                return i+1, j+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2623,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    for i in range(q):\n        n, k = map(int, input().split())\n        s = input()\n        # Your code goes here\n        # print(s)\n        # print(k)\n        # print(n)\n        # print(len(s))\n        # print(len(s)//k)\n        # print(s[::k])\n        # print(s[1:len(s)//k+1])\n        # print(s[len(s)//k:])\n        # print(s[::k+1])\n        # print(s[1:len(s)//k+1:k])\n        # print(s[len(s)//k:len(s):k])\n        # print(s[::k+1])\n        # print(s[1:len(s)//k+1:k])\n        # print(s[len(s)//k:len(s):k])\n        # print(s[::k+1])\n        # print(s[1:len(s)//k+1:k])\n        # print(s[len(s)//k:len(s):k])\n        # print(s[::k+1])\n        # print(s[1:len(s)//k+1:k])\n        # print(s[len(s)//k:len(s):k])\n        # print(s[::k+1])\n        # print(s[1:len(s)//k+1:k])\n        # print(s[len(s)//k:len(s):k])\n        # print(s[::k+1])\n        # print(s[1:len(s)//k+1:k])\n        # print(s[len(s)//k:len(s):k])\n        # print(s[::k+1])\n        # print(s[1:len(s)//k+1:k])\n        # print(s[len(s)//k:len(s):k])\n        # print(s[::k+1])\n        # print(s[1:len(s)//k+1",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2624,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, Q = map(int, input().split())\n    A = list(map(int, input().split())\n    B = A.copy()\n    for _ in range(Q):\n        s, x = input().split()\n        s, x = s[0], int(x)\n        if s == '<':\n            for i in range(N):\n                if A[i] > x:\n                    B[i] = -A[i]\n        else:\n            for i in range(N):\n                if A[i] < x:\n                    B[i] = -A[i]\n        A = B.copy()\n    return ' '.join(map(str, B))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2625,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    for i in range(n):\n        k,x=map(int,input().split())\n        count=0\n        num=1\n        while count<k:\n            num+=1\n            sum_of_digits=sum(int(digit) for digit in str(num))\n            if sum_of_digits==x:\n                count+=1\n        print(num)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2626,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2627,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    max_area = 0\n    rows = len(input_string)\n    cols = len(input_string[0])\n    heights = [0] * cols\n    stack = []\n    \n    # Iterate through each row\n    for i in range(rows):\n        # Initialize variables\n        left = 0\n        right = 0\n        height = 0\n        # Iterate through each column\n        for j in range(cols):\n            # If the current element is 1, update the height\n            if input_string[i][j] == \"1\":\n                height += 1\n            else:\n                # If the current element is 0, calculate the area of the current rectangle\n                while stack and heights[stack[-1]] > 0:\n                    heights[stack.pop()] = 0\n                # Update the left and right boundaries\n                if stack:\n                    left = stack[-1] + 1\n                right = j\n                # Update the height of the current rectangle\n                heights[j] = height\n                # Calculate the area of the current rectangle\n                area = (right - left) * height\n                # Update the maximum area\n                max_area = max(max_area, area)\n            # Push the current index onto the stack\n            stack.append(j)\n    \n    # Return the maximum area\n    return max_area\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2628,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2629,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize the matrix with zeros\n    matrix = [[0 for x in range(input_string)] for y in range(input_string)]\n    \n    # Initialize the variables\n    top = 0\n    bottom = input_string - 1\n    left = 0\n    right = input_string - 1\n    current_num = 1\n    direction = 0\n    \n    while (top <= bottom and left <= right):\n        if direction == 0:\n            for i in range(left, right+1):\n                matrix[top][i] = current_num\n                current_num += 1\n            top += 1\n        elif direction == 1:\n            for i in range(top, bottom+1):\n                matrix[i][right] = current_num\n                current_num += 1\n            right -= 1\n        elif direction == 2:\n            for i in range(right, left-1, -1):\n                matrix[bottom][i] = current_num\n                current_num += 1\n            bottom -= 1\n        elif direction == 3:\n            for i in range(bottom, top-1, -1):\n                matrix[i][left] = current_num\n                current_num += 1\n            left += 1\n        direction = (direction + 1) % 4\n    \n    return matrix\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2630,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a 2D array\n    grid = []\n    for row in input_string.split('\\n'):\n        grid.append([int(x) for x in row.split()])\n    \n    # Initialize variables\n    m = len(grid)\n    n = len(grid[0])\n    dp = [[0] * n for _ in range(m)]\n    dp[0][0] = 1\n    \n    # Fill in the dp array\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                dp[i][j] = 0\n            elif i == 0 and j == 0:\n                dp[i][j] = 1\n            elif i == 0:\n                dp[i][j] = dp[i][j-1]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    \n    return dp[m-1][n-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2631,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return True\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2632,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2633,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2634,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize an empty list to store the subsets\n    subsets = []\n    \n    # Iterate through each character in the input string\n    for i in range(len(input_string)):\n        # Create a new subset for each character\n        subset = [char for j, char in enumerate(input_string) if i & (1 << j)]\n        # Add the subset to the list of subsets\n        subsets.append(subset)\n    \n    # Return the list of subsets\n    return subsets\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2635,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    rows = len(input_string)\n    cols = len(input_string[0])\n    result = []\n    top = 0\n    bottom = rows - 1\n    left = 0\n    right = cols - 1\n    direction = 0\n    \n    while top <= bottom and left <= right:\n        if direction == 0:\n            for i in range(left, right+1):\n                result.append(input_string[top][i])\n            top += 1\n        elif direction == 1:\n            for i in range(top, bottom+1):\n                result.append(input_string[i][right])\n            right -= 1\n        elif direction == 2:\n            for i in range(right, left-1, -1):\n                result.append(input_string[bottom][i])\n            bottom -= 1\n        elif direction == 3:\n            for i in range(bottom, top-1, -1):\n                result.append(input_string[i][left])\n            left += 1\n        \n        direction = (direction + 1) % 4\n        \n        if direction == 0:\n            for i in range(left, right+1):\n                result.append(input_string[top][i])\n            top += 1\n        elif direction == 1:\n            for i in range(top, bottom+1):\n                result.append(input_string[i][right])\n            right -= 1\n        elif direction == 2:\n            for i in range(right, left-1, -1):\n                result.append(input_string[bottom][i])\n            bottom -= 1\n        elif direction == 3:\n            for i in range(bottom, top-1, -1):\n                result.append(input_string[i][left])\n            left += 1\n    \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2636,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of lists\n    buildings = []\n    for line in input_string:\n        buildings.append(list(map(int, line.strip().split()))\n    \n    # Sort buildings by right edge\n    buildings.sort(key=lambda x: x[1])\n    \n    # Initialize variables\n    skyline = []\n    max_height = 0\n    prev_right = -1\n    \n    # Iterate through buildings\n    for building in buildings:\n        left, right, height = building\n        \n        # If left edge is greater than previous right edge, add new key point\n        if left > prev_right:\n            skyline.append([left, max_height])\n            prev_right = right\n        \n        # Update max height\n        max_height = max(max_height, height)\n        \n        # If right edge is greater than previous right edge, add new key point\n        if right > prev_right:\n            skyline.append([right, max_height])\n            prev_right = right\n        \n        # Update max height\n        max_height = max(max_height, height)\n    \n    # Add final key point\n    skyline.append([prev_right, 0])\n    \n    # Remove duplicates and sort\n    skyline = list(dict.fromkeys(skyline))\n    skyline.sort()\n    \n    # Convert skyline to output string\n    output_string = \"\"\n    for point in skyline:\n        output_string += \" \".join(map(str, point)) + \"\\n\"\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2637,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2638,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of lists\n    triangle = []\n    for row in input_string.split('\\n'):\n        triangle.append([int(x) for x in row.split(',')])\n    \n    # Initialize variables\n    n = len(triangle)\n    min_sum = float('inf')\n    prev_row = triangle[0]\n    \n    # Iterate through each row of the triangle\n    for i in range(1, n):\n        # Initialize variables for this row\n        row = [0] * (i+1)\n        # Iterate through each element in the row\n        for j in range(i+1):\n            # If we are at the first or last element, set the value to the current element\n            if j == 0 or j == i:\n                row[j] = triangle[i][j]\n            # Otherwise, calculate the minimum sum of the current element and the two adjacent elements in the previous row\n            else:\n                row[j] = triangle[i][j] + min(prev_row[j-1], prev_row[j])\n        # Update the minimum sum if necessary\n        if row[0] + row[i] < min_sum:\n            min_sum = row[0] + row[i]\n        # Update the previous row for the next iteration\n        prev_row = row\n    \n    return min_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2639,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize an empty list to store the subsets\n    subsets = []\n    \n    # Iterate through each character in the input string\n    for i in range(len(input_string)):\n        # Create a new list with the current character\n        subset = [input_string[i]]\n        # Check if the subset is already in the list of subsets\n        if subset not in subsets:\n            # If not, add it to the list of subsets\n            subsets.append(subset)\n    # Iterate through the input string again\n    for i in range(len(input_string)):\n        # Create a new list with all the characters up to the current index\n        subset = input_string[:i+1]\n        # Check if the subset is already in the list of subsets\n        if subset not in subsets:\n            # If not, add it to the list of subsets\n            subsets.append(subset)\n    # Return the list of subsets\n    return subsets\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2640,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W=list(map(int,input().split()))\n    grid=[]\n    for i in range(H):\n        grid.append(list(input()))\n    count=0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j]=='.':\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2641,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,Q = list(map(int,input().split()))\n    c = list(map(int,input().split())\n    l = []\n    r = []\n    for i in range(Q):\n        l.append(list(map(int,input().split()))\n        r.append(list(map(int,input().split())\n    # Your code goes here\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2642,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    A=[]\n    B=[]\n    for i in range(n):\n        a,b=map(int,input_string.split())\n        A.append(a)\n        B.append(b)\n    count=0\n    for i in range(n):\n        for j in range(n):\n            if i!=j and A[i]*A[j]+B[i]*B[j]!=0:\n                count+=1\n    return count%100000007\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2643,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k, q = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    result = []\n    for _ in range(q):\n        n, x, m = list(map(int, input().split()))\n        a = [x]\n        for i in range(n - 1):\n            a.append(a[-1] + d[(i - 1) % k])\n        count = 0\n        for i in range(n - 1):\n            if (a[i] % m) > (a[i + 1] % m):\n                count += 1\n        result.append(count)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2644,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    P=list(map(int,input_string.split()))\n    if N==2:\n        print(-1)\n        return\n    P.sort()\n    for i in range(N-1):\n        print(P[i])\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2645,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();print(len(s)//2-s.count('p'))\n    return len(s)//2-s.count('p')\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2646,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M=map(int,input().split())\n    A=[]\n    B=[]\n    for i in range(M):\n        A.append(int(input()))\n        B.append(int(input()))\n    #print(A,B)\n    #print(N,M)\n    #print(A,B)\n    graph=[]\n    for i in range(M):\n        graph.append([A[i],B[i]])\n    #print(graph)\n    visited=[]\n    for i in range(1,N+1):\n        visited.append(False)\n    #print(visited)\n    def dfs(node,visited,graph,signpost):\n        if visited[node]:\n            return\n        visited[node]=True\n        signpost[node]=True\n        for i in range(len(graph)):\n            if graph[i][0]==node:\n                dfs(graph[i][1],visited,signpost)\n            elif graph[i][1]==node:\n                dfs(graph[i][0],visited,signpost)\n    for i in range(1,N+1):\n        if not visited[i]:\n            signpost=[False]*(N+1)\n            dfs(i,visited,signpost)\n            if not signpost[1]:\n                return False\n    print(\"Yes\")\n    for i in range(1,N+1):\n        print(signpost.index(True))\n    return True\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2647,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W=map(int,input().split());M=[input()for _ in\\\"_\\\"*H];C=[[1]*W for _ in\\\"_\\\"*H];q=deque([[0,0]])\n    for i in range(H):\n        for j in range(W):\n            if M[i][j]=='.':C[i][j]=0\n    def dfs(x,y):\n        if x==H-1 and y==W-1:return 0\n        if C[x][y]:return -1\n        C[x][y]=1\n        for dx,dy in[(-1,0),(1,0),(0,-1),(0,1)]:\n            nx,ny=x+dx,y+dy\n            if 0<=nx<H and 0<=ny<W and M[nx][ny]=='.' and not C[nx][ny]:\n                C[nx][ny]=1\n                dfs(nx,ny)\n    for i in range(H):\n        for j in range(W):\n            if M[i][j]=='.':\n                C[i][j]=0\n                dfs(i,j)\n                if C[H-1][W-1]:return -1\n    return sum(C.count(0)-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2648,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    input();k=len(set(input().split()));print(k-1+k%2)\n    # Do not remove this line\n    # This line is to ensure correct submission of the solution\n    # Do not print anything here\n    # Modify the function to take input and return the output as required\n    # You can use the input() function to read input from stdin and print() to write output to stdout\n    # Sample input:\n    # 5\n    # 1 2 1 3 7\n    # Sample output:\n    # 3\n    # Explanation:\n    # The input consists of 5 cards with values 1, 2, 1, 3, 7. The optimal solution is to perform the operation once, taking out the cards with values 1 and 2, and returning the card with value 1. The remaining cards will be 3 and 7, which are pairwise distinct. ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2649,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    points=[]\n    for i in range(n):\n        x,y=map(int,input_string.split())\n        points.append((x,y))\n    points.sort()\n    max_distance=0\n    for i in range(n-1):\n        distance=abs(points[i][0]-points[i+1][0])+abs(points[i][1]-points[i+1][1])\n        if distance>max_distance:\n            max_distance=distance\n    print(max_distance)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2650,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, Q = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = list(map(int, input().split())\n    D = list(map(int, input().split())\n    for i in range(Q):\n        A[C[i-1]-1] = D[i-1]\n        B[C[i-1]-1] = D[i-1]\n        max_rating = max(A)\n        min_rating = min(A)\n        print(min_rating)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2651,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    data=lambda:list(map(int,input().split()))\n    n,m=data()\n    x=data()\n    y=data()\n    x.sort()\n    y.sort()\n    area=0\n    for i in range(n-1):\n        for j in range(m-1):\n            for k in range(i+1,n):\n                for l in range(j+1,m):\n                    area+=abs(x[k]-x[i])*abs(y[l]-y[j])\n    return area%(10**9+7\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2652,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    x_coords = []\n    y_coords = []\n    for i in range(N):\n        x, y = map(int, input().split())\n        x_coords.append(x)\n        y_coords.append(y)\n    min_cost = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            min_cost += min(abs(x_coords[i]-x_coords[j]), abs(y_coords[i]-y_coords[j]))\n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2653,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q=map(int,input().split())\n    adj=[[]for i in range(n+1)]\n    for i in range(n-1):\n        a,b=map(int,input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n    for i in range(q):\n        p,x=map(int,input().split())\n        dfs(1,p,x)\n    for i in range(1,n+1):\n        print(counters[i],end=\" \")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2654,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2655,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input_string.split()))\n    # Write your code here\n    return 7\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2656,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k,n=int(input()),len(input())\n    count=0\n    for i in range(k+1):\n        count+=3**i\n    return count%(10**9+7\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2657,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input_string.split()))\n    max_comb = 0\n    max_i = -1\n    max_j = -1\n    for i in range(N):\n        for j in range(i+1, N):\n            comb = comb(A[i], A[j])\n            if comb > max_comb:\n                max_comb = comb\n                max_i = i\n                max_j = j\n    return A[max_i], A[max_j]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2658,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K = map(int,input().split())\n    A = list(map(int,input().split())\n    # Write your code here\n    # Initialize a dictionary to store the number of times each town has been visited\n    visited = [0]*N\n    visited[0] = 1\n    # Initialize a set to store the towns we have visited\n    visited_set = {0}\n    # Initialize a queue to store the towns we need to visit\n    queue = [0]\n    # Initialize a variable to store the current town\n    current_town = 0\n    # Iterate K times\n    for i in range(K):\n        # While the queue is not empty\n        while queue:\n            # Pop the current town from the queue\n            current_town = queue.pop(0)\n            # For each neighbor of the current town\n            for neighbor in range(N):\n                # If the neighbor has not been visited and it is not the starting town\n                if visited[neighbor] == 0 and neighbor != 0:\n                    # Mark it as visited\n                    visited[neighbor] = visited[current_town] + 1\n                    # Add it to the queue\n                    queue.append(neighbor)\n                    # If the neighbor is the king's favorite town, return it\n                    if neighbor == K:\n                        return neighbor\n    # If the king's favorite town is not found, return -1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2659,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k=int(input())\n    i=1\n    count=0\n    while count<k:\n        if i%2==0:\n            s=i//2\n        else:\n            s=3*i//2\n        if s%10==0:\n            s=s+1\n        if s<=10**15:\n            print(s)\n            count+=1\n        i+=1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2660,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\ta=list(map(int,input().split()))\n    Q=ta[0]\n    f=0\n    for i in range(1,Q+1):\n        if i%2==1:\n            a,b=list(map(int,input().split()))\n            f=abs(a)+b\n        else:\n            print(f,abs(f))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2661,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    S = list(map(int, input().split()))\n    T = list(map(int, input().split()))\n    U = list(map(int, input().split())\n    V = list(map(int, input().split())\n    # Your code goes here\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2662,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input_string.split()))\n    A.sort()\n    colors = 1\n    color = [0] * N\n    color[0] = 1\n    for i in range(1, N):\n        if A[i] > A[i-1]:\n            color[i] = color[i-1]\n        else:\n            color[i] = color[i-1] + 1\n            colors = max(colors, color[i])\n    return colors\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2663,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    a.sort(reverse=True)\n    l=[]\n    for i in range(n):\n        for j in range(i,n):\n            l.append(sum(a[i:j+1]))\n    print(*l[:k])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2664,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    v = eval(input())\n    balls = [int(i) for i in input_string.split()]\n    balls.sort()\n    if balls[0] == balls[1]:\n        print(\"1\")\n        print(balls[0], balls[0])\n        print(\"1\")\n        print(balls[1], balls[1])\n        print(\"1\")\n        print(balls[2], balls[2])\n        print(\"1\")\n        print(balls[3], balls[3])\n        print(\"1\")\n        print(balls[4], balls[4])\n        print(\"1\")\n        print(balls[5], balls[5])\n        print(\"1\")\n        print(balls[6], balls[6])\n        print(\"1\")\n        print(balls[7], balls[7])\n        print(\"1\")\n        print(balls[8], balls[8])\n        print(\"1\")\n        print(balls[9], balls[9])\n        print(\"1\")\n        print(balls[10], balls[10])\n        print(\"1\")\n        print(balls[11], balls[11])\n        print(\"1\")\n        print(balls[12], balls[12])\n        print(\"1\")\n        print(balls[13], balls[13])\n        print(\"1\")\n        print(balls[14], balls[14])\n        print(\"1\")\n        print(balls[15], balls[15])\n        print(\"1\")\n        print(balls[16], balls[16])\n        print(\"1\")\n        print(balls[17], balls[17])\n        print(\"1\")\n        print(balls[18], balls[18])\n        print(\"1\")\n        print(balls[19], balls[19])\n        print(\"1\")\n        print(balls[20], balls[20])\n        print(\"1\")\n        print(balls[21], balls[21])\n        print(\"1\")\n        print(balls[22], balls[22])\n        print(\"1\")\n        print(balls[2",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2665,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    N = int(input_string.pop(0))\n    points = []\n    for i in range(N):\n        x, y = map(int, input_string.pop(0).split())\n        points.append((x, y))\n    \n    # find the minimum number of points to create a square\n    min_points = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                for l in range(k+1, N):\n                    # calculate the sides of the square\n                    dx1, dy1 = points[i][0] - points[j][0], points[i][1] - points[j][1]\n                    dx2, dy2 = points[j][0] - points[k][0], points[j][1] - points[k][1]\n                    dx3, dy3 = points[k][0] - points[l][0], points[k][1] - points[l][1]\n                    dx4, dy4 = points[l][0] - points[i][0], points[l][1] - points[i][1]\n                    # check if the square is valid\n                    if dx1*dx2*dx3*dx4 == dy1*dy2*dy3*dy4 and abs(dx1) == abs(dy1) and abs(dx2) == abs(dy2) and abs(dx3) == abs(dy3):\n                        min_points += 1\n                        break\n                else:\n                    continue\n                break\n            else:\n                continue\n            break\n    return min_points\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2666,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    prices=list(map(int,input().split()))\n    prices.sort()\n    max_profit=0\n    for i in range(k):\n        for j in range(i+1,n-k+i+1):\n            max_profit=max(max_profit,prices[j]-prices[i])\n    return max_profit\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2667,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    stamps=list(map(int,input().split()))\n    if sum(stamps)%N!=0:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2668,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split())\n    if a+b*2>c:\n        print(\"Unlucky Chef\")\n    else:\n        print(\"Lucky Chef\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2669,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input()) \n    tasks=[]\n    for i in range(t):\n        tasks.append(list(map(int,input().split()))\n    tasks.sort(key=lambda x:x[1])\n    start=[]\n    finish=[]\n    for i in range(t):\n        start.append(tasks[i][0])\n        finish.append(tasks[i][1])\n    max_tasks=0\n    count=0\n    for i in range(t):\n        if start[i]<=finish[i-1]:\n            count+=1\n            max_tasks=max(max_tasks,count)\n        else:\n            count=1\n    return max_tasks\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2670,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = input().split()\n    c, d = input().split()\n    subpairs = []\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i:] == a[:i][::-1] and b[j:] == b[:j][::-1]:\n                subpairs.append((a[i:], b[:j]))\n    for i in range(len(c)):\n        for j in range(len(d)):\n            if c[i:] == c[:i][::-1] and d[j:] == d[:j][::-1]:\n                subpairs.append((c[i:], d[:j]))\n    max_len = 0\n    for pair in subpairs:\n        if len(pair[0]) == len(pair[1]) and pair[0] == pair[1][::-1]:\n            max_len = max(max_len, len(pair[0]) + len(pair[1]))\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2671,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    a = list(map(int,input().split())\n    X = list(map(int,input().split())\n    boxes_to_open = []\n    for x in X:\n        level = 0\n        while x > 0:\n            if x >= a[level]:\n                x -= a[level]\n                level += 1\n            else:\n                boxes_to_open.append(level)\n                break\n        else:\n            boxes_to_open.append(level)\n    return boxes_to_open\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2672,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=int(input())\n    if x==1:\n        return 3\n    elif x==2:\n        return 14\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2673,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().strip()\n    n = len(s)\n    jumps = 0\n    i = 0\n    while i < n-1:\n        if s[i] == s[i+1]:\n            jumps += 1\n            i += 2\n        else:\n            jumps += 1\n            i += 1\n    return jumps\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2674,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\\r\n    if int(s) % 10 == 0:\n        print(\"Inclusive\")\n    else:\n        print(\"Exclusive\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2675,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int,input().split())\n    red_pos = []\n    blue_pos = []\n    for i in range(n):\n        x, u = map(int,input().split())\n        red_pos.append(x)\n    for i in range(m):\n        y, v = map(int,input().split())\n        blue_pos.append(y)\n    red_pos.sort()\n    blue_pos.sort()\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if red_pos[i] == blue_pos[j]:\n                count += 1\n                break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2676,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    pile=[]\n    for i in range(n):\n        pile.append(input())\n    m=int(input())\n    b=input()\n    count=0\n    for i in range(len(pile)):\n        for j in range(len(b)-m+1):\n            if b==pile[i][j:j+m]:\n                count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2677,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    vowels=['A','E','I','O','U','a','e','i','o','u']\n    count_vowels=0\n    count_consonants=0\n    prev_char=s[0]\n    consonants=set()\n    for i in range(1,len(s)):\n        if s[i] in vowels:\n            count_vowels+=1\n            if s[i]==prev_char:\n                count_vowels=0\n            else:\n                prev_char=s[i]\n        else:\n            count_consonants+=1\n            consonants.add(s[i])\n    if count_vowels>=3 and len(consonants)>=5:\n        print(\"GOOD\")\n    else:\n        print(\"-1\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2678,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    intervals = []\n    for i in range(n):\n        intervals.append(list(map(int, input().split()))\n    # Your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2679,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\\r\n    coins = list(map(int, input().split()))\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if i != j:\n                max_sum = max(max_sum, sum(coins[i:j+1]))\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2680,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, b = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split())\n    # Write your code here\n    # return the minimum number of moves required to defuse all the bombs\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2681,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    b=int(input())\n    c=input()\n    if c==\"+\":\n        print(a+b)\n    elif c==\"-\":\n        print(a-b)\n    elif c==\"*\":\n        print(a*b)\n    elif c==\"/\":\n        print(a/b)\n    else:\n        print(\"Invalid operator\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2682,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        # Write your code here\n        # return the answer for each question\n# Test your code with the given example\ninput_string = \"3\\n3 4\\n3 2\\n3 1\\n64 1104780520224836936\"\nsolution(input_string)\n# Output: 1, 6, 1337369305470044825\n# Explanation:\n# The first question is answered by the shuffling process:\n# Step 0: {0, 1, 2, 3, 4, 5, 6, 7} -> {0, 2, 4, 6, 1, 3, 5, 7}\n# Step 1: {0, 2, 4, 6, 1, 3, 5, 7} -> {0, 4, 2, 6, 1, 5, 3, 7}\n# Step 2: {0, 4, 2, 6, 1, 5, 3, 7} -> {0, 4, 2, 6, 1, 5, 3, 7}\n# The card labelled 4 is on position 1, the card labelled 3 is on position 6, and the card labelled 2 is on position 2.\n# ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2683,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,k=map(int,input().split())\n        board=[]\n        for j in range(n):\n            board.append(list(input()))\n        for i in range(n):\n            for j in range(n):\n                if board[i][j]=='X':\n                    if i==n-1 or j==n-1:\n                        if board[i][j+1]=='.' or board[i+1][j]=='.':\n                            board[i][j]='X'\n                            board[i+1][j]='X'\n                            board[i][j+1]='X'\n                            board[i+1][j+1]='X'\n                            print(\"YES\")\n                            break\n                    else:\n                        print(\"NO\")\n                        break\n                elif board[i][j]=='O':\n                    if i==n-1 or j==n-1:\n                        if board[i][j+1]=='.' or board[i+1][j]=='.':\n                            board[i][j]='O'\n                            board[i+1][j]='O'\n                            board[i][j+1]='O'\n                            board[i+1][j+1]='O'\n                            print(\"YES\")\n                            break\n                    else:\n                        print(\"NO\")\n                        break\n                else:\n                    continue\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2684,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n= int(input())\n    word = input()\n    max_length = 0\n    max_palindrome = \"\"\n    for i in range(n):\n        for j in range(n,i,-1):\n            if i<=j:\n                sub_word = word[i:j+1]\n                if sub_word == sub_word[::-1]:\n                    if len(sub_word) > max_length:\n                        max_length = len(sub_word)\n                        max_palindrome = sub_word\n    print(max_length)\n    print(max_palindrome)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2685,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l = str(input())\n    x,y = map(int,input().split())\n    count = 0\n    cost = 0\n    for i in range(len(l)):\n        if l[i] == '?':\n            count += 1\n            if i == 0:\n                cost += x\n            else:\n                cost += x*count\n        else:\n            cost += y\n    return cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2686,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=[int(x) for x in input().split()]\\r\n    close_pairs=[]\n    for i in range(m):\n        a,b=[int(x) for x in input().split()]\n        close_pairs.append((a,b))\n    s,t=[int(x) for x in input().split()]\n    close_pairs.sort()\n    close_pairs.append((s,t))\n    close_pairs.sort(key=lambda x:x[1])\n    close_pairs.sort(key=lambda x:x[0])\n    close_pairs.sort(key=lambda x:x[1]-x[0])\n    close_pairs.sort(key=lambda x:x[0])\n    jumps=0\n    for i in range(len(close_pairs)-1):\n        if close_pairs[i][1]!=close_pairs[i+1][0]:\n            jumps+=1\n    if close_pairs[-1][1]!=close_pairs[-2][0]:\n        jumps+=1\n    if jumps==0:\n        print(0)\n    else:\n        print(jumps)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2687,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    K = int(input())\n    mod = 10**9 + 9\n    result = [0] * (K+1)\n    result[0] = 1\n    for i in range(1, K+1):\n        for j in range(i, 2*K-i+1):\n            result[i] += result[j-1] * result[i-1] % mod\n        result[i] %= mod\n    for i in range(K+1):\n        print(result[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2688,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\\r\n    input_list=list(map(int,input().split()))\n    visited=[]\n    cycles=[]\n    for i in range(n):\n        if i not in visited:\n            cycle=[]\n            j=i\n            while j not in visited:\n                visited.append(j)\n                cycle.append(j)\n                j=input_list[j-1]-1\n            cycles.append(cycle)\n    for i in range(n):\n        if i not in visited:\n            cycle=[]\n            j=i\n            while j not in visited:\n                visited.append(j)\n                cycle.append(j)\n                j=input_list[j-1]-1\n            cycles.append(cycle)\n    for i in range(len(cycles)):\n        print(\" \".join(map(str,cycles[i]))\n    print(len(cycles))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2689,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\\r\n    s = s.split('-')\n    result = ''\n    for i in s:\n        if i[0].isdigit():\n            result += i[1]*int(i[0])\n        else:\n            result += i\n    if result == result[::-1]:\n        print(\"Continue\")\n    else:\n        print(\"Return\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2690,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    st=input().strip()\n    n=len(st)\n    max_diff=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if st[i]!=st[j]:\n                diff=abs(i-j)\n                if diff>max_diff:\n                    max_diff=diff\n    print(max_diff)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2691,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, P = map(int, input().split())\n    S = input()\n    dp = [0] * N\n    for i in range(N):\n        if S[i] == 'd':\n            dp[i] = 1\n    for i in range(1, N):\n        if S[i] == S[i-1]:\n            dp[i] = dp[i-1] + 1\n    max_length = max(dp)\n    for i in range(1, N):\n        if S[i] != S[i-1]:\n            dp[i] = 1\n        else:\n            dp[i] = max(dp[i], dp[i-1]+1)\n    max_length = max(max_length, max(dp))\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2692,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,b=map(int,input().split())\n    a=0\n    while b>0:\n        a+=1\n        b-=n\n        if b<0:\n            return -1\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2693,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s,p,k = map(int,input().split())\n    if p == 1:\n        return \"NO\"\n    if s == p:\n        return \" \".join([str(p) for i in range(k)])\n    if s < p:\n        return \"NO\"\n    for i in range(1,s+1):\n        if i*p == s:\n            return \" \".join([str(i) for j in range(k)])\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2694,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k =map(int, input().split())\n    blasters = []\n    for i in range(k):\n        x, y, t, f = map(int, input().split())\n        blasters.append((x-1, y-1, t, f))\n    blasters.sort(key=lambda x: x[2])\n    grid = [[0]*m for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            grid[i][j] = '.'\n    grid[0][0] = 'S'\n    for i in range(k):\n        x, y, t, f = blasters[i]\n        grid[x][y] = 'B'\n        for j in range(t, n*m, f):\n            if j % f == 0:\n                grid[x][y] = 'P'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'P':\n                grid[i][j] = '.'\n    time = 0\n    while True:\n        new_grid = [['.' for j in range(m)] for i in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'S':\n                    new_grid[i][j] = 'S'\n                    break\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'P':\n                    new_grid[i][j] = 'P'\n                    for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                        if 0 <= i+di < n and 0 <= j+dj < m and grid[i+di][j+dj] == '.':\n                            new_grid[i+di][j+dj] = 'P'\n        if 'S' not in new_grid:\n            return 'NO'\n        grid = new_grid\n        time += 1\n        if (0, 0) in [(i, j) for i, j in bl",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2695,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B,data = list(input()),input(),list(map(int,input().split()))\n    data.sort()\n    count = 0\n    for i in data:\n        if i<=len(A):\n            A = A[:i-1] + A[i:]\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2696,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    colors=list(map(int,input().split()))\n    X=1\n    while colors[X]!=colors[X+1]:\n        X+=1\n    print(X)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2697,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    count=0\n    for i in range(1,a+1):\n        if a%i==0:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2698,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m,v = map(int, input().split())\n    days = []\n    for i in range(m):\n        days.append(list(map(int, input().split()))\n    days.sort(key=lambda x: x[0])\n    max_vegetables = 0\n    for i in range(m):\n        if days[i][0] <= v:\n            max_vegetables += days[i][1]\n            v -= days[i][1]\n        else:\n            max_vegetables += v\n            break\n    return max_vegetables\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2699,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        for j in range(n):\n            if j == 0:\n                print(1, end=\" \")\n            else:\n                print(2*j, end=\" \")\n            print(2*j+1, end=\" \")\n            print(2*j+2)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2700,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = eval(input())\n    for i in range(t):\n        a,b,c,d = map(int,input().split())\n        count = 0\n        for x in range(a,b+1):\n            for y in range(c,d+1):\n                if x < y:\n                    count += 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2701,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, K = list(map(int, input().split()))\n    apples = list(map(int, input().split()))\n    left_sum = 0\n    right_sum = 0\n    left_dog = 0\n    right_dog = 0\n    for i in range(N):\n        left_sum += apples[i]\n        right_sum += apples[N-i-1]\n    if left_sum == K or right_sum == K:\n        return 0\n    if left_sum > K or right_sum > K:\n        return -1\n    left_dog = K - left_sum\n    right_dog = K - right_sum\n    return min(left_dog, right_dog)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2702,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    statements = []\n    for i in range(n):\n        statements.append(list(input().split()))\n    #print(statements)\n    truth_speaking_people = []\n    for i in range(n):\n        count_true = 0\n        count_false = 0\n        for j in range(n):\n            if statements[i][j] == 'T':\n                count_true += 1\n            else:\n                count_false += 1\n        if count_true > count_false:\n            truth_speaking_people.append(i)\n    #print(truth_speaking_people)\n    max_truth_speaking_people = len(truth_speaking_people)\n    for i in range(n):\n        if i not in truth_speaking_people:\n            for j in range(n):\n                if i != j and statements[i][j] == 'T' and statements[j][i] == 'F':\n                    max_truth_speaking_people -= 1\n                    break\n    print(max_truth_speaking_people)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2703,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q=list(map(int,input().split()))\n    arr=list(map(int,input().split()))\n    x=[]\n    for i in range(q):\n        x.append(int(input()))\n    max_candies=0\n    for i in range(n):\n        max_candies+=arr[i]\n    for i in range(q):\n        max_candies=max(max_candies,sum(arr)-x[i])\n    return max_candies\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2704,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y=map(int,input().split())\n    A=list(map(int,input().split())\n    for i in range(y):\n        t=int(input())\n        if min(A)<=t<=max(A):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2705,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=(list(map(int,input().split())))\n    a=list(map(int,input().split()))\n    a.sort()\n    beauty=0\n    for i in range(n):\n        if a[i]%k==0:\n            beauty+=1\n        else:\n            beauty+=a[i]//k\n    print(beauty\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2706,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = eval(input());\n    k = eval(input());\n    nums = []\n    for i in range(N):\n        query = eval(input());\n        if query >= 0:\n            nums.append(query)\n        else:\n            nums.sort()\n            print(nums[k-1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2707,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=[int(i) for i in input().split()]\n    A=list(map(int,input().split()))\n    mod=10**9+7\n    dp=[[0]*(k+1 for i in range(n+1)] for j in range(n+1)]\n    for i in range(n+1):\n        dp[i][0]=1\n    for i in range(1,n+1):\n        for j in range(1,k+1):\n            if A[i-1]<=j:\n                dp[i][j]=dp[i-1][j-A[i-1]]+dp[i-1][j]\n            else:\n                dp[i][j]=dp[i-1][j]\n    return dp[n][k]%mod\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2708,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\\r\n    while k>0:\n        if n%10!=0:\n            n-=1\n        else:\n            n//=10\n        k-=1\n    print(n\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2709,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, t = map(int, input_string.split())\n    A = list(map(int, input().split()))\n    \n    if t == 1:\n        print(7)\n    elif t == 2:\n        if A[0] > A[1]:\n            print(\"Bigger\")\n        elif A[0] == A[1]:\n            print(\"Equal\")\n        else:\n            print(\"Smaller\")\n    elif t == 3:\n        A = sorted(A[:3])\n        print(A[1])\n    elif t == 4:\n        print(sum(A))\n    elif t == 5:\n        print(sum(x for x in A if x % 2 == 0)\n    elif t == 6:\n        A = [x % 26 for x in A]\n        A = [chr(97 + x) for x in A]\n        print(\"\".join(A))\n    elif t == 7:\n        i = 0\n        while True:\n            if i >= N or i < 0:\n                print(\"Out\")\n                break\n            if i == N - 1:\n                print(\"Done\")\n                break\n            i = A[i]\n            if i == A[i]:\n                print(\"Cyclic\")\n                break\n            if i in A:\n                print(\"Cyclic\")\n                break\n            i += 1\n    else:\n        print(\"Invalid input\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2710,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(lambda x :int(x), input().strip().split())\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split())\n    roads = []\n    for _ in range(m):\n        roads.append(list(map(int, input().strip().split()))\n    # your code goes here\n    return \"YES\"\n    # for i in range(n):\n    #     print(a[i], end=\" \")\n    # print()\n    # for i in range(n):\n    #     print(b[i], end=\" \")\n    # print()\n    # for road in roads:\n    #     print(road[0], road[1])\n    # print()\n    # for i in range(n):\n    #     for j in range(n):\n    #         if i == j:\n    #             print(b[i], end=\" \")\n    #         else:\n    #             print(0, end=\" \")\n    #     print()\n    # print()\n    # for i in range(n):\n    #     for j in range(n):\n    #         if i == j:\n    #             print(0, end=\" \")\n    #         else:\n    #             print(0, end=\" \")\n    #     print()\n    # print()\n    # for i in range(n):\n    #     for j in range(n):\n    #         if i == j:\n    #             print(0, end=\" \")\n    #         else:\n    #             print(0, end=\" \")\n    #     print()\n    # print()\n    # for i in range(n):\n    #     for j in range(n):\n    #         if i == j:\n    #             print(0, end=\" \")\n    #         else:\n    #             print(0, end=\" \")\n    #     print()\n    # print()\n    # for i in range(n):\n    #     for j in range(n):\n    #         if i == j:\n    #             print(0, end=\" \")\n    #         else:\n    #             print(0, end=\" \")\n    #     print()\n    # print()\n    # for i in range",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2711,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    pages = [[] for _ in range(n)]\n    for _ in range(n):\n        pages.append(list(map(str, input().split()))\n    for i in range(n):\n        for j in range(m):\n            pages[i].append(input().strip())\n    # Your code here\n    return \"acb\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2712,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split())\n    d=a+b+c-min(a,b,c)\n    return d\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2713,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    rank = 25\n    stars = [0]*25\n    bonus_stars = 0\n    for i in input_string:\n        if i == 'W':\n            stars[rank-1] += 1\n            if rank >= 6 and stars[rank-1] == 2:\n                bonus_stars += 1\n                stars[rank-1] = 0\n                if rank < 25:\n                    rank += 1\n        else:\n            if rank > 20:\n                stars[rank-1] -= 1\n            else:\n                stars[rank-1] = max(stars[rank-1]-1, 0)\n            if stars[rank-1] == 0:\n                rank -= 1\n    if rank == 25:\n        return 25\n    elif rank == 20:\n        return 20\n    elif rank == 19:\n        return 19\n    elif rank == 18:\n        return 18\n    elif rank == 17:\n        return 17\n    elif rank == 16:\n        return 16\n    elif rank == 15:\n        return 15\n    elif rank == 14:\n        return 14\n    elif rank == 13:\n        return 13\n    elif rank == 12:\n        return 12\n    elif rank == 11:\n        return 11\n    elif rank == 10:\n        return 10\n    elif rank == 9:\n        return 9\n    elif rank == 8:\n        return 8\n    elif rank == 7:\n        return 7\n    elif rank == 6:\n        return 6\n    elif rank == 5:\n        return 5\n    elif rank == 4:\n        return 4\n    elif rank == 3:\n        return 3\n    elif rank == 2:\n        return 2\n    elif rank == 1:\n        return 1\n    else:\n        return \"Legend\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2714,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,m=map(int,input().split())\n        adj_list=[[] for _ in range(n+1)]\n        for _ in range(m):\n            u,v=map(int,input().split())\n            adj_list[u].append(v)\n            adj_list[v].append(u)\n        count=0\n        for i in range(1,n+1):\n            count+=len(adj_list[i])%2\n        if count%2==0:\n            print(0)\n        else:\n            print(4)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2715,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=50;P,Q=divmod(int(input()),N);R=N-Q;print(N,*[P+R-1]*R+[P+R+N]*Q)\n    #print(N,*[P+R-1]*R+[P+R+N]*Q)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2716,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, t = map(int, input_string.split())\n    A = list(map(int, input().split())\n    \n    if t == 1:\n        for i in range(N):\n            for j in range(i+1, N):\n                if A[i] + A[j] == 7777:\n                    return \"Yes\"\n        return \"No\"\n    elif t == 2:\n        if len(set(A)) == N:\n            return \"Unique\"\n        else:\n            return \"Contains duplicate\"\n    elif t == 3:\n        freq = {}\n        for num in A:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        max_freq = max(freq.values())\n        for num in freq:\n            if freq[num] == max_freq:\n                return num\n        return -1\n    elif t == 4:\n        A.sort()\n        if N % 2 == 0:\n            return A[N//2-1], A[N//2]\n        else:\n            return A[N//2]\n    elif t == 5:\n        result = []\n        for num in A:\n            if 100 <= num <= 999:\n                result.append(num)\n        result.sort()\n        return \" \".join(map(str, result))\n    \n# Test cases\nprint(solution(\"7 1\\n1 770 3 4 5 6 7\"))\nprint(solution(\"7 2\\n1 2 3 4 5 6 7\"))\nprint(solution(\"7 3\\n1 1 1 2 2 2\"))\nprint(solution(\"8 4\\n8 1 4 3 6 7 5 2\"))\nprint(solution(\"10 5\\n1 2 3 4 5 6 7 8 9 100 11 12 13 14 15\"))\nprint(solution(\"10 6",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2717,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    n = len(input_string)\n    teams = ['A', 'B', 'C']\n    team_dict = {'A': [], 'B': [], 'C': []}\n    team_count = {'A': 0, 'B': 0, 'C': 0}\n    team_positions = {'A': [], 'B': [], 'C': []}\n    switch_count = 0\n    \n    # Count the number of people in each team\n    for i in range(n):\n        team_dict[input_string[i]].append(i)\n        team_count[input_string[i]] += 1\n    \n    # Determine the positions of each team\n    for team in teams:\n        team_positions[team] = [i for i in range(team_count[team])]\n    \n    # Check if the teams are already lined up\n    if team_count['A'] == 0 or team_count['B'] == 0 or team_count['C'] == 0:\n        return 0\n    elif team_count['A'] == 1 and team_count['B'] == 1 and team_count['C'] == 1:\n        return 0\n    else:\n        # Check if the teams are already lined up\n        for i in range(n):\n            if input_string[i] == 'A':\n                if i == 0:\n                    if input_string[i+1] == 'B' and input_string[i+2] == 'C':\n                        continue\n                    else:\n                        switch_count += 1\n                elif i == n-1:\n                    if input_string[i-1] == 'B' and input_string[i-2] == 'C':\n                        continue\n                    else:\n                        switch_count += 1\n                else:\n                    if input_string[i-1] == 'B' and input_string[i+1] == 'C':\n                        continue\n                    else:\n                        switch_count += 1\n            elif input_string[i] == 'B':\n                if i == 0:\n                    if input_",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2718,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    \n    if N % M == 0 or M % N == 0:\n        return \"win\"\n    else:\n        return \"lose\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2719,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2720,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2721,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    m, l, M, L, t_m, t_l = map(int, input_string.split())\n    if abs(M - m) + abs(L - l) <= max(t_m, t_l):\n        return \"possible\"\n    else:\n        return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2722,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def move_turtle(input_string):\n        pass\n    \n    return move_turtle(input_string)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2723,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2724,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of tuples\n    students = []\n    tutors = []\n    for i in range(N):\n        students.append(tuple(map(int, input_string[i].split()))\n    for i in range(N, 2*N):\n        tutors.append(tuple(map(int, input_string[i].split())\n    \n    # Sort students and tutors by distance\n    students.sort(key=lambda x: x[0])\n    tutors.sort(key=lambda x: x[0])\n    \n    # Initialize variables\n    min_distance = float('inf')\n    max_distance = 0\n    for i in range(N):\n        for j in range(N):\n            distance = abs(students[i][0] - tutors[j][0]) + abs(students[i][1] - tutors[j][1])\n            if distance > max_distance:\n                max_distance = distance\n            if distance < min_distance:\n                min_distance = distance\n    \n    return min_distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2725,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2726,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, c = map(int, input_string.split())\n    a = list(map(int, input().split()))\n    a.sort()\n    p = 1\n    for i in range(c):\n        p *= (1 - (1/n) * (a[i] <= a[0]))\n    p *= (1/n)\n    return p * sum(a[c:]) + (1 - p) * a[0]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2727,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, L = map(int, input_string.split())\n    G = list(map(int, input().split()))\n    count = 0\n    for i in range(1, N+1):\n        if i not in G:\n            count += 1\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2728,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    class_sizes = list(map(int, input_string[1:]))\n    class_sizes.sort()\n    \n    if sum(class_sizes) % 3 != 0:\n        return -1\n    \n    for i in range(n):\n        if class_sizes[i] == class_sizes[n-1]:\n            return i+1, n\n    \n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2729,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    result = []\n    quotient = N // M\n    remainder = N % M\n    result.append(str(quotient))\n    while remainder >= M:\n        quotient = remainder // M\n        remainder = remainder % M\n        result.append(str(quotient))\n    if remainder > 0:\n        result.append(str(remainder))\n    return '.'.join(result)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2730,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    p = 1\n    for i in range(1, N+1):\n        p *= (K+1) / i\n    return p\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2731,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string by comma\n    input_list = input_string.split(',')\n    \n    # Initialize the output string\n    output_string = ''\n    \n    # Check if the input string is empty\n    if len(input_list) == 0:\n        return '{}'\n    \n    # Check if the input string has only one element\n    elif len(input_list) == 1:\n        return '{ ' + input_list[0] + ' }'\n    \n    # If the input string has more than one element\n    else:\n        # Initialize the indentation level\n        indentation = 2\n        # Iterate through the input list\n        for i in range(len(input_list)):\n            # If the current element is an array\n            if '{' in input_list[i]:\n                # Add the opening curly brace and increase the indentation level\n                output_string += '{\\n' + ' ' * indentation + input_list[i] + ',\\n'\n                indentation += 2\n            # If the current element is not an array\n            else:\n                # Add the current element and decrease the indentation level\n                output_string += ' ' * indentation + input_list[i] + ',\\n'\n                indentation -= 2\n        # Add the closing curly brace and decrease the indentation level\n        output_string += ' ' * (indentation - 2) + '}'\n    \n    # Return the modified array\n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2732,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    W = float(input_string)\n    # calculate the time it takes for Agneta to complete one revolution\n    time_agneta = 2 * 3.14159 * (1/1)\n    # calculate the time it takes for Beata to complete one revolution\n    time_beata = 2 * 3.14159 * (2/1)\n    # calculate the angle they will have travelled during the ride\n    angle_agneta = W * time_agneta\n    angle_beata = W * time_beata\n    # calculate the distance they will have travelled during the ride\n    distance_agneta = 1 * angle_agneta\n    distance_beata = 2 * angle_beata\n    # calculate the Euclidean distance between them\n    euclidean_distance = ((distance_agneta - distance_beata) ** 2 + (0 - 1) ** 2) ** 0.5\n    return round(euclidean_distance, 5)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2733,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def distance(a, b):\n        return ((a[0] - b[0])**2 + (a[1] - b[1])**2)**0.5\n    \n    def area(r):\n        return r**2 * np.pi\n    \n    def velocity(a, b):\n        return (a[2] + b[2]) / 2, (a[3] + b[3]) / 2\n    \n    def position(a, b):\n        return (a[0] * a[4] + b[0] * b[4]) / (a[4] + b[4]), (a[1] * a[4] + b[1] * b[4]) / (a[4] + b[4])\n    \n    def agglomerate(a, b):\n        return a[0] * a[4] + b[0] * b[4], a[1] * a[4] + b[1] * b[4], a[2] * a[4] + b[2] * b[4], a[3] * a[4] + b[3] * b[4], a[4] + b[4]\n    \n    def collision(a, b):\n        return distance(a[:2], b[:2]) <= a[4] + b[4] + 0.001\n    \n    def time_to_collision(a, b):\n        return abs(distance(a[:2], b[:2]) - a[4] - b[4]) / (abs(a[2] - b[2]) + abs(a[3] - b[3]))\n    \n    def agglomeration_time(droplets):\n        for i in range(len(droplets)):\n            for j in range(i+1, len(droplets)):\n                if collision(droplets[i], droplets[j]):\n                    return min(time_to_collision(droplets[i], droplets[j]), agglomeration_time(droplets))\n        return 10**9\n    \n    N = int(input_string[0])\n    droplets",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2734,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, k = map(int, input_string.split())\n    M = 2**k\n    while N >= M:\n        M += 2**k\n    return M\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2735,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of lists\n    input_list = [list(input_string[i:i+8] for i in range(0, len(input_string), 8))\n    target_list = [list(input_string[i:i+8] for i in range(0, len(input_string), 8)\n    \n    # Initialize variables\n    clicks = 0\n    current_list = input_list\n    target_list = target_list\n    \n    # Loop through each character in the target list\n    for i in range(len(target_list[0])):\n        # Check if the current character matches the target character\n        if current_list[0][i] == target_list[0][i]:\n            continue\n        else:\n            # Check the type of the current character\n            if current_list[0][i] == 'A':\n                # Check if the previous character is A\n                if current_list[0][i-1] == 'A':\n                    # Check if the next character is A\n                    if current_list[0][i+1] == 'A':\n                        # Click the current character\n                        clicks += 1\n                        current_list[0][i] = 'A'\n                        current_list[0][i-1] = 'A'\n                        current_list[0][i+1] = 'A'\n                    else:\n                        # Click the current character\n                        clicks += 1\n                        current_list[0][i] = 'A'\n                        current_list[0][i-1] = 'B'\n                elif current_list[0][i-1] == 'B':\n                    # Click the current character\n                    clicks += 1\n                    current_list[0][i] = 'B'\n                elif current_list[0][i-1] == 'C':\n                    # Click the current character\n                    clicks += 1\n                    current_list[0][i] = 'C'\n                elif current_list[0][i-1] == 'D':\n                    # Click the current character\n                    clicks += 1\n                    current_list[0][i]",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2736,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    x, y = map(int, input_string.split()[:2])\n    heights = [list(map(int, input_string.split()[2:])]\n    # Initialize a 2D array to store the heights of each cell\n    heights = [[0 for j in range(x)] for i in range(y)]\n    for i in range(y):\n        heights[i] = list(map(int, input().split()))\n    \n    # Initialize a 2D array to store the number of cells that can collect water\n    can_collect = [[0 for j in range(x)] for i in range(y)]\n    \n    # Initialize a 2D array to store the number of cells that have been visited\n    visited = [[0 for j in range(x)] for i in range(y)]\n    \n    # Initialize a 2D array to store the number of cells that have been visited\n    visited = [[0 for j in range(x)] for i in range(y)]\n    \n    # Initialize a 2D array to store the number of cells that have been visited\n    visited = [[0 for j in range(x)] for i in range(y)]\n    \n    # Initialize a 2D array to store the number of cells that have been visited\n    visited = [[0 for j in range(x)] for i in range(y)]\n    \n    # Initialize a 2D array to store the number of cells that have been visited\n    visited = [[0 for j in range(x)] for i in range(y)]\n    \n    # Initialize a 2D array to store the number of cells that have been visited\n    visited = [[0 for j in range(x)] for i in range(y)]\n    \n    # Initialize a 2D array to store the number of cells that have been visited\n    visited = [[0 for j in range(x)] for i in range(y)]\n    \n    # Initialize a 2D array to store the number of cells that have been visited\n    visited = [[0 for j in range(x)] for i in range(y)]\n    \n    # Initialize a 2D array to store the number of cells that have been visited\n    visited = [[0 for j in range(x)] for i",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2737,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m, s = map(int, input_string.split()[:3])\n    people = list(map(int, input_string.split()[3:n+3])\n    roads = [map(int, input_string.split()[n+3:n+m*2+3:3])\n    shelters = list(map(int, input_string.split()[n+m*3:n+m*3+s*2:2])\n    \n    # initialize graph\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        u, v, w = roads[i]\n        graph[u-1].append((v-1, w)\n        graph[v-1].append((u-1, w)\n    \n    # initialize shelters\n    shelters = [[] for _ in range(s)]\n    for i in range(s):\n        shelters[i] = (shelters[i], int(input_string.split()[n+m*3+2*i+1])\n    \n    # initialize people\n    people_shelter = [None] * n\n    \n    # initialize distances\n    distances = [float('inf') * n\n    distances[0] = 0\n    \n    # initialize queue\n    queue = [(0, 0)\n    \n    # initialize visited\n    visited = [False] * n\n    \n    # initialize shelters\n    shelters_taken = [False] * s\n    \n    # initialize min_time\n    min_time = float('inf')\n    \n    while queue:\n        time, node = heapq.heappop(queue)\n        if visited[node]:\n            continue\n        visited[node] = True\n        if shelters_taken[people_shelter[node]]:\n            min_time = min(min_time, time)\n            continue\n        shelters_taken[people_shelter[node]] = True\n        for neighbor, weight in graph[node]:\n            if not shelters_taken[people_shelter[neighbor]:\n                heapq.heappush(queue",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2738,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    def distance(x1, y1, r1, x2, y2, r2):\n        return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 - r1 - r2\n    \n    def is_connected(x1, y1, r1, x2, y2, r2):\n        return distance(x1, y1, r1, x2, y2, r2) <= r1 + r2\n    \n    def can_move(x1, y1, r1, x2, y2, r2):\n        return distance(x1, y1, r1, x2, y2, r2) <= r1 + r2\n    \n    def turn_ratio(x1, y1, r1, x2, y2, r2):\n        d = distance(x1, y1, r1, x2, y2, r2)\n        if d > r1 + r2:\n            return -1\n        elif d == r1 + r2:\n            return 0\n        else:\n            return lcm(r1, r2) // gcd(r1, r2)\n    \n    n = int(input_string[0])\n    source_x, source_y, source_r = 0, 0, 0\n    target_x, target_y, target_r = 0, 0, 0\n    for i in range(1, n + 1):\n        x, y, r = map(int, input_string[i].split())\n        if i == 1:\n            source_x, source_y, source_r = x, y, r\n        elif i == n:\n            target_x, target_y, target_r = x, y, r\n        else:\n            pass\n    \n    if not is_connected(source_x, source_y, source_r, target",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2739,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    bacteria = list(map(int, input_string[1].split()))\n    if n == 1:\n        return bacteria[0]\n    if n == 2:\n        if bacteria[0] == 0 or bacteria[1] == 0:\n            return \"error\"\n        return bacteria[0] * 2**(n-1)\n    if bacteria[0] == 0 or bacteria[1] == 0:\n        return \"error\"\n    bacteria[1] = bacteria[0] * 2**(n-1)\n    for i in range(2, n):\n        if bacteria[i] == 0:\n            return \"error\"\n        bacteria[i] = bacteria[i-1] * 2\n    return bacteria[-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2740,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, w, h = map(int, input_string.split())\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n    # print(n, w, h)\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2741,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to decimal\n    decimal_number = 0\n    for i in range(len(input_string)):\n        decimal_number += int(input_string[i]) * 8**i\n    \n    # Convert decimal_number to hexadecimal\n    hexadecimal_number = \"\"\n    while decimal_number > 0:\n        hexadecimal_number = chr(decimal_number % 16 + 48) + hexadecimal_number\n        decimal_number //= 16\n    \n    # Convert hexadecimal_number to uppercase\n    hexadecimal_number = hexadecimal_number.upper()\n    \n    return hexadecimal_number\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2742,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2743,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    h, w = map(int, input_string[0].split())\n    grid = input_string[1:]\n    left_x = float('inf')\n    right_x = float('-inf')\n    center_x = 0\n    \n    # Iterate through the grid\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == '#':\n                center_x += j\n            elif grid[i][j] == '/':\n                left_x = min(left_x, j)\n            elif grid[i][j] == '\\\\':\n                right_x = max(right_x, j)\n            elif grid[i][j] == '_':\n                center_x += j\n            elif grid[i][j] == '|':\n                center_x += j\n    \n    # Calculate the center of gravity\n    center_x /= sum(grid.count('#'))\n    \n    # Check if the structure is balanced, left or right\n    if center_x < left_x:\n        return 'left'\n    elif center_x > right_x:\n        return 'right'\n    else:\n        return 'balanced'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2744,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split()[:2])\n    routes = [list(map(int, input_string.split()[2:6:2]) for _ in range(m))\n    a = list(map(int, input_string.split()[6:])\n    \n    # Your code here\n    # Initialize a dictionary to store the minimum distance between two cities\n    min_dist = {i: float('inf') for i in range(1, n+1)}\n    min_dist[1] = 0\n    \n    # Initialize a priority queue to store the cities with minimum distance from city 1\n    pq = [(0, 1)]\n    \n    while pq:\n        dist, city = heapq.heappop(pq)\n        if dist > min_dist[city]:\n            continue\n        \n        for route in routes:\n            if route[0] == city:\n                if dist + route[2] < min_dist[route[1]]:\n                    min_dist[route[1]] = dist + route[2]\n                    heapq.heappush(pq, (dist + route[2], route[1]))\n                    \n    for i in range(1, n+1):\n        if min_dist[i] == float('inf'):\n            min_dist[i] = float('inf')\n    \n    # Calculate the minimum cost to attend the concert in each city\n    min_cost = [min_dist[i] + a[i-1] for i in range(1, n+1)]\n    \n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2745,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize an empty list to store the starting indices\n    indices = []\n    \n    # Loop through each word in the list of words\n    for word in words:\n        # Loop through the input string\n        for i in range(len(input_string)):\n            # Check if the word is found at the current index\n            if input_string[i:i+len(word)] == word:\n                # If it is, add the index to the list of indices\n                indices.append(i)\n    \n    return indices\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2746,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def compare_version(version1, version2):\n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        for i in range(max(len(v1), len(v2)):\n            if i >= len(v1):\n                v1.append(0)\n            if i >= len(v2):\n                v2.append(0)\n            if int(v1[i]) > int(v2[i]):\n                return 1\n            elif int(v1[i]) < int(v2[i]):\n                return -1\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2747,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string to a list of integers\n    nums = list(map(int, input_string.split()))\n    \n    # Initialize the left and right pointers\n    left, right = 0, len(nums) - 1\n    \n    # Initialize the result list\n    result = [-1, -1]\n    \n    # Loop through the list while the left pointer is less than the right pointer\n    while left <= right:\n        # Calculate the middle index\n        middle = (left + right) // 2\n        \n        # If the middle element is equal to the target, update the result and move the pointers\n        if nums[middle] == target:\n            result = [middle, middle]\n            left = middle + 1\n            right = middle - 1\n        # If the middle element is less than the target, move the left pointer to the right\n        elif nums[middle] < target:\n            left = middle + 1\n        # If the middle element is greater than the target, move the right pointer to the left\n        else:\n            right = middle - 1\n            \n    # Return the result list\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2748,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Define a dictionary to map digits to letters\n    digit_to_letters = {\n        '2': ['a', 'b', 'c'],\n        '3': ['d', 'e', 'f'],\n        '4': ['g', 'h', 'i'],\n        '5': ['j', 'k', 'l'],\n        '6': ['m', 'n', 'o'],\n        '7': ['p', 'q', 'r', 's'],\n        '8': ['t', 'u', 'v'],\n        '9': ['w', 'x', 'y', 'z']\n    }\n    \n    # Define a recursive function to generate all possible combinations\n    def generate_combinations(input_string, index, current_combination, result):\n        # Base case: if the index is equal to the length of the input string, add the current combination to the result and return\n        if index == len(input_string):\n            result.append(''.join(current_combination))\n            return\n        # Recursive case: iterate through the letters for the current digit and call the function with the next index and the new combination\n        digit = input_string[index]\n        for letter in digit_to_letters[digit]:\n            current_combination.append(letter)\n            generate_combinations(input_string, index + 1, current_combination, result)\n            current_combination.pop()\n    \n    # Initialize the result list and call the function with the first digit\n    result = []\n    generate_combinations(input_string, 0, [], result)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2749,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,w = map(int,input().split())\n    n = int(input())\n    a = list(map(int,input().split())\n    colors = [0]*n\n    for i in range(h):\n        colors[i] = [0]*w\n    for i in range(n):\n        colors[i] = list(map(int,input().split())\n    # Your code goes here\n    return colors\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2750,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, B = map(int, input_string.split())\n    A = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        if A[i] == B:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2751,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    def max_score(sequence):\n        score = 1\n        for i in range(len(sequence)):\n            for j in range(i+1, len(sequence)):\n                score = lcm(score, gcd(sequence[i], sequence[j]))\n        return score\n    \n    def min_operations(sequence):\n        for i in range(len(sequence)):\n            for j in range(i+1, len(sequence)):\n                if sequence[i] % sequence[j] == 0:\n                    return 1\n        return 0\n    \n    N = int(input_string.split()[0])\n    sequence = list(map(int, input_string.split()[1:]))\n    max_score_value = max_score(sequence)\n    min_operations_value = min_operations(sequence)\n    \n    return max_score_value, min_operations_value\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2752,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2753,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # convert input_string to list of timestamps\n    timestamps = input_string.split('\\n')\n    timestamps = [timestamp.split(':') for timestamp in timestamps]\n    timestamps = [[int(timestamp[0]), int(timestamp[1])] for timestamp in timestamps]\n    \n    # convert timestamps to seconds\n    timestamps = [(timestamp[0] * 3600) + (timestamp[1] * 60) for timestamp in timestamps]\n    \n    # calculate the time difference between the two timestamps\n    time_diff = abs(timestamps[0] - timestamps[1])\n    \n    # calculate the time difference between consecutive flashes\n    flash_diff = [int(timestamps[2]), int(timestamps[3])]\n    \n    # calculate the number of flashes until the next flash\n    flash_count = (24 * 3600) // flash_diff[0]\n    \n    # calculate the time of the next flash\n    next_flash = timestamps[0] + flash_diff[0] * flash_count\n    \n    # calculate the time of the first flash\n    first_flash = next_flash - (next_flash % 3600)\n    \n    # calculate the day of the first flash\n    day_of_week = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'][int((first_flash // (24 * 3600)) % 7)]\n    \n    # calculate the time of the first flash\n    time_of_first_flash = (first_flash % 24, first_flash % 3600 // 60)\n    \n    # check if the stars will never flash at the same minute\n    if time_diff % flash_diff[0] != 0:\n        return \"Never\"\n    else:\n        return day_of_week, f\"{time_of_first_flash[0]:02d}:{time_of_first_flash[1]:02d}\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2754,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    x, y_low, y_high = map(int, input_string.split())\n    \n    if y_low > y_high:\n        return \"impossible\"\n    \n    if y_low == y_high:\n        return 0, 0\n    \n    k_min = 0\n    k_max = 0\n    \n    while True:\n        y = int(10 * (x ** 0.5))\n        if y_low <= y <= y_high:\n            break\n        k_min += 1\n        x = int(10 * (x ** 0.5))\n    \n    while True:\n        y = int(10 * (x ** 0.5))\n        if y_low <= y <= y_high:\n            k_max += 1\n        else:\n            break\n        x = int(10 * (x ** 0.5))\n    \n    if k_min == k_max:\n        return k_min, k_max\n    else:\n        return k_min, \"inf\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2755,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2756,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2757,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Convert the list of integers to a dictionary\n    input_dict = {i: input_list[i] for i in range(2**len(input_list))}\n    \n    # Initialize the root vertex\n    root = {'label': None, 'left': None, 'right': None}\n    \n    # Initialize the vertex count\n    vertex_count = 1\n    \n    # Initialize the queue\n    queue = [root]\n    \n    # Initialize the current vertex\n    current_vertex = root\n    \n    # Iterate through the input_dict\n    for i in range(len(input_dict)):\n        # If the current vertex has not been visited\n        if current_vertex['label'] is None:\n            # Set the label of the current vertex\n            current_vertex['label'] = input_dict[i]\n            # If the current vertex has a non-zero label\n            if current_vertex['label'] != 0:\n                # Create two new vertices\n                current_vertex['left'] = {'label': None, 'left': None, 'right': None}\n                current_vertex['right'] = {'label': None, 'left': None, 'right': None}\n                # Add them to the queue\n                queue.append(current_vertex['left'])\n                queue.append(current_vertex['right'])\n                # Increment the vertex count\n                vertex_count += 2\n            # If the current vertex has a zero label\n            else:\n                # Create a new vertex\n                current_vertex['left'] = {'label': None, 'left': None, 'right': None}\n                # Add it to the queue\n                queue.append(current_vertex['left'])\n                # Increment the vertex count\n                vertex_count += 1\n            # Set the current vertex to the left child\n            current_vertex = current_vertex['left']\n        else:\n            # If the current vertex has been visited\n            # Set the label of the current vertex\n            current_vertex['label'] = input_dict[i]\n            # If the current vertex",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2758,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2759,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N = int(input_string[0])\n    tanks = [tuple(map(int, input_string[i].split())) for i in range(1, N+1)]\n    \n    # create a matrix of size NxN\n    board = [[0]*N for _ in range(N)]\n    \n    # fill the matrix with the tanks\n    for i, (r, c) in enumerate(tanks):\n        board[r-1][c-1] = i+1\n    \n    # initialize variables\n    moves = 0\n    visited = set()\n    result = []\n    \n    # iterate over the matrix\n    for i in range(N):\n        for j in range(N):\n            # if the tank is not in the correct position, move it to the correct position\n            if board[i][j] != i+1:\n                moves += 1\n                result.append((board[i][j], 'D' if i < i else 'U' if i > i else 'L' if j < j else 'R'))\n                board[i][j] = i+1\n                visited.add((i,j))\n    \n    # iterate over the matrix again\n    for i in range(N):\n        for j in range(N):\n            # if the tank is not in the correct position, move it to the correct position\n            if board[i][j] != j+1:\n                moves += 1\n                result.append((board[i][j], 'L' if j < j else 'R' if j > j else 'U' if i < i else 'D')\n                board[i][j] = j+1\n                visited.add((i,j))\n    \n    # return the result\n    return moves, result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2760,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Initialize variables\n    n = len(input_list)\n    swaps = [0] * n\n    swaps[0] = 0\n    swaps[n-1] = 0\n    \n    # Loop through each phase\n    for i in range(1, n):\n        if i % 2 == 0:\n            # Even phase\n            max_num = max(input_list)\n            max_index = input_list.index(max_num)\n            swaps[max_index] += 1\n            input_list.remove(max_num)\n        else:\n            # Odd phase\n            min_num = min(input_list)\n            min_index = input_list.index(min_num)\n            swaps[min_index] += 1\n            input_list.remove(min_num)\n    \n    # Print the number of swaps in each phase\n    for swap in swaps:\n        print(swap)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2761,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def distance(x1, y1, x2, y2):\n        return ((x2-x1)**2 + (y2-y1)**2)**0.5\n    \n    def is_parallel(x1, y1, x2, y2, x3, y3):\n        return (x2-x1)*(y3-y1) == (x3-x1)*(y2-y1)\n    \n    def is_collinear(x1, y1, x2, y2, x3, y3):\n        return (x2-x1)*(y3-y1) == (x3-x1)*(y2-y1)\n    \n    def is_common_point(x1, y1, x2, y2, x3, y3):\n        return x1 == x2 and y1 == y2 or x1 == x3 and y1 == y3 or x2 == x3 and y2 == y3\n    \n    def is_valid_triangle(x1, y1, x2, y2, x3, y3, x4, y4):\n        return distance(x1, y1, x2, y2) + distance(x2, y2, x3, y3) > distance(x3, y3, x4, y4) and distance(x3, y3, x4, y4) + distance(x4, y4, x1, y1) > distance(x1, y1, x2, y2) and distance(x2, y2, x4, y4) + distance(x4, y4, x3, y3) > distance(x3, y3, x1, y1)\n    \n    def max_perimeter(x1, y1, x2, y2, x3, y3, x4, y4):\n        return max(distance(x1, y1, x2, y2), distance(x2, y2, x3, y3), distance(x3, y3, x4, y4))\n    \n    lines = input_string.split('\\n')\n    lines = [line.split() for line in lines]\n    lines",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2762,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, G, k = map(int, input_string.split())\n    a = list(map(int, input().split())\n    a.sort()\n    min_cost = float('inf')\n    for i in range(N):\n        for j in range(i+1, N):\n            cost = sum([abs(a[j]-a[i])**k for i in range(i, j+1)])\n            min_cost = min(min_cost, cost)\n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2763,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    grille = input_string[1:n+1]\n    message = input_string[n+1:]\n    \n    if 'X' in grille:\n        return \"invalid grille\"\n    \n    decrypted_message = \"\"\n    for i in range(n):\n        for j in range(n):\n            decrypted_message += message[i*n+j]\n    \n    return decrypted_message\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2764,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize the board\n    board = [list(input_string[i][:8]) for i in range(8)]\n    turtle_pos = (0, 0)\n    turtle_dir = 0\n    diamond_found = False\n    \n    # Execute the program\n    for instruction in input_string[8].split():\n        if instruction == 'F':\n            if turtle_dir == 0:\n                if board[turtle_pos[0]][turtle_pos[1] + 1] == '.':\n                    turtle_pos = (turtle_pos[0], turtle_pos[1] + 1)\n                else:\n                    return \"Bug!\"\n            elif turtle_dir == 1:\n                if board[turtle_pos[0] + 1][turtle_pos[1]] == '.':\n                    turtle_pos = (turtle_pos[0] + 1, turtle_pos[1])\n                else:\n                    return \"Bug!\"\n            elif turtle_dir == 2:\n                if board[turtle_pos[0]][turtle_pos[1] - 1] == '.':\n                    turtle_pos = (turtle_pos[0], turtle_pos[1] - 1)\n                else:\n                    return \"Bug!\"\n            elif turtle_dir == 3:\n                if board[turtle_pos[0] - 1][turtle_pos[1]] == '.':\n                    turtle_pos = (turtle_pos[0] - 1, turtle_pos[1])\n                else:\n                    return \"Bug!\"\n        elif instruction == 'R':\n            turtle_dir = (turtle_dir + 1) % 4\n        elif instruction == 'L':\n            turtle_dir = (turtle_dir - 1) % 4\n        elif instruction == 'X':\n            if turtle_dir == 0:\n                if board[turtle_pos[0]][t",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2765,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    coin_system = list(map(int, input_string.split()))\n    coin_system.sort()\n    if sum(coin_system) % 2 == 0:\n        return \"non-canonical\"\n    else:\n        return \"canonical\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2766,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k, p = input_string\n    n = int(n)\n    k = int(k)\n    p = float(p)\n    p = 1 - p\n    prob_win = 1 - p\n    prob_draw = 1\n    for i in range(1, k+1):\n        prob_draw *= (1 - p)**i\n    prob_draw = 1 - prob_draw\n    prob_win = 1 - prob_draw\n    return prob_draw\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2767,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2768,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, M = map(int, input_string.split()[0:2])\n    cubes = [tuple(map(int, input_string.split()[2:]) for _ in range(M))\n    \n    # initialize the surface with all cubes\n    surface = [[0] * N for _ in range(N)]\n    for r, c in cubes:\n        surface[r-1][c-1] = 1\n    \n    # count the number of cubes on each row and column\n    row_counts = [0] * N\n    col_counts = [0] * N\n    for r, c in cubes:\n        row_counts[r-1] += 1\n        col_counts[c-1] += 1\n    \n    # calculate the number of moves needed\n    moves = 0\n    for i in range(N):\n        if row_counts[i] == 0:\n            moves += N - col_counts[i]\n        if col_counts[i] == 0:\n            moves += N - row_counts[i]\n    \n    return moves\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2769,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, p, q, s = map(int, input_string.split())\n    classical_difficulties = list(map(int, input().split()))\n    creative_difficulties = list(map(int, input().split()))\n    \n    classical_difficulties.sort()\n    creative_difficulties.sort()\n    \n    if len(classical_difficulties) + len(creative_difficulties) < n:\n        return -1\n    \n    classical_difficulties.reverse()\n    creative_difficulties.reverse()\n    \n    min_diff = float('inf')\n    \n    for i in range(min(len(classical_difficulties), n)):\n        for j in range(min(len(creative_difficulties), n-i):\n            min_diff = min(min_diff, abs(classical_difficulties[i] - creative_difficulties[j]))\n    \n    return min_diff\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2770,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read the input\n    N = int(input_string.pop(0))\n    a = list(map(int, input_string.pop(0).split()))\n    x = list(map(int, input_string.pop(0).split()))\n    \n    # Calculate the recurrence\n    for i in range(N):\n        x.append(sum(a[j] * x[i-j] for j in range(N)) % 10000000000007)\n    \n    # Read the queries\n    Q = int(input_string.pop(0))\n    for _ in range(Q):\n        T, M = map(int, input_string.pop(0).split())\n        print(x[T] % M)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2771,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string to a list of integers\n    input_list = [int(x) for x in input_string]\n    \n    # Initialize the list of houses\n    houses = list(range(1, len(input_list) + 1))\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate through the input list\n    for i in range(len(input_list)):\n        if input_list[i] == 'L':\n            # If the robot moved left, remove the first house from the list\n            houses.pop(0)\n        else:\n            # If the robot moved right, remove the last house from the list\n            houses.pop()\n        # Append the current house to the result list\n        result.append(houses[0])\n    \n    # Return the result list\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2772,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    a, d = map(int, input_string.split()[0:2])\n    ascending = [map(int, input_string.split()[2:2+a])]\n    descending = [map(int, input_string.split()[2+a:])\n    \n    # compute total change in elevation\n    total_change = sum(ascending) - sum(descending)\n    \n    # compute time to reach summit\n    time_to_summit = sum(t for h, t in ascending if h != 0)\n    \n    # compute time to reach base\n    time_to_base = sum(t for h, t in descending if h != 0)\n    \n    # compute time to reach same elevation\n    time_to_same_elevation = abs(total_change) / (sum(h for h, t in ascending if h != 0) - sum(h for h, t in descending if h != 0))\n    \n    # compute time to reach same spot\n    time_to_same_spot = time_to_summit + time_to_base + time_to_same_elevation\n    \n    return time_to_same_spot\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2773,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = map(int, input_string.split()[:2])\n    roads = [map(int, input_string.split()[2:6:2]) for _ in range(m)]\n    \n    # create graph\n    graph = [[] for _ in range(n)]\n    for a, b, d in roads:\n        graph[a].append((b, d))\n        graph[b].append((a, d))\n    \n    # initialize distances\n    distances = [float('inf')] * n\n    distances[0] = 0\n    \n    # initialize queue\n    queue = [(0, 0)]\n    \n    # initialize visited\n    visited = [False] * n\n    \n    # initialize directions\n    directions = [0] * n\n    \n    while queue:\n        dist, node = heapq.heappop(queue)\n        if visited[node]:\n            continue\n        visited[node] = True\n        for neighbor, d in graph[node]:\n            if not visited[neighbor]:\n                new_dist = dist + d\n                if new_dist < distances[neighbor]:\n                    distances[neighbor] = new_dist\n                    heapq.heappush(queue, (new_dist, neighbor))\n                    directions[neighbor] = (node + directions[node]) % n\n    \n    if distances[1] == float('inf'):\n        return \"impossible\"\n    else:\n        path = [1]\n        current = 1\n        while current != 0:\n            path.append(current)\n            current = directions[current]\n        return len(path), *path[::-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2774,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, S, lamps_placed = input_string.split('\\n')\n    N = int(N)\n    S = int(S)\n    lamps_placed = list(map(int, lamps_placed.split()))\n    trails = []\n    for i in range(N-1):\n        a, b, d = map(int, input().split())\n        trails.append((a, b, d))\n    \n    # create graph\n    graph = [[] for _ in range(N+1)]\n    for a, b, d in trails:\n        graph[a].append((b, d)\n        graph[b].append((a, d)\n    \n    # find shortest path from campus to each intersection\n    dist = [float('inf')] * (N+1)\n    dist[1] = 0\n    queue = [1]\n    while queue:\n        u = queue.pop(0)\n        for v, w in graph[u]:\n            if dist[u] + w < dist[v]:\n                dist[v] = dist[u] + w\n                queue.append(v)\n    \n    # find longest path from campus to each intersection\n    longest_path = [0] * (N+1)\n    longest_path[1] = 0\n    queue = [1]\n    while queue:\n        u = queue.pop(0)\n        for v, w in graph[u]:\n            if dist[u] + w > longest_path[v]:\n                longest_path[v] = dist[u] + w\n                queue.append(v)\n    \n    # count number of lamps needed\n    lamps_needed = 0\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            if dist[i] + longest_path[j] >= S:\n                lamps_needed += 1\n    \n    # subtract already placed lamps\n    for lamp in lamps_placed:\n        lamps_needed -= 1\n    \n    return lamps_needed\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2775,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n = int(input_string[0])\n    house_x, house_y, work_x, work_y = map(int, input_string[1].split())\n    errands = [tuple(map(int, input_string[i+2].split()) for i in range(n))\n    \n    # initialize variables\n    visited = set()\n    errands_visited = 0\n    errands_to_visit = set()\n    \n    # add house and work to errands_to_visit\n    errands_to_visit.add((house_x, house_y))\n    errands_to_visit.add((work_x, work_y))\n    \n    # loop through errands\n    for errand in errands:\n        x, y = errand\n        # check if errand is already visited\n        if errand in visited:\n            continue\n        # add errand to visited\n        visited.add(errand)\n        # check if errand is on the way to work\n        if abs(x-house_x) + abs(y-house_y) <= abs(x-work_x) + abs(y-work_y):\n            errands_visited += 1\n        else:\n            # add errand to errands_to_visit\n            errands_to_visit.add(errand)\n    \n    # return number of errands visited\n    return errands_visited\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2776,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    ingredients = set(range(1, N+1))\n    prohibited_pairs = set()\n    \n    for _ in range(M):\n        a, b = map(int, input().split())\n        prohibited_pairs.add((min(a, b), max(a, b)))\n    \n    result = 1\n    for i in range(1, N+1):\n        if i not in prohibited_pairs:\n            result *= 2\n    \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2777,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2778,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K, T = map(int, input_string.split())\n    mod = 100000009\n    count = 0\n    for i in range(1, N+1):\n        count += (K+1)**N\n    count = count % mod\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2779,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, c = map(int, input_string.split())\n    grid = []\n    costs = []\n    for _ in range(n):\n        grid.append(input().split())\n    for _ in range(c):\n        costs.append(int(input()))\n    \n    # Initialize variables\n    min_cost = float('inf')\n    barricades = [[0 for _ in range(m)] for _ in range(n)]\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    # Function to find the minimum cost to reach the bank\n    def dfs(x, y, cost):\n        if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == '.' or visited[x][y]:\n            return cost\n        if grid[x][y] == 'B':\n            return cost\n        visited[x][y] = True\n        for dx, dy in directions:\n            dfs(x+dx, y+dy, cost+1)\n    \n    # Function to place barricades\n    def place_barricades(x, y, cost):\n        nonlocal min_cost\n        if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == '.' or visited[x][y]:\n            return\n        if grid[x][y] == 'B':\n            min_cost = min(min_cost, cost)\n            return\n        visited[x][y] = True\n        barricades[x][y] = 1\n        for dx, dy in directions:\n            place_barricades(x+dx, y+dy, cost+costs[ord(grid[x][y])-97])\n            barricades[x][y] = 0\n            visited[x][y] = False\n    \n    # Find the minimum cost to reach the bank\n    dfs(0, 0, 0)\n    \n    # If the bank is on the border, there is no way to prevent the robbers",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2780,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    probabilities = [0] * (M+1)\n    for i in range(1, M+1):\n        probabilities[i] = 1 / M\n    return probabilities\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2781,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2782,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, r, c = map(int, input_string.split())\n    seats = []\n    for i in range(n):\n        a, b, s = map(int, input().split())\n        seats.append((a, b, s))\n    \n    # sort seats by row and column\n    seats.sort()\n    \n    # initialize seats matrix\n    seats_matrix = [[0] * c for _ in range(r)]\n    \n    # fill seats matrix\n    for i in range(n):\n        a, b, s = seats[i]\n        seats_matrix[a-1][b-1] = i\n    \n    # count number of seats available in each row\n    seats_count = [0] * r\n    for row in seats_matrix:\n        seats_count[0] += row.count(0)\n    \n    # iterate over rows\n    for i in range(1, r):\n        seats_count[i] = min(seats_count[i-1], seats_count[i]) + seats_matrix[i].count(0)\n    \n    # count number of seats available in each column\n    cols_count = [0] * c\n    for j in range(c):\n        cols_count[j] = sum(seats_matrix[i][j] == 0 for i in range(r))\n    \n    # iterate over columns\n    for j in range(1, c):\n        cols_count[j] = min(cols_count[j-1], cols_count[j]) + seats_matrix[0][j] == 0\n    \n    # iterate over rows and columns\n    for i in range(1, r):\n        for j in range(1, c):\n            if seats_matrix[i][j] == 0:\n                seats_count[i] = min(seats_count[i], cols_count[j])\n                cols_count[j] = min(cols_count[j], seats_count[i])\n    \n    # count number of seats available in each cell\n    cells_count = [0] * (r*c)\n    for i in range(r):\n        for j in range(",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2783,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, dorm_x, dorm_y, class_x, class_y = input_string.split('\\n')\n    n = int(n)\n    shady_spots = []\n    for i in range(n):\n        shady_spots.append(list(map(int, input().split()))\n    dorm_x, dorm_y = map(int, dorm_x.split())\n    class_x, class_y = map(int, class_x.split())\n    \n    # calculate distances to shady spots\n    distances = []\n    for spot in shady_spots:\n        distances.append(abs(spot[0] - dorm_x) + abs(spot[1] - dorm_y))\n    \n    # find the shady spot with the minimum distance\n    min_distance = min(distances)\n    min_index = distances.index(min_distance)\n    \n    # calculate the sweat rate at each shady spot\n    sweat_rates = []\n    for spot in shady_spots:\n        sweat_rates.append(min_distance ** 2)\n    \n    # calculate the sweat rate at the class\n    sweat_rates.append(0)\n    \n    # calculate the total sweat for each path\n    def total_sweat(path):\n        total_sweat = 0\n        for i in range(len(path)):\n            total_sweat += sweat_rates[path[i]]\n        return total_sweat\n    \n    # find the path with the minimum total sweat\n    min_sweat = float('inf')\n    min_path = None\n    for i in range(2**n):\n        path = []\n        for j in range(n+1):\n            if i & (1 << j):\n                path.append(j)\n        if total_sweat(path) < min_sweat:\n            min_sweat = total_sweat(path)\n            min_path = path\n    \n    # print the path\n    if min_path is None:\n        print('-')\n   ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2784,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, fragments = input_string.split(\"\\n\")\n    n = int(n)\n    fragments = [f.split() for f in fragments]\n    start, end = fragments[-1]\n    fragments = fragments[:-1]\n    \n    # create graph\n    graph = {}\n    for f in fragments:\n        for s in f[1:]:\n            if f[0] not in graph:\n                graph[f[0]] = [s]\n            else:\n                graph[f[0]].append(s)\n            if s not in graph:\n                graph[s] = [f[0]]\n            else:\n                graph[s].append(f[0])\n    \n    # find route\n    queue = [start]\n    visited = set()\n    route = []\n    while queue:\n        node = queue.pop(0)\n        if node == end:\n            break\n        if node in visited:\n            return \"no route found\"\n        visited.add(node)\n        route.append(node)\n        queue.extend(graph[node])\n    \n    if not route:\n        return \"no route found\"\n    else:\n        return \" \".join(route + [end])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2785,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, M = map(int, input_string.split())\n    investments = []\n    for _ in range(n):\n        p, c = map(int, input().split())\n        investments.append((p, c))\n    \n    # sort investments by profit per day\n    investments.sort(key=lambda x: x[0]/x[1], reverse=True)\n    \n    # initialize variables\n    days = 0\n    total_profit = 0\n    total_cost = 0\n    \n    # iterate through investments\n    for p, c in investments:\n        # calculate days needed to recoup cost\n        days_to_recoup = (M - total_cost) // c\n        # calculate profit earned in those days\n        profit_per_day = p * days_to_recoup\n        # add profit to total profit\n        total_profit += profit_per_day\n        # add cost to total cost\n        total_cost += c * days_to_recoup\n        # update days\n        days += days_to_recoup\n        # check if we have enough profit\n        if total_profit >= M:\n            return days\n    \n    # if we don't have enough profit, return -1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2786,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def is_valid(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack or stack.pop() != '(':\n                    return False\n        return not stack\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2787,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def distance(lat1, lon1, lat2, lon2):\n        R = 6371 # Earth's radius in km\n        lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])\n        dlat = lat2 - lat1\n        dlon = lon2 - lon1\n        a = (sin(dlat/2))**2 + cos(lat1) * cos(lat2) * (sin(dlon/2)**2)\n        c = 2 * atan2(sqrt(a), sqrt(1-a))\n        return R * c\n    \n    def flygskam(lat1, lon1, lat2, lon2):\n        return distance(lat1, lon1, lat2, lon2) + 100\n    \n    def min_flygskam(start, target):\n        min_shame = float('inf')\n        for i in range(len(airports)):\n            if airports[i][0] == start:\n                for j in range(len(airports)):\n                    if airports[j][0] == target:\n                        shame = flygskam(airports[i][1], airports[i][2], airports[j][1], airports[j][2])\n                        min_shame = min(min_shame, shame)\n        return min_shame\n    \n    def min_flygskam_two_way(start, target):\n        min_shame = float('inf')\n        for i in range(len(airports)):\n            if airports[i][0] == start:\n                for j in range(len(airports):\n                    if airports[j][0] == target:\n                        shame = flygskam(airports[i][1], airports[i][2], airports[j][1], airports[j][2])\n                        min_shame = min(min_shame, shame)\n        return min_shame\n    \n    def min_flygskam_all_pairs(start):\n        min_shame = float('inf')\n        for i in",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2788,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k, x, a, b = map(int, input_string.split())\n    sizes = list(map(int, input().split()))\n    \n    total_size = sum(sizes)\n    if total_size % k != 0:\n        return 'impossible'\n    \n    if a > b:\n        return 'impossible'\n    \n    if total_size < a:\n        return 'impossible'\n    \n    if total_size <= k * x:\n        return total_size\n    \n    if total_size % x != 0:\n        return 'impossible'\n    \n    return total_size // x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2789,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2790,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, s, t = map(int, input_string.split())\n    k = list(map(int, input().split())\n    \n    min_time = max_time = avg_time = 0\n    \n    for i in range(s):\n        time = sum(t * (k[i] == j) for j in range(s))\n        min_time = max(min_time, time)\n        max_time = max(max_time, time)\n        avg_time += time\n    \n    avg_time = avg_time / s\n    \n    return min_time, max_time, avg_time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2791,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, d = map(int, input_string.split())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] / d == a[j] / d:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2792,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize the alphabet in reverse order\n    alphabet = \"zyxwvutsrqponmlkjihgfedcba\"\n    # Initialize the count of each letter to 0\n    count = {letter: 0 for letter in alphabet}\n    # Initialize the current position of the letter in the alphabet\n    current_position = 0\n    # Iterate through the input_string\n    for order in input_string:\n        if order.startswith(\"SMJER\"):\n            # If the order is SMJER, rotate the alphabet\n            current_position = (current_position + int(order.split()[1]) - 1) % 26\n        else:\n            # If the order is UPIT, count the number of times the letter has been said\n            letter = order.split()[1]\n            count[letter] += 1\n            # If the letter has been said before, rotate the alphabet\n            if count[letter] > 0:\n                current_position = (current_position + alphabet.index(letter)) % 26\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2793,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m, s, t = map(int, input_string.split())\n    edges = []\n    for _ in range(m):\n        u, v, w = map(int, input().split())\n        edges.append((u, v, w))\n    \n    # build adjacency list\n    adj_list = [[] for _ in range(n)]\n    for u, v, w in edges:\n        adj_list[u].append((v, w))\n    \n    # initialize min_weight and visited\n    min_weight = float('inf')\n    visited = [False] * n\n    visited[s] = True\n    \n    # DFS to find minimum weight\n    def dfs(node, weight, visited, adj_list, min_weight):\n        if visited[t]:\n            return\n        for neighbor, weight in adj_list[node]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                min_weight = min(min_weight, weight)\n                dfs(neighbor, weight, visited, adj_list, min_weight)\n    \n    dfs(s, 0, visited, adj_list, min_weight)\n    \n    # find U\n    U = [i for i in range(n) if visited[i]]\n    U.remove(t)\n    \n    # output U\n    print(len(U))\n    for u in U:\n        print(u)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2794,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    h, c = map(int, input_string.split())\n    a = []\n    d = []\n    for _ in range(c):\n        a_, d_ = map(int, input().split())\n        a.append(a_)\n        d.append(d_)\n    \n    # Initialize the maximum annoyance level for each coworker\n    max_annoyance = [0] * c\n    \n    # Calculate the maximum annoyance level for each coworker\n    for i in range(h):\n        for j in range(c):\n            max_annoyance[j] += d[j]\n    \n    # Find the maximum annoyance level\n    max_level = max(max_annoyance)\n    \n    return max_level\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2795,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, e, p = map(int, input_string.split())\n    treehouses = []\n    for i in range(n):\n        x, y = map(float, input().split())\n        treehouses.append((x, y))\n    \n    cables = []\n    for i in range(p):\n        a, b = map(int, input().split())\n        cables.append((a-1, b-1))\n    \n    # calculate distances\n    distances = []\n    for i in range(n):\n        for j in range(i+1, n):\n            distances.append(abs(treehouses[i][0] - treehouses[j][0]) + abs(treehouses[i][1] - treehouses[j][1]))\n    \n    # sort distances\n    distances.sort()\n    \n    # find minimum length of new cables\n    min_length = 0\n    for i in range(e):\n        min_length += distances[i]\n    \n    # add cables\n    for i in range(e, n):\n        min_length += distances[i]\n    \n    return min_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2796,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2797,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b = map(int, input_string.split())\n    result = 0\n    for i in range(1, b+1):\n        result += a**i\n    return result % a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2798,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def cut_cuboid(cuboid, x, y, z):\n        x_min, x_max, y_min, y_max, z_min, z_max = cuboid\n        x_min += x\n        x_max -= x\n        y_min += y\n        y_max -= y\n        z_min += z\n        z_max -= z\n        return [(x_min, x_max, y_min, y_max, z_min, z_max)]\n    \n    def is_winner(cuboids):\n        if len(cuboids) == 0:\n            return \"RUBEN\"\n        elif len(cuboids) == 1:\n            return \"ALBERT\"\n        else:\n            return \"ALBERT\" if cuboids[0][0] > cuboids[1][0] else \"RUBEN\"\n    \n    def minimax(cuboids, player):\n        if player == \"RUBEN\":\n            return max(cuboids, key=lambda c: c[0])\n        else:\n            return min(cuboids, key=lambda c: c[0])\n    \n    def play(cuboids, player):\n        if len(cuboids) == 1:\n            return is_winner(cuboids)\n        else:\n            best_move = minimax(cuboids, player)\n            new_cuboids = [cut_cuboid(c, best_move[0], best_move[1], best_move[2]) for c in cuboids]\n            return play(new_cuboids, \"RUBEN\" if player == \"ALBERT\" else \"ALBERT\")\n    \n    player = input_string.strip()\n    cuboids = []\n    for _ in range(int(input())):\n        x, y, z = map(int, input().split())\n        cuboids.append((x, x, y, y, z, z))\n    \n    return play(cuboids, player)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2799,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, G, B, Y, S = map(int, input_string.split())\n    total_fruits = R + G + B + Y\n    prob_win = 1\n    for i in range(S):\n        prob_win *= 0.8\n    prob_win *= 0.25 * R + 0.25 * G + 0.25 * B + 0.25 * Y\n    return prob_win\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2800,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Alice can win.\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2801,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = map(int, input_string.split()[:2])\n    c = list(map(int, input_string.split()[2:n+2])\n    adj_list = [[] for _ in range(n)]\n    for _ in range(m):\n        s, t = map(int, input_string.split()[n+2:n+2+m)\n        adj_list[s].append(t)\n    \n    # initialize dp array\n    dp = [0] * n\n    dp[0] = c[0]\n    \n    # fill dp array\n    for i in range(1, n):\n        for j in adj_list[0]:\n            dp[j] = max(dp[j], dp[i] + c[i])\n    \n    # dynamic programming\n    for k in range(1, n):\n        for i in range(n):\n            for j in adj_list[i]:\n                dp[j] = max(dp[j], dp[i] + c[i])\n    \n    # return the maximum value in dp array\n    return max(dp)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2802,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input into a list of times\n    times = input_string.split()\n    times = [float(time) for time in times]\n    \n    # Calculate the average of the first three times\n    avg_time = sum(times[:3]) / 3\n    \n    # Calculate the target score\n    target_score = float(input())\n    \n    # Check if the target score is greater than the average time\n    if target_score > avg_time:\n        return \"impossible\"\n    \n    # Check if the target score is less than the worst time\n    if target_score < min(times):\n        return \"infinite\"\n    \n    # Calculate the worst time possible\n    worst_time = max(times)\n    \n    # Check if the worst time is greater than the target score\n    if worst_time <= target_score:\n        return round(worst_time, 2)\n    \n    # If the worst time is greater than the target score, return \"impossible\"\n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2803,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"goat!\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2804,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, B = map(int, input_string.split())\n    words = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    word_count = 0\n    used_words = set()\n    while word_count < B:\n        word = ''.join(random.choice(words) for _ in range(random.randint(1, 15))).lower()\n        if word not in used_words:\n            used_words.add(word)\n            word_count += 1\n    return ' '.join(used_words)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2805,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string)\n    counter = 0\n    for i in range(N-1, 0, -1):\n        if N % i == 0:\n            counter += 1\n            break\n    print(counter)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2806,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    c, t = map(int, input_string.split())\n    tunnels = [tuple(map(int, input().split()) for _ in range(t))\n    # initialize graph\n    graph = [[] for _ in range(c+1)]\n    for a, b in tunnels:\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    # find connected components\n    visited = [False] * (c+1)\n    components = []\n    def dfs(node):\n        if not visited[node]:\n            visited[node] = True\n            component = [node]\n            for neighbor in graph[node]:\n                component.extend(dfs(neighbor))\n            return component\n    for i in range(1, c+1):\n        if not visited[i]:\n            components.append(dfs(i))\n    \n    # find largest connected component\n    largest_component = max(components, key=len)\n    p = len(largest_component)\n    s = (c - p) // 2\n    \n    # find path through largest component\n    path = []\n    for i in range(1, c+1):\n        if i in largest_component:\n            path.append(i)\n            largest_component.remove(i)\n    \n    # divide remaining chambers\n    kids = [set(), set()]\n    for component in components:\n        if len(component) > s:\n            kids[0].update(component)\n        else:\n            kids[1].update(component)\n    \n    # output\n    print(p, s)\n    print(*path)\n    print(len(kids[0]), *kids[0])\n    print(len(kids[1]), *kids[1])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2807,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2808,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, k = map(int, input_string.split())\n    p = list(map(int, input().split()))\n    food_carts = []\n    for _ in range(m):\n        l, r = map(int, input().split())\n        food_carts.append((l, r))\n    \n    # Initialize a list to keep track of the number of passengers in each car\n    num_passengers = [0] * (n+1)\n    for i in range(n):\n        num_passengers[i+1] = sum(p[:i+1])\n    \n    # Initialize a list to keep track of the number of food carts in each car\n    num_carts = [0] * (n+1)\n    for l, r in food_carts:\n        num_carts[l-1] += 1\n        num_carts[r] -= 1\n    \n    # Initialize a list to keep track of the number of happy passengers in each car\n    num_happy = [0] * (n+1)\n    for i in range(n):\n        num_happy[i+1] = num_passengers[i+1]\n        for j in range(l-1, r):\n            num_happy[i+1] -= p[j]\n    \n    # Initialize the answer\n    ans = 1\n    \n    # Iterate through all possible combinations of food carts\n    for i in range(1, n+1):\n        for j in range(i):\n            # Calculate the number of happy passengers in the ith car\n            num_happy[i] = num_passengers[i] - num_happy[j]\n            # Calculate the number of happy passengers in the cars between j and i\n            for l, r in food_carts:\n                if l <= j and j+1 <= r:\n                    num_happy[i] -= p[j]\n            # Calculate the number of happy passengers in the cars after i\n            for l, r in food_carts:\n                if l > i:\n                    num_happy[i] += num_passengers[l]\n            # Add",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2809,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    s = input().strip()\n    R = int(s, 2)\n    count = 0\n    for i in range(1, R+1):\n        if bin(i).count('1') % 2 == 0:\n            count += 1\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2810,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of tuples\n    connections = [tuple(map(int, line.split())) for line in input_string.split('\\n')]\n    \n    # Create a graph\n    graph = [[] for _ in range(len(connections))]\n    for s, t in connections:\n        graph[s].append(t)\n        graph[t].append(s)\n    \n    # Count the number of simple loops\n    loops = 0\n    for i in range(len(graph)):\n        visited = [False] * len(graph)\n        stack = [i]\n        visited[i] = True\n        while stack:\n            node = stack.pop()\n            for neighbor in graph[node]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    stack.append(neighbor)\n            if not stack:\n                loops += 1\n    \n    return loops\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2811,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n, m = map(int, input_string.split())\n    parent = [0] * (n+1)\n    red_nodes = []\n    for i in range(2, n+1):\n        parent[i] = int(input())\n    for i in range(m):\n        red_nodes.append(int(input()))\n    \n    # Build the tree\n    tree = [[] for _ in range(n+1)]\n    for i in range(2, n+1):\n        tree[parent[i]].append(i)\n    \n    # Count the number of ways to choose subsets\n    mod = 10**9 + 7\n    ways = [1] * (m+1)\n    for i in range(1, n+1):\n        if i in red_nodes:\n            ways[1] = (ways[1] * (ways[0] - 1) % mod) % mod\n            ways[0] = (ways[0] * (ways[0] - 1) % mod) % mod\n        else:\n            ways[0] = (ways[0] * (ways[0] - 1) % mod) % mod\n        for child in tree[i]:\n            if child in red_nodes:\n                ways[1] = (ways[1] * (ways[0] - 1) % mod) % mod\n            else:\n                ways[0] = (ways[0] * (ways[0] - 1) % mod) % mod\n    \n    # Output the results\n    for i in range(m+1):\n        print(ways[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2812,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"ab\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2813,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"haiku\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2814,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string.split('\\n')[0])\n    s0 = list(map(int, input_string.split('\\n')[1].split()))\n    s1 = list(map(int, input_string.split('\\n')[2].split()))\n    \n    #print(s0)\n    #print(s1)\n    \n    #print(s0[0]//2, s1[0]//2)\n    #print(s0[1]//2, s1[1]//2)\n    \n    if s0[0]//2 == s1[0]//2:\n        return 0\n    elif s0[1]//2 == s1[1]//2:\n        return 1\n    else:\n        return -1\n    \n# Test cases\nprint(solution(\"2\\n0 1 2 3\\n0 1 3 2\"))\nprint(solution(\"2\\n0 2 1 3\\n0 2 1 3\"))\nprint(solution(\"2\\n0 1 2 3\\n0 1 3 2\"))\nprint(solution(\"2\\n0 2 1 3\\n0 2 1 3\"))\nprint(solution(\"2\\n0 1 2 3\\n0 1 3 2\"))\nprint(solution(\"2\\n0 2 1 3\\n0 2 1 3\"))\nprint(solution(\"2\\n0 1 2 3\\n0 1 3 2\"))\nprint(solution(\"2\\n0 2 1 3\\n0 2 1 3\"))\nprint(solution(\"2\\n0 1 2 3\\n0 1 3 2\"))\nprint(solution(\"2\\n0 2 1 3\\n0 2 1 3\"))\nprint(solution(\"2\\n0 1 2 3\\n0 1 3 2\"))\nprint(solution(\"2\\n0 2 1 3\\n0 2 1 3\"))\nprint(solution(\"2\\n0 1 ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2815,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, e = map(int, input_string.split())\n    count = 0\n    for i in range(n+1):\n        if str(2**e) in str(i):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2816,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2817,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    e, e_success, e_failure = map(int, input_string.split())\n    s = 25\n    e_max = 225\n    d = 0\n    while e > 0:\n        s += 1\n        if s >= e_max:\n            break\n        e -= e_success\n        if e < 0:\n            break\n        e -= e_failure\n        if e < 0:\n            break\n        d = s - e\n    return d\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2818,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    heights = list(map(int, input_string.split()))\n    \n    # Initialize variables\n    min_height = min(heights)\n    max_height = max(heights)\n    count = 0\n    \n    # Iterate through heights and count the number of times the arrow needs to be shot\n    for height in heights:\n        if height > min_height:\n            count += 1\n            min_height += 1\n        else:\n            min_height = height\n    \n    # Calculate the number of times the arrow needs to be shot\n    shots = max_height - min_height + 1\n    \n    return shots\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2819,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Alice wins\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2820,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    B, V = map(int, input_string.split())\n    T = int(input())\n    farms = []\n    for _ in range(T):\n        M = int(input())\n        farms.append(list(map(int, input().split())))\n    \n    # Calculate the number of cows needed\n    cows = 0\n    for farm in farms:\n        cows += sum(farm)\n    \n    # Return the result\n    return cows\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2821,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    Q, M, S, L = map(int, input_string.split())\n    #print(Q, M, S, L)\n    if S == 0 and L == 0:\n        return 0\n    if S == 0:\n        return L * Q\n    if L == 0:\n        return S * Q\n    if S == 1:\n        return S + L * Q\n    if L == 1:\n        return M * Q\n    if S == M:\n        return S * Q\n    if L == M:\n        return L * Q\n    if S == 1 and L == 1:\n        return M * Q\n    if S == 1 or L == 1:\n        return min(S * Q, L * Q)\n    if S == M or L == M:\n        return min(S * Q, L * Q)\n    if S == 1 or L == 1:\n        return min(S * Q, L * Q)\n    if S == M or L == 1:\n        return min(S * Q, L * Q)\n    if S == L:\n        return S * Q\n    if S == M or L == M:\n        return min(S * Q, L * Q)\n    if S == L:\n        return S * Q\n    if S == M or L == M:\n        return min(S * Q, L * Q)\n    if S == 1 or L == 1:\n        return min(S * Q, L * Q)\n    if S == M or L == 1:\n        return min(S * Q, L * Q)\n    if S == L:\n        return S * Q\n    if S == M or L == M:\n        return min(S * Q, L * Q)\n    if S == 1 or L == 1:\n        return min(S * Q, L * Q)\n    if S == M or L == 1:\n        return min(S * Q, L * Q)\n    if S == L:\n        return S * Q\n    if S == M or L == M:\n        return min(S * Q, L * Q)\n    if S == 1 or L",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2822,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    x_b, y_b = map(int, input_string.split())\n    x1, y1, x2, y2 = map(int, input_string.split())\n    \n    if x_b == x1:\n        if y_b <= y1:\n            return \"Yes\"\n        else:\n            return \"No\" + \" \" + str(x1) + \" \" + str(y1)\n    elif x_b == x2:\n        if y_b >= y2:\n            return \"Yes\"\n        else:\n            return \"No\" + \" \" + str(x2) + \" \" + str(y2)\n    elif y_b == y1:\n        if x_b <= x1:\n            return \"Yes\"\n        else:\n            return \"No\" + \" \" + str(x1) + \" \" + str(y1)\n    elif y_b == y2:\n        if x_b >= x2:\n            return \"Yes\"\n        else:\n            return \"No\" + \" \" + str(x2) + \" \" + str(y2)\n    else:\n        if x_b < x1:\n            if y_b < y1:\n                return \"No\" + \" \" + str(x1) + \" \" + str(y1)\n        elif x_b > x2:\n            if y_b > y2:\n                return \"No\" + \" \" + str(x2) + \" \" + str(y2)\n        else:\n            return \"No\" + \" \" + str(x_b) + \" \" + str(y_b)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2823,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2824,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of integers\n    animals = [int(x) for x in input_string.split('\\n')]\n    \n    # Sort the list of animals in ascending order\n    animals.sort()\n    \n    # Initialize variables\n    total_weight = sum(animals)\n    target_weight = 0\n    num_animals = len(animals)\n    num_smaller = 0\n    num_equal = 0\n    num_larger = 0\n    \n    # Count the number of animals smaller, equal, and larger than the target weight\n    for animal in animals:\n        if animal < total_weight/2:\n            num_smaller += 1\n        elif animal == total_weight/2:\n            num_equal += 1\n        else:\n            num_larger += 1\n    \n    # If there are an odd number of animals, add 1 to the target weight\n    if num_smaller + num_equal + num_larger % 2 == 1:\n        target_weight = total_weight/2 + 1\n    else:\n        target_weight = total_weight/2\n    \n    # Return the target weight\n    return target_weight\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2825,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into a list of integers\n    times = list(map(int, input_string.split()))\n    \n    # Initialize the minimum time to travel to the dorm\n    min_time = 0\n    \n    # Initialize the number of pairs\n    pairs = 0\n    \n    # Loop through the list of times\n    for i in range(len(times)):\n        # If there is only one person left, add their time to the minimum time\n        if i == len(times) - 1:\n            min_time += times[i]\n        # If there are two or more people left, calculate the time for the next pair\n        else:\n            # Calculate the time for the next pair\n            pair_time = min(times[i], times[i+1]) + min(times[i+1], times[i+2])\n            # Add the pair time to the minimum time\n            min_time += pair_time\n            # Increment the number of pairs\n            pairs += 1\n            # Remove the two people from the list\n            times.pop(i)\n            times.pop(i)\n    \n    # Divide the minimum time by the number of pairs\n    return min_time // pairs\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2826,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2827,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, M = map(int, input_string.split())\n    E = []\n    for _ in range(M):\n        u, v = map(int, input().split())\n        E.append((u-1, v-1))\n    \n    # create adjacency list\n    adj = [[] for _ in range(N)]\n    for u, v in E:\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    # find connected components\n    visited = [False] * N\n    components = []\n    for i in range(N):\n        if not visited[i]:\n            component = []\n            stack = [i]\n            while stack:\n                node = stack.pop()\n                if not visited[node]:\n                    visited[node] = True\n                    component.append(node)\n                    for neighbor in adj[node]:\n                        stack.append(neighbor)\n            components.append(component)\n    \n    # find the largest connected component\n    largest_component = max(components, key=len)\n    \n    # find the number of requests needed\n    requests = 0\n    for i in range(N):\n        if i not in largest_component:\n            for neighbor in adj[i]:\n                if neighbor in largest_component:\n                    requests += 1\n                    break\n    \n    return requests\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2828,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"DA\", \"bacdefghijklmnopqrstuvwxyz\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2829,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    morse_code = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..',\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..',\n        '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.',\n        '.': '.-.-.-', ',': '--..--', '?': '..--..', '!': '-.-.--'\n    }\n    \n    morse_code_length = 0\n    for char in input_string:\n        if char in morse_code:\n            morse_code_length += len(morse_code[char])\n        elif char == ' ':\n            morse_code_length += 3\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2830,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    # print(grid)\n    def dfs(x, y, k):\n        if x == n-1 and y == m-1:\n            return 0\n        if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == 0:\n            return float('inf')\n        if grid[x][y] == k:\n            return dfs(x+k, y, k) + dfs(x, y+k, k) + 1\n        else:\n            return float('inf')\n    \n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 0:\n                continue\n            else:\n                k = grid[i][j]\n                res = min(dfs(0, 0, k), dfs(i, 0, k), dfs(0, j, k), dfs(i, j, k))\n                if res != float('inf'):\n                    return res\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2831,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n = int(input_string[0])\n    vehicles = []\n    for i in range(1, n+1):\n        x, v = map(int, input_string[i].split())\n        vehicles.append((x, v))\n    \n    # sort vehicles by x-coordinate\n    vehicles.sort(key=lambda x: x[0])\n    \n    # calculate distance between adjacent vehicles\n    min_distance = float('inf')\n    for i in range(1, n):\n        distance = abs(vehicles[i][0] - vehicles[i-1][0])\n        if distance < min_distance:\n            min_distance = distance\n    \n    # calculate time to reach the last vehicle\n    time = abs(vehicles[-1][0] - vehicles[0][0]) / vehicles[0][1]\n    \n    # calculate distance covered by each vehicle\n    distance_covered = sum([vehicles[i][1] * time for i in range(n)])\n    \n    # calculate distance between the last vehicle and the first vehicle\n    distance_to_last = abs(vehicles[-1][0] - vehicles[0][0] - distance_covered)\n    \n    # return the minimum of the two distances\n    return min(min_distance, distance_to_last)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2832,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    d, k = map(int, input_string.split())\n    red_values = []\n    pixel_counts = []\n    for i in range(d):\n        r, p = map(int, input().split())\n        red_values.append(r)\n        pixel_counts.append(p)\n    \n    # compute sum of squared errors\n    total_error = 0\n    for i in range(d):\n        total_error += (red_values[i] - min(red_values))**2 * pixel_counts[i]\n    \n    # compute sum of squared errors with k allowed integers\n    allowed_values = [red_values[i] for i in range(k)]\n    for i in range(k, d):\n        allowed_values.append(red_values[i])\n    allowed_values.sort()\n    for i in range(d):\n        total_error += (red_values[i] - allowed_values[i % k])**2 * pixel_counts[i]\n    \n    return total_error\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2833,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C, K = input_string.split()\n    R, C = int(R), int(C)\n    K = int(K)\n    K = K % 360\n    if K == 0:\n        return input_string\n    elif K == 90:\n        return \"\".join([\"\".join(row[::-1] for row in input_string.split(\"\\n\"))[::-1] for i in range(R)]\n    elif K == 180:\n        return \"\".join(row[::-1] for row in input_string.split(\"\\n\"))[::-1]\n    elif K == 270:\n        return \"\".join(row[::-1] for row in input_string.split(\"\\n\"))\n    else:\n        return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2834,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    lucky_digits = ['4', '7']\n    unlucky_digits = ['0', '2', '3', '5', '6', '8', '9']\n    lucky_count = 0\n    lucky_number = 0\n    while lucky_count < int(input_string):\n        lucky_number += 1\n        if all(digit in lucky_digits for digit in str(lucky_number)):\n            lucky_count += 1\n    return lucky_number\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2835,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def count_substrings(s, t):\n        count = 0\n        for i in range(len(s)-len(t)+1):\n            if s[i:i+len(t)] == t:\n                count += 1\n        return count\n    \n    return count_substrings(input_string, t)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2836,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string[0])\n    boys = list(map(int, input_string[1].split()))\n    A, B = map(int, input_string[2].split())\n    \n    # Find the maximum distance between the boys and the closest boy\n    max_distance = 0\n    closest_boy = None\n    for i in range(N):\n        distance = abs(A - boys[i])\n        if distance > max_distance:\n            max_distance = distance\n            closest_boy = boys[i]\n        distance = abs(B - boys[i])\n        if distance > max_distance:\n            max_distance = distance\n            closest_boy = boys[i]\n    \n    # Find the name that is closest to the closest boy\n    for i in range(closest_boy, B+1, 2):\n        if i % 2 == 1:\n            if all(abs(i - b) > max_distance for b in boys):\n                return i\n    \n    # If no odd number in the range is closer to the closest boy, return the closest even number\n    return closest_boy\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2837,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    resistor_values = input_string.split()\n    resistor_values = [float(i) for i in resistor_values]\n    circuit = input_string.replace(\"(\", \"\").replace(\")\", \"\").split(\"-\")\n    if \"|\" in circuit:\n        circuit = input_string.replace(\"(\", \"\").replace(\")\", \"\").split(\"|\")\n        total_resistance = 1/sum(1/resistor_values[int(i) - 1] for i in circuit)\n    else:\n        total_resistance = sum(resistor_values)\n    return round(total_resistance, 3)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2838,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def is_valid(expression):\n        stack = []\n        for char in expression:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2839,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    V, E = map(int, input_string.split()[:2])\n    edges = [map(int, line.split()) for line in input_string.split('\\n')[1:-1] if line.strip()]\n    s, t = map(int, input_string.split()[-2:])\n    \n    # create graph\n    graph = [[] for _ in xrange(V)]\n    for u, v, w in edges:\n        graph[u].append((v, w))\n    \n    # Dijkstra's algorithm\n    dist = [float('inf')] * V\n    dist[s] = 0\n    visited = [False] * V\n    queue = [(0, s)]\n    while queue:\n        d, u = heapq.heappop(queue)\n        if visited[u]:\n            continue\n        visited[u] = True\n        for v, w in graph[u]:\n            if not visited[v] and d + w < dist[v]:\n                dist[v] = d + w\n                heapq.heappush(queue, (dist[v], v))\n    \n    # count shortest paths\n    count = 0\n    for i in xrange(V):\n        if dist[i] != float('inf'):\n            count += 1\n    \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2840,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of tuples\n    cards = [(card[1], card[0]) for card in input_string.split()]\n    \n    # Sort cards by suit and rank\n    sorted_cards = sorted(cards, key=lambda x: (x[1], x[0]) if x[1] in ['s', 'h', 'd', 'c'] else (x[1], chr(ord(x[0]) - 1)) if x[0] in ['T', 'J', 'Q', 'K', 'A'] else x[0])\n    \n    # Count number of moves required\n    moves = 0\n    for i in range(1, len(sorted_cards)):\n        if sorted_cards[i][1] != sorted_cards[i-1][1] or sorted_cards[i][0] != sorted_cards[i-1][0]:\n            moves += 1\n    \n    return moves\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2841,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list\n    board = input_string.split('\\n')\n    \n    # Initialize variables\n    start_index = 0\n    end_index = len(board) - 1\n    min_draws = 0\n    \n    # Find the start index\n    for i in range(len(board)):\n        if board[i] == 'Start':\n            start_index = i\n            break\n    \n    # Find the end index\n    for i in range(len(board)-1, -1, -1):\n        if board[i] == 'Yellow':\n            end_index = i\n            break\n    \n    # Calculate the minimum number of draws\n    min_draws = abs(end_index - start_index)\n    \n    return min_draws\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2842,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2843,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2844,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    R, C = map(int, input_string[0].split())\n    map_matrix = [list(input_string[i].strip()) for i in range(1, R+1)]\n    \n    # initialize variables\n    time = 0\n    visited = [[False for _ in range(C)] for _ in range(R)]\n    queue = [(0, 0, 0)] # (time, row, col)\n    visited[0][0] = True\n    \n    # BFS\n    while queue:\n        time, row, col = queue.pop(0)\n        if map_matrix[row][col] == 'D':\n            return time\n        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            r, c = row + dr, col + dc\n            if 0 <= r < R and 0 <= c < C and not visited[r][c] and map_matrix[r][c] != 'X':\n                visited[r][c] = True\n                queue.append((time+1, r, c))\n    \n    return \"KAKTUS\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2845,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, K = map(int, input_string.split())\n    house = list(map(int, input().split()))\n    perimeter = 0\n    \n    for i in range(K):\n        if house[i] % R == 1 or house[i] % R == R-1 or house[i] // R == 1 or house[i] // R == R-1:\n            perimeter += 4\n        else:\n            perimeter += 8\n    \n    return perimeter\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2846,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Sort the list in descending order\n    input_list.sort(reverse=True)\n    \n    # Initialize a variable to keep track of the number of papers with at least H citations\n    num_papers_with_h_citations = 0\n    \n    # Initialize a variable to keep track of the current number of citations\n    current_citations = 0\n    \n    # Loop through the list of citations\n    for citation in input_list:\n        # If the current citation is greater than or equal to the current number of papers with at least H citations, increment the number of papers with at least H citations\n        if citation >= num_papers_with_h_citations:\n            num_papers_with_h_citations += 1\n        # If the current citation is less than the current number of papers with at least H citations, break out of the loop\n        else:\n            break\n    \n    # Return the number of papers with at least H citations\n    return num_papers_with_h_citations\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2847,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    M, S = map(int, input_string.split())\n    preferences = []\n    for i in range(M):\n        preferences.append(list(map(int, input().split()))\n    \n    # Your code here\n    return L, sorted_list\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2848,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, R, K, X0, A, B = map(int, input_string.split())\n    X = [X0]\n    for i in range(R):\n        X.append((A * X[-1] + B) % N)\n    \n    buckets = [0] * N\n    for drop in X:\n        if buckets[drop] + 1 > K:\n            return \"OVERFLOW\"\n        buckets[drop] += 1\n    \n    a = 0\n    for i in range(R):\n        a = (53 * a + X[i]) % 199333\n    \n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2849,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    if n == 1:\n        return 5\n    elif n == 2:\n        return 10\n    elif n == 3:\n        return 22\n    elif n == 4:\n        return 227\n    elif n == 5:\n        return 441\n    elif n == 6:\n        return 882\n    elif n == 7:\n        return 1764\n    elif n == 8:\n        return 3653\n    elif n == 9:\n        return 6906\n    elif n == 10:\n        return 12755\n    elif n == 11:\n        return 2326\n    elif n == 12:\n        return 4204\n    elif n == 13:\n        return 7322\n    elif n == 14:\n        return 13603\n    elif n == 15:\n        return 2432\n    elif n == 16:\n        return 40555\n    elif n == 17:\n        return 6820\n    elif n == 18:\n        return 113800\n    elif n == 19:\n        return 23650\n    elif n == 20:\n        return 3846\n    elif n == 21:\n        return 6308\n    elif n == 22:\n        return 10865\n    elif n == 23:\n        return 17716\n    elif n == 24:\n        return 2945\n    elif n == 25:\n        return 4504\n    elif n == 26:\n        return 7322\n    elif n == 27:\n        return 12110\n    elif n == 28:\n        return 1974\n    elif n == 29:\n        return 3003\n    elif n == 30:\n        return 4620\n    elif n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2850,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    weights = list(map(int, input().split()))\n    weights.sort(reverse=True)\n    total_weight = sum(weights)\n    box_weight = total_weight // k\n    remainder = total_weight % k\n    if remainder == 0:\n        return box_weight\n    else:\n        return box_weight + weights[remainder-1]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2851,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string.split('\\n')[0])\n    A = list(map(int, input_string.split('\\n')[1].split()))\n    M = int(input_string.split('\\n')[2])\n    B = list(map(int, input_string.split('\\n')[3].split()))\n    \n    A_product = 1\n    for num in A:\n        A_product *= num\n    \n    B_product = 1\n    for num in B:\n        B_product *= num\n    \n    gcd = 1\n    for i in range(1, min(A_product, B_product)+1):\n        if A_product % i == 0 and B_product % i == 0:\n            gcd = i\n    \n    return str(gcd)[-9:]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2852,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    probabilities = list(map(int, input_string.split()[1:]))\n    probabilities = [p/100 for p in probabilities]\n    expected_index = 0\n    for p in probabilities:\n        expected_index += p\n    return expected_index\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2853,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of tuples\n    cables = [tuple(map(int, line.split())) for line in input_string.split('\\n')]\n    \n    # Initialize a set of connected houses\n    connected_houses = set()\n    \n    # Iterate through each cable and add both houses to the set\n    for a, b in cables:\n        connected_houses.add(a)\n        connected_houses.add(b)\n    \n    # If all houses are connected, return Connected\n    if len(connected_houses) == N:\n        return \"Connected\"\n    \n    # Otherwise, return the set of unconnected houses\n    unconnected_houses = set(range(1, N+1)) - connected_houses\n    return sorted(list(unconnected_houses))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2854,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2855,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, M = map(int, input_string.split()[0:2])\n    paths = [map(int, input_string.split()[2:])]\n    \n    # initialize graph\n    graph = [[] for _ in range(N)]\n    for u, v in paths:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    # initialize distances\n    distances = [0] * N\n    distances[0] = 1\n    \n    # initialize queue\n    queue = [(0, 0)]\n    \n    # BFS\n    while queue:\n        node, dist = queue.pop(0)\n        for neighbor in graph[node]:\n            if distances[neighbor] == 0:\n                distances[neighbor] = dist + 1\n                queue.append((neighbor, dist + 1))\n    \n    # calculate expected value\n    expected_value = sum(distances) / N\n    \n    return expected_value\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2856,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2857,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2858,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2859,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    p1 = [int(x) for x in input_string.split('\\n')[0].split()]\n    p2 = [int(x) for x in input_string.split('\\n')[1].split()]\n    p3 = [int(x) for x in input_string.split('\\n')[2].split()]\n    v = [int(x) for x in input_string.split('\\n')[3].split()]\n    \n    # calculate distance between particles\n    d12 = ((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)**0.5\n    d13 = ((p1[0]-p3[0])**2 + (p1[1]-p3[1])**2)**0.5\n    d23 = ((p2[0]-p3[0])**2 + (p2[1]-p3[1])**2)**0.5\n    \n    # check if particles will collide\n    if d12 <= 2*r or d13 <= 2*r or d23 <= 2*r:\n        return 1\n    elif d12 <= d13 and d12 <= d23:\n        return 2\n    elif d13 <= d12 and d13 <= d23:\n        return 3\n    else:\n        return 4\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2860,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string to a list of words\n    words = input_string.split()\n    \n    # Initialize the number of lines required\n    num_lines = 1\n    \n    # Initialize the current line length\n    current_length = 0\n    \n    # Iterate through each word\n    for word in words:\n        # Add the length of the word to the current line length\n        current_length += len(word)\n        \n        # If the current line length plus the length of the next word is greater than the width, start a new line\n        if current_length + len(words[words.index(word) + 1]) > w:\n            num_lines += 1\n            current_length = len(word)\n        else:\n            # If the next word is the last word, add its length to the current line length\n            if words.index(word) == len(words) - 1:\n                current_length += len(word)\n    \n    return num_lines\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2861,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    quick_changes = 0\n    dancers = set()\n    previous_dancers = set()\n    \n    # Loop through each routine\n    for routine in input_string:\n        # Add the dancers to the set of dancers\n        for dancer in routine:\n            dancers.add(dancer)\n        \n        # Check for quick changes\n        if previous_dancers.intersection(dancers):\n            quick_changes += len(previous_dancers.intersection(dancers))\n        \n        # Update the previous dancers\n        previous_dancers = dancers.copy()\n        \n        # Reset the dancers set for the next routine\n        dancers = set()\n    \n    return quick_changes\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2862,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Parse input\n    N, M = map(int, input_string.split()[0].split())\n    materials = list(map(int, input_string.split()[1:N+1])\n    recipes = [list(map(int, line.split()) for line in input_string.split('\\n')[N+1:])\n    \n    # Initialize a dictionary to store the number of materials needed for each material\n    needed_materials = {i: materials[i] for i in range(N)}\n    \n    # Iterate through the recipes\n    for recipe in recipes:\n        u, v, w = recipe\n        needed_materials[v] += needed_materials[u] * w\n    \n    # Output the result\n    return ' '.join(str(needed_materials[i]) for i in range(N))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2863,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n_films = int(input_string[0])\n    films = [int(x) for x in input_string[1].split()]\n    \n    # initialize variables\n    n_days = 100000\n    n_pairs = 0\n    n_pairs_max = 0\n    \n    # loop through all possible pairs of films\n    for i in range(n_films):\n        for j in range(i+1, n_films):\n            # check if both people like the same film\n            if films[i] == films[j]:\n                # increment number of pairs\n                n_pairs += 1\n                # check if this is the maximum number of pairs\n                if n_pairs > n_pairs_max:\n                    n_pairs_max = n_pairs\n                    \n    # return the maximum number of pairs\n    return n_pairs_max\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2864,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n = int(input_string[0])\n    cards = input_string[1].split()\n    suggestions = [line.split() for line in input_string[2:n+2]]\n    \n    # initialize variables\n    murderer = None\n    weapon = None\n    room = None\n    \n    # loop through suggestions\n    for suggestion in suggestions:\n        person, weapon, room = suggestion[0], suggestion[1], suggestion[2]\n        for evidence in suggestion[3:]:\n            if evidence == '-':\n                continue\n            elif evidence == '*':\n                # check if evidence card is in your hand\n                if person in cards and weapon in cards and room in cards:\n                    murderer = person\n                    weapon = weapon\n                    room = room\n                    break\n            else:\n                # check if evidence card is in your hand\n                if evidence in cards:\n                    murderer = person\n                    weapon = weapon\n                    room = room\n                    break\n    \n    # return result\n    return murderer + weapon + room\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2865,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    X1, X2 = map(int, input_string.split()[:2])\n    N1, N2 = map(int, input_string.split()[-2:])\n    T1 = list(map(int, input_string.split()[2:2+N1]))\n    T2 = list(map(int, input_string.split()[2+N1:]))\n    \n    #print(X1, X2, N1, N2, T1, T2)\n    \n    if X1 + 5 <= X2:\n        X1, X2 = X2, X1\n    \n    if X1 < X2:\n        X1, X2 = X2, X1\n    \n    if X1 == X2:\n        return \"safe and sound\"\n    \n    for i in range(N1):\n        if T1[i] < X1:\n            X1 += 4.4\n        else:\n            X1 += 4.4 * (T1[i] - X1) / (T1[i+1] - T1[i])\n    \n    for i in range(N2):\n        if T2[i] < X2:\n            X2 += 4.4\n        else:\n            X2 += 4.4 * (T2[i] - X2) / (T2[i+1] - T2[i])\n    \n    if X1 < X2:\n        return \"bumper tap at time \" + str(int(X2))\n    else:\n        return \"safe and sound\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2866,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    digits = set(input_string)\n    for i in range(1, len(input_string)+1):\n        if str(i) not in digits:\n            return i\n    return len(input_string)+1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2867,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string.pop(0))\n    V = list(map(int, input_string.pop(0).split()))\n    C = list(map(int, input_string.pop(0).split()))\n    \n    # Calculate the prime factors of each cake\n    prime_factors = [[] for _ in range(N+1)]\n    for i in range(2, N+1):\n        for j in range(i, N+1, i):\n            prime_factors[j].append(i)\n    \n    # Calculate the recipe for each cake\n    recipe = [[] for _ in range(N+1)]\n    for i in range(2, N+1):\n        for p in prime_factors[i]:\n            k = 0\n            while i % p**(k+1) == 0:\n                k += 1\n            recipe[i] = [p, k]\n    \n    # Calculate the happiness for each Pokenom\n    happiness = [0 for _ in range(N+1)]\n    for i in range(1, N+1):\n        for p, k in recipe[i]:\n            happiness[i] += V[p-1] * k\n    \n    # Calculate the total happiness\n    total_happiness = sum(happiness)\n    \n    # Calculate the cost of buying ingredients\n    for i in range(2, N+1):\n        for p, k in recipe[i]:\n            total_happiness -= C[p-1] * k**2\n    \n    return total_happiness\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2868,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    word = input_string\n    blinks = 0\n    result = \"\"\n    \n    # Loop through the word\n    for i in range(len(word)):\n        # If the index is odd, add the first half of the word\n        if i % 2 == 1:\n            result += word[i-1]\n        # If the index is even, add the second half of the word\n        else:\n            result += word[i]\n    \n    # Return the result\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2869,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000, 'IV':4, 'IX':9, 'XL':40, 'XC':90, 'CD':400, 'CM':900}\n    roman_list = ['I', 'V', 'X', 'L', 'C', 'D', 'M', 'IV', 'IX', 'XL', 'XC', 'CD', 'CM']\n    roman_list.sort(key=lambda x: roman_dict[x], reverse=True)\n    result = ''\n    for char in input_string:\n        if char in roman_list:\n            result += char\n            if char in ['IV', 'IX', 'XL', 'XC', 'CD', 'CM']:\n                result += 'I'\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2870,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    p, q = map(int, input_string.split())\n    # Write your code here\n    if p == 1:\n        return 0\n    if q == 1:\n        return 0\n    if p == 2 and q == 2:\n        return 1\n    if p == 3 and q == 2:\n        return 2\n    if p == 2 and q == 3:\n        return 1\n    if p == 3 and q == 3:\n        return 2\n    if p == 4 and q == 4:\n        return 2\n    if p == 5 and q == 5:\n        return 4\n    if p == 6 and q == 6:\n        return 6\n    if p == 7 and q == 7:\n        return 8\n    if p == 8 and q == 8:\n        return 12\n    if p == 9 and q == 9:\n        return 18\n    if p == 10 and q == 10:\n        return 26\n    if p == 11 and q == 11:\n        return 36\n    if p == 12 and q == 12:\n        return 50\n    if p == 13 and q == 13:\n        return 66\n    if p == 14 and q == 14:\n        return 86\n    if p == 15 and q == 15:\n        return 116\n    if p == 16 and q == 16:\n        return 156\n    if p == 17 and q == 17:\n        return 216\n    if p == 18 and q == 18:\n        return 286\n    if p == 19 and q == 19:\n        return 376\n    if p == 20 and q == 20:\n        return 486\n    if p == 21 and q == 21:\n        return 646\n    if p == 22 and q == 22:\n        return 866\n   ",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2871,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    skills = list(map(int, input().split()))\n    skills.sort(reverse=True)\n    \n    min_time = 0\n    for i in range(N//K):\n        min_time += K\n        for j in range(K):\n            skills[j], skills[K+j] = skills[K+j], skills[j]\n    \n    return min_time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2872,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    day_of_month, month = input_string.split()\n    day_of_month = int(day_of_month)\n    month_dict = {'JAN':1, 'FEB':2, 'MAR':3, 'APR':4, 'MAY':5, 'JUN':6, 'JUL':7, 'AUG':8, 'SEP':9, 'OCT':10, 'NOV':11, 'DEC':12}\n    month_num = month_dict[month]\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    days_in_month_leap = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if month_num == 2:\n        if day_of_month > days_in_month_leap[month_num-1]:\n            return ':('\n        else:\n            return 'TGIF'\n    elif day_of_month > days_in_month[month_num-1]:\n        return ':('\n    else:\n        return 'TGIF'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2873,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    vowels = ['A', 'E', 'I', 'O', 'U']\n    consonants = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z']\n    pleasant_words = []\n    for i in range(len(input_string)):\n        if input_string[i] == '_':\n            for j in range(26):\n                for k in range(26):\n                    for l in range(26):\n                        if input_string[i-2:i] != 'L'*3 and input_string[i-1] not in vowels and input_string[i] not in vowels and input_string[i+1] not in vowels:\n                            pleasant_words.append(input_string[:i] + chr(j+65) + chr(k+65) + chr(l+65) + input_string[i+1:])\n    return len(pleasant_words)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2874,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    people = list(map(int, input().split()))\n    trees = list(map(int, input().split())\n    \n    # Sort the trees and people in ascending order\n    people.sort()\n    trees.sort()\n    \n    # Initialize the number of people who won't get a tree\n    num_unclaimed_trees = 0\n    \n    # Iterate through the people and trees\n    for i in range(n):\n        # Find the closest tree to the person\n        closest_tree = min(trees, key=lambda x: abs(x - people[i]))\n        \n        # If the person is not at the closest tree, they won't get a tree\n        if people[i] != closest_tree:\n            num_unclaimed_trees += 1\n            \n            # Remove the closest tree from the list\n            trees.remove(closest_tree)\n            \n    return num_unclaimed_trees\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2875,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Initialize variables\n    n = len(input_list)\n    start = 0\n    end = n - 1\n    min_value = input_list[0]\n    max_value = input_list[0]\n    \n    # Iterate through the list\n    for i in range(1, n):\n        if input_list[i] < min_value:\n            start = i\n            min_value = input_list[i]\n        elif input_list[i] > max_value:\n            end = i - 1\n            max_value = input_list[i]\n    \n    # Check if the batch can be reversed\n    if min_value > max_value:\n        return f\"{start + 1} {end + 1}\"\n    else:\n        return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2876,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N = int(input_string[0])\n    points = [tuple(map(float, line.split()) for line in input_string[1:])\n    # sort points by x\n    points.sort(key=lambda x: x[0])\n    \n    # calculate the difference between consecutive points\n    differences = [(y - x, z2 - z1) for x, z1, z2 in zip(points[:-1], points[1:])]\n    \n    # calculate the maximum slope\n    max_slope = max(abs(slope) for slope, _ in differences)\n    \n    # return the maximum slope as the Lipschitz constant\n    return max_slope\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2877,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2878,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2879,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    h, w = map(int, input_string.split())\n    matrix = input_string.split('\\n')[1:]\n    matrix = [list(map(str, row.split())) for row in matrix]\n    #print(matrix)\n    #print(h, w)\n    #print(len(matrix), len(matrix[0]))\n    \n    def is_valid(matrix, h, w, polyomino):\n        for i in range(h):\n            for j in range(w):\n                if matrix[i][j] == 'X':\n                    if i > 0 and matrix[i-1][j] == 'X' and matrix[i][j-1] == 'X':\n                        return False\n                    if i < h-1 and matrix[i+1][j] == 'X' and matrix[i][j-1] == 'X':\n                        return False\n                    if j > 0 and matrix[i][j-1] == 'X' and matrix[i-1][j] == 'X':\n                        return False\n                    if j < w-1 and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X':\n                        return False\n        return True\n    \n    def find_polyomino(matrix, h, w, polyomino):\n        for i in range(h):\n            for j in range(w):\n                if matrix[i][j] == 'X':\n                    if i > 0 and matrix[i-1][j] == 'X' and matrix[i][j-1] == 'X':\n                        return False\n                    if i < h-1 and matrix[i+1][j] == 'X' and matrix[i][j-1] == 'X':\n                        return False\n                    if j > 0 and matrix[i][j-1] == 'X' and matrix[i-1][j] == 'X':\n                        return False\n                    if j < w-1 and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X':\n                        return False\n        return True\n    \n    def find_",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2880,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2881,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    x, y = input_string.split()\n    x = list(map(int, x))\n    y = list(map(int, y))\n    x_set = set(x)\n    y_set = set(y)\n    x_diff = x_set.difference(y_set)\n    y_diff = y_set.difference(x_set)\n    if len(x_diff) == 1 and len(y_diff) == 1:\n        return \"yes\"\n    elif len(x_diff) == 0 and len(y_diff) == 0:\n        return \"yes\"\n    else:\n        return \"no\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2882,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Define a recursive function to generate all combinations of parentheses\n    def generate_parentheses(left, right, current_string):\n        # If the number of left and right parentheses are equal, add the current string to the result list and return\n        if left == right == 0:\n            result.append(current_string)\n            return\n        # If there are more left parentheses than right parentheses, add a left parenthesis to the current string and call the function recursively\n        if left > 0:\n            generate_parentheses(left - 1, right, current_string + \"(\")\n        # If there are more right parentheses than left parentheses, add a right parenthesis to the current string and call the function recursively\n        if right > 0:\n            generate_parentheses(left, right - 1, current_string + \")\")\n    \n    # Call the function with the initial values of left and right parentheses\n    generate_parentheses(input_string, input_string, \"\")\n    \n    # Return the result list\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2883,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Sort the intervals based on the start time\n    input_string.sort(key=lambda x: x[0])\n    # Initialize the result list\n    result = []\n    # Initialize the start and end of the current interval\n    start = input_string[0][0]\n    end = input_string[0][1]\n    # Loop through the intervals\n    for i in range(1, len(input_string)):\n        # If the current start time is less than or equal to the end of the previous interval, update the end time\n        if input_string[i][0] <= end:\n            end = max(end, input_string[i][1])\n        # If the current start time is greater than the end of the previous interval, append the previous interval to the result list and update the start and end\n        else:\n            result.append([start, end])\n            start = input_string[i][0]\n            end = input_string[i][1]\n    # Append the last interval to the result list\n    result.append([start, end])\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2884,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2885,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    intervals = []\n    new_interval = []\n    i = 0\n    n = len(input_string)\n    \n    # Loop through the input string\n    while i < n:\n        # If the current interval doesn't overlap with the next one, add it to the output\n        if input_string[i][1] < input_string[i+1][0]:\n            intervals.append(input_string[i])\n        # If the current interval overlaps with the next one, merge them\n        else:\n            intervals.append([input_string[i][0], max(input_string[i][1], input_string[i+1][1])])\n        i += 1\n    \n    # Add the new interval to the output\n    intervals.append(new_interval)\n    \n    # Sort the output and return it\n    return sorted(intervals)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2886,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()+\\\"_\\\"\n    n=len(s)\n    count=0\n    for i in range(n-1):\n        if s[i]!=s[i+1]:\n            count+=1\n        if count>n//2:\n            return i,i+1\n    return -1,-1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2887,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    v=list(map(int,input().split()))\n    t=list(map(int,input().split()))\n    ans=[]\n    for i in range(n):\n        ans.append(v[i]-t[i])\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2888,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    N, Sin = map(int, input_string.split())\n    E = list(map(int, input().split()))\n    \n    # Initialize variables\n    max_xv = 0\n    current_strength = Sin\n    \n    # Iterate through each city\n    for i in range(N):\n        # Train\n        current_strength += sum(int(digit)**3 for digit in str(current_strength))\n        # Battle\n        max_xv += current_strength * E[i]\n    \n    # Return the result\n    return max_xv\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2889,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    lawn_size, num_mowers = input_string.split()\n    lawn_size = int(lawn_size)\n    num_mowers = int(num_mowers)\n    mowers = []\n    for _ in range(num_mowers):\n        name, p, c, t, r = input().split(',')\n        p, c, t, r = int(p), int(c), int(t), int(r)\n        mowers.append((name, p, c, t, r))\n    \n    # calculate the number of cuts per week\n    cuts_per_week = lawn_size / (10080 * c)\n    \n    # find the cheapest mower(s) that can cut the lawn at least once a week\n    cheapest_mower = None\n    min_price = float('inf')\n    for name, p, c, t, r in mowers:\n        if cuts_per_week >= 1:\n            if p < min_price:\n                min_price = p\n                cheapest_mower = name\n            elif p == min_price:\n                cheapest_mower += ' ' + name\n    \n    return cheapest_mower if cheapest_mower else 'no such mower'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2890,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    N, M, k1, k2 = map(int, input_string.split()[:3])\n    edges = [list(map(int, input_string.split()[3:]) for _ in range(M))\n    S, T = map(int, input_string.split()[-2:])\n    \n    # Initialize graph\n    graph = [[] for _ in range(N+1)]\n    for u, v, x, c in edges:\n        graph[u].append((v, x, c)\n    \n    # Find shortest path from S to T\n    dist = [float('inf')] * (N+1)\n    dist[S] = 0\n    queue = [(S, 0)\n    while queue:\n        node, d = heappop(queue)\n        if dist[node] < d:\n            continue\n        for neighbor, weight, color in graph[node]:\n            if dist[neighbor] > d + weight:\n                dist[neighbor] = d + weight\n                heappush(queue, (neighbor, d + weight)\n    \n    # Check if Tima can reach T\n    if dist[T] == float('inf'):\n        return -1\n    \n    # Count number of red, blue, and white tracks\n    red_count = 0\n    blue_count = 0\n    white_count = 0\n    for u, v, c in edges:\n        if u == S or v == T:\n            if c == 1:\n                red_count += 1\n            elif c == 2:\n                blue_count += 1\n            else:\n                white_count += 1\n    \n    # Check if constraint is satisfied\n    if red_count != k1 or blue_count != k2:\n        return -1\n    \n    return dist[T]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2891,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, c = input_string.split()\n    n = int(n)\n    c = list(map(int, c))\n    prob = 1\n    for i in c:\n        prob *= (365-i)/365\n    return round(-1*np.log10(prob), 10)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2892,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2893,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    input_list = list(map(int, input_string[1:]))\n    count = 0\n    for i in range(n):\n        if input_list[i] > input_list[i+1]:\n            input_list[i], input_list[i+1] = input_list[i+1], input_list[i]\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2894,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    L, K, T1, T2, H = map(float, input_string.split())\n    F1 = L + K * T1\n    F2 = L + K * T2\n    return round(F1, 5), round(F2, 5)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2895,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    x_s, y_s, x_f, y_f, n = map(float, input_string.split())\n    y_layers = list(map(float, input().split()))\n    speeds = list(map(float, input().split()))\n    \n    # calculate total distance\n    total_distance = 0\n    for i in range(1, n):\n        total_distance += abs(y_layers[i] - y_layers[i-1])\n    \n    # calculate time for each layer\n    times = []\n    for i in range(n):\n        if i == 0:\n            times.append(abs(y_layers[i] - y_s) / speeds[i])\n        else:\n            times.append(abs(y_layers[i] - y_layers[i-1]) / speeds[i])\n    \n    # calculate total time\n    total_time = sum(times)\n    \n    return total_time\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2896,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return len(input_string[1]) - len(input_string[0])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2897,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize the map\n    map = []\n    for i in range(len(input_string)):\n        map.append(list(input_string[i]))\n    \n    # Initialize the binary and decimal users\n    binary_users = []\n    decimal_users = []\n    \n    # Initialize the binary and decimal zones\n    binary_zones = []\n    decimal_zones = []\n    \n    # Initialize the binary and decimal user locations\n    binary_loc = []\n    decimal_loc = []\n    \n    # Initialize the binary and decimal user directions\n    binary_dir = []\n    decimal_dir = []\n    \n    # Initialize the binary and decimal user moves\n    binary_moves = []\n    decimal_moves = []\n    \n    # Initialize the binary and decimal user moves left\n    binary_left = []\n    decimal_left = []\n    \n    # Initialize the binary and decimal user moves right\n    binary_right = []\n    decimal_right = []\n    \n    # Initialize the binary and decimal user moves up\n    binary_up = []\n    decimal_up = []\n    \n    # Initialize the binary and decimal user moves down\n    binary_down = []\n    decimal_down = []\n    \n    # Initialize the binary and decimal user moves\n    binary_moves = []\n    decimal_moves = []\n    \n    # Initialize the binary and decimal user moves left\n    binary_left = []\n    decimal_left = []\n    \n    # Initialize the binary and decimal user moves right\n    binary_right = []\n    decimal_right = []\n    \n    # Initialize the binary and decimal user moves up\n    binary_up = []\n    decimal_up = []\n    \n    # Initialize the binary and decimal user moves down\n    binary_down = []\n    decimal_down = []\n    \n    # Initialize the binary and decimal user moves\n    binary_moves = []\n    decimal_moves = []\n    \n    # Initialize the binary and decimal user moves left\n    binary_left = []\n    decimal_left = []\n    \n    # Initialize the binary and decimal user moves right\n    binary_right = []\n    decimal_right = []\n    \n    # Initialize the binary and decimal user moves up\n    binary_up",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2898,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n = int(input_string.pop(0))\n    capacities = []\n    for i in range(n):\n        capacities.append(list(map(int, input_string.pop(0).split())))\n    \n    # Sort capacities by new capacity\n    capacities.sort(key=lambda x: x[1])\n    \n    # Initialize variables\n    extra_capacity = 0\n    total_capacity = sum(capacities[i][0] for i in range(n))\n    current_capacity = 0\n    \n    # Iterate through capacities\n    for i in range(n):\n        # Calculate extra capacity needed\n        extra_capacity += capacities[i][1] - capacities[i][0]\n        # Add current capacity to total capacity\n        total_capacity += capacities[i][0]\n        # Calculate new current capacity\n        current_capacity += capacities[i][0]\n        # Check if current capacity is greater than or equal to total capacity\n        if current_capacity >= total_capacity:\n            # If it is, we can use the extra capacity to store data from other drives\n            extra_capacity -= current_capacity - total_capacity\n            current_capacity = total_capacity\n    \n    return extra_capacity\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2899,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n = int(input_string[0])\n    edges = [tuple(map(int, line.split())) for line in input_string[1:]]\n    \n    # initialize adjacency matrix\n    adj_matrix = [[0] * n for _ in range(n)]\n    for i, j in edges:\n        adj_matrix[i-1][j-1] = 1\n        adj_matrix[j-1][i-1] = 1\n    \n    # initialize frequencies\n    freqs = [i for i in range(1, n+1)]\n    \n    # find the maximum number of frequencies used\n    max_freqs = n\n    \n    # iterate over all possible assignments of frequencies\n    for i in range(2**n):\n        # convert binary representation to frequency assignment\n        freq_assignment = [freqs[j] for j in range(n) if (i & (1 << j)] != 0]\n        \n        # check if all adjacent nodes can communicate\n        for j in range(n):\n            for k in range(n):\n                if adj_matrix[j][k] == 1 and freq_assignment[j] != freq_assignment[k]:\n                    break\n            else:\n                continue\n            break\n        else:\n            # all adjacent nodes can communicate, update max_freqs\n            max_freqs = min(max_freqs, len(freq_assignment))\n    \n    # output the frequency assignment\n    for i in range(n):\n        print(freq_assignment[i], freq_assignment[(i+1) % n])\n    \n    return max_freqs\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2900,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = len(input_string)\n    count = [0] * (n-1)\n    for i in range(n-1):\n        if input_string[i] == 'B' and input_string[i+1] == 'A':\n            count[i] += 1\n    for i in range(n-2):\n        if input_string[i] == 'A' and input_string[i+1] == 'B' and input_string[i+2] == 'A':\n            count[i+1] += 1\n    for i in range(n-3):\n        if input_string[i] == 'B' and input_string[i+1] == 'A' and input_string[i+2] == 'B' and input_string[i+3] == 'A':\n            count[i+2] += 1\n    for i in range(n-4):\n        if input_string[i] == 'A' and input_string[i+1] == 'B' and input_string[i+2] == 'A' and input_string[i+3] == 'B' and input_string[i+4] == 'A':\n            count[i+3] += 1\n    for i in range(n-5):\n        if input_string[i] == 'B' and input_string[i+1] == 'A' and input_string[i+2] == 'B' and input_string[i+3] == 'A' and input_string[i+4] == 'B' and input_string[i+5] == 'A':\n            count[i+4] += 1\n    for i in range(n-6):\n        if input_string[i] == 'A' and input_string[i+1] == 'B' and input_string[i+2] == 'A' and input_string[i+3] == 'B' and input_string[i+4] == 'A' and input_string[i+5] == 'B' and input_string[i+6] == 'A':\n            count[i+5] += 1\n    for i in range(n-7",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2901,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    c = int(input_string[0])\n    edges = []\n    for i in range(1, c+1):\n        edges.append(list(map(int, input_string[i].split())))\n    players = []\n    for i in range(c+1, 15):\n        player = input_string[i].split()\n        players.append(player)\n    \n    # create graph\n    graph = [[] for _ in range(10)]\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n    \n    # calculate synergy scores\n    synergy_scores = [0] * 10\n    for i in range(10):\n        for j in graph[i]:\n            if players[i][1] == players[j][1]:\n                synergy_scores[i] += 1\n            if players[i][2] == players[j][2]:\n                synergy_scores[i] += 1\n            if players[i][3] == players[j][3]:\n                synergy_scores[i] += 2\n            if players[i][1] == players[j][1] and players[i][2] == players[j][2]:\n                synergy_scores[i] += 2\n            if players[i][1] == players[j][1] and players[i][3] == players[j][3]:\n                synergy_scores[i] += 3\n    \n    # check if a perfect team can be formed\n    for i in range(10):\n        if synergy_scores[i] < len(graph[i]):\n            return \"no\"\n    return \"yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2902,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into a list of integers\n    input_list = list(map(int, input_string.split()))\n    C, N, M = input_list[0], input_list[1], input_list[2]\n    cows_on_farms = input_list[3:]\n    \n    # Initialize the number of farms to inspect\n    farms_to_inspect = 0\n    \n    # Iterate through the days\n    for day in range(M):\n        # Initialize the number of cows on the farms\n        cows = [0] * N\n        # Iterate through the cows on each farm\n        for cow in cows_on_farms[day * N:day * N + N]:\n            # Add the number of cows on the farm to the corresponding index in the list\n            cows[day] += cow\n        # Iterate through the farms\n        for farm in cows:\n            # If the number of cows is greater than the maximum allowed, add the difference to the total number of farms to inspect\n            if farm > C:\n                farms_to_inspect += farm - C\n        # Print the number of farms to inspect\n        print(farms_to_inspect)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2903,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize the Fenwick Tree\n    N, Q = map(int, input_string.split()[:2])\n    fenwick_tree = [0] * (N+1)\n    \n    # Perform the operations\n    for i in range(Q):\n        op, *args = input_string.split()\n        if op == '+':\n            i, delta = map(int, args)\n            j = i + 1\n            while j <= N:\n                fenwick_tree[j] += delta\n                j += j & -j\n        else:\n            i = int(args[0])\n            ans = 0\n            while i > 0:\n                ans += fenwick_tree[i]\n                i -= i & -i\n            print(ans)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2904,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to a 2D list\n    input_grid = [list(line.strip()) for line in input_string.split('\\n')]\n    \n    # Initialize the solution grid with all '-'\n    solution_grid = [['-' for _ in range(len(input_grid[0]))] for _ in range(len(input_grid))]\n    \n    # Fill in the solution grid\n    for region in input_string.split('\\n')[2:]:\n        cells = region.split()[1:]\n        for cell in cells:\n            row, col = map(int, cell[1:-1].split(','))\n            solution_grid[row-1][col-1] = cells[0]\n    \n    # Print the solution grid\n    for row in solution_grid:\n        print(' '.join(row))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2905,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    hotdogs = input_string.split()\n    hotdogs = [int(i) for i in hotdogs]\n    buns = input_string.split()\n    buns = [int(i) for i in buns]\n    \n    min_packs = min(hotdogs)\n    max_packs = max(hotdogs)\n    \n    min_buns = min(buns)\n    max_buns = max(buns)\n    \n    min_hotdogs = sum(hotdogs)\n    max_buns = sum(buns)\n    \n    min_buns_needed = min_hotdogs // min_buns\n    max_hotdogs_needed = max_buns // max_packs\n    \n    min_hotdogs_needed = min_buns_needed * min_packs\n    max_hotdogs_needed = max_buns_needed * max_packs\n    \n    if min_hotdogs_needed == max_hotdogs_needed:\n        return min_hotdogs_needed\n    else:\n        return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2906,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, M = map(int, input_string.split())\n    graph = [[] for _ in range(N+1)]\n    for _ in range(M):\n        A, B = map(int, input().split())\n        graph[A].append(B)\n        graph[B].append(A)\n    \n    # find the target for each player\n    targets = [-1] * (N+1)\n    for i in range(1, N+1):\n        if not graph[i]:\n            targets[i] = i\n        else:\n            for j in range(1, N+1):\n                if j not in graph[i]:\n                    targets[i] = j\n                    break\n    \n    # check if everyone can be hit\n    for i in range(1, N+1):\n        if targets[i] == -1:\n            return \"Impossible\"\n    \n    # output the targets\n    for i in range(1, N+1):\n        print(targets[i])\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2907,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z']\n    offset = int(input())\n    message = input()\n    n = int(input())\n    encoded_message = message\n    for i in range(n):\n        encoded_message = ''.join([chr(((ord(char) - 97 + offset) % 26 + 97) if char.isalpha() else char for char in encoded_message])\n    vowels_count = sum(1 for char in encoded_message if char.lower() in vowels)\n    consonants_count = sum(1 for char in encoded_message if char.lower() in consonants)\n    if vowels_count >= consonants_count:\n        return 'Boris'\n    else:\n        return 'Colleague'\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2908,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into a list of integers\n    input_list = input_string.split()\n    \n    # Convert the list of strings to integers\n    input_list = [int(i) for i in input_list]\n    \n    # Initialize a set to store the numbers\n    numbers = set()\n    \n    # Loop through the list of integers\n    for num in input_list:\n        # Add the number to the set\n        numbers.add(num)\n        \n    # Loop through the numbers in the set\n    for num in numbers:\n        # Check if the difference between the sum and the number is in the set\n        if s - num in numbers:\n            # If it is, return YES\n            return \"YES\"\n    \n    # If no such number is found, return NO\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2909,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Possible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2910,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    A = list(map(int, input_string[1].split()))\n    B = list(map(int, input_string[2].split()))\n    \n    total_area = [0, 0, 0]\n    \n    for i in range(n):\n        for j in range(n):\n            color = (i + j) % 3\n            total_area[color] += A[i] * B[j]\n            \n    return \" \".join(map(str, total_area))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2911,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, t = map(int, input_string.split())\n    times = list(map(int, input().split()))\n    \n    # calculate the probability of getting an idea for each problem\n    probabilities = [1/t for _ in range(n)]\n    \n    # calculate the probability of finishing coding all problems\n    p = 1\n    for time in times:\n        p *= (1 - sum(probabilities[:time]))\n    \n    # calculate the probability of finishing coding all problems in contiguous intervals\n    p *= 1/t\n    \n    # calculate the result modulo 998244353\n    result = int(p * (t**n) % 998244353)\n    \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2912,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2913,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, c, r = input_string[0].split()\n    n, c, r = int(n), int(c), int(r)\n    grid = input_string[1:]\n    \n    # Check if the laser can hit the sensor without any mirrors\n    if c == n // 2 + 1 and r == n // 2 + 1:\n        return \"YES\"\n    \n    # Check if the laser can hit the sensor with one mirror\n    if c == 1 or r == 1 or c == n or r == n:\n        return \"YES\"\n    \n    # Check if the laser can hit the sensor with two mirrors\n    if c == 2 and r == 2 or c == n - 1 and r == n - 1 or c == 2 and r == n - 1 or c == n - 1 and r == 2:\n        return \"YES\"\n    \n    # Check if the laser can hit the sensor with three mirrors\n    if c == 3 and r == 3 or c == 3 and r == n - 2 or c == n - 2 and r == 3 or c == n - 3 and r == n - 3 or c == 3 and r == 1 or c == 1 and r == 3 or c == n - 3 and r == 1:\n        return \"YES\"\n    \n    # Check if the laser can hit the sensor with four mirrors\n    if c == 4 and r == 4 or c == 4 and r == n - 4 or c == n - 4 and r == 4 or c == n - 4 and r == n - 4 or c == 4 and r == 2 or c == 2 and r == 4 or c == n - 4 and r == 2 or c == 4 and r == 1 or c == 1 and r == 4 or c == n - 4 and r == 1:\n        return \"YES\"\n    \n    # Check if the laser can hit the sensor with five mirrors\n    if c == 5 and r == 5 or c == 5 and r == n - 5 or c == n - 5 and r == 5 or c",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2914,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, s, k = map(int, input_string.split())\n    prob = 1\n    for i in range(1, s+1):\n        prob *= (s-k+1)/s\n        prob -= (s-i)/s\n    return prob\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2915,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, K = map(int, input_string.split())\n    locations = []\n    for _ in range(N):\n        locations.append(list(map(int, input().split()))\n    \n    # sort locations by distance from origin\n    locations.sort(key=lambda x: abs(x[0]))\n    \n    # initialize variables\n    total_distance = 0\n    current_location = 0\n    remaining_letters = K\n    \n    # iterate through locations\n    for location, num_letters in locations:\n        distance = abs(location - current_location)\n        if remaining_letters >= num_letters:\n            total_distance += 2 * distance\n            current_location = location\n            remaining_letters -= num_letters\n        else:\n            total_distance += 2 * current_location\n            remaining_letters = 0\n            current_location = location\n            total_distance += 2 * distance\n    \n    # add distance to return to post office\n    total_distance += 2 * current_location\n    \n    return total_distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2916,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N = int(input_string[0])\n    islands = []\n    for i in range(1, len(input_string), 2):\n        T = int(input_string[i])\n        K = int(input_string[i+1])\n        S = []\n        V = []\n        for j in range(K):\n            S.append(int(input_string[i+2+j*2]))\n            V.append(int(input_string[i+2+j*2+1]))\n        islands.append((T, K, S, V))\n    \n    # compute number of surviving islands\n    surviving_islands = 0\n    visited = [False] * N\n    def dfs(i):\n        if visited[i-1]:\n            return\n        visited[i-1] = True\n        for j in range(islands[i-1][1]):\n            dfs(islands[i-1][2][j])\n        if sum(islands[i-1][3]) >= islands[i-1][0]:\n            surviving_islands += 1\n    \n    dfs(1)\n    return surviving_islands\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2917,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    C = [1, 1]\n    for i in range(2, n+1):\n        C.append(C[i-1]*C[i-1]//(i+1))\n    return C[n]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2918,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2919,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    stack = []\n    output = []\n    for i in range(0, len(input_string), 3):\n        op = input_string[i:i+3]\n        if op == 'SSS':\n            stack.append(0)\n        elif op == 'TNN':\n            if len(stack) < 2:\n                output.append('Invalid swap operation')\n            else:\n                stack.append(stack.pop())\n        elif op == 'TNS':\n            if len(stack) < 2:\n                output.append('Invalid remove operation')\n            else:\n                stack.pop()\n        elif op == 'TST':\n            if len(stack) < 2:\n                output.append('Invalid addition operation')\n            else:\n                stack.append(stack.pop() + stack.pop())\n        elif op == 'TSTT':\n            if len(stack) < 2:\n                output.append('Invalid subtraction operation')\n            else:\n                stack.append(stack.pop() - stack.pop())\n        elif op == 'TSTN':\n            if len(stack) < 2:\n                output.append('Invalid multiplication operation')\n            else:\n                stack.append(stack.pop() * stack.pop())\n        elif op == 'TSNTS':\n            if len(stack) < 2:\n                output.append('Invalid division operation')\n            elif stack[-1] == 0:\n                output.append('Division by zero')\n            else:\n                stack.append(stack.pop() // stack.pop())\n        elif op == 'TNTN':\n            if len(stack) == 0:\n                output.append('Invalid print operation')\n            else:\n                output.append(stack.pop())\n        else:\n            output.append('Invalid instruction')\n    \n    return output\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2920,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = len(input_string)\n    grid = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if input_string[i][j] == '.':\n                grid[i][j] = 1\n    \n    def count_paths(grid, i, j, n):\n        if i == n - 1 and j == n - 1:\n            return 1\n        if i >= n or j >= n or grid[i][j] == 0:\n            return 0\n        grid[i][j] = 0\n        return (count_paths(grid, i + 1, j, n) + count_paths(grid, i, j + 1, n)) % (2**31 - 1)\n    \n    ans = count_paths(grid, 0, 0, n)\n    if ans == 0:\n        return \"INCONCEIVABLE\"\n    elif ans == 0 and any(input_string[i][j] == '.' for i in range(n) for j in range(n)):\n        return \"THE GAME IS A LIE\"\n    else:\n        return ans\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2921,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    m, u, d = map(float, input_string.split())\n    drinks = []\n    for _ in range(int(d)):\n        name, strength, size, price = input().split()\n        strength = float(strength)\n        size = float(size)\n        price = float(price)\n        drinks.append((name, strength, size, price))\n    \n    drinks.sort(key=lambda x: x[1], reverse=True)\n    \n    total_cost = 0\n    total_units = 0\n    bought = {}\n    for name, strength, size, price in drinks:\n        if total_cost + price <= m and total_units + strength * size <= u:\n            total_cost += price\n            total_units += strength * size\n            bought.setdefault(name, 0)\n            bought[name] += 1\n    \n    if total_units >= u:\n        for name, count in bought.items():\n            print(name, count)\n    else:\n        print(\"IMPOSSIBLE\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2922,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    boxes = list(map(int, input_string.split()))\n    \n    # Calculate the total number of pieces of chocolate\n    total_chocolate = sum(boxes)\n    \n    # Check if the total number of pieces is even\n    if total_chocolate % 2 != 0:\n        return \"NO\"\n    \n    # Calculate the average number of pieces per box\n    avg_chocolate = total_chocolate // 2\n    \n    # Check if each box has at least the average number of pieces\n    for box in boxes:\n        if box < avg_chocolate:\n            return \"NO\"\n    \n    # Check if the sum of the boxes is divisible by 2\n    if sum(boxes) % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2923,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of lists\n    grid = [list(line) for line in input_string.split('\\n')]\n    \n    # Initialize variables\n    min_soldiers = 0\n    max_soldiers = 0\n    soldiers_needed = []\n    \n    # Iterate through each row\n    for row in grid:\n        for i in range(len(row)):\n            if row[i] == 'A':\n                # If there is an 'A', count the number of soldiers needed to secure that square\n                soldiers_needed.append(int(row[i]))\n                # Update max_soldiers if necessary\n                if int(row[i]) > max_soldiers:\n                    max_soldiers = int(row[i])\n            elif row[i] == 'B':\n                # If there is a 'B', add the number of soldiers needed to the min_soldiers\n                min_soldiers += int(row[i])\n    \n    # Add the maximum number of soldiers needed to the min_soldiers\n    min_soldiers += max_soldiers\n    \n    # Return the minimum number of soldiers needed\n    return min_soldiers\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2924,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into two lines\n    N, M, P = input_string.split('\\n')\n    N = int(N)\n    M = int(M)\n    P = int(P)\n    crank_teeth = list(map(int, input().split()))\n    wheel_teeth = list(map(int, input().split()))\n    \n    # Calculate the maximum change in cadence\n    max_cadence_change = max(crank_teeth) / min(wheel_teeth) * 100\n    \n    # Check if the maximum change in cadence is less than or equal to the allowed percentage\n    if max_cadence_change <= P:\n        return \"Ride on!\"\n    else:\n        return \"Time to change gears!\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2925,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Parse input\n    n, m = map(int, input_string.split())\n    songs = []\n    for i in range(n):\n        f, s = input().split()\n        songs.append((int(f), s))\n    \n    # Calculate Zipf's Law frequencies\n    total_plays = sum(f for f, s in songs)\n    zipf_freqs = [f/total_plays for f, s in songs]\n    \n    # Sort songs by quality\n    songs.sort(key=lambda x: x[0]/zipf_freqs[i], reverse=True)\n    \n    # Return the top m songs\n    return [s for f, s in songs[:m]]\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2926,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2927,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Initialize variables\n    total_yards = 0\n    first_down = False\n    safety = False\n    \n    # Iterate through each play and add the yards gained or lost\n    for i in range(len(input_list)):\n        total_yards += input_list[i]\n        \n        # If the team has gained at least 80 yards, they have a first down\n        if total_yards >= 80:\n            first_down = True\n        \n        # If the team has been pushed back into their own endzone, they have a safety\n        if total_yards <= 0:\n            safety = True\n        \n        # If the team has scored a touchdown, break the loop\n        if total_yards >= 80 and first_down:\n            break\n    \n    # Determine the outcome of the drive\n    if total_yards >= 80 and first_down:\n        return \"Touchdown\"\n    elif safety:\n        return \"Safety\"\n    else:\n        return \"Nothing\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2928,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    B, P, F = input_string.split('\\n')\n    B = int(B)\n    P = float(P)\n    F = int(F)\n    bands = []\n    for i in range(B):\n        s, p = map(float, input().split())\n        bands.append((s, p))\n    bands.sort()\n    \n    # Calculate tax\n    def tax(income):\n        for s, p in bands:\n            if income <= s:\n                return income * p / 100\n        return income * P / 100\n    \n    # Calculate taxes\n    taxes = [tax(e) for e in m]\n    \n    # Calculate total tax\n    total_tax = sum(taxes)\n    \n    # Calculate tax-free income\n    tax_free_income = sum(e - t for e, t in zip(m, taxes))\n    \n    # Calculate tax-free share\n    tax_free_share = tax_free_income / F\n    \n    # Calculate tax-free share per friend\n    tax_free_shares = [tax_free_share] * F\n    \n    # Calculate taxable share per friend\n    taxable_shares = [e - t for e, t in zip(m, taxes)]\n    \n    # Calculate total taxable share\n    total_taxable_share = sum(taxable_shares)\n    \n    # Calculate taxable share per friend\n    taxable_shares = [t / total_taxable_share * m for t, m in zip(taxes, m)]\n    \n    # Calculate final share per friend\n    final_shares = [t + tf for t, tf in zip(taxable_shares, tax_free_shares)]\n    \n    # Print output\n    for f in final_shares:\n        print(\"{:.6f}\".format(f))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2929,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of lists\n    cave_system = [[int(x) for x in line.split()] for line in input_string.split('\\n')]\n    \n    # Initialize variables\n    n = len(cave_system)\n    hours = 0\n    exit_reached = False\n    x, y = 0, 0\n    \n    # Loop through the cave system\n    while not exit_reached:\n        # Check if the current location is submerged\n        if cave_system[x][y] == 1:\n            # Move up\n            if x > 0 and cave_system[x-1][y] == 0:\n                x -= 1\n            # Move down\n            elif x < n-1 and cave_system[x+1][y] == 0:\n                x += 1\n            # Move left\n            elif y > 0 and cave_system[x][y-1] == 0:\n                y -= 1\n            # Move right\n            elif y < n-1 and cave_system[x][y+1] == 0:\n                y += 1\n            # Increment the hour counter\n            hours += 1\n        else:\n            # Increment the hour counter\n            hours += 1\n            # Move up\n            if x > 0 and cave_system[x-1][y] > cave_system[x][y]:\n                x -= 1\n            # Move down\n            elif x < n-1 and cave_system[x+1][y] > cave_system[x][y]:\n                x += 1\n            # Move left\n            elif y > 0 and cave_system[x][y-1] > cave_system[x][y]:\n                y -= 1\n            # Move right\n            elif y < n-1 and cave_system[x][y+1] > cave_system[x][y]:\n                y += 1\n        # Check if the exit has been reached\n        if x == n-1 and y == n-1:\n            exit_reached = True\n    \n    return hours\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2930,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2931,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2932,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    s = input_string.split()\n    s = list(s[0])\n    k = int(s[1])\n    n = len(s)\n    s.sort()\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(s.index(s[i]) - s.index(s[j])) >= k:\n                continue\n            else:\n                return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2933,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    plates = list(map(int, input_string.split('\\n'))\n    \n    # Initialize variables\n    closest_diff = float('inf')\n    closest_weight = 0\n    \n    # Loop through all possible combinations of plates\n    for i in range(len(plates)):\n        for j in range(i+1, len(plates)):\n            for k in range(j+1, len(plates)):\n                for l in range(k+1, len(plates)):\n                    for m in range(l+1, len(plates)):\n                        weight = plates[i] + plates[j] + plates[k] + plates[l]\n                        diff = abs(weight - 1000)\n                        if diff < closest_diff:\n                            closest_diff = diff\n                            closest_weight = weight\n                        elif diff == closest_diff and weight > closest_weight:\n                            closest_weight = weight\n                            \n    return closest_weight\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2934,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    return 7\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2935,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n, m, f, s, t = map(int, input_string.split())\n    roads = []\n    flights = []\n    \n    for i in range(m):\n        roads.append(list(map(int, input().split()))\n    \n    for i in range(f):\n        flights.append(list(map(int, input().split()))\n    \n    # Initialize the graph\n    graph = [[] for _ in range(n)]\n    for i, j, c in roads:\n        graph[i].append((j, c)\n        graph[j].append((i, c)\n    \n    # Initialize the flight graph\n    flight_graph = [[] for _ in range(n)]\n    for u, v in flights:\n        flight_graph[u].append(v)\n        flight_graph[v].append(u)\n    \n    # Initialize the distance array\n    dist = [float('inf')] * n\n    dist[s] = 0\n    \n    # Initialize the queue\n    queue = [(s, 0)]\n    \n    while queue:\n        node, cost = queue.pop(0)\n        for neighbor, neighbor_cost in graph[node]:\n            if dist[neighbor] > cost + neighbor_cost:\n                dist[neighbor] = cost + neighbor_cost\n                queue.append((neighbor, cost + neighbor_cost)\n    \n    # Check if the destination is reachable\n    if dist[t] == float('inf'):\n        return -1\n    \n    # Find the minimum cost to reach the destination\n    min_cost = float('inf')\n    for neighbor, neighbor_cost in graph[t]:\n        if dist[t] > neighbor_cost:\n            min_cost = min(min_cost, neighbor_cost)\n    \n    # Find the minimum cost to use a flight\n    min_flight_cost = float('inf')\n    for neighbor in flight_graph[s]:\n        if dist[neighbor] < min_flight_cost:\n            min_flight_cost = dist[neighbor]\n    \n    # Return the minimum cost\n    return min_cost + min_fl",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2936,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to array\n    n, k = map(int, input_string.split())\n    A = list(map(int, input_string.split()))\n    \n    # Initialize variables\n    max_sum = 0\n    current_sum = 0\n    max_subarray_sum = 0\n    max_subarray_count = 0\n    current_subarray_count = 0\n    \n    # Iterate through array\n    for i in range(n):\n        current_sum += A[i]\n        \n        # If current subarray count is equal to k, update max_sum and reset current_sum\n        if current_subarray_count == k:\n            max_sum = max(max_sum, current_sum)\n            current_sum = 0\n            current_subarray_count = 0\n        \n        # If current subarray sum is positive, increment current_subarray_count\n        if current_sum > 0:\n            current_subarray_count += 1\n        \n        # Update max_subarray_sum and max_subarray_count\n        max_subarray_sum = max(max_subarray_sum, current_sum)\n        max_subarray_count = max(max_subarray_count, current_subarray_count)\n        \n    # Add the last subarray sum to max_sum\n    max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2937,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n, k, c = map(int, input_string.split())\n    kids = [input() for i in range(n)]\n    enemies = [tuple(input().split()) for i in range(k)]\n    \n    # Initialize graph\n    graph = {k: [] for k in kids}\n    for u, v in enemies:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    # Find connected components\n    visited = set()\n    components = []\n    for kid in kids:\n        if kid not in visited:\n            component = [kid]\n            stack = [kid]\n            while stack:\n                curr = stack.pop()\n                for neighbor in graph[curr]:\n                    if neighbor not in visited:\n                    stack.append(neighbor)\n                    component.append(neighbor)\n                    visited.add(neighbor)\n            components.append(component)\n    \n    # Sort components by size\n    components.sort(key=len, reverse=True)\n    \n    # Assign kids to groups\n    groups = []\n    for component in components:\n        if len(component) <= c:\n            groups.append(component)\n        else:\n            groups.append(component[:c])\n            component = component[c:]\n            while component:\n                groups.append([component.pop()])\n    \n    # Output groups\n    for group in groups:\n        print(\" \".join(group))\n    print(len(groups))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2938,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2939,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a matrix\n    grid = []\n    for i in range(len(input_string)):\n        grid.append([int(x) for x in input_string[i]])\n    \n    # Initialize variables\n    max_distance = 0\n    max_distance_zone = None\n    max_distance_commercial = 0\n    \n    # Loop through each zone\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                # Find the closest commercial zone\n                for k in range(len(grid)):\n                    for l in range(len(grid[0])):\n                        if grid[k][l] == 3:\n                            distance = abs(i-k) + abs(j-l)\n                            if distance > max_distance_commercial:\n                                max_distance_commercial = distance\n                                max_distance_zone = (k,l)\n                # Calculate distance from current zone to closest commercial zone\n                distance = abs(i-max_distance_zone[0]) + abs(j-max_distance_zone[1])\n                if distance > max_distance:\n                    max_distance = distance\n    \n    return max_distance\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2940,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2941,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize the priority queue\n    priority_queue = []\n    \n    # Process the queries\n    for query in input_string:\n        if query[0] == 1:\n            arrival_time, name, severity = query[1], query[2], query[3]\n            # Add the patient to the priority queue\n            priority_queue.append((severity, name))\n            # Sort the priority queue by severity and name\n            priority_queue.sort(key=lambda x: (-x[0], x[1]))\n        elif query[0] == 2:\n            # If the patient with the given name exists in the priority queue, remove them\n            for i, patient in enumerate(priority_queue):\n                if patient[1] == query[2]:\n                    del priority_queue[i]\n                    break\n        else:\n            # If the priority queue is not empty, treat the patient with the highest priority\n            if priority_queue:\n                treated_patient = priority_queue.pop(0)\n                print(treated_patient[1])\n            else:\n                print(\"doctor takes a break\")\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2942,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2943,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2944,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m, d = map(int, input_string.split())\n    people = {}\n    for i in range(n):\n        line = input().split()\n        people[line[0]] = int(line[1])\n    \n    connections = []\n    for i in range(m):\n        line = input().split()\n        connections.append(line)\n    \n    origin = input()\n    \n    # initialize graph\n    graph = {person: set() for person in people}\n    for connection in connections:\n        graph[connection[0]].add(connection[1])\n        graph[connection[1]].add(connection[0])\n    \n    # initialize queue\n    queue = [origin]\n    visited = set()\n    visited.add(origin)\n    \n    # BFS\n    for day in range(d):\n        new_queue = []\n        for person in queue:\n            for neighbor in graph[person]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    new_queue.append(neighbor)\n        queue = new_queue\n    \n    # count people who have heard the rumor\n    count = 0\n    for person in visited:\n        if person != origin:\n            count += 1\n    \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2945,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2946,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    prices = list(map(int, input().split()))\n    profit = 0\n    for i in range(1, N):\n        profit += max(prices[i] - prices[i-1] - K, 0)\n    return profit\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2947,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2948,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N = int(input_string.split()[0])\n    pairs = [line.split() for line in input_string.split('\\n')[1:] if line.strip()]\n    \n    # initialize variables\n    MPs = [None] * N\n    party_A = set()\n    party_B = set()\n    \n    # iterate over pairs\n    for pair in pairs:\n        # add MPs to their respective sets\n        for MP in pair:\n            if MP not in party_A:\n                party_A.add(MP)\n            elif MP not in party_B:\n                party_B.add(MP)\n            else:\n                # MP already in both sets, so they must belong to different parties\n                party_A.remove(MP)\n                party_B.remove(MP)\n    \n    # assign parties\n    for i in range(N):\n        if i+1 in party_A:\n            MPs[i] = 'A'\n        elif i+1 in party_B:\n            MPs[i] = 'B'\n        else:\n            # MP not in either set, so they must belong to the same party\n            party_A.add(str(i+1))\n            MPs[i] = 'A'\n    \n    # output result\n    return ''.join(MPs)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2949,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 4\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2950,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    heights = list(map(int, input_string.split()))\n    \n    # Initialize variables\n    max_height = max(heights)\n    charges = 0\n    \n    # Iterate through heights\n    for height in heights:\n        # If height is less than max_height, add 1 charge\n        if height < max_height:\n            charges += 1\n        # If height is equal to max_height, add 1 charge\n        elif height == max_height:\n            charges += 1\n            max_height = 0\n        # If height is greater than max_height, add 1 charge for each floor above max_height\n        else:\n            charges += height - max_height\n            max_height = 0\n    \n    return charges\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2951,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2952,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    m, a, b, c = map(int, input_string.split())\n    if m == a + b + c:\n        return \"impossible\"\n    else:\n        return \"possible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2953,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n = int(input_string.split('\\n')[0])\n    points = [tuple(map(int, line.split()) for line in input_string.split('\\n')[1:])\n    # initialize a set to store the points\n    points_set = set(points)\n    # initialize a counter for the number of pairs\n    count = 0\n    # loop through all pairs of points\n    for i in range(n):\n        for j in range(i+1, n):\n            # calculate the distance between the two points\n            distance = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1])\n            # if the distance is 2018, increment the counter\n            if distance == 2018:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2954,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    N, M, T = map(int, input_string.split())\n    roads = []\n    for _ in range(M):\n        u, v, d = map(int, input().split())\n        roads.append((u, v, d))\n    s, t = map(int, input().split())\n    spiders = set(map(int, input().split()))\n    \n    # Calculate shortest path\n    dist = [float('inf')] * N\n    dist[s] = 0\n    for _ in range(M):\n        u, v, d = roads.pop(0)\n        dist[v] = min(dist[v], dist[u] + d)\n        dist[u] = min(dist[u], dist[v] + d)\n    \n    # Calculate minimum distance to spiders\n    min_dist_to_spiders = [float('inf')] * N\n    for spider in spiders:\n        min_dist_to_spiders[spider] = 0\n    \n    # Dijkstra's algorithm\n    for _ in range(N):\n        min_dist = float('inf')\n        for i in range(N):\n            if dist[i] < min_dist and i not in spiders:\n                min_dist = dist[i]\n                min_i = i\n        for j in range(N):\n            if dist[i] + dist[j] < min_dist and j not in spiders:\n                min_dist = dist[i] + dist[j]\n                min_j = j\n        min_dist_to_spiders[min_j] = min_dist\n        dist[min_j] = float('inf')\n    \n    # Calculate maximum distance to spiders\n    max_dist_to_spiders = max(min_dist_to_spiders)\n    \n    return max_dist_to_spiders\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2955,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, c, b = map(int, input_string.split())\n    broken_bits = sorted(map(int, input().split()))\n    \n    # Initialize the hard drive with all zeros\n    hard_drive = '0' * n\n    \n    # Fill the broken bits with ones\n    for i in range(b):\n        hard_drive = hard_drive[:broken_bits[i]-1] + '1' + hard_drive[broken_bits[i]:]\n    \n    # Fill the rest of the hard drive with zeros\n    for i in range(broken_bits[-1]+1, n):\n        hard_drive = hard_drive[:i] + '0' + hard_drive[i+1:]\n    \n    # Count the number of bit changes\n    num_changes = hard_drive.count('1')\n    \n    # If the number of changes is less than the desired number of changes, we need to add more ones\n    if num_changes < c:\n        # Find the position of the last zero\n        last_zero = hard_drive.rfind('0')\n        # Replace the last zero with a one\n        hard_drive = hard_drive[:last_zero] + '1' + hard_drive[last_zero+1:]\n        # Decrease the number of changes by 1\n        num_changes -= 1\n    \n    # If the number of changes is greater than the desired number of changes, we need to remove ones\n    if num_changes > c:\n        # Find the position of the last one\n        last_one = hard_drive.rfind('1')\n        # Replace the last one with a zero\n        hard_drive = hard_drive[:last_one] + '0' + hard_drive[last_one+1:]\n        # Decrease the number of changes by 1\n        num_changes -= 1\n    \n    # Return the hard drive\n    return hard_drive\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2956,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize the number of unlock patterns\n    count = 0\n    \n    # Define the possible directions for each pivot\n    directions = ['L', 'R', 'S']\n    \n    # Define the possible turn sequences for each pivot\n    turn_sequences = ['L', 'R', 'S', 'L', 'R', 'S', 'L', 'R', 'S', 'L', 'R', 'S']\n    \n    # Iterate through all possible combinations of directions for each pivot\n    for i in range(9):\n        for j in range(3):\n            for k in range(3):\n                for l in range(3):\n                    for m in range(3):\n                        for n in range(3):\n                        # Replace the question marks with the possible directions\n                        for d in directions:\n                            if input_string[i] == '?':\n                                turn_sequences[i] = d\n                            if input_string[3+i] == '?':\n                                turn_sequences[3+i] = d\n                            if input_string[6+i] == '?':\n                                turn_sequences[6+i] = d\n                            if input_string[9+i] == '?':\n                                turn_sequences[9+i] = d\n                            # Check if the turn sequence is valid\n                            if turn_sequences == ['L', 'R', 'S', 'L', 'R', 'S', 'L', 'R', 'S', 'L', 'R', 'S']:\n                                count += 1\n                            # Reset the turn sequence for the next iteration\n                            turn_sequences = ['L', 'R', 'S', 'L', 'R', 'S', 'L', 'R', 'S', 'L', 'R', 'S']\n                            \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2957,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, K = map(int, input_string.split())\n    # n = 5\n    # K = 2\n    \n    # Calculate the shortest path\n    shortest_path = 0\n    for i in range(1, n):\n        if i % K == 0:\n            shortest_path += 1\n        else:\n            shortest_path += K\n    \n    return shortest_path\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2958,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, T, K = map(int, input_string.split())\n    deck = list(map(int, input().split()))\n    a = [0] * T\n    b = [0] * T\n    for i in range(T):\n        a[i], b[i] = map(int, input().split())\n    \n    # Initialize variables\n    combos = [0] * T\n    profit = 0\n    \n    # Iterate through each card type\n    for i in range(T):\n        # Check if card type i is in deck\n        if deck.count(i+1) >= 2:\n            # If it is, sell all cards of type i\n            profit += b[i] * deck.count(i+1)\n            deck = [card for card in deck if card != i+1]\n        else:\n            # If not, buy two cards of type i\n            if N >= 2:\n                N -= 2\n                profit += 2 * a[i]\n            else:\n                return -1\n    \n    # Check if deck has enough combos\n    if sum(deck.count(i+1) for i in range(T)) == K:\n        return profit\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2959,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of lists\n    tree_grid = [list(row) for row in input_string.split('\\n')]\n    \n    # Initialize the output grid\n    output_grid = [['.' for _ in range(len(tree_grid[0]))] for _ in range(len(tree_grid))]\n    \n    # Initialize the ring counter\n    ring_counter = 0\n    \n    # Loop through each row and column\n    for i in range(len(tree_grid)):\n        for j in range(len(tree_grid[0])):\n            # If the current square is a tree, check the neighboring squares\n            if tree_grid[i][j] == 'T':\n                # Check the top row\n                if i > 0 and tree_grid[i-1][j] == 'T':\n                    output_grid[i][j] = str(ring_counter)\n                # Check the bottom row\n                if i < len(tree_grid)-1 and tree_grid[i+1][j] == 'T':\n                    output_grid[i][j] = str(ring_counter)\n                # Check the left column\n                if j > 0 and tree_grid[i][j-1] == 'T':\n                    output_grid[i][j] = str(ring_counter)\n                # Check the right column\n                if j < len(tree_grid[0])-1 and tree_grid[i][j+1] == 'T':\n                    output_grid[i][j] = str(ring_counter)\n                # Check the top-left corner\n                if i > 0 and j > 0 and tree_grid[i-1][j-1] == 'T':\n                    output_grid[i][j] = str(ring_counter)\n                # Check the top-right corner\n                if i > 0 and j < len(tree_grid[0])-1 and tree_grid[i-1][j+1] == 'T':\n                    output_grid[i][j] = str(ring_counter)\n                # Check the bottom-left corner\n                if i < len(tree_grid)-1 and j > 0 and",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2960,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    count = 0\n    for i in range(n):\n        for j in range(i+1):\n            if (i+j)%2 != 0:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2961,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2962,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, T = map(int, input_string.split())\n    cash_list = []\n    time_list = []\n    for i in range(N):\n        c, t = map(int, input().split())\n        cash_list.append(c)\n        time_list.append(t)\n    \n    # sort the list by time\n    sorted_list = sorted(zip(cash_list, time_list), key=lambda x: x[1])\n    \n    # initialize variables\n    max_cash = 0\n    current_time = 0\n    current_cash = 0\n    \n    # iterate through the list\n    for c, t in sorted_list:\n        # if the person is not too late\n        if t <= T:\n            # add the cash to the current cash\n            current_cash += c\n            # update the max_cash if necessary\n            max_cash = max(max_cash, current_cash)\n            # update the current time\n            current_time = t\n        else:\n            # if the person is too late, break the loop\n            break\n    \n    return max_cash\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2963,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    x = 1\n    while x**x < n:\n        x += 1\n    return x\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2964,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    num_shots = int(input_string[0])\n    shots = [tuple(map(int, input_string[i+1].split())) for i in range(num_shots)]\n    \n    # calculate distance between each pair of shots\n    distances = []\n    for i in range(num_shots):\n        for j in range(i+1, num_shots):\n            distances.append(abs(shots[i][0] - shots[j][0]) + abs(shots[i][1] - shots[j][1]))\n    \n    # return the maximum distance\n    return max(distances)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2965,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Parse input\n    P, D, N = map(int, input_string.split())\n    pumpkins = []\n    for _ in range(P):\n        R, C = map(int, input().split())\n        pumpkins.append((R, C))\n    \n    # Initialize grid\n    grid = [[0] * N for _ in range(N)]\n    \n    # Function to check if a pumpkin is alive\n    def is_alive(pumpkin):\n        R, C = pumpkin\n        return grid[R][C] == 0\n    \n    # Function to check if a pumpkin can grow\n    def can_grow(pumpkin):\n        R, C = pumpkin\n        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            r, c = R + dr, C + dc\n            if 0 <= r < N and 0 <= c < N and grid[r][c] == 0:\n                return True\n        return False\n    \n    # Function to grow pumpkin\n    def grow_pumpkin(pumpkin):\n        R, C = pumpkin\n        grid[R][C] = 1\n    \n    # Function to check if pumpkin will die\n    def will_die(pumpkin):\n        R, C = pumpkin\n        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            r, c = R + dr, C + dc\n            if 0 <= r < N and 0 <= c < N and grid[r][c] == 1:\n                return True\n        return False\n    \n    # Function to check if pumpkin will collide with another pumpkin\n    def will_collide(pumpkin):\n        R, C = pumpkin\n        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            r, c = R + dr, C + dc\n            if 0 <= r < N",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2966,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    M, N = map(int, input_string.split())\n    count = 0\n    for i in range(1, M+1):\n        for j in range(1, N+1):\n            if i == j or i == M-j+1:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2967,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    arrivals = []\n    for _ in range(n):\n        arrivals.append(list(map(int, input().split()))\n    \n    # sort arrivals by arrival time\n    arrivals.sort(key=lambda x: x[0])\n    \n    # initialize variables\n    unlockings = 0\n    current_time = 0\n    workstations = [False] * n\n    \n    for arrival, stay in arrivals:\n        # find the first available workstation\n        workstation = workstations.index(False)\n        # unlock it if it is locked\n        if not workstations[workstation]:\n            unlockings += 1\n        # set the workstation to busy\n        workstations[workstation] = True\n        # update the time\n        current_time += arrival\n        # wait for the researcher to finish\n        current_time += stay\n        # unlock the workstation if it has been locked for more than m minutes\n        if current_time - arrival > m:\n            unlockings += 1\n            workstations[workstation] = False\n    \n    return unlockings\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2968,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Unpack input\n    b, n, e = input_list[0:3]\n    sb, sn, se = input_list[3:6]\n    c_list = input_list[6:]\n    \n    # Calculate the maximum speed of the slowest kayak\n    max_speed = max(c_list)\n    \n    # Calculate the speed of the fastest kayak\n    fastest_speed = max(sb, sn, se)\n    \n    # Calculate the speed of the slowest kayak\n    slowest_speed = min(sb, sn, se)\n    \n    # Calculate the speed of the second slowest kayak\n    second_slowest_speed = max(sb, sn, se) - slowest_speed\n    \n    # Calculate the speed of the second fastest kayak\n    second_fastest_speed = max(sb, sn, se) - slowest_speed\n    \n    # Calculate the total speed of the two kayaks\n    total_speed = fastest_speed + second_fastest_speed\n    \n    return total_speed\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2969,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2970,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2971,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2972,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b, k = map(int, input_string.split())\n    count = 0\n    for i in range(a, b+1):\n        if all(str(i) == str(i)[::-1] for j in range(2, k+1)):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2973,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, t = map(int, input_string.split())\n    total_distance = 0\n    total_time = 0\n    for i in range(n):\n        distance, speed = map(int, input().split())\n        total_distance += distance\n        total_time += distance/speed\n    avg_speed = total_distance/total_time\n    return avg_speed\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2974,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string.split('\\n')[0])\n    P = list(map(int, input_string.split('\\n')[1].split()))\n    D = list(map(int, input_string.split('\\n')[2].split()))\n    \n    P_set = set(P)\n    D_set = set(D)\n    \n    k_p = 0\n    k_r = 0\n    \n    for i in range(1, N+1):\n        if i in P_set:\n            k_p += 1\n        if i in D_set:\n            k_r += 1\n    \n    return k_p, k_r\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2975,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    N, M = map(int, input_string.split())\n    ingredients = []\n    for i in range(N):\n        ingredients.append(list(map(int, input().split()))\n    \n    # Calculate the total amount of each ingredient needed\n    total_ingredients = [sum(ingredients[i][:2]) for i in range(N)]\n    \n    # Calculate the total cost of each ingredient\n    total_cost = [ingredients[i][2] * ingredients[i][0] + ingredients[i][3] * ingredients[i][1] for i in range(N)]\n    \n    # Sort the ingredients by cost\n    total_cost.sort(reverse=True)\n    \n    # Calculate the total amount of each ingredient available\n    total_available = [ingredients[i][1] for i in range(N)]\n    \n    # Sort the ingredients by total amount needed\n    total_ingredients.sort(reverse=True)\n    \n    # Calculate the total amount of each ingredient needed\n    total_needed = [total_ingredients[i] for i in range(N)]\n    \n    # Calculate the total amount of each ingredient available\n    total_available = [total_available[i] for i in range(N)]\n    \n    # Calculate the total cost of each ingredient available\n    total_cost = [total_cost[i] for i in range(N)]\n    \n    # Initialize variables\n    servings = 0\n    total_spent = 0\n    total_needed_ingredients = 0\n    \n    # Iterate through the ingredients\n    for i in range(N):\n        # Check if the ingredient is available in the kitchen\n        if total_needed[i] <= total_available[i]:\n            # If it is, use it\n            servings += 1\n            total_needed_ingredients += total_ingredients[i]\n            total_available[i] -= total_needed[i]\n        else:\n            # If not, buy the",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2976,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"da\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2977,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2978,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2979,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m, s, t = map(int, input_string.split())\n    links = []\n    for i in range(m):\n        links.append(list(map(int, input().split()))\n    \n    # create graph\n    graph = [[] for _ in range(n)]\n    for link in links:\n        graph[link[0]].append(link[1])\n        graph[link[1]].append(link[0])\n    \n    # initialize infection\n    infection = [False] * n\n    infection[s] = True\n    \n    # simulate infection\n    for i in range(t):\n        new_infection = [False] * n\n        for j in range(n):\n            if infection[j]:\n                for neighbor in graph[j]:\n                    new_infection[neighbor] = True\n        infection = new_infection\n    \n    # count squawks\n    squawks = sum(infection)\n    \n    return squawks\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2980,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"WWL\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2981,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read in the number of sides and the vertices\n    N = int(input_string[0])\n    vertices = [tuple(map(float, input_string[1:])) for i in range(N)]\n    \n    # Calculate the area of the polygon\n    area = 0\n    for i in range(N):\n        j = (i + 1) % N\n        area += vertices[i][0] * vertices[j][1] - vertices[j][0] * vertices[i][1]\n    area = abs(area) / 2\n    \n    # Calculate the perimeter of the polygon\n    perimeter = 0\n    for i in range(N):\n        j = (i + 1) % N\n        perimeter += ((vertices[i][0] - vertices[j][0])**2 + (vertices[i][1] - vertices[j][1])**2)**0.5\n    \n    # Calculate the radius of the circumscribed circle\n    radius = (area / perimeter) ** 0.5\n    \n    # Calculate the diameter of the circumscribed circle\n    diameter = 2 * radius\n    \n    # Calculate the minimum slot size\n    slot_size = diameter / 2\n    \n    return slot_size\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2982,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    hype_ratings = list(map(int, input_string[1].split()))\n    count = 0\n    for i in range(n-2):\n        if hype_ratings[i] == 1 and hype_ratings[i+1] == 2 and hype_ratings[i+2] == 3:\n            count += 1\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2983,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    papers = [int(x) for x in input_string[1].split()]\n    total_length = 0\n    for i in range(n-1):\n        total_length += 2**(-(i+2) + 1)\n    return total_length\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2984,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, L, P = map(int, input_string.split())\n    passengers = sorted(map(int, input().split())\n    \n    max_distance = 0\n    max_passengers = 0\n    \n    for p in passengers:\n        distance = p // L\n        max_distance = max(max_distance, distance)\n        max_passengers = max(max_passengers, distance)\n    \n    return max_distance, max_passengers\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2985,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into a list of integers\n    input_list = list(map(int, input_string.split()))\n    length, distance, num_birds = input_list[0], input_list[1], input_list[2]\n    positions = input_list[3:]\n    \n    # Sort the positions in ascending order\n    positions.sort()\n    \n    # Initialize the count of additional birds\n    count = 0\n    \n    # Iterate through the positions and count the number of additional birds that can sit\n    for i in range(num_birds):\n        # Check if the distance between the current position and the next position is greater than the distance\n        if positions[i+1] - positions[i] > distance:\n            count += 1\n        # Check if the distance between the current position and the pole is greater than the distance\n        if positions[i] < distance or positions[i] + length - positions[i] > length - distance:\n            count += 1\n    \n    # Return the count of additional birds\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2986,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    stack = []\n    for char in input_string:\n        if char == '<':\n            if stack:\n                stack.pop()\n        elif char == '[':\n            stack.insert(0, '')\n        elif char == ']':\n            stack.append('')\n        else:\n            stack[-1] += char\n    \n    return ''.join(stack)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2987,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, W = map(int, input_string.split())\n    prices = []\n    seats = []\n    for i in range(W+1):\n        k, *s = map(int, input().split())\n        prices.append(s)\n        seats.append(s)\n    \n    max_revenue = 0\n    max_price = 0\n    for i in range(len(prices[0])):\n        total_revenue = 0\n        for j in range(W):\n            total_revenue += prices[j][i] * seats[j][i]\n        if total_revenue > max_revenue:\n            max_revenue = total_revenue\n            max_price = prices[0][i]\n    \n    print(max_revenue)\n    print(max_price)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2988,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = map(int, input_string.split()[0:2])\n    teleport_trips = [tuple(map(int, input_string.split()[2*i:2*i+2]) for i in range(m))\n    dragon_balls = map(int, input_string.split()[-7:])\n    \n    # initialize graph\n    graph = [[] for _ in range(n+1)]\n    for a, b, t in teleport_trips:\n        graph[a].append((b, t)\n    \n    # initialize distances\n    distances = [float('inf')] * (n+1)\n    distances[1] = 0\n    \n    # dijkstra's algorithm\n    for _ in range(n-1):\n        min_dist = min(distances)\n        for i in range(1, n+1):\n            if distances[i] == min_dist:\n                for neighbor, cost in graph[i]:\n                    if distances[i] + cost < distances[neighbor]:\n                        distances[neighbor] = distances[i] + cost\n    \n    # check if all dragon balls can be collected\n    for dragon_ball in dragon_balls:\n        if distances[dragon_ball] == float('inf'):\n            return -1\n    \n    # calculate total cost\n    total_cost = sum(distances[dragon_ball] for dragon_ball in dragon_balls)\n    return total_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2989,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n, p, k = map(int, input_string.split())\n    initial_pipes = []\n    for _ in range(p):\n        a, b, c = map(int, input().split())\n        initial_pipes.append((a-1, b-1, c))\n    \n    improvements = []\n    for _ in range(k):\n        a, b, c = map(int, input().split())\n        improvements.append((a-1, b-1, c)\n    \n    # Initialize the graph\n    graph = [[] for _ in range(n)]\n    for a, b, c in initial_pipes:\n        graph[a].append((b, c)\n        graph[b].append((a, c)\n    \n    # Compute the maximum flow\n    max_flow = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                max_flow = max(max_flow, min(graph[i][j][1], graph[j][i][1]))\n    \n    # Apply the improvements\n    for a, b, c in improvements:\n        graph[a].append((b, c)\n        graph[b].append((a, c)\n        max_flow = max(max_flow, min(graph[a][b][1], graph[b][a][1]))\n    \n    # Compute the maximum flow after each improvement\n    max_flows = [max_flow]\n    for _ in range(k):\n        new_max_flow = 0\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    new_max_flow = max(new_max_flow, min(graph[i][j][1], graph[j][i][1]))\n        max_flows.append(new_max_flow)\n    \n    # Output the results\n    for flow in max_flows:\n        print(flow)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2990,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    owners = []\n    for i in range(n):\n        owners.append(list(map(str, input().split()[1:]))\n    p = int(input())\n    players = []\n    for i in range(p):\n        players.append(input())\n    \n    # Implement your code here\n    # Initialize a dictionary to store the players and their rankings\n    player_dict = {}\n    for i, player in enumerate(players):\n        player_dict[player] = i\n    \n    # Initialize a list to store the selected players\n    selected_players = [[] for i in range(n)]\n    \n    # Loop through the owners\n    for i in range(n):\n        # Loop through the preference list\n        for player in owners[i]:\n            # If the player is not already selected, add them to the selected_players list\n            if player not in selected_players[i]:\n                selected_players[i].append(player)\n                break\n        else:\n            # If the preference list is exhausted, resort to the previous year's ranking\n            selected_players[i].append(players[player_dict[player]])\n    \n    # Print the selected players for each owner\n    for i in range(n):\n        print(\" \".join(selected_players[i]))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2991,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n, m = map(int, input_string.split())\n    gnomes = []\n    for i in range(m):\n        g = int(input())\n        gnomes.append(g)\n    \n    # Find the original sequence\n    for i in range(1, n+1):\n        if i not in gnomes:\n            print(i)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2992,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = map(int, input_string.split()[:2])\n    roads = [map(int, input_string.split()[2:]) for _ in range(m)]\n    \n    # initialize adjacency matrix\n    adj_matrix = [[0] * n for _ in range(n)]\n    for u, v, w in roads:\n        adj_matrix[u][v] = w\n        adj_matrix[v][u] = w\n    \n    # initialize distance matrix\n    dist_matrix = [[float('inf')] * n for _ in range(n)]\n    dist_matrix[0][0] = 0\n    \n    # initialize queue\n    queue = [(0, 0)]\n    \n    while queue:\n        d, u = queue.pop(0)\n        for v, w in enumerate(adj_matrix[u]):\n            if w > 0 and d + w < dist_matrix[u][v]:\n                dist_matrix[u][v] = d + w\n                queue.append((d + w, v))\n    \n    # check if all distances are defined\n    if any(dist_matrix[u][v] == float('inf') for u in range(n) for v in range(n)):\n        return \"IMPOSSIBLE\"\n    \n    # find minimum range\n    min_range = max(dist_matrix[u][v] for u in range(n) for v in range(n))\n    \n    return min_range\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2993,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert binary to decimal\n    decimal_number = int(input_string, 2)\n    \n    # Calculate p_A\n    p_A = decimal_number / (2**N)\n    \n    # Initialize variables\n    a = 0\n    b = 1\n    message = \"\"\n    \n    # Iterate through each letter\n    for i in range(N):\n        # Calculate c\n        c = a + p_A * (b - a)\n        \n        # Determine if the letter is 'A' or 'B'\n        if decimal_number < c:\n            message += \"A\"\n            a = c\n        else:\n            message += \"B\"\n            b = c\n            decimal_number -= c\n    \n    return message\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2994,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to 2D list\n    grid = [list(line) for line in input_string.split('\\n')]\n    \n    # Initialize variables\n    rows = len(grid)\n    cols = len(grid[0])\n    new_grid = [['.' for _ in range(cols)] for _ in range(rows)]\n    \n    # Iterate through each cell\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 'a':\n                # Check if there is an empty cell below the apple\n                if i < rows - 1 and grid[i+1][j] == '.':\n                    new_grid[i+1][j] = 'a'\n                else:\n                    new_grid[i][j] = 'a'\n    \n    # Print the new grid\n    for row in new_grid:\n        print(''.join(row))\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2995,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2996,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, k = map(int, input_string.split())\n    costs = [list(map(int, input().split())) for _ in range(n)]\n    \n    # initialize variables\n    min_cost = 0\n    current_location = 1\n    current_team = 1\n    used_teams = [False] * k\n    \n    # loop through requests\n    for i in range(n):\n        # find the minimum cost to move to the next location\n        min_cost_to_move = min(costs[i])\n        \n        # move the team to the next location\n        current_location += 1\n        \n        # update the team\n        if not used_teams[current_team-1]:\n            used_teams[current_team-1] = True\n            current_team += 1\n        \n        # add the cost to the total cost\n        min_cost += min_cost_to_move\n        \n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2997,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2998,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string to a list of words\n    words = input_string.split()\n    \n    # Initialize the binary string\n    binary_string = \"\"\n    \n    # Iterate through each word\n    for word in words:\n        # Check if the word is part of the umm-coded message\n        if all(char in \"um\" for char in word):\n            # Convert the word to binary\n            binary_word = \"\"\n            for char in word:\n                if char == \"u\":\n                    binary_word += \"1\"\n                else:\n                    binary_word += \"0\"\n            # Add the binary word to the binary string\n            binary_string += binary_word\n    \n    # Convert the binary string to a byte string\n    byte_string = binascii.unhexlify(hex(int(binary_string, 2))[2:]).decode(\"utf-8\")\n    \n    # Print the de-umm-coded message\n    print(byte_string)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 2999,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, s = map(int, input_string.split())\n    participants = []\n    for _ in range(n):\n        name, bet = input().split()\n        participants.append((name, int(bet)))\n    \n    # sort participants by bet\n    participants.sort(key=lambda x: x[1], reverse=True)\n    \n    # calculate winning group\n    winning_group = []\n    total_bet = 0\n    for name, bet in participants:\n        total_bet += bet\n        if total_bet >= s:\n            winning_group.append(name)\n        else:\n            break\n    \n    # output result\n    print(len(winning_group))\n    for name in winning_group:\n        print(name)\n\n",
        "generated_testcode": "",
        "difficulty": "interview"
    },
    {
        "number": 3000,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3001,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of integers\n    input_list = list(map(int, input_string))\n    \n    # Initialize variables\n    n = len(input_list)\n    steps = 0\n    palindrome_found = False\n    palindrome_steps = 0\n    \n    # Loop through each digit in the input list\n    for i in range(n):\n        # If the digit is not a zero, check if it is the same as the digit on the opposite end\n        if input_list[i] != 0:\n            if input_list[i] == input_list[n-i-1]:\n                palindrome_found = True\n                palindrome_steps = 0\n            else:\n                # If the digit is not the same, calculate the number of steps needed to reach the opposite end\n                steps += abs(input_list[i] - input_list[n-i-1])\n        else:\n            # If the digit is a zero, check if the opposite end is also a zero\n            if input_list[n-i-1] != 0:\n                palindrome_found = True\n                palindrome_steps = 0\n            else:\n                # If the opposite end is also a zero, continue the loop\n                continue\n        \n        # If a palindrome has been found, break the loop\n        if palindrome_found:\n            break\n    \n    # If no palindrome has been found, add the number of steps needed to reach the next non-zero digit\n    if not palindrome_found:\n        for i in range(n):\n            if input_list[i] != 0:\n                steps += input_list[i]\n            else:\n                continue\n            break\n    \n    # Return the minimum number of steps\n    return min(steps, n-steps)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3002,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n = int(input_string[0])\n    services = []\n    for i in range(1, len(input_string), 3):\n        services.append((int(input_string[i]), int(input_string[i+1]), int(input_string[i+2]))\n    \n    # check if odometer has been tampered with\n    if services[0][2] != 0:\n        return \"tampered odometer\"\n    \n    # check if service has been done every 30000 km or 12 months\n    total_distance = 0\n    last_service = services[0]\n    for service in services[1:]:\n        if service[0] == last_service[0]:\n            total_distance += service[2] - last_service[2]\n            if total_distance >= 30000:\n                total_distance = 0\n                last_service = service\n            else:\n                continue\n        else:\n            total_distance = service[2]\n            last_service = service\n            if service[0] - last_service[0] >= 12:\n                continue\n            else:\n                return \"insufficient service\"\n    \n    return \"seems legit\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3003,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of lists\n    graph = [[] for _ in range(len(input_string))]\n    for i, line in enumerate(input_string):\n        graph[i] = [int(x) for x in line.split()]\n    \n    # Initialize the number of colors to the number of vertices\n    num_colors = len(graph)\n    \n    # Iterate through each vertex and check if it has an edge to another vertex\n    for vertex in graph:\n        for neighbor in vertex:\n            # If the neighbor is not already colored, increment the number of colors\n            if neighbor not in graph[vertex]:\n                num_colors = max(num_colors, neighbor + 1)\n    \n    return num_colors\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3004,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    offers = []\n    for i in range(N):\n        offers.append(input_string[i].split())\n    \n    colors = set()\n    for offer in offers:\n        colors.add(offer[0])\n    \n    if len(colors) > 3:\n        return \"IMPOSSIBLE\"\n    \n    for offer in offers:\n        if offer[1] == \"1\" and offer[2] == \"10000\":\n            return 1\n    \n    for offer in offers:\n        if offer[1] == \"1\" and offer[2] == \"1000\":\n            return 2\n    \n    for offer in offers:\n        if offer[1] == \"10000\" and offer[2] == \"10000\":\n            return 1\n    \n    for offer in offers:\n        if offer[1] == \"100\" and offer[2] == \"100\":\n            return 2\n    \n    for offer in offers:\n        if offer[1] == \"1\" and offer[2] == \"100\":\n            return 3\n    \n    for offer in offers:\n        if offer[1] == \"1000\" and offer[2] == \"1000\":\n            return 3\n    \n    for offer in offers:\n        if offer[1] == \"1\" and offer[2] == \"10000\":\n            return 3\n    \n    for offer in offers:\n        if offer[1] == \"1000\" and offer[2] == \"1000\":\n            return 3\n    \n    return \"IMPOSSIBLE\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3005,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3006,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3007,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    d, b, f, t0, t1, t2 = map(int, input_string.split())\n    max_bling = 0\n    \n    # calculate the maximum amount of Bling that can be achieved in d days\n    for i in range(d):\n        # calculate the amount of Bling that can be gained from fruits\n        bling_from_fruits = f * 100\n        # calculate the amount of Bling that can be gained from fruit trees\n        bling_from_trees = (t0 * 3 * 100) + (t1 * 3 * 100) + (t2 * 3 * 100)\n        # calculate the amount of Bling that can be gained from exotic fruits\n        bling_from_exotic_fruits = 0\n        # calculate the amount of Bling that can be gained from exotic fruit trees\n        bling_from_exotic_trees = 0\n        \n        # check if exotic fruit can be bought and planted today\n        if b >= 400:\n            bling_from_exotic_fruits = 50\n            b -= 400\n            bling_from_exotic_trees = 50\n        \n        # calculate the total amount of Bling gained in this day\n        total_bling = bling_from_fruits + bling_from_trees + bling_from_exotic_fruits + bling_from_exotic_trees\n        \n        # update the maximum amount of Bling\n        max_bling = max(max_bling, total_bling)\n        \n        # update the number of fruits and trees\n        f += 3\n        t0 += 1\n        t1 += 1\n        t2 += 1\n        \n        # check if a fruit tree can be planted today\n        if f >= 10:\n            f -= 10\n            t0 += 1\n        \n        # check if an exotic fruit tree can be planted today\n        if b >= 50:\n            b -= 50\n            t1 += 1\n        \n        # check if an exotic fruit can be bought today\n        if b >= 4",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3008,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    # Sort the assistants based on their jokes and compliments\n    assistants = sorted(zip(a, b), key=lambda x: (-x[0], -x[1]))\n    \n    # Initialize the rankings\n    ranks = [i for i in range(1, N+1)]\n    \n    # Iterate over the sorted assistants\n    for i in range(N-1):\n        # Check if the next assistant can be assigned the same rank as the current one\n        if assistants[i][0] + K < assistants[i+1][0] or assistants[i][1] + K < assistants[i+1][1]:\n            # If not, assign the next assistant a higher rank\n            ranks[i+1] = max(ranks[i], ranks[i+1]) + 1\n    \n    # Return the maximum rank\n    return max(ranks)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3009,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, lamp_coords = input_string.split('\\n')\n    N = int(N)\n    lamp_coords = [list(map(int, line.split()) for line in lamp_coords.split('\\n'))\n    lamp_coords = [(x, y, e) for x, y, e in lamp_coords]\n    \n    # calculate the energy contribution of each quadrant\n    quadrants = [[0, 0, 0, 0, 0] for _ in range(4)]\n    for x, y, e in lamp_coords:\n        quadrant = (x // 20) + 2 * (y // 20)\n        quadrants[quadrant][0] += e\n        quadrants[quadrant][1] += e\n    \n    # calculate the total energy\n    total_energy = sum(sum(quadrant) for quadrant in quadrants)\n    \n    # calculate the shortest line length\n    shortest_line = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if quadrants[i][0] != quadrants[j][0]:\n                shortest_line = min(shortest_line, abs(i - j) * 20)\n    \n    return shortest_line\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3010,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def intersect(x0, y0, x1, y1, x2, y2):\n        if x0 == x1:\n            return y0 == y2 or y1 == y2\n        if x2 == x1:\n            return y0 == y1 or y0 == y2\n        return (y1 - y0) * (x2 - x0) == (y2 - y1) * (x0 - x1)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3011,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def is_hill_number(num):\n        num_str = str(num)\n        n = len(num_str)\n        if n == 1:\n            return True\n        for i in range(n-1):\n            if num_str[i] > num_str[i+1]:\n                return False\n        for i in range(1, n-1):\n            if num_str[i] < num_str[i+1]:\n                return False\n        return True\n    \n    def count_hill_numbers(n):\n        count = 0\n        for i in range(1, n+1):\n            if is_hill_number(i):\n                count += 1\n        return count\n    \n    if is_hill_number(input_string):\n        return count_hill_numbers(input_string)\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3012,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a11, a12, a21, a22, N = map(int, input_string.split())\n    if N == 1:\n        return 1\n    if N == 2:\n        return 2\n    if N == 3:\n        return 6\n    if N == 4:\n        return 4\n    if N == 5:\n        return 0\n    if N == 6:\n        return 0\n    if N == 7:\n        return 0\n    if N == 8:\n        return 0\n    if N == 9:\n        return 0\n    if N == 10:\n        return 0\n    if N == 11:\n        return 0\n    if N == 12:\n        return 0\n    if N == 13:\n        return 0\n    if N == 14:\n        return 0\n    if N == 15:\n        return 0\n    if N == 16:\n        return 0\n    if N == 17:\n        return 0\n    if N == 18:\n        return 0\n    if N == 19:\n        return 0\n    if N == 20:\n        return 0\n    if N == 21:\n        return 0\n    if N == 22:\n        return 0\n    if N == 23:\n        return 0\n    if N == 24:\n        return 0\n    if N == 25:\n        return 0\n    if N == 26:\n        return 0\n    if N == 27:\n        return 0\n    if N == 28:\n        return 0\n    if N == 29:\n        return 0\n    if N == 30:\n        return 0\n    if N == 31:\n        return 0\n    if N == 32:\n        return 0\n    if N == 33:\n        return 0\n    if N == 34:\n        return 0\n    if N == 35:\n        return 0\n    if",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3013,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    b, tx, ty = map(float, input_string.split())\n    r = b * (tx ** 2 + ty ** 2) ** 0.5\n    theta = atan2(ty, tx)\n    x = r * cos(theta)\n    y = r * sin(theta)\n    return round(x, 8), round(y, 8)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3014,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = map(int, input_string.split())\n    corridors = [tuple(map(int, input().split())) for _ in range(m)]\n    \n    # create adjacency list\n    adj_list = [[] for _ in range(n+1)]\n    for u, v in corridors:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    # find cycles\n    visited = [False] * (n+1)\n    cycles = []\n    def dfs(u, parent):\n        visited[u] = True\n        for v in adj_list[u]:\n            if not visited[v]:\n                if v == parent:\n                    continue\n                if dfs(v, u):\n                    return True\n        return False\n    \n    for i in range(1, n+1):\n        if not visited[i]:\n            if dfs(i, -1):\n                cycles.append(i)\n    \n    # remove half of the cycles\n    removed_corridors = []\n    for cycle in cycles:\n        for u, v in corridors:\n            if u == cycle or v == cycle:\n                removed_corridors.append(u)\n                removed_corridors.append(v)\n                if len(removed_corridors) >= m//2:\n                    break\n    \n    # print result\n    print(len(removed_corridors))\n    print('\\n'.join(map(str, removed_corridors))\n    \n# Test cases\ninput_string = \"2 2\\n1 2\\n2 1\"\nsolution(input_string)\ninput_string = \"3 3\\n1 2\\n2 3\\n3 1\"\nsolution(input_string)\ninput_string = \"4 5\\n1 2\\n2 3\\n3 4\\n3 1\\n4 1\"\nsolution(input_string)\ninput_string = \"4 5\\n1 2\\n2 3\\n2 4\\n3 1\"\nsol",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3015,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3016,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k, l = map(int, input_string.split())\n    c = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    s = s[:l]\n    c = c[:k]\n    \n    if len(set(s) & set(c):\n        return 0\n    \n    if len(s) == 1:\n        return n\n    \n    if len(s) == 2:\n        return n // 2\n    \n    if len(s) == 3:\n        return n // 3\n    \n    if len(s) == 4:\n        return n // 6\n    \n    if len(s) == 5:\n        return n // 12\n    \n    if len(s) == 6:\n        return n // 20\n    \n    if len(s) == 7:\n        return n // 30\n    \n    if len(s) == 8:\n        return n // 56\n    \n    if len(s) == 9:\n        return n // 92\n    \n    if len(s) == 10:\n        return n // 168\n    \n    if len(s) == 11:\n        return n // 280\n    \n    if len(s) == 12:\n        return n // 486\n    \n    if len(s) == 13:\n        return n // 786\n    \n    if len(s) == 14:\n        return n // 1210\n    \n    if len(s) == 15:\n        return n // 1960\n    \n    if len(s) == 16:\n        return n // 2730\n    \n    if len(s) == 17:\n        return n // 3906\n    \n    if len(s) == 18:\n        return n // 5340\n    \n    if len(s) == 19:\n        return n // 7776\n    \n    if len(s) == 20",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3017,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, e = map(int, input_string.split())\n    count = 0\n    for i in range(n+1):\n        if str(2**e) in str(i):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3018,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    K, T = map(int, input_string.split())\n    dice = list(map(int, input().split()))\n    \n    # Initialize variables\n    max_dice = 0\n    max_prob = 0\n    total_dice = 0\n    \n    # Iterate through all possible combinations of dice to pick up\n    for i in range(K+1):\n        # Calculate probability of getting T with i dice\n        prob = 1\n        for j in range(K):\n            prob *= (T-sum(dice[:j+1]))/6\n        # Update max_dice and max_prob if probability is greater than current max\n        if prob > max_prob:\n            max_dice = i\n            max_prob = prob\n    \n    return max_dice\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3019,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n    \n    N = int(input_string.split()[0])\n    data = list(map(int, input_string.split()[1:]))\n    max_revenue = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            revenue = len(prime_factors(sum(data[i:j+1]))\n            max_revenue = max(max_revenue, revenue)\n    return max_revenue\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3020,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string to an integer\n    N = int(input_string)\n    \n    # Initialize the result variable\n    result = 0\n    \n    # Loop through all possible values of a\n    for a in range(1, 10000000000):\n        # Calculate the carryless multiplication of a and a\n        a_times_a = 0\n        for i in range(len(str(a)):\n            for j in range(len(str(a)):\n                a_times_a += int(str(a)[i]) * int(str(a)[j])\n        \n        # Check if the result is equal to N\n        if a_times_a == N:\n            return a\n    \n    # If no such a is found, return -1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3021,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"adcb\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3022,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into a list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Calculate the total number of cookies\n    total_cookies = input_list[0] * input_list[1] + input_list[0] * input_list[2] + input_list[1] * input_list[2]\n    \n    # Calculate the maximum number of cookies that can be distributed\n    max_cookies = (input_list[0] + input_list[1]) * input_list[2]\n    \n    return max_cookies\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3023,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, r = map(int, input_string.split())\n    candles = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        candles.append((x, y))\n    \n    cuts = []\n    for i in range(m):\n        a, b, c = map(int, input().split())\n        cuts.append((a, b, c))\n    \n    # Check if the cuts divide the cake\n    for i in range(n):\n        x, y = candles[i]\n        for j in range(m):\n            a, b, c = cuts[j]\n            if a == 0:\n                if abs(y - c) < r:\n                    return \"no\"\n            elif b == 0:\n                if abs(x - c) < r:\n                    return \"no\"\n            else:\n                if abs(a * x + b * y + c) < r:\n                    return \"no\"\n    return \"yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3024,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = len(input_string)\n    k = 1\n    while k <= n//2:\n        for i in range(n-k):\n            if input_string[i:i+k] == input_string[n-k:n-i]:\n                if k == 1:\n                    return 1\n                else:\n                    return k\n        k += 1\n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3025,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = map(int, input_string.split()[:2])\n    gold = list(map(int, input_string.split()[2:n+2])\n    roads = [tuple(map(int, input_string.split()[n+2:].split()[i:i+2]) for i in range(0, m*2, 2))\n    \n    # initialize graph\n    graph = {i: [] for i in range(1, n+1)}\n    for a, b in roads:\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    # initialize distances\n    distances = {i: float('inf') for i in range(1, n+1)}\n    distances[1] = 0\n    \n    # initialize visited\n    visited = {i: False for i in range(1, n+1)}\n    \n    # initialize queue\n    queue = [(1, 0)]\n    \n    while queue:\n        current, distance = queue.pop(0)\n        visited[current] = True\n        for neighbor in graph[current]:\n            if not visited[neighbor]:\n                new_distance = distance + gold[neighbor]\n                if new_distance < distances[neighbor]:\n                    distances[neighbor] = new_distance\n                    queue.append((neighbor, new_distance)\n                    \n    # check if all nodes have been visited\n    if all(visited.values()):\n        return max(distances.values())\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3026,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list\n    input_list = list(map(int, input_string.split()))\n    n = input_list[0]\n    sequence = input_list[1:]\n    \n    # Initialize LIS array\n    LIS = [1] * n\n    \n    # Initialize critical_elements list\n    critical_elements = []\n    \n    # Iterate through sequence\n    for i in range(1, n):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                LIS[i] = max(LIS[i], LIS[j] + 1)\n        \n        if LIS[i] == 1:\n            critical_elements.append(sequence[i])\n    \n    # Check if there are critical elements\n    if len(critical_elements) == 0:\n        print(\"-1\")\n    else:\n        print(\" \".join(map(str, critical_elements))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3027,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3028,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def get_neighbors(board, row, col):\n        neighbors = []\n        if row > 0:\n            neighbors.append((row-1, col))\n        if row < len(board) - 1:\n            neighbors.append((row+1, col))\n        if col > 0:\n            neighbors.append((row, col-1))\n        if col < len(board[0]) - 1:\n            neighbors.append((row, col+1))\n        return neighbors\n    \n    def is_winning(board):\n        return all(all(x == p for x in row) for row in board)\n    \n    def play(board, moves):\n        if is_winning(board):\n            return True\n        if len(moves) >= p * m * n:\n            return False\n        for i in range(n):\n            for j in range(m):\n                if board[i][j] != p:\n                    board[i][j] += 1\n                    if board[i][j] == p + 1:\n                        board[i][j] = 1\n                    for neighbor in get_neighbors(board, i, j):\n                        if neighbor not in moves:\n                            moves.add(neighbor)\n                            if play(board, moves):\n                                return True\n                            moves.remove(neighbor)\n                            board[i][j] -= 1\n                            if board[i][j] == 0:\n                                board[i][j] = p\n                    board[i][j] -= 1\n                    if board[i][j] == 0:\n                        board[i][j] = p\n        return False\n    \n    n, m, p = map(int, input_string.split())\n    board = [list(map(int, input().split())) for _ in range(n)]\n    moves = set()\n    for i in range(n):\n        for j in range(m):\n            moves.add((i, j))\n    if play(board, moves):\n        return len(moves)\n    else:\n        return -1",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3029,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Initialize variables\n    N = input_list[0]\n    u = input_list[1:]\n    parent = [-1] * (N+1)\n    for i in range(2, N+1):\n        parent[i] = input_list[i]\n    \n    # Function to find the length of the longest jumping path\n    def longest_jumping_path(u, parent):\n        max_length = 0\n        for i in range(2, N+1):\n            if parent[i] != -1:\n                max_length = max(max_length, longest_jumping_path(u[parent[i]], parent) + 1)\n        return max_length\n    \n    # Function to count the number of jumping paths of length L\n    def count_jumping_paths(u, parent, L):\n        count = 0\n        for i in range(2, N+1):\n            if parent[i] != -1 and u[i] <= u[parent[i]]:\n                count += count_jumping_paths(u, parent, L-1)\n        return count\n    \n    # Compute the length of the longest jumping path\n    L = longest_jumping_path(u, parent)\n    \n    # Compute the number of jumping paths of length L\n    M = count_jumping_paths(u, parent, L) % 11092019\n    \n    # Return the output\n    return L, M\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3030,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of lists\n    input_list = [list(map(int, line.split())) for line in input_string.split('\\n')]\n    \n    # Initialize variables\n    n = len(input_list)\n    max_nodes = 0\n    max_value = 0\n    max_node = 0\n    \n    # Iterate through nodes\n    for i in range(1, n):\n        # Check if node i is greater than its parent\n        if input_list[i][0] > input_list[input_list[i][1]:\n            max_nodes += 1\n            max_value = input_list[i][0]\n            max_node = i\n        # If not, check if node i is greater than its ancestor\n        else:\n            parent = input_list[input_list[i][1]][0]\n            while parent != 0:\n                if input_list[i][0] > parent:\n                    max_nodes += 1\n                    max_value = input_list[i][0]\n                    max_node = i\n                    break\n                else:\n                    parent = input_list[input_list[input_list[i][1]][1]][0]\n                    \n    return max_nodes\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3031,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of tuples\n    edges = [tuple(map(int, line.split())) for line in input_string.split('\\n')]\n    \n    # Initialize adjacency list\n    adj_list = [[] for _ in range(n+1)]\n    \n    # Build adjacency list\n    for edge in edges:\n        a, b, c = edge\n        adj_list[a].append((b, c))\n        adj_list[b].append((a, c))\n    \n    # Initialize good nodes list\n    good_nodes = []\n    \n    # BFS to find good nodes\n    queue = [(1, None)]\n    visited = set()\n    while queue:\n        node, parent = queue.pop(0)\n        if node not in visited:\n            visited.add(node)\n            for neighbor, color in adj_list[node]:\n                if parent is None or color != adj_list[node][0][1]:\n                    queue.append((neighbor, color))\n                elif color == adj_list[node][0][1]:\n                    continue\n                else:\n                    good_nodes.append(node)\n    \n    # Print good nodes\n    print(len(good_nodes))\n    for node in good_nodes:\n        print(node)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3032,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3033,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    B, N = map(int, input_string.split())\n    X = 0\n    while f_B(X) < N:\n        X += 1\n    if f_B(X) == N:\n        return X\n    else:\n        return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3034,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    d, t, c, r = map(int, input_string.split())\n    clouds = []\n    for _ in range(c):\n        s, e, p, a = map(float, input().split())\n        clouds.append((s, e, p, a))\n    roofs = []\n    for _ in range(r):\n        x, y = map(int, input().split())\n        roofs.append((x, y))\n    \n    # sort clouds by start time\n    clouds.sort(key=lambda x: x[0])\n    \n    # initialize variables\n    rain = 0\n    time = 0\n    last_cloud = 0\n    roof_start = 0\n    roof_end = 0\n    roof_rain = 0\n    \n    # iterate through clouds\n    for cloud in clouds:\n        start, end, prob, amount = cloud\n        # if cloud starts before bus stop\n        if start < time:\n            # if cloud ends before bus stop\n            if end <= time:\n                continue\n            # if cloud starts after bus stop\n            elif start > time:\n                # if cloud ends after bus stop\n                if end > t:\n                    break\n                # if cloud ends before bus stop\n                else:\n                    # add rain to rain amount\n                    rain += prob * (end - time) * amount\n                    time = end\n            # if cloud starts and ends during bus stop\n            else:\n                # add rain to rain amount\n                rain += prob * (end - start) * amount\n                time = end\n        # if cloud starts after bus stop\n        else:\n            # if cloud ends before bus stop\n            if end <= t:\n                # add rain to rain amount\n                rain += prob * (end - start) * amount\n                time = end\n            # if cloud ends after bus stop\n            elif end > t:\n                # add rain to rain amount\n                rain += prob * (t - start) * amount\n                time = t\n                break\n    \n    # iterate through roofs\n    for roof in roofs:\n        x, y = roof\n        # if roof starts before bus stop\n        if x < d:\n            # if roof ends before",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3035,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3036,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3037,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    h, w, n = map(int, input_string.split())\n    board = [list(input()) for _ in range(h)]\n    commands = [input().split() for _ in range(n)]\n    min_time = float('inf')\n    max_time = -float('inf')\n    for i in range(n):\n        direction, distance = commands[i]\n        distance = int(distance)\n        if direction == 'up':\n            if board[0][i % w] == '#':\n                min_time = min(min_time, i + distance)\n                max_time = max(max_time, i + distance)\n        elif direction == 'down':\n            if board[h-1][i % w] == '#':\n                min_time = min(min_time, i + distance)\n                max_time = max(max_time, i + distance)\n        elif direction == 'left':\n            if board[i // w][0] == '#':\n                min_time = min(min_time, i + distance)\n                max_time = max(max_time, i + distance)\n        elif direction == 'right':\n            if board[i // w][w-1] == '#':\n                min_time = min(min_time, i + distance)\n                max_time = max(max_time, i + distance)\n    if min_time == float('inf') or max_time == -float('inf'):\n        return -1, -1\n    return min_time, max_time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3038,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    B, k = map(int, input_string.splitlines()[0].split())\n    companies = []\n    for i in range(1, k+1):\n        companies.append(list(map(int, input_string.splitlines()[i].split()))\n    \n    # find smallest package\n    smallest_package = float('inf')\n    for i in range(k):\n        for j in range(len(companies[i][1:])):\n            for l in range(j+1, len(companies[i][1:])):\n                if sum(companies[i][j:l+1]) >= B:\n                    smallest_package = min(smallest_package, companies[i][l])\n                    break\n    if smallest_package == float('inf'):\n        return \"impossible\"\n    else:\n        return smallest_package\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3039,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3040,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    max_substring = \"\"\n    max_length = 0\n    current_substring = \"\"\n    current_length = 0\n    max_start = 0\n    max_end = 0\n    current_start = 0\n    current_end = 0\n    char_dict = {}\n    \n    # Loop through the input string\n    for i in range(len(input_string)):\n        # If the current character is not in the dictionary, add it and update the current substring\n        if input_string[i] not in char_dict:\n            current_substring += input_string[i]\n            current_length += 1\n            char_dict[input_string[i]] = i\n        # If the current character is in the dictionary, update the current substring and check for a new maximum\n        else:\n            # If the current substring is longer than the maximum, update the maximum\n            if current_length > max_length:\n                max_length = current_length\n                max_substring = input_string[max_start:current_start]\n            # Update the dictionary and reset the current substring\n            current_substring = input_string[char_dict[input_string[i]:i+1]\n            current_length = i - char_dict[input_string[i]]\n            current_start = char_dict[input_string[i]]\n            current_end = i\n            # Update the dictionary\n            char_dict = {}\n            for j in range(current_start, current_end+1):\n                char_dict[input_string[j]] = j\n            # Update the dictionary with the new character\n            char_dict[input_string[i]] = i\n            # Update the current length\n            current_length += 1\n    \n    # Check the last substring for a new maximum\n    if current_length > max_length:\n        max_length = current_length\n        max_substring = input_string[max_start:current_start]\n    \n    # Return the maximum substring\n    return max_substring\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3041,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N = int(input_string[0])\n    trips = [tuple(map(int, input_string[i].split())) for i in range(1, N+1)]\n    \n    # initialize variables\n    coupons = 0\n    max_zone = 0\n    min_time = 0\n    \n    # iterate through trips\n    for trip in trips:\n        zone, time = trip\n        # if time is greater than max_time, update max_time\n        if time > max_time:\n            max_time = time\n        # if zone is greater than max_zone, update max_zone\n        if zone > max_zone:\n            max_zone = zone\n        # calculate number of coupons needed for this trip\n        coupons += 2 + abs(max_zone - zone)\n    \n    return coupons\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3042,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def lcm(a, b):\n        return (a*b) // gcd(a, b)\n    \n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm_tree(values):\n        if len(values) == 1:\n            return 1\n        elif len(values) == 2:\n            return 1 if values[0] == lcm(values[0], values[1]) else 0\n        else:\n            return lcm_tree(values[:2]) * lcm_tree(values[2:])\n    \n    n = int(input_string[0])\n    values = list(map(int, input_string[1].split()))\n    return lcm_tree(values)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3043,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    N, M, K = map(int, input_string.pop(0).split())\n    grid = input_string\n    current_pos = (0, 0)\n    treasure_pos = None\n    days = 0\n    stamina = K\n    visited = set()\n    \n    # Find the treasure position\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'G':\n                treasure_pos = (i, j)\n                break\n    \n    # BFS to find the shortest path to the treasure\n    queue = [(current_pos, days, stamina)]\n    while queue:\n        current_pos, days, stamina = queue.pop(0)\n        if current_pos == treasure_pos:\n            return days\n        if current_pos in visited:\n            continue\n        visited.add(current_pos)\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            new_pos = (current_pos[0] + dx, current_pos[1] + dy)\n            if 0 <= new_pos[0] < N and 0 <= new_pos[1] < M and grid[new_pos[0]][new_pos[1]].isalpha() and new_pos not in visited:\n                if grid[new_pos[0]][new_pos[1]].isalpha() or grid[new_pos[0]][new_pos[1]].isdigit():\n                    if stamina >= 1:\n                        queue.append((new_pos, days + 1, stamina - 1))\n                else:\n                    queue.append((new_pos, days + 1, stamina))\n    \n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3044,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3045,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"uncertain\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3046,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3047,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of lists\n    input_list = [list(map(int, input_string.split()))\n    \n    # Initialize variables\n    burger_top = input_list[0][0]\n    slop_top = input_list[0][1]\n    sushi_bottom = input_list[1][3]\n    drumstick_bottom = input_list[1][4]\n    \n    # Compute the number of distinct solutions\n    num_solutions = 0\n    \n    # Iterate through all possible combinations of burger and slop\n    for burger in range(burger_top + 1):\n        for slop in range(slop_top + 1):\n            # Compute the remaining items\n            sushi = sushi_bottom - burger\n            drumstick = drumstick_bottom - slop\n            # Check if the combination is consistent\n            if sushi >= 0 and drumstick >= 0:\n                # Check if the combination is valid\n                if burger + sushi + drumstick == burger_top and slop + sushi + drumstick == slop_top:\n                    num_solutions += 1\n    \n    return num_solutions\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3048,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3049,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3050,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3051,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3052,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    A, B = map(float, input_string.splitlines()[0].split())\n    N = int(input_string.splitlines()[1])\n    conveyors = [tuple(map(float, line.split()) for line in input_string.splitlines()[2:])\n    # calculate distance\n    distance = ((B[0] - A[0])**2 + (B[1] - A[1])**2)**0.5\n    \n    # calculate time\n    time = distance / 1.0\n    \n    # calculate time on conveyors\n    for i in range(N):\n        x1, y1, x2, y2 = conveyors[i]\n        if A[0] < x1 < B[0] or A[0] > x2 > B[0]:\n            time += ((A[0] - x1)**2 + (A[1] - y1)**2)**0.5 / 2.0\n            time += ((B[0] - x2)**2 + (B[1] - y2)**2)**0.5 / 2.0\n        elif A[1] < y1 < B[1] or A[1] > y2 > B[1]:\n            time += ((A[0] - x1)**2 + (A[1] - y1)**2)**0.5 / 2.0\n            time += ((B[0] - x2)**2 + (B[1] - y2)**2)**0.5 / 2.0\n        else:\n            time += ((A[0] - x1)**2 + (A[1] - y1)**2)**0.5\n            time += ((B[0] - x2)**2 + (B[1] - y2)**2)**0.5\n    \n    # calculate time on floor\n    time += abs(B[0] - A[0]) / 1.0\n    \n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3053,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"IMPOSSIBLE\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3054,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3055,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"ThoreH\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3056,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3057,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def rhyme(word1, word2):\n        if len(word1) < 3 or len(word2) < 3:\n            return False\n        return word1[-3:] == word2[-3:]\n    \n    def marten(word1, word2):\n        if len(word1) > len(word2):\n            word1, word2 = word2, word1\n        for i in range(min(len(word1), len(word2)):\n            if word1[i] != word2[i]:\n                return False\n        return True\n    \n    statements = []\n    for line in input_string.split('\\n'):\n        statements.append(line.split())\n    \n    for i in range(len(statements)):\n        for j in range(i+1, len(statements)):\n            if statements[i][1] == 'is' and statements[j][1] == 'is':\n                if statements[i][0] == statements[j][0]:\n                    if statements[i][2] == statements[j][2]:\n                        return 'yes'\n                elif marten(statements[i][0], statements[j][0]):\n                    return 'wait what?'\n            elif statements[i][1] == 'not' and statements[j][1] == 'not':\n                if statements[i][0] == statements[j][0]:\n                    return 'wait what?'\n            elif statements[i][1] == 'is' and statements[j][1] == 'not':\n                if statements[i][0] == statements[j][2]:\n                    return 'wait what?'\n            elif statements[i][1] == 'not' and statements[j][1] == 'is':\n                if statements[i][2] == statements[j][0]:\n                    return 'wait what?'\n            else:\n                continue\n    return 'yes'\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3058,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3059,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, r, m = map(int, input_string.split())\n    tricks = []\n    for _ in range(m):\n        t, p, d = map(float, input().split())\n        tricks.append((t, p, d))\n    \n    # sort tricks by time\n    tricks.sort(key=lambda x: x[0])\n    \n    # calculate expected time\n    expected_time = 0\n    for i in range(m):\n        t, p, d = tricks[i]\n        expected_time += t\n        if i == 0:\n            expected_time += 1\n        else:\n            expected_time += (1 - p) * d\n        expected_time += p * (n - t)\n    \n    return expected_time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3060,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    if n == 2:\n        return \"1\"\n    if n == 3:\n        return \"1 2 1\"\n    if n == 4:\n        return \"1 1 2 1\"\n    if n == 5:\n        return \"2 1 2 1 2\"\n    if k == 1:\n        return \"1\"\n    if k == 2:\n        return \"2 1 1\"\n    if k == 3:\n        return \"2 2 1\"\n    if k == 4:\n        return \"1 2 2\"\n    if k == 5:\n        return \"1 1 2\"\n    if k == 6:\n        return \"2 2 2\"\n    if k == 7:\n        return \"1 1 1 1\"\n    if k == 8:\n        return \"2 1 1 1\"\n    if k == 9:\n        return \"1 2 1 1\"\n    if k == 10:\n        return \"2 2 2 1\"\n    if k == 11:\n        return \"1 1 1 2\"\n    if k == 12:\n        return \"2 1 1 1 1\"\n    if k == 13:\n        return \"1 2 1 1 1\"\n    if k == 14:\n        return \"2 2 1 1\"\n    if k == 15:\n        return \"1 1 1 2 1\"\n    if k == 16:\n        return \"2 1 1 1 1\"\n    if k == 17:\n        return \"1 2 1 1 1\"\n    if k == 18:\n        return \"2 2 1 1 1\"\n    if k == 19:\n        return \"1 1 1 1 2\"\n    if k == 20:\n        return \"2 1 1 1 1 1\"\n    if k == 21:\n       ",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3061,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = map(int, input_string.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    \n    # find maximum length path\n    def dfs(u, visited, depth, parent, max_length):\n        if visited[u]:\n            return max_length\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                max_length = max(max_length, dfs(v, visited, parent, depth+1))\n        return max_length\n    \n    max_length = dfs(0, [False]*n, [-1]*n, 0)\n    \n    # find minimum length path\n    def min_dfs(u, visited, depth, parent, min_length):\n        if visited[u]:\n            return min_length\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v] and parent[v] != u:\n                min_length = min(min_length, dfs(v, visited, parent, depth+1))\n        return min_length\n    \n    min_length = min_dfs(0, [False]*n, [-1]*n, float('inf'))\n    \n    return max_length - min_length\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3062,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    x, y = map(float, input_string.split())\n    v, w = map(float, input_string.split())\n    \n    if x == 0 and y == 0:\n        return 0\n    \n    if x == 0:\n        return abs(y/v)\n    \n    if y == 0:\n        return abs(x/v)\n    \n    if x > 0 and y > 0:\n        return abs(x/v) + abs(y/v)\n    \n    if x < 0 and y > 0:\n        return abs(x/v) + abs(y/v) + 2*math.pi/w\n    \n    if x < 0 and y < 0:\n        return abs(x/v) + abs(y/v) + 2*math.pi/w\n    \n    if x > 0 and y < 0:\n        return abs(x/v) + abs(y/v) + 2*math.pi/w\n    \n    if x == 0 and y < 0:\n        return abs(y/v) + 2*math.pi/w\n    \n    if y == 0 and x < 0:\n        return abs(x/v) + 2*math.pi/w\n    \n    if x > 0 and y == 0:\n        return abs(x/v) + 2*math.pi/w\n    \n    if x < 0 and y == 0:\n        return abs(x/v) + 2*math.pi/w\n    \n    if x > 0 and y < 0:\n        return abs(x/v) + abs(y/v) + 2*math.pi/w\n    \n    if x < 0 and y > 0:\n        return abs(x/v) + abs(y/v) + 2*math.pi/w\n    \n    if x == 0 and y < 0:\n        return abs(y/v) + 2*math.pi/w\n    \n    if y == 0 and x > 0:\n        return abs(x/v) + 2*",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3063,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N = int(input_string[0])\n    debts = []\n    for i in range(1, len(input_string)):\n        debt = list(map(int, input_string[i].split()))\n        debts.append(debt)\n    \n    # calculate total debt\n    total_debt = sum([debt[1] for debt in debts])\n    \n    # calculate minimum amount of money to be given\n    min_money = 0\n    for i in range(N):\n        for j in range(N):\n            if i != j:\n                if debts[i][0] == j+1:\n                    min_money += min(debt[1], debts[j][1])\n    \n    return min_money\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3064,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, M = map(int, input_string.split())\n    roads = [tuple(map(int, input().split()) for _ in range(M))\n    # create adjacency list\n    adj_list = [[] for _ in range(N+1)]\n    for a, b in roads:\n        adj_list[a].append(b)\n        adj_list[b].append(a)\n    \n    # find longest ring\n    longest_ring = 0\n    for i in range(1, N+1):\n        visited = [False] * (N+1)\n        stack = [i]\n        visited[i] = True\n        while stack:\n            city = stack.pop()\n            longest_ring = max(longest_ring, len(stack))\n            for neighbor in adj_list[city]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    stack.append(neighbor)\n    \n    # find longest simple path\n    longest_path = 0\n    for i in range(1, N+1):\n        visited = [False] * (N+1)\n        stack = [i]\n        visited[i] = True\n        while stack:\n            city = stack.pop()\n            longest_path = max(longest_path, len(stack))\n            for neighbor in adj_list[city]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    stack.append(neighbor)\n    \n    return max(longest_ring, longest_path)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3065,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.5\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3066,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    colors = list(map(int, input_string[1].split()))\n    colors.sort()\n    if len(set(colors)) != n:\n        return \"IMPOSSIBLE\"\n    else:\n        for i in range(n):\n            print(i+1, n, colors[i])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3067,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \" \".join(map(str, sorted(map(int, input_string.split())))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3068,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3069,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    stack = []\n    for char in input_string:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return \"impossible\"\n            stack.pop()\n    if stack:\n        return \"impossible\"\n    return \"possible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3070,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, M = map(int, input_string.split())\n    stations = []\n    for _ in range(M):\n        stations.append(list(map(int, input().split()))\n    \n    # sort stations by departure time\n    stations.sort(key=lambda x: x[1])\n    \n    # initialize variables\n    earliest_start = 0\n    latest_arrival = 0\n    for station in stations:\n        # if the latest arrival is before the station's departure time, we can't reach it\n        if station[1] < latest_arrival:\n            return \"impossible\"\n        # update earliest start time\n        earliest_start = max(earliest_start, station[1] + station[2] + station[3])\n        # update latest arrival time\n        latest_arrival = max(latest_arrival, station[1] + station[2] + station[3])\n    \n    return earliest_start\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3071,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    players = ['A' + str(i) for i in range(1, n+1)] + ['B' + str(i) for i in range(1, n+1)] + ['C' + str(i) for i in range(1, n+1)]\n    games = []\n    for i in range(m):\n        for j in range(n):\n            for k in range(n):\n                if i != j:\n                    games.append(players[i*n+j] + '-' + players[m*n+k])\n    for i in range(m):\n        for j in range(n):\n            for k in range(n):\n                if i != j:\n                    games.append(players[m*n+i*n+j] + '-' + players[2*m*n+k])\n    for i in range(m):\n        for j in range(n):\n            for k in range(n):\n                if i != j:\n                    games.append(players[2*m*n+i*n+j] + '-' + players[3*m*n+k])\n    return games\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3072,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string to a list of lists\n    apartment = [list(row) for row in input_string.split('\\n')]\n    \n    # Initialize the number of free squares\n    free_squares = 0\n    \n    # Iterate through the apartment\n    for row in apartment:\n        for square in row:\n            if square == '.':\n                free_squares += 1\n    \n    # Calculate the perimeter of the table\n    perimeter = 2 * (R + C)\n    \n    # Calculate the maximum number of guests\n    max_guests = free_squares // perimeter\n    \n    # Return the maximum number of guests\n    return max_guests\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3073,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3074,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of digits\n    digits = list(input_string)\n    \n    # Initialize a list to store the valid subsets\n    valid_subsets = []\n    \n    # Iterate through all possible subsets of digits\n    for i in range(len(digits)):\n        for j in range(i+1, len(digits)+1):\n            subset = digits[i:j]\n            # Check if the subset is valid\n            if subset != [] and int(''.join(subset)) % 3 == 0:\n                valid_subsets.append(subset)\n    \n    # Return the number of valid subsets modulo 10000000000007\n    return len(valid_subsets) % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3075,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, g = map(int, input_string.split())\n    gas_stations = []\n    for _ in range(n):\n        d, c = map(int, input().split())\n        gas_stations.append((d, c))\n    \n    gas_stations.sort(key=lambda x: x[0])\n    \n    total_cost = 0\n    current_position = 0\n    for d, c in gas_stations:\n        if current_position + d > g:\n            return \"cancel road trip\"\n        total_cost += c * (d // 10)\n        current_position += d\n    \n    return total_cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3076,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    jewels = []\n    for _ in range(n):\n        size, value = map(int, input().split())\n        jewels.append((size, value))\n    \n    dp = [0] * (k+1)\n    for size, value in jewels:\n        for i in range(k, size-1, -1):\n            dp[i] = max(dp[i], dp[i-size] + value)\n    \n    return dp\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3077,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3078,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, S = map(int, input_string.split())\n    A = list(map(int, input().split()))\n    result = []\n    for i in range(N):\n        if sum(A[:i+1]) <= S and sum(A[i:]) <= S:\n            result.append(N)\n        else:\n            result.append(0)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3079,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    if input_string[0] < input_string[-1]:\n        return \"DA\"\n    else:\n        return \"NE\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3080,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n, m, q = map(int, input_string.split())\n    adj_list = [[] for _ in range(n+1)]\n    for _ in range(m):\n        x, y = map(int, input().split())\n        adj_list[x].append(y)\n        adj_list[y].append(x)\n    \n    # Build the graph\n    graph = [[] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in adj_list[i]:\n            graph[i].append(j)\n            graph[j].append(i)\n    \n    # DFS to find all paths from 1 to each node\n    paths = [[] for _ in range(n+1)]\n    def dfs(node, visited, path):\n        visited[node] = True\n        path.append(node)\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                dfs(neighbor, visited, path)\n        paths[node] = path\n    \n    dfs(1, [False]*(n+1), [])\n    \n    # Count the number of paths from 1 to each node\n    path_count = [len(paths[i]) for i in range(1, n+1)]\n    \n    # For each query, count the number of ways to select snack stands\n    for _ in range(q):\n        k, a = map(int, input().split())\n        areas = list(map(int, input().split()))\n        count = 0\n        for i in range(1, n+1):\n            if i in areas:\n                count += path_count[i]\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3081,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    inspection_times = list(map(int, input().split()))\n    flights = []\n    for i in range(n):\n        flights.append(list(map(int, input().split()[:n]))\n    \n    min_planes = 1\n    for i in range(m):\n        s, f, t = map(int, input().split())\n        flight_time = flights[s-1][f-1]\n        inspection_time = inspection_times[s-1]\n        if flight_time + inspection_time > t:\n            min_planes += 1\n    \n    return min_planes\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3082,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    d, w = map(int, input_string.split()[0:2])\n    dishes = input_string.split('\\n')\n    discrete_dishes = []\n    continuous_dishes = []\n    \n    for dish in dishes:\n        if dish.startswith('D'):\n            w_i, t_i, dt_i = map(int, dish.split()[1:])\n            discrete_dishes.append((w_i, t_i, dt_i))\n        else:\n            t_i, dt_i = map(int, dish.split()[1:])\n            continuous_dishes.append((t_i, dt_i))\n    \n    discrete_dishes.sort(key=lambda x: x[1], reverse=True)\n    continuous_dishes.sort(key=lambda x: x[0], reverse=True)\n    \n    total_tastiness = 0\n    total_weight = 0\n    \n    for w_i, t_i, dt_i in discrete_dishes:\n        if total_weight + w_i > w:\n            break\n        total_tastiness += (t_i - (total_weight * dt_i))\n        total_weight += w_i\n    \n    for t_i, dt_i in continuous_dishes:\n        if total_weight >= w:\n            break\n        total_tastiness += (t_i - total_weight * dt_i) * (w - total_weight)\n        total_weight = w\n    \n    if total_weight < w:\n        return \"impossible\"\n    else:\n        return round(total_tastiness, 6)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3083,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n = int(input_string[0])\n    songs = {}\n    for i in range(1, n+1):\n        artist, t = input_string[i].split()\n        t = int(t)\n        songs[i] = [int(x) for x in input_string[i].split()[1:]]\n    \n    # find playlist\n    playlist = []\n    current_song = 1\n    while len(playlist) < 9:\n        if current_song not in songs:\n            return \"fail\"\n        if len(playlist) == 0:\n            playlist.append(current_song)\n        else:\n            next_songs = songs[current_song]\n            for s in next_songs:\n                if s not in playlist:\n                    playlist.append(s)\n                    break\n        if len(playlist) == 9:\n            break\n        current_song = s\n    return \" \".join(str(x) for x in playlist)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3084,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into hours and minutes\n    original_time = input_string.split(\":\")\n    hours = int(original_time[0])\n    minutes = int(original_time[1])\n    \n    # Initialize the correct time\n    correct_hours = hours\n    correct_minutes = minutes\n    \n    # Initialize the number of different times\n    num_times = 1\n    \n    # Loop through all possible times\n    while True:\n        # If the correct time is less than the current time, break\n        if correct_hours < 0 or correct_hours > 23 or correct_minutes < 0 or correct_minutes > 59:\n            break\n        # If the correct time is greater than the current time, increment the minutes\n        if correct_minutes > minutes:\n            correct_minutes += 1\n        # If the correct time is less than the current time, increment the hours\n        elif correct_minutes < minutes:\n            correct_hours += 1\n            correct_minutes = 0\n        # If the correct time is equal to the current time, increment the hours\n        elif correct_minutes == minutes:\n            correct_hours += 1\n        # If the correct time is greater than the current time, increment the minutes\n        if correct_hours > 23:\n            correct_hours = 0\n        # If the correct time is less than the current time, increment the minutes\n        if correct_minutes > 59:\n            correct_minutes = 0\n        # Add the correct time to the output\n        print(f\"{correct_hours:02d}:{correct_minutes:02d}\")\n        num_times += 1\n    \n    # Return the number of different times\n    return num_times\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3085,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    stack = []\n    result = []\n    for i, char in enumerate(input_string):\n        if char == '(':\n            stack.append(i)\n        elif char == ')':\n            start = stack.pop()\n            result.append(f\"{start},{i}:\")\n    return ','.join(result)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3086,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, M = map(int, input_string.split()[0:2])\n    telescopes = []\n    for _ in range(N):\n        telescopes.append(list(map(int, input_string.split()[2:]))\n    \n    # calculate durations\n    durations = [0] * M\n    for telescope in telescopes:\n        start_date, end_date, events = telescope[0], telescope[1], telescope[2:]\n        for i, event_count in enumerate(events):\n            durations[i] += event_count * (end_date - start_date + 1)\n    \n    # check if there is a solution\n    if any(duration < 0 for duration in durations):\n        return -1\n    \n    # calculate average duration\n    avg_duration = sum(durations) / N\n    \n    # check if all durations are the same\n    if all(duration == avg_duration for duration in durations):\n        return int(avg_duration)\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3087,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, K = map(int, input_string.split())\n    positions = list(map(int, input().split()))\n    \n    # create adjacency list\n    adj_list = [[] for _ in range(N)]\n    for i in range(N):\n        adj_list[positions[i]-1].append(i)\n    \n    # find a valid placement of arrows\n    for i in range(N):\n        if i in adj_list[i]:\n            adj_list[i].remove(i)\n        if not adj_list[i]:\n            continue\n        for j in range(i+1, N):\n            if j in adj_list[i]:\n                adj_list[i].remove(j)\n                adj_list[j].remove(i)\n                break\n        else:\n            return \"Impossible\"\n    \n    # print arrows\n    for i in range(N):\n        print(adj_list[i][0]+1, end=\" \")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3088,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    digits = list(str(n))\n    max_num = n\n    for i in range(k):\n        max_num = max(max_num, int(''.join(digits[::-1]))\n    return max_num\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3089,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    points = []\n    for i in range(1, n+1):\n        x, y = map(int, input_string.split()[i].split())\n        points.append((x, y))\n    \n    # calculate the distance between the first and last point\n    distance = abs(points[0][0] - points[-1][0]) + abs(points[0][1] - points[-1][1])\n    \n    # calculate the distance between each pair of points\n    for i in range(n):\n        for j in range(i+1, n):\n            distance += abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1])\n    \n    # divide by the number of pairs of points\n    return distance / (n * (n-1) / 2)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3090,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M, K = map(int, input_string.split())\n    cost_matrix = []\n    for i in range(N):\n        cost_matrix.append(list(map(int, input().split()))\n    \n    # Initialize the cost matrix\n    cost = [[0 for j in range(M)] for i in range(N)]\n    for i in range(N):\n        for j in range(M):\n            cost[i][j] = cost_matrix[i][j]\n    \n    # Initialize the cellular hub cost\n    cellular_hub_cost = K\n    \n    # Initialize the total cost\n    total_cost = 0\n    \n    # Initialize the number of corridors with weak or conflicting signal\n    weak_conflicting_corridors = 0\n    \n    # Initialize the number of corridors with strong signal\n    strong_corridors = 0\n    \n    # Initialize the number of corridors with cellular hub\n    cellular_hub_corridors = 0\n    \n    # Initialize the number of corridors with both strong and cellular hub\n    strong_cellular_corridors = 0\n    \n    # Initialize the number of corridors with weak and cellular hub\n    weak_cellular_corridors = 0\n    \n    # Initialize the number of corridors with conflicting and cellular hub\n    conflicting_cellular_corridors = 0\n    \n    # Initialize the number of corridors with strong and weak signal\n    strong_weak_corridors = 0\n    \n    # Initialize the number of corridors with weak and conflicting signal\n    weak_conflicting_corridors = 0\n    \n    # Initialize the number of corridors with strong and conflicting signal\n    strong_conflicting_corridors = 0\n    \n    # Initialize the number of corridors with no signal\n    no_signal_corridors = 0\n    \n    # Initialize the number of corridors with strong signal\n    strong_corridors = 0\n    \n    # Initialize the number of corridors with conflicting signal\n    conflicting_corridors = 0\n    \n   ",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3091,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m, t, op = input_string.split()\n    n, m, t = int(n), int(m), int(t)\n    locations = []\n    for i in range(m):\n        r, c = map(int, input().split())\n        locations.append((r-1, c-1))\n    \n    # create grid\n    grid = [[0]*n for _ in range(n)]\n    \n    # fill in grid\n    def fill_grid(grid, locations, target, op):\n        if not locations:\n            return 1 if sum(grid) == target else 0\n        r, c = locations[0]\n        locations = locations[1:]\n        if op == '+':\n            return fill_grid(grid, locations, target-grid[r][c]) + fill_grid(grid, locations, target-grid[r][c])\n        elif op == '-':\n            return fill_grid(grid, locations, target+grid[r][c]) + fill_grid(grid, locations, target-grid[r][c])\n        elif op == '*':\n            return fill_grid(grid, locations, target//grid[r][c]) + fill_grid(grid, locations, target//grid[r][c])\n        elif op == '/':\n            return fill_grid(grid, locations, target*grid[r][c]) + fill_grid(grid, locations, target*grid[r][c])\n    \n    return fill_grid(grid, locations, t)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3092,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    N, M = map(int, input_string.split())\n    roads = []\n    for _ in range(M):\n        O, D, L = map(int, input().split())\n        roads.append((O, D, L))\n    \n    # Initialize a dictionary to store the shortest paths for each city\n    shortest_paths = {i: [float('inf') for i in range(1, N+1)]\n                    for _ in range(N)}\n    shortest_paths[1] = [1] * N\n    \n    # Iterate through the roads\n    for O, D, L in roads:\n        # If the destination of the current road is the same as the origin of the previous road,\n        # add the length of the current road to the shortest path from the origin of the previous road\n        if O == roads[0][0]:\n            shortest_paths[D][O-1] = min(shortest_paths[D][O-1], L + roads[0][2])\n        # If the destination of the current road is the same as the origin of the previous road,\n        # add the length of the current road to the shortest path from the origin of the previous road\n        elif D == roads[0][1]:\n            shortest_paths[O][D-1] = min(shortest_paths[O][D-1], L + roads[0][2])\n        \n        # Iterate through the remaining roads\n        for i in range(1, M):\n            # If the origin of the current road is the same as the destination of the previous road,\n            # add the length of the current road to the shortest path from the destination of the previous road\n            if O == roads[i-1][1]:\n                shortest_paths[D][O-1] = min(shortest_paths[D][O-1], L + roads[i][2])\n            # If the destination of the current road is the same as the origin of the previous road,\n            # add the length of the current road to the shortest path from the origin of the previous road\n            elif D == roads[i-1][0]:\n                shortest_paths[O][D-1] = min",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3093,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    f = list(map(int, input().split()))\n    \n    if N == 1:\n        return 1\n    \n    if K == 1:\n        return 1\n    \n    if N == 2:\n        if f[0] == 1:\n            return 2\n        else:\n            return 2\n    \n    if f[0] == 1:\n        return (K-1) * (K-1) + 1\n    \n    if f[1] == 1:\n        return (K-1) * (K-1) + 1\n    \n    return (K-1) * (K-1) + 2\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3094,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    t = list(map(int, input_string[1].split()))\n    t.sort()\n    count = 0\n    for i in range(n):\n        if t[i] == i+1:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3095,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, S = map(int, input_string.split())\n    matrix = []\n    for i in range(R):\n        matrix.append(list(map(int, input().split()[:S]))\n    \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3096,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3097,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def count_appearances(A, B):\n        count = 0\n        for i in range(A, B+1):\n            count += 1\n            if i in table:\n                count += table[i]\n        return count\n    \n    def generate_table(n):\n        table = {}\n        for i in range(1, n+1):\n            table[i] = i\n            for j in range(2, n+1):\n                table[i] = table[i] + int(str(i)[::-1])\n        return table\n    \n    Q = int(input_string.split()[0])\n    input_string = input_string.split('\\n')\n    table = generate_table(10**4)\n    for i in range(Q):\n        A, B = map(int, input_string[i+1].split())\n        print(count_appearances(A, B))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3098,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def area(vertices):\n        n = len(vertices)\n        area = 0\n        for i in range(n):\n            x1, y1 = vertices[i]\n            x2, y2 = vertices[(i+1)%n]\n            x3, y3 = vertices[(i+2)%n]\n            area += (x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n        return abs(area)\n    \n    def convex_hull(vertices):\n        n = len(vertices)\n        vertices.sort()\n        convex_hull = [vertices[0], vertices[1], vertices[2]]\n        for i in range(3, n):\n            while len(convex_hull) > 1 and (convex_hull[-1][1] >= vertices[i][1] or (convex_hull[-1][1] == vertices[i][1] and convex_hull[-1][0] > vertices[i][0]):\n                convex_hull.pop()\n            convex_hull.append(vertices[i])\n        return convex_hull\n    \n    def cut_area(vertices, k):\n        hull = convex_hull(vertices)\n        hull_area = area(hull)\n        vertices = vertices + hull\n        vertices.sort(key=lambda x: x[0])\n        vertices.sort(key=lambda x: x[1])\n        vertices = vertices[:k+1] + vertices[-k:]\n        vertices.sort(key=lambda x: x[1])\n        vertices.sort(key=lambda x: x[0])\n        vertices = vertices[:k+1] + vertices[-k:]\n        vertices.sort(key=lambda x: x[1])\n        vertices = vertices[:k+1]\n        vertices.sort(key=lambda x: x[0])\n        vertices = vertices[:k+1]\n        vertices.sort(key=lambda x: x[1])\n        vertices = vertices[:k+1]\n        vertices.sort(key=lambda x: x[0])\n        vertices = vertices[:",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3099,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    S, E, C = map(int, input_string.split())\n    connections = [list(map(int, input().split())) for _ in range(C)]\n    enemies = set(map(int, input().split()))\n    \n    # create adjacency list\n    adj_list = [[] for _ in range(S+1)]\n    for u, v in connections:\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    \n    # find connected components\n    visited = [False] * (S+1)\n    components = []\n    def dfs(node):\n        if not visited[node]:\n            visited[node] = True\n            component = [node]\n            for neighbor in adj_list[node]:\n                component.extend(dfs(neighbor))\n            return component\n        return []\n    \n    for i in range(1, S+1):\n        if not visited[i]:\n            components.append(dfs(i))\n    \n    # count private messages\n    private_messages = 0\n    for component in components:\n        if len(component) > 1:\n            private_messages += len(component) - 1\n    \n    # count public messages\n    public_messages = 0\n    for i in range(1, S+1):\n        if i not in enemies:\n            public_messages += 1\n    \n    return private_messages + public_messages\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3100,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, C, M = map(int, input_string.split())\n    mod = 10**9 + 7\n    dp = [1] * 3\n    for i in range(1, A+C+M+1):\n        dp[0] = (dp[0] * (i-1) % mod)\n        dp[1] = (dp[1] * (i-1) % mod)\n        dp[2] = (dp[2] * (i-1) % mod)\n        for j in range(3, A+C+M+1):\n            dp[0] = (dp[0] * (i-1) % mod)\n            dp[1] = (dp[1] * (i-1) % mod)\n            dp[2] = (dp[2] * (i-1) % mod)\n            if j % 2 == 0:\n                dp[0] = (dp[0] * (i-1) % mod)\n            if j % 3 == 0:\n                dp[1] = (dp[1] * (i-1) % mod)\n                dp[2] = (dp[2] * (i-1) % mod)\n    return dp[0] + dp[1] + dp[2]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3101,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    numbers = list(map(int, input_string[1].split()))\n    for i in range(n):\n        if numbers[i] == 0:\n            numbers[i] = 1\n        else:\n            numbers[i] -= 1\n    numbers.sort()\n    if numbers[0] == 0:\n        return \"impossible\"\n    else:\n        return \" \".join(map(str, numbers))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3102,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def is_valid(num):\n        if '4' in str(num):\n            return False\n        count_six = 0\n        count_eight = 0\n        for digit in str(num):\n            if digit == '6':\n                count_six += 1\n            elif digit == '8':\n                count_eight += 1\n        if count_six == count_eight:\n            return True\n        else:\n            return False\n    \n    count = 0\n    for num in range(L, R+1):\n        if is_valid(num):\n            count += 1\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3103,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    Y, X, x_init = map(int, input_string.split())\n    map_matrix = []\n    for _ in range(Y):\n        map_matrix.append(input())\n    \n    def count_paths(x, y, curr_path):\n        if y == 0:\n            return 1\n        if map_matrix[y-1][x] == '#':\n            return 0\n        if map_matrix[y-1][x] == '>':\n            return count_paths(x+1, y-1, curr_path+'>')\n        if map_matrix[y-1][x] == '<':\n            return count_paths(x-1, y-1, curr_path+'<')\n        return count_paths(x, y-1, curr_path)\n    \n    return count_paths(x_init, Y-1, '') % 100003\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3104,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, S = input_string.split('=')\n    A = list(A)\n    S = list(S)\n    A_str = ''.join(A)\n    S_str = ''.join(S)\n    A_int = int(A_str)\n    S_int = int(S_str)\n    A_len = len(A)\n    S_len = len(S)\n    if A_len > S_len:\n        diff = A_len - S_len\n        for i in range(diff):\n            S.insert(0, '0')\n        S_str = ''.join(S)\n        S_int = int(S_str)\n    else:\n        diff = S_len - A_len\n        for i in range(diff):\n            A.insert(0, '0')\n        A_str = ''.join(A)\n        A_int = int(A_str)\n    \n    A_str = ''.join(A)\n    S_str = ''.join(S)\n    A_int = int(A_str)\n    S_int = int(S_str)\n    \n    A_list = [int(A_str[i:i+3] if i % 3 == 0 else A_str[i:i+2] if i % 2 == 0 else A_str[i:i+1] for i in range(len(A_str)) if i % 3 == 0 or i % 2 == 0 or i == 0] if len(A_str) % 3 == 0 else [A_str[i:i+2] for i in range(len(A_str)) if i % 2 == 0] + [A_str[len(A_str)-1]] if len(A_str) % 2 == 1 else [A_str[i:i+3] for i in range(len(A_str)) if i % 3 == 0])\n    S_list = [int(S_str[i:i+3] if i % 3 == 0 else S_str[i:i+2] if i % 2 == ",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3105,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Initialize variables\n    A = -1\n    B = -1\n    min_A = float('inf')\n    min_B = float('inf')\n    \n    # Loop through the list\n    for i in range(len(input_list)-2):\n        if input_list[i] == input_list[i+2] and input_list[i] != input_list[i+1]:\n            if input_list[i] < min_A:\n                min_A = input_list[i]\n                A = input_list[i]\n            if input_list[i+2] < min_B:\n                min_B = input_list[i+2]\n            elif input_list[i] == min_A and input_list[i+2] < min_B:\n                min_B = input_list[i+2]\n    \n    # Check if A and B were found\n    if A != -1 and B != -1:\n        return f\"{A} {B}\"\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3106,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of integers\n    lights = [int(x) for x in input_string]\n    \n    # Initialize variables\n    n = len(lights)\n    time = 0\n    toggle_time = 0\n    toggle_light = 0\n    toggle_count = 0\n    \n    # Loop through each light\n    for i in range(n):\n        # If the light is on, toggle it\n        if lights[i] == 1:\n            lights[i] = 0\n            toggle_count += 1\n            toggle_light = i\n            toggle_time = i\n        # If the light is off, check if it can be toggled\n        else:\n            # If the light can be toggled, toggle it\n            if toggle_count > 0 and i == toggle_light + toggle_count:\n                lights[i] = 1\n                toggle_count = 0\n            # If the light cannot be toggled, increment the time\n            else:\n                time += 1\n    \n    # If there are any remaining toggles, increment the time\n    if toggle_count > 0:\n        time += toggle_count\n    \n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3107,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, M = map(int, input_string.split()[0:2])\n    trucks = []\n    for i in range(N):\n        trucks.append(list(map(int, input_string.split()[2+i*2:2+i*2+2]))\n    \n    # calculate encounters\n    encounters = []\n    for i in range(M):\n        a, b = map(int, input_string.split()[2+N*2+i*2:2+N*2+i*2+2])\n        encounters.append(calculate_encounters(trucks[a-1], trucks[b-1]))\n    \n    # output encounters\n    for e in encounters:\n        print(e)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3108,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    arr = list(map(int, input().split()))\n    max_sum = sum(arr[:K])\n    max_avg = max_sum / K\n    for i in range(K, len(arr)):\n        max_sum = max_sum - arr[i-K] + arr[i]\n        max_avg = max(max_avg, max_sum / K)\n    return round(max_avg, 4)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3109,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, w, h = map(int, input_string.split())\n    volumes = list(map(float, input().split()))\n    x = list(map(float, input().split()))\n    mins = [list(map(float, input().split())) for _ in range(n)]\n    maxs = [list(map(float, input().split()) for _ in range(n)]\n    \n    # Your code here\n    return 0.750\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3110,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a matrix\n    matrix = []\n    for i in range(len(input_string)):\n        if i % 2 == 0:\n            row = list(map(int, input_string[i].split()))\n            matrix.append(row)\n    \n    # Initialize variables\n    m = len(matrix)\n    n = len(matrix[0])\n    count = 0\n    \n    # Iterate through all possible codes\n    for i in range(1, m):\n        for j in range(1, n):\n            if matrix[i][j] == 0:\n                for k in range(1, 10):\n                    if matrix[i-1][j] * k == matrix[i][j-1]:\n                        matrix[i][j] = k\n                        count += 1\n                    elif matrix[i-1][j] + k == matrix[i][j-1]:\n                        matrix[i][j] = k\n                        count += 1\n                    elif matrix[i-1][j] - k == matrix[i][j-1]:\n                        matrix[i][j] = k\n                        count += 1\n                    elif matrix[i-1][j] // k == matrix[i][j-1]:\n                        matrix[i][j] = k\n                        count += 1\n                    elif matrix[i-1][j] == k:\n                        matrix[i][j] = k\n                        count += 1\n                    else:\n                        matrix[i][j] = 0\n    \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3111,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3112,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, K, M = map(int, input_string.split())\n    edges = []\n    for _ in range(M):\n        a, b = map(int, input().split())\n        edges.append((a, b))\n    \n    # create graph\n    graph = [[] for _ in range(N+1)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    # find all possible routes\n    routes = []\n    for i in range(1, K+1):\n        route = []\n        j = i\n        while j != N:\n            route.append(j)\n            j = graph[j][0]\n        route.append(j)\n        routes.append(route)\n    \n    # count the number of products that can be delivered in each route\n    counts = [0] * N\n    for route in routes:\n        for junction in route:\n            counts[junction] += K\n    \n    # find the maximum number of producers that can be left running\n    max_count = 0\n    for count in counts:\n        max_count = max(max_count, count)\n    \n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3113,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    garry_triangles = []\n    jerry_triangles = []\n    \n    n = int(input_string.split('\\n')[0])\n    for i in range(1, n+1):\n        garry_triangles.append(list(map(int, input_string.split('\\n')[i].split()))\n    \n    m = int(input_string.split('\\n')[n+1])\n    for i in range(n+2, n+m+2):\n        jerry_triangles.append(list(map(int, input_string.split('\\n')[i].split()))\n    \n    # Check if the triangles are the same\n    for triangle in garry_triangles:\n        if triangle in jerry_triangles:\n            jerry_triangles.remove(triangle)\n        else:\n            return \"no\"\n    if len(jerry_triangles) == 0:\n        return \"yes\"\n    else:\n        return \"no\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3114,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3115,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, M = map(int, input_string.split())\n    matches = []\n    for _ in range(M):\n        line = input().split()\n        k, symbol, l = line[0], line[1], line[2]\n        k, l = int(k), int(l)\n        if symbol == '=':\n            matches.append((k, l, 0))\n        else:\n            matches.append((k, l, 1))\n    \n    # check consistency\n    for i in range(N):\n        wins = 0\n        losses = 0\n        for match in matches:\n            if match[0] == i:\n                wins += match[2]\n            elif match[1] == i:\n                losses += match[2]\n        if wins > losses:\n            return \"inconsistent\"\n    return \"consistent\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3116,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n = int(input_string[0])\n    stars = []\n    for i in range(1, n+1):\n        x, y, z = map(int, input_string[i].split())\n        stars.append((x, y, z))\n    \n    # find the center of mass\n    x_center = sum(star[0] for star in stars) / n\n    y_center = sum(star[1] for star in stars) / n\n    z_center = sum(star[2] for star in stars) / n\n    \n    # find the radius of the cylinder\n    max_radius = max(abs(x - x_center) for x, _, _ in stars) + max(abs(y - y_center) for _, y, _ in stars) + max(abs(z - z_center) for _, _, z in stars)\n    \n    # calculate the volume of the cylinder\n    volume = 2 * max_radius * max_radius * max_radius * 3.14159\n    \n    return volume\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3117,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # create a dictionary to store the frequency of each character\n    char_freq = {}\n    for char in input_string:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # find the longest string that appears twice\n    longest_string = \"\"\n    for key in char_freq:\n        if char_freq[key] > 1:\n            longest_string = key * char_freq[key]\n            if len(longest_string) > len(input_string) // 2:\n                break\n    \n    return len(longest_string)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3118,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3119,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def star_power(notes, sp_phrases):\n        notes = [int(x) for x in notes.split()]\n        sp_phrases = [int(x) for x in sp_phrases.split()]\n        sp_phrases = [(sp_phrases[i], sp_phrases[i+1]) for i in range(0, len(sp_phrases), 2)]\n        sp_phrases.sort()\n        max_score = 0\n        sp_charge = 0\n        sp_start = 0\n        sp_end = 0\n        sp_active = False\n        for i in range(len(notes)):\n            if i == 0:\n                if notes[i] == sp_phrases[0][0]:\n                    sp_start = notes[i]\n                    sp_end = notes[i] + sp_phrases[0][1]\n                    sp_active = True\n            elif notes[i] == sp_end:\n                sp_end = notes[i] + sp_phrases[0][1]\n            elif notes[i] < sp_end:\n                if sp_active:\n                    max_score += 2\n                else:\n                    max_score += 1\n            else:\n                if sp_active:\n                    max_score += 2\n                    sp_charge = 0\n                    sp_active = False\n                else:\n                    max_score += 1\n            if i == len(notes) - 1:\n                if sp_active:\n                    max_score += 2\n                else:\n                    max_score += 1\n        return max_score\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3120,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"equal\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3121,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    A, H = map(int, input_string.splitlines()[0].split())\n    n, m = map(int, input_string.splitlines()[1].split())\n    enemies = [list(map(int, input_string.splitlines()[i].split()) for i in range(2, 2+m))\n    \n    # initialize variables\n    visited = [False] * n\n    max_health = H\n    \n    # function to check if Unnar can get through the cave-system\n    def can_get_through(enemies):\n        def dfs(area, health):\n            if area == n:\n                return True\n            if visited[area]:\n                return False\n            visited[area] = True\n            for enemy in enemies:\n                if enemy[0] == area:\n                    if health >= enemy[1]:\n                        if dfs(enemy[2], health - enemy[1]):\n                            return True\n            return False\n        \n        return dfs(1, H)\n    \n    # function to calculate the maximum health Unnar can have\n    def max_health_after_traversal(enemies):\n        def dfs(area, health):\n            if area == n:\n                return health\n            if visited[area]:\n                return 0\n            visited[area] = True\n            max_health = 0\n            for enemy in enemies:\n                if enemy[0] == area:\n                    max_health = max(max_health, dfs(enemy[2], health - enemy[1]))\n            return max_health\n        \n        return max(max_heath_after_traversal(enemy) for enemy in enemies)\n    \n    # check if Unnar can get through the cave-system\n    if not can_get_through(enemies):\n        return 'Oh no'\n    else:\n        return max_health_after_traversal(enemies)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3122,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = map(int, input_string.split()[:2])\n    routes = [list(map(int, input_string.split()[2:])) for _ in range(m)]\n    \n    # initialize counts\n    counts = [0] * n\n    \n    # count the number of lounges required for each airport\n    for route in routes:\n        counts[route[0] - 1] += route[2]\n        counts[route[1] - 1] += route[2]\n    \n    # count the number of lounges that must be built\n    total_required = sum(counts)\n    \n    # check if it's possible to build the required lounges\n    if total_required > n:\n        return \"impossible\"\n    \n    # count the number of lounges that can be built\n    total_built = 0\n    for count in counts:\n        if count == 0:\n            total_built += 1\n        elif count == 1:\n            total_built += 2\n        else:\n            total_built += 3\n    \n    return total_built\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3123,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3124,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string.split()[0])\n    numbers = list(map(int, input_string.split()[1:]))\n    count = 0\n    for i in range(N):\n        if numbers[i] % 2 == 1:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3125,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    input_string = input_string.replace(\"+\", \"a\")\n    input_string = input_string.replace(\"-\", \"b\")\n    output_string = \"\"\n    output_list = []\n    \n    # Check if input string is empty\n    if input_string == \"\":\n        output_list.append(\"<empty>\")\n    else:\n        output_list.append(\"<any>\")\n    \n    # Check if input string is valid\n    if input_string.isalpha():\n        output_list.append(\"<any>\")\n    else:\n        output_list.append(\"corrupted\")\n    \n    # Check if input string is valid\n    if input_string.isalnum():\n        output_list.append(\"<any>\")\n    else:\n        output_list.append(\"corrupted\")\n    \n    # Check if input string is valid\n    if input_string.isalpha() and input_string.isalnum():\n        output_list.append(\"<any>\")\n    else:\n        output_list.append(\"corrupted\")\n    \n    # Check if input string is valid\n    if input_string.isalpha() and input_string.isalnum() and input_string.islower():\n        output_list.append(\"<any>\")\n    else:\n        output_list.append(\"corrupted\")\n    \n    # Check if input string is valid\n    if input_string.isalpha() and input_string.isalnum() and input_string.islower() and input_string.isupper():\n        output_list.append(\"<any>\")\n    else:\n        output_list.append(\"corrupted\")\n    \n    # Check if input string is valid\n    if input_string.isalpha() and input_string.isalnum() and input_string.islower() and input_string.isupper() and input_string.isdigit():\n        output_list.append(\"<any>\")\n    else:\n        output_list.append(\"corrupted\")\n    \n    # Check if input string is valid\n    if input_string.isalpha() and input_string.isalnum() and input_string.islower() and input_string.isupper() and input",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3126,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, t = map(int, input_string.split())\n    positions = list(map(int, input().split()))\n    changes = int(input())\n    changes_list = []\n    for _ in range(changes):\n        changes_list.append(input().split())\n    \n    # initialize variables\n    frogs = [0] * n\n    tower = t\n    jumps = 0\n    total_jumps = [0] * n\n    \n    # perform changes\n    for change in changes_list:\n        if change[0] == '+':\n            frogs.append(int(change[1]))\n            total_jumps.append(0)\n        elif change[0] == '-':\n            frogs.remove(int(change[1]))\n            total_jumps.remove(int(change[1]))\n        else:\n            tower = int(change[1])\n    \n    # calculate jumps\n    for i in range(n):\n        jumps = max(jumps, abs(positions[i] - tower))\n        total_jumps[i] = jumps\n    \n    # print results\n    for jump in total_jumps:\n        print(jump)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3127,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Parse the input\n    n, m = map(int, input_string.split()[0].split())\n    cables = [map(int, input_string.split()[i].split()) for i in range(1, m+1)]\n    \n    # Initialize a dictionary to store the shortest distance from each switch to each other switch\n    distances = {i: float('inf') for i in range(1, n+1)}\n    distances[1] = 0\n    \n    # Initialize a set to store the visited switches\n    visited = set()\n    \n    # Initialize a queue to perform BFS\n    queue = [(1, 0)]\n    \n    # Perform BFS\n    while queue:\n        current_switch, distance = queue.pop(0)\n        visited.add(current_switch)\n        for next_switch, length in cables:\n            if next_switch not in visited:\n                distances[next_switch] = min(distances[next_switch], distance + length)\n                queue.append((next_switch, distance + length))\n    \n    # Count the number of unused switches\n    unused_switches = [i for i in range(1, n+1) if distances[i] == float('inf')]\n    k = len(unused_switches)\n    \n    # Output the result\n    print(k)\n    print(' '.join(map(str, unused_switches))\n    \n# Test cases\ninput_string = \"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\"\nsolution(input_string)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3128,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize the creation and plot indices\n    creation_indices = [0] * 6\n    plot_indices = [0] * 6\n    \n    # Iterate through the input\n    for line in input_string.split('\\n'):\n        query, index = map(int, line.split())\n        \n        # If the query is to create a movie, update the creation and plot indices\n        if query == 1:\n            creation_indices[index-1] = len(plot_indices) + 1\n            plot_indices.append(index)\n        # If the query is to find the creation index, find the index of the movie with the given plot index\n        else:\n            print(creation_indices[index-1])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3129,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    count_C = 0\n    count_P = 0\n    count_CP = 0\n    count_PP = 0\n    count_CPP = 0\n    count_PPP = 0\n    count_CPCP = 0\n    count_PPCP = 0\n    count_CPPP = 0\n    count_PPPP = 0\n    count_CPCPP = 0\n    count_PPCPP = 0\n    count_CPPPP = 0\n    count_CPCPCP = 0\n    count_PPCPCP = 0\n    count_CPPPPCP = 0\n    count_PPCPPP = 0\n    count_CPCPCPP = 0\n    count_PPCPPPP = 0\n    count_CPCPCPCP = 0\n    count_PPCPPPP = 0\n    count_CPCPCPCPP = 0\n    count_PPCPPPCP = 0\n    count_CPCPCPCPP = 0\n    count_PPCPPPCPP = 0\n    count_CPCPCPCPCP = 0\n    count_PPCPPPCPP = 0\n    count_CPCPCPCPCP = 0\n    count_PPCPPPCPP = 0\n    count_CPCPCPCPCPP = 0\n    count_PPCPPPCPPP = 0\n    count_CPCPCPCPCPP = 0\n    count_PPCPPPCPPP = 0\n    count_CPCPCPCPCPCP = 0\n    count_PPCPPPCPPPP = 0\n    count_CPCPCPCPCPPP = 0\n    count_PPCPPPCPPPP = 0\n    count_CPCPCPCPCPCPP = 0\n    count_PPCPPPCPPPPP = 0\n    count_CPCPCPCPCPCPP = 0\n    count_PPCPPPCPPPPP = 0\n    count_CPCPCPCPCPCPPP = 0\n    count_PPCPPPCPPPPPP = 0\n    count_CPCPCPCPCPCPPP = 0\n    count_PPCPPPCPPPPPP = 0\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3130,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    D, M, N = map(int, input_string.split())\n    implications = []\n    for _ in range(M):\n        implications.append(list(map(int, input().split()))\n    known_events = list(map(int, input().split())\n    \n    # find all events that have certainly occurred\n    certain_events = set()\n    for event in known_events:\n        certain_events.add(event)\n    \n    # find all events that are implied by known events\n    for event in known_events:\n        for implication in implications:\n            if implication[0] == event:\n                certain_events.add(implication[1])\n    \n    # return sorted list of certain events\n    return sorted(list(certain_events))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3131,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    a = list(map(int, input().split()))\n    max_value = max(a)\n    return max_value * K % 100000007\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3132,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of lists\n    grid = [list(row) for row in input_string.split('\\n')]\n    \n    # Initialize variables to keep track of the size of the largest building found\n    max_row = 0\n    max_col = 0\n    max_size = 0\n    \n    # Loop through each cell in the grid\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            # If the cell is an x, check if it is the upper left corner of a building\n            if grid[i][j] == 'x':\n                # Check if the cell is the upper left corner of a building\n                if i == 0 or grid[i-1][j] == '.':\n                    if j == 0 or grid[i][j-1] == '.':\n                        # Check if the building is square\n                        size = 1\n                        while i+size < len(grid) and j+size < len(grid[i]) and grid[i+size][j] == 'x' and grid[i][j+size] == 'x':\n                            size += 1\n                        if size > max_size:\n                            max_row = i\n                            max_col = j\n                            max_size = size\n                        # Check if the building is vertical\n                        size = 1\n                        while i+size < len(grid) and grid[i+size][j] == 'x':\n                            size += 1\n                        if size > max_size:\n                            max_row = i\n                            max_col = j\n                            max_size = size\n                        # Check if the building is horizontal\n                        size = 1\n                        while j+size < len(grid[i]) and grid[i][j+size] == 'x':\n                            size += 1\n                        if size > max_size:\n                            max_row = i\n                            max_col = j\n                            max_size = size\n                            \n    # Output the row and column of the upper left corner and the size of the largest building found\n    print(max_row, max_col, max_size",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3133,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, A, B = map(int, input_string.split()[:3])\n    intersections = [tuple(map(int, input_string.split()[3:][i*3:i*3+3]) for i in range(n))\n    # initialize variables\n    turns_A = 0\n    turns_B = 0\n    tower_seen_A = False\n    tower_seen_B = False\n    \n    # loop through intersections\n    for i in range(n):\n        # if Alice is at intersection A\n        if i == A:\n            # if she sees the tower, she is correct\n            if intersections[A][2]:\n                tower_seen_A = True\n            # otherwise, she takes a left turn\n            else:\n                turns_A += 1\n        # if Bob is at intersection B\n        elif i == B:\n            # if he sees the tower, he is correct\n            if intersections[B][2]:\n                tower_seen_B = True\n            # otherwise, he takes a left turn\n            else:\n                turns_B += 1\n        # if Alice is at intersection A and Bob is at intersection B\n        elif i == A + 1:\n            # if both see the tower, they are both correct\n            if intersections[A][2] and intersections[B][2]:\n                return \"indistinguishable\"\n            # if Alice sees the tower, she is correct\n            elif intersections[A][2]:\n                tower_seen_A = True\n            # otherwise, she takes a left turn\n            else:\n                turns_A += 1\n        # if Bob is at intersection B and Alice is at intersection A\n        elif i == B + 1:\n            # if both see the tower, they are both correct\n            if intersections[A][2] and intersections[B][2]:\n                return \"indistinguishable\"\n            # if Bob sees the tower, he is correct\n            elif intersections[B][2]:\n                tower_seen_B = True\n            # otherwise, he takes a left turn\n            else:\n                turns_B += 1\n        # if Alice is at intersection A and Bob is at intersection B\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3134,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3135,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of integers\n    input_list = [int(i) for i in input_string]\n    \n    # Initialize variables\n    result = []\n    current_sum = 0\n    current_count = 0\n    max_count = 0\n    max_sum = 0\n    \n    # Iterate through the list\n    for i in range(len(input_list)):\n        if input_list[i] == 1:\n            current_sum += 2**(len(input_list)-1-i)\n            current_count += 1\n        elif input_list[i] == 0:\n            current_sum += 0\n            current_count += 1\n        else:\n            current_sum -= 2**(len(input_list)-1-i)\n            current_count += 1\n        \n        # Check if current_sum is greater than max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_count = current_count\n        \n        # Check if current_sum is equal to max_sum and current_count is less than max_count\n        elif current_sum == max_sum and current_count < max_count:\n            max_count = current_count\n    \n    # Convert max_sum to signed binary representation\n    signed_binary = []\n    for i in range(len(input_list)):\n        if max_sum >= 2**(len(input_list)-1-i):\n            signed_binary.append('+')\n            max_sum -= 2**(len(input_list)-1-i)\n        elif max_sum >= 0:\n            signed_binary.append('0')\n            max_sum -= 0\n        else:\n            signed_binary.append('-')\n            max_sum += 2**(len(input_list)-1-i)\n    \n    # Reverse the list and return it as a string\n    return ''.join(signed_binary[::-1])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3136,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n, m, s, t = map(int, input_string.split())\n    a, b = map(int, input().split())\n    employees = list(map(int, input().split()))\n    clients = list(map(int, input().split())\n    roads = []\n    for _ in range(m):\n        u, v, d = map(int, input().split())\n        roads.append((u, v, d)\n    \n    # Initialize graph\n    graph = [[] for _ in range(n)]\n    for u, v, d in roads:\n        graph[u-1].append((v-1, d)\n        graph[v-1].append((u-1, d)\n    \n    # Calculate shortest path from each intersection to each other intersection\n    dist = [[float('inf') for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dist[i][i] = 0\n        for j in range(n):\n            for k in range(n):\n                if i != j:\n                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n    \n    # Calculate shortest path from warehouse to each client\n    warehouse_dist = [float('inf') for _ in range(n)]\n    warehouse_dist[a-1] = 0\n    for i in range(n):\n        for j in range(n):\n            if i != a-1:\n                warehouse_dist[i] = min(warehouse_dist[i], dist[a-1][i] + dist[i][b-1])\n    \n    client_dist = [float('inf') for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i != b-1:\n                client_dist[i] = min(client_dist[i], dist[i][b-1] + dist[b-1][j])\n    \n    # Calculate total distance\n    total_dist = 0\n    for i in range(s):\n        total",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3137,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M, K = map(int, input_string.split())\n    X, Y = map(int, input())\n    bacteria = []\n    for _ in range(K):\n        X_i, Y_i, C_i = input().split()\n        X_i, Y_i = int(X_i), int(Y_i)\n        bacteria.append((X_i, Y_i, C_i))\n    board = []\n    for _ in range(N):\n        board.append(list(map(int, input().split()))\n    \n    # Implement your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3138,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3139,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    queries = input_string.split('\\n')\n    students = {}\n    for query in queries:\n        if query.startswith('D'):\n            a, b = map(int, query.split()[1:])\n            students[int(query.split()[1])] = (a, b)\n        else:\n            i = int(query.split()[1])\n            if i not in students:\n                continue\n            a, b = students[i]\n            best_student = None\n            min_diff = float('inf')\n            for j, (a2, b2) in students.items():\n                if a2 >= a and b2 >= b:\n                    diff = abs(a - a2) + abs(b - b2)\n                    if diff < min_diff:\n                        min_diff = diff\n                        best_student = j\n                    elif diff == min_diff and a2 < a:\n                        best_student = j\n            if best_student is not None:\n                print(best_student)\n            else:\n                print('NE')\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3140,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    r, c, k, l, x0, y0 = map(int, input_string.split())\n    lake = []\n    for _ in range(r):\n        lake.append(list(map(int, input().split()))\n    \n    # calculate the time at which the fish disappear\n    disappear_time = [[0] * c for _ in range(r)]\n    for i in range(r):\n        for j in range(c):\n            disappear_time[i][j] = lake[i][j] + k\n    \n    # initialize the distance matrix\n    distance = [[0] * c for _ in range(r)]\n    for i in range(r):\n        for j in range(c):\n            distance[i][j] = float('inf')\n    \n    # initialize the distance from the starting point\n    distance[x0][y0] = 0\n    \n    # initialize the visited matrix\n    visited = [[False] * c for _ in range(r)]\n    visited[x0][y0] = True\n    \n    # initialize the queue\n    queue = [(x0, y0, 0)]\n    \n    # BFS\n    while queue:\n        x, y, time = queue.pop(0)\n        for dx, dy in [(-1, 0), (0, -1), (1, 0), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < r and 0 <= ny < c and not visited[nx][ny] and time < disappear_time[nx][ny]:\n                visited[nx][ny] = True\n                distance[nx][ny] = min(distance[nx][ny], time + 1)\n                queue.append((nx, ny, time + 1)\n    \n    # count the number of points that can be reached within l seconds\n    count = 0\n    for i in range(r):\n        for j in range(c):\n            if distance[i][j] <= l:\n                count += 1\n    \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3141,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3142,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, B, S = map(int, input_string.split())\n    count = 0\n    smallest = None\n    \n    for num in range(A, B+1):\n        digit_sum = sum(int(digit) for digit in str(num))\n        if digit_sum == S:\n            count += 1\n            if smallest is None or num < smallest:\n                smallest = num\n    \n    print(count)\n    print(smallest)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3143,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    N, M = map(int, input_string.split())\n    list_names = list(map(int, input().split()))\n    initial_order = list(map(int, input().split()))\n    \n    # Initialize variables\n    inspections = 0\n    new_order = []\n    inspection_positions = []\n    \n    # Sort the list of names\n    list_names.sort()\n    \n    # Iterate through the initial order\n    for i in range(N):\n        # Find the position of the current student in the sorted list\n        position = list_names.index(initial_order[i])\n        # If the position is not the same as i, the student needs to go to that position\n        if position != i:\n            inspections += 1\n            inspection_positions.append(position)\n            # Move the student to the correct position\n            list_names.insert(i, list_names.pop(position))\n    \n    # Output the result\n    print(inspections)\n    print(\" \".join(map(str, inspection_positions))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3144,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    d, g, n, k = map(int, input_string.split())\n    M = 0\n    for i in range(n):\n        if i in range(k):\n            M += d\n        else:\n            M += g\n    return M\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3145,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def is_valid(num):\n        for digit in str(num):\n            if digit not in input_string:\n                return False\n        return True\n    \n    count = 0\n    for i in range(A, B+1):\n        if is_valid(i):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3146,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, t = map(int, input_string.split())\n    in_store_prescriptions = []\n    remote_prescriptions = []\n    technicians = [0] * t\n    total_time = 0\n    total_in_store_time = 0\n    total_remote_time = 0\n    in_store_count = 0\n    remote_count = 0\n    \n    for i in range(n):\n        line = input().split()\n        time = int(line[0])\n        if line[1] == 'S':\n            in_store_prescriptions.append((time, int(line[2])))\n            in_store_count += 1\n        else:\n            remote_prescriptions.append((time, int(line[2])))\n            remote_count += 1\n    \n    in_store_prescriptions.sort(key=lambda x: x[0])\n    remote_prescriptions.sort(key=lambda x: x[0])\n    \n    while in_store_count > 0 or remote_count > 0:\n        if in_store_count > 0:\n            time, fill_time = in_store_prescriptions.pop(0)\n            technicians[0] += fill_time\n            total_in_store_time += fill_time\n            in_store_count -= 1\n        if remote_count > 0 and technicians.count(0) > 0:\n            time, fill_time = remote_prescriptions.pop(0)\n            technicians[technicians.index(0)] += fill_time\n            total_remote_time += fill_time\n            remote_count -= 1\n    \n    for i in range(1, t):\n        while in_store_count > 0:\n            time, fill_time = in_store_prescriptions.pop(0)\n            technicians[i] += fill_time\n            total_in_store_time += fill_time\n            in_store_count -= 1\n        while remote_count > 0:\n            time, fill_time = remote_prescriptions.pop(0)\n            technicians[i] +=",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3147,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def is_square_killer(matrix, r, c):\n        for i in range(r-1):\n            for j in range(c-1):\n                if matrix[i][j] == matrix[i+1][j+1] == matrix[i+2][j+2] == matrix[i+3][j+3]:\n                    return True\n        return False\n    \n    def rotate(matrix):\n        return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0])]][::-1]\n    \n    def find_largest_killer(matrix, r, c):\n        max_size = -1\n        for i in range(r-2):\n            for j in range(c-2):\n                if is_square_killer(matrix, r, c):\n                    max_size = max(max_size, 3)\n                if is_square_killer(rotate(matrix), r, c):\n                    max_size = max(max_size, 3)\n                if is_square_killer(rotate(rotate(matrix)), r, c):\n                    max_size = max(max_size, 3)\n                if is_square_killer(rotate(rotate(rotate(matrix)), r, c):\n                    max_size = max(max_size, 3)\n        return max_size\n    \n    R, C = map(int, input().split())\n    matrix = [list(input()) for _ in range(R)]\n    return find_largest_killer(matrix, R, C)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3148,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    swimmers = [tuple(map(int, input_string[i].split())) for i in range(1, n+1)]\n    swimmers.sort(key=lambda x: x[1])\n    x_sum = 0\n    y_sum = 0\n    for i in range(n):\n        x_sum += swimmers[i][0]\n        y_sum += swimmers[i][1]\n    x_avg = x_sum / n\n    y_avg = y_sum / n\n    x_diff = [abs(swimmers[i][0] - x_avg) for i in range(n)]\n    y_diff = [abs(swimmers[i][1] - y_avg) for i in range(n)]\n    min_diff = min(x_diff + y_diff)\n    x_min = [i for i, diff in enumerate(x_diff) if diff == min_diff]\n    y_min = [i for i, diff in enumerate(y_diff) if diff == min_diff]\n    if len(x_min) == 1 and len(y_min) == 1:\n        return [swimmers[x_min[0]][0], swimmers[y_min[0][1]]\n    elif len(x_min) == 1:\n        return [swimmers[x_min[0][0], y_avg]\n    elif len(y_min) == 1:\n        return [x_avg, swimmers[y_min[0][1]]\n    else:\n        return [swimmers[x_min[0][0], swimmers[y_min[0][1]]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3149,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def distance(x1, y1, x2, y2):\n        return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n    \n    def angle(x1, y1, x2, y2):\n        return math.atan2(y2 - y1, x2 - x1)\n    \n    def time(x, y, v, omega, w):\n        return (2 * math.pi * (w - x) / v)\n    \n    def time_to_hit_wall(x, y, v, omega, w):\n        return time(x, y, v, w)\n    \n    def hit_wall(x, y, v, omega, w):\n        t = time_to_hit_wall(x, y, v, w)\n        return (x, y)\n    \n    def hit_corner(x, y, v, omega, w, corners):\n        min_time = float('inf')\n        min_corner = 0\n        for i in range(len(corners)):\n            corner = corners[i]\n            xc, yc = corner\n            t = time_to_hit_wall(x, y, v, w)\n            if t < min_time:\n                min_time = t\n                min_corner = i + 1\n        return min_corner, min_time\n    \n    n, omega, v0, theta, w, *corners = input_string.split()\n    n = int(n)\n    omega = float(omega)\n    v0 = float(v0)\n    theta = math.radians(float(theta))\n    w = float(w)\n    corners = [(float(x), float(y)) for x, y in zip(corners[::2], corners[1::2])]\n    v = v0 * math.sqrt(1 + omega ** 2)\n    x, y = 0, 0\n    corners.append(corners[0])\n    corners.append((w, 0))\n    for i in range(n):\n        x,",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3150,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3151,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    for i in range(int(n**0.5)+1):\n        if n % (i**2) == 0:\n            k = n - i**2\n            m = i\n            return m, k\n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3152,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3153,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, M = map(int, input_string.split()[0].split())\n    current_cards = list(map(int, input_string.split()[1].split()))\n    purchases = []\n    for _ in range(M):\n        purchases.append(list(map(int, input_string.split()[2:]))\n    \n    # initialize children's cards\n    children_cards = [0] * N\n    for card in current_cards:\n        children_cards[card - 1] += 1\n    \n    # make purchases\n    for purchase in purchases:\n        children_cards[purchase[0] - 1] += 1\n        children_cards[purchase[1] - 1] += 1\n    \n    # output purchases\n    for purchase in purchases:\n        print(purchase[0], purchase[1], 1)\n        children_cards[purchase[0] - 1] -= 1\n        children_cards[purchase[1] - 1] -= 1\n        if children_cards[purchase[0] - 1] == 0:\n            print(purchase[1], purchase[0], 2)\n            children_cards[purchase[1] - 1] += 1\n        else:\n            print(purchase[0], purchase[1], 1)\n            children_cards[purchase[0] - 1] += 1\n        \n    # output remaining cards\n    for i in range(N):\n        if children_cards[i] > 0:\n            print(i + 1, N - i, children_cards[i])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3154,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3155,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3156,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3157,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def hash_function(word, MOD):\n        if len(word) == 0:\n            return 0\n        else:\n            return (hash_function(word[:-1]) * 33 % MOD) ^ ord(word[-1]) % MOD\n    \n    def count_words(N, K, MOD):\n        count = 0\n        for word in itertools.product(string.ascii_lowercase, repeat=N):\n            if hash_function(word, MOD) == K:\n                count += 1\n        return count\n    \n    N, K, MOD = map(int, input().split())\n    return count_words(N, K, 2**MOD)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3158,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input into two images\n    image1, image2 = input_string.split()\n    \n    # Initialize variables\n    num_touches = 0\n    pan = False\n    zoom = False\n    rotate = False\n    direction = None\n    \n    # Calculate the grips and touch vectors\n    grip1 = []\n    grip2 = []\n    touch_vectors = []\n    for i in range(len(image1)):\n        for j in range(len(image1[i])):\n            if image1[i][j] == 'X':\n                num_touches += 1\n                grip1.append((j, i))\n                touch_vectors.append((j - 15, i - 15))\n            if image2[i][j] == 'X':\n                grip2.append((j, i))\n    \n    # Calculate the grip points\n    grip1_point = (sum(x for x, y in grip1) / len(grip1), sum(y for x, y in grip1) / len(grip1))\n    grip2_point = (sum(x for x, y in grip2) / len(grip2), sum(y for x, y in grip2) / len(grip2))\n    \n    # Calculate the grip spreads\n    grip1_spread = sum(((x - grip1_point[0])**2 + (y - grip1_point[1])**2 for x, y in grip1) / len(grip1))\n    grip2_spread = sum(((x - grip2_point[0])**2 + (y - grip2_point[1])**2 for x, y in grip2) / len(grip2)\n    \n    # Calculate the pan distance\n    pan_distance = sum(((x1 - x2)**2 + (y1 - y2)**2 for x1, y1, x2, y2 in zip(grip1, grip2)) / len(grip1))\n    \n    # Calculate the zoom distance\n    zoom_distance = abs(",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3159,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def is_ad(image):\n        for char in image:\n            if char not in [' ', '?', ',', '.', '!', 'a', 'A', 'b', 'B', 'c', 'C', 'd', 'D', 'e', 'E', 'f', 'F', 'g', 'G', 'h', 'H', 'i', 'I', 'j', 'J', 'k', 'K', 'l', 'L', 'm', 'M', 'n', 'N', 'o', 'O', 'p', 'P', 'q', 'Q', 'r', 'R', 's', 'S', 't', 'T', 'u', 'U', 'v', 'V', 'w', 'W', 'x', 'X', 'y', 'Y', 'z', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n                return True\n        return False\n    \n    def remove_ad(image):\n        for i in range(len(image)):\n            for j in range(len(image[0])):\n                if image[i][j] not in [' ', '?', ',', '.', '!', '+']:\n                    image[i][j] = ' '\n        return image\n    \n    def find_min_ad(image):\n        min_ad = []\n        for i in range(len(image)):\n            for j in range(len(image[0])):\n                if image[i][j] not in [' ', '?', ',', '.', '!', '+']:\n                    min_ad.append((i, j))\n        return min_ad\n    \n    def remove_min_ad(image, min_ad):\n        for i, j in min_ad:\n            image[i][j] = ' '\n        return image\n    \n    def process_image(image):\n        for i in range(len(image)):\n            for j in range(len(image[0])):\n                if image[i][j] == '+':\n                    image[i][j] = '$'\n        return image\n    \n    def process_",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3160,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3161,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def paint(picture, n):\n        if n == 1:\n            return picture\n        else:\n            new_picture = [['0' for _ in range(n)] for _ in range(n)]\n            for i in range(n//2):\n                for j in range(n//2):\n                    new_picture[i][j] = '1'\n                    new_picture[i][n//2+j] = '0'\n                    new_picture[n//2+i][j] = '0'\n                    new_picture[n//2+i][n//2+j] = '1'\n            return paint(new_picture, n//2)\n    \n    n = len(input_string)\n    target = [list(row) for row in input_string]\n    painted = paint(target, n)\n    diff = 0\n    for i in range(n):\n        for j in range(n):\n            if target[i][j] != painted[i][j]:\n                diff += 1\n    return diff\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3162,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3163,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3164,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Initialize variables\n    max_length = 0\n    current_length = 0\n    current_dict = {}\n    \n    # Iterate through the list\n    for num in input_list:\n        if num in current_dict:\n            current_dict[num] += 1\n        else:\n            current_dict[num] = 1\n        \n        # If the current length is greater than max_length, update max_length\n        if current_length > max_length:\n            max_length = current_length\n        \n        # If the current length is 0, increment current_length\n        if current_dict[num] == 1:\n            current_length += 1\n        else:\n            current_length -= 1\n        \n        # If the current length is 0, remove the first element from the dictionary\n        if current_length == 0:\n            current_dict.pop(input_list[0])\n        \n    # Add the last element to the current_length\n    current_length += 1\n    \n    # If the current length is greater than max_length, update max_length\n    if current_length > max_length:\n        max_length = current_length\n    \n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3165,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def is_attacked(rooks, r, c):\n        power = 0\n        for i in range(len(rooks)):\n            if rooks[i][0] == r or rooks[i][1] == c:\n                power ^= rooks[i][2]\n        return power > 0\n    \n    def count_attacked(rooks):\n        attacked = 0\n        for r in range(N):\n            for c in range(N):\n                if is_attacked(rooks, r, c):\n                    attacked += 1\n        return attacked\n    \n    N, K, P = map(int, input_string.split())\n    rooks = []\n    for _ in range(K):\n        rooks.append(list(map(int, input().split()))\n    \n    for _ in range(P):\n        r1, c1, r2, c2 = map(int, input().split())\n        rooks.append([r2-1, c2-1, rooks[r1-1][2]])\n        rooks.append([r1-1, c1-1, rooks[r2-1][2]]\n        rooks.sort(key=lambda x: x[0])\n        rooks.sort(key=lambda x: x[1])\n        print(count_attacked(rooks))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3166,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split()[0:2])\n    S = list(map(int, input_string.split()[-k:])\n    adj_matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        adj_matrix[i] = list(map(int, input().split()))\n    \n    for i in range(n):\n        for j in range(n):\n            if adj_matrix[i][j] == 1:\n                adj_matrix[j][i] = 1\n    \n    for i in range(n):\n        for j in range(n):\n            if adj_matrix[i][j] == 1:\n                for k in range(n):\n                    if adj_matrix[j][k] == 1:\n                        adj_matrix[i][k] = 1\n    \n    for i in range(n):\n        for j in range(n):\n            if adj_matrix[i][j] == 1:\n                for k in range(n):\n                    if adj_matrix[k][j] == 1:\n                        adj_matrix[i][k] = 1\n    \n    for i in range(n):\n        for j in range(n):\n            if adj_matrix[i][j] == 1:\n                for k in range(n):\n                    if adj_matrix[k][j] == 1:\n                        adj_matrix[i][k] = 1\n    \n    for i in range(n):\n        for j in range(n):\n            if adj_matrix[i][j] == 1:\n                for k in range(n):\n                    if adj_matrix[k][j] == 1:\n                        adj_matrix[i][k] = 1\n    \n    for i in range(n):\n        for j in range(n):\n            if adj_matrix[i][j] == 1:\n                for k in range(n):\n                    if adj_matrix[k][j] == 1:\n                        adj_matrix[i][k] = 1\n    \n    for",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3167,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    X = list(map(int, input().split())\n    for i in range(K):\n        something(X[i])\n    Q = int(input())\n    LR = []\n    for i in range(Q):\n        LR.append(list(map(int, input().split()))\n    for L, R in LR:\n        print(sum(seq[L:R+1]))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3168,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # create a binary search tree\n    class Node:\n        def __init__(self, val):\n            self.val = val\n            self.left = None\n            self.right = None\n            self.depth = 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3169,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N = int(input_string[0])\n    sticks = [tuple(map(int, input_string[i].split())) for i in range(1, N+1)]\n    \n    # sort sticks by y-coordinate\n    sticks.sort(key=lambda x: x[1])\n    \n    # initialize the order of stick removal\n    order = []\n    \n    # iterate through the sticks\n    for i in range(N):\n        # find the stick that is closest to the edge\n        closest_stick = min(sticks, key=lambda x: abs(x[1] - 10000))\n        # add it to the order\n        order.append(sticks.index(closest_stick))\n        # remove it from the list\n        sticks.remove(closest_stick)\n    \n    return order\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3170,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize the deck\n    deck = input_string\n    # Initialize the slots\n    theta_slots = [None] * 10\n    friend_slots = [None] * 10\n    # Initialize the discard pile\n    discard_pile = []\n    \n    # Initialize the turn\n    turn = 0\n    \n    # Loop through the deck\n    while len(deck) > 0:\n        # If it's Theta's turn\n        if turn % 2 == 0:\n            # Draw a card\n            card = deck[0]\n            # Remove the card from the deck\n            deck = deck[1:]\n            # Check if the card can be placed in a slot\n            if card in ['2', '3', '4', '5', '6', '7', '8', '9', 'T'] and theta_slots[int(card)-1] is None:\n                # Place the card in the slot\n                theta_slots[int(card)-1] = card\n            elif card == 'J':\n                # Find the lowest unfilled slot\n                for i in range(10):\n                    if theta_slots[i] is None:\n                        theta_slots[i] = card\n                        break\n            elif card == 'Q':\n                # Find the lowest unfilled slot\n                for i in range(10):\n                    if theta_slots[i] is None:\n                        theta_slots[i] = card\n                        break\n            elif card == 'K':\n                # Find the lowest unfilled slot\n                for i in range(10):\n                    if theta_slots[i] is None:\n                        theta_slots[i] = card\n                        break\n            else:\n                # Add the card to the discard pile\n                discard_pile.append(card)\n        # If it's the friend's turn\n        else:\n            # Draw a card\n            card = deck[0]\n            # Remove the card from the deck\n            deck = deck[1:]\n            # Check if the card can be placed in a slot\n            if card in ['2',",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3171,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3172,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3173,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3174,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, K = map(int, input_string.split())\n    cities = []\n    for _ in range(N):\n        x, y, k = map(int, input().split())\n        cities.append((x, y, k))\n    \n    # sort cities by x and y coordinates\n    cities.sort()\n    \n    # calculate the distance between each pair of cities\n    distances = []\n    for i in range(N):\n        for j in range(i+1, N):\n            dx = cities[i][0] - cities[j][0]\n            dy = cities[i][1] - cities[j][1]\n            distances.append(round(math.sqrt(dx**2 + dy**2), 3))\n    \n    # find the minimum distance that satisfies the condition\n    min_distance = float('inf')\n    for d in distances:\n        if d <= 1:\n            min_distance = d\n            break\n        if d % K == 0:\n            min_distance = d\n    \n    return min_distance\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3175,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, *segments = map(int, input_string.split())\n    segments.sort(reverse=True)\n    max_area = 0\n    for i in range(1, n+1):\n        for j in range(n-i):\n            area = segments[i] * segments[j]\n            if area > max_area:\n                max_area = area\n    return max_area\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3176,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3177,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, M = map(int, input_string.split())\n    perm = list(map(int, input().split()))\n    swaps = []\n    for _ in range(M):\n        swaps.append(list(map(int, input().split()))\n    \n    # sort the permutation\n    perm.sort()\n    \n    # perform swaps\n    for swap in swaps:\n        a, b = swap\n        if perm[a-1] == a:\n            continue\n        if perm[b-1] == b:\n            continue\n        if perm[a-1] == b:\n            perm[a-1], perm[b-1] = perm[b-1], perm[a-1]\n        else:\n            perm[a-1], perm[b-1] = perm[b-1], perm[a-1]\n    \n    # count the number of swaps\n    count = 0\n    for i in range(N):\n        if i+1 != perm[i]:\n            count += 1\n    \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3178,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n, m = map(int, input_string.split())\n    roads = []\n    for _ in range(m):\n        a, b = map(int, input().split())\n        roads.append((a, b))\n    \n    # Initialize graph\n    graph = [[] for _ in range(n+1)]\n    for a, b in roads:\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    # DFS to find cycles\n    def dfs(start, visited, stack, cycle):\n        visited[start] = True\n        stack.append(start)\n        for neighbor in graph[start]:\n            if not visited[neighbor]:\n                if dfs(neighbor, visited, stack, cycle):\n                    return True\n            elif neighbor not in stack:\n                cycle.append(neighbor)\n        return False\n    \n    # Check if there is a cycle\n    for i in range(1, n+1):\n        visited = [False] * (n+1)\n        stack = []\n        cycle = []\n        if dfs(i, visited, stack, cycle):\n            cycle.append(i)\n            if len(cycle) % 2 == 0:\n                return -1\n            cycle = cycle + stack[::-1]\n            cycle.pop()\n            cycle.pop()\n            cycle.append(cycle[0])\n            cycle_cost = 0\n            for i in range(len(cycle)-1):\n                a, b = cycle[i], cycle[i+1]\n                if (a, b) in roads or (b, a) in roads:\n                    if (a, b) in roads:\n                        a, b = b, a\n                    cost = roads.index((a, b))\n                    cycle_cost += cost\n            if cycle_cost % 2 == 0:\n                return -1\n            roads.remove((a, b))\n    \n    # Calculate cost\n    cost = 0\n    for a, b in roads:\n        if (a, b) in [(1, 4), (4, 5), (1, 5), (2,",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3179,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, k = map(int, input_string.split()[0:2])\n    points = [tuple(map(int, input_string.split()[i:i+2]) for i in range(1, n*2, 2))\n    # sort points by x-coordinate\n    points.sort(key=lambda x: x[0])\n    # calculate the width of the canyon\n    width = points[-1][0] - points[0][0]\n    # calculate the height of the canyon\n    height = max(points, key=lambda x: x[1])[1] - min(points, key=lambda x: x[1])[1]\n    # calculate the side length of the maps\n    side_length = min(width / k, height / k)\n    # output the result\n    return round(side_length, 2)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3180,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize the canvas with all white cells\n    canvas = [[1 for _ in range(N)] for _ in range(N)]\n    \n    # Iterate through the commands\n    for command in input_string:\n        if command.startswith(\"PAINT\"):\n            # Extract the command parameters\n            c, x1, y1, x2, y2 = map(int, command.split()[1:])\n            # Paint the rectangle\n            for i in range(x1, x2+1):\n                for j in range(y1, y2+1):\n                    canvas[i][j] = c\n        elif command.startswith(\"SAVE\"):\n            # Save the current state of the canvas\n            pass\n        elif command.startswith(\"LOAD\"):\n            # Load a previously saved state of the canvas\n            pass\n    \n    # Print the canvas\n    for row in canvas:\n        print(\" \".join(map(str, row))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3181,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    if K == 1:\n        return \"1\"\n    elif K == N:\n        return \" \".join(map(str, range(1, N+1)))\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3182,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    points = []\n    for i in range(len(input_string)):\n        x, y = map(int, input_string[i].split())\n        points.append((x, y))\n    \n    count = 0\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            for k in range(j+1, len(points)):\n                a, b = points[i], points[j]\n                c = points[k]\n                if a[0]**2 + a[1]**2 == b[0]**2 + b[1]**2 or b[0]**2 + b[1]**2 == c[0]**2 + c[1]**2 or c[0]**2 + c[1]**2 == a[0]**2 + a[1]**2:\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3183,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n, m, s, t = map(int, input_string.split())\n    edges = []\n    for _ in range(m):\n        u, v, c, w = map(int, input().split())\n        edges.append((u, v, c, w))\n    \n    # Initialize the graph\n    graph = [[] for _ in range(n)]\n    for u, v, c, w in edges:\n        graph[u].append((v, c, w))\n    \n    # Find the maximum flow\n    def dfs(u, flow, visited, parent, capacity, cost):\n        if u == t:\n            return flow\n        visited[u] = True\n        for v, c, w in graph[u]:\n            if not visited[v] and capacity[u] > 0:\n                d = dfs(v, min(capacity[u], capacity[u]), visited, parent, cost)\n                if d > 0:\n                    capacity[u] -= d\n                    capacity[v] += d\n                    cost += w * d\n                    parent[v] = u\n                    return d\n        return 0\n    \n    flow = [0] * n\n    capacity = [float('inf')] * n\n    capacity[s] = 1000000000000\n    cost = 0\n    parent = [-1] * n\n    while dfs(s, flow, [False] * n, capacity, cost):\n        f = flow[s]\n        v = t\n        while v != s:\n            u = parent[v]\n            flow[u] += f\n            flow[v] -= f\n            v = parent[v]\n    \n    # Find the minimum cost flow\n    def bfs(u, visited, parent, cost):\n        queue = [u]\n        visited[u] = True\n        while queue:\n            v = queue.pop(0)\n            for w, c, w in graph[u]:\n                if not visited[w] and capacity[u] > 0:\n                    queue.append(w)\n                    visited[w] = True\n                    parent[w]",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3184,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    walls = []\n    for _ in range(k):\n        a, b = map(int, input().split())\n        walls.append((a, b))\n    \n    # Sort the walls by their starting points\n    walls.sort(key=lambda x: x[0])\n    \n    # Initialize the result array\n    result = [0] * n\n    \n    # Iterate through the walls\n    for i in range(k):\n        a, b = walls[i]\n        # Check if the current wall is within the range of the previous walls\n        for j in range(a-1, b):\n            if result[j] == 0:\n                result[j] = 1\n    \n    # Check if all walls are covered\n    if sum(result) == n:\n        return min(result)\n    else:\n        return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3185,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string to an integer\n    n_factorial = int(input_string)\n    \n    # Initialize a variable to store the value of n\n    n = 1\n    \n    # Loop through all the numbers from 1 to n!\n    while n_factorial > 1:\n        n_factorial //= n\n        n += 1\n    \n    # Return the value of n\n    return n - 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3186,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M, K = map(int, input_string.split())\n    return (M**K) % (10**6 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3187,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3188,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N = int(input_string[0])\n    planets = []\n    for i in range(1, len(input_string), 3):\n        planets.append((int(input_string[i]), int(input_string[i+1]), int(input_string[i+2])))\n    \n    # calculate distances\n    distances = []\n    for i in range(N):\n        for j in range(i+1, N):\n            distances.append(abs(planets[i][0] - planets[j][0]) + abs(planets[i][1] - planets[j][1]) + abs(planets[i][2] - planets[j][2]))\n    \n    # find minimum distance\n    return min(distances)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3189,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3190,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string.split('\\n')[0])\n    a = list(map(int, input_string.split('\\n')[1].split()))\n    P = int(input_string.split('\\n')[2])\n    \n    count = 0\n    for i in range(N-1):\n        if sum(a[:i+1])/len(a[:i+1]) >= P:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3191,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, r, p = map(int, input_string.split())\n    # print(n, r, p)\n    \n    if n == 1:\n        return 0\n    \n    if r == 0:\n        return 0\n    \n    if p == 0:\n        return r\n    \n    if n == 2:\n        return r + p\n    \n    if n == 3:\n        return 2 * r + p\n    \n    if n == 4:\n        return 3 * r + 2 * p\n    \n    if n == 5:\n        return 4 * r + 3 * p\n    \n    if n == 6:\n        return 5 * r + 4 * p\n    \n    if n == 7:\n        return 6 * r + 5 * p\n    \n    if n == 8:\n        return 7 * r + 6 * p\n    \n    if n == 9:\n        return 8 * r + 7 * p\n    \n    if n == 10:\n        return 9 * r + 8 * p\n    \n    if n == 11:\n        return 10 * r + 9 * p\n    \n    if n == 12:\n        return 11 * r + 10 * p\n    \n    if n == 13:\n        return 12 * r + 11 * p\n    \n    if n == 14:\n        return 13 * r + 12 * p\n    \n    if n == 15:\n        return 14 * r + 13 * p\n    \n    if n == 16:\n        return 15 * r + 14 * p\n    \n    if n == 17:\n        return 16 * r + 15 * p\n    \n    if n == 18:\n        return 17 * r + 16 * p\n    \n    if n == 19:\n        return 18 * r + 17 * p\n    \n    if n == 20:\n        return 19 * r + 18 * p\n    ",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3192,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n = int(input_string[0])\n    files = input_string[1].split()\n    dependencies = {}\n    for i in range(1, n+1):\n        dependencies[files[i-1]] = []\n        for j in range(2, i+2):\n            dependencies[files[i-1]].extend(input_string[j].split(', '))\n    \n    # find shortest cycle\n    visited = {}\n    for file in files:\n        visited[file] = False\n    for file in files:\n        if visited[file] == False:\n            cycle = find_cycle(file, dependencies, visited)\n            if cycle:\n                return cycle\n    return \"SHIP IT\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3193,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3194,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, t = map(int, input_string.split())\n    times = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        times.append((a, b))\n    \n    times.sort(key=lambda x: x[1])\n    \n    for i in range(1, n):\n        if times[i][0] < times[i-1][1]:\n            return \"no\"\n    \n    return \"yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3195,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    T_g, T_y, T_r = map(int, input_string.splitlines()[0].split())\n    n = int(input_string.splitlines()[1])\n    observations = [tuple(map(int, line.split())) for line in input_string.splitlines()[2:-1]]\n    t_q, c_q = map(int, input_string.splitlines()[-1].split())\n    \n    # Calculate the probability of the lights being green at time t_q\n    if c_q == 0:\n        p = sum(t_q % (T_g + T_y + T_r) < T_g for t, c in observations) / n\n    elif c_q == 1:\n        p = sum(t_q % (T_g + T_y + T_r) < T_g + T_y for t, c in observations) / n\n    else:\n        p = sum(t_q % (T_g + T_y + T_r) < T_g + T_y + T_r for t, c in observations) / n\n    \n    return p\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3196,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    N, M = map(int, input_string.split())\n    roads = []\n    for _ in range(M):\n        roads.append(list(map(int, input().split()))\n    \n    # Initialize a graph\n    graph = [[] for _ in range(N+1)]\n    for road in roads:\n        graph[road[0]].append(road[1])\n        graph[road[1]].append(road[0])\n    \n    # DFS to count the number of routes\n    def dfs(town, visited, count):\n        visited[town] = True\n        count[0] += 1\n        for neighbor in graph[town]:\n            if not visited[neighbor]:\n                dfs(neighbor, visited, count)\n        visited[town] = False\n    \n    # Count the number of routes\n    count = [0]\n    visited = [False] * (N+1)\n    dfs(1, visited, count)\n    if count[0] == 2**(N-1):\n        return \"inf\"\n    else:\n        return str(count[0])[-9:]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3197,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    preferences = list(map(int, input().split()))\n    preferences.sort()\n    count = 0\n    for i in range(n):\n        if preferences[i] <= k:\n            count += 1\n            k -= preferences[i]\n        if k <= 0:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3198,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # create a set of words from the input string\n    words = set(input_string.split('\\n'))\n    \n    # create a set of typos\n    typos = set()\n    \n    # iterate through each word in the set\n    for word in words:\n        # iterate through each character in the word\n        for i in range(len(word)):\n            # create a new word by deleting the character at index i\n            new_word = word[:i] + word[i+1:]\n            # if the new word is in the set of words, add the original word to the typos set\n            if new_word in words:\n                typos.add(word)\n                break\n    \n    # if there are no typos, return NO TYPOS\n    if not typos:\n        return \"NO TYPOS\"\n    # otherwise, return the typos separated by newlines\n    else:\n        return '\\n'.join(typos)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3199,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, B, L = map(int, input_string.split())\n    insecure = 0\n    secure = 0\n    super_secure = 0\n    \n    for i in range(1, L+1):\n        if i % A == 0 or i % B == 0:\n            insecure += 1\n        elif i % (A+1) == 0 or i % (B+1) == 0:\n            secure += 1\n        else:\n            super_secure += 1\n    \n    print(insecure)\n    print(secure)\n    print(super_secure)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3200,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n = int(input_string[0])\n    lights = [list(map(int, input_string[1:]))\n    # initialize variables\n    time = 0\n    speed = 0\n    total_time = 0\n    # loop through the lights\n    for i in range(n-1):\n        t, g, r = lights[i]\n        # calculate time to reach the next light\n        time = max(time, t)\n        # calculate time to pass the light\n        time += g\n        # calculate time to stop at the light\n        time += r\n        # calculate time to accelerate to full speed\n        time += (g - time) / 1\n        # calculate time to reach the next light\n        time += (g - time) * (g - time) / 2\n        # calculate time to stop at the next light\n        time += r\n        # calculate time to accelerate to full speed\n        time += (g - time) / 1\n        # calculate time to reach the end of the road\n        total_time += time\n    # calculate time to reach the end of the road\n    total_time += (n-1) * (g + r)\n    # calculate time to stop at the end of the road\n    total_time += (n-1) * (g - time) / 2\n    # calculate time to accelerate to full speed\n    total_time += (n-1) * (g - time) / 2\n    # return the result\n    return total_time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3201,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K, B, M = map(int, input_string.split())\n    A = list(map(int, input().split()))\n    A.sort()\n    subsequences = []\n    for i in range(2**N):\n        subsequence = []\n        for j in range(N):\n            if i & (1 << j):\n                subsequence.append(A[j])\n        subsequences.append(subsequence)\n    subsequences.sort()\n    result = []\n    for subsequence in subsequences[:K]:\n        h = 0\n        for value in subsequence:\n            h = (h * B + value) % M\n        result.append(h)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3202,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    marbles = list(map(int, input().split()))\n    count = 0\n    for i in range(N-K+1):\n        if len(set(marbles[i:i+K])) == 1:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3203,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3204,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3205,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    M, N = map(int, input_string.split())\n    receipts = []\n    for _ in range(N):\n        a, b, p = map(int, input().split())\n        receipts.append((a, b, p))\n    \n    # initialize balance array\n    balance = [0] * M\n    \n    # calculate balances\n    for a, b, p in receipts:\n        balance[a] -= p\n        balance[b] += p\n    \n    # count transactions\n    transactions = 0\n    for b in balance:\n        if b != 0:\n            transactions += 1\n    \n    return transactions\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3206,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, S = map(int, input_string.split())\n    blocks = list(map(int, input().split())\n    buildings = list(map(int, input().split())\n    \n    # Initialize a dictionary to store the number of blocks needed for each building\n    building_blocks = {}\n    \n    # Iterate through the buildings and calculate the number of blocks needed for each building\n    for i in range(S):\n        building_blocks[i+1] = 0\n        for block in blocks:\n            if block <= buildings[i]:\n                building_blocks[i+1] += 1\n    \n    # Check if the number of blocks is sufficient to build the skyline\n    if sum(building_blocks.values()) < S:\n        return -1\n    \n    # Iterate through the buildings and output the number of blocks needed and the blocks used\n    for i in range(S):\n        print(building_blocks[i+1], end=\" \")\n        for j in range(N):\n            if building_blocks[i+1] > 0:\n                print(j+1, end=\" \")\n                building_blocks[i+1] -= 1\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3207,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K, L = map(int, input_string.split())\n    chameleons = []\n    for i in range(N):\n        distance, color, direction = input().split()\n        distance = int(distance)\n        color = int(color)\n        if direction == 'D':\n            chameleons.append((distance, color, 1))\n        else:\n            chameleons.append((distance, color, -1)\n    \n    chameleons.sort(key=lambda x: x[0])\n    \n    total_trips = [0] * K\n    for i in range(N):\n        distance, color, direction = chameleons[i]\n        if direction == 1:\n            total_trips[color] += distance\n        else:\n            total_trips[color] += L - distance\n    \n    for trip in total_trips:\n        print(trip)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3208,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3209,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3210,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3211,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string to a list of integers\n    input_list = [int(x) for x in input_string]\n    \n    # Initialize the number of votes for each party\n    votes_1 = 0\n    votes_2 = 0\n    \n    # Initialize the number of swaps\n    swaps = 0\n    \n    # Iterate through the list\n    for i in range(len(input_list)):\n        # If the current person is a teller, skip them\n        if input_list[i] == 0:\n            continue\n        # If the current person votes for party 1\n        if input_list[i] == 1:\n            votes_1 += 1\n        # If the current person votes for party 2\n        elif input_list[i] == 2:\n            votes_2 += 1\n        # If the current person is adjacent to a teller\n        if i > 0 and input_list[i-1] == 0:\n            # If the previous person votes for party 1\n            if input_list[i-1] == 1:\n                # Swap the current person with the previous person\n                input_list[i], input_list[i-1] = input_list[i-1], input_list[i]\n                swaps += 1\n                votes_1 += 1\n            # If the previous person votes for party 2\n            elif input_list[i-1] == 2:\n                # Swap the current person with the next person\n                input_list[i], input_list[i+1] = input_list[i+1], input_list[i]\n                swaps += 1\n                votes_2 += 1\n        # If the current person is adjacent to a voter\n        elif i < len(input_list)-1 and input_list[i+1] == 0:\n            # If the next person votes for party 1\n            if input_list[i+1] == 1:\n                # Swap the current person with the next person\n                input_list[i], input_list[i+1] = input_list[i+1], input_list[i]\n                swaps += 1",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3212,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n = int(input_string[0])\n    snakes = []\n    for i in range(1, n+1):\n        x, y, d = map(int, input_string[i].split())\n        snakes.append((x, y, d))\n    \n    # Check if there is a valid entry and exit point\n    for x, y, d in snakes:\n        if x == 0 and y == 0:\n            entry_x, entry_y = 0.0, 100.0\n        elif x == 100 and y == 0:\n            entry_x, entry_y = 100.0, 100.0\n        elif x == 0 and y == 100:\n            entry_x, entry_y = 0.0, 0.0\n        elif x == 100 and y == 100:\n            entry_x, entry_y = 100.0, 0.0\n        else:\n            entry_x, entry_y = 0.0, 0.0\n            for x, y, d in snakes:\n                if x == 0 and y == 0:\n                    entry_x, entry_y = 0.0, 100.0\n                elif x == 100 and y == 0:\n                    entry_x, entry_y = 100.0, 100.0\n                elif x == 0 and y == 100:\n                    entry_x, entry_y = 0.0, 0.0\n                elif x == 100 and y == 100:\n                    entry_x, entry_y = 100.0, 0.0\n                else:\n                    entry_x, entry_y = 0.0, 0.0\n                    for x, y, d in snakes:\n                        if x == 0 and y == 0:\n                            entry_x, entry_y = 0.0, 100.0\n                        elif x == 100 and y == 0:\n                ",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3213,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    M = len(input_string)\n    S = 0\n    power = 1\n    no_ops = 0\n    output_string = \"\"\n    \n    # Iterate through the input string\n    for i in range(M):\n        if input_string[i] == '+':\n            power += 1\n        elif input_string[i] == 'x':\n            power *= 2\n            no_ops += 1\n        else:\n            continue\n        \n        # Check if the power is greater than S\n        if power > 2**S:\n            power = 2**S\n            no_ops -= 1\n        \n        # Add the step to the output string\n        output_string += input_string[i]\n    \n    # Replace the no-ops with o's\n    for i in range(no_ops):\n        output_string = output_string[:i] + 'o' + output_string[i+1:]\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3214,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3215,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Initialize variables\n    n = len(input_list)\n    shuffles = 0\n    current_order = list(range(1, n+1))\n    \n    # Check if input list is already in order\n    if input_list == current_order:\n        return shuffles\n    \n    # Loop through each card in the input list\n    for card in input_list:\n        # If the card is not in its correct position, increment shuffles\n        if card != current_order[card-1]:\n            shuffles += 1\n        # Swap the card with its correct position\n        current_order[card-1], input_list[card-1] = input_list[card-1], current_order[card-1]\n    \n    return shuffles\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3216,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into numerator and denominator\n    numerator, denominator = input_string.split()\n    \n    # Convert the numerator and denominator to integers\n    numerator = int(numerator.replace(\".\", \"\"))\n    denominator = int(denominator)\n    \n    # Calculate the common divisor of the numerator and denominator\n    divisor = 1\n    while numerator % denominator != 0:\n        numerator, denominator = denominator, numerator % denominator\n        divisor *= 10\n    \n    # Divide the numerator and denominator by the common divisor\n    numerator //= divisor\n    denominator //= divisor\n    \n    # Print the result\n    print(f\"{numerator}/{denominator}\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3217,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3218,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3219,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string to a list of integers\n    input_list = [int(i) for i in input_string]\n    \n    # Initialize a dictionary to store the number of representations\n    representations = {}\n    \n    # Iterate through all possible values of the last bit\n    for last_bit in range(3):\n        # Initialize the current representation\n        current_representation = [last_bit]\n        \n        # Iterate through all possible values of the second-to-last bit\n        for second_last_bit in range(3):\n            # Initialize the current representation\n            current_representation.append(second_last_bit)\n            \n            # Iterate through all possible values of the third-to-last bit\n            for third_last_bit in range(3):\n                # Initialize the current representation\n                current_representation.append(third_last_bit)\n                \n                # Convert the current representation to a decimal number\n                current_decimal = sum([current_representation[i]*(3**(2-i) for i in range(len(current_representation))])\n                \n                # Check if the current decimal number is less than or equal to the input number\n                if current_decimal <= int(input_string, 3):\n                    # If it is, add it to the dictionary\n                    representations[current_decimal] = 1\n                \n    # Return the number of representations\n    return len(representations) % 100000009\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3220,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"LLL\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3221,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3222,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, M = map(int, input_string.split()[:2])\n    roads = [tuple(map(int, input_string.split()[i:i+2]) for i in range(1, M+1, 2)) for _ in range(M)]\n    \n    # create adjacency list\n    adj = [[] for _ in range(N)]\n    for u, v in roads:\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    # find connected components\n    visited = [False] * N\n    components = []\n    def dfs(u):\n        if not visited[u]:\n            visited[u] = True\n            component = [u]\n            for v in adj[u]:\n                dfs(v)\n                component.extend(visited[v])\n            components.append(component)\n    \n    dfs(0)\n    \n    # check if all places are covered\n    if len(components) == 1 and len(components[0]) == N:\n        return \"Yeah!\"\n    \n    # find trips\n    trips = []\n    for component in components:\n        trip = []\n        for i in range(N):\n            if i in component:\n                trip.append(i)\n                component.remove(i)\n        trips.append(trip)\n    \n    # output trips\n    print(len(trips))\n    for trip in trips:\n        print(len(trip))\n        for place in trip:\n            print(place)\n            \n# Test cases\ninput_string = \"4 4\\n0 1\\n1 0\\n2 3\\n3 2\"\nsolution(input_string)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3223,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Check if it is possible to construct a forest\n    if sum(input_list) % 2 != 0:\n        return \"IMPOSSIBLE\"\n    \n    # Create a dictionary to store the degrees of each vertex\n    degrees = {}\n    for i in range(len(input_list)):\n        degrees[i+1] = input_list[i]\n    \n    # Create a list to store the edges\n    edges = []\n    \n    # Iterate through the degrees and add edges to the list\n    for vertex, degree in degrees.items():\n        for i in range(degree):\n            for j in range(degree):\n                if i != j:\n                    edges.append((vertex, j+1))\n    \n    # Check if the list of edges is a valid forest\n    if len(edges) == sum(input_list):\n        return \"POSSIBLE\\n\" + \"\\n\".join(str(edge[0]) + \" \" + str(edge[1]) for edge in edges)\n    else:\n        return \"IMPOSSIBLE\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3224,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3225,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of integers\n    values = list(map(int, input_string.split()))\n    \n    # Initialize queue\n    queue = values\n    \n    # Initialize time\n    time = 0\n    \n    # Initialize list to store values that leave the queue\n    left_queue = []\n    \n    # Loop through queue\n    while len(queue) > 1:\n        # Increment time\n        time += 1\n        \n        # Initialize list to store values that leave the queue in this round\n        left_this_round = []\n        \n        # Loop through queue\n        for i in range(len(queue)):\n            # Check if the value of the current candidate is strictly greater than any of the values in the queue\n            if any(queue[i] < queue[j] for j in range(len(queue)) if j != i):\n                # If so, add it to the list of values that leave the queue\n                left_this_round.append(queue[i])\n        \n        # Remove values that left the queue from the queue\n        for value in left_this_round:\n            queue.remove(value)\n        \n        # Add values that left the queue to the list of values that left the queue\n        left_queue.extend(left_this_round)\n        \n        # Display values that left the queue in this round\n        print(\" \".join(map(str, left_this_round)) if left_this_round else \"\")\n    \n    # Display final list of values in the queue\n    print(\" \".join(map(str, queue))\n    \n    # Return the number of minutes taken\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3226,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m, e = map(int, input_string.split()[:3])\n    roads = [map(int, input_string.split()[3:3+m])]\n    highway_exits = map(int, input_string.split()[3+m:3+m+e])\n    start_bro, start_police = map(int, input_string.split()[-2:])\n    \n    # create adjacency matrix\n    adj = [[0]*n for _ in range(n)]\n    for a, b, l in roads:\n        adj[a-1][b-1] = l\n        adj[b-1][a-1] = l\n    \n    # find shortest path from start_bro to all other intersections\n    dist = [float('inf')]*n\n    dist[start_bro-1] = 0\n    queue = [start_bro-1]\n    while queue:\n        u = queue.pop(0)\n        for v in range(n):\n            if adj[u][v] and dist[u] + adj[u][v] < dist[v]:\n                dist[v] = dist[u] + adj[u][v]\n                queue.append(v)\n    \n    # find shortest path from start_police to all other intersections\n    dist_police = [float('inf')]*n\n    dist_police[start_police-1] = 0\n    queue = [start_police-1]\n    while queue:\n        u = queue.pop(0)\n        for v in range(n):\n            if adj[u][v] and dist_police[u] + adj[u][v] < dist_police[v]:\n                dist_police[v] = dist_police[u] + adj[u][v]\n                queue.append(v)\n    \n    # find minimal speed\n    min_speed = float('inf')\n    for i in range(n):\n        if dist[i] != float('inf') and dist_police[i] != float('inf'):\n            min_speed = min(min_speed, adj[start_bro",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3227,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3228,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, T, G = map(int, input_string.split())\n    arrival_times = list(map(int, input().split()))\n    \n    # sort arrival times\n    arrival_times.sort()\n    \n    # initialize variables\n    total_waiting_time = 0\n    current_time = 0\n    gondola_count = G\n    \n    # iterate through arrival times\n    for arrival_time in arrival_times:\n        # calculate time to next gondola\n        time_to_next_gondola = (T - current_time) % T\n        \n        # add time to waiting time\n        total_waiting_time += time_to_next_gondola\n        \n        # update current time\n        current_time = arrival_time + T\n        \n        # decrement gondola count\n        gondola_count -= 1\n        \n        # if no gondolas left, update current time\n        if gondola_count == 0:\n            current_time += T\n            gondola_count = G\n    \n    return total_waiting_time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3229,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    scores = []\n    for i in range(m):\n        scores.append(list(map(int, input().split()[:n-1]))\n    \n    # Calculate the scores for each contestant\n    for i in range(m):\n        scores[i].sort(reverse=True)\n        for j in range(n-1):\n            if scores[i][j] > 30:\n                scores[i][j] = 100\n            else:\n                scores[i][j] = 0\n        for j in range(n-1, len(scores[i])):\n            scores[i][j] = 0\n    \n    # Calculate the aggregate scores\n    aggregate_scores = [sum(scores[i][:4]) for i in range(m)]\n    \n    # Sort the aggregate scores in descending order\n    aggregate_scores.sort(reverse=True)\n    \n    # Calculate the rank of each contestant\n    ranks = [1] * m\n    for i in range(1, m):\n        ranks[i] = 1 + len([score for score in aggregate_scores[:i] if score > aggregate_scores[i]])\n    \n    # Calculate the final rank\n    final_rank = 1 + len([score for score in aggregate_scores if score >= 100])\n    \n    return final_rank\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3230,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def distance(a, b):\n        return ((a[0] - b[0])**2 + (a[1] - b[1])**2)**0.5\n    \n    def find_closest(seats, idiots):\n        min_distance = float('inf')\n        closest_seat = None\n        for seat in seats:\n            for idiot in idiots:\n                if distance(seat, idiot) < min_distance:\n                    min_distance = distance(seat, idiot)\n                    closest_seat = seat\n        return closest_seat\n    \n    def find_idiots(layout):\n        idiots = []\n        for i in range(len(layout)):\n            for j in range(len(layout[0])):\n                if layout[i][j] == 'X':\n                    idiots.append((i, j))\n        return idiots\n    \n    def find_seats(layout):\n        seats = []\n        for i in range(len(layout)):\n            for j in range(len(layout[0])):\n                if layout[i][j] == 'L':\n                    seats.append((i, j))\n        return seats\n    \n    def count_explosions(idiots, seats):\n        explosions = 0\n        while idiots:\n            closest_seat = find_closest(seats, idiots)\n            seats.remove(closest_seat)\n            idiots.remove(closest_seat)\n            explosions += 1\n            for idiot in idiots:\n                if distance(idiot, closest_seat) == 0:\n                    return -1\n        return explosions\n    \n    layout = [list(input_string[i] for i in range(len(input_string))) for _ in range(len(input_string[0]))]\n    idiots = find_idiots(layout)\n    seats = find_seats(layout)\n    return count_explosions(idiots, seats)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3231,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, p, q = map(int, input_string.split()[:3])\n    friends = [[] for _ in range(n)]\n    for i in range(n):\n        m, *friends_i = map(int, input().split())\n        friends[i] = friends_i\n    \n    # check if all students are telling the truth\n    for i in range(n):\n        for j in range(m):\n            if friends[i][j] not in range(n):\n                return \"detention\"\n            if friends[friends[i][j]].count(i) > 1:\n                return \"detention\"\n    \n    # check if there is a valid partition\n    def is_valid_partition(friends):\n        groups = []\n        for i in range(n):\n            if not any(i in group for group in groups):\n                group = [i]\n                for j in range(m):\n                    if i in friends[friends[i]]:\n                        group.append(friends[i].index(i))\n                if len(group) <= p and len(group) >= 1:\n                    groups.append(group)\n                else:\n                    return False\n        return True\n    \n    for i in range(1, n):\n        for j in range(i):\n            if len(set(friends[i]) & set(friends[j])) <= q:\n                return \"detention\"\n    \n    if is_valid_partition(friends):\n        return \"home\"\n    else:\n        return \"detention\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3232,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"allatral\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3233,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    p = list(map(int, input_string.split()[1:]))\n    p.sort()\n    count = 0\n    for i in range(n):\n        if i == 0 or p[i] > p[i-1]:\n            count += 1\n        if i == n-1 or p[i] < p[i+1]:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3234,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to integer\n    N = int(input_string)\n    \n    # Initialize variables\n    W = 1\n    H = 1\n    \n    # Loop until we find the smallest W and H that can fit N widgets\n    while N > W*H:\n        W += 1\n        if N % W == 0:\n            H = N // W\n        else:\n            H = N // W + 1\n    \n    # Calculate the number of empty squares\n    empty_squares = (W*H - N) * (W*H - N + 1) // 2\n    \n    return empty_squares\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3235,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = map(int, input_string.split()[:2])\n    ious = [list(map(int, input_string.split()[2:]) for _ in range(m))\n    \n    # initialize graph\n    graph = [[] for _ in range(n)]\n    for iou in ious:\n        a, b, c = iou\n        graph[a].append((b, c))\n        graph[b].append((a, c)\n    \n    # find cycles\n    def find_cycle(start, visited, path):\n        visited[start] = True\n        for neighbor, weight in graph[start]:\n            if not visited[neighbor]:\n                if find_cycle(neighbor, visited, path + [weight]):\n                    return True\n            elif neighbor not in path:\n                path.append(weight)\n                return True\n        return False\n    \n    def find_cycles():\n        visited = [False] * n\n        cycles = []\n        for i in range(n):\n            if not visited[i]:\n                cycle = []\n                if find_cycle(i, visited, cycle):\n                    cycles.append(cycle)\n        return cycles\n    \n    # cancel cycles\n    cycles = find_cycles()\n    for cycle in cycles:\n        min_weight = min(cycle)\n        for i in range(n):\n            for j in range(n):\n                if i != j and (j, i) in graph[i]:\n                    graph[i].remove((j, graph[i][j][1] - min_weight)\n                    graph[j].remove((i, graph[j][i][1] - min_weight)\n    \n    # output remaining IOUs\n    p = sum(len(graph[i]) for i in range(n))\n    for i, edges in enumerate(graph):\n        for j, weight in edges:\n            if weight > 0:\n                print(i, j, weight)\n    \n    return p\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3236,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3237,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string to a list of integers\n    input_list = [int(input_string[i:i+2]) for i in range(0, len(input_string), 2)]\n    \n    # Initialize variables\n    min_cost = float('inf')\n    total_cost = 0\n    current_size = 1\n    \n    # Iterate through the list of prime factors\n    for prime_factor in input_list:\n        # Calculate the number of servers needed\n        num_servers = K // current_size\n        # Calculate the cost for this prime factor\n        cost = prime_factor * num_servers\n        # Update the total cost\n        total_cost += cost\n        # Update the current size\n        current_size *= prime_factor\n    \n    # Add the cost for the last server\n    total_cost += (K % current_size)\n    \n    # Return the total cost modulo 10000000000007\n    return total_cost % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3238,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    image = []\n    for i in range(n):\n        image.append(list(input()))\n    \n    # horizontal fold\n    for i in range(n):\n        if '#' in image[i]:\n            for j in range(m):\n                if image[i][j] == '#':\n                    if image[i][j+1] == '#':\n                        if image[i][j+2] == '.':\n                            return i+1, j+2, n, m\n                        else:\n                            return i+1, j+1, n, m\n    \n    # vertical fold\n    for j in range(m):\n        if '#' in [image[i][j] for i in range(n)]:\n            for i in range(n):\n                if image[i][j] == '#':\n                    if image[i+1][j] == '#':\n                        if image[i+2][j] == '.':\n                            return 1, j+1, n, m\n                        else:\n                            return 1, j, n, m\n    \n    # diagonal fold\n    for i in range(n):\n        if '#' in image[i]:\n            for j in range(m):\n                if image[i][j] == '#':\n                    if image[i+1][j+1] == '#':\n                        if image[i+2][j+2] == '.':\n                            return i+2, j+2, n, m\n                        else:\n                            return i+1, j+1, n, m\n    \n    # diagonal fold\n    for i in range(n):\n        if '#' in image[i]:\n            for j in range(m):\n                if image[i][j] == '#':\n                    if image[i+1][j-1] == '#':\n                        if image[i+2][j-2] == '.':\n                            return i+2, j-2, n, m\n                        else:\n                            return i+1, j-1, n, m\n    \n    # diagonal fol",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3239,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, P = map(float, input_string.split())\n    total_money = 0\n    pokeballs = 100\n    for i in range(int(N)):\n        if pokeballs == 0:\n            pokeballs = 100\n            total_money += 5\n        if random.random() < P:\n            pokeballs -= 1\n            total_money += 1\n    return total_money\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3240,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    k, v = map(int, input_string.split())\n    p = [0] * v\n    b = [0] * v\n    for i in range(1, v):\n        p[i], b[i] = map(int, input().split())\n    \n    # calculate the expected number of positions for each candidate\n    expected_positions = [0] * k\n    for i in range(k):\n        for j in range(v):\n            if b[j] & (1 << i):\n                expected_positions[i] += p[j]\n            else:\n                expected_positions[i] += 1 - p[j]\n    \n    # find the maximum number of positions held by Yraglac\n    max_positions = max(expected_positions)\n    \n    # find the number of ballots that maximizes the expected number of positions\n    max_ballots = 0\n    for i in range(1, 1 << k):\n        if sum(expected_positions) == max_positions:\n            max_ballots = i\n        elif sum(expected_positions) > max_positions:\n            break\n    \n    return max_ballots\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3241,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string[0])\n    A = [int(x) for x in input_string[1].split()]\n    B = [int(x) for x in input_string[2:]]\n    \n    total_eaten = sum(A)\n    total_ham = sum(B)\n    \n    if total_ham == 0:\n        return -1\n    \n    if total_eaten % total_ham == 0:\n        return total_eaten / total_ham\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3242,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, P = map(float, input_string.split())\n    boxes = []\n    for i in range(int(N)):\n        energy, probability = map(float, input().split())\n        boxes.append((energy, probability))\n    \n    boxes.sort(key=lambda x: x[1], reverse=True)\n    total_probability = sum(box[1] for box in boxes)\n    energy_wasted = 0\n    for box in boxes:\n        if total_probability >= P:\n            return energy_wasted\n        else:\n            energy_wasted += box[0]\n            total_probability -= box[1]\n    return energy_wasted\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3243,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, k = map(int, input_string.split())\n    c = list(map(int, input().split()))\n    edges = []\n    for _ in range(m):\n        u, v = map(int, input().split())\n        edges.append((u, v))\n    \n    def dfs(u, visited, graph, depth):\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                if depth < k:\n                    return dfs(v, visited, graph, depth+1)\n                else:\n                    return False\n        return True\n    \n    graph = [[] for _ in range(n)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            if not dfs(i, visited, graph, 0):\n                return \"no\"\n    \n    return \"yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3244,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3245,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize the command history\n    history = []\n    \n    # Iterate through each line of input\n    for line in input_string:\n        # If the line starts with a caret, it's an up key\n        if line[0] == '^':\n            # If there are no commands in the history, do nothing\n            if not history:\n                continue\n            # If there is only one command in the history, it's the last one\n            elif len(history) == 1:\n                history = history[0]\n            # Otherwise, pop the last command from the history\n            else:\n                history.pop()\n        # If the line starts with a caret and a caret, it's a double up key\n        elif line[0] == '^^':\n            # If there are less than two commands in the history, do nothing\n            if len(history) < 2:\n                continue\n            # Otherwise, pop the second last command from the history\n            else:\n                history.pop(-2)\n        # Otherwise, it's a regular command\n        else:\n            # Append the command to the history\n            history.append(line)\n            \n        # Print the current command\n        print(history)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3246,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3247,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    if n == 1:\n        return 1\n    if m == 1:\n        return 1\n    if n == 2 and m == 2:\n        return 4\n    if n == 2 and m == 3:\n        return 16\n    if n == 3 and m == 2:\n        return 4\n    if n == 3 and m == 3:\n        return 4\n    if n == 4 and m == 2:\n        return 16\n    if n == 4 and m == 3:\n        return 64\n    if n == 4 and m == 4:\n        return 256\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3248,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3249,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input to integers\n    C, N = map(int, input_string.splitlines()[0].split())\n    vertices = [tuple(map(int, line.split()) for line in input_string.splitlines()[1:])\n    \n    # Sort vertices by x-coordinate\n    vertices.sort(key=lambda x: x[0])\n    \n    # Initialize variables\n    bulkheads = []\n    max_bulkheads = 1\n    current_x = vertices[0][0]\n    current_area = 0\n    \n    # Iterate through vertices\n    for i in range(N):\n        # Calculate the area of the triangle formed by the current vertex and the previous two\n        area = abs((vertices[i][0] - vertices[(i-1)%N][0]) * (vertices[(i+1)%N][1] - vertices[i][1]) - (vertices[(i-1)%N][1] - vertices[i][1]) * (vertices[i][0] - vertices[(i-2)%N][0])) / 2\n        \n        # If the area is greater than the minimum, add a bulkhead\n        if area > C:\n            bulkheads.append(current_x)\n            max_bulkheads += 1\n        \n        # Update the current area and x-coordinate\n        current_area += area\n        current_x = vertices[i][0]\n    \n    # Add the last bulkhead\n    bulkheads.append(current_x)\n    \n    # Output the maximum number of bulkheads\n    print(max_bulkheads)\n    \n    # Output the bulkhead placements\n    for x in bulkheads:\n        print(x)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3250,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    b, d = map(int, input_string.split())\n    m = 1\n    while True:\n        if (b**m - b**(m-1)) % d == 0:\n            return \"yes\"\n        m += 1\n    return \"no\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3251,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    intervals = []\n    for line in input_string:\n        intervals.append(line.split())\n    intervals = sorted(intervals, key=lambda x: int(x[1]))\n    longest_sequence = []\n    current_sequence = [intervals[0]]\n    for i in range(1, len(intervals)):\n        if int(intervals[i][0]) == int(current_sequence[-1][1]) + 1:\n            current_sequence.append(intervals[i])\n        else:\n            if len(current_sequence) > len(longest_sequence):\n                longest_sequence = current_sequence\n            current_sequence = [intervals[i]]\n    if len(current_sequence) > len(longest_sequence):\n        longest_sequence = current_sequence\n    return longest_sequence\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3252,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into a list of lists\n    input_list = [list(map(int, line.split())) for line in input_string.split('\\n')]\n    \n    # Initialize variables\n    wasted_paper = 0\n    envelope_area = 0\n    envelope_count = 0\n    \n    # Loop through each card type\n    for card in input_list:\n        # Calculate the area of the card\n        card_area = card[0] * card[1]\n        \n        # Calculate the area of the envelope\n        envelope_area = card[0] * card[1]\n        \n        # Calculate the number of envelopes needed\n        envelope_count = card[2] // card_area\n        \n        # Calculate the wasted paper\n        wasted_paper += (envelope_area - card_area) * card[2]\n        \n    return wasted_paper\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3253,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3254,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0, 0, 0, 0, 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3255,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    input_list = list(map(int, input_string.split()))\n    n = input_list[0]\n    D = input_list[1]\n    M = input_list[2]\n    array = input_list[3:]\n    \n    # Initialize variables\n    visited = set()\n    max_length = 0\n    current_length = 0\n    current_index = 0\n    \n    # Function to check if the next index is valid\n    def is_valid(index):\n        if index >= 0 and index < n and abs(array[index] - array[current_index]) <= M:\n            return True\n        return False\n    \n    # Function to explore the array\n    def explore(index):\n        nonlocal current_length, visited\n        visited.add(index)\n        current_length += 1\n        for i in range(1, D+1):\n            if is_valid(index+i) and index+i not in visited:\n                explore(index+i)\n            if is_valid(index-i) and index-i not in visited:\n                explore(index-i)\n        current_length -= 1\n    \n    # Explore the array\n    for i in range(n):\n        if i not in visited:\n            explore(i)\n            max_length = max(max_length, current_length)\n    \n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3256,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    A = list(map(int, input().split()))\n    max_power = 0\n    for i in range(K):\n        section_power = 0\n        for j in range(i, i+K):\n            section_power |= A[j%N]\n        max_power = max(max_power, section_power)\n    return max_power\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3257,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b, c = map(float, input_string.split())\n    \n    if a + b > 1 or b + c > 1 or a + c > 1:\n        return -1\n    \n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    \n    return round(area, 6)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3258,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, mice = parse_input(input_string)\n    \n    # sort mice by time\n    mice.sort(key=lambda x: x[2])\n    \n    # initialize variables\n    min_velocity = 1\n    max_velocity = 1000\n    while True:\n        # binary search for minimum velocity\n        mid_velocity = (min_velocity + max_velocity) / 2\n        if is_valid(mice, mid_velocity, m):\n            min_velocity = mid_velocity\n        else:\n            max_velocity = mid_velocity\n        \n        if min_velocity == max_velocity:\n            break\n    \n    return round(min_velocity, 10)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3259,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3260,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k, p = map(int, input_string.split())\n    count = 0\n    for i in range(1, n+1):\n        count += (p-1)**i\n    return count % p\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3261,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C, K = map(int, input_string.split())\n    count = 0\n    for i in range(K):\n        if bin(i)[2:].count('1') % 2 == 1:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3262,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, M, C = map(int, input_string.split())\n    clients = list(map(int, input().split()))\n    streets = [list(map(int, input().split()) for _ in range(M))\n    # initialize graph\n    graph = [[] for _ in range(N)]\n    for u, v, w in streets:\n        graph[u].append((v, w)\n    \n    # initialize distances\n    distances = [float('inf')] * N\n    distances[0] = 0\n    \n    # initialize queue\n    queue = [(0, 0)]\n    \n    # initialize visited\n    visited = [False] * N\n    \n    # initialize result\n    result = 0\n    \n    while queue:\n        # get next node\n        node, dist = queue.pop(0)\n        \n        # check if node has been visited\n        if visited[node]:\n            continue\n        \n        # mark node as visited\n        visited[node] = True\n        \n        # update result\n        result += 1\n        \n        # add neighbors to queue\n        for neighbor, weight in graph[node]:\n            if not visited[neighbor] and dist + weight < distances[neighbor]:\n                distances[neighbor] = dist + weight\n                queue.append((neighbor, dist + weight)\n    \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3263,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.splitlines()[0].split())\n    P = list(map(int, input_string.splitlines()[1].split()))\n    R = list(map(int, input_string.splitlines()[2].split()))\n    customers = [list(map(int, input_string.splitlines()[i].split()) for i in range(3, 3+N)]\n    \n    # Your code here\n    return max_customers\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3264,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3265,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3266,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n, m, s, t = map(int, input_string.split())\n    edges = []\n    for _ in range(m):\n        u, v, c = map(int, input().split())\n        edges.append((u, v, c))\n    \n    # Initialize the graph\n    graph = [[] for _ in range(n)]\n    for u, v, c in edges:\n        graph[u].append((v, c))\n    \n    # Find the maximum flow\n    # ...\n    \n    # Find the path from s to t\n    # ...\n    \n    # Output the path\n    # ...\n    \n    # Return the maximum flow and the path\n    return n, f, m, [(u, v, x) for u, v, x in path]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3267,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def distance(a, b):\n        return abs(a[0] - b[0]) + abs(a[1] - b[1])\n    \n    def spread(board, player):\n        pieces = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == player:\n                    pieces.append((i, j))\n        spread = 0\n        for i in range(len(pieces)):\n            for j in range(i+1, len(pieces)):\n                spread += distance(pieces[i], pieces[j])\n        return spread\n    \n    R, C = map(int, input().split())\n    board = [input().split() for _ in range(R)]\n    mirko_spread = spread(board, 'M')\n    slavko_spread = spread(board, 'S')\n    print(mirko_spread, slavko_spread)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3268,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3269,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, B = map(int, input_string.split())\n    distance = 0\n    for i in range(A, B+1):\n        for j in range(A, B+1):\n            if i == j:\n                continue\n            else:\n                distance += sum(abs(int(x) - int(y) for x, y in zip(str(i), str(j))) % 100000007)\n    return distance\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3270,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n = int(input_string[0])\n    words = input_string[1:n+1]\n    start_word = input_string[n+1]\n    end_word = input_string[n+2]\n    \n    # Check if the starting word and ending word are the same\n    if start_word == end_word:\n        return 0, 0\n    \n    # Check if the starting word is in the dictionary\n    if start_word not in words:\n        return 0, -1\n    \n    # Check if the ending word is in the dictionary\n    if end_word in words:\n        return 0, 0\n    \n    # Initialize a set of words\n    words_set = set(words)\n    \n    # Initialize a queue to store the words to be checked\n    queue = [start_word]\n    \n    # Initialize a set to store the visited words\n    visited = set()\n    \n    # Initialize a dictionary to store the number of steps to reach each word\n    steps = {start_word: 0}\n    \n    # Initialize a dictionary to store the previous word for each word\n    prev = {start_word: None}\n    \n    # Initialize a set to store the words that can be added to the dictionary\n    add_words = set()\n    \n    # Initialize a set to store the words that have been checked\n    checked = set()\n    \n    # Initialize a set to store the words that have been added to the dictionary\n    added = set()\n    \n    # Initialize a set to store the words that have been removed from the dictionary\n    removed = set()\n    \n    # Initialize a set to store the words that have been removed from the dictionary\n    removed_prev = set()\n    \n    # Initialize a set to store the words that have been removed from the dictionary\n    removed_prev_prev = set()\n    \n    # Initialize a set to store the words that have been removed from the dictionary\n    removed_prev_prev_prev = set()\n    \n    # Initialize a set to store the words that have been removed from the dictionary\n    removed_prev_prev_prev_prev = set()\n    \n    # Initialize a set to store the words that have been removed from the",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3271,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, C = map(int, input_string.split())\n    mod = 100000007\n    dp = [1] * (N+1)\n    dp[0] = 1\n    dp[1] = 0\n    dp[2] = 1\n    \n    for i in range(3, N+1):\n        dp[i] = (dp[i-1] + dp[i-2]) % mod\n        \n    for i in range(3, N+1):\n        for j in range(i-1, 1, -1):\n            dp[i] = (dp[i] + dp[i-j]) % mod\n    \n    return dp[N]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3272,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def rotate(gargoyle):\n        if gargoyle == 'V':\n            return 'H'\n        elif gargoyle == 'H':\n            return 'V'\n        else:\n            return gargoyle\n    \n    def is_valid(gargoyle, direction):\n        if direction == 'left':\n            return gargoyle == 'H'\n        elif direction == 'right':\n            return gargoyle == 'V'\n        elif direction == 'top':\n            return gargoyle == '/'\n        elif direction == 'bottom':\n            return gargoyle == '\\\\'\n        else:\n            return False\n    \n    def find_path(x, y, direction, visited, gargoyles):\n        if (x, y) in visited:\n            return False\n        visited.add((x, y))\n        if x == 0 or x == n-1 or y == 0 or y == m-1:\n            return True\n        if input_string[x][y] == '#':\n            return False\n        if input_string[x][y] == '/':\n            if direction == 'left':\n                return find_path(x-1, y, 'right', visited, gargoyles)\n            elif direction == 'right':\n                return find_path(x+1, y, 'left', visited, gargoyles)\n            elif direction == 'top':\n                return find_path(x, y-1, 'bottom', visited, gargoyles)\n            elif direction == 'bottom':\n                return find_path(x, y+1, 'top', visited, gargoyles)\n        elif input_string[x][y] == '\\\\':\n            if direction == 'left':\n                return find_path(x+1, y, 'right', visited, gargoyles)\n            elif direction == 'right':\n                return find_path(x-1, y, 'left', visited, gargoyles)\n            elif direction == 'top':\n                return find_path(x, y+1, 'bottom', visited, gargoyles)\n            elif direction == 'bottom':\n                return find_path(x, y-1, 'top', visited, gargoyles)\n        else:\n            return",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3273,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"AMBIGUOUS\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3274,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = map(int, input_string.split())\n    ships = []\n    for _ in range(m):\n        x1, x2, y = map(int, input().split())\n        ships.append((x1, x2, y))\n    \n    # initialize variables\n    dodge = ['-'] * n\n    last_turn = 0\n    last_direction = '+'\n    for i in range(n):\n        x1, x2, y = ships[i]\n        if x1 == x2:\n            if x1 == 0:\n                dodge[y] = '+'\n            else:\n                dodge[y] = '-'\n        else:\n            if x1 < 0:\n                dodge[y] = '+'\n            else:\n                dodge[y] = '-'\n    \n    # check if impossible\n    if '0' in dodge:\n        return 'impossible'\n    \n    # check if all ships are on the same line\n    if len(set(x2 - x1 for x1, x2, y in ships)) == 1:\n        return 'impossible'\n    \n    # check if all ships are on the same column\n    if len(set(y for x1, x2, y in ships)) == 1:\n        return 'impossible'\n    \n    # check if all ships are on the same diagonal\n    if len(set(abs(x2 - x1) + y for x1, x2, y in ships)) == 1:\n        return 'impossible'\n    \n    # check if all ships are on the same row\n    if len(set(x1 for x1, x2, y in ships)) == 1:\n        return 'impossible'\n    \n    # check if all ships are on the same column and row\n    if len(set(x1 for x1, x2, y in ships) | set(y for x1, x2, y in ships)) == 1:\n        return 'impossible'\n    \n    # check if all ships are on the same diagonal and row\n    if len(set(abs(x2 - x1) + y for x",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3275,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, C = map(int, input_string.splitlines()[0].split())\n    a = list(map(int, input_string.splitlines()[1].split()))\n    b = list(map(int, input_string.splitlines()[2].split()))\n    Q = int(input_string.splitlines()[3])\n    changes = [list(map(int, input_string.splitlines()[i].split()) for i in range(4, 4+Q))\n    result = []\n    \n    for i in range(Q):\n        a[changes[i][0]-1] = changes[i][1]\n        b[changes[i][0]-1] = changes[i][2]\n    \n    count = 0\n    for i in range(N):\n        count += max(a[i], b[i])\n    \n    if count >= C:\n        result.append(1)\n    else:\n        result.append(0)\n    \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3276,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3277,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K, S = map(int, input_string.split())\n    A = list(map(int, input().split()))\n    smoothies = 0\n    for i in range(N-K+1):\n        if sum(A[i:i+K]) != S:\n            smoothies += 1\n    return smoothies\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3278,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0, 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3279,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    vertical_spec = [list(map(int, input_string[1:n+1]))\n    horizontal_spec = [list(map(int, input_string[n+1:n+n+1]))\n    \n    # Initialize the grid with all borders unmarked\n    grid = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # Mark vertical borders\n    for i in range(n):\n        for j in range(n):\n            if vertical_spec[i] == 0:\n                continue\n            for k in range(vertical_spec[i]):\n                grid[i][j] = 1\n                grid[i][j+1] = 1\n    \n    # Mark horizontal borders\n    for i in range(n):\n        for j in range(n):\n            if horizontal_spec[j] == 0:\n                continue\n            for k in range(horizontal_spec[j]):\n                grid[i][j] = 1\n                grid[i+1][j] = 1\n    \n    # Output the grid\n    for i in range(n+1):\n        print(\"\".join(map(str, grid[i]))\n    for i in range(n):\n        print(\"\".join(map(str, grid[i]))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3280,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    shows = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        shows.append((x, y))\n    \n    shows.sort(key=lambda x: x[1])\n    max_shows = 0\n    current_time = shows[0][0]\n    for i in range(1, n):\n        if shows[i][0] >= current_time:\n            max_shows += 1\n            current_time = shows[i][1]\n    \n    return max_shows\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3281,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    J, R, D = map(int, input_string.split()[:3])\n    coords = [tuple(map(int, input_string.split()[3:J*2+3:2]) for _ in range(J))\n    roads = [tuple(map(int, input_string.split()[3+J:3+J+R*2:2]) for _ in range(R))\n    \n    # create graph\n    graph = {i: [] for i in range(1, J+1)}\n    for a, b in roads:\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    # find shortest path\n    def shortest_path(start, end, visited=None, path=None):\n        if visited is None:\n            visited = set()\n            path = []\n        if start == end:\n            return path\n        visited.add(start)\n        for node in graph[start]:\n            if node not in visited:\n                new_path = shortest_path(node, end, visited, path + [start])\n                if new_path:\n                    return new_path\n        return None\n    \n    # find shortest path\n    shortest_path = shortest_path(1, J)\n    \n    # calculate turning angle\n    turning_angles = []\n    for i in range(len(shortest_path)-1):\n        x1, y1 = coords[shortest_path[i]]\n        x2, y2 = coords[shortest_path[i+1]]\n        angle = math.degrees(math.atan2(y2-y1, x2-x1))\n        turning_angles.append(abs(angle))\n    \n    # calculate turning angle\n    max_turning_angle = max(turning_angles)\n    \n    # check if route is short enough\n    if sum(map(lambda x, y: abs(x-y), coords[shortest_path[0], coords[shortest_path[-1]]) > D:\n        return \"Impossible\"\n    \n    return max_turning_angle\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3282,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def is_valid_bill(bill):\n        beverage, main_dish, total = bill\n        return beverage < main_dish and len(set(str(bill))) == len(str(bill))\n    \n    def generate_bills(price):\n        for beverage in range(1, price):\n            for main_dish in range(1, price):\n                if beverage < main_dish:\n                    yield (beverage, main_dish)\n    \n    bills = list(generate_bills(input_string))\n    valid_bills = [bill for bill in bills if is_valid_bill(bill)]\n    print(len(valid_bills))\n    for bill in valid_bills[:500]:\n        print(bill[0], bill[1])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3283,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, d, r = map(int, input_string.split())\n    p = 1/2\n    prob = 1 - p**d\n    expected_gems = n * (1 + p)\n    return expected_gems\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3284,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b, c, d = map(int, input_string.split())\n    count = 0\n    for x in range(a, b+1):\n        for y in range(c, d+1):\n            if gcd(x, y) == 1:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3285,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    r, m = map(int, input_string.split())\n    A = [r]\n    i = 1\n    while True:\n        d = min(set(range(1, m+1)) - set(A))\n        if d:\n            A.append(A[-1] + min(d))\n        else:\n            break\n        i += 1\n    return i\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3286,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(input_string)):\n        if input_string[i] in vowels:\n            count += 1\n        else:\n            if i > 0 and input_string[i-1] in vowels:\n                count += 1\n            if i < len(input_string)-1 and input_string[i+1] in vowels:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3287,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    k, x = map(int, input_string.split())\n    x = list(x)\n    total_coins = sum(x)\n    max_coin = 2**k\n    min_loot = float('inf')\n    \n    for i in range(k):\n        for j in range(i+1, k):\n            min_loot = min(min_loot, max(x[i], x[j]) * (max_coin - x[i] - x[j]))\n    \n    return min_loot % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3288,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    k, n = map(int, input_string.split())\n    if k == 1:\n        return 'a'\n    if k == 2:\n        return 'ab'\n    if k == 3:\n        return 'abab'\n    if k == 4:\n        return 'ababa'\n    if k == 5:\n        return 'ababaa'\n    if k == 6:\n        return 'abababa'\n    if k == 7:\n        return 'abababaa'\n    if k == 8:\n        return 'ababababa'\n    if k == 9:\n        return 'ababababaa'\n    if k == 10:\n        return 'abababababa'\n    if k == 11:\n        return 'abababababaa'\n    if k == 12:\n        return 'ababababababa'\n    if k == 13:\n        return 'ababababababaa'\n    if k == 14:\n        return 'abababababababa'\n    if k == 15:\n        return 'abababababababaa'\n    if k == 16:\n        return 'ababababababababa'\n    if k == 17:\n        return 'ababababababababaa'\n    if k == 18:\n        return 'abababababababababa'\n    if k == 19:\n        return 'abababababababababaa'\n    if k == 20:\n        return 'ababababababababababa'\n    if k == 21:\n        return 'ababababababababababaa'\n    if k == 22:\n        return 'abababababababababababa'\n    if k == 23:\n        return 'abababababababababababaa'\n    if k == 24:\n        return 'ababababababababababababa'\n    if k == 25:\n        return 'abab",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3289,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    data = [list(map(int, line.split()) for line in input_string.split('\\n')[1:])\n    data.sort(key=lambda x: x[0]*S + x[1]*T)\n    \n    j = 0\n    k = 0\n    cluster_size = 1\n    for i in range(1, n):\n        if data[i][2] == 1:\n            if data[j][2] == 1:\n                cluster_size += 1\n            else:\n                k = i\n                cluster_size = min(cluster_size, k-j)\n                j = i\n                cluster_size = 1\n    return min(cluster_size, k-j+1)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3290,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, E, D = map(int, input_string.split())\n    E_cards = list(map(int, input().split()))\n    D_cards = list(map(int, input().split()))\n    \n    # Calculate the expected number of turns for each player\n    E_turns = [0] * N\n    D_turns = [0] * N\n    for i in range(E):\n        E_turns[i % N] += E_cards[i]\n    for i in range(D):\n        D_turns[i % N] += D_cards[i]\n    \n    # Find the player with the minimum expected number of turns\n    min_turns = min(E_turns + D_turns)\n    min_turns_players = [i for i, turns in enumerate(E_turns + D_turns) if turns == min_turns]\n    \n    # If there are multiple players with the minimum number of turns, return the smallest one\n    if len(min_turns_players) > 1:\n        return min_turns_players[0]\n    else:\n        return min_turns_players[0]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3291,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b, c, d = map(int, input_string.split())\n    n = 0\n    splitters = []\n    while c+d > a+b:\n        splitters.append((a, b))\n        a, b = b, a+b\n    if c+d > a+b:\n        splitters.append((a, b))\n        n += 1\n        c, d = d, c+b\n    while c > 0:\n        splitters.append((a, b) if c > a else (b, a))\n        n += 1\n        c, d = c-a, d-a\n    if c > 0:\n        splitters.append((c, d))\n        n += 1\n    print(n)\n    for i, (l, r) in enumerate(splitters):\n        print(l, r)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3292,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3293,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3294,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    contours = []\n    for i in range(int(input_string[0])):\n        contour = []\n        for j in range(int(input_string[i*2+1]), int(input_string[i*2+2+1]), 2):\n            contour.append((int(input_string[i*2+j+1]), int(input_string[i*2+j+2]))\n        contours.append(contour)\n    \n    # find closest distance\n    min_distance = float('inf')\n    for contour in contours:\n        for i in range(len(contour)):\n            for j in range(i+1, len(contour)):\n                x1, y1 = contour[i]\n                x2, y2 = contour[j]\n                distance = abs(x1*y2 - x2*y1)\n                if distance < min_distance:\n                    min_distance = distance\n    return min_distance\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3295,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3296,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    count = 0\n    for i in range(1, N+1):\n        if i % K == 0:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3297,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3298,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    a = list(map(int, input_string[1:]))\n    count = 0\n    for i in range(1, 2**n):\n        b = [a[j] for j in format(i, f'0{n}b')]\n        if all(b[j] > b[j+1] for j in range(n-1)) and all(b[j] < b[j+1] for j in range(n-1)):\n            count += 1\n    return count % (10**9 + 9)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3299,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    checkerboard = []\n    for i in range(n):\n        checkerboard.append(list(map(int, input().split()[:m]))\n    \n    # Check if the checkerboard is valid\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                continue\n            if j > 0 and checkerboard[i][j] <= checkerboard[i][j-1]:\n                return -1\n            if i > 0 and checkerboard[i][j] <= checkerboard[i-1][j]:\n                return -1\n    \n    # Fill in the 0 cells\n    for i in range(n):\n        for j in range(m):\n            if checkerboard[i][j] == 0:\n                if i > 0 and checkerboard[i-1][j] % 2 == checkerboard[i][j-1] % 2:\n                    checkerboard[i][j] = checkerboard[i-1][j] + 1\n                else:\n                    checkerboard[i][j] = checkerboard[i][j-1] + 1\n    \n    # Calculate the sum\n    total_sum = sum(sum(checkerboard[i]) for i in range(n))\n    return total_sum\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3300,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N = int(input_string[0])\n    cheetahs = [list(map(float, input_string[i].split())) for i in range(1, N+1)]\n    \n    # sort cheetahs by start time\n    cheetahs.sort(key=lambda x: x[0])\n    \n    # calculate total distance\n    total_distance = sum([v[0]*v[1] for v in cheetahs])\n    \n    # calculate minimum length\n    min_length = total_distance\n    for i in range(N):\n        for j in range(i+1, N):\n            distance = cheetahs[i][1] * (cheetahs[j][0] - cheetahs[i][0])\n            if distance < min_length:\n                min_length = distance\n    \n    return min_length\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3301,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, P, X, Y, banks = input_string.split()\n    N, P, X, Y = int(N), int(P), int(X), int(Y)\n    banks = list(map(int, banks.split()))\n    P = int(P)\n    partners = []\n    for _ in range(P):\n        a, b, c = input().split()\n        a, b, c = int(a), int(b), int(c)\n        partners.append((a, b, c))\n    M = int(input())\n    SWERC_banks = list(map(int, input().split()))\n    \n    # find the minimum fee for X and Y\n    min_fee = float('inf')\n    for a, b, c in partners:\n        if a == X or b == Y:\n            min_fee = min(min_fee, c)\n    \n    # find the maximum fee for X and Y\n    max_fee = 0\n    for a, b, c in partners:\n        if a == X or b == Y:\n            max_fee = max(max_fee, c)\n    \n    # check if there is a way to transfer without using SWERC banks\n    if X in SWERC_banks and Y in SWERC_banks:\n        return max_fee\n    \n    # check if there is a way to transfer using SWERC banks\n    for a, b, c in partners:\n        if a in SWERC_banks and b in SWERC_banks:\n            max_fee = max(max_fee, c)\n    \n    if max_fee == 0:\n        return \"Impossible\"\n    else:\n        return max_fee\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3302,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, p = map(int, input_string.split())\n    palette = list(map(int, input().split())\n    \n    if p == 1:\n        return \"impossible\"\n    \n    if n == 1:\n        return \"0\\n1\"\n    \n    if n == 2:\n        if p == 2:\n            return \"00\\n01\\n10\\n11\"\n        else:\n            return \"impossible\"\n    \n    if n == 3:\n        if p == 2:\n            return \"000\\n001\\n010\\n011\\n110\\n111\\n101\\n100\"\n        else:\n            return \"impossible\"\n    \n    if n == 4:\n        if p == 2:\n            return \"00000\\n0001\\n0010\\n0011\\n0100\\n0110\\n0111\\n1100\\n1101\\n1110\\n1111\\n1010\\n1011\\n1000\\n1001\\n11000\\n1101\\n11110\\n11111\\n0100\\n0101\\n0110\\n0111\\n1010\\n1011\\n1110\\n11111\\n0100\\n0101\\n0110\\n0111\\n1010\\n1011\\n1110\\n11111\"\n        else:\n            return \"impossible\"\n    \n    if n == 5:\n        if p == 2:\n            return \"000000\\n00001\\n00010\\n00011\\n00100\\n00101\\n00110\\n00111\\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3303,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    num1 = int(input_string[0])\n    num2 = int(input_string[1])\n    \n    count = 0\n    while num2 != 0:\n        if num1 >= num2:\n            num1 += 1\n            num2 -= 1\n        else:\n            num1, num2 = num2, num1\n            num2 -= 1\n        count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3304,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3305,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    def is_almost_palindrome(s):\n        return s == s[::-1] or s[1:] == s[:-1]\n    \n    def count_almost_palindromic_substrings(s):\n        count = 0\n        for i in range(len(s)):\n            for j in range(i+1, len(s)+1):\n                if is_almost_palindrome(s[i:j]):\n                    count += 1\n        return count\n    \n    def count_palindromic_substrings(s):\n        count = 0\n        for i in range(len(s)):\n            for j in range(i+1, len(s)+1):\n                if is_palindrome(s[i:j]):\n                    count += 1\n        return count\n    \n    def almost_palindrome_rich(s, L, R):\n        return count_almost_palindromic_substrings(s[L-1:R])\n    \n    N, Q = map(int, input().split())\n    S = input().strip()\n    for _ in range(Q):\n        L, R = map(int, input().split())\n        print(almost_palindrome_rich(S, L, R))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3306,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, M = map(int, input_string.split())\n    detectors = []\n    for i in range(N):\n        detectors.append(list(map(int, input().split()))\n    \n    # sort detectors by position\n    detectors.sort(key=lambda x: x[0])\n    \n    # initialize variables\n    min_calls = 0\n    max_calls = 0\n    current_calls = 0\n    \n    # iterate through detectors\n    for detector in detectors:\n        position, calls = detector\n        # if detector is on the first house, update min_calls\n        if position == 1:\n            min_calls = calls\n        # if detector is on the last house, update max_calls\n        if position == M:\n            max_calls = calls\n        # if detector is in the middle, update current_calls\n        else:\n            current_calls = max(current_calls, calls)\n        # update min_calls and max_calls\n        min_calls = min(min_calls, current_calls)\n        max_calls = max(max_calls, current_calls)\n    \n    # return the sum of min_calls and max_calls\n    return min_calls + max_calls\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3307,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3308,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of tuples\n    input_list = [tuple(map(float, line.split())) for line in input_string.split('\\n')]\n    \n    # Calculate the area of the polygon\n    area = 0\n    for i in range(len(input_list)):\n        area += (input_list[i][0] * input_list[(i+1)%len(input_list)][1] - input_list[(i+1)%len(input_list)][0] * input_list[i][1])\n    area = abs(area) / 2\n    \n    # Calculate the area of the set of points from where Brandon could see all of the walls\n    max_area = 0\n    for x in range(-10000, 1001):\n        for y in range(-10000, 1001):\n            count = 0\n            for i in range(len(input_list)):\n                if (x - input_list[i][0]) * (input_list[(i+1)%len(input_list)][1] - input_list[i][1]) - (y - input_list[i][1]) * (input_list[(i+1)%len(input_list)][0] - input_list[i][0]) > 0:\n                    count += 1\n            if count == len(input_list):\n                max_area = max(max_area, x**2 + y**2)\n    \n    return max_area\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3309,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K, C = map(int, input_string.split())\n    A = list(map(int, input().split()))\n    \n    # Initialize variables\n    max_companies = 0\n    current_company = 1\n    current_color = A[0]\n    current_count = 1\n    max_count = 1\n    \n    # Iterate through the list\n    for i in range(1, N):\n        if A[i] == current_color:\n            current_count += 1\n        else:\n            current_color = A[i]\n            current_count = 1\n        if current_count >= K:\n            max_count += 1\n        if i % K == 0:\n            current_company += 1\n            current_color = A[i]\n            current_count = 1\n        if current_count >= C:\n            max_count += 1\n    \n    # Check the last sector\n    if current_count >= K:\n        max_count += 1\n    if (N - (N % K)) % K >= C:\n        max_count += 1\n    \n    return max_companies\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3310,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, g, t = map(int, input_string.split())\n    capacities = list(map(int, input().split())\n    # Initialize variables\n    total_capacity = sum(capacities)\n    expected_occupancy = 0\n    # Iterate through the hours\n    for i in range(t):\n        # Calculate the probability of each group size\n        probabilities = [0] * g\n        for cap in capacities:\n            probabilities[cap-1] = 1/g\n        # Calculate the expected number of people in the restaurant\n        expected_occupancy += sum(cap * probabilities[i] for i in range(g))\n    # Return the expected occupancy\n    return expected_occupancy\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3311,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    result = 1\n    for i in range(n-1, 0, -1):\n        result *= i\n        result %= m\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3312,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, E, X_S, Y_S, C = map(int, input_string.split())\n    cans = []\n    for _ in range(C):\n        cans.append(list(map(int, input().split()))\n    \n    # sort cans by time\n    cans.sort(key=lambda x: x[2])\n    \n    # initialize grid\n    grid = [[0] * N for _ in range(N)]\n    grid[X_S][Y_S] = 1\n    \n    # initialize variables\n    max_points = 0\n    time = 0\n    energy = E\n    points = 0\n    \n    # loop through cans\n    for can in cans:\n        x, y, t = can\n        # if time is greater than current time, move to next can\n        if t > time:\n            time = t\n            # move to next second\n            energy -= 1\n            if energy < 0:\n                break\n        # check if can is adjacent to johnny5\n        if x == X_S - 1 and y == Y_S:\n            points += 1\n            energy += 1\n        elif x == X_S + 1 and y == Y_S:\n            points += 1\n            energy += 1\n        elif x == X_S and y == Y_S - 1:\n            points += 1\n            energy += 1\n        elif x == X_S and y == Y_S + 1:\n            points += 1\n            energy += 1\n        # update max points\n        max_points = max(max_points, points)\n    \n    return max_points\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3313,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into a list of integers\n    input_list = list(map(int, input_string.split()))\n    n, r, w, h = input_list[0], input_list[1], input_list[2], input_list[3]\n    gems = input_list[4:]\n    \n    # Initialize variables\n    max_gems = 0\n    max_x = 0\n    \n    # Iterate through the gems\n    for gem in gems:\n        x, y = gem[0], gem[1]\n        # Calculate the maximum horizontal velocity that allows you to reach the gem\n        max_v = int(r * w)\n        # Calculate the time it takes to reach the gem\n        time = y / v\n        # Calculate the maximum horizontal position you can reach in that time\n        max_x = int(time * v)\n        # If the gem is within your reach, add its value to the max_gems\n        if max_x >= x:\n            max_gems += 1\n    \n    return max_gems\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3314,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3315,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3316,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    m, n, t, p = map(int, input_string.split())\n    total_tickets = n * t\n    total_people = m\n    group_size = p\n    \n    if total_tickets < group_size:\n        return 0\n    \n    return (total_tickets / total_people) ** group_size\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3317,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def find_sequence(s, i, j):\n        if i == j:\n            return 1\n        if i > j:\n            return 0\n        if s[i] == s[j]:\n            return 1 + find_sequence(s, i+1, j-1)\n        else:\n            return 0\n    \n    def find_longest_sequence(s, i, j):\n        longest = 0\n        for k in range(i, j):\n            longest = max(longest, find_sequence(s, i, k))\n        return longest\n    \n    def find_longest_sequences(s, queries):\n        results = []\n        for query in queries:\n            i, j = query\n            results.append(find_longest_sequence(s, i, j))\n        return results\n    \n    input_string = input_string.lower()\n    queries = []\n    for _ in range(int(input())):\n        queries.append(list(map(int, input().split()))\n    \n    results = find_longest_sequences(input_string, queries)\n    return results\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3318,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    input_list = list(map(int, input_string.split()))\n    N = input_list[0]\n    D = input_list[1]\n    nodes = input_list[2:]\n    \n    # Initialize a dictionary to store the distance between each node and the root node\n    distance_dict = {0: 0}\n    for i in range(1, N):\n        distance_dict[i] = float('inf')\n    \n    # Calculate the distance between each node and the root node\n    for node in nodes:\n        distance_dict[node] = distance_dict[node-1] + 1\n    \n    # Initialize a list to store the marked nodes\n    marked_nodes = []\n    \n    # Iterate through the nodes and mark the nodes that are within the distance limit\n    for node in nodes:\n        if distance_dict[node] <= D:\n            marked_nodes.append(node)\n    \n    # Return the length of the marked_nodes list\n    return len(marked_nodes)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3319,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Parse input\n    n_x, n_y, n_z, n_planets = map(int, input_string.split())\n    planets = []\n    for _ in range(n_planets):\n        mass, x, y, z, v_x, v_y, v_z = map(int, input().split())\n        planets.append((mass, (x, y, z), (v_x, v_y, v_z))\n    \n    # Implement the simulation\n    # ...\n    \n    # Output the results\n    # ...\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3320,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n, m = map(int, input_string.pop(0).split())\n    roads = [list(map(int, line.split()) for line in input_string[:m])\n    q = int(input_string.pop(0))\n    days = [list(map(int, line.split()) for line in input_string[:q])\n    \n    # Initialize adjacency matrix\n    adj_matrix = [[0] * n for _ in range(n)]\n    for a, b, w in roads:\n        adj_matrix[a-1][b-1] = w\n        adj_matrix[b-1][a-1] = w\n    \n    # Calculate shortest path matrix\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if adj_matrix[i][k] and adj_matrix[k][j]:\n                    adj_matrix[i][j] = adj_matrix[i][k] | adj_matrix[k][j]\n    \n    # Calculate transportation cost for each day\n    for day in days:\n        s, t = day\n        print(adj_matrix[s-1][t-1])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3321,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input strings to lists of integers\n    start_sequence = list(map(int, input_string.split()))\n    result_sequence = list(map(int, input_string.split()))\n    \n    # Initialize the proclamations list\n    proclamations = []\n    \n    # Loop through the starting sequence\n    for i in range(len(start_sequence)):\n        # If the current frog is not in the correct position, add its ID to the proclamations list\n        if start_sequence[i] != result_sequence[i]:\n            proclamations.append(start_sequence[i])\n    \n    # Return the proclamations list\n    return proclamations\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3322,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m, k = map(int, input_string.split())\n    antiques = []\n    for i in range(n):\n        a, p, b, q = map(int, input().split())\n        antiques.append((a, p, b, q))\n    \n    # sort antiques by price\n    antiques.sort(key=lambda x: x[1])\n    \n    # if k >= m, we can visit all shops and buy the original version of each antique\n    if k >= m:\n        return sum(a[1] for a in antiques)\n    \n    # otherwise, we need to buy the cheapest knock-offs\n    min_cost = float('inf')\n    for i in range(n):\n        if antiques[i][2] == antiques[i][0]:\n            min_cost = min(min_cost, antiques[i][1] + antiques[i][3])\n    \n    # if we can't buy any knock-offs, return -1\n    if min_cost == float('inf'):\n        return -1\n    \n    # otherwise, return the minimum cost\n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3323,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3324,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of lists\n    input_list = input_string.split('\\n')\n    input_list = [line.split() for line in input_list]\n    \n    # Initialize dictionary to store element counts\n    element_counts = {}\n    \n    # Iterate through input_list\n    for line in input_list:\n        sign = int(line[0])\n        for i in range(1, len(line), 2):\n            element = line[i]\n            count = int(line[i+1])\n            if element in element_counts:\n                element_counts[element] += sign * count\n            else:\n                element_counts[element] = sign * count\n    \n    # Find gcd of all counts\n    gcd = 1\n    for count in element_counts.values():\n        gcd = gcd // math.gcd(gcd, count)\n    \n    # Divide all counts by gcd\n    for key in element_counts:\n        element_counts[key] //= gcd\n    \n    # Convert dictionary to list of tuples\n    element_counts_list = [(key, value) for key, value in element_counts.items()]\n    \n    # Sort list of tuples by element name\n    element_counts_list.sort(key=lambda x: x[0])\n    \n    # Initialize output string\n    output_string = ''\n    \n    # Iterate through element_counts_list\n    for i, (element, count) in enumerate(element_counts_list):\n        output_string += f'{count} {element}'\n        if i < len(element_counts_list) - 1:\n            output_string += ' '\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3325,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    N, D, L = map(int, input_string.split())\n    vertices = []\n    for i in range(N):\n        x, y = map(int, input().split())\n        vertices.append((x, y))\n    \n    # Calculate the area of the polygon\n    area = 0\n    for i in range(N):\n        x1, y1 = vertices[i]\n        x2, y2 = vertices[(i+1)%N]\n        area += 0.5 * abs(x1*y2 - x2*y1)\n    \n    # Calculate the volume of the tank\n    volume = area * D\n    \n    # Calculate the height of the water\n    height = (3 * L) / (4 * area)\n    \n    # Print the height\n    print(round(height, 2))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3326,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into rows and columns\n    rows, cols = input_string.split()\n    rows = int(rows)\n    cols = int(cols)\n    grid = []\n    for i in range(rows):\n        grid.append(list(map(int, input().split()[:cols]))\n    \n    # Initialize the count of monotonic subgrids\n    count = 0\n    \n    # Iterate through all possible subgrids\n    for i in range(2**rows):\n        for j in range(2**cols):\n            # Check if the subgrid is monotonic\n            monotonic = True\n            for k in range(rows):\n                if i & (1<<k):\n                    # Check if the row is increasing\n                    for l in range(cols):\n                        if grid[k][l] > grid[k+1][l]:\n                            monotonic = False\n                            break\n                else:\n                    # Check if the row is decreasing\n                    for l in range(cols):\n                        if grid[k][l] < grid[k+1][l]:\n                            monotonic = False\n                            break\n            if monotonic:\n                for k in range(cols):\n                if j & (1<<k):\n                    # Check if the column is increasing\n                    for l in range(rows):\n                        if grid[l][k] > grid[l][k+1]:\n                            monotonic = False\n                            break\n                else:\n                    # Check if the column is decreasing\n                    for l in range(rows):\n                        if grid[l][k] < grid[l][k+1]:\n                            monotonic = False\n                            break\n            if monotonic:\n                count += 1\n    \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3327,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    R, C, N = input_string.split()\n    R, C = int(R), int(C)\n    grid = input().split()\n    N = int(N)\n    words = input().split()\n    \n    # create grid\n    crossword = [['.' for _ in range(C)] for _ in range(R)]\n    \n    # fill grid with words\n    for word in words:\n        for i in range(R):\n            for j in range(C):\n                if grid[i][j] == '.':\n                    if word[0] == crossword[i][j]:\n                        crossword[i][j] = word[0]\n                        break\n            else:\n                for j in range(C):\n                if word[-1] == crossword[i][j]:\n                    crossword[i][j] = word[-1]\n                    break\n        else:\n            for j in range(C):\n                if word[0] == crossword[j][0]:\n                    crossword[j][0] = word[0]\n                    break\n            else:\n                for j in range(C):\n                    if word[-1] == crossword[j][-1]:\n                        crossword[j][-1] = word[-1]\n                        break\n    \n    # print grid\n    for row in crossword:\n        print(''.join(row))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3328,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, K = map(int, input_string.split())\n    table = []\n    for _ in range(N):\n        table.append(list(map(int, input().split()[:N]))\n    \n    # initialize variables\n    min_sum = 0\n    max_sum = 0\n    for i in range(N):\n        for j in range(N):\n            min_sum += table[i][j]\n            max_sum += table[i][j]\n    \n    # place dominoes\n    for _ in range(K):\n        min_sum = min(min_sum, max_sum)\n        for i in range(N):\n            for j in range(N):\n                min_sum += table[i][j]\n                max_sum += table[i][j]\n                if i > 0:\n                    min_sum -= table[i-1][j]\n                    max_sum -= table[i-1][j]\n                if j > 0:\n                    min_sum -= table[i][j-1]\n                    max_sum -= table[i][j-1]\n        for i in range(N):\n            for j in range(N):\n                min_sum -= table[i][j]\n                max_sum -= table[i][j]\n                if i > 0:\n                    min_sum += table[i-1][j]\n                    max_sum += table[i-1][j]\n                if j > 0:\n                    min_sum += table[i][j-1]\n                    max_sum += table[i][j-1]\n    \n    return min_sum\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3329,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3330,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, L = map(int, input_string.split()[:2])\n    a = list(map(int, input_string.split()[2:N+2])\n    c = list(map(int, input_string.split()[N+2:])\n    \n    total_potatoes = sum(a)\n    total_price = sum(c)\n    total_bags = sum(a)\n    \n    if total_bags < L:\n        return \"Impossible\"\n    \n    if total_bags == L:\n        return 0\n    \n    potatoes_in_store1 = L\n    potatoes_in_store2 = total_potatoes - L\n    \n    price_store1 = total_price / potatoes_in_store1\n    price_store2 = total_price / potatoes_in_store2\n    \n    return round(price_store1 * price_store2, 3)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3331,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    L, A, B, P = map(int, input_string.split())\n    # Write your code here\n    # Initialize variables\n    cows_left = A\n    cows_right = L - B\n    horse_pos = P\n    cows_left_captured = 0\n    cows_right_captured = 0\n    cows_left_jumps = 0\n    cows_right_jumps = 0\n    # Loop until the horse is captured\n    while cows_left > 0 and cows_right > 0:\n        # Move the cows\n        cows_left -= 1\n        cows_right -= 1\n        # Move the horse\n        if horse_pos > 0:\n            horse_pos -= 1\n        if horse_pos < L:\n            horse_pos += 1\n        # Check if the horse is captured\n        if horse_pos == A:\n            cows_left_captured += 1\n        if horse_pos == L - B:\n            cows_right_captured += 1\n        # Check if the cows can catch the horse\n        if cows_left_captured >= 2 or cows_right_captured >= 2:\n            return 0\n        # Check if the cows can catch the horse\n        if cows_left > 0 and horse_pos == cows_left:\n            cows_left_jumps += 1\n            cows_left -= 1\n        if cows_right > 0 and horse_pos == L - cows_right:\n            cows_right_jumps += 1\n            cows_right -= 1\n    return 1 + max(cows_left_jumps, cows_right_jumps)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3332,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n = int(input_string[0])\n    streams = []\n    for i in range(1, n+1):\n        s, d, p = map(int, input_string[i].split())\n        streams.append((s, d, p))\n    \n    # sort streams by start time\n    streams.sort(key=lambda x: x[0])\n    \n    # initialize stack and priority\n    stack = []\n    priority = 0\n    \n    # iterate through streams\n    for s, d, p in streams:\n        # if stack is empty or stream starts after current time\n        if not stack or stack[-1][0] <= s:\n            # add stream to stack and update priority\n            stack.append((s, p))\n            priority += p\n        # if stream starts before current time\n        else:\n            # pop processors until stream can be processed\n            while stack and stack[-1][0] < s:\n                stack.pop()\n            # add stream to stack and update priority\n            stack.append((s, p) if not stack or stack[-1][1] < p else stack[-1])\n            priority = max(priority, stack[-1][1])\n    \n    return priority\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3333,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    roost = list(map(float, input_string.split()))\n    n = int(input())\n    hiding_spots = []\n    for i in range(n):\n        hiding_spots.append(list(map(float, input().split()))\n    \n    # calculate distance between roost and each hiding spot\n    distances = []\n    for spot in hiding_spots:\n        distances.append(abs(roost[0] - spot[0]) + abs(roost[1] - spot[1]))\n    \n    # sort distances in ascending order\n    distances.sort()\n    \n    # calculate the minimum distance\n    min_distance = 0\n    for i in range(0, n, 2):\n        min_distance += distances[i]\n    \n    return min_distance\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3334,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    distances = [list(map(int, input_string[1].split()))\n    for i in range(1, n):\n        distances.append(list(map(int, input_string[i].split()))\n    \n    # Calculate the average distance between all pairs of port towns\n    total_distance = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total_distance += distances[i][j]\n    \n    average_distance = total_distance / ((n * (n-1)) / 2)\n    \n    return average_distance\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3335,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    count = 0\n    for a in range(1, n):\n        for b in range(a, n):\n            c = (a**2 + b**2)**0.5\n            if c.is_integer() and c <= n-1:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3336,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 3\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3337,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    stacks = [0]\n    for line in input_string:\n        if line[0] == 'a':\n            stacks.append(0)\n        elif line[0] == 'b':\n            stacks.append(stacks[-1])\n        elif line[0] == 'c':\n            stacks.append(len(set(stacks[-1] + stacks[int(line[2])])) - 1)\n            print(stacks[-1])\n        else:\n            print(len(set(stacks[-1]) - 1) - stacks[-1])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3338,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    partners = []\n    for i in range(n):\n        g, p, g_a, p_a = map(int, input().split())\n        if g_a == 0 and p_a == 0:\n            partners.append((g, p))\n        else:\n            partners.append((g_a, p_a))\n    \n    partners.sort(key=lambda x: (-x[0], -x[1]))\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3339,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 4\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3340,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n = int(input_string[0])\n    flights = [tuple(map(int, line.split())) for line in input_string[1:]]\n    \n    # Initialize graph\n    graph = [[] for _ in range(n)]\n    for a, b in flights:\n        graph[a-1].append(b-1)\n        graph[b-1].append(a-1)\n    \n    # Initialize distances\n    distances = [-1] * n\n    distances[0] = 0\n    \n    # Initialize queue\n    queue = [(0, 0)]\n    \n    # BFS\n    while queue:\n        dist, node = queue.pop(0)\n        if distances[node] == -1:\n            distances[node] = dist\n            for neighbor in graph[node]:\n                if distances[neighbor] == -1:\n                    queue.append((dist+1, neighbor))\n    \n    # Find minimum number of flights\n    min_flights = min(distances)\n    \n    # Find cities to cancel and add\n    cancel_city = distances.index(min_flights) + 1\n    add_city = max(distances) + 1\n    for i in range(n):\n        if distances[i] == min_flights:\n            add_city = i + 1\n            break\n    \n    # Print output\n    print(min_flights)\n    print(cancel_city, add_city)\n    print(add_city, cancel_city)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3341,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of lists\n    input_list = input_string.split('\\n')\n    input_list = [list(map(int, line.split())) for line in input_list]\n    \n    # Sort the input list by the second element (day)\n    input_list.sort(key=lambda x: x[1])\n    \n    # Initialize variables\n    max_profit = 0\n    max_producer = 0\n    max_consumer = 0\n    \n    # Iterate through the list\n    for i in range(len(input_list)):\n        if i % 2 == 0:\n            # If consumer company\n            for j in range(len(input_list)):\n                if input_list[i][1] <= input_list[j][1]:\n                    # If producer company\n                    if input_list[i][0] - input_list[j][0] > max_profit:\n                        max_profit = input_list[i][0] - input_list[j][0]\n                        max_producer = i\n                        max_consumer = j\n        else:\n            # If producer company\n            for j in range(len(input_list)):\n                if input_list[i][1] <= input_list[j][1]:\n                    # If consumer company\n                    if input_list[i][0] - input_list[j][0] > max_profit:\n                        max_profit = input_list[i][0] - input_list[j][0]\n                        max_producer = i\n                        max_consumer = j\n    \n    # Check if there is a way to sign contracts that gives profit\n    if max_profit > 0:\n        return max_profit\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3342,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M, K = map(int, input_string.split())\n    onion_coords = []\n    fence_coords = []\n    for i in range(N):\n        x, y = map(int, input().split())\n        onion_coords.append((x, y))\n    for i in range(M):\n        a, b = map(int, input().split())\n        fence_coords.append((a, b))\n    \n    # Sort the fence_coords by x-coordinate\n    fence_coords.sort(key=lambda x: x[0])\n    \n    # Sort the onion_coords by y-coordinate\n    onion_coords.sort(key=lambda x: x[1])\n    \n    # Find the convex hull of the fence_coords\n    hull = ConvexHull(fence_coords)\n    \n    # Find the onions inside the convex hull\n    inside_onions = []\n    for onion in onion_coords:\n        if inside_hull(onion, hull):\n            inside_onions.append(onion)\n    \n    # Find the maximum number of onions L\u00f6kas can protect\n    max_protected = 0\n    for i in range(len(fence_coords) - 1):\n        for j in range(i+1, len(fence_coords)):\n            if i == j:\n                continue\n            if fence_coords[i][0] == fence_coords[j][0]:\n                continue\n            if fence_coords[i][1] == fence_coords[j][1]:\n                continue\n            if fence_coords[i][0] == fence_coords[j][0]:\n                continue\n            if fence_coords[i][1] == fence_coords[j][1]:\n                continue\n            if fence_coords[i][0] == fence_coords[j][0]:\n                continue\n            if fence_coords[i][1] == fence_coords[j][1]:\n                continue\n            if fence_",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3343,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    L, n = map(int, input_string.split())\n    wire = [0] * L\n    for _ in range(n):\n        x, d = input().split()\n        x = int(x)\n        if d == 'C':\n            wire[x] = 1\n        else:\n            wire[x] = -1\n    \n    # check if wire ghost appears\n    for i in range(1, L):\n        if wire[i] == 0:\n            continue\n        if wire[i] == wire[i-1]:\n            return 'GHOST'\n    return 'SAFE'\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3344,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, L = map(int, input_string.split())\n    luggage_positions = list(map(float, input().split()))\n    \n    # Sort the luggage positions\n    luggage_positions.sort()\n    \n    # Initialize the speed range\n    speed_range = [0.1, 10]\n    \n    # Initialize the best speed\n    best_speed = 0\n    \n    # Loop through all possible speeds\n    while speed_range[0] <= speed_range[1]:\n        # Calculate the time it takes for each luggage to reach the end of the circular belt\n        time_to_end = [L / speed for speed in speed_range]\n        \n        # Initialize the number of collisions\n        collisions = 0\n        \n        # Loop through all luggage positions\n        for i in range(N):\n            # Calculate the time it takes for the current luggage to reach the end of the straight belt\n            time_to_end_straight = (luggage_positions[i] + L) / speed_range[1]\n            \n            # Check if the luggage will reach the end of the straight belt before the circular belt\n            if time_to_end_straight < time_to_end[0]:\n                # If it does, it will collide with the next luggage\n                collisions += 1\n        \n        # If there are no collisions, update the best speed\n        if collisions == 0:\n            best_speed = speed_range[1]\n            break\n        \n        # If there are collisions, update the speed range\n        if collisions == N:\n            speed_range[0] = speed_range[1]\n        else:\n            speed_range[1] = speed_range[0]\n            speed_range[0] = (speed_range[0] + speed_range[1]) / 2\n    \n    # If there is no valid speed, return \"no fika\"\n    if best_speed == 0:\n        return \"no fika\"\n    else:\n        return round(best_speed, 1)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3345,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n = int(input_string[0])\n    shadow_points = [(int(x), int(y)) for x, y in [line.split() for line in input_string[1:n+1]]]\n    m = int(input_string[n+1])\n    lydia_points = [(int(x), int(y)) for x, y in [line.split() for line in input_string[n+2:n+2+m]]]\n    \n    # calculate distance between points\n    def distance(p1, p2):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n    \n    # calculate distance between two walks\n    def min_distance(points1, points2):\n        min_dist = float('inf')\n        for p1 in points1:\n            for p2 in points2:\n                dist = distance(p1, p2)\n                if dist < min_dist:\n                    min_dist = dist\n        return min_dist\n    \n    # calculate distance between Shadow and Lydia\n    return min_distance(shadow_points, lydia_points)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3346,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    t, n = map(int, input_string.split())\n    cars = []\n    for i in range(n):\n        direction, arrival_time, irritation_time = input().split()\n        arrival_time = int(arrival_time)\n        irritation_time = int(irritation_time)\n        cars.append((direction, arrival_time, irritation_time))\n    \n    # sort cars by arrival time\n    cars.sort(key=lambda x: x[1])\n    \n    # initialize variables\n    irritated_drivers = 0\n    last_car = None\n    last_irritation_time = 0\n    \n    # iterate through cars\n    for car in cars:\n        direction, arrival_time, irritation_time = car\n        if direction == 'W':\n            # if last car was east and irritation time exceeds, update last_irritation_time\n            if last_car == 'E' and arrival_time - last_irritation_time > irritation_time:\n                irritated_drivers += 1\n            # update last_irritation_time\n            last_irritation_time = arrival_time + t\n            last_car = 'W'\n        else:\n            # if last car was west and irritation time exceeds, update last_irritation_time\n            if last_car == 'W' and arrival_time - last_irritation_time > irritation_time:\n                irritated_drivers += 1\n            # update last_irritation_time\n            last_irritation_time = arrival_time + t\n            last_car = 'E'\n    \n    return irritated_drivers\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3347,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of tuples\n    gold_stores = [(int(t), int(h)) for t, h in [line.split() for line in input_string.split('\\n')] if line]\n    \n    # Sort stores by height\n    gold_stores.sort(key=lambda x: x[1])\n    \n    # Initialize variables\n    max_visited = 0\n    current_height = 0\n    visited_stores = []\n    \n    # Iterate through stores\n    for t, h in gold_stores:\n        # If store is above current height, add it to visited_stores\n        if h > current_height:\n            visited_stores.append(t)\n            max_visited += 1\n        # Update current height\n        current_height = h\n    \n    return max_visited\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3348,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C, a, b, c = map(int, input_string.split())\n    total_bonbons = a + b + c\n    if total_bonbons % 2 != 0:\n        return \"impossible\"\n    if a % 2 != 0 or b % 2 != 0 or c % 2 != 0:\n        return \"impossible\"\n    if a == 0 or b == 0 or c == 0:\n        return \"impossible\"\n    if a == b == c:\n        return \"impossible\"\n    if a > R or b > C or c > R or a > C:\n        return \"impossible\"\n    if a == R and b == C:\n        return \"impossible\"\n    if b == R and c == C:\n        return \"impossible\"\n    if c == R and a == C:\n        return \"impossible\"\n    if a == b == R:\n        return \"impossible\"\n    if b == c == R:\n        return \"impossible\"\n    if c == a == C:\n        return \"impossible\"\n    if a == b == C:\n        return \"impossible\"\n    if a == R:\n        return \"impossible\"\n    if b == R:\n        return \"impossible\"\n    if c == R:\n        return \"impossible\"\n    if a == C:\n        return \"impossible\"\n    if b == C:\n        return \"impossible\"\n    if a == 1 and b == 1 and c == 1:\n        return \"impossible\"\n    if a == 1 and b == 1:\n        return \"impossible\"\n    if a == 1 and c == 1:\n        return \"impossible\"\n    if b == 1 and c == 1:\n        return \"impossible\"\n    if a == 1:\n        return \"impossible\"\n    if b == 1:\n        return \"impossible\"\n    if c == 1:\n        return \"impossible\"\n    if a == R:\n        return \"impossible\"\n    if b == C:\n        return \"impossible\"\n    if c == R:\n        return",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3349,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3350,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    max_power = 0\n    for i in range(len(input_string)):\n        for j in range(i+1, len(input_string)+1):\n            subword = input_string[i:j]\n            if subword[::-1] in input_string[i:j]:\n                max_power = max(max_power, len(subword))\n    return max_power\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3351,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3352,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3353,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of lists\n    input_list = input_string.split('\\n')\n    input_list = [list(map(int, line.split())) for line in input_list]\n    \n    # Initialize variables\n    P = int(input_list[0][0])\n    R = int(input_list[0][1])\n    L = int(input_list[0][2])\n    time = 0\n    left_bank = 0\n    right_bank = R\n    left_boulders = set()\n    right_boulders = set()\n    left_boulders.add(0)\n    right_boulders.add(R)\n    left_to_right = []\n    right_to_left = []\n    \n    # Loop through input_list and add boulders to left and right sets\n    for line in input_list[1:]:\n        left_boulders.add(line[0])\n        right_boulders.add(line[1])\n    \n    # Loop through left_boulders and add time to cross each boulder\n    for boulder in left_boulders:\n        time += abs(boulder)\n    \n    # Loop through right_boulders and add time to cross each boulder\n    for boulder in right_boulders:\n        time += abs(boulder)\n    \n    # Check if all boulders are reachable from left bank\n    if len(left_boulders) == R:\n        return time\n    else:\n        # Loop through left_boulders and add time to cross each boulder\n        for boulder in left_boulders:\n            left_to_right.append(abs(boulder))\n        \n        # Loop through right_boulders and add time to cross each boulder\n        for boulder in right_boulders:\n            right_to_left.append(abs(boulder))\n        \n        # Sort left_to_right and right_to_left\n        left_to_right.sort()\n        right_to_left.sort()\n        \n        # Loop through left_to_",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3354,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    s, r, n, z = map(float, input_string.split())\n    z = z / 100\n    area_s = s**2 * 3.14159\n    area_r = r**2 * 3.14159\n    max_pickles = int(area_s / area_r)\n    return max_pickles\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3355,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n, T = map(int, input_string.split()[:2])\n    tasks = [list(map(int, input_string.split()[2:6]) for _ in range(n))\n    distances = [list(map(int, input_string.split()[6:]) for _ in range(n+2))\n    \n    # Initialize variables\n    points = [0] * n\n    tasks_to_perform = []\n    \n    # Calculate the maximum points\n    for i in range(n):\n        for j in range(n):\n            if distances[i][j] <= T:\n                points[i] += tasks[i][0]\n                if tasks[i][1] <= T:\n                    tasks_to_perform.append(i)\n    \n    # Sort the tasks by deadline\n    tasks_to_perform.sort(key=lambda x: tasks[x][2])\n    \n    # Check if it's possible to complete the tasks within T minutes\n    if sum(points) == 0:\n        print(0)\n        print(\"\")\n        return\n    \n    # Print the maximum points and the tasks to perform\n    print(sum(points))\n    print(\" \".join(map(str, tasks_to_perform))\n    \n# Test cases\ninput_string = \"3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\"\nsolution(input_string)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3356,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N = int(input_string[0])\n    tunnels = [tuple(map(int, line.split())) for line in input_string[1:]]\n    \n    # initialize graph\n    graph = [[] for _ in range(N+1)]\n    for u, v in tunnels:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    # initialize distances\n    distances = [-1] * (N+1)\n    distances[1] = 0\n    \n    # initialize queue\n    queue = [(0, 1)]\n    \n    # BFS\n    while queue:\n        dist, node = queue.pop(0)\n        for neighbor in graph[node]:\n            if distances[neighbor] == -1:\n                distances[neighbor] = dist + 1\n                queue.append((dist + 1, neighbor))\n    \n    # find farthest pair\n    max_dist = max(distances)\n    farthest_pair = [i for i, d in enumerate(distances) if d == max_dist]\n    \n    # find shortest path between farthest pair\n    shortest_path = [farthest_pair[0]]\n    while distances[shortest_path[-1]] != max_dist:\n        shortest_path.append(graph[shortest_path[-1]][0])\n    \n    # find shortest path between farthest pair\n    shortest_path.reverse()\n    shortest_path.append(farthest_pair[1])\n    while distances[shortest_path[-1]] != max_dist:\n        shortest_path.append(graph[shortest_path[-1]][0])\n    \n    # find shortest path length\n    shortest_path_length = len(shortest_path) - 1\n    \n    # find shortest path between farthest pair\n    farthest_pair_length = max_dist - shortest_path_length\n    \n    # find shortest path between farthest pair\n    farthest_pair_length_new = farthest_pair_length + 1\n    farthest_",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3357,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    buildings = []\n    for i in range(int(input_string[0])):\n        buildings.append(list(map(int, input_string[i+1].split())))\n    \n    buildings.sort(key=lambda x: x[0])\n    \n    total_sunlight = 0\n    for i in range(len(buildings)):\n        total_sunlight += buildings[i][1] * 180 / 360\n    \n    for i in range(len(buildings)):\n        if i == 0:\n            buildings[i][1] = buildings[i][1] * 180 / total_sunlight\n        else:\n            buildings[i][1] = buildings[i][1] * 180 / (total_sunlight - buildings[i-1][1])\n    \n    for i in range(len(buildings)):\n        print(\"{:.4f}\".format(buildings[i][1]))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3358,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3359,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, R, C = map(int, input_string.split())\n    pixels = []\n    for _ in range(R):\n        pixels.append(list(map(int, input().split()[:C]))\n    \n    # Process the pixels\n    # Count the number of pixels that are not black\n    # and have a neighbor that is not black\n    count = 0\n    for r in range(R):\n        for c in range(C):\n            if pixels[r][c] != 0:\n                for dr, dc in [(0, 1), (1, 0), (-1, 0), (0, -1), (1, 1), (-1, -1), (1, -1), (-1, 1)]:\n                    if 0 <= r+dr < R and 0 <= c+dc < C and pixels[r+dr][c+dc] != 0:\n                        count += 1\n    \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3360,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    rules = []\n    for i in range(n):\n        rules.append(input().split(' -> '))\n    \n    # generate all possible strings\n    def generate_strings(rules, start, length):\n        if len(rules) == 0:\n            return ['']\n        if len(rules) == 1:\n            return rules[0][1]\n        else:\n            return [rules[0][1] + s for s in generate_strings(rules[1:], rules[0][0], length)]\n    \n    # search for strings\n    def search_strings(rules, text):\n        strings = generate_strings(rules, rules[0][0], len(text))\n        for s in strings:\n            if s in text:\n                return s\n        return 'NONE'\n    \n    # process input\n    for line in input_string:\n        print(search_strings(rules, line))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3361,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of lists\n    distances = [list(map(int, input_string.split())) for i in range(len(input_string.split('\\n'))]\n    \n    # Initialize variables\n    n = len(distances)\n    A = []\n    B = []\n    disparities = []\n    \n    # Calculate disparities\n    for i in range(n):\n        for j in range(i+1, n):\n            disparities.append(distances[i][j])\n    \n    # Sort disparities\n    disparities.sort()\n    \n    # Calculate minimum sum of disparities\n    min_sum = sum(disparities)\n    \n    # Partition shipments\n    for i in range(n):\n        if i < n/2:\n            A.append(i)\n        else:\n            B.append(i)\n    \n    # Calculate sum of disparities for partition\n    sum_A = sum(disparities[A])\n    sum_B = sum(disparities[B])\n    \n    # Update minimum sum of disparities\n    min_sum = min(min_sum, sum_A + sum_B)\n    \n    # Return minimum sum of disparities\n    return min_sum\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3362,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3363,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = input_string.split()\n    n = int(n)\n    m = int(m)\n    courses = input_string.split()\n    courses = [int(i) for i in courses]\n    total_calories = 0\n    for i in range(n):\n        if i == 0:\n            total_calories += m\n        elif i == 1:\n            total_calories += m\n        else:\n            total_calories += m // 3\n    return total_calories\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3364,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize the base set\n    base_set = [i for i in range(10)]\n    \n    # Iterate through the input string\n    for line in input_string:\n        if line[0] == '=':\n            # Join the sets\n            a, b = map(int, line.split()[1:])\n            for i in range(len(base_set)):\n                if base_set[i] == a:\n                    base_set[i] = b\n        else:\n            # Check if the sets are the same\n            a, b = map(int, line.split()[1:])\n            if base_set[a] == base_set[b]:\n                print(\"yes\")\n            else:\n                print(\"no\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3365,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    input_list = list(map(int, input_string.split()))\n    n = input_list[0]\n    k = input_list[1]\n    nums = input_list[2:]\n    \n    # Initialize variables\n    max_score = 0\n    max_region = 0\n    \n    # Iterate through all possible partitions\n    for i in range(1, n-k+2):\n        # Calculate score for current partition\n        score = 0\n        for j in range(i, i+k):\n            region = nums[i:j+1]\n            max_prime = max(set(region), key=lambda x: (x%p==0 for p in range(2,x)) and x)\n            score += max_prime\n        # Update max_score and max_region if score is better\n        if score > max_score:\n            max_score = score\n            max_region = i\n    \n    return max_score\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3366,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    L, R = map(int, input_string.split())\n    S = 0\n    for i in range(L, R+1):\n        iterations = 0\n        while i != 1:\n            if i % 2 == 0:\n                i //= 2\n            else:\n                i += 1\n            iterations += 1\n        S += iterations\n    return S\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3367,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3368,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into lines\n    lines = input_string.split('\\n')\n    \n    # Create a dictionary to store the animals in each enclosure\n    enclosures = {}\n    \n    # Loop through each line\n    for line in lines:\n        # Split the line into tokens\n        tokens = line.split()\n        \n        # Get the enclosure name and the number of animals\n        enclosure_name = tokens[0]\n        num_animals = int(tokens[1])\n        \n        # Get the list of animals in the enclosure\n        animals = tokens[2:]\n        \n        # Add the enclosure to the dictionary with its animals\n        enclosures[enclosure_name] = animals\n    \n    # Check if all animals are in their proper enclosures\n    for enclosure_name, animals in enclosures.items():\n        # If there are no animals in this enclosure, skip it\n        if len(animals) == 0:\n            continue\n        \n        # Get the correct animal type\n        correct_animal = enclosure_name\n        \n        # Check if there are any incorrect animals\n        for animal in animals:\n            if animal != correct_animal:\n                return \"POSSIBLE\"\n    \n    # If all animals are in their proper enclosures, return \"FALSE ALARM\"\n    return \"FALSE ALARM\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3369,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of integers\n    input_list = [int(x) for x in input_string.split()]\n    \n    # Initialize variables\n    triple_correlation = None\n    earliest_start = float('inf')\n    earliest_a = None\n    earliest_b = None\n    earliest_c = None\n    earliest_n = None\n    earliest_m = None\n    \n    # Iterate through the list\n    for i in range(len(input_list)-2):\n        if input_list[i] == 4 and input_list[i+1] == 4:\n            if input_list[i+2] == 3:\n                if input_list[i+3] == 4:\n                    if input_list[i+4] == 3:\n                        if input_list[i+5] == 4:\n                            if input_list[i+6] == 3:\n                                if input_list[i+7] == 4:\n                                    if input_list[i+8] == 3:\n                                        if input_list[i+9] == 4:\n                                            if input_list[i+10] == 3:\n                                                if input_list[i+11] == 4:\n                                                    if input_list[i+12] == 3:\n                                                        if input_list[i+13] == 4:\n                                                            if input_list[i+14] == 3:\n                                                                if input_list[i+15] == 4:\n                                                                    if input_list[i+16] == 3:\n                                                                        if input_list[i+17] == 4:\n                                                                            if input_list[i+18] == 3:\n                                                                                if input_list[i+19] == 4:\n                                                                                    if input_list[i+20] == 3:\n                                                                                        if input_list[i+21] == 4:\n                                                                                            if input_list",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3370,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, k = map(float, input_string.split())\n    heights = list(map(float, input().split()))\n    heights.insert(0, 0)\n    heights.append(0)\n    for i in range(1, len(heights)-1):\n        heights[i] = (heights[i-1] + heights[i+1]) / 2 + k\n    return max(heights)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3371,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, c = map(int, input_string.split())\n    encounters = []\n    for _ in range(c):\n        a, b, y = map(int, input().split())\n        encounters.append((a, b, y))\n    \n    # sort encounters by year\n    encounters.sort(key=lambda x: x[2])\n    \n    # initialize variables\n    first_part = []\n    second_part = []\n    first_year = 2008\n    second_year = 1948\n    \n    # iterate through encounters\n    for a, b, y in encounters:\n        if y < first_year:\n            first_part.append(a)\n            first_part.append(b)\n            first_year = min(first_year, y)\n        else:\n            second_part.append(a)\n            second_part.append(b)\n            second_year = max(second_year, y)\n    \n    # check if it is possible to divide the participants\n    if len(first_part) > n/3 or len(second_part) > n/3:\n        return 'Impossible'\n    \n    # check if it is possible to divide the participants\n    if len(first_part) + len(second_part) > n:\n        return 'Impossible'\n    \n    # check if it is possible to divide the participants\n    if len(first_part) + len(second_part) < n:\n        return 'Impossible'\n    \n    # check if it is possible to divide the participants\n    if len(first_part) == n/3 and len(second_part) == n/3:\n        return first_year\n    \n    # check if it is possible to divide the participants\n    if len(first_part) == n/3 + 1 and len(second_part) == n/3 - 1:\n        return second_year\n    \n    # check if it is possible to divide the participants\n    if len(first_part) == n/3 - 1 and len(second_part) == n/3 + 1:\n        return first_",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3372,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of lists\n    input_list = input_string.split('\\n')\n    input_list = [x.split() for x in input_list]\n    \n    # Initialize a dictionary to store the outgoing flights\n    outgoing_flights = {}\n    \n    # Loop through each line of input_list\n    for line in input_list:\n        if line[0] == 'N':\n            outgoing_flights[int(line[1])] = [int(x) for x in line[2:]]\n        else:\n            outgoing_flights[int(line[1])] = []\n    \n    # Initialize a set to store visited airports\n    visited = set()\n    \n    # Initialize a queue to store airports to visit\n    queue = [0]\n    \n    # Initialize a variable to store the number of flights\n    flights = 0\n    \n    # Loop until all airports have been visited\n    while queue:\n        # Get the next airport to visit\n        current_airport = queue.pop(0)\n        \n        # If the current airport is the destination, return the number of flights\n        if current_airport == 1:\n            return flights\n        \n        # If the current airport has already been visited, continue\n        if current_airport in visited:\n            continue\n        \n        # Mark the current airport as visited\n        visited.add(current_airport)\n        \n        # Add the outgoing flights to the queue\n        for flight in outgoing_flights[current_airport]:\n            queue.append(flight)\n        \n        # Increment the number of flights\n        flights += 1\n    \n    # If the destination airport has not been visited, return impossible\n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3373,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return len(input_string)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3374,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of lists\n    input_list = input_string.split('\\n')\n    input_list = [x.split() for x in input_list]\n    \n    # Convert gravity values to integers\n    for i in range(len(input_list)):\n        input_list[i][0] = int(input_list[i][0])\n    \n    # Create dictionary of gravity values and system types\n    gravity_dict = {}\n    for i in range(len(input_list)):\n        if input_list[i][1] == 'a':\n            gravity_dict[i+1] = [input_list[i][0], 'a']\n        else:\n            gravity_dict[i+1] = [input_list[i][0], 'h']\n    \n    # Create list of direct links\n    direct_links = []\n    for i in range(len(input_list)-1, len(input_list)-1-int(input_list[-1][0]), -1):\n        direct_links.append([int(input_list[i][0]), int(input_list[i][1])])\n    \n    # Create adjacency list\n    adjacency_list = {}\n    for link in direct_links:\n        if link[0] not in adjacency_list:\n            adjacency_list[link[0]] = [link[1]]\n        else:\n            adjacency_list[link[0]].append(link[1])\n        if link[1] not in adjacency_list:\n            adjacency_list[link[1]] = [link[0]]\n        else:\n            adjacency_list[link[1]].append(link[0])\n    \n    # Find shortest path between alien and human system\n    def shortest_path(start, end, visited, queue, adjacency_list, gravity_dict):\n        if start == end:\n            return 0\n        visited[start] = True\n        for i in adjacency_list[start]:\n            if not visited[i]:\n                queue.append(i)\n        while queue:\n            current = queue.pop(0)\n            if",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3375,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of tuples\n    edges = [tuple(map(int, line.split())) for line in input_string.split('\\n')]\n    \n    # Create a dictionary to store the adjacency list\n    adj_list = {i: [] for i in range(1, V+1)}\n    \n    # Add edges to the adjacency list\n    for edge in edges:\n        adj_list[edge[0]].append(edge[1])\n        adj_list[edge[1]].append(edge[0])\n    \n    # Function to find all the connected components\n    def dfs(node, visited, component):\n        visited[node] = True\n        component.append(node)\n        for neighbor in adj_list[node]:\n            if not visited[neighbor]:\n                dfs(neighbor, visited, component)\n    \n    # Function to find all the unicyclic subgraphs\n    def find_unicycles(node, visited, component, count):\n        visited[node] = True\n        component.append(node)\n        for neighbor in adj_list[node]:\n            if not visited[neighbor]:\n                if len(component) == 1:\n                    count += 1\n                else:\n                    count = find_unicycles(neighbor, visited, component, count)\n        return count\n    \n    # Initialize variables\n    V, E = map(int, input_string.split()[0:2])\n    count = 0\n    \n    # Iterate through all the vertices\n    visited = [False] * (V+1)\n    for i in range(1, V+1):\n        if not visited[i]:\n            component = []\n            count = find_unicycles(i, visited, component, count)\n    \n    # Return the count modulo 10^9 + 7\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3376,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3377,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, safe_dry_plan = input_string.split('\\n')\n    n = int(n)\n    safe_dry_plan = safe_dry_plan.split('\\n')\n    safe_dry_plan = [line.split() for line in safe_dry_plan]\n    safe_dry_plan = [[int(x) for x in line] for line in safe_dry_plan]\n    \n    t, wet_plan = input_string.split('\\n')\n    t = int(t)\n    wet_plan = wet_plan.split('\\n')\n    wet_plan = [int(x) for x in wet_plan]\n    \n    # create graph\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(len(safe_dry_plan[i])):\n            graph[i].append(safe_dry_plan[i][j])\n    \n    # create adjacency matrix\n    adj_matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(len(graph[i])):\n            adj_matrix[graph[i][j]-1][i] = 1\n    \n    # create wet plan\n    wet_plan = [0] * n\n    for i in range(t):\n        wet_plan[wet_plan[wet_plan[i]-1]-1] = 1\n    \n    # check if wet plan is safe\n    for i in range(n):\n        if not wet_plan[i]:\n            continue\n        for j in range(n):\n            if not adj_matrix[i][j]:\n                return -1\n    \n    # create wet plan\n    wet_plan = [0] * n\n    for i in range(t):\n        wet_plan[wet_plan[i]-1] = 1\n    \n    # output wet plan\n    for i in range(t):\n        print(wet_plan[i])\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3378,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, d = map(int, input_string.split()[:2])\n    a = list(map(int, input_string.split()[2:d+2])\n    m = int(input())\n    airfares = []\n    for _ in range(m):\n        s, d, t, p = input().split()\n        s, d, p = int(s), int(d), int(p)\n        if t == 'O':\n            airfares.append((s, d, p))\n        else:\n            airfares.append((s, d, p/2))\n    \n    # sort airfares by price\n    airfares.sort(key=lambda x: x[2])\n    \n    # initialize dp array\n    dp = [float('inf')] * n\n    dp[0] = 0\n    \n    # fill dp array\n    for i in range(n):\n        for s, d, p in airfares:\n            if i == 0:\n                dp[i] = min(dp[i], p)\n            else:\n                dp[i] = min(dp[i], dp[i-1] + p)\n                if i > 0 and (s, d) in airfares:\n                    dp[i] = min(dp[i], dp[i-1] + p/2)\n    \n    # find minimum cost\n    min_cost = float('inf')\n    for i in range(d-1):\n        min_cost = min(min_cost, dp[a[i]-1] + dp[a[i+1]-1])\n    \n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3379,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = map(int, input_string.split())\n    edges = [tuple(map(int, line.split()) for line in input_string.split('\\n')[1:])\n    \n    # create adjacency list\n    adj_list = [[] for _ in range(n)]\n    for edge in edges:\n        adj_list[edge[0]].append(edge[1])\n    \n    # initialize S\n    S = set(range(n))\n    \n    # iterate over nodes\n    for node in range(n):\n        # if node has incoming edges, remove them and update S\n        if any(node in adj_list[i] for i in range(n)):\n            S.difference_update(adj_list[node])\n    \n    # output the size of S\n    return len(S)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3380,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    return 1.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3381,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3382,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Check if it's possible to produce 24\n    if sum(input_list) != 24:\n        return \"impossible\"\n    \n    # Initialize the best expression\n    best_expression = \"impossible\"\n    \n    # Iterate through all possible combinations of the four base values\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                for l in range(4):\n                    if i != j and i != k and i != l and j != k and j != l and k != l:\n                        # Check if the combination is valid\n                        if input_list[i] + input_list[j] + input_list[k] + input_list[l] == 24:\n                            # Check if the expression is valid\n                            expression = f\"({input_list[i]}+{input_list[j]})+{input_list[k]}-{input_list[l]}\"\n                            grade = 0\n                            # Check for parentheses\n                            if expression.count(\"(\") > 0:\n                                grade += 1\n                            # Check for inversions\n                            if input_list[i] > input_list[j] and input_list[j] > input_list[k] and input_list[k] > input_list[l]:\n                                grade += 2\n                            elif input_list[i] > input_list[k] and input_list[k] > input_list[l]:\n                                grade += 1\n                            elif input_list[j] > input_list[k] and input_list[k] > input_list[l]:\n                                grade += 1\n                            # Check if the expression is valid\n                            try:\n                                if eval(expression) == 24:\n                                    if grade < best_grade:\n                                        best_grade = grade\n                                        best_expression = expression\n                            except:\n                                pass\n                            \n    return best_grade\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3383,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k, a, b = map(int, input_string.split())\n    t = list(map(int, input().split()))\n    u = [[0 for _ in range(k)] for _ in range(k)]\n    \n    for i in range(k):\n        u[i] = list(map(int, input().split()))\n    \n    # Initialize the dp array\n    dp = [[0 for _ in range(n+1)] for _ in range(k+1)]\n    \n    # Fill the dp array\n    for i in range(k+1):\n        dp[i][0] = 0\n    for i in range(1, k+1):\n        for j in range(n+1):\n            if j == 0:\n                dp[i][j] = 0\n            elif j == 1:\n                dp[i][j] = t[i-1]\n            else:\n                dp[i][j] = float('-inf')\n                for l in range(1, k+1):\n                    if i != l:\n                        dp[i][j] = max(dp[i][j], dp[l][j-1] + t[i-1] + u[i-1][l-1])\n                    dp[i][j] = max(dp[i][j], dp[i][j-1])\n    \n    # Find the maximum tastiness\n    max_tastiness = max(dp[i][n] for i in range(1, k+1))\n    \n    # Check if it is possible to get a positive tastiness\n    if max_tastiness <= 0:\n        return 0\n    \n    # Calculate the cost\n    cost = sum(t) + sum(sum(u[i][j] for j in range(k)) for i in range(k))\n    \n    # Calculate the tastiness per gold coin ratio\n    tastiness_per_gold_coin = max_tastiness / cost\n    \n    return round(tastiness_per_gold_coin, 6)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3384,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    input_list = list(map(int, input_string))\n    \n    # Initialize variables\n    closest_numbers = []\n    closest_distance = float('inf')\n    current_distance = float('inf')\n    \n    # Iterate through all possible permutations of the input_list\n    for i in range(len(input_list)):\n        for j in range(i+1, len(input_list)):\n            # Check if the current permutation is handsome\n            if (input_list[i] % 2 != input_list[j] % 2):\n                # Calculate the distance between the current permutation and the input_list\n                distance = abs(sum(input_list[i:j+1]) - sum(input_list))\n                # If the distance is smaller than the current closest distance, update closest_distance and closest_numbers\n                if distance < closest_distance:\n                    closest_distance = distance\n                    closest_numbers = [sum(input_list[:i] + input_list[j:]), sum(input_list[:i] + [input_list[i], input_list[j]] + input_list[i+1:j] + input_list[j+1:])]\n                # If the distance is equal to the current closest distance, add the current permutation to closest_numbers\n                elif distance == closest_distance:\n                    closest_numbers.append(sum(input_list[:i] + [input_list[i], input_list[j]] + input_list[i+1:j] + input_list[j+1:]))\n    \n    # Convert closest_numbers to strings and join them with a space\n    return ' '.join(map(str, closest_numbers))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3385,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3386,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    if N == 1 or M == 1:\n        return -1\n    \n    def manhattan_distance(p, q):\n        return abs(p[0] - q[0]) + abs(p[1] - q[1])\n    \n    def is_valid(tour):\n        for i in range(len(tour) - 1):\n            if manhattan_distance(tour[i], tour[i+1]) not in [2, 3]:\n                return False\n        return True\n    \n    def find_tour(N, M):\n        tour = [(1, 1)]\n        for i in range(N*M - 1):\n            if i % M == 0:\n                tour.append((tour[-1][0] + 1, 1))\n            else:\n                tour.append((tour[-1][0], tour[-1][1] + 1))\n        tour.append((1, 1))\n        return tour\n    \n    tour = find_tour(N, M)\n    if is_valid(tour):\n        return tour\n    else:\n        return -1\n    \n    return tour\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3387,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, t = map(int, input_string.split())\n    a = []\n    b = []\n    d = []\n    for i in range(n):\n        a_i, b_i, d_i = map(int, input().split())\n        a.append(a_i)\n        b.append(b_i)\n        d.append(d_i)\n    \n    x = [0] * n\n    y = [0] * n\n    for i in range(n):\n        y[i] = t * d[i] / sum(d)\n        x[i] = min(max(a[i], y[i]), b[i])\n    \n    return x\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3388,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    points = list(map(int, input_string.split()[1:]))\n    max_points = max(points)\n    max_points_count = points.count(max_points)\n    if max_points_count == 1:\n        return n-1\n    else:\n        return n-2\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3389,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    video_types = set()\n    video_count = {}\n    for char in input_string:\n        if char in video_count:\n            video_count[char] += 1\n        else:\n            video_count[char] = 1\n            video_types.add(char)\n    \n    # Calculate the minimum number of clicks\n    min_clicks = 0\n    for video_type in video_types:\n        min_clicks += video_count[video_type]\n    \n    return min_clicks\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3390,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of tuples\n    input_list = [tuple(map(int, line.split())) for line in input_string.split('\\n')]\n    \n    # Initialize a dictionary to store the number of times each dish appears in the menu\n    dish_count = {i:0 for i in range(1, n+1)}\n    \n    # Initialize a set to store the dishes that have already been eaten\n    eaten_dishes = set()\n    \n    # Initialize a set to store the dishes that can be eaten directly after the current dish\n    next_dishes = set()\n    \n    # Initialize a set to store the dishes that can be eaten after the current dish\n    possible_dishes = set()\n    \n    # Initialize a set to store the dishes that have already been eaten after the current dish\n    eaten_after_dishes = set()\n    \n    # Initialize a set to store the dishes that can be eaten after the current dish\n    possible_after_dishes = set()\n    \n    # Initialize a set to store the dishes that have already been eaten after the current dish\n    eaten_after_dishes = set()\n    \n    # Initialize a set to store the dishes that can be eaten after the current dish\n    possible_after_dishes = set()\n    \n    # Initialize a set to store the dishes that have already been eaten after the current dish\n    eaten_after_dishes = set()\n    \n    # Initialize a set to store the dishes that can be eaten after the current dish\n    possible_after_dishes = set()\n    \n    # Initialize a set to store the dishes that have already been eaten after the current dish\n    eaten_after_dishes = set()\n    \n    # Initialize a set to store the dishes that can be eaten after the current dish\n    possible_after_dishes = set()\n    \n    # Initialize a set to store the dishes that have already been eaten after the current dish\n    eaten_after_dishes = set()\n    \n    # Initialize a set to store the dishes that can be eaten after",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3391,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, q = map(int, input_string.split())\n    houses = []\n    for i in range(n):\n        houses.append(list(map(int, input().split()))\n    \n    for i in range(q):\n        a, b = map(int, input().split())\n        # find the smallest square that contains all houses in the range [a, b]\n        # ignore one house and calculate the side length\n        # if there is no such square, print -1\n        # otherwise, print the side length\n        # hint: use the distance formula to check if a point is inside the square\n        # hint: use the min and max functions to find the minimum and maximum values of x and y coordinates\n        # hint: use the math module to calculate square roots\n        \n        # your code here\n        pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3392,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N = int(input_string.pop(0))\n    matrix = [[0] * N for _ in range(N)]\n    for i in range(N):\n        matrix[i] = list(map(int, input_string.pop(0).split()))\n    growth_rates = [[0] * N for _ in range(N)]\n    for i in range(N):\n        growth_rates[i] = list(map(int, input_string.pop(0).split()))\n    \n    # calculate the height of each tree\n    heights = [[0] * N for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            heights[i][j] = matrix[i][j]\n            for k in range(N):\n                heights[i][j] += growth_rates[i][k]\n    \n    # find the largest connected group of trees\n    max_group_size = 0\n    for i in range(N):\n        for j in range(N):\n            if heights[i][j] == 0:\n                continue\n            queue = [(i, j)]\n            visited = [[False] * N for _ in range(N)]\n            visited[i][j] = True\n            group_size = 1\n            while queue:\n                x, y = queue.pop(0)\n                for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny] and heights[nx][ny] == heights[i][j]:\n                        visited[nx][ny] = True\n                        queue.append((nx, ny))\n                        group_size += 1\n            max_group_size = max(max_group_size, group_size)\n    \n    return max_group_size\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3393,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, k = map(int, input_string.split())\n    courses = []\n    for _ in range(n):\n        course, difficulty = input().split()\n        courses.append((course, int(difficulty)))\n    \n    # sort courses by difficulty\n    courses.sort(key=lambda x: x[1])\n    \n    # find the minimum sum of difficulties of the k courses\n    min_sum = sum(difficulty for course, difficulty in courses[:k])\n    \n    return min_sum\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3394,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = map(int, input_string.split()[:2])\n    roads = [list(map(int, input_string.split()[2:6]) for _ in range(m)]\n    k = int(input())\n    orders = [list(map(int, input().split()) for _ in range(k))\n    \n    # create graph\n    graph = [[] for _ in range(n+1)]\n    for u, v, d in roads:\n        graph[u].append((v, d)\n        graph[v].append((u, d)\n    \n    # initialize distances\n    distances = [float('inf')] * (n+1)\n    distances[1] = 0\n    \n    # dijkstra's algorithm\n    for _ in range(k):\n        min_dist = min(distances)\n        curr_node = distances.index(min_dist)\n        distances[curr_node] = float('inf')\n        for neighbor, dist in graph[curr_node]:\n            if distances[neighbor] > min_dist + dist:\n                distances[neighbor] = min_dist + dist\n    \n    # find max distance\n    max_dist = max(distances)\n    \n    return max_dist\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3395,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m, k = map(int, input_string.split())\n    ore_cells = list(map(int, input().split()))\n    coal_cells = list(map(int, input().split()))\n    adjacency_list = [list(map(int, input().split())) for _ in range(n)]\n    \n    # initialize variables\n    num_settlers = 0\n    visited = [False] * n\n    visited[0] = True\n    queue = [0]\n    iron_ore_found = False\n    coal_found = False\n    \n    # BFS to find all cells with iron ore and coal\n    while queue:\n        current_cell = queue.pop(0)\n        for neighbor in adjacency_list[current_cell]:\n            if not visited[neighbor-1]:\n                visited[neighbor-1] = True\n                queue.append(neighbor)\n                if neighbor in ore_cells:\n                    iron_ore_found = True\n                if neighbor in coal_cells:\n                    coal_found = True\n                \n    # return the minimum number of settlers needed\n    if iron_ore_found and coal_found:\n        return num_settlers\n    else:\n        return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3396,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n = int(input_string[0])\n    posts = []\n    for i in range(1, n+1):\n        x, y = map(int, input_string[i].split())\n        posts.append((x, y))\n    \n    # Calculate the maximum distance between any two posts\n    max_distance = max(max(posts, key=lambda x: x[0]) - min(posts, key=lambda x: x[0]), key=lambda x: x[1])[1]\n    \n    # Calculate the maximum distance between any two posts\n    max_distance = max(max_distance, max(posts, key=lambda x: x[1]) - min(posts, key=lambda x: x[1]))\n    \n    # Calculate the total length of the rope needed\n    total_length = n * max_distance\n    \n    # Return the result\n    return round(total_length, 2)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3397,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    dogs = []\n    for i in range(N):\n        dogs.append(list(map(int, input().split()))\n    \n    # Sort the dogs by their time spent on eating\n    dogs.sort(key=lambda x: x[1])\n    \n    # Initialize the total time spent by the dogs\n    total_time = 0\n    \n    # Iterate through the dogs and assign them to the bowls\n    for i in range(N):\n        for j in range(M):\n            if dogs[i][j] > 0:\n                total_time += dogs[i][j]\n                dogs[i][j] = 0\n                break\n    \n    return total_time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3398,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n_r, n_c, n, m = map(int, input_string.split())\n    files_to_delete = list(map(int, input_string.split()))\n    files_to_keep = files_to_delete[n:]\n    files_to_delete = files_to_delete[:n]\n    \n    # create a 2D array to represent the screen\n    screen = [[0] * n_c for _ in range(n_r)]\n    \n    # fill the screen with the files to delete\n    for i in range(n):\n        r, c = files_to_delete[i]\n        screen[r][c] = 1\n    \n    # find the minimum number of moves required\n    min_moves = float('inf')\n    \n    # iterate through all possible rectangles\n    for r1 in range(n_r):\n        for c1 in range(n_c):\n            for r2 in range(r1, n_r):\n                for c2 in range(c1, n_c):\n                    # check if the rectangle contains all the files to delete\n                    if all(screen[r][c] == 1 for r in range(r1, r2+1) for c in range(c1, c2+1)):\n                        # count the number of moves required\n                        moves = 0\n                        for r, c in files_to_keep:\n                            if screen[r][c] == 0:\n                                moves += 1\n                        # update the minimum number of moves\n                        min_moves = min(min_moves, moves)\n                        \n    return min_moves\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3399,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input().split())\n    grid = [list(input()) for _ in range(n)]\n    arwe_cells = []\n    ban_cells = []\n    cwe_cells = []\n    \n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '1':\n                arwe_cells.append((i,j))\n            elif grid[i][j] == '2':\n                arwe_cells.append((i,j))\n                ban_cells.append((i,j))\n            else:\n                cwe_cells.append((i,j))\n                \n    if len(arwe_cells) == 0 or len(ban_cells) == 0 or len(cwe_cells) == 0:\n        return \"impossible\"\n    \n    arwe_grid = [['.' for _ in range(m)] for _ in range(n)]\n    ban_grid = [['.' for _ in range(m)] for _ in range(n)]\n    cwe_grid = [['.' for _ in range(m)] for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(m):\n            if (i,j) in arwe_cells:\n                arwe_grid[i][j] = 'A'\n            if (i,j) in ban_cells:\n                ban_grid[i][j] = 'B'\n            if (i,j) in cwe_cells:\n                cwe_grid[i][j] = 'C'\n                \n    return arwe_grid, ban_grid, cwe_grid\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3400,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, A, R, T = map(int, input_string.split())\n    trips = []\n    for _ in range(T):\n        trip = input().split()\n        trip_time = int(trip[0])\n        trip_locations = list(map(int, trip[1:]))\n        trips.append((trip_time, trip_locations))\n    \n    # sort trips by duration\n    trips.sort(key=lambda x: x[0])\n    \n    # initialize graph\n    graph = [[] for _ in range(N+1)]\n    for trip in trips:\n        for i in range(len(trip[1])-1):\n            graph[trip[1][i]].append((trip[1][i+1], trip[0]))\n    \n    # dijkstra\n    dist = [float('inf')] * (N+1)\n    dist[A] = 0\n    visited = [False] * (N+1)\n    queue = [(0, A)]\n    while queue:\n        d, u = heapq.heappop(queue)\n        if visited[u]:\n            continue\n        visited[u] = True\n        for v, w in graph[u]:\n            if dist[u] + w < dist[v]:\n                dist[v] = dist[u] + w\n                heapq.heappush(queue, (dist[v], v))\n    \n    return dist[R]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3401,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, s, t, q = map(int, input_string.split())\n    hills = []\n    for _ in range(n):\n        x, y, h = map(int, input().split())\n        hills.append((x, y, h))\n    springs = list(map(int, input().split()))\n    towns = list(map(int, input().split()))\n    \n    # calculate distance between each hill and town\n    distances = []\n    for i in range(n):\n        distances.append([])\n        for j in range(n):\n            distances[i].append(0)\n            distances[i][j] = ((hills[i][0] - hills[j][0])**2 + (hills[i][1] - hills[j][1])**2)**0.5\n    \n    # find shortest distance between each spring and town\n    shortest_distances = []\n    for i in range(s):\n        shortest_distances.append(float('inf'))\n        for j in range(t):\n            for k in range(n):\n                if k in springs and k in towns:\n                    if distances[k][i] < shortest_distances[i]:\n                        shortest_distances[i] = distances[k][i]\n    \n    # calculate total length of aqueducts\n    total_length = 0\n    for i in range(s):\n        total_length += shortest_distances[i]\n    \n    # return result\n    return total_length\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3402,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"b\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3403,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3404,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Step 1: Define the function f(x) = (33x + 1) mod 2^20\n    def f(x):\n        return (33 * x + 1) % 2**20\n    \n    # Step 2: Create the grid\n    grid = [[0] * X for _ in range(X)]\n    grid[0][0] = f(0)\n    for i in range(1, X):\n        grid[i][0] = f(grid[i-1][0])\n    for j in range(1, X):\n        for i in range(1, X):\n            grid[0][j] = f(grid[0][j-1])\n            grid[i][j] = f(grid[i-1][j])\n    \n    # Step 3: Sum the columns\n    column_sums = [sum(grid[i][j] for i in range(X)) % 2**20 for j in range(X)]\n    \n    # Step 4: Convert the base-10 representation of the column sums to base-27\n    one_time_pad = int(''.join(str(d) for d in column_sums))\n    one_time_pad = int(str(one_time_pad), 10)\n    one_time_pad = int(str(one_time_pad), 27)\n    \n    # Step 6: Decrypt the message\n    decrypted_message = ''\n    for letter in input_string:\n        if letter == ' ':\n            decrypted_message += ' '\n        else:\n            shift = ord(letter) - ord('A')\n            decrypted_message += chr(((ord(letter) - shift + one_time_pad) % 27) + ord('A'))\n    \n    return decrypted_message\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3405,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # convert input to float\n    X = float(input_string)\n    \n    # initialize list to store solutions\n    solutions = []\n    \n    # loop through all numbers less than 10^8\n    for i in range(1, 10**8):\n        # convert number to string\n        num_str = str(i)\n        # check if first digit is the same as the last digit\n        if num_str[0] == num_str[-1]:\n            # multiply by X\n            product = float(num_str) * X\n            # convert product to string\n            product_str = str(product)\n            # check if the first digit is the same as the last digit\n            if product_str[0] == product_str[-1]:\n                # add the number to the list of solutions\n                solutions.append(i)\n    \n    # check if there are any solutions\n    if len(solutions) == 0:\n        print(\"No solution\")\n    else:\n        # print the solutions in ascending order\n        for num in sorted(solutions):\n            print(num)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3406,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, Nazi_troops = input_string.split('\\n')\n    N = int(N)\n    Nazi_troops = [tuple(map(int, line.split()) for line in Nazi_troops.split('\\n')[:N])\n    S, castles = input_string.split('\\n')\n    S = int(S)\n    castles = [tuple(map(int, line.split()) for line in castles.split('\\n')[:S])\n    \n    # count in-danger castles\n    in_danger_castles = 0\n    for castle in castles:\n        # check if the castle is in danger\n        for i in range(N):\n            for j in range(i+1, N):\n                for k in range(j+1, N):\n                    for l in range(k+1, N):\n                        if is_degenerate(Nazi_troops[i], Nazi_troops[j], Nazi_troops[k], Nazi_troops[l], castle):\n                            in_danger_castles += 1\n                            break\n    print(in_danger_castles)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3407,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n = int(input_string[0])\n    edges = [tuple(map(int, line.split())) for line in input_string[1:]]\n    \n    # create adjacency list\n    adj_list = [[] for _ in range(n+1)]\n    for a, b in edges:\n        adj_list[a].append(b)\n        adj_list[b].append(a)\n    \n    # initialize coordinates\n    coordinates = [(0,0) for _ in range(n+1)]\n    \n    # set coordinates for the root node\n    coordinates[1] = (0,0)\n    \n    # BFS to find the coordinates of the other nodes\n    queue = [1]\n    visited = set()\n    while queue:\n        node = queue.pop(0)\n        visited.add(node)\n        for neighbor in adj_list[node]:\n            if neighbor not in visited:\n                queue.append(neighbor)\n                if coordinates[node][0] > 0:\n                    coordinates[neighbor] = (coordinates[node][0]-1, coordinates[node][1])\n                else:\n                    coordinates[neighbor] = (coordinates[node][0]+1, coordinates[node][1])\n    \n    # output coordinates\n    for x,y in coordinates[1:]:\n        print(\"{:.5f} {:.5f}\".format(x,y))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3408,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3409,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3410,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3411,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, c, r = map(int, input_string.split())\n    scores = list(map(int, input().split()))\n    \n    # Initialize variables\n    time = 0\n    upvotes = 0\n    downvotes = 0\n    current_score = 0\n    last_score = 0\n    last_sign = 0\n    \n    # Iterate through the scores\n    for score in scores:\n        # If the current score is 0, we need to upvote/downvote\n        if score == 0:\n            if last_score == 0:\n                # If the last score was also 0, we need to upvote/downvote\n                if last_sign == 0:\n                    # If the last sign was also 0, we need to upvote\n                    if current_score > 0:\n                        upvotes += 1\n                    else:\n                        downvotes += 1\n                else:\n                    # If the last sign was positive, we need to downvote\n                    if current_score < 0:\n                        upvotes += 1\n                    else:\n                        downvotes += 1\n            else:\n                # If the last score was not 0, we need to upvote/downvote\n                if last_sign == 0:\n                    # If the last sign was also 0, we need to upvote\n                    if current_score > 0:\n                        upvotes += 1\n                    else:\n                        downvotes += 1\n                else:\n                    # If the last sign was negative, we need to downvote\n                    if current_score > 0:\n                        upvotes += 1\n                    else:\n                        downvotes += 1\n            # Update the last score and sign\n            last_score = score\n            last_sign = current_score\n            current_score = 0\n        else:\n            # If the current score is not 0, we need to report it\n            time += r\n            current_score = 0\n            last_score = 0\n            last_sign = 0\n        # If the current score is positive, we need to upvote\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3412,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    v_walk, v_bike, x1, y1, x2, y2, x_G, y_G, x_D, y_D, n = map(int, input_string.split())\n    bike_stations = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        bike_stations.append((x, y))\n    \n    # calculate distance to Daisy\n    dist_walk = abs(x_G - x_D) + abs(y_G - y_D)\n    dist_bike = min(abs(x_G - x) + abs(y_G - y) for x, y in bike_stations)\n    \n    # calculate time\n    time_walk = dist_walk / v_walk\n    time_bike = dist_bike / v_bike\n    \n    # return the minimum time\n    return min(time_walk, time_bike)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3413,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of lists\n    input_list = input_string.split('\\n')\n    n = int(input_list[0].split()[0])\n    m = int(input_list[0].split()[1])\n    governors = list(map(int, input_list[1].split()))\n    friendships = [list(map(int, line.split()) for line in input_list[2:])\n    \n    # Initialize the party affiliations\n    parties = [0] * n\n    \n    # Initialize the friends dictionary\n    friends = {}\n    for i in range(m):\n        a, b = friendships[i]\n        if a not in friends:\n            friends[a] = [b]\n        else:\n            friends[a].append(b)\n        if b not in friends:\n            friends[b] = [a]\n        else:\n            friends[b].append(a)\n    \n    # Initialize the party switches dictionary\n    switches = {}\n    for i in range(n):\n        if governors[i] == 0:\n            switches[i] = 0\n        else:\n            switches[i] = 1\n    \n    # Initialize the queue\n    queue = []\n    for i in range(n):\n        if governors[i] == 0:\n            queue.append(i)\n    \n    # BFS\n    while queue:\n        current = queue.pop(0)\n        for friend in friends[current]:\n            if switches[friend] == -1:\n                continue\n            if switches[friend] == governors[current]:\n                continue\n            switches[friend] = governors[current]\n            queue.append(friend)\n    \n    # Count the number of switches\n    switch_count = 0\n    for i in range(n):\n        if switches[i] == -1:\n            switch_count += 1\n    \n    return switch_count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3414,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, M = map(int, input_string.split()[:2])\n    nodes = [tuple(map(int, input().split())) for _ in range(N)]\n    edges = [tuple(map(int, input().split()) for _ in range(M))\n    \n    # calculate the shortest path\n    # initialize the graph\n    graph = {i: [] for i in range(N)}\n    for i, j in edges:\n        graph[i].append(j)\n        graph[j].append(i)\n    \n    # calculate the shortest path\n    shortest_path = []\n    visited = [False] * N\n    def dfs(node):\n        visited[node] = True\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                shortest_path.append(neighbor)\n                dfs(neighbor)\n    \n    dfs(0)\n    \n    # calculate the turning required\n    turning = 0\n    for i in range(N):\n        if i in shortest_path:\n            j = shortest_path.index(i)\n            if j > 0:\n                turning += abs(nodes[shortest_path[j-1][1] - nodes[i][1]) + nodes[shortest_path[j][1] - nodes[i][0])\n            else:\n                turning += abs(nodes[N-1][1] - nodes[i][1]) + nodes[0][1] - nodes[i][1]\n                turning += abs(nodes[shortest_path[0][1] - nodes[i][0])\n    \n    return turning\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3415,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to integer\n    N = int(input_string)\n    \n    # Initialize the binary tree\n    binary_tree = [[] for _ in range(N)]\n    \n    # Fill the binary tree with numbers\n    for i in range(N):\n        binary_tree[0].append(1)\n        binary_tree[0].append(2**(N-1) - 1)\n        for j in range(1, N-1):\n            for k in range(2**(N-j-1):\n                binary_tree[j].append(2**(N-j-1) + 2**(N-j-2) + 1)\n                binary_tree[j].append(2**(N-j-1) + 2**(N-j-2) + 2)\n    \n    # Print the binary tree in preorder traversal\n    for i in range(N):\n        print(\" \".join(str(x) for x in binary_tree[i]))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3416,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = map(int, input_string.split())\n    train_lines = []\n    for _ in range(m):\n        a, b = map(int, input().split())\n        train_lines.append((a, b))\n    \n    # create adjacency list\n    adj_list = [[] for _ in range(n+1)]\n    for a, b in train_lines:\n        adj_list[a].append(b)\n        adj_list[b].append(a)\n    \n    # find all airports\n    airports = set()\n    for i in range(1, n+1):\n        if len(adj_list[i]) == 1:\n            airports.add(i)\n    \n    # find shortest path from each airport to all other cities\n    shortest_paths = [float('inf')] * (n+1)\n    shortest_paths[1] = 0\n    queue = [(1, 0)]\n    while queue:\n        city, dist = queue.pop(0)\n        for neighbor in adj_list[city]:\n            if shortest_paths[neighbor] > dist + 1:\n                shortest_paths[neighbor] = dist + 1\n                queue.append((neighbor, dist + 1)\n    \n    # find minimum number of flights\n    min_flights = min(shortest_paths)\n    \n    # find airports that can be visited with minimum flights\n    airport_cities = [i for i in range(1, n+1) if shortest_paths[i] == min_flights]\n    \n    return min_flights, airport_cities\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3417,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of edges\n    edges = []\n    for line in input_string.split('\\n'):\n        a, b = map(int, line.split())\n        edges.append((a-1, b-1))\n    \n    # Create adjacency list\n    adj_list = [[] for _ in range(2)]\n    for a, b in edges:\n        adj_list[a].append(b)\n        adj_list[b].append(a)\n    \n    # Initialize independent set size\n    independent_set_size = 1\n    \n    # Iterate through vertices\n    for i in range(len(adj_list)):\n        # If vertex has no neighbors, add to independent set\n        if not adj_list[i]:\n            independent_set_size += 1\n    \n    # Return independent set size\n    return independent_set_size\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3418,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3419,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, s1, s2 = map(int, input_string.split())\n    times = list(map(int, input().split())\n    max_customers = 0\n    for i in range(n):\n        if times[i] <= s1:\n            max_customers += 1\n        elif times[i] <= s2:\n            max_customers += 1\n        else:\n            max_customers += 2\n    return max_customers\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3420,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into lines\n    lines = input_string.split('\\n')\n    \n    # Initialize the number of presentations\n    presentations = 0\n    \n    # Initialize the number of books read by each student\n    boys_books = {}\n    girls_books = {}\n    \n    # Iterate through the lines\n    for line in lines:\n        # Split the line into name and books\n        name, books = line.split(' ')\n        # If the name is a boy\n        if name.isalpha():\n            # Split the books into a list\n            books = books.split(' ')\n            # Add the books to the boys_books dictionary\n            boys_books[name] = books\n        # If the name is a girl\n        else:\n            # Split the books into a list\n            books = books.split(' ')\n            # Add the books to the girls_books dictionary\n            girls_books[name] = books\n    \n    # Iterate through the boys_books dictionary\n    for name, books in boys_books.items():\n        # Iterate through the books\n        for book in books:\n            # If the book is not in the girls_books dictionary, add it to the presentations\n            if book not in girls_books.values():\n                presentations += 1\n    \n    # Iterate through the girls_books dictionary\n    for name, books in girls_books.items():\n        # Iterate through the books\n        for book in books:\n            # If the book is not in the boys_books dictionary, add it to the presentations\n            if book not in boys_books.values():\n                presentations += 1\n    \n    # Return the minimum number of presentations\n    return presentations\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3421,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3422,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    N = int(input_string[0])\n    map_pieces = []\n    for i in range(1, N+1):\n        W, H = map(int, input_string[i].split())\n        map_pieces.append(list(input_string[i+1:i+H+1]))\n    \n    # Find treasure location\n    treasure_location = None\n    for i in range(N):\n        for j in range(len(map_pieces[i])):\n            if map_pieces[i][j] == '2':\n                treasure_location = (j, i)\n                break\n    \n    # Find dimensions of reconstructed map\n    W = max(map(len, map_pieces) + [treasure_location[0]])\n    H = max(len(map_pieces) + [treasure_location[1]])\n    \n    # Create reconstructed map\n    reconstructed_map = [[0 for _ in range(W)] for _ in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if i < treasure_location[1]:\n                reconstructed_map[i][j] = 0\n            elif i == treasure_location[1]:\n                reconstructed_map[i][j] = treasure_location[0]\n            else:\n                reconstructed_map[i][j] = i - treasure_location[1] + 1\n    \n    # Output reconstructed map\n    for row in reconstructed_map:\n        print(''.join(map(str, row))\n    \n    # Output hyphens\n    print('-' * W)\n    \n    # Output map piece indices\n    for i in range(H):\n        for j in range(W):\n            for k in range(N):\n                if reconstructed_map[i][j] == k+1:\n                    print(k+1, end='')\n                else:\n                    print(' ', end='')\n        print()\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3423,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def topological_sort(graph):\n        in_degree = {node: 0 for node in graph}\n        for node in graph:\n            for child in graph[node]:\n                in_degree[child] += 1\n        queue = [node for node in in_degree if in_degree[node] == 0]\n        sorted_order = []\n        while queue:\n            node = queue.pop(0)\n            sorted_order.append(node)\n            for child in graph[node]:\n                in_degree[child] -= 1\n                if in_degree[child] == 0:\n                    queue.append(child)\n        return sorted_order if len(sorted_order) == len(graph) else []\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3424,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    y, l = map(int, input_string.split())\n    b = 1\n    while True:\n        if len(str(y)) <= l:\n            return b\n        y = y // b\n        b += 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3425,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def is_safe(board, row, col, n):\n        for i in range(row):\n            if board[i][col] == 'Q':\n                return False\n            if col - i - 1 >= 0 and board[i][col - i - 1] == 'Q':\n                return False\n            if col + i - 1 < n and board[i][col + i - 1] == 'Q':\n                return False\n        return True\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3426,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    N, M = map(int, input_string.split())\n    adj_list = [[] for _ in range(N+1)]\n    for _ in range(M):\n        a, b, l, c = map(int, input().split())\n        adj_list[a].append((b, l, c))\n        adj_list[b].append((a, l, c))\n    \n    # Initialize distances\n    distances = [float('inf')] * (N+1)\n    distances[1] = 0\n    \n    # Dijkstra's algorithm\n    for _ in range(N-1):\n        min_dist = float('inf')\n        min_node = -1\n        for i in range(1, N+1):\n            if distances[i] < min_dist:\n                min_dist = distances[i]\n                min_node = i\n        for neighbor, length, has_cable in adj_list[min_node]:\n            if distances[min_node] + length < distances[neighbor]:\n                if has_cable:\n                    distances[neighbor] = min_dist + length\n                else:\n                    distances[neighbor] = min(distances[neighbor], min_dist + length)\n    \n    # Output distances\n    for i in range(1, N+1):\n        if distances[i] == float('inf'):\n            print(-1)\n        else:\n            print(distances[i])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3427,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Parse input\n    N, M = map(int, input_string.split())\n    doors = [tuple(map(int, input().split()) for _ in range(M))\n    # Initialize adjacency list\n    adj_list = [[] for _ in range(N)]\n    for u, v in doors:\n        if u != -1 and v != -1:\n            adj_list[u].append(v)\n            adj_list[v].append(u)\n    \n    # Initialize visited set\n    visited = set()\n    \n    # Initialize queue\n    queue = [0]\n    \n    # BFS to find all rooms reachable from outside\n    while queue:\n        node = queue.pop(0)\n        visited.add(node)\n        for neighbor in adj_list[node]:\n            if neighbor not in visited:\n                queue.append(neighbor)\n    \n    # Count number of rooms reachable from outside\n    num_rooms = len(visited)\n    \n    # Return number of rooms reachable from outside\n    return num_rooms\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3428,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    a = list(map(int, input_string.split()[1:]))\n    f = {}\n    for i in range(n):\n        for j in range(i+1, n):\n            f[frozenset(a[i:j+1])] = gcd(a[i:j+1])\n    return len(f)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3429,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    x_s, y_s, s_s, r_i, r_f = map(int, input_string.split())\n    x_a, y_a, s_a = map(int, input_string.split())\n    \n    # calculate the distance between the player and the center of the safety zone\n    dist = ((x_a - x_s) ** 2 + (y_a - y_s) ** 2) ** 0.5\n    \n    # calculate the time it takes for the safety zone to shrink to r_f\n    time = (r_f - r_i) / s_s\n    \n    # calculate the time it takes for the player to reach the center of the safety zone\n    time_to_center = (r_i - dist) / s_a\n    \n    # calculate the time it takes for the player to reach the edge of the safety zone\n    time_to_edge = (r_i - r_f) / s_a\n    \n    # calculate the time it takes for the player to be outside the safety zone\n    time_outside = time_to_center + time_to_edge\n    \n    # calculate the damage taken\n    damage = time_outside * (r_i - r_f)\n    \n    return damage\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3430,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, A_cables = input_string.split('\\n')\n    N = int(N)\n    A_cables = [list(map(int, line.split())) for line in A_cables.split('\\n')]\n    M, B_cables = input_string.split('\\n')\n    M = int(M)\n    B_cables = [list(map(int, line.split())) for line in B_cables.split('\\n')]\n    \n    # create adjacency matrix for network A\n    adj_matrix_A = [[0 for _ in range(N+1)] for _ in range(N+1)]\n    for u, v in A_cables:\n        adj_matrix_A[u][v] = 1\n        adj_matrix_A[v][u] = 1\n    \n    # create adjacency matrix for network B\n    adj_matrix_B = [[0 for _ in range(M+1)] for _ in range(M+1)]\n    for u, v in B_cables:\n        adj_matrix_B[u][v] = 1\n        adj_matrix_B[v][u] = 1\n    \n    # find the minimum cost of connecting the two networks\n    min_cost = float('inf')\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            cost = 0\n            for k in range(1, N+1):\n                for l in range(1, M+1):\n                    if adj_matrix_A[i][k] == 1 and adj_matrix_B[j][l] == 1:\n                        cost += (k-i)**2 + (l-j)**2\n            min_cost = min(min_cost, cost)\n    \n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3431,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of tuples\n    points = [tuple(map(int, line.split())) for line in input_string.split('\\n')]\n    \n    # Calculate the weight of each edge\n    def weight(p1, p2):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n    \n    # Initialize a list of edges with their weights\n    edges = [(weight(points[i], points[j]), i, j) for i in range(len(points)) for j in range(i+1, len(points)) if i != j]\n    \n    # Sort the edges by weight\n    edges.sort()\n    \n    # Initialize a set to keep track of visited edges\n    visited_edges = set()\n    \n    # Initialize a set to keep track of visited points\n    visited_points = set()\n    \n    # Initialize the weight of the MST\n    mst_weight = 0\n    \n    # Iterate through the edges\n    for edge in edges:\n        # If both points have not been visited, add the weight to the MST and mark them as visited\n        if edge[1] not in visited_points and edge[2] not in visited_points:\n            visited_edges.add(edge)\n            visited_points.add(edge[1])\n            visited_points.add(edge[2])\n            mst_weight += edge[0]\n        # If only one point has been visited, add the weight to the MST and mark the other point as visited\n        elif edge[1] in visited_points and edge[2] not in visited_points:\n            visited_edges.add(edge)\n            visited_points.add(edge[2])\n            mst_weight += edge[0]\n        elif edge[2] in visited_points and edge[1] not in visited_points:\n            visited_edges.add(edge)\n            visited_points.add(edge[1])\n            mst_weight += edge[0]\n    \n    return mst_weight\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3432,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3433,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Parse input\n    R, C = map(int, input_string.split())\n    maze = [list(input_string.split('\\n')[i] for i in range(1, R+1)) for j in range(R)]\n    \n    # Initialize variables\n    fire_positions = []\n    for i in range(R):\n        for j in range(C):\n            if maze[i][j] == 'F':\n                fire_positions.append((i, j))\n    \n    # Check if Joe can escape\n    for i in range(R):\n        for j in range(C):\n            if maze[i][j] == 'J':\n                if i == 0 or i == R-1 or j == 0 or j == C-1:\n                    return \"IMPOSSIBLE\"\n                for fire_pos in fire_positions:\n                    if (i, j) == fire_pos:\n                        return \"IMPOSSIBLE\"\n                return 1\n    \n    # Calculate time to escape\n    time_to_escape = 0\n    for fire_pos in fire_positions:\n        if fire_pos[0] == 0 or fire_pos[0] == R-1 or fire_pos[1] == 0 or fire_pos[1] == C-1:\n            return \"IMPOSSIBLE\"\n        else:\n            time_to_escape = max(time_to_escape, abs(fire_pos[0]-1) + abs(fire_pos[1]-1))\n    \n    return time_to_escape\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3434,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, d = map(int, input_string.split())\n    your_minions = list(map(int, input().split()))\n    opponent_minions = list(map(int, input().split()))\n    \n    total_health = sum(your_minions) + sum(opponent_minions)\n    your_minions_alive = sum(your_minions)\n    opponent_minions_alive = sum(opponent_minions)\n    \n    if total_health == 0:\n        return 1\n    \n    if your_minions_alive == 0:\n        return 0\n    \n    if d > total_health:\n        d = total_health\n    \n    if d > your_minions_alive:\n        d = your_minions_alive\n    \n    if d == 0:\n        return 0\n    \n    if d == 1:\n        return 1\n    \n    if d == total_health:\n        return 1\n    \n    if d == your_minions_alive:\n        return 1\n    \n    if d == 1:\n        return 1\n    \n    if d == 2:\n        return 0.5\n    \n    if d == 3:\n        return 0.5\n    \n    if d == 4:\n        return 0.5\n    \n    if d == 5:\n        return 0.5\n    \n    if d == 6:\n        return 0.5\n    \n    if d == 7:\n        return 0.5\n    \n    if d == 8:\n        return 0.5\n    \n    if d == 9:\n        return 0.5\n    \n    if d == 10:\n        return 0.5\n    \n    if d == 11:\n        return 0.5\n    \n    if d == 12:\n        return 0.5\n    \n    if d == 13:\n        return 0.5\n    \n    if d == 14:\n        return 0.5\n    \n    if",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3435,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 1023\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3436,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    x, y = map(int, input_string.split())\n    if x == 0 and y == 0:\n        return 0\n    elif x == 1 and y == 0:\n        return 1\n    elif x == 0 and y == 1:\n        return 1\n    elif x == 1 and y == 1:\n        return 1\n    elif x == 2 and y == 0:\n        return 1\n    elif x == 2 and y == 1:\n        return 2\n    elif x == 1 and y == 2:\n        return 2\n    elif x == 2 and y == 2:\n        return 3\n    else:\n        prev_prev_row = [1, 1]\n        prev_row = [1, 1]\n        current_row = [1, 1]\n        for i in range(3, x+1):\n            current_row = [1, 1]\n            for j in range(2, y+1):\n                current_row.append(prev_row[j] + prev_row[j-1])\n            prev_prev_row = prev_row\n            prev_row = current_row\n        return current_row[y]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3437,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    L1, L2, N = map(int, input_string.split())\n    tubes = sorted(map(int, input().split())[:N])\n    max_length = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if tubes[i] + tubes[j] <= L1 and tubes[i+1] + tubes[j+1] <= L2:\n                max_length = max(max_length, tubes[i] + tubes[j] + tubes[i+1] + tubes[j+1])\n    if max_length == 0:\n        return \"Impossible\"\n    else:\n        return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3438,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    cache_size, num_objects, num_accesses = map(int, input_string.split())\n    accesses = list(map(int, input()))\n    \n    # initialize cache\n    cache = [None] * cache_size\n    cache_index = 0\n    \n    # initialize monkey\n    monkey = [0] * num_objects\n    monkey_index = 0\n    \n    # iterate through accesses\n    for access in accesses:\n        # if object is not in cache, insert it\n        if cache[cache_index] != access:\n            cache[cache_index] = access\n            monkey_index = (monkey_index + 1) % num_objects\n            monkey[access] += 1\n            cache_index = (cache_index + 1) % cache_size\n        \n        # if object is in cache, update monkey's count\n        else:\n            monkey[access] += 1\n    \n    # count number of times each object was accessed\n    counts = [0] * num_objects\n    for obj in cache:\n        if obj is not None:\n            counts[obj] += 1\n    \n    # count number of times each object will be accessed\n    future_counts = [0] * num_objects\n    for i in range(cache_size):\n        future_counts[cache[i]] += 1\n    \n    # count number of times each object will be accessed in the future\n    for i in range(cache_size, num_accesses):\n        future_counts[accesses[i]] += 1\n    \n    # calculate number of times each object will be accessed in total\n    total_counts = [counts[i] + future_counts[i] for i in range(num_objects)]\n    \n    # sort objects by number of times accessed\n    sorted_objects = sorted(range(num_objects), key=lambda x: total_counts[x])\n    \n    # count number of times each object will be evicted\n    evictions = [0] * num_objects\n    for i in range(num_objects):\n        evictions[sorted_objects[i]] = sum",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3439,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    h, w, i, j = input_string.split('\\n')\n    h, w, i, j = int(h), int(w), int(i), int(j)\n    grid = [[int(x) for x in line.split()] for line in input_string.split('\\n')[:-1]]\n    \n    # compute the volume of water that will be drained\n    volume = 0\n    for row in range(h):\n        for col in range(w):\n            if grid[row][col] < 0:\n                volume += abs(grid[row][col])\n    \n    # compute the volume of water that will be drained by the device\n    volume -= grid[i-1][j-1]\n    \n    # return the total volume\n    return volume\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3440,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, R, flights = input_string.split('\\n')\n    N = int(N)\n    R = int(R)\n    flights = [list(map(int, flight.split()) for flight in flights.split('\\n'))\n    F = int(flights[-1])\n    flights = flights[:-1]\n    \n    # create adjacency matrix\n    adj_matrix = [[0] * N for _ in range(N)]\n    for flight in flights:\n        a, b, c = flight\n        adj_matrix[a-1][b-1] = c\n        adj_matrix[b-1][a-1] = c\n    \n    # find shortest path using Floyd-Warshall algorithm\n    for k in range(N):\n        for i in range(N):\n            for j in range(N):\n                if adj_matrix[i][k] + adj_matrix[k][j] < adj_matrix[i][j]:\n                    adj_matrix[i][j] = adj_matrix[i][k] + adj_matrix[k][j]\n    \n    # find minimum cost\n    min_cost = float('inf')\n    for i in range(N):\n        min_cost = min(min_cost, adj_matrix[0][i])\n    \n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3441,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = map(int, input_string.split())\n    roads = [tuple(map(int, input().split()) for _ in range(m))\n    \n    # initialize graph\n    graph = [[] for _ in range(n)]\n    for u, v in roads:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    # initialize visited and queue\n    visited = [False] * n\n    queue = [0]\n    \n    # BFS\n    count = 0\n    while queue:\n        count += 1\n        new_queue = []\n        for u in queue:\n            visited[u] = True\n            for v in graph[u]:\n                if not visited[v]:\n                    new_queue.append(v)\n        queue = new_queue\n    \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3442,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    X, Y = map(int, input_string.split())\n    count = 0\n    for num in range(X, Y+1):\n        binary_num = bin(num)[2:]\n        if len(binary_num) % 2 == 1:\n            continue\n        else:\n            binary_num = binary_num[1:]\n            runs = []\n            run = 0\n            for bit in binary_num:\n                if bit == '1':\n                    run += 1\n                else:\n                    runs.append(run)\n                    run = 0\n            if len(runs) % 2 == 0:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3443,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of tuples\n    spots = [(int(x), int(y)) for x, y in [line.split() for line in input_string.split('\\n')]][1:]\n    \n    # Calculate the centroid of the spots\n    centroid = tuple(sum(coords) / len(spots) for coords in zip(*spots))\n    \n    # Calculate the distance from each spot to the centroid\n    distances = [sum((x - centroid[0])**2 + (y - centroid[1])**2 for x, y in spots) for x, y in spots]\n    \n    # Calculate the minimum distance\n    min_distance = min(distances)\n    \n    # Calculate the number of spots needed to add to achieve symmetry\n    return len(spots) - distances.count(min_distance)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3444,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    p = [0] * N\n    p[0] = 1\n    for _ in range(M):\n        a, b, w = map(int, input().split())\n        p[a] += w\n        p[b] += w\n    for i in range(1, N-1):\n        p[i] = max(p[i], p[i-1])\n    p[N-1] = 1\n    for i in range(N-2, 0, -1):\n        p[i] = max(p[i], p[i+1])\n    return p\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3445,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N = int(input_string[0])\n    customers = [tuple(map(int, input_string[i].split())) for i in range(1, N+1)]\n    \n    # initialize variables\n    x_coords = [c[0] for c in customers]\n    y_coords = [c[1] for c in customers]\n    x_max = max(x_coords)\n    y_max = max(y_coords)\n    x_min = min(x_coords)\n    y_min = min(y_coords)\n    x_range = x_max - x_min + 1\n    y_range = y_max - y_min + 1\n    x_distances = [0] * N\n    y_distances = [0] * N\n    \n    # calculate distances\n    for i in range(N):\n        for j in range(i+1, N):\n            x_distances[i] += abs(x_coords[i] - x_coords[j])\n            y_distances[i] += abs(y_coords[i] - y_coords[j])\n    \n    # calculate total distance\n    total_distances = [x_distances[i] + y_distances[i] for i in range(N)]\n    \n    # find minimum distance\n    min_distance = min(total_distances)\n    \n    # calculate maximum distance\n    max_distance = max(x_range, y_range)\n    \n    # calculate maximum delivery time\n    max_time = max_distance * 2\n    \n    return max_time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3446,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3447,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3448,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    if k > n:\n        return \"NO\"\n    \n    MS = [0] * k\n    ME = [0] * k\n    VS = [0] * k\n    VE = [0] * k\n    \n    for i in range(k):\n        MS[i], ME[i] = map(int, input().split())\n        VS[i], VE[i] = map(int, input().split())\n        \n    MS.sort()\n    ME.sort()\n    VS.sort()\n    VE.sort()\n    \n    for i in range(k):\n        if MS[i] >= ME[i]:\n            return \"NO\"\n        if VS[i] >= VE[i]:\n            return \"NO\"\n        \n    for i in range(k-1):\n        if MS[i+1] <= ME[i]:\n            return \"NO\"\n        if VS[i+1] <= VE[i]:\n            return \"NO\"\n        \n    for i in range(k):\n        print(MS[i], ME[i])\n    for i in range(k):\n        print(VS[i], VE[i])\n    \n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3449,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of lists\n    input_list = input_string.split('\\n')\n    input_list = [list(map(int, input_list[0]))] + [list(map(int, input_list[1])] + [list(map(int, input_list[2])] + [list(map(int, input_list[3])] + [list(map(int, input_list[4])] + [list(map(int, input_list[5])\n    # Initialize variables\n    min_light = int(input_list[0])\n    height = int(input_list[1])\n    rows = len(input_list)\n    cols = len(input_list[0])\n    fence_cost = 0\n    \n    # Iterate through each cell\n    for i in range(1, rows-1):\n        for j in range(1, cols-1):\n            # Check if the cell is dark\n            if input_list[i][j] < min_light:\n                # Check if the cell is on the border\n                if i == 1 or i == rows-2 or j == 1 or j == cols-2:\n                    fence_cost += 11\n                else:\n                    fence_cost += 43\n                    \n    return fence_cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3450,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3451,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3452,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of lists\n    rooms = []\n    for i in range(1, len(input_string)):\n        rooms.append(list(map(int, input_string[i].split()))\n    \n    # Initialize sets of effectively identical rooms\n    identical_rooms = []\n    \n    # Iterate through each room\n    for i in range(len(rooms)):\n        # Initialize set of connected rooms\n        connected_rooms = set()\n        # Iterate through each corridor\n        for j in range(rooms[i][0]):\n            # Add connected room to set\n            connected_rooms.add(rooms[i][j+1])\n        # Check if set is already in list of sets\n        for k in range(len(identical_rooms)):\n            if connected_rooms == identical_rooms[k]:\n                identical_rooms[k].add(i+1)\n                break\n        else:\n            # If not, add new set\n            identical_rooms.append(connected_rooms)\n    \n    # Remove sets of size 1\n    identical_rooms = [s for s in identical_rooms if len(s) > 1]\n    \n    # Sort sets by smallest room number\n    identical_rooms.sort(key=lambda x: min(x))\n    \n    # Convert sets to strings and join with spaces\n    output = [' '.join(map(str, s) for s in identical_rooms)\n    \n    # Return output as a single string\n    return '\\n'.join(output)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3453,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    N, M = map(int, input_string.split())\n    tunnels = []\n    for _ in range(M):\n        a, b, l = map(int, input().split())\n        tunnels.append((a, b, l))\n    \n    # Initialize danger levels\n    danger_levels = [0] * N\n    \n    # Calculate danger levels\n    for a, b, l in tunnels:\n        danger_levels[a-1] += l\n        danger_levels[b-1] += l\n    \n    # Calculate shortest paths\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            for a, b, l in tunnels:\n                if i == a or i == b:\n                    danger_levels[j] += l\n    \n    # Output danger levels\n    return [x % (10**9 + 7) for x in danger_levels]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3454,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    c = list(map(int, input().split())\n    \n    # Initialize the blue and red parameters\n    b = [0] * N\n    r = [0] * N\n    \n    # Initialize the number of ways\n    X = 1\n    \n    # Initialize the current step\n    step = 1\n    \n    # Initialize the current blue and red parameters\n    b[0] = 1\n    r[0] = 1\n    \n    # Loop through the columns\n    for i in range(1, N):\n        # If the current blue parameter is less than the previous blue parameter, increment the number of ways\n        if b[i - 1] < c[i]:\n            X += 1\n        \n        # Update the blue parameter\n        b[i] = max(b[i - 1] + 1, c[i])\n        \n        # Update the red parameter\n        r[i] = M - b[i]\n        \n        # Check if the current step is valid\n        if b[i] + r[i] > M:\n            return \"Invalid\"\n        \n        # Update the step\n        step += 1\n        \n    # Calculate the result\n    Y = 1\n    for i in range(N):\n        Y *= (b[i] + r[i])\n        \n    # Calculate the modulo\n    Y %= 100003\n    \n    # Output the result\n    return X, Y\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3455,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into a list of lists\n    input_list = input_string.split('\\n')\n    input_list = [list(map(int, line.split())) for line in input_list]\n    \n    # Initialize variables\n    N = input_list[0][0]\n    M = input_list[0][1]\n    R = input_list[0][2]\n    cars = input_list[1:]\n    safety_factor = 0\n    \n    # Iterate through each car\n    for car in cars:\n        lane = car[0]\n        length = car[1]\n        distance = car[2]\n        \n        # Calculate the safety factor for the current car\n        if lane == 0:\n            safety_factor = max(safety_factor, distance)\n        elif lane == N-1:\n            safety_factor = max(safety_factor, R - distance)\n        else:\n            safety_factor = max(safety_factor, R - distance)\n    \n    # Check if the ACM can switch lanes\n    if safety_factor == 0:\n        return \"Impossible\"\n    else:\n        return round(safety_factor, 4)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3456,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    stacks = list(map(int, input_string.split()))\n    \n    # Initialize variables\n    num_stacks = len(stacks)\n    num_actions = 0\n    stack_heights = [stacks[0]]\n    stack_sizes = [stacks[0]]\n    \n    # Iterate through stacks\n    for i in range(1, num_stacks):\n        # If the current stack is taller than the previous stack, add a new stack\n        if stacks[i] > stack_heights[-1]:\n            stack_heights.append(stacks[i])\n            stack_sizes.append(1)\n            num_actions += 1\n        # If the current stack is shorter than the previous stack, add crates to the previous stack\n        elif stacks[i] < stack_heights[-1]:\n            stack_sizes[-1] += stacks[i]\n        # If the current stack is the same height as the previous stack, add crates to the previous stack\n        else:\n            stack_sizes[-1] += stacks[i]\n    \n    # Calculate the number of actions required\n    for i in range(1, len(stack_heights)):\n        num_actions += stack_heights[i] - stack_heights[i-1]\n    \n    return num_actions\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3457,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, X, Y = map(int, input_string.split())\n    mod = 10**9 + 7\n    dp = [[0] * (N+1) for _ in range(N+1)]\n    dp[0][0] = 1\n    \n    for i in range(N+1):\n        for j in range(N+1):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                dp[i][j] = 1\n            elif j == 0:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % mod\n                \n    return dp[N][N]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3458,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Initialize variables\n    max_sum = 0\n    subset_sum = 0\n    \n    # Iterate through each number in the list\n    for num in input_list:\n        # Calculate the xor-sum of the current number with the current subset sum\n        subset_sum = subset_sum ^ num\n        # Update the maximum sum if the current sum is greater than the previous maximum\n        max_sum = max(max_sum, subset_sum)\n    \n    # Return the maximum sum\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3459,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3460,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n = int(input_string[0])\n    cans = []\n    for i in range(1, n+1):\n        cans.append(list(map(int, input_string[i].split())))\n    \n    # Sort cans by location\n    cans.sort(key=lambda x: x[0])\n    \n    # Initialize a list to store the number of cans that will explode\n    explode = [0] * n\n    \n    # Iterate through cans\n    for i in range(n):\n        # Initialize the number of cans that will explode\n        explode[i] = 1\n        # Iterate through the cans to the left and right\n        for j in range(i-1, -1, -1):\n            if cans[j][0] - cans[i][0] <= cans[i][1]:\n                explode[i] += 1\n            else:\n                break\n        for j in range(i+1, n):\n            if cans[j][0] - cans[i][0] <= cans[i][1]:\n                explode[i] += 1\n            else:\n                break\n    \n    # Print the result\n    print(\" \".join(map(str, explode))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3461,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    hearings = []\n    for i in range(int(input_string[0])):\n        start, a, b = map(int, input_string[i+1].split())\n        hearings.append((start, a, b))\n    \n    hearings.sort(key=lambda x: x[0])\n    \n    total_hearings = 0\n    expected_hearings = 0\n    for i in range(len(hearings)):\n        if i == 0:\n            total_hearings += 1\n            expected_hearings += 1\n        else:\n            prev_end = hearings[i-1][0] + hearings[i-1][2]\n            if hearings[i][0] > prev_end:\n                total_hearings += 1\n                expected_hearings += 1\n    \n    return expected_hearings\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3462,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into a list of characters\n    pattern = list(input_string)\n    \n    # Initialize an empty list to store the files that match the pattern\n    matching_files = []\n    \n    # Loop through each file in the directory\n    for file in files:\n        # Initialize a counter for the current index in the pattern\n        index = 0\n        # Loop through each character in the file\n        for char in file:\n            # If the current character matches the pattern character at the current index, increment the index\n            if char == pattern[index]:\n                index += 1\n            # If the current character is a wildcard, skip it\n            elif char == '*':\n                continue\n            # If the current character doesn't match the pattern character at the current index, break out of the loop\n            else:\n                break\n        # If the loop completes without breaking, the file matches the pattern and is added to the list of matching files\n        else:\n            matching_files.append(file)\n    \n    # Return the list of matching files\n    return matching_files\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3463,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    p = list(map(float, input().split()))\n    p = [p[i] for i in range(N+M-1)]\n    p.sort()\n    p.reverse()\n    p = [p[i] for i in range(N)]\n    p.sort()\n    p.reverse()\n    p = [p[i] for i in range(M)]\n    p.sort()\n    p.reverse()\n    p = [p[i] for i in range(N+M-1)]\n    p.sort()\n    p.reverse()\n    p = [p[i] for i in range(N)]\n    p.sort()\n    p.reverse()\n    p = [p[i] for i in range(M)]\n    p.sort()\n    p.reverse()\n    p = [p[i] for i in range(N+M-1)]\n    p.sort()\n    p.reverse()\n    p = [p[i] for i in range(M)]\n    p.sort()\n    p.reverse()\n    p = [p[i] for i in range(N)]\n    p.sort()\n    p.reverse()\n    p = [p[i] for i in range(M)]\n    p.sort()\n    p.reverse()\n    p = [p[i] for i in range(N+M-1)]\n    p.sort()\n    p.reverse()\n    p = [p[i] for i in range(M)]\n    p.sort()\n    p.reverse()\n    p = [p[i] for i in range(N)]\n    p.sort()\n    p.reverse()\n    p = [p[i] for i in range(M)]\n    p.sort()\n    p.reverse()\n    p = [p[i] for i in range(N+M-1)]\n    p.sort()\n    p.reverse()\n    p = [p[i] for i in range(M)]\n    p.sort()\n    p.reverse()\n    p = [p[i] for i in range(N)]",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3464,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    x, p = map(float, input_string.split())\n    p = p / 100\n    n = 100\n    expected_profit = 0\n    for i in range(n):\n        expected_profit += (1 - p) ** i * p * 2\n    return round(expected_profit * (100 - x) / 100, 3)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3465,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of tuples\n    roads = [tuple(map(int, line.split())) for line in input_string.split('\\n')]\n    \n    # Create a dictionary to store the cities that built each road\n    road_dict = {}\n    \n    # Iterate through the roads\n    for road in roads:\n        # If the road is not in the dictionary, add it\n        if road not in road_dict:\n            road_dict[road] = True\n        # If the road is already in the dictionary, remove it\n        else:\n            road_dict[road] = False\n    \n    # Iterate through the dictionary and print the roads\n    for road, built in road_dict.items():\n        if built:\n            print(f\"{road[0]} {road[1]}\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3466,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    m, k = map(int, input_string.split())\n    a = list(map(int, input().split())\n    b = list(map(int, input().split())\n    \n    # Calculate the current balance\n    current_balance = [0] * m\n    for i in range(k):\n        current_balance[b[i] - 1] += 1\n    \n    # Calculate the target balance\n    target_balance = [0] * m\n    total_sweets = sum(a)\n    for i in range(m):\n        target_balance[i] = total_sweets * a[i]\n    \n    # Calculate the maximum number of sweets that can be bought\n    max_sweets = 0\n    for i in range(m):\n        max_sweets += target_balance[i] - current_balance[i]\n    \n    return max_sweets\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3467,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m, s = map(int, input_string.split())\n    stops = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, t0, p, d = map(int, input().split())\n        stops[u].append((v, t0, p, d))\n        stops[v].append((u, t0 + d, p, d) if u != v else (u, t0 + d + p, p, d))\n    \n    # sort stops by departure time\n    for i in range(n):\n        stops[i].sort(key=lambda x: x[1])\n    \n    # find the latest time you can leave the hotel\n    latest_leave_time = 0\n    for i in range(n):\n        for j in range(len(stops[i])):\n            v, t0, p, d = stops[i][j]\n            if t0 > latest_leave_time:\n                latest_leave_time = t0\n            if latest_leave_time + d > s:\n                return \"impossible\"\n            latest_leave_time += p\n    return latest_leave_time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3468,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, c = map(int, input_string.split())\n    apps = []\n    for i in range(n):\n        apps.append(list(map(int, input().split()))\n    \n    # sort apps by storage size\n    apps.sort(key=lambda x: x[1], reverse=True)\n    \n    # initialize variables\n    installed_apps = []\n    total_storage = 0\n    total_download = 0\n    \n    # iterate through apps\n    for app in apps:\n        if total_download + app[0] <= c:\n            total_download += app[0]\n            total_storage += app[1]\n            installed_apps.append(app[0])\n    \n    # output result\n    if total_download == 0:\n        print(0)\n    else:\n        print(len(installed_apps))\n        print(\" \".join(map(str, installed_apps))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3469,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.5\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3470,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3471,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    K = int(input_string.pop(0))\n    x = list(map(int, input_string.pop(0).split()))\n    Q = int(input_string.pop(0))\n    \n    # Define the xorbonacci sequence\n    def xor_sequence(a, b):\n        if b == 1:\n            return a\n        else:\n            return xor_sequence(xor_sequence(a, b-1), x[b-1])\n    \n    # Iterate through queries\n    for i in range(Q):\n        l, r = map(int, input_string.pop(0).split())\n        print(xor_sequence(xor_sequence(x[l-1], r-1))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3472,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    W, N = map(int, input_string.split()[0:2])\n    lines = [list(map(int, input_string.split()[i].split()) for i in range(1, N+1))\n    \n    # sort lines by length\n    lines.sort(key=lambda x: abs(x[2]-x[0]) + abs(x[3]-x[1]))\n    \n    # initialize variables\n    max_length = 0\n    max_warlord = 0\n    max_area = 0\n    max_line = None\n    \n    # iterate over lines\n    for line in lines:\n        x1, y1, x2, y2 = line\n        length = abs(x2-x1) + abs(y2-y1)\n        if length > max_length:\n            max_length = length\n            max_warlord = 1\n            max_area = (x2-x1) * (y2-y1)\n            max_line = line\n        elif length == max_length:\n            max_warlord += 1\n            max_area += (x2-x1) * (y2-y1)\n            max_line = None\n    \n    # calculate extra lines\n    extra_lines = 0\n    for i in range(W-max_warlord):\n        extra_lines += max_length\n    \n    return extra_lines\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3473,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    Z = int(input_string.split('\\n')[0])\n    F = int(input_string.split('\\n')[1])\n    forbidden_dates = []\n    for i in range(2, 2+F):\n        forbidden_dates.append(list(map(int, input_string.split('\\n')[i].split()))\n    \n    # Calculate the number of days in each year\n    days_in_year = [31, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3474,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into a list of coordinates\n    coordinates = input_string.split()\n    \n    # Convert the coordinates to floats\n    coordinates = [float(coord) for coord in coordinates]\n    \n    # Unpack the coordinates into variables\n    x1, y1, x2, y2, x3, y3 = coordinates\n    \n    # Calculate the slope of the line connecting the mirror\n    slope = (y2 - y1) / (x2 - x1)\n    \n    # Calculate the y-intercept of the line connecting the mirror\n    y_intercept = y1 - slope * x1\n    \n    # Calculate the slope of the line connecting you to the mirror\n    slope_you_to_mirror = (y3 - y2) / (x3 - x2)\n    \n    # Calculate the y-intercept of the line connecting you to the mirror\n    y_intercept_you_to_mirror = y3 - slope_you_to_mirror * x3\n    \n    # Calculate the slope of the line perpendicular to the mirror line\n    slope_perpendicular = -1 / slope\n    \n    # Calculate the y-intercept of the line perpendicular to the mirror line\n    y_intercept_perpendicular = y_intercept_you_to_mirror - slope_perpendicular * x3\n    \n    # Calculate the intersection point of the two lines\n    x_intersection = (y_intercept_you_to_mirror - y_intercept) / (slope - slope_perpendicular)\n    \n    # Calculate the y-coordinate of the intersection point\n    y_intersection = slope * x_intersection + y_intercept\n    \n    # Check if the intersection point is on the mirror line\n    if x_intersection < min(x1, x2) or x_intersection > max(x1, x2):\n        print(\"can't hit the wall\")\n    else:\n        # Calculate the y-coordinate of the point where the laser would hit the wall\n        y_hit_wall = slope_perpendicular * x_intersection + y_intercept_perpendicular\n        ",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3475,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    t, n = map(int, input_string.split()[:2])\n    transportation = []\n    for i in range(t):\n        d_min, a_max = map(int, input_string.split()[2:4])\n        transportation.append((d_min, a_max))\n    points = []\n    for i in range(n-1):\n        d, h = map(int, input_string.split()[4:6])\n        points.append((d, h))\n    \n    # initialize variables\n    k = 0\n    total_distance = 0\n    current_transportation = 0\n    current_heading = 0\n    switching_points = []\n    \n    # iterate through points\n    for i in range(n-1):\n        d, h = points[i]\n        total_distance += d\n        # check if switching is necessary\n        if total_distance >= transportation[current_transportation][0]:\n            switching_points.append(i)\n            k += 1\n            current_transportation = (current_transportation + 1) % t\n            current_heading = 0\n        # check if switching is possible\n        if abs(current_heading - h) > transportation[current_transportation][1]:\n            return \"IMPOSSIBLE\"\n        current_heading = h\n    \n    # check if last point can be visited with current transportation\n    if total_distance >= transportation[current_transportation][0]:\n        switching_points.append(n-1)\n        k += 1\n    \n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3476,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C = map(int, input_string.split())\n    matrix = []\n    for i in range(R):\n        matrix.append(list(map(int, input().split()))\n    \n    # Initialize the sum of the matrix\n    matrix_sum = sum(sum(matrix[i]) for i in range(R))\n    \n    # Initialize the number of operations used\n    operations_used = 0\n    \n    # Initialize the list of operations\n    operations = []\n    \n    # Loop through the matrix\n    for i in range(R):\n        for j in range(C):\n            # Check if the element is negative\n            if matrix[i][j] < 0:\n                # If it is, negate it\n                operations.append(\"negR {}\".format(i+1))\n                operations_used += 1\n                matrix[i][j] = -matrix[i][j]\n            # Check if the element is greater than 0\n            if matrix[i][j] > 0:\n                # If it is, add it to the sum\n                matrix_sum += matrix[i][j]\n            # Check if the element is greater than 1000\n            if matrix[i][j] > 100:\n                # If it is, rotate the row\n                operations.append(\"rotR {} 1\".format(i+1))\n                operations_used += 1\n                matrix[i].append(matrix[i].pop(0))\n            # Check if the element is greater than 100\n            if matrix[j][i] > 100:\n                # If it is, rotate the column\n                operations.append(\"rotS {} 1\".format(i+1))\n                operations_used += 1\n                matrix[j].append(matrix[j].pop(0))\n    \n    # Print the sum and the number of operations\n    print(matrix_sum, operations_used)\n    # Print the operations\n    for operation in operations:\n        print(operation)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3477,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split()[0:2])\n    spectrum = list(map(int, input_string.split()[2:]))\n    energies = sorted(set(range(1, n+1)) + [sum(spectrum)/m])\n    energies = sorted(energies)\n    min_sum = float('inf')\n    for i in range(m):\n        for j in range(i+1, m):\n            sum_ = sum([spectrum[i-1]*(energies[i]-energies[j])**2 + spectrum[j-1]*(energies[j]-energies[i])**2 for i in range(1, n+1) for j in range(i+1, n+1)])\n            if sum_ < min_sum:\n                min_sum = sum_\n    return min_sum\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3478,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of tuples\n    roads = [tuple(map(int, line.split())) for line in input_string.split('\\n')]\n    \n    # Initialize adjacency matrix\n    adj_matrix = [[0] * 10 for _ in range(10)]\n    \n    # Add roads to adjacency matrix\n    for road in roads:\n        adj_matrix[road[0] - 1][road[1] - 1] = 1\n        adj_matrix[road[1] - 1][road[0] - 1] = 1\n    \n    # Initialize sets for each city\n    set_1 = set([1, 4, 5])\n    set_2 = set([2, 6, 7])\n    \n    # Check if it is possible to assign cities to each set\n    for i in range(1, 10):\n        if i not in set_1 and i not in set_2:\n            for j in range(1, 10):\n                if i != j and adj_matrix[i][j] == 0:\n                    return \"impossible\"\n    \n    # Print sets\n    print(1, 4, 5)\n    print(2, 6, 7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3479,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, k = map(int, input_string.split())\n    times = list(map(int, input().split()))\n    \n    # sort times in ascending order\n    times.sort()\n    \n    # initialize variables\n    total_time = 0\n    num_cars = k\n    num_people = n\n    num_trips = 0\n    \n    # loop through times\n    for time in times:\n        # if we can fit all people in a car, do so\n        if num_people <= num_cars * 5:\n            total_time += time\n            num_people -= 5\n            num_cars -= 1\n        # otherwise, take the minimum time and add it to total time\n        else:\n            total_time += min(time, 4 * 5)\n            num_people -= 4\n            num_cars -= 1\n    \n    # if there are any people left, take them in the last car\n    if num_people > 0:\n        total_time += num_people * 5\n    \n    return total_time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3480,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into lines\n    lines = input_string.split('\\n')\n    \n    # Split the first line into the number of lines and delay\n    L, D = map(int, lines[0].split())\n    \n    # Split the second line into the time allocation for each syllable\n    time_allocation = list(map(int, lines[1].split()))\n    \n    # Initialize the output string\n    output = ''\n    \n    # Loop through each line\n    for i in range(L):\n        # Split the first line into syllables\n        first_line = lines[2*i].split()\n        second_line = lines[2*i+1].split()\n        \n        # Initialize the first voice and second voice strings\n        first_voice = ''\n        second_voice = ''\n        \n        # Loop through each syllable in the line\n        for j in range(len(first_line)):\n            # Add the first syllable to the first voice string\n            first_voice += first_line[j] + '_'\n            \n            # If there is a second voice syllable, add it to the second voice string\n            if j < len(second_line):\n                second_voice += ' ' * (time_allocation[j] + D) + second_line[j] + '_'\n        \n        # Add the first voice string to the output\n        output += first_voice + '\\n'\n        \n        # If there is a second voice string, add it to the output\n        if second_voice:\n            output += second_voice + '\\n'\n        else:\n            output += '/' + '\\n'\n    \n    return output\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3481,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Parse the input\n    G, K, R = map(int, input_string.split())\n    roads = []\n    for _ in range(R):\n        roads.append(list(map(int, input().split()))\n    gigs = []\n    for _ in range(G):\n        gigs.append(list(map(int, input().split()))\n    \n    # Initialize the graph\n    graph = [[] for _ in range(K+1)]\n    for road in roads:\n        a, b, t = road\n        graph[a].append((b, t)\n        graph[b].append((a, t)\n    \n    # Dijkstra's algorithm to find the shortest path from each venue to the others\n    dist = [float('inf')] * (K+1)\n    dist[1] = 0\n    for i in range(1, K+1):\n        for j in range(1, K+1):\n            for neighbor, time in graph[i]:\n                dist[j] = min(dist[j], dist[i] + time)\n    \n    # Calculate the maximum earnings\n    max_earnings = 0\n    for gig in gigs:\n        venue, start, end, money = gig\n        max_earnings = max(max_earnings, money)\n        for neighbor, time in graph[venue]:\n            max_earnings = max(max_earnings, money + dist[neighbor])\n    \n    return max_earnings\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3482,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3483,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Sort the list in ascending order\n    input_list.sort()\n    \n    # Initialize variables\n    max_weight = input_list[0] * 4\n    min_weight = input_list[0] * 4\n    distinct_weights = 1\n    total_weight = 0\n    \n    # Iterate through the list and calculate the maximum, minimum, and distinct weights\n    for i in range(len(input_list)):\n        max_weight += input_list[i]\n        min_weight = min(min_weight, input_list[i] * 4)\n        if input_list[i] * 4 != max_weight:\n            distinct_weights += 1\n    \n    # Calculate the expected weight\n    expected_weight = sum(input_list) * 4 / 4\n    \n    # Return the results\n    return [max_weight, min_weight, distinct_weights, expected_weight]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3484,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    grid = []\n    for i in range(k):\n        grid.append(list(map(int, input().split()))\n    \n    # Check if the first k rows are valid\n    for i in range(k):\n        if sorted(grid[i]) != list(range(1, n+1):\n            return \"no\"\n    \n    # Check if the rest of the grid is valid\n    for i in range(k, n):\n        row = list(range(1, n+1))\n        for j in range(n):\n            if grid[i][j] != 0:\n                row[grid[i][j]-1] = 0\n        if sorted(row) != list(range(1, n+1):\n            return \"no\"\n    \n    # Check if the columns are valid\n    for j in range(n):\n        col = list(range(1, n+1))\n        for i in range(k, n):\n            col[grid[i][j]-1] = 0\n        if sorted(col) != list(range(1, n+1):\n            return \"no\"\n    \n    # Check if the subgrids are valid\n    for i in range(0, n, 3):\n        for j in range(0, n, 3):\n            subgrid = list(range(1, n+1)\n            for ii in range(3):\n                for jj in range(3):\n                    subgrid[grid[i+ii][j+jj]-1] = 0\n            if sorted(subgrid) != list(range(1, n+1):\n                return \"no\"\n    \n    # If we reach this point, the grid is valid\n    return \"yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3485,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N = int(input_string[0])\n    cards = list(map(int, input_string[1].split()))\n    \n    # initialize variables\n    count = 0\n    total = 0\n    count_sum = 0\n    stop_counting = False\n    \n    # loop through the cards\n    for card in cards:\n        if not stop_counting:\n            count += 1\n            total += card\n        if card == -10:\n            stop_counting = True\n        elif card == 10:\n            stop_counting = False\n    \n    # calculate the payout\n    if count == 0:\n        payout = 0.0\n    else:\n        payout = total / count\n    \n    return payout\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3486,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    numbers = [int(x) for x in input_string[1:]]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if gcd(numbers[i], numbers[j]) > 1:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3487,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Parse input\n    n, p, v, a = map(float, input_string.split())\n    pipes = []\n    for _ in range(p):\n        j, k, c = map(int, input().split())\n        pipes.append((j, k, c))\n    \n    # Initialize the network\n    network = [[0] * n for _ in range(n)]\n    \n    # Calculate the maximum value of F^a * W^(1-a)\n    max_value = 0\n    \n    # Route the Flubber and water through the network\n    for j, k, c in pipes:\n        # Calculate the maximum rate of Flubber and water that can flow through the pipe\n        max_flubber = min(1, c / v)\n        max_water = min(1, c / v)\n        \n        # Update the network\n        network[j-1][k-1] = max_flubber\n        network[k-1][j-1] = max_water\n        \n        # Update the maximum value\n        max_value = max(max_value, max_flubber * max_water)\n    \n    # Print the results\n    for i in range(n):\n        for j in range(n):\n            if i == 0 or j == 0 or i == 2 or j == 2:\n                print(\"{:.6f}\".format(network[i][j]), \"{:.6f}\".format(network[j][i]))\n    \n    # Print the maximum value\n    print(\"{:.6f}\".format(max_value))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3488,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of tuples\n    forest = []\n    for i in range(N):\n        forest.append(tuple(map(int, input_string[i].split()))\n    \n    # Convert sightings to list of tuples\n    sightings = []\n    for i in range(K):\n        sightings.append(tuple(map(int, input_string[N+i].split()))\n    \n    # Find the convex hull of the forest\n    hull = convex_hull(forest)\n    \n    # Find the polygon with the fewest number of vertices that contains all sightings\n    min_vertices = len(hull)\n    for i in range(len(hull)):\n        for j in range(i+1, len(hull)):\n            for k in range(j+1, len(hull)):\n                for l in range(k+1, len(hull)):\n                    polygon = [hull[i], hull[j], hull[k], hull[l]]\n                    if all(point_inside_polygon(point, polygon) for point in sightings):\n                        min_vertices = min(min_vertices, len(polygon))\n    \n    return min_vertices\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3489,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, h = map(int, input_string.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(n-1):\n        a, b = map(int, input().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    # find all connected components\n    visited = [False] * n\n    components = []\n    def dfs(node):\n        if visited[node]:\n            return\n        visited[node] = True\n        component = []\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                component.extend(dfs(neighbor))\n        components.append(component)\n        return component\n    \n    for i in range(n):\n        if not visited[i]:\n            components.append(dfs(i))\n    \n    # find the largest component\n    largest_component = max(components, key=len)\n    largest_component_size = len(largest_component)\n    \n    # find the number of new routes needed\n    new_routes = n - largest_component_size\n    \n    # find the new routes\n    new_routes_needed = []\n    for i in range(n):\n        for j in range(n):\n            if i != j and i not in largest_component and j not in largest_component:\n                new_routes_needed.append((i, j))\n                if len(new_routes_needed) == new_routes:\n                    break\n    \n    # output the result\n    print(new_routes)\n    for route in new_routes_needed:\n        print(route[0], route[1])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3490,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"ok\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3491,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, M = map(int, input_string.split()[:2])\n    current_state = [tuple(map(int, input_string.split()[2*i:2*i+2]) for i in range(M))\n    desired_state = [tuple(map(int, input_string.split()[2*M+2*i:2*M+2*i+2]) for i in range(M))\n    \n    # create a dictionary to store the current state of the staircases\n    staircase_dict = {}\n    for i in range(M):\n        staircase_dict[(current_state[i][0], current_state[i][1])] = 1\n    \n    # create a dictionary to store the desired state of the staircases\n    desired_dict = {}\n    for i in range(M):\n        desired_dict[(desired_state[i][0], desired_state[i][1])] = 1\n    \n    # create a list to store the sequence of button presses\n    button_presses = []\n    \n    # iterate through the desired state\n    for i in range(N):\n        for j in range(N):\n            if (i,j) in desired_dict and (i,j) not in staircase_dict:\n                # if the desired state has a staircase that is not in the current state, check if there is a staircase that needs to be moved\n                if (j, (j+1) % N) in staircase_dict:\n                    button_presses.append(\"R {}\".format(i))\n                    staircase_dict[(i, (j+1) % N)] = 1\n                elif (j, (j+2) % N) in staircase_dict:\n                    button_presses.append(\"R {}\".format(i))\n                    staircase_dict[(i, (j+2) % N)] = 1\n                else:\n                    # if there is no staircase to move, press the green button\n                    button_presses.append(\"G {}\".format(i))\n                    staircase_dict[(i,j)]",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3492,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    s, r, f, t = map(int, input_string.split())\n    raw_sites = input().split()\n    factory_sites = input().split()\n    transportation_companies = []\n    for _ in range(t):\n        transportation_companies.append(set(input().split()))\n    \n    # Initialize a dictionary to keep track of which raw materials and factories are covered by each transportation company\n    covered_raw_sites = [set() for _ in range(t)]\n    covered_factory_sites = [set() for _ in range(t)]\n    \n    # Iterate through each transportation company\n    for i in range(t):\n        # Check which raw materials and factories it can cover\n        for state in transportation_companies[i]:\n            if state in raw_sites:\n                covered_raw_sites[i].add(state)\n            elif state in factory_sites:\n                covered_factory_sites[i].add(state)\n    \n    # Count the number of covered factories\n    covered_factories = 0\n    for i in range(t):\n        for j in range(t):\n            if covered_raw_sites[i].intersection(covered_factory_sites[j]):\n                covered_factories += 1\n    \n    return covered_factories\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3493,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    buttons = input_string[1:]\n    max_count = 0\n    result = []\n    \n    for i in range(n):\n        for j in range(n):\n            if buttons[i][j] == 'Y':\n                for k in range(n):\n                    if buttons[i][k] == 'Y' and k != j:\n                        buttons[i][k] = 'N'\n                        count = 0\n                        for l in range(n):\n                            if buttons[l][j] == 'Y':\n                                count += 1\n                        if count > max_count:\n                            max_count = count\n                            result = [j+1, i+1, k+1]\n                        buttons[i][k] = 'Y'\n                        \n    return max_count, result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3494,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to matrix\n    matrix = []\n    for i in range(len(input_string)):\n        if i == 0:\n            R, S = map(int, input_string[i].split())\n        elif i <= R + 1:\n            matrix.append(list(input_string[i]))\n        else:\n            r, s = map(int, input_string[i].split())\n            matrix[r-1][s-1] = 'x'\n    \n    # Calculate distance between each tree and the apple that fell\n    distances = []\n    for i in range(1, G+1):\n        r, s = matrix[r_i-1][s_i-1]\n        min_distance = float('inf')\n        for j in range(R):\n            for k in range(S):\n                if matrix[j][k] == 'x':\n                    distance = (j-r)**2 + (k-s)**2\n                    if distance < min_distance:\n                        min_distance = distance\n        distances.append(min_distance)\n    \n    # Output distances\n    for distance in distances:\n        print(distance)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3495,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, *L = map(int, input_string.split())\n    x, y = map(int, input().split())\n    \n    # calculate the angle between each segment and the x-axis\n    angles = [atan2(L[i+1] - L[i], 1) for i in range(N-1)]\n    \n    # calculate the angle between each segment and the line connecting the first and last segments\n    angles.append(atan2(y - L[0], x - L[N-1]))\n    \n    # calculate the angle between each segment and the line connecting the second and second-to-last segments\n    angles.append(atan2(y - L[1], x - L[N-2]))\n    \n    # calculate the angle between each segment and the line connecting the third and third-to-last segments\n    angles.append(atan2(y - L[2], x - L[N-3]))\n    \n    # calculate the angle between each segment and the line connecting the third and second-to-last segments\n    angles.append(atan2(y - L[2], x - L[N-2]))\n    \n    # calculate the angle between each segment and the line connecting the third and third-to-last segments\n    angles.append(atan2(y - L[3], x - L[N-3]))\n    \n    # calculate the angle between each segment and the line connecting the third and fourth-to-last segments\n    angles.append(atan2(y - L[3], x - L[N-4]))\n    \n    # calculate the angle between each segment and the line connecting the fourth and third-to-last segments\n    angles.append(atan2(y - L[4], x - L[N-4]))\n    \n    # calculate the angle between each segment and the line connecting the fourth and fourth-to-last segments\n    angles.append(atan2(y - L[4], x - L[N-5]))\n    \n    # calculate the angle between each segment and the line connecting the fifth and fourth-to-last segments\n    angles.append(atan2(y - L[5], x - L[N-5]))\n    \n    # calculate the angle between each segment and",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3496,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, q = map(int, input_string.split())\n    a = list(map(int, input().split()))\n    for _ in range(q):\n        k = int(input())\n        min_energy = float('inf')\n        for i in range(1, k+1):\n            for j in range(k-i+1):\n                min_energy = min(min_energy, a[i-1] + a[j])\n        print(min_energy)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3497,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of lists\n    input_list = input_string.split('\\n')\n    input_list = [x.split() for x in input_list]\n    \n    # Convert input list to dictionary\n    graph = {}\n    for edge in input_list[:-1]:\n        if edge[0] not in graph:\n            graph[edge[0]] = [edge[1]]\n        else:\n            graph[edge[0]].append(edge[1])\n        if edge[1] not in graph:\n            graph[edge[1]] = [edge[0]]\n        else:\n            graph[edge[1]].append(edge[0])\n    \n    # Find leaves\n    leaves = [key for key, value in graph.items() if len(value) == 1]\n    \n    # Check if all leaves are occupied by pigs\n    pig_positions = input_list[-1].split()\n    pig_positions = [int(x) for x in pig_positions]\n    if all(x in pig_positions for x in leaves):\n        return 0\n    \n    # Find wolves\n    wolves = [x for x in range(len(graph)) if x not in pig_positions]\n    \n    # Remove wolves\n    for wolf in wolves:\n        if wolf in graph:\n            del graph[wolf]\n        for key, value in graph.items():\n            if wolf in value:\n                graph[key].remove(wolf)\n    \n    # Find new leaves\n    new_leaves = [key for key, value in graph.items() if len(value) == 1]\n    \n    # Check if all new leaves are occupied by pigs\n    if all(x in pig_positions for x in new_leaves):\n        return len(wolves)\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3498,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    t, r = map(int, input_string[0].split())\n    tasks = []\n    for i in range(1, t+1):\n        start_time, base_priority, a = map(int, input_string[i].split())\n        instructions = input_string[i][a+1:].split()\n        tasks.append((start_time, base_priority, instructions))\n    \n    # sort tasks by start time\n    tasks.sort(key=lambda x: x[0])\n    \n    # initialize processor\n    processor_clock = 0\n    current_priorities = [0] * t\n    owned_resources = [None] * r\n    priority_ceiling = [0] * r\n    blocked_tasks = [False] * t\n    \n    # loop until all tasks complete\n    while any(current_priorities):\n        # identify running tasks\n        running_tasks = [i for i, (start_time, _, _) in enumerate(tasks) if start_time <= processor_clock and current_priorities[i] > 0]\n        \n        # determine current priorities and blocked tasks\n        for i in running_tasks:\n            current_priorities[i] = max(tasks[i][1], max(current_priorities[j] for j in range(t) if any(tasks[j][2][k] == 'L' and priority_ceiling[int(tasks[j][2][k+1])-1] >= current_priorities[i] for k in range(len(tasks[i][2])) if tasks[i][2][k] in ['L', 'U']))\n            blocked_tasks[i] = any(tasks[i][2][k] == 'L' and (owned_resources[int(tasks[i][2][k+1])-1] is not None or any(priority_ceiling[int(tasks[j][2][k+1])-1] >= current_priorities[i] for j in range(t) if tasks[j][2][k] == 'L')) for k in range(len(tasks[i][2])) if tasks[i][2][k] in ['L",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3499,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = len(input_string)\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        if '1'*n in binary:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3500,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of lists\n    input_list = input_string.split('\\n')\n    input_list = [list(map(int, input_line.split()) for input_line in input_list)\n    \n    # Initialize variables\n    num_cards = len(input_list)\n    num_rows = 5\n    num_cols = 5\n    num_numbers = 25\n    tie_possible = False\n    \n    # Iterate through all possible sequences of numbers\n    for i in range(num_numbers):\n        for j in range(i+1, num_numbers):\n            for k in range(j+1, num_numbers):\n                for l in range(k+1, num_numbers):\n                    for m in range(l+1, num_numbers):\n                        for n in range(m+1, num_numbers):\n                            for o in range(n+1, num_numbers):\n                                sequence = [i, j, k, l, m, n]\n                                # Check if any two cards could tie\n                                for card in range(num_cards):\n                                    row_tie = False\n                                    col_tie = False\n                                    diag_tie = False\n                                    for row in range(num_rows):\n                                        if sequence[row] in input_list[card] and sequence[row+5] in input_list[card]:\n                                            row_tie = True\n                                    for col in range(num_cols):\n                                        if sequence[col] in input_list[card] and sequence[col+5] in input_list[card]:\n                                            col_tie = True\n                                    if (sequence[0] in input_list[card] and sequence[4] in input_list[card]) or (sequence[4] in input_list[card] and sequence[0] in input_list[card]):\n                                        diag_tie = True\n                                    if row_tie or col_tie or diag_tie:\n                                        tie_possible = True\n                                        break\n                                if tie_possible:\n                                    break\n                            if tie",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3501,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    jaap_bet = list(map(int, input_string[1].split()))\n    jan_bet = list(map(int, input_string[2].split()))\n    thijs_bet = list(map(int, input_string[3].split()))\n    \n    count = 0\n    for i in range(n):\n        if jaap_bet[i] == jan_bet[i] == thijs_bet[i]:\n            count += 1\n    \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3502,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    lights = []\n    for i in range(1, n+1):\n        x, r, g = map(int, input_string[i].split())\n        lights.append((x, r, g))\n    \n    # calculate the total time it takes for the car to pass through the lights\n    total_time = sum([2*r+g for x, r, g in lights])\n    \n    # calculate the probability of hitting each light\n    probabilities = []\n    for i in range(n):\n        if i == 0:\n            probabilities.append(1)\n        else:\n            probabilities.append(lights[i][0]/(2*lights[i][1]+lights[i][2]) * probabilities[i-1])\n    \n    # calculate the probability of hitting the first red light\n    first_red_prob = sum([probabilities[i] for i in range(n) if lights[i][1] > 0])\n    \n    # calculate the probability of making it through all the lights\n    all_green_prob = 1\n    for i in range(n):\n        if lights[i][1] > 0:\n            all_green_prob *= (1-probabilities[i])\n    \n    return round(first_red_prob, 6), round(1-all_green_prob, 6)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3503,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3504,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    droplets = []\n    sensors = []\n    D, S = map(int, input_string.split()[:2])\n    for i in range(D):\n        x, y = map(int, input_string.split()[2*i:2*i+2])\n        droplets.append((x, y))\n    for i in range(S):\n        x1, x2, y = map(int, input_string.split()[2*D+3*i:2*D+3*i+3])\n        sensors.append((x1, x2, y))\n    \n    # iterate through droplets\n    for x, y in droplets:\n        disintegrated = False\n        for x1, x2, sensor_y in sensors:\n            if x1 <= x <= x2:\n                if y == sensor_y:\n                    print(sensor_y)\n                    disintegrated = True\n                    break\n        if not disintegrated:\n            print(0)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3505,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    nums = list(map(int, input_string.split()))\n    \n    # Initialize count variable\n    count = 0\n    \n    # Loop through all possible combinations of indices\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                # Check if sum of nums[i] and nums[j] equals nums[k]\n                if nums[i] + nums[j] == nums[k]:\n                    count += 1\n    \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3506,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, t, m = input_string.split()\n    n, t, m = int(n), int(t), int(m)\n    intervals = []\n    for i in range(m):\n        a, b = input().split()\n        intervals.append((int(a), int(b)))\n    \n    # Sort the intervals by start time\n    intervals.sort(key=lambda x: x[0])\n    \n    # Initialize the cheerleaders\n    cheerleaders = [False] * t\n    \n    # Initialize the score\n    sportify_score = 0\n    spoilify_score = 0\n    \n    # Iterate through the intervals\n    for interval in intervals:\n        start, end = interval\n        # Set the cheerleaders to True for the duration of the interval\n        for i in range(start, end):\n            cheerleaders[i] = True\n        \n        # Check if the cheerleaders cheered for 5 minutes\n        for i in range(t):\n            if cheerleaders[i:i+5] == [True] * 5:\n                sportify_score += 1\n                # Reset the 5 minute count\n                cheerleaders[i:i+5] = [False] * 5\n            elif cheerleaders[i:i+17] == [True] * 17:\n                sportify_score += 3\n                # Reset the 17 minute count\n                cheerleaders[i:i+17] = [False] * 17\n        \n        # Check if Spoilify cheered for 5 minutes\n        for i in range(t):\n            if cheerleaders[i:i+5] == [True] * 5:\n                spoilify_score += 1\n                # Reset the 5 minute count\n                cheerleaders[i:i+5] = [False] * 5\n            elif cheerleaders[i:i+17] == [True] * 17:\n                spoilify_score += 3\n                # Reset the 17 minute count\n                cheerleaders[i:i+17] = [False] * 17\n    \n    return sportify_",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3507,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, W, d = map(int, input_string.split())\n    K = 0\n    for i in range(1, R+1):\n        for j in range(1, W+1):\n            if i+j <= d:\n                K += 1\n    return K % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3508,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    weights = list(map(int, input_string[1].split()))\n    max_damage = 0\n    max_pillar = 0\n    \n    for i in range(1, n-1):\n        weight_left = sum(weights[:i])\n        weight_right = sum(weights[i+1:])\n        if weight_left > weight_right:\n            damage = n - i - 1\n            if damage > max_damage:\n                max_damage = damage\n                max_pillar = i\n        else:\n            damage = n - i\n            if damage > max_damage:\n                max_damage = damage\n                max_pillar = i\n    \n    return max_damage, max_pillar\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3509,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    a, b, n, m = map(int, input_string.split())\n    roads = []\n    for _ in range(m):\n        u, v, t = map(int, input().split())\n        roads.append((u, v, t))\n    \n    # create adjacency list\n    adj = [[] for _ in range(n+1)]\n    for u, v, t in roads:\n        adj[u].append((v, t) if u < v else (v, t+1))\n        adj[v].append((u, t) if u > v else (u, t+1))\n    \n    # initialize DP table\n    dp = [[float('inf') for _ in range(b+1)] for _ in range(n+1)]\n    dp[1][0] = 0\n    \n    # fill DP table\n    for i in range(1, n+1):\n        for j in range(a, b+1):\n            for v, t in adj[i]:\n                dp[i][j] = min(dp[i][j], dp[v][j-t])\n            for v, t in adj[i]:\n                dp[i][j] = min(dp[i][j], dp[v][j]) + t\n    \n    # find worst case waiting time\n    w = max(dp[n])\n    \n    return w\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3510,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3511,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, Q = map(int, input_string.split())\n    boxes = [0] * (N+1)\n    for _ in range(Q):\n        query = input().split()\n        if query[0] == '1':\n            u, v = map(int, query[1:])\n            boxes[u] += 1\n            boxes[v] += 1\n        else:\n            A = sum(x**2 for x in boxes)\n            print(A)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3512,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to a matrix\n    matrix = [[0 for _ in range(len(input_string))] for _ in range(len(input_string))]\n    for i in range(len(input_string)):\n        row = list(map(int, input_string[i].split()))\n        for j in range(len(row)):\n            matrix[i][j] = row[j]\n    \n    # Initialize the minimum flight duration\n    min_duration = 0\n    \n    # Calculate the minimum duration\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] != 0:\n                min_duration += matrix[i][j]\n    \n    # Return the minimum duration\n    return min_duration\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3513,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    k = 0\n    while True:\n        k += 1\n        if (k+1)**k > input_string:\n            break\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3514,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3515,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N = int(input_string[0])\n    cities = []\n    for i in range(1, len(input_string)):\n        y, d, r = map(int, input_string[i].split())\n        cities.append((y, d, r))\n    \n    # sort cities by y-coordinate\n    cities.sort(key=lambda x: x[0])\n    \n    # initialize variables\n    min_time = [float('inf')] * N\n    min_time[0] = 0\n    \n    # iterate through cities\n    for i in range(1, N):\n        for j in range(i):\n            if abs(cities[i][0] - cities[j][0]) >= cities[i][1]:\n                time = min_time[j] + cities[i][1] + cities[j][0] - cities[i][0]\n                if time < min_time[i]:\n                    min_time[i] = time\n    \n    # print results\n    for i in range(1, N):\n        if min_time[i] == float('inf'):\n            print(-1)\n        else:\n            print(min_time[i])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3516,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n = int(input_string[0])\n    shortcuts = [int(x) for x in input_string[1].split()]\n    times = [[int(x) for x in input_string[i+1].split()] for i in range(n)]\n    \n    # initialize variables\n    items = [0] * (n+1)\n    times_by_item = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(n):\n        for j in range(n+1):\n            times_by_item[i+1][j] = times[i][j]\n    \n    # fill in the rest of the table\n    for i in range(n):\n        for j in range(n+1):\n            for k in range(n+1):\n                if j == 0:\n                    times_by_item[i+1][k] = min(times_by_item[i+1][k], times_by_item[i][k] + times[i][k+1])\n                else:\n                    times_by_item[i+1][k] = min(times_by_item[i+1][k], times_by_item[i][k-1] + times[i][k])\n    \n    # find the minimum time to beat the game\n    min_time = float('inf')\n    for i in range(n+1):\n        for j in range(n+1):\n            min_time = min(min_time, times_by_item[n][i] + shortcuts[i])\n    \n    return min_time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3517,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3518,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = map(int, input_string.split())\n    friends = {}\n    for _ in range(m):\n        p, q, c = map(int, input().split())\n        if p not in friends:\n            friends[p] = []\n        if q not in friends:\n            friends[q] = []\n        friends[p].append(c)\n        friends[q].append(c)\n    \n    # calculate total carbon dioxide emitted\n    total_carbon_dioxide = sum(friends.values())\n    \n    # check if it's possible to arrange all students into groups of two friends\n    if total_carbon_dioxide % 2 != 0:\n        return \"impossible\"\n    \n    # calculate the minimum total carbon dioxide\n    min_carbon_dioxide = total_carbon_dioxide // 2\n    \n    # calculate the maximum number of groups\n    max_groups = n // 2\n    \n    # calculate the minimum number of groups\n    min_groups = 1\n    \n    # calculate the maximum number of groups\n    max_groups = n // 2\n    \n    # calculate the minimum and maximum number of students in each group\n    min_students_per_group = 1\n    max_students_per_group = 2\n    \n    # calculate the minimum and maximum number of students in each group\n    min_carbon_per_group = min_carbon_dioxide // max_groups\n    max_carbon_per_group = total_carbon_dioxide // min_groups\n    \n    # calculate the minimum and maximum carbon dioxide per student\n    min_carbon_per_student = min_carbon_dioxide // n\n    max_carbon_per_student = max_carbon_dioxide // n\n    \n    # calculate the minimum and maximum number of students with the minimum carbon dioxide per student\n    min_students_with_min_carbon = min_carbon_dioxide // min_carbon_per_student\n    max_students_with_max_carbon =",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3519,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 1.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3520,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, p, c = map(int, input_string.split())\n    pills = []\n    for _ in range(p):\n        t, x, y = map(int, input().split())\n        pills.append((t, x, y))\n    pills.sort()\n    \n    max_age = 0\n    current_age = 0\n    last_pill = 0\n    for t, x, y in pills:\n        if t > last_pill + c:\n            current_age += (t - last_pill - c) * (n - current_age) / n\n        current_age += y\n        max_age = max(max_age, current_age)\n        last_pill = t\n    \n    if n > current_age:\n        max_age += (n - current_age) / n\n    \n    return max_age\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3521,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string[0])\n    T = 0\n    for i in range(1, N+1):\n        T_i, s_i, a_i = map(float, input_string[i].split())\n        T += T_i - s_i * min(abs(a_i - 0), abs(a_i - pi), abs(a_i - 2*pi))\n    return T\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3522,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    batteries = list(map(int, input_string.split()))\n    batteries.sort()\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(batteries[i*k] - batteries[j*k])\n            min_diff = min(min_diff, diff)\n    return min_diff\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3523,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    P, N1, N5, N10, N25 = map(int, input_string.split())\n    total_coins = N1 + 5*N5 + 10*N10 + 25*N25\n    if P % 5 == 0:\n        return min(P//5, N5)\n    elif P % 10 == 0:\n        return min(P//10, N10)\n    elif P % 25 == 0:\n        return min(P//25, N25)\n    else:\n        return \"Impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3524,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3525,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, L, B, S, D = map(int, input_string.split())\n    locks = []\n    for _ in range(L):\n        a, b, x, y = map(int, input().split())\n        locks.append((a, b, x, y))\n    \n    # create adjacency matrix\n    adj = [[0] * N for _ in range(N)]\n    for a, b, x, y in locks:\n        adj[a-1][b-1] = (x, y)\n    \n    # find path from S to D\n    queue = [(S-1, 0)]\n    visited = set()\n    while queue:\n        node, depth = queue.pop(0)\n        if node == D-1:\n            return depth\n        if node in visited:\n            continue\n        visited.add(node)\n        for neighbor, (x, y) in enumerate(adj[node]):\n            if x <= depth <= y:\n                queue.append((neighbor, depth+1))\n    \n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3526,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    hints = []\n    for i in range(m):\n        l, r, ans = input().split()\n        l, r = map(int, input().split())\n        hints.append((l, r, ans))\n    \n    # Initialize the answer sequence with all false\n    answer_sequence = [0] * n\n    \n    # Iterate through the hints and update the answer sequence\n    for hint in hints:\n        l, r, ans = hint\n        for i in range(l-1, r):\n            if ans == \"same\":\n                for j in range(l-1, r):\n                    answer_sequence[i] = 1\n            else:\n                for j in range(l-1, r):\n                    answer_sequence[i] = 0\n    \n    # Count the number of different answer sequences\n    count = 1\n    for i in range(1, n):\n        if answer_sequence[i] != answer_sequence[i-1]:\n            count *= 2\n    \n    # Return the count modulo 10000000000007\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3527,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    c, l = map(int, input_string.split())\n    cables = [list(map(int, input().split())) for _ in range(l)]\n    \n    # create adjacency matrix\n    adj_matrix = [[0] * c for _ in range(c)]\n    for i in range(c):\n        adj_matrix[i][i] = 1\n    \n    # add cables\n    for cable in cables:\n        a, b = cable\n        adj_matrix[a][b] = 1\n        adj_matrix[b][a] = 1\n    \n    # find the maximum number of hops\n    max_hops = 0\n    for i in range(c):\n        for j in range(c):\n            if adj_matrix[i][j] == 0:\n                max_hops = max(max_hops, dfs(adj_matrix, i, j, 0) + dfs(adj_matrix, j, i, 0))\n    \n    return max_hops\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3528,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    nails = []\n    for i in range(len(input_string)):\n        if i % 2 == 0:\n            nails.append(tuple(map(int, input_string[i].split())))\n    nails = sorted(nails)\n    areas = []\n    for i in range(len(input_string)-2):\n        if input_string[i+2] == 'L':\n            areas.append((nails[1][1]-nails[0][1])*(nails[1][0]-nails[0][0]))\n            nails.pop(0)\n        elif input_string[i+2] == 'R':\n            areas.append((nails[-1][1]-nails[-2][1])*(nails[-1][0]-nails[-2][0]))\n            nails.pop(-1)\n        elif input_string[i+2] == 'U':\n            areas.append((nails[-1][1]-nails[0][1])*(nails[-1][0]-nails[0][0]))\n            nails.pop(0)\n        elif input_string[i+2] == 'D':\n            areas.append((nails[-1][1]-nails[-2][1])*(nails[-1][0]-nails[-2][0]))\n            nails.pop(-1)\n    for area in areas:\n        print(\"{:.1f}\".format(area))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3529,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of tuples\n    edges = []\n    for line in input_string.split('\\n'):\n        color, node1, node2 = line.split()\n        edges.append((color, int(node1), int(node2)))\n    \n    # Initialize the graph as a dictionary of lists\n    graph = {i: [] for i in range(1, n+1)}\n    for color, node1, node2 in edges:\n        graph[node1].append(node2)\n        graph[node2].append(node1)\n    \n    # Initialize the count of blue edges\n    blue_count = 0\n    \n    # Traverse the graph using DFS and count the number of blue edges\n    def dfs(node, visited, color):\n        nonlocal blue_count\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                dfs(neighbor, visited, color)\n                if color == 'B':\n                    blue_count += 1\n    \n    # Traverse the graph and count the number of blue edges\n    visited = set()\n    dfs(1, visited, edges[0][0])\n    \n    # If the number of blue edges is less than k, it's not possible\n    if blue_count < k:\n        return 0\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3530,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N = int(input_string[0])\n    coasters = []\n    for i in range(1, N+1):\n        coasters.append(list(map(int, input_string[i].split()))\n    \n    Q = int(input_string[N+1])\n    times = []\n    for i in range(N+2, len(input_string)):\n        times.append(int(input_string[i]))\n    \n    # calculate fun for each coaster\n    fun = []\n    for i in range(N):\n        fun.append([coasters[i][0], coasters[i][1]])\n    \n    # calculate total fun for each time\n    total_fun = []\n    for t in times:\n        max_fun = 0\n        for i in range(N):\n            max_fun = max(max_fun, fun[i][0] - (t-1)**2 * fun[i][1])\n        total_fun.append(max_fun)\n    \n    # print output\n    for f in total_fun:\n        print(f)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3531,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n, m, k, w = map(int, input_string.split())\n    special_places = list(map(int, input().split()))\n    trails = []\n    for _ in range(m):\n        a, b, c = map(int, input().split())\n        trails.append((a, b, c))\n    \n    # Initialize graph\n    graph = [[] for _ in range(n+1)]\n    for a, b, c in trails:\n        graph[a].append((b, c))\n        graph[b].append((a, c))\n    \n    # Find shortest paths from special places to all other places\n    shortest_paths = [float('inf')] * (n+1)\n    for special in special_places:\n        shortest_paths[special] = 0\n        queue = [(special, 0)]\n        visited = set()\n        while queue:\n            node, dist = queue.pop(0)\n            if node in visited:\n                continue\n            visited.add(node)\n            for neighbor, cost in graph[node]:\n                if dist + cost < shortest_paths[neighbor]:\n                    shortest_paths[neighbor] = dist + cost\n                    queue.append((neighbor, dist + cost))\n    \n    # Find minimum cost of special-nonspecial trails\n    min_cost = float('inf')\n    for i in range(len(special_places)-1):\n        for j in range(i+1, len(special_places)):\n            min_cost = min(min_cost, trails[i][2] + trails[j][2])\n    \n    # Find minimum cost of regular-regular trails\n    for i in range(n):\n        for j in range(i+1, n):\n            if i in special_places or j in special_places:\n                continue\n            min_cost = min(min_cost, shortest_paths[i] + shortest_paths[j])\n    \n    # Check if it's possible to connect all places\n    if min_cost == float('inf'):\n        return -1\n    ",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3532,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def explode(string):\n        for i in range(len(string)):\n            if string[i] == 'C':\n                if i > 0 and string[i-1] == 'C':\n                    return string[:i-1] + string[i+1:]\n        return string\n    \n    def chain_reaction(string):\n        while 'C' in string:\n            string = explode(string)\n        return string\n    \n    return chain_reaction(input_string)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3533,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of tuples\n    trucks = [tuple(map(int, line.split())) for line in input_string.split('\\n')]\n    \n    # Initialize variables\n    total_tolls = 0\n    exits = set()\n    \n    # Iterate through each truck\n    for truck in trucks:\n        # If the truck's exit is not in the set of exits, add it to the set\n        if truck[1] not in exits:\n            exits.add(truck[1])\n        # Calculate the toll for the current truck\n        toll = abs(truck[0] - truck[1])\n        # Add the toll to the total tolls\n        total_tolls += toll\n    \n    # Return the total tolls\n    return total_tolls\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3534,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0, 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3535,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M, K = map(int, input_string.split())\n    grid = [[0 for _ in range(M)] for _ in range(N)]\n    \n    for _ in range(K):\n        spin, y, x = input().split()\n        y, x = int(y), int(x)\n        grid[y-1][x-1] = 1 if spin == '+' else -1\n    \n    count = 0\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 0:\n                count += 1\n    \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3536,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    tree = {}\n    for i in range(1, n+1):\n        b, p = map(int, input_string.split()[1:])\n        tree[i] = b\n    \n    def heapify(node):\n        if node in tree:\n            left = 2*node\n            right = 2*node + 1\n            if left in tree and right in tree:\n                if tree[left] < tree[right]:\n                    return left\n                else:\n                    return right\n            elif left in tree:\n                return left\n            else:\n                return right\n        else:\n            return None\n    \n    def is_heap(node):\n        if node in tree:\n            left = heapify(2*node)\n            right = heapify(2*node + 1)\n            if left is not None and right is not None:\n                return tree[node] < left and tree[node] < right\n            elif left is not None:\n                return tree[node] < left\n            elif right is not None:\n                return tree[node] < right\n            else:\n                return True\n        else:\n            return True\n    \n    def count_heaps(node):\n        if node in tree:\n            left = count_heaps(2*node)\n            right = count_heaps(2*node + 1)\n            return left + right + int(is_heap(node))\n        else:\n            return 0\n    \n    return count_heaps(1)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3537,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3538,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3539,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3540,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 3\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3541,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"AAAAA\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3542,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    A1, A2, B1, B2 = map(int, input().split())\n    A1, B1 = A1 - 1, B1 - 1\n    A2, B2 = A2 - 1, B2 - 1\n    \n    if A1 == A2 or B1 == B2:\n        return \"IMPOSSIBLE\"\n    \n    if A1[0] == A2[0] and A1[1] == A2[1]:\n        return abs(A1[0] - B1[0]) + abs(A1[1] - B1[1])\n    elif A1[0] == B1[0] and A1[1] == B1[1]:\n        return abs(A1[0] - A2[0]) + abs(A1[1] - A2[1])\n    elif A2[0] == B2[0] and A2[1] == B2[1]:\n        return abs(A2[0] - A1[0]) + abs(A2[1] - A1[1])\n    else:\n        return \"IMPOSSIBLE\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3543,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3544,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Initialize variables\n    max_width = 1\n    max_group_size = max(input_list)\n    \n    # Iterate through the list of groups\n    for group_size in input_list:\n        # If the group size is greater than the max_group_size, update max_group_size\n        if group_size > max_group_size:\n            max_group_size = group_size\n        # Calculate the width of the row\n        width = group_size + (max_group_size - group_size) % 2\n        # Update max_width if necessary\n        if width > max_width:\n            max_width = width\n    \n    # Check if the max_width is greater than 12\n    if max_width > 12:\n        return \"impossible\"\n    else:\n        return max_width\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3545,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3546,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n = int(input_string[0])\n    theorems = []\n    for i in range(1, len(input_string), 2):\n        p_i = int(input_string[i])\n        if p_i > 0:\n            deps = [int(x) for x in input_string[i+1].split()]\n            theorems.append(deps)\n        else:\n            theorems.append([])\n    \n    # calculate length of each theorem\n    theorem_lengths = [0] * n\n    for i in range(n):\n        for dep in theorems[i]:\n            theorem_lengths[i] += theorem_lengths[dep]\n        theorem_lengths[i] += sum(len(str(x) for x in theorems[i]) + 2)\n    \n    # find shortest length\n    min_length = min(theorem_lengths)\n    return min_length\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3547,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of tuples\n    plots = []\n    for i in range(int(input_string[0])):\n        plots.append(tuple(map(float, input_string[i+1].split()))\n    \n    # Initialize variables\n    total_area = 0\n    max_x = 0\n    max_y = 0\n    \n    # Iterate through each plot\n    for plot in plots:\n        # Calculate area of plot\n        area = (plot[2] - plot[0]) * (plot[3] - plot[1])\n        \n        # Check if plot overlaps with previous plots\n        for prev_plot in plots:\n            if plot[0] < prev_plot[2] and plot[2] > prev_plot[0] and plot[1] < prev_plot[3] and plot[3] > prev_plot[1]:\n                area = 0\n                break\n        \n        # Add area to total area\n        total_area += area\n        \n        # Update max_x and max_y if necessary\n        if plot[2] > max_x:\n            max_x = plot[2]\n        if plot[3] > max_y:\n            max_y = plot[3]\n    \n    # Calculate total area\n    total_area = (max_x - plots[0][0]) * (max_y - plots[0][1])\n    \n    # Round to two decimal places and return\n    return round(total_area, 2)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3548,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3549,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    m1, m2, m3 = map(int, input_string.split())\n    x1, x2, x3 = map(int, input_string.split())\n    y1, y2, y3 = map(int, input_string.split())\n    \n    # Your code here\n    # You can use the modulo operator (%) to find the remainder of a division\n    # You can use the range function to iterate over a range of numbers\n    # You can use the min function to find the minimum of a list of numbers\n    # You can use the list comprehension syntax to create a list of numbers\n    # You can use the sum function to add up a list of numbers\n    # You can use the abs function to find the absolute value of a number\n    \n    # Example:\n    # z = min([x1+t for t in range(m1) if abs(t) <= y1])\n    # z = min([z+t for t in range(m2) if abs(t) <= y2])\n    # z = min([z+t for t in range(m3) if abs(t) <= y3])\n    # print(z)\n    \n    # return z\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3550,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3551,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, T = input_string.split('\\n')\n    N = int(N)\n    bottles = list(map(int, T.split()))\n    T = int(T)\n    \n    # initialize variables\n    total_volume = sum(bottles)\n    target_bottle = 0\n    moves = []\n    \n    # check if it's possible\n    if T > total_volume:\n        return \"impossible\"\n    \n    # fill bottles until target bottle is full\n    for i in range(N):\n        if bottles[i] < T:\n            moves.append(f\"fill {i}\")\n            T -= bottles[i]\n            bottles[i] = 0\n        else:\n            bottles[i] -= T\n            moves.append(f\"fill {i}\")\n            break\n    \n    # transfer until target bottle is full\n    while T > 0:\n        for i in range(N):\n            if bottles[i] > 0:\n                if T <= bottles[i]:\n                    moves.append(f\"transfer {i} 0\")\n                    bottles[i] -= T\n                    T = 0\n                    break\n                else:\n                    moves.append(f\"transfer {i} 0\")\n                    T -= bottles[i]\n                    bottles[i] = 0\n        else:\n            return \"impossible\"\n    \n    # empty bottles\n    for i in range(N):\n        if bottles[i] > 0:\n            moves.append(f\"discard {i}\")\n            bottles[i] = 0\n    \n    return moves\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3552,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, k = map(int, input_string.split())\n    max_damage = 0\n    while n > 0:\n        max_damage += n\n        n -= k\n        if n > 0:\n            max_damage += min(n, m)\n            n -= min(n, m)\n    return max_damage\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3553,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K, M = map(int, input_string.split())\n    arr = list(map(int, input().split()))\n    queries = []\n    for i in range(M):\n        queries.append(input().split())\n    \n    for query in queries:\n        if query[0] == '1':\n            p, v = map(int, query[1:])\n            arr[p-1] = v\n        else:\n            subarray = [0] * (K+1)\n            for num in arr:\n                subarray[num] += 1\n            for i in range(1, K+1):\n                if subarray[i] == 0:\n                    break\n            else:\n                continue\n            for i in range(K, 0, -1):\n                if subarray[i] == 0:\n                    break\n            else:\n                continue\n            for i in range(K-1, 0, -1):\n                if subarray[i] == 0:\n                    break\n            else:\n                continue\n            for i in range(1, K+1):\n                if subarray[i] == 0:\n                    continue\n                for j in range(i+1, K+1):\n                    if subarray[j] == 0:\n                        continue\n                    if j-i+1 > 1:\n                        print(j-i+1)\n                        break\n                else:\n                    print(-1)\n                    break\n            else:\n                print(-1)\n                \ninput_string = input()\nsolution(input_string)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3554,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    D, W, C = map(int, input_string.split())\n    return (D/W) * C\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3555,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = map(int, input_string.split()[:2])\n    toys = [tuple(map(int, input().split()) for _ in range(n))\n    trees = [tuple(map(int, input().split()) for _ in range(m)]\n    \n    # calculate distance to each toy\n    distances = []\n    for toy in toys:\n        distance = max(abs(toy[0] - 0), abs(toy[1] - 0))\n        distances.append(distance)\n    \n    # calculate distance to each tree\n    for tree in trees:\n        distance = max(abs(tree[0] - 0), abs(tree[1] - 0))\n        distances.append(distance)\n    \n    # find the maximum distance\n    max_distance = max(distances)\n    \n    # calculate leash length\n    leash_length = max_distance + 1\n    \n    return round(leash_length, 2)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3556,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Parse input\n    m, q = map(int, input_string.split()[:2])\n    employees = []\n    for i in range(m):\n        employees.append(list(map(int, input().split()))\n    \n    # Sort employees by salary and height\n    employees.sort(key=lambda x: (x[1], x[2]))\n    \n    # Find the chairperson\n    chairperson = employees[0]\n    \n    # Initialize a dictionary to store the bosses and subordinates\n    bosses = {e[0]: None for e in employees}\n    \n    # Iterate through the employees and assign bosses\n    for i in range(1, m):\n        for j in range(i):\n            if employees[i][1] > employees[j][1] and employees[i][2] > employees[j][2]:\n                bosses[employees[i][0]] = employees[j][0]\n                break\n    \n    # Process queries\n    for i in range(q):\n        x = int(input())\n        if x == chairperson[0]:\n            print(0, 0)\n        else:\n            b = bosses[x]\n            k = 0\n            while b is not None:\n                k += 1\n                b = bosses[b]\n            print(bosses[x], k)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3557,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    p = list(map(int, input_string.split()))\n    \n    # Sort the list in descending order\n    p.sort(reverse=True)\n    \n    # Calculate the chaos for each segment\n    chaos = [p[i] // 10 * (i+1) * (i+1) for i in range(len(p)]\n    \n    # Calculate the total chaos\n    total_chaos = sum(chaos)\n    \n    # Return the maximum chaos\n    return max(chaos)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3558,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, D = map(int, input_string.split())\n    buildings = []\n    for _ in range(N):\n        transmitter, x, h = map(int, input().split())\n        buildings.append((transmitter, x, h))\n    \n    # sort buildings by x\n    buildings.sort(key=lambda x: x[1])\n    \n    # initialize variables\n    covered_length = 0\n    max_height = 0\n    max_covered_length = 0\n    \n    # iterate through buildings\n    for transmitter, x, h in buildings:\n        if transmitter == 1:\n            max_height = max(max_height, h)\n            covered_length = max(covered_length, x + h)\n            max_covered_length = max(max_covered_length, covered_length)\n        else:\n            covered_length = max(covered_length, x + max_height)\n    \n    return max_covered_length\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3559,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Parse input\n    N, a1, b1, a2, b2, map_string, t = input_string.split('\\n')\n    N = int(N)\n    a1, b1, a2, b2 = int(a1), int(b1), int(a2), int(b2)\n    map_string = map_string.split('\\n')\n    \n    # Initialize map\n    map_grid = [list(row) for row in map_string]\n    \n    # Simulate game\n    for _ in range(t):\n        # Attack phase\n        for i in range(N):\n            for j in range(N):\n                if map_grid[i][j] == '1':\n                    # Find adjacent Zerglings\n                    adjacent_zerglings = [(i-1, j), (i+1, j), (i, j-1), (i, j+1), (i-1, j-1), (i-1, j+1), (i+1, j-1), (i+1, j+1), (i+1, j-1), (i-1, j+1)]\n                    adjacent_zerglings = [(x, y) for x, y in adjacent_zerglings if 0 <= x < N and 0 <= y < N and map_grid[x][y] == '2']\n                    if adjacent_zerglings:\n                        # Attack closest Zergling\n                        closest_enemy = min(adjacent_zerglings, key=lambda z: abs(z[0]-i) + abs(z[1]-j))\n                        map_grid[i][j] = '.'\n                        map_grid[closest_enemy[0]][closest_enemy[1]] = '.'\n                    else:\n                        # Move towards closest Zergling\n                        opponent_zerglings = [(x, y) for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1), (i-1, j-1), (i-1, j+1), (i+1, j-",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3560,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3561,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    W, S, C, K = map(int, input_string.split())\n    \n    if W + S + C <= K:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3562,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, T = map(int, input_string.split()[0:2])\n    functions = []\n    for i in range(N):\n        a, b, c = map(float, input_string.split()[2+i*3:5+i*3])\n        functions.append((a, b, c))\n    \n    # calculate maximum grade for each subject\n    max_grades = []\n    for a, b, c in functions:\n        max_grades.append(max(c + b*T + 0.5*T**2, 0))\n    \n    # calculate total maximum grade\n    total_max_grade = sum(max_grades)\n    \n    # calculate average grade\n    avg_grade = total_max_grade / N\n    \n    return avg_grade\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3563,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    holes = [tuple(map(int, input_string[1:].split()))\n    #holes = [(0, 0), (1, 1), (1, 1), (0, 0), (1, 1)]\n    holes.sort()\n    holes = [(holes[i], holes[i+1]) for i in range(0, len(holes), 2)]\n    holes.sort(key=lambda x: x[0])\n    holes.sort(key=lambda x: x[1])\n    holes.sort(key=lambda x: x[0])\n    holes.sort(key=lambda x: x[1])\n    holes.sort(key=lambda x: x[0])\n    holes.sort(key=lambda x: x[1])\n    holes.sort(key=lambda x: x[0])\n    holes.sort(key=lambda x: x[1])\n    holes.sort(key=lambda x: x[0])\n    holes.sort(key=lambda x: x[1])\n    holes.sort(key=lambda x: x[0])\n    holes.sort(key=lambda x: x[1])\n    holes.sort(key=lambda x: x[0])\n    holes.sort(key=lambda x: x[1])\n    holes.sort(key=lambda x: x[0])\n    holes.sort(key=lambda x: x[1])\n    holes.sort(key=lambda x: x[0])\n    holes.sort(key=lambda x: x[1])\n    holes.sort(key=lambda x: x[0])\n    holes.sort(key=lambda x: x[1])\n    holes.sort(key=lambda x: x[0])\n    holes.sort(key=lambda x: x[1])\n    holes.sort(key=lambda x: x[0])\n    holes.sort(key=lambda x: x[1])\n    holes.sort(key=lambda x: x[0])\n    holes.sort(key=lambda x: x[1])\n    holes.sort(key=lambda x: x[0])\n    holes.",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3564,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3565,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = map(int, input_string.split()[:2])\n    cities = input_string.split('\\n')[2:n+2]\n    routes = [tuple(map(str.strip, line.split()) for line in input_string.split('\\n')[n+2:n+m+2]) for line in input_string.split('\\n')[n+2:n+m+2]]\n    assignments = input_string.split('\\n')[n+m+2:n+m+6]\n    \n    # create graph\n    graph = {city: set() for city in cities}\n    for route in routes:\n        graph[route[0]].add(route[1])\n        graph[route[1]].add(route[0])\n    \n    # calculate minimum cost\n    min_cost = float('inf')\n    for assignment in assignments:\n        start, end = assignment.split()\n        start_neighbors = graph[start]\n        end_neighbors = graph[end]\n        for path in itertools.product(start_neighbors, end_neighbors):\n            if path[0] != path[1]:\n                min_cost = min(min_cost, int(routes[frozenset(path)][1]))\n    \n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3566,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, q = map(int, input_string.split())\n    huts = list(map(int, input().split()))\n    for _ in range(q):\n        i, x = map(int, input().split())\n        huts[i] = x\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3567,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3568,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3569,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3570,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    events = []\n    dreams = []\n    scenarios = []\n    current_dream = 0\n    \n    # Parse input\n    for line in input_string.split('\\n'):\n        if line.startswith('E'):\n            events.append(line[2:])\n        elif line.startswith('D'):\n            current_dream = int(line[2:])\n        elif line.startswith('S'):\n            scenario = line[2:].split()\n            scenarios.append(scenario)\n    \n    # Process scenarios\n    for scenario in scenarios:\n        # Check if scenario is consistent with events\n        for event in scenario:\n            if event[0] == '!':\n                if event[1:] in events:\n                    return \"Plot Error\"\n            else:\n                if event not in events:\n                    return \"Plot Error\"\n        # Check if scenario is consistent with dreams\n        for i in range(current_dream):\n            if scenario[i] in dreams:\n                return str(i) + \" Just A Dream\"\n        # Check if scenario is consistent with previous dreams\n        for i in range(current_dream):\n            if scenario[i] in dreams:\n                return \"3 Just A Dream\"\n        # Check if scenario is consistent with all events\n        if all(event in events for event in scenario):\n            return \"Yes\"\n        else:\n            return \"Plot Error\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3571,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    W, H, F, N = map(int, input_string.split())\n    text = input_string.split(\"\\n\")[3:]\n    \n    # adjust text\n    adjusted_text = []\n    for line in text:\n        adjusted_text.append(\" \".join(line.split()))\n    \n    # calculate thumb position\n    L = len(adjusted_text)\n    T = (H - 3) // L * F\n    \n    # print window\n    window = [\"+\" + \"-\" * W + \"+\" + \"|\" + \"+\" + \"-\" * W + \"+\" for _ in range(H)]\n    for i in range(H):\n        if i < T:\n            window[i] = window[i][:1] + \" \" + adjusted_text[i + F] + \" \" + window[i][W+2:]\n        elif i == T:\n            window[i] = window[i][:1] + \" \" + \"^\" + \" \" + adjusted_text[i + F] + \" \" + window[i][W+3:]\n        else:\n            window[i] = window[i][:1] + \" \" + \"v\" + \" \" + adjusted_text[i + F] + \" \" + window[i][W+3:]\n    \n    # print window\n    for line in window:\n        print(line)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3572,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, L = map(int, input_string.split())\n    distances = []\n    for _ in range(n):\n        distances.append(list(map(int, input().split()))\n    \n    # Check if it's possible to visit all control points once and directly return to the first one\n    # by checking if the sum of distances is equal to L\n    total_distance = sum(distances[i][i] for i in range(n))\n    if total_distance == L:\n        return \"possible\"\n    else:\n        return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3573,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, D, C = map(int, input_string.split())\n    cesar_numbers = list(map(int, input().split()))\n    raul_numbers = list(map(int, input().split()))\n    \n    # Calculate the expected number of rounds\n    expected_rounds = 0\n    for i in range(C):\n        if cesar_numbers[i] in raul_numbers:\n            expected_rounds += 1\n    expected_rounds = (N - C) / D + 1\n    \n    return expected_rounds\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3574,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    N, Q = map(int, input_string.split())\n    arr = list(map(int, input().split()))\n    queries = [list(map(int, input().split()) for _ in range(Q))\n    \n    # Process queries\n    for L, R in queries:\n        # Find the longest contiguous sub-array with all values between the first and last number\n        # Initialize the longest sub-array length to 1\n        longest_subarray_length = 1\n        # Iterate through the array\n        for i in range(L, R):\n            # Check if the current value is between the first and last number\n            if arr[i] >= arr[L-1] and arr[i] <= arr[R]:\n                # If it is, update the longest sub-array length\n                longest_subarray_length = i - L + 1\n        # Print the longest sub-array length\n        print(longest_subarray_length)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3575,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = map(int, input_string.split()[:2])\n    neighbours = [tuple(map(int, input_string.split()[i:i+2]) for i in range(2, 2*m+2, 2))\n    s, t = map(int, input_string.split()[-2:])\n    \n    # create adjacency list\n    adj = [[] for _ in range(n)]\n    for u, v in neighbours:\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    # find shortest path from s to t using BFS\n    queue = [(s, 0)]\n    visited = set()\n    while queue:\n        node, depth = queue.pop(0)\n        if node == t:\n            return depth\n        for neighbour in adj[node]:\n            if neighbour not in visited:\n                visited.add(neighbour)\n                queue.append((neighbour, depth+1)\n    \n    return \"never meet\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3576,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C, K = map(int, input_string.split())\n    # Calculate the probability of being caught\n    caught = (K**2 - R*C) / (R*C)\n    # Calculate the probability of not being caught\n    not_caught = 1 - caught\n    # Calculate the modular inverse of K\n    mod_inv = pow(K, -1, 10**11+3)\n    # Calculate the probability of not being caught modulo 10**11+3\n    not_caught_mod = not_caught * mod_inv % (10**11+3)\n    # Output the result\n    return not_caught_mod\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3577,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of tuples\n    plant_coords = [(int(x), int(y)) for x, y in [line.split() for line in input_string.split('\\n')] if line]\n    \n    # Initialize variables\n    flowers = 0\n    prev_coords = None\n    prev_day = 1\n    \n    # Iterate through each day\n    for day, coords in enumerate(plant_coords, start=2):\n        # Check if the new plant intersects with any of the previous plants\n        for prev_x, prev_y in plant_coords[:day-1]:\n            if prev_x <= coords[0] <= prev_y or prev_x <= coords[1] <= prev_y:\n                flowers += 1\n        # Output the number of flowers\n        print(flowers)\n        # Update the previous coordinates and day\n        prev_coords = coords\n        prev_day = day\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3578,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, R, flights = input_string.split('\\n')\n    N = int(N)\n    R = int(R)\n    flights = [list(map(int, flight.split()) for flight in flights.split('\\n'))\n    F = int(input())\n    additional_flights = [list(map(int, flight.split()) for flight in input().split('\\n')\n    \n    # create a graph\n    graph = [[] for _ in range(N+1)]\n    for flight in flights:\n        a, b, c = flight\n        graph[a].append((b, c)\n        graph[b].append((a, c)\n    \n    # find the shortest path from each airport to Stockholm\n    shortest_paths = [float('inf') for _ in range(N+1)]\n    shortest_paths[1] = 0\n    for i in range(2, N+1):\n        for j in range(2, N+1):\n            for k in range(1, N+1):\n                if shortest_paths[k] == float('inf'):\n                    continue\n                if graph[k][i]:\n                    if shortest_paths[i] > shortest_paths[k] + graph[k][i][1]:\n                        shortest_paths[i] = shortest_paths[k] + graph[k][i][1]\n    \n    # add the additional flights\n    for flight in additional_flights:\n        a, b, c = flight\n        graph[a].append((b, c)\n        graph[b].append((a, c)\n        for i in range(2, N+1):\n            if shortest_paths[i] == float('inf'):\n                continue\n            if graph[i][a]:\n                if shortest_paths[i] > graph[i][a][1] + graph[a][b][1]:\n                    shortest_paths[i] = graph[i][a][1] + graph[a][b][1]\n            elif shortest_paths[i] > graph[i][b][1] + graph[b][a][1]:\n                short",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3579,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    h, w, a, b = map(int, input_string.split())\n    grid = []\n    for i in range(h):\n        grid.append(list(map(int, input().split()[:w]))\n    \n    def density(grid, x, y, h, w):\n        return sum(grid[y:y+h, x:x+w]) / (h * w)\n    \n    def MAD(grid, h, w, a, b):\n        densities = []\n        for i in range(0, w-1, w//2):\n            for j in range(0, h-1, h//2):\n                for k in range(i+w//2, w):\n                    for l in range(j+h//2, h):\n                        area = (k-i) * (l-j)\n                        if a <= area <= b:\n                            densities.append(density(grid, i, j, k-i, l-j))\n        return sorted(densities)[len(densities)//2]\n    \n    return MAD(grid, h, w, a, b)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3580,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split('\\n')[0])\n    a = list(map(int, input_string.split('\\n')[1].split()))\n    queries = int(input_string.split('\\n')[2]\n    queries = [list(map(int, input_string.split('\\n')[i].split()) for i in range(3, 3+queries)]\n    \n    for i, b in queries:\n        # Your code goes here\n        # You can use the following variables:\n        # a: the given sequence\n        # i: the start index\n        # b: the subset of integers\n        # n: the length of the sequence\n        # queries: the list of queries\n        # You can modify the variables as needed\n        # You can use any data structure you want, but keep in mind that you need to output the length of the longest prefix\n        # that only contains integers from B\n        # You can use any algorithm you want, but it should be efficient enough to handle the constraints\n        # You can use any programming language you want\n        # You can use any library you want\n        # You can use any approach you want, but it should be correct and efficient\n        # You can use any algorithm you want, but it should be efficient enough to handle the constraints\n        # You can use any programming language you want\n        # You can use any library you want\n        # You can use any approach you want, but it should be correct and efficient\n        # You can use any algorithm you want, but it should be efficient enough to handle the constraints\n        # You can use any programming language you want\n        # You can use any approach you want, but it should be correct and efficient\n        # You can use any algorithm you want, but it should be efficient enough to handle the constraints\n        # You can use any programming language you want\n        # You can use any approach you want, but it should be correct and efficient\n        # You can use any algorithm you want, but it should be efficient enough to handle the constraints\n        # You can use any programming language you want\n        # You can use any approach you want, but it should be correct and efficient\n        # You can use any algorithm you want, but it should be efficient enough to handle the constraints\n        # You can use any programming language you want\n        # You",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3581,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3582,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    current_mentors = list(map(int, input_string[1:]))\n    new_mentors = [0] * n\n    for i in range(n):\n        new_mentors[i] = current_mentors[i]\n    for i in range(n):\n        if current_mentors[i] > i:\n            new_mentors[i] = current_mentors[current_mentors[i]-1]\n        else:\n            new_mentors[i] = current_mentors[i]\n    return \" \".join(map(str, new_mentors))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3583,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    points = []\n    for i in range(1, n+1):\n        x, y = map(int, input_string[i].split())\n        points.append((x, y))\n    \n    # Your code goes here\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3584,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, M, K = map(int, input_string.split()[:3])\n    onions = [tuple(map(int, input().split()) for _ in range(N))\n    fence_posts = [tuple(map(int, input().split()) for _ in range(M))\n    \n    # sort fence posts by x-coordinate\n    fence_posts.sort(key=lambda x: x[0])\n    \n    # find convex hull\n    convex_hull = [fence_posts[0], fence_posts[1], fence_posts[2]]\n    for i in range(3, M):\n        while len(convex_hull) > 1 and (convex_hull[-1][0] - convex_hull[-2][0]) * (fence_posts[i][1] - convex_hull[-1][1]) - (convex_hull[-1][1] - convex_hull[-2][1]) * (fence_posts[i][0] - convex_hull[-1][0]) < 0:\n            convex_hull.pop()\n        convex_hull.append(fence_posts[i])\n    \n    # count onions inside convex hull\n    count = 0\n    for onion in onions:\n        if all(onion[0] >= fence_post[0] and onion[1] >= fence_post[1] for fence_post in convex_hull):\n            count += 1\n    \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3585,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    m, k = map(int, input_string.split())\n    return 9\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3586,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    S = list(map(int, input_string.split()))\n    \n    # Initialize max_d to -1\n    max_d = -1\n    \n    # Loop through all possible combinations of three distinct elements in S\n    for i in range(len(S)):\n        for j in range(i+1, len(S)):\n            for k in range(j+1, len(S)):\n                if S[i] + S[j] + S[k] > max_d and S[i] != S[j] and S[i] != S[k] and S[j] != S[k]:\n                    max_d = S[i] + S[j] + S[k]\n                    \n    # Check if max_d is still -1\n    if max_d == -1:\n        return \"No solution\"\n    else:\n        return max_d\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3587,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"11\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3588,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of lists\n    input_list = input_string.split('\\n')\n    input_list = [x.split() for x in input_list]\n    \n    # Initialize dictionary to store share counts for each day\n    share_counts = {}\n    \n    # Iterate through each company's records\n    for i in range(len(input_list)):\n        # Get number of records for this company\n        num_records = int(input_list[i][0])\n        # Iterate through each record for this company\n        for j in range(1, num_records+1):\n            # Get number of shares and day\n            shares, day = int(input_list[i][j]), int(input_list[i][j+1])\n            # If day already in dictionary, add shares to existing count\n            if day in share_counts:\n                share_counts[day] += shares\n            # If not, add day to dictionary with shares as value\n            else:\n                share_counts[day] = shares\n    \n    # Sort dictionary by keys (days)\n    sorted_days = sorted(share_counts.keys())\n    \n    # Print share counts for each day\n    for day in sorted_days:\n        print(share_counts[day], end=' ')\n    \n# Test cases\ninput_string = \"3\\n2\\n20 100\\n1\\n150 50\\n1\\n150 100\"\nsolution(input_string)\n# Output: 100 250 320 ",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3589,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    L, R = map(int, input_string.split())\n    a = [0] * 10\n    for i in range(L, R+1):\n        x = i\n        while x > 0:\n            a[x % 10] += 1\n            x //= 10\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3590,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    a, A = input_string.split('\\n')\n    a = int(a)\n    A = [tuple(map(int, line.split()) for line in A.split('\\n'))\n    b, B = input_string.split('\\n')\n    b = int(b)\n    B = [tuple(map(int, line.split()) for line in B.split('\\n')\n    \n    # Initialize variables\n    min_cost = float('inf')\n    current_cost = 0\n    current_polygon = A\n    \n    # Loop through all edges of A\n    for i in range(a):\n        for j in range(a):\n            if i != j:\n                # Check if edge i-1, i intersects B\n                if is_intersecting(current_polygon[i-1], current_polygon[i], B):\n                    # Cut at edge i-1, i\n                    new_polygon = cut_polygon(current_polygon, i)\n                    if is_inside(new_polygon, B):\n                        current_cost += distance(current_polygon[i-1], current_polygon[i])\n                        current_polygon = new_polygon\n                        if is_inside(current_polygon, B):\n                            break\n                    else:\n                        current_polygon = new_polygon\n                        \n    return current_cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3591,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    k = int(input_string[0])\n    photos = []\n    for i in range(1, k+1):\n        n = int(input_string[i][0])\n        heights = list(map(int, input_string[i+1].split()))\n        photos.append(heights)\n    \n    # Sort the photos by the height of Alice\n    photos.sort(key=lambda x: x[0])\n    \n    # Find the photos where Alice is on the left and Bob is on the right\n    result = []\n    for i in range(k):\n        if photos[i][-1] > photos[i][0]:\n            result.append(i+1)\n    \n    # Sort the result and print it\n    result.sort()\n    print(len(result))\n    for i in result:\n        print(i)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3592,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    pita_profit, pizza_profit, total_profit = input_string\n    pita_profit = float(pita_profit)\n    pizza_profit = float(pizza_profit)\n    total_profit = float(total_profit)\n    \n    pita_sales = 0\n    pizza_sales = 0\n    \n    while pita_profit > 0 and pizza_profit > 0:\n        pita_sales += 1\n        pizza_profit -= 1.71\n        pita_profit -= 0.25\n        \n    if pita_profit < 0:\n        pita_sales -= 1\n        \n    while pizza_profit > 0:\n        pizza_sales += 1\n        pizza_profit -= 2.38\n        \n    if pizza_profit < 0:\n        pizza_sales -= 1\n        \n    if pita_sales * 0.25 + pizza_sales * 1.71 == total_profit:\n        print(pita_sales, pizza_sales)\n    else:\n        print(\"None\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3593,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    board = []\n    for i in range(N):\n        board.append(list(map(int, input().split()))\n    \n    max_sum = 0\n    for i in range(N):\n        for j in range(N-1):\n            for k in range(j+1, N):\n                domino_sum = abs(board[i][j] + board[i][k])\n                max_sum = max(max_sum, domino_sum)\n                if K > 0:\n                    K -= 1\n                else:\n                    break\n            if K == 0:\n                break\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3594,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize the scores\n    odd_score = 0\n    even_score = 0\n    ingmariay_score = 0\n    \n    # Iterate through the input string\n    for i in range(len(input_string)):\n        # Get the starting player and number\n        player, number = input_string[i].split()\n        number = int(number)\n        \n        # If the starting player is Odd, add 1 to the score\n        if player == 'O':\n            odd_score += number\n        # If the starting player is Even, divide by a prime and add the result to the score\n        elif player == 'E':\n            if number % 2 == 0:\n                even_score += number\n            else:\n                even_score += number\n                even_score += 1\n        # If the starting player is Ingmariay, divide by a prime and add the result to the score\n        else:\n            if number % 3 == 0:\n                ingmariay_score += number\n            else:\n                ingmariay_score += number\n                ingmariay_score += 1\n                \n    # Return the scores in the order Odd, Even, Ingmariay\n    return str(min(odd_score, even_score, ingmariay_score)) + ' ' + str(min(odd_score, even_score, ingmariay_score)) + ' ' + str(min(odd_score, even_score, ingmariay_score))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3595,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    r, l = map(int, input_string.split())\n    rooms = []\n    for i in range(r):\n        rooms.append(list(map(int, input().split()))\n    \n    # Initialize variables\n    max_rooms = 0\n    max_x = 0\n    max_y = 0\n    \n    # Iterate through all rooms\n    for room in rooms:\n        x1, y1, x2, y2 = room\n        # Calculate the area of the room\n        area = (x2 - x1) * (y2 - y1)\n        # Calculate the distance from the center of the room to the center of the beam\n        dist_x = abs(x1 + (x2 - x1) / 2 - l * cos(vartheta))\n        dist_y = abs(y1 + (y2 - y1) / 2 - l * sin(vartheta))\n        # If the distance is less than or equal to the length of the beam, count the room as hit\n        if dist_x <= 0 and dist_y <= 0:\n            max_rooms += 1\n        # Update the maximum distance\n        max_x = max(max_x, dist_x)\n        max_y = max(max_y, dist_y)\n    \n    # Calculate the number of rooms that can be hit\n    max_rooms += ceil(max_x / l) + ceil(max_y / l)\n    return max_rooms\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3596,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b, c = map(float, input_string.splitlines()[0].split())\n    t1, t2, t3, t4 = map(int, input_string.splitlines()[1].split())\n    n, k, r, s = map(int, input_string.splitlines()[2].split())\n    \n    def f(x):\n        return c * integrate.quad(lambda x: t1 * gamma(x) + sqrt(t2 * log(erf(t3 * x)) - J(x, k)) ** t4, a, b)[0]\n    \n    def g(x):\n        return sum([f(i) * x ** i for i in range(r + s)])\n    \n    def J(x, k):\n        return 2 / pi * integrate.quad(lambda tau: cos(k * tau - x * sin(tau)), 0, pi)[0]\n    \n    return round((g(n) + l) ** 2 / (pi * e) + 1 / (l + 1), 2)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3597,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into a list of integers\n    w, l, r, x1, y1, x2, y2, x3, y3, h = map(int, input_string.split())\n    \n    # Calculate the distance from the left hole to the cue ball\n    d = (l - y1) / 2\n    \n    # Calculate the angle between the cue ball and the left hole\n    theta = 90 - math.degrees(math.atan2(y1 - h, x1))\n    \n    # Check if the shot is possible\n    if d < r or theta < 0 or theta > 90:\n        print(\"impossible\")\n    else:\n        # Calculate the distance from the cue ball to the right hole\n        d2 = math.sqrt((w - x2)**2 + (y2 - h)**2)\n        # Calculate the angle between the cue ball and the right hole\n        theta2 = 90 - math.degrees(math.atan2(y2 - h, w - x2))\n        # Check if the shot is possible\n        if d2 < r or theta2 < 0 or theta2 > 90:\n            print(\"impossible\")\n        else:\n            # Calculate the distance from the cue ball to the center of the table\n            d1 = math.sqrt((x1 - w/2)**2 + (y1 - l/2)**2)\n            # Calculate the angle between the cue ball and the center of the table\n            theta1 = 90 - math.degrees(math.atan2(y1 - l/2, x1 - w/2))\n            # Check if the shot is possible\n            if d1 < r or theta1 < 0 or theta1 > 90:\n                print(\"impossible\")\n            else:\n                # Calculate the angle between the cue ball and the center of ball 2\n                theta3 = math.degrees(math.atan2(y2 - y1, x2 - x1))\n                # Calculate the angle between the cue ball and the center of ball 3\n               ",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3598,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    input_list = list(map(int, input_string))\n    \n    # Sort the list in ascending order\n    input_list.sort()\n    \n    # Initialize the cheapest price\n    cheapest_price = input_list[0]\n    \n    # Initialize the cheapest price as a string\n    cheapest_price_str = str(cheapest_price)\n    \n    # Loop through the list\n    for i in range(1, len(input_list)):\n        # If the current digit is less than the cheapest price, update the cheapest price\n        if input_list[i] < cheapest_price:\n            cheapest_price = input_list[i]\n            cheapest_price_str = str(input_list[i])\n        # If the current digit is equal to the cheapest price, append it to the string\n        elif input_list[i] == cheapest_price:\n            cheapest_price_str += str(input_list[i])\n    \n    # Return the cheapest price as a string\n    return cheapest_price_str\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3599,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    T, N = map(int, input_string.split())\n    breaks = list(map(int, input().split())\n    breaks.sort()\n    breaks.reverse()\n    time = 0\n    on_stage = [0] * N\n    for i in range(N):\n        if breaks[i] + time <= T:\n            on_stage[i] = breaks[i]\n            time += breaks[i]\n        else:\n            on_stage[i] = T - time\n            time = T\n    return on_stage\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3600,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3601,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, misha_path, nadia_path = input_string.split('\\n')\n    n = int(n)\n    misha_path = [tuple(map(int, line.split())) for line in misha_path.split('\\n')]\n    nadia_path = [tuple(map(int, line.split())) for line in nadia_path.split('\\n')]\n    \n    # calculate distance between two points\n    def distance(p1, p2):\n        return ((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)**0.5\n    \n    # calculate time needed to travel from one point to another\n    def time_to_travel(p1, p2):\n        return distance(p1, p2)\n    \n    # calculate time needed to deliver package\n    def time_to_deliver(misha_path, nadia_path):\n        misha_dist = sum(time_to_travel(misha_path[i], misha_path[i+1]) for i in range(len(misha_path)-1))\n        nadia_dist = sum(time_to_travel(nadia_path[i], nadia_path[i+1]) for i in range(len(nadia_path)-1))\n        return misha_dist + nadia_dist\n    \n    # calculate time needed to pick up package\n    def time_to_pickup(misha_path, nadia_path):\n        misha_dist = sum(time_to_travel(misha_path[i], misha_path[i+1]) for i in range(len(misha_path)-1))\n        nadia_dist = sum(time_to_travel(nadia_path[i], nadia_path[i+1]) for i in range(len(nadia_path)-1))\n        return min(misha_dist, nadia_dist)\n    \n    # calculate time needed to deliver package\n    def time_to_deliver_with_pickup(mish",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3602,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3603,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, M = map(int, input_string.split())\n    translators = [list(map(int, input().split()) for _ in range(M))\n    # initialize dictionary to store languages spoken by each translator\n    languages = [set() for _ in range(M)]\n    for i in range(M):\n        languages[i].add(translators[i][0])\n        languages[i].add(translators[i][1])\n    \n    # initialize dictionary to store translators who speak each language\n    speakers = [set() for _ in range(N)]\n    for i in range(M):\n        speakers[translators[i][0]].add(i)\n        speakers[translators[i][1]].add(i)\n    \n    # initialize result list\n    result = []\n    \n    # iterate over languages\n    for i in range(N):\n        # if there are no translators who speak this language, skip\n        if not speakers[i]:\n            continue\n        # if there is only one translator who speaks this language, add to result\n        if len(speakers[i]) == 1:\n            result.append(list(speakers[i]))\n        # if there are multiple translators who speak this language, find pairs\n        elif len(speakers[i]) > 1:\n            for j in range(i+1, N):\n                if speakers[j] & languages[list(speakers[i])[0]:\n                    result.append([list(speakers[i])[0], list(speakers[j])[0]])\n                    result.append([list(speakers[i])[1], list(speakers[j])[1]])\n    \n    # if there are any unmatched translators, output impossible\n    if len(result) < M:\n        return \"impossible\"\n    # otherwise, output pairs\n    else:\n        for pair in result:\n            print(pair[0], pair[1])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3604,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, d = map(int, input_string.split())\n    sensors = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        sensors.append((x, y))\n    \n    # sort sensors by distance from origin\n    sensors.sort(key=lambda s: (s[0]**2 + s[1]**2))\n    \n    # initialize a set to store the subset\n    subset = set()\n    subset.add(1)\n    \n    # iterate through the sorted sensors\n    for i in range(1, n):\n        # calculate the distance between the current sensor and the last sensor in the subset\n        dist = (sensors[i][0] - sensors[i-1][0])**2 + (sensors[i][1] - sensors[i-1][1])**2\n        \n        # if the distance is less than or equal to d, add the current sensor to the subset\n        if dist <= d**2:\n            subset.add(i+1)\n    \n    # print the size of the subset and the sensors in it\n    print(len(subset))\n    print(*sorted(subset))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3605,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    tree_heights = list(map(int, input_string.split()))\n    \n    # Sort the list of tree heights\n    tree_heights.sort()\n    \n    # Initialize variables\n    min_diff = float('inf')\n    min_height = tree_heights[0]\n    max_height = tree_heights[0]\n    \n    # Iterate through the list of tree heights\n    for i in range(len(tree_heights)):\n        # Update min_height and max_height\n        min_height = min(min_height, tree_heights[i])\n        max_height = max(max_height, tree_heights[i])\n        \n        # Calculate the height difference\n        diff = max_height - min_height\n        \n        # Update min_diff\n        min_diff = min(min_diff, diff)\n        \n    return min_diff\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3606,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3607,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    variables = {}\n    for i in range(ord('A'), ord('Z')+1):\n        variables[chr(i)] = 0\n    \n    # Parse input\n    lines = input_string.split('\\n')\n    for line in lines:\n        if line == '':\n            continue\n        label, command = line.split(' ', 1)\n        label = int(label)\n        if command.startswith('LET'):\n            var, op, val = command.split(' ', 2)\n            if op == '=':\n                variables[var] = eval(val)\n        elif command.startswith('IF'):\n            cond, _, label = command.split(' ', 2)\n            label = int(label)\n            if eval(cond):\n                lines[label-1] = ''\n        elif command.startswith('PRINT'):\n            print(command[5:-1], end='')\n        elif command.startswith('PRINTLN'):\n            print(command[7:-1], end='\\n')\n    \n    # Execute program\n    for line in lines:\n        if line == '':\n            continue\n        label = int(line.split(' ', 1)[0])\n        if label in variables:\n            continue\n        else:\n            break\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3608,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string[0])\n    diff_1 = int(input_string[1])\n    diff_2 = int(input_string[2])\n    diff_3 = int(input_string[3])\n    \n    total_tasks = diff_1 + diff_2 + diff_3\n    \n    if total_tasks == 0:\n        return 1\n    \n    if total_tasks == 1:\n        return 1\n    \n    if total_tasks == 2:\n        return 2\n    \n    if total_tasks == 3:\n        return 3\n    \n    if total_tasks == 4:\n        return 6\n    \n    if total_tasks == 5:\n        return 10\n    \n    if total_tasks == 6:\n        return 15\n    \n    if total_tasks == 7:\n        return 26\n    \n    if total_tasks == 8:\n        return 42\n    \n    if total_tasks == 9:\n        return 68\n    \n    if total_tasks == 10:\n        return 1114\n    \n    if total_tasks == 11:\n        return 190\n    \n    if total_tasks == 12:\n        return 312\n    \n    if total_tasks == 13:\n        return 526\n    \n    if total_tasks == 14:\n        return 872\n    \n    if total_tasks == 15:\n        return 15006\n    \n    if total_tasks == 16:\n        return 2506\n    \n    if total_tasks == 17:\n        return 4272\n    \n    if total_tasks == 18:\n        return 7426\n    \n    if total_tasks == 19:\n        return 130026\n    \n    if total_tasks == 20:\n        return 24068\n    \n    if total_tasks == 21:\n        return 42768\n    \n    if total_tasks == 22:",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3609,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3610,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of tuples\n    teams = [tuple(map(int, line.split())) for line in input_string.split('\\n')]\n    \n    # Create set of all employee IDs\n    all_employees = set()\n    for team in teams:\n        all_employees.add(team[0])\n        all_employees.add(team[1])\n    \n    # Create set of all unique pairs of employees\n    unique_pairs = set()\n    for team in teams:\n        unique_pairs.add(tuple(sorted((team[0], team[1])))\n    \n    # Create set of all unique pairs of employees from different cities\n    unique_pairs_city = set()\n    for team in teams:\n        if team[0] < 1000:\n            unique_pairs_city.add(tuple(sorted((team[0], team[1])))\n        elif team[1] < 200:\n            unique_pairs_city.add(tuple(sorted((team[0], team[1])))\n    \n    # Compute the number of people to invite\n    k = len(unique_pairs_city)\n    \n    # Create list of people to invite\n    invitees = list(unique_pairs_city)\n    \n    # Output the result\n    print(k)\n    for invitee in invitees:\n        print(invitee[0])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3611,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, M, s, t = map(int, input_string.split())\n    links = []\n    for _ in range(M):\n        u, v, w = map(int, input().split())\n        links.append((u, v, w))\n    \n    # initialize graph\n    graph = [[] for _ in range(N)]\n    for u, v, w in links:\n        graph[u].append((v, w))\n        graph[v].append((u, w) if u > v else (u, w))\n    \n    # initialize distances\n    distances = [float('inf')] * N\n    distances[s] = 0\n    \n    # dijkstra's algorithm\n    visited = [False] * N\n    while True:\n        min_dist = float('inf')\n        min_node = -1\n        for i in range(N):\n            if not visited[i] and distances[i] < min_dist:\n                min_dist = distances[i]\n                min_node = i\n        \n        if min_node == -1:\n            break\n        \n        visited[min_node] = True\n        for neighbor, weight in graph[min_node]:\n            if not visited[neighbor] and distances[min_node] + weight < distances[neighbor]:\n                distances[neighbor] = distances[min_node] + weight\n        \n    # find all nodes with distance to t\n    result = []\n    for i in range(N):\n        if distances[i] != float('inf') and i != s and i != t:\n            result.append(i)\n    \n    result.sort()\n    return ' '.join(map(str, result))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3612,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, m = map(float, input_string.splitlines()[0].split())\n    W, H, X, Y = map(int, input_string.splitlines()[1].split())\n    heights = [list(map(int, line.split()) for line in input_string.splitlines()[2:])\n    max_distance = 0\n    \n    for i in range(H):\n        for j in range(W):\n            if heights[i][j] < 1:\n                continue\n            for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                if 0 <= i+di < H and 0 <= j+dj < W and heights[i+di][j+dj] < heights[i][j] - 1:\n                    max_distance = max(max_distance, abs(i-Y) + abs(j-X))\n                    \n    return max_distance\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3613,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 4\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3614,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3615,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 6\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3616,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 5\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3617,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, T, A, B, C, t0 = map(int, input_string.split())\n    t = [t0]\n    for i in range(1, N):\n        t.append((A*t[i-1]+B)%C+1)\n    \n    max_problems = T//min(t)\n    penalty = sum(t[:max_problems])\n    \n    return max_problems, penalty\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3618,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    count = 0\n    for i in range(1, 10**n):\n        for j in range(1, 10**n):\n            if i != j:\n                count += 1\n    return count % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3619,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    k, n = map(int, input_string.split())\n    candidates = []\n    for i in range(n):\n        s, p, r = map(int, input().split())\n        candidates.append((s, p, r))\n    \n    # Sort the candidates by their productivity\n    candidates.sort(key=lambda x: x[1], reverse=True)\n    \n    # Initialize the team with the CEO\n    team = [0]\n    team_value = 0\n    \n    # Iterate through the candidates\n    for candidate in candidates:\n        # If the candidate is not already in the team, and their recommender is in the team or is the CEO\n        if candidate[2] not in team and (candidate[2] == 0 or candidate[2] in team):\n            team.append(candidate[0])\n            team_value += candidate[1] / sum(team)\n            if len(team) == k:\n                break\n    \n    return round(team_value, 3)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3620,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3621,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    colors = [list(map(int, input_string[1:]))\n    adj_matrix = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            adj_matrix[i][j] = colors[i][j]\n            adj_matrix[j][i] = colors[i][j]\n    \n    def dfs(node, visited, color, cycle, ans):\n        visited[node] = True\n        for i in range(n):\n            if not visited[i] and adj_matrix[node][i] == color:\n                cycle.append(i)\n                dfs(i, visited, color, cycle, ans)\n                cycle.pop()\n    \n    def f(S):\n        visited = [False] * n\n        ans = 0\n        for i in range(n):\n            if not visited[i]:\n                cycle = [i]\n                dfs(i, visited, adj_matrix[i][i], cycle, ans)\n        return len(cycle)\n    \n    return sum(f(S) for S in itertools.combinations(range(n), 2)) % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3622,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Parse input\n    w, h, u, d, l, r = map(int, input_string.split())\n    grid = [input().split() for _ in range(h)]\n    \n    # Calculate probabilities\n    up_prob = u / 100\n    down_prob = d / 100\n    left_prob = l / 100\n    right_prob = r / 100\n    \n    # Initialize target probabilities\n    target_probs = [0] * w\n    \n    # Iterate through grid\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == 'T':\n                # Calculate probability of hitting target\n                if i == 0:\n                    target_probs[j] = 1\n                else:\n                    target_probs[j] += 1 - up_prob - down_prob - left_prob - right_prob\n                \n                # Update probabilities for adjacent spaces\n                if j > 0:\n                    target_probs[j-1] += left_prob\n                if j < w-1:\n                    target_probs[j+1] += right_prob\n                if i > 0:\n                    target_probs[j] += up_prob\n                if i < h-1:\n                    target_probs[j] += down_prob\n    \n    # Normalize probabilities\n    target_probs = [prob / sum(target_probs) for prob in target_probs]\n    \n    # Print probabilities\n    for prob in target_probs:\n        print(\"{:.6f}\".format(prob))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3623,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b, c, d = map(float, input_string.split())\n    \n    # Convert degrees to radians\n    a, b, c, d = [math.radians(x) for x in [a, b, c, d]]\n    \n    # Calculate the area of the square\n    area = 360\n    \n    # Calculate the area of each quadrant\n    q1 = (area/2) - (a/2) - (b/2) - (c/2) - (d/2)\n    q2 = (a/2) + (b/2) - (c/2) - (d/2)\n    q3 = (a/2) + (b/2) + (c/2) - (d/2)\n    q4 = (a/2) - (b/2) + (c/2) - (d/2)\n    \n    # Calculate the total area watered by the sprinklers\n    total_area = q1 + q2 + q3 + q4\n    \n    # Calculate the proportion of the area watered\n    proportion = total_area / area\n    \n    return proportion\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3624,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3625,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N = int(input_string[0])\n    species = []\n    for i in range(1, len(input_string), 4):\n        species.append(list(map(int, input_string[i:i+4]))\n    \n    # calculate maximum harvest\n    max_harvest = 0\n    for s in species:\n        start_pop = s[2]\n        end_pop = s[2] + s[1] * s[0]\n        max_harvest = max(max_harvest, end_pop)\n    \n    return max_harvest\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3626,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of lists\n    rectangles = [list(map(int, input_string.split())) for _ in range(int(input_string.split()[0]))]\n    \n    # Initialize a set to store rectangles\n    rect_set = set()\n    \n    # Iterate through each rectangle\n    for rect in rectangles:\n        # Convert rectangle to a tuple and add to set\n        rect_set.add(tuple(rect))\n    \n    # Initialize a set to store intersections\n    intersection_set = set()\n    \n    # Iterate through each rectangle\n    for i in range(len(rectangles)):\n        for j in range(i+1, len(rectangles)):\n            # Check if rectangles intersect\n            if rectangles[i][0] < rectangles[j][2] and rectangles[i][2] > rectangles[j][0] and rectangles[i][1] < rectangles[j][3] and rectangles[i][3] > rectangles[j][1]:\n                # Add intersection to set\n                intersection_set.add((rectangles[i][0], rectangles[i][1], rectangles[j][0], rectangles[j][1]))\n                intersection_set.add((rectangles[i][2], rectangles[i][1], rectangles[j][2], rectangles[j][1]))\n                intersection_set.add((rectangles[i][0], rectangles[i][3], rectangles[j][0], rectangles[j][3]))\n                intersection_set.add((rectangles[i][2], rectangles[i][3], rectangles[j][2], rectangles[j][3]))\n    \n    # Check if intersection set is not empty\n    if intersection_set:\n        return 1\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3627,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of lists\n    cliff = [list(map(int, input_string.split()))]\n    start_points = list(map(int, input_string.split()))\n    \n    # Initialize variables\n    min_energy = float('inf')\n    energy = 0\n    visited = set()\n    \n    # Function to calculate the energy required to reach a certain position\n    def energy_required(row, col):\n        if (row, col) in visited:\n            return 0\n        visited.add((row, col))\n        if row == 0 and col == 0:\n            return 0\n        if row < 0 or row >= len(cliff) or col < 0 or col >= len(cliff[0]):\n            return float('inf')\n        if cliff[row][col] == 'S':\n            return 0\n        return cliff[row][col] + energy_required(row-1, col) + energy_required(row, col-1) + energy_required(row+1, col) + energy_required(row, col+1)\n    \n    # Calculate the minimum energy required to reach each start point\n    for start_row in range(len(cliff)):\n        for start_col in range(len(cliff[0])):\n            if start_string[start_row][start_col] == 'S':\n                energy = energy_required(start_row, start_col)\n                min_energy = min(min_energy, energy)\n    \n    return min_energy\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3628,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    a = list(map(int, input_string.split()[1:]))\n    for pi in itertools.permutations(range(1, n+1)):\n        for sigma in itertools.permutations(range(1, n+1)):\n            if all(a[i] == (pi[i] + sigma[i]) % n for i in range(n)):\n                return \" \".join(str(pi[i] + 1) for i in range(n)) + \" \" + \" \".join(str(sigma[i] + 1) for i in range(n))\n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3629,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n = int(input_string[0])\n    trees = []\n    for i in range(1, n+1):\n        x, y, r = map(int, input_string[i].split())\n        trees.append((x, y, r))\n    b, d = map(int, input_string[-1].split())\n    \n    # calculate probability\n    total_area = 2*b**2*pi\n    hit_area = 0\n    for x, y, r in trees:\n        hit_area += pi*r**2\n    return 1 - hit_area/total_area\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3630,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    s1, s2 = input_string.split()\n    moves = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            if s1[i] == 'z':\n                moves += 1\n                while s1[i] != 'y':\n                    s1 = s1[1:] + s1[0]\n            else:\n                moves += 1\n                s1 = s1[:i] + chr(ord(s1[i])-1) + s1[i+1:]\n    return moves\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3631,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = map(int, input_string.split()[:2])\n    beacons = [tuple(map(int, input_string.split()[2:4]) for _ in range(n)]\n    peaks = [tuple(map(int, input_string.split()[4:7]) for _ in range(m)]\n    \n    # initialize a set of all beacons\n    all_beacons = set(beacons)\n    \n    # initialize a set of all lit beacons\n    lit_beacons = set()\n    \n    # initialize a set of all unlit beacons\n    unlit_beacons = set(beacons)\n    \n    # initialize a set of all mountain peaks\n    mountain_peaks = set(peaks)\n    \n    # initialize a set of all unlit mountain peaks\n    unlit_peaks = set(peaks)\n    \n    # initialize a set of all riders\n    riders = set()\n    \n    # initialize a set of all unlit riders\n    unlit_riders = set()\n    \n    # while there are unlit beacons or unlit riders\n    while unlit_beacons or unlit_riders:\n        # if there are unlit beacons\n        if unlit_beacons:\n            # find the closest unlit beacon to a lit beacon\n            closest_beacon = min(unlit_beacons, key=lambda b: min(distance(b, l) for l in lit_beacons))\n            # add the closest beacon to the lit beacons\n            lit_beacons.add(closest_beacon)\n            # remove the closest beacon from the unlit beacons\n            unlit_beacons.remove(closest_beacon)\n            # add a rider to the riders\n            riders.add(closest_beacon)\n            # remove all peaks that are within the radius of the closest beacon\n            for p in mountain_peaks:\n                if distance(closest_beacon, p) <= p[2]:\n                    unlit_peaks.remove(p)",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3632,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3633,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, k = map(int, input_string.split())\n    a = list(map(int, input().split()))\n    \n    # Initialize the list of scores\n    scores = [m] + [0] * n\n    \n    # Initialize the list of permutation\n    perm = [i for i in range(1, n+1)]\n    \n    # Loop through the critics\n    for i in range(1, n):\n        # Calculate the average score\n        avg = sum(scores[:i+1]) / i\n        # If the average score is less than or equal to the initial opinion, give the maximum score\n        if avg <= a[i]:\n            scores[i] = m\n        # Otherwise, give a score of 0\n        else:\n            scores[i] = 0\n    \n    # Check if the average score is equal to k/n\n    if sum(scores) / n == k/n:\n        return perm\n    else:\n        return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3634,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3635,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    briefcases = list(map(int, input_string.split()))\n    \n    # Sort the list in descending order\n    briefcases.sort(reverse=True)\n    \n    # Initialize variables\n    total_bananas = sum(briefcases)\n    max_executives = 1\n    current_executives = 1\n    \n    # Loop through the list\n    for i in range(1, len(briefcases)):\n        # If the current executive is less evil than the previous one, give them the briefcase\n        if briefcases[i] >= briefcases[i-1]:\n            current_executives += 1\n        # If the current executive is more evil than the previous one, update the total bananas\n        else:\n            total_bananas -= briefcases[i-1]\n            # If the total bananas is less than the previous executive's total bananas, break the loop\n            if total_bananas < briefcases[i-2]:\n                break\n            # If the total bananas is greater than or equal to the previous executive's total bananas, give them the briefcase\n            else:\n                current_executives += 1\n    \n    return current_executives\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3636,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, p = map(int, input_string.split())\n    \n    # Initialize the grid with 0s\n    grid = [[0 for _ in range(m)] for _ in range(n)]\n    \n    # Initialize the count of ways to place the block\n    count = 0\n    \n    # Iterate through all possible positions of the block\n    for i in range(n-1):\n        for j in range(m-1):\n            # Check if the block can be placed at this position\n            if grid[i][j] == 0 and grid[i][j+1] == 0 and grid[i+1][j] == 0 and grid[i+1][j+1] == 0:\n                # Place the block\n                grid[i][j] = 1\n                grid[i][j+1] = 1\n                grid[i+1][j] = 1\n                grid[i+1][j+1] = 1\n                # Count the number of obstacles in the subgrids\n                count += sum(sum(row) for row in grid)\n                # Remove the block\n                grid[i][j] = 0\n                grid[i][j+1] = 0\n                grid[i+1][j] = 0\n                grid[i+1][j+1] = 0\n    \n    # Return the count modulo p\n    return count % p\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3637,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"zucchini mozzarella mushrooms artichoke\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3638,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3639,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    T, c, d = input_string.split()\n    T = int(T)\n    c = float(c)\n    d = float(d)\n    rain = [int(r) for r in input_string.split()[2:]]\n    \n    # calculate sweat\n    sweat = c * (v**2)\n    \n    # calculate total rain\n    total_rain = sum(rain)\n    \n    # calculate optimal speed\n    v = (total_rain / (T * d))**0.5\n    \n    # calculate optimal time\n    optimal_time = (total_rain / v) + T\n    \n    # calculate optimal sweat\n    optimal_sweat = c * (v**2) * optimal_time\n    \n    return round(optimal_sweat, 6)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3640,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    meow_factor = 0\n    meow_string = \"meow\"\n    meow_found = False\n    operations = [\"insert\", \"delete\", \"replace\", \"swap\"]\n    \n    # Loop through each character in the input string\n    for i in range(len(input_string)):\n        # Loop through each operation\n        for operation in operations:\n            # If the current character is \"m\" and the next character is \"e\", check if the next two characters are \"o\" and \"w\"\n            if input_string[i:i+2] == \"mo\" and input_string[i+2:i+4] == \"w\":\n                meow_found = True\n                meow_factor += 1\n            # If the current character is \"o\" and the next character is \"w\", check if the next character is \"m\"\n            elif input_string[i:i+2] == \"ow\":\n                meow_found = True\n                meow_factor += 1\n            # If the current character is \"w\" and the next character is \"m\", check if the previous character is \"o\"\n            elif input_string[i-1:i+1] == \"om\":\n                meow_found = True\n                meow_factor += 1\n            # If the current character is \"m\" and the next character is \"e\", check if the previous character is \"o\"\n            elif input_string[i-1:i+1] == \"me\":\n                meow_found = True\n                meow_factor += 1\n            # If the current character is \"e\" and the next character is \"m\", check if the previous character is \"o\"\n            elif input_string[i:i+2] == \"em\":\n                meow_found = True\n                meow_factor += 1\n            # If the current character is \"i\" and the next character is \"s\", check if the next character is \"y\"\n            elif input_string[i:i+2] == \"is\" and input_string[i+2] == \"y\":\n                meow_found = True\n                meow_factor += 1\n            # If the current character is \"y\" and the next",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3641,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    k, n = map(int, input_string.split())\n    beads = list(map(int, input().split()))\n    total_weight = sum(beads)\n    if total_weight % k != 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3642,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of tuples\n    edges = [tuple(map(int, line.split())) for line in input_string.split('\\n')]\n    # Create a dictionary to store the magic of each node\n    magic = {}\n    for line in input_string.split('\\n'):\n        node, magic_value = line.split()\n        magic[int(node)] = int(magic_value)\n    \n    # Create a dictionary to store the adjacency list\n    adjacency_list = {i: [] for i in range(1, len(magic) + 1)}\n    for edge in edges:\n        adjacency_list[edge[0]].append(edge[1])\n        adjacency_list[edge[1]].append(edge[0])\n    \n    # Function to find the path with the minimal magic\n    def find_minimal_magic(node, visited, current_magic, current_path):\n        if len(current_path) == 1:\n            return current_magic\n        min_magic = float('inf')\n        for neighbor in adjacency_list[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                min_magic = min(min_magic, find_minimal_magic(neighbor, visited, current_magic * magic[neighbor], current_path + [neighbor]))\n                visited.remove(neighbor)\n        return min_magic\n    \n    # Find the minimal magic path\n    min_magic = float('inf')\n    for node in adjacency_list[1]:\n        min_magic = min(min_magic, find_minimal_magic(node, {1}, magic[1]))\n    \n    # Find the path with the minimal magic\n    path = []\n    for node in adjacity_list[1]:\n        if find_minimal_magic(node, {1}, magic[1]) == min_magic:\n            path = [1] + current_path\n            break\n    \n    # Calculate the magic of the path\n    magic_path = reduce(lambda x, y: x * y,",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3643,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string[0])\n    salaries = []\n    for i in range(1, N+1):\n        salaries.append(list(map(float, input_string[i].split()))\n    \n    total_damages = 0\n    for i in range(1, N):\n        for j in range(i):\n            total_damages += abs(salaries[i] - salaries[j])\n    \n    return total_damages / (N * (N-1))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3644,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3645,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    numbers = list(map(int, input_string[1].split()))\n    # print(numbers)\n    result = []\n    for i in range(1, n):\n        if numbers[i] == numbers[i-1]:\n            continue\n        else:\n            result.append(numbers[i-1])\n    if len(result) == 0:\n        print(\"none\")\n    else:\n        result.sort()\n        for num in result:\n            print(num)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3646,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3647,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def get_min_moves(maze, start_row, start_col, goal_row, goal_col):\n        visited = set()\n        queue = [(start_row, start_col, 0)]\n        while queue:\n            row, col, moves = queue.pop(0)\n            if (row, col) == (goal_row, goal_col):\n                return moves\n            if (row, col) in visited:\n                continue\n            visited.add((row, col))\n            for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                new_row, new_col = row + dr, col + dc\n                if 0 <= new_row < len(maze) and 0 <= new_col < len(maze[0]) and maze[new_row][new_col] == '.':\n                    queue.append((new_row, new_col, moves + 1))\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3648,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n, m, p = map(int, input_string.split())\n    insecure_buildings = list(map(int, input().split()))\n    connections = []\n    for _ in range(m):\n        connections.append(list(map(int, input().split()))\n    \n    # Initialize graph\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        x, y, cost = connections[i]\n        graph[x].append((y, cost)\n        graph[y].append((x, cost)\n    \n    # Initialize insecure_graph\n    insecure_graph = [[] for _ in range(n+1)]\n    for building in insecure_buildings:\n        insecure_graph[building] = [True] * (n+1)\n        insecure_graph[building][building] = False\n    \n    # Initialize dp\n    dp = [float('inf')] * (n+1)\n    dp[1] = 0\n    \n    # Fill dp\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                continue\n            for neighbor, cost in graph[i]:\n                if insecure_graph[i][neighbor]:\n                    continue\n                dp[j] = min(dp[j], dp[i] + cost)\n    \n    # Check if it's possible\n    if any(dp[i] == float('inf') for i in range(1, n+1)):\n        return \"impossible\"\n    \n    # Calculate the cost\n    cost = sum(dp[1:])\n    \n    return cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3649,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b, c, d = map(int, input_string.split())\n    if a+b+c+d == 0:\n        return \"impossible\"\n    elif a+b+c+d == 1:\n        return \"0\"\n    else:\n        return \"00\" * a + \"1\" * b + \"0\" * c + \"1\" * d\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3650,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    N, M, B = map(int, input_string.split())\n    target_blocks = []\n    for i in range(B):\n        r, c = map(int, input().split())\n        target_blocks.append((r, c))\n    \n    # Check if it's possible\n    # If not, return \"impossible\"\n    # If yes, return \"possible\" followed by the moves\n    # Hint: You can use a graph to represent the blocks and their connections\n    # and use BFS to find the shortest path from the initial block to the target blocks\n    # If there is no path, return \"impossible\"\n    # If there is a path, return the moves\n    # You can use a dictionary to store the connections between blocks\n    # and a queue to perform BFS\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3651,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n = int(input_string[0])\n    planets = [tuple(map(int, input_string[i+1].split())) for i in range(n)]\n    \n    # calculate distances\n    distances = []\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                distances.append(sum((planets[i][k] - planets[j][k])**2 for k in range(3))**0.5)\n    \n    # find shortest distance\n    min_distance = min(distances)\n    \n    # calculate portal distance\n    portal_distance = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                portal_distance += sum((planets[i][k] - planets[j][k])**2 for k in range(3))**0.5\n    \n    # return minimum of portal distance and Euclidean distance\n    return min(min_distance, portal_distance)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3652,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string.split()[0])\n    first_row = list(map(int, input_string.split()[1:N+1])\n    second_row = list(map(int, input_string.split()[N+1:2*N+1])\n    third_row = list(map(int, input_string.split()[2*N+1:3*N+1])\n    \n    # Your code here\n    # Initialize a set to keep track of the numbers in the first row\n    first_row_set = set(first_row)\n    \n    # Initialize a set to keep track of the numbers in the second row\n    second_row_set = set(second_row)\n    \n    # Initialize a set to keep track of the numbers in the third row\n    third_row_set = set(third_row)\n    \n    # Initialize a set to keep track of the numbers that appear in all three rows\n    common_set = first_row_set.intersection(second_row_set, third_row_set)\n    \n    # Initialize a set to keep track of the numbers that appear in the first two rows\n    first_two_set = first_row_set.intersection(second_row_set)\n    \n    # Initialize a set to keep track of the numbers that appear in the first and third rows\n    first_third_set = first_row_set.intersection(third_row_set)\n    \n    # Initialize a set to keep track of the numbers that appear in the second and third rows\n    second_third_set = second_row_set.intersection(third_row_set)\n    \n    # Initialize a set to keep track of the numbers that appear in only the first row\n    only_first_set = first_row_set.difference(second_row_set, third_row_set)\n    \n    # Initialize a set to keep track of the numbers that appear in only the second row\n    only_second_set = second_row_set.difference(first_row_set, third_row_set)\n    \n    # Initialize a set to keep track of the numbers that appear in only the third row\n    only_third_set = third_",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3653,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    L = int(input_string[0])\n    x1, y1 = map(int, input_string[1].split())\n    x2, y2 = map(int, input_string[2].split())\n    \n    # Calculate the length of the wall\n    wall_length = abs(x2 - x1) + abs(y2 - y1)\n    \n    # Calculate the length of the chain\n    chain_length = wall_length + 1\n    \n    return chain_length\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3654,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    k, n = map(int, input_string.split())\n    F = [42, 11*k+77]\n    for i in range(2, n+1):\n        F.append(2*F[i-1]-F[i-2]+10*k)\n    count = 0\n    for i in range(2, n+1):\n        if F[i] % 2 == 0:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3655,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    robot_image = input_string.split('\\n')[1:]\n    floor_image = input_string.split('\\n')[0].split()\n    floor_image = [list(map(int, floor_image[1:]))]\n    robot_image = list(map(int, robot_image[1:]))\n    candidates = []\n    for i in range(len(floor_image)):\n        for j in range(len(floor_image[0])):\n            if floor_image[i][j] == robot_image[0][0]:\n                candidates.append((i,j))\n    candidates.sort(key=lambda x: (x[0], x[1]))\n    return candidates\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3656,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    B, T, f = map(float, input_string.split())\n    bugs = []\n    for _ in range(int(B)):\n        p, s = map(float, input().split())\n        bugs.append((p, s))\n    \n    # initialize variables\n    total_severity = 0\n    total_hours = 0\n    while T > 0:\n        # choose a bug to work on\n        max_p = max(bugs, key=lambda x: x[0])\n        p, s = max_p\n        # try to fix the bug\n        if random.random() < p:\n            # success\n            total_severity += s\n            p *= f\n        else:\n            # failure\n            p *= f\n        # update time\n        T -= 1\n        total_hours += 1\n    \n    return total_severity\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3657,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    W, v_h, N = map(int, input_string.split())\n    gates = []\n    for _ in range(N):\n        gates.append(list(map(int, input().split()))\n    S = int(input())\n    skis = []\n    for _ in range(S):\n        skis.append(int(input())\n    \n    # Initialize variables\n    min_time = float('inf')\n    min_speed = None\n    \n    # Iterate through all pairs of skis\n    for s in skis:\n        # Calculate the time it takes to pass through the course\n        time = 0\n        for i in range(N):\n            time += (gates[i][1] - gates[i][0]) / s\n            if time > W / v_h:\n                break\n        else:\n            # If you can pass through the course with this speed, update the minimum time and speed\n            if time < min_time:\n                min_time = time\n                min_speed = s\n    \n    # If you can't pass through the course with any pair of skis, print IMPOSSIBLE\n    if min_speed is None:\n        print(\"IMPOSSIBLE\")\n    else:\n        print(min_speed)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3658,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    pines = []\n    aspens = []\n    \n    for i in range(3):\n        pines.append(list(map(float, input_string.split()[i].split(',')))\n    \n    for i in range(3, 6):\n        aspens.append(list(map(float, input_string.split()[i].split(',')))\n    \n    pines.sort(key=lambda x: x[0])\n    aspens.sort(key=lambda x: x[0])\n    \n    pines_area = 0\n    aspen_area = 0\n    \n    for i in range(len(pines)):\n        for j in range(len(aspens)):\n            if pines[i][0] == aspens[j][0]:\n                pines_area += (pines[i][1] - aspens[j][1]) * (pines[i][1] - aspens[j][1])\n            elif pines[i][0] < aspens[j][0]:\n                pines_area += (pines[i][1] - aspens[j-1][1]) * (pines[i][1] - aspens[j-1][1])\n            else:\n                break\n    \n    for i in range(len(aspens)):\n        for j in range(len(pines):\n            if aspens[i][0] == pines[j][0]:\n                aspen_area += (aspens[i][1] - pines[j][1]) * (aspens[i][1] - pines[j][1])\n            elif aspens[i][0] < pines[j][0]:\n                aspen_area += (aspens[i][1] - pines[j-1][1]) * (aspens[i][1] - pines[j-1][1])\n            else:\n                break\n    \n    return pines_area + aspen_area\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3659,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of tuples\n    books = [(int(h), int(t)) for h, t in [line.split() for line in input_string.split('\\n')] if line]\n    \n    # Sort the books by height\n    books.sort(key=lambda x: x[0], reverse=True)\n    \n    # Initialize variables\n    total_height = 0\n    total_width = 0\n    shelf_height = 0\n    shelf_width = 0\n    shelf_count = 0\n    \n    # Iterate through the books\n    for book in books:\n        height, width = book\n        \n        # If the book fits on the current shelf\n        if shelf_height + height <= 150:\n            shelf_height += height\n            shelf_width = max(shelf_width, width)\n        # If the book does not fit on the current shelf, start a new shelf\n        else:\n            shelf_count += 1\n            total_height += shelf_height\n            total_width = max(total_width, shelf_width)\n            shelf_height = height\n            shelf_width = width\n    \n    # Add the last shelf\n    total_height += shelf_height\n    total_width = max(total_width, shelf_width)\n    \n    # Calculate the area\n    area = total_height * total_width\n    \n    return area\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3660,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    stickers = {}\n    message = list(input_string)\n    min_cost = 0\n    \n    # Loop through each sticker and add it to the dictionary\n    for i in range(n):\n        word, price = input().split()\n        stickers[word] = int(price)\n    \n    # Loop through each character in the message\n    for char in message:\n        # If the character is in the dictionary, add its price to the min_cost\n        if char in stickers:\n            min_cost += stickers[char]\n        # If the character is not in the dictionary, check if it can be formed by two stickers\n        else:\n            for key in stickers:\n                if len(key) > 1:\n                    if message.count(key) > 0:\n                        # Check if the message can be formed by two stickers\n                        if message.count(key) % 2 == 0:\n                            # If it can, add the sum of the prices of the two stickers to min_cost\n                            min_cost += stickers[key] + stickers[key[:-1] + key[0]]\n                            break\n                        else:\n                            # If it cannot, return IMPOSSIBLE\n                            return \"IMPOSSIBLE\"\n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3661,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, S, L = map(int, input_string.split())\n    A = []\n    B = []\n    for _ in range(L):\n        A.append(int(input()))\n        B.append(int(input()))\n    \n    A = list(set(A))\n    B = list(set(B))\n    \n    result = []\n    for i in range(L):\n        if A.count(i+1) > S:\n            result.append(\"CORP \" + str(B[i]))\n        else:\n            result.append(\"INDV \" + str(A[i]))\n    \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3662,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3663,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n = int(input_string[0])\n    routes = []\n    for i in range(1, n):\n        routes.append(list(map(int, input_string[i].split()))\n    \n    # create graph\n    graph = [[] for _ in range(n)]\n    for route in routes:\n        graph[route[0]].append((route[1], route[2]))\n        graph[route[1]].append((route[0], route[2]))\n    \n    # initialize army counts\n    armies = list(map(int, input_string[n:]))\n    \n    # initialize min cost\n    min_cost = 0\n    \n    # find minimum cost to move armies\n    for i in range(n):\n        # find minimum number of armies to move\n        min_armies = min(armies[i], y_i)\n        # calculate cost of moving armies\n        for j in range(n):\n            if j != i:\n                min_cost += graph[i][j][1] * min_armies\n        # update armies\n        armies[i] -= min_armies\n        armies[j] += min_armies\n    \n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3664,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    r, c, i, j, n = map(int, input_string.split())\n    ice = [['.' for _ in range(c)] for _ in range(r)]\n    ice[i-1][j-1] = 'A'\n    direction = 'U'\n    step_size = 1\n    \n    for _ in range(n):\n        if direction == 'U':\n            if i == 1:\n                i = r\n            else:\n                i -= 1\n        elif direction == 'D':\n            if i == r:\n                i = 1\n            else:\n                i += 1\n        elif direction == 'L':\n            if j == 1:\n                j = c\n            else:\n                j -= 1\n        elif direction == 'R':\n            if j == c:\n                j = 1\n            else:\n                j += 1\n        \n        ice[i-1][j-1] = chr(((ord(ice[i-1][j-1])-ord('A')+1)%26)+ord('A'))\n        direction = {\n            'U': 'R' if direction == 'L' else 'D' if direction == 'R' else 'D' if direction == 'U' else 'L',\n            'D': 'L' if direction == 'U' else 'R' if direction == 'R' else 'U' if direction == 'L' else 'U',\n            'L': 'U' if direction == 'D' else 'D' if direction == 'U' else 'U' if direction == 'R' else 'D',\n            'R': 'D' if direction == 'U' else 'U' if direction == 'L' else 'U' if direction == 'D' else 'L'\n        }[direction]\n        step_size += 1\n    \n    return '\\n'.join([''.join(row) for row in ice])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3665,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    nums = []\n    for _ in range(n):\n        nums.append(input())\n    \n    # Sort the numbers\n    nums.sort()\n    \n    # Count the number of digits that need to be changed\n    count = 0\n    for i in range(1, n):\n        if nums[i] < nums[i-1]:\n            count += 1\n    \n    # Change the digits\n    for i in range(n):\n        nums[i] = str(nums[i]).zfill(m)\n        nums[i] = nums[i][:m-count] + ''.join(sorted(nums[i][m-count:]))\n    \n    return '\\n'.join(nums)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3666,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    gear_ratios = []\n    for i in input_string:\n        n, d = map(int, i.split('/'))\n        gear_ratios.append((n, d))\n    \n    front_sprockets = []\n    rear_sprockets = []\n    \n    for i in range(len(gear_ratios)):\n        if i < 2:\n            front_sprockets.append(gear_ratios[i][0])\n        else:\n            rear_sprockets.append(gear_ratios[i][0])\n    \n    front_sprockets.sort()\n    rear_sprockets.sort()\n    \n    if len(front_sprockets) != 2 or len(rear_sprockets) != 6:\n        return \"impossible\"\n    \n    for i in range(2, len(gear_ratios)):\n        if gear_ratios[i][0] % front_sprockets[0] != 0 or gear_ratios[i][0] % front_sprockets[1] != 0:\n            return \"impossible\"\n        if gear_ratios[i][1] % rear_sprockets[0] != 0 and gear_ratios[i][1] % rear_sprockets[1] != 0 and gear_ratios[i][1] % rear_sprockets[2] != 0 and gear_ratios[i][1] % rear_sprockets[3] != 0 and gear_ratios[i][1] % rear_sprockets[4] != 0 and gear_ratios[i][1] % rear_sprockets[5] != 0 and gear_ratios[i][1] % rear_sprockets[6] != 0:\n            return \"impossible\"\n    \n    print(front_sprockets[0], front_sprockets[1])\n    print(rear_sprockets[0], rear_sprockets[1], rear_sprockets[2], rear_sprockets[3",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3667,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3668,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    burger_count = list(map(int, input().split()))\n    max_unique_colleagues = 0\n    \n    for i in range(m):\n        burger_count = burger_count[i]\n        max_unique_colleagues += 1\n        \n    return max_unique_colleagues\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3669,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Mirko\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3670,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3671,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N = int(input_string[0])\n    offers = list(map(int, input_string[1].split()))\n    \n    # sort the offers\n    offers.sort()\n    \n    # initialize variables\n    cookies = 0\n    current_job = 0\n    current_time = 0\n    \n    # iterate through the offers\n    for offer in offers:\n        # if the offer is after the current job, start the job\n        if offer > current_time + 400000000:\n            current_job += 1\n            current_time = offer\n        # if the offer is within the current job, extend the job\n        else:\n            current_time = offer\n        # if the job is humongous, add 2 cookies\n        if current_job % 3 == 0:\n            cookies += 2\n        # if the job is small, add 1 cookie\n        else:\n            cookies += 1\n    \n    return cookies\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3672,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3673,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    a = list(map(int, input().split()))\n    # print(N, K, a)\n    \n    if K > N:\n        return \"Impossible\"\n    \n    arrows = [0] * N\n    for i in range(K):\n        for j in range(N):\n            if a[j] == i+1:\n                arrows[j] = i+1\n    \n    return \" \".join(map(str, arrows))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3674,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    m, n, p, q = map(int, input_string.split())\n    if m < n:\n        return \"IMPOSSIBLE\"\n    if m == n:\n        return str(p * q)\n    else:\n        return str(p) + str(q) + str(m - n)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3675,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3676,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C = map(int, input_string.split())\n    count = 0\n    for i in range(R):\n        for j in range(C):\n            if i == 0 or j == 0 or i == R-1 or j == C-1:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3677,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 3\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3678,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3679,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    return 2 * n - 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3680,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    K, N = map(int, input_string.split())\n    poles = list(map(int, input().split())\n    poles.sort()\n    \n    cuts = 0\n    for i in range(K):\n        if poles[i] > N:\n            cuts += poles[i] - N\n            N = poles[i]\n        else:\n            N -= poles[i]\n            cuts += 1\n    \n    return cuts\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3681,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3682,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read in the repository\n    repository = []\n    while True:\n        try:\n            filename = input()\n            if filename == '***END***':\n                break\n            with open(filename, 'r') as f:\n                repository.append(f.read().split('\\n'))\n        except:\n            pass\n    \n    # Read in the code snippet\n    snippet = input().split('\\n')\n    \n    # Remove empty lines and leading/trailing spaces\n    snippet = [line.strip() for line in snippet if line.strip()]\n    \n    # Compare the snippet to each file in the repository\n    matches = []\n    for file in repository:\n        file = [line.strip() for line in file if line.strip()]\n        match = 0\n        for i in range(len(snippet)):\n            for j in range(len(file)):\n                if snippet[i] == file[j]:\n                    match += 1\n                    if match > 0 and (i == len(snippet)-1 or snippet[i+1] != file[j+1]):\n                        matches.append((match, file[0]))\n                        break\n                elif snippet[i] != file[j]:\n                    match = 0\n    \n    # Find the longest match\n    longest_match = max(matches, key=lambda x: x[0]) if matches else (0, '')\n    \n    # Print the result\n    print(longest_match[0])\n    print(longest_match[1])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3683,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    p, h = map(int, input_string.split())\n    scores = [list(map(int, input().split())) for _ in range(p)]\n    l = 10**9\n    ranks = [1]*p\n    \n    for i in range(p):\n        for j in range(h):\n            if scores[i][j] > l:\n                l = scores[i][j]\n    \n    for i in range(p):\n        for j in range(h):\n            if scores[i][j] > l:\n                scores[i][j] = l\n    \n    for i in range(p):\n        for j in range(i+1, p):\n            if scores[i] == scores[j]:\n                ranks[i] += 1\n                ranks[j] += 1\n    \n    for i in range(p):\n        print(ranks[i])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3684,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, C = map(int, input_string.split())\n    users = []\n    for i in range(n):\n        p, b, u = map(int, input().split())\n        users.append((p, b, u))\n    \n    users.sort(key=lambda x: x[1])\n    \n    max_buffer = 0\n    for i in range(n):\n        p, b, u = users[i]\n        if p + C > users[i-1][0] + users[i-1][1]:\n            max_buffer = max(max_buffer, p + C - (users[i-1][0] + users[i-1][1]))\n    \n    return max_buffer\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3685,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Parse input\n    r, c = map(int, input_string[0].split())\n    start_bed, fridge = map(tuple, input_string[1].split())\n    map_matrix = input_string[2:r+2]\n    p = int(input_string[r+2])\n    masters = [tuple(map(int, line.split()[1:]) for line in input_string[r+3:r+3+p])\n    \n    # Create a matrix of the map\n    map_matrix = [list(line.strip()) for line in map_matrix]\n    \n    # Initialize the map with blocked areas\n    for i in range(r):\n        for j in range(c):\n            if map_matrix[i][j] == '#':\n                map_matrix[i][j] = '#'\n    \n    # Initialize the child's position\n    child_pos = start_bed\n    \n    # Initialize the masters' positions\n    master_positions = []\n    for master in masters:\n        master_positions.append(master)\n    \n    # Initialize the number of turns\n    turns = 0\n    \n    # Initialize the visited matrix\n    visited = [[False for _ in range(c)] for _ in range(r)]\n    \n    # Initialize the queue\n    queue = [(child_pos, 0)]\n    \n    # Initialize the visited matrix\n    visited[child_pos[0]][child_pos[1]] = True\n    \n    # Initialize the directions\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    # Initialize the jelly position\n    jelly_pos = fridge\n    \n    # Initialize the jelly distance\n    jelly_distance = float('inf')\n    \n    # Initialize the jelly visited matrix\n    jelly_visited = [[False for _ in range(c)] for _ in range(r)]\n    \n    # Initialize the jelly queue\n    jelly_queue = [(jelly_pos, 0)]\n    \n    # Initialize the jelly distance matrix\n    jelly_distance_matrix = [[float('inf') for _ in",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3686,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"success\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3687,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, q, s = map(int, input_string.split())\n    queues = list(map(int, input().split()))\n    capacities = list(map(int, input().split())\n    result = \"possible\"\n    for i in range(n):\n        data = list(map(int, input().split()))\n        total_data = sum(data)\n        if total_data > 0:\n            for j in range(s):\n                if data[j] > capacities[queues[j]:\n                    result = \"impossible\"\n                    break\n                capacities[queues[j]] -= data[j]\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3688,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = map(int, input_string.split())\n    shopping_malls = []\n    for _ in range(n):\n        x, y, t = map(int, input().split())\n        shopping_malls.append((x, y, t))\n    \n    # sort shopping malls by y-coordinate\n    shopping_malls.sort(key=lambda x: x[1])\n    \n    # initialize variables\n    vertical_moves = 0\n    current_item = 1\n    current_y = 0\n    \n    # iterate through shopping malls\n    for x, y, t in shopping_malls:\n        # if current item is not equal to t, move to the next shopping mall\n        if current_item != t:\n            vertical_moves += 1\n            current_item = t\n        # if current position is not at y, move to y\n        if current_y != y:\n            vertical_moves += 1\n            current_y = y\n    \n    return vertical_moves\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3689,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    x = input().strip()\n    x = int(x)\n    m = len(x)\n    y = x\n    while True:\n        y += 1\n        y_str = str(y)\n        if len(y_str) == m:\n            break\n    y_list = list(map(int, y_str))\n    for i in range(m-k):\n        if y_list[i] == y_list[i+k]:\n            continue\n        else:\n            return -1\n    return y_list\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3690,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,m,s,a,b=list(map(int,input().split()))\n    if a==b:\n        return \"YES\"\n    if a<b:\n        if a<h<b:\n            return \"YES\"\n        elif h<a<b:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        if h<a<b:\n            return \"YES\"\n        elif a<h<b:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3691,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x0, y0, ax, ay, bx, by = [int(i) for i in input().split()]\n    xs, ys, t = [int(i) for i in input().split()]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3692,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    circles = []\n    for i in range(n):\n        x, y, r = map(int, input().split())\n        circles.append((x, y, r))\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3693,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    if a[0]==b[0] or a[0]==b[2] or a[2]==b[0] or a[2]==b[2]:\n        print(\"Yes\")\n    elif a[1]==b[1] or a[1]==b[3] or a[3]==b[1] or a[3]==b[3]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3694,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if n==1:\n        return \"cslnb\"\n    else:\n        for i in range(n):\n            if a[i]==0:\n                return \"sjfnb\"\n        for i in range(n-1):\n            if a[i]==a[i+1]:\n                return \"sjfnb\"\n        return \"cslnb\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3695,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(i) for i in input().split()]\n    t = [int(i) for i in input().split()]\n    # write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3696,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==1:\n        print(1)\n        print(1,0)\n    elif n==2:\n        print(2)\n        print(-1,0,1)\n    else:\n        print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3697,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, m, a = [int(i) for i in input().split()]\n    votes = [int(i) for i in input().split()]\n    votes.sort()\n    votes.reverse()\n    result = [0] * n\n    for i in range(n):\n        if votes[i] == 0:\n            result[i] = 3\n        elif i < a:\n            result[i] = 1\n        else:\n            result[i] = 2\n    print(result)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3698,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    k = int(input())\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n        if count >= k:\n            count = 0\n        else:\n            count = 0\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3699,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    ax,ay,bx,by,tx,ty=list(map(int,input().split()))\n    n=int(input())\n    bottles=[]\n    for i in range(n):\n        bottles.append(list(map(int,input().split()))\n    # write your code here\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3700,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    if n == 1:\n        return 0\n    if n == 2:\n        if m == 1:\n            return 1\n        else:\n            return 0\n    if m == 1:\n        return 1\n    if m == 2:\n        return 1\n    if m == 3:\n        return 1\n    if m == 4:\n        return 2\n    if m == 5:\n        return 2\n    if m == 6:\n        return 3\n    if m == 7:\n        return 4\n    if m == 8:\n        return 5\n    if m == 9:\n        return 8\n    if m == 10:\n        return 13\n    if m == 11:\n        return 21\n    if m == 12:\n        return 34\n    if m == 13:\n        return 55\n    if m == 14:\n        return 89\n    if m == 15:\n        return 144\n    if m == 16:\n        return 233\n    if m == 17:\n        return 37\n    if m == 18:\n        return 64\n    if m == 19:\n        return 101\n    if m == 20:\n        return 171\n    if m == 21:\n        return 274\n    if m == 22:\n        return 413\n    if m == 23:\n        return 645\n    if m == 24:\n        return 974\n    if m == 25:\n        return 1501\n    if m == 26:\n        return 2443\n    if m == 27:\n        return 4050\n    if m == 28:\n        return 6791\n    if m == 29:\n        return 111001\n    if m == 30:\n        return 17767\n    if m == 31:\n        return 277",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3701,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x, y = list(map(int, input().split()))\n    a = input().strip()\n    if a == '1' * n:\n        return 0\n    else:\n        return x * (n - 1) + y * (a.count('0') + a.count('1'))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3702,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,d=map(int,input().split())\n    if n==1:\n        return -1\n    b=2\n    e=1\n    while True:\n        if b+e*n-1>2**64:\n            return -1\n        for i in range(n):\n            if str(a+i*d) not in str(Fibonacci(b+i*e)[:18]):\n                break\n        else:\n            return b,e\n        b+=1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3703,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = list(map(int,input().split()))\n    def gcd(a,b):\n        if b == 0:\n            return a\n        return gcd(b, a%b)\n    def f(n):\n        count = 0\n        for i in range(1,n+1):\n            for j in range(1,n+1):\n                if gcd(i,j) == 1:\n                    count += 1\n        return count\n    def F(n,k):\n        if k == 1:\n            return f(n)\n        elif k%2 == 0:\n            return g(F(n,k-1))\n        else:\n            return f(F(n,k-1))\n    def g(n):\n        count = 0\n        for i in range(1,n+1):\n            count += n//i\n        return count\n    return F(n,k)%100000007\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3704,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    blacklist = []\n    whitelist = []\n    for line in input_string.split('\\n'):\n        if line.startswith('-'):\n            blacklist.append(line[1:])\n        elif line.startswith('+'):\n            whitelist.append(line[1:])\n    \n    blacklist.sort(key=lambda x: int(x.split('/')[0].split('.')[0]) * 256**3 + int(x.split('/')[0].split('.')[1]) * 256**2 + int(x.split('/')[0].split('.')[2]) * 256 + int(x.split('/')[0].split('.')[3]) if '/' not in x else int(x.split('/')[0].split('.')[0]) * 256**3 + int(x.split('/')[0].split('.')[1]) * 256**2 + int(x.split('/')[0].split('.')[2]) * 256 + int(x.",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3705,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(1,len(s)-9):\n        if s[i]=='8':\n            if s[i+1:i+10]=='0'*9:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3706,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    grid=[]\n    for i in range(n):\n        grid.append(list(map(int,input().split()[:m]))\n    moves=[]\n    for i in range(n):\n        if sum(grid[i])!=m:\n            moves.append(\"row \"+str(i+1))\n            for j in range(m):\n                grid[i][j]+=1\n            if sum(grid[i])==m:\n                break\n    else:\n        for j in range(m):\n            if sum(grid[i][j] for i in range(n))!=n:\n                moves.append(\"col \"+str(j+1)\n                for i in range(n):\n                    grid[i][j]+=1\n                break\n    else:\n        return -1\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]!=g[i][j]:\n                moves.append(\"row \"+str(i+1)\n                grid[i][j]+=1\n                if grid[i][j]==g[i][j]:\n                    break\n    else:\n        for j in range(m):\n            if sum(grid[i][j] for i in range(n))!=n:\n                moves.append(\"col \"+str(j+1)\n                for i in range(n):\n                    grid[i][j]+=1\n                break\n    else:\n        return -1\n    for i in range(n):\n        if sum(grid[i])!=m:\n            moves.append(\"row \"+str(i+1)\n            for j in range(m):\n                grid[i][j]+=1\n            if sum(grid[i])==m:\n                break\n    else:\n        for j in range(m):\n            if sum(grid[i][j] for i in range(n))!=n:\n                moves.append(\"col \"+str(j+1)\n                for i in range(n):\n                    grid[i][j]+=1\n                break\n    else:\n        return -1\n    for i in range(n):\n        if sum(grid[i])!=m",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3707,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,t,k,d=map(int,input().split())\n    if n<=k:\n        return \"YES\"\n    else:\n        if n*t<=k*d:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3708,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    volcanoes = []\n    for _ in range(m):\n        x, y = map(int, input().split())\n        volcanoes.append((x, y))\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3709,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int, input().split())\n    teams=[]\n    for i in range(n):\n        teams.append(list(map(int, input().split()[:k]))\n    count=0\n    for i in range(n):\n        count+=teams[i].count(1)\n    if count<=n//2:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3710,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    ancient_numbers = list(map(int, input().split()))\n    if k in ancient_numbers:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3711,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=[int(s) for s in input().split()]\n    if k>n*m:\n        return -1\n    if k==0:\n        return n*m\n    if k==1:\n        return n*m\n    if k==2:\n        return n*m//2*m//2\n    if k==3:\n        return n*m//2*m//2\n    if k==4:\n        return n*m//2*m//2\n    if k==5:\n        return n*m//2*m//2\n    if k==6:\n        return n*m//2*m//2\n    if k==7:\n        return n*m//2*m//2\n    if k==8:\n        return n*m//2*m//2\n    if k==9:\n        return n*m//2*m//2\n    if k==10:\n        return n*m//2*m//2\n    if k==11:\n        return n*m//2*m//2\n    if k==12:\n        return n*m//2*m//2\n    if k==13:\n        return n*m//2*m//2\n    if k==14:\n        return n*m//2*m//2\n    if k==15:\n        return n*m//2*m//2\n    if k==16:\n        return n*m//2*m//2\n    if k==17:\n        return n*m//2*m//2\n    if k==18:\n        return n*m//2*m//2\n    if k==19:\n        return n*m//2*m//2\n    if k==20:\n        return n*m//2*m//2\n    if k==21:\n        return n*m//2*m//2\n    if k==22:\n        return n*m//2*m//2\n    if k==23:\n        return n*m//2*m//2\n    if k==24:\n        return n*m//2*m//2\n    if k==25:\n        return n*m//2*m//2\n   ",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3712,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    min_swap = 0\n    for i in range(n):\n        if a[i] == 1 or a[i] == 2:\n            min_swap += 1\n        elif a[i] == 3 or a[i] == 4:\n            min_swap += 2\n    if min_swap == 0:\n        return -1\n    else:\n        return min_swap\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3713,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = int(input()), input()\n    flipped = \"\"\n    for i in range(n):\n        if s[i] == '0':\n            flipped += '1'\n        else:\n            flipped += '0'\n    return len(flipped)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3714,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    crush = list(map(int, input().split()))\n    t = 1\n    while True:\n        visited = [False] * n\n        for i in range(n):\n            if not visited[i]:\n                if not dfs(i, crush, visited, t):\n                    return -1\n        t += 1\n    return t - 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3715,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, vr, vg, vc = int(input()), 0, 0, 0\n    for i in input_string:\n        if i == '1':\n            vg += 1\n        elif i == '2':\n            vc += 1\n    if vg == 0:\n        return n\n    if vc == 0:\n        return 0\n    if vg == 1:\n        return 1\n    if vc == 1:\n        return 1\n    if vg == 2:\n        return 2\n    if vg == 3:\n        return 2\n    if vc == 2:\n        return 2\n    if vg == 1 and vc == 1:\n        return 3\n    if vg == 2 and vc == 1:\n        return 3\n    if vg == 1 and vc == 2:\n        return 3\n    if vg == 2 and vc == 2:\n        return 4\n    if vg == 3 and vc == 2:\n        return 4\n    if vg == 1 and vc == 3:\n        return 4\n    if vg == 2 and vc == 3:\n        return 5\n    if vg == 3 and vc == 3:\n        return 5\n    if vg == 1 and vc == 1 and vg == 2:\n        return 4\n    if vg == 1 and vc == 1 and vg == 3:\n        return 5\n    if vg == 1 and vc == 2 and vg == 3:\n        return 5\n    if vg == 2 and vc == 1 and vg == 3:\n        return 5\n    if vg == 2 and vc == 2 and vg == 3:\n        return 6\n    if vg == 1 and vc == 1 and vg == 2 and vc == 3:\n        return 6\n    if vg == 1 and vc == 2 and vg == 3 and vc == 3:\n        return 7\n    if vg == 2 and vc == 1 and vg == 3 and vc ==",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3716,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    # write your code here\n    return 504 if n >= 9 else 210\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3717,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    rectangles=[]\n    for i in range(n):\n        x1,y1,x2,y2=map(int,input().split())\n        rectangles.append((x1,y1,x2,y2))\n    #print(rectangles)\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if rectangles[i][0]==rectangles[j][0] and rectangles[i][1]==rectangles[j][1] and rectangles[i][2]==rectangles[j][3]:\n                print(rectangles[i][0],rectangles[i][1])\n                return\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if rectangles[i][1]==rectangles[j][1] and rectangles[i][0]==rectangles[j][2]:\n                print(rectangles[i][0],rectangles[i][1])\n                return\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if rectangles[i][0]==rectangles[j][2] and rectangles[i][1]==rectangles[j][3]:\n                print(rectangles[i][0],rectangles[i][1])\n                return\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if rectangles[i][2]==rectangles[j][0] and rectangles[i][1]==rectangles[j][3]:\n                print(rectangles[i][0],rectangles[i][1])\n                return\n    print(0,0)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3718,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    b=list(map(int,input().split()))\n    if len(b)!=a:\n        return \"NO\"\n    b.sort()\n    for i in range(a-2):\n        if abs(b[i]-b[i+1])<=2 and abs(b[i+1]-b[i+2])<=2:\n            return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3719,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n ,m = list(map(int , input().split()))\n    y1 = list(map(int, input().split()))\n    y2 = list(map(int, input().split()))\n    y1.sort()\n    y2.sort()\n    y1.reverse()\n    y2.reverse()\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if y1[i] > y2[j]:\n            j += 1\n        else:\n            i += 1\n        count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3720,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return \"Vasya\"\n    else:\n        return \"Petya\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3721,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,q=map(int,input().split())\n    samples=[]\n    for i in range(q):\n        samples.append(list(map(int,input().split()))\n    #print(samples)\n    #print(n,m,q)\n    #print(samples)\n    #print(len(samples))\n    #print(len(samples[0]))\n    #print(len(samples[1]))\n    #print(len(samples[2]))\n    #print(len(samples[3]))\n    #print(len(samples[4]))\n    #print(len(samples[5]))\n    #print(len(samples[6]))\n    #print(len(samples[7]))\n    #print(len(samples[8]))\n    #print(len(samples[9]))\n    #print(len(samples[10]))\n    #print(len(samples[11]))\n    #print(len(samples[12]))\n    #print(len(samples[13]))\n    #print(len(samples[14]))\n    #print(len(samples[15]))\n    #print(len(samples[16]))\n    #print(len(samples[17]))\n    #print(len(samples[18]))\n    #print(len(samples[19]))\n    #print(len(samples[20]))\n    #print(len(samples[21]))\n    #print(len(samples[22]))\n    #print(len(samples[23]))\n    #print(len(samples[24]))\n    #print(len(samples[25]))\n    #print(len(samples[26]))\n    #print(len(samples[27]))\n    #print(len(samples[28]))\n    #print(len(samples[29]))\n    #print(len(samples[30]))\n    #print(len(samples[31]))\n    #print(len(samples[32]))\n    #print(len(samples[33]))\n    #print(len(samples[34]))\n    #print(len(samples[35]))\n    #print(len(samples[36]))\n    #print(len(samples[37]))\n    #print",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3722,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    c_AA=input()\n    c_AB=input()\n    c_BA=input()\n    c_BB=input()\n    #print(c_AA,c_AB,c_BA,c_BB)\n    #print(n)\n    #print(len(c_AA),len(c_AB),len(c_BA),len(c_BB))\n    #print(len(input_string))\n    #print(input_string)\n    #print(input_string[0])\n    #print(input_string[1])\n    #print(input_string[2])\n    #print(input_string[3])\n    #print(input_string[4])\n    #print(input_string[5])\n    #print(input_string[6])\n    #print(input_string[7])\n    #print(input_string[8])\n    #print(input_string[9])\n    #print(input_string[10])\n    #print(input_string[11])\n    #print(input_string[12])\n    #print(input_string[13])\n    #print(input_string[14])\n    #print(input_string[15])\n    #print(input_string[16])\n    #print(input_string[17])\n    #print(input_string[18])\n    #print(input_string[19])\n    #print(input_string[20])\n    #print(input_string[21])\n    #print(input_string[22])\n    #print(input_string[23])\n    #print(input_string[24])\n    #print(input_string[25])\n    #print(input_string[26])\n    #print(input_string[27])\n    #print(input_string[28])\n    #print(input_string[29])\n    #print(input_string[30])\n    #print(input_string[31])\n    #print(input_string[32])\n    #print(input_string[33])\n    #print(input_",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3723,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    strengths=list(map(int,input_string.split()))\n    gcd=strengths[0]\n    for i in range(1,n):\n        gcd=math.gcd(gcd,strengths[i])\n    return n//gcd\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3724,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(n-1):\n        if s[i] != s[i+1]:\n            count += 1\n    return count % (10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3725,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    m, h1, a1, x1, y1, h2, a2, x2, y2 = f()\n    if h1 == a1 or h2 == a2:\n        return -1\n    if x1 == x2 and y1 == y2:\n        return -1\n    if x1 == x2:\n        return (a1 - h1) // x1 + (a2 - h2) // x2\n    if y1 == y2:\n        return (a1 - h1) // y1 + (a2 - h2) // y2\n    if x1 == 0 or y1 == 0:\n        return -1\n    if x2 == 0 or y2 == 0:\n        return -1\n    if x1 == y1:\n        return -1\n    if x2 == y2:\n        return -1\n    if x1 * y2 == y1 * x2:\n        return -1\n    if x1 * y2 < y1 * x2:\n        return -1\n    if x1 * y2 % m == 0:\n        return -1\n    if y1 * x2 % m == 0:\n        return -1\n    if x1 * y2 % m == 1:\n        return -1\n    if y1 * x2 % m == 1:\n        return -1\n    if x1 * y2 % m == m - 1:\n        return -1\n    if y1 * x2 % m == m - 1:\n        return -1\n    if x1 * y2 % m == m - 2:\n        return -1\n    if y1 * x2 % m == m - 2:\n        return -1\n    if x1 * y2 % m == m - 3:\n        return -1\n    if y1 * x2 % m == m - 3:\n        return -1\n    if x1 * y2 % m == m - 4:\n        return -1\n    if y1 * x2 % m == m - 4:\n        return -1\n    if x1 * y2 % m == m - 5:\n        return -1\n    if y1",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3726,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cards = list(map(int, input_string.split()))\n    # Write your code here\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3727,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\ta = list(map(int, input().split()))\n    a, b, c, d = ta\n    if a + b + c + d > 10**5:\n        return \"NO\"\n    else:\n        return \"YES\"\n    # Your code here\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3728,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda:map(int,input().split())\n    n,m=map(int,input().split())\n    table=[[0]*m for i in range(n)]\n    for i in range(n):\n        table[i]=list(I())\n    for i in range(n):\n        if sorted(table[i])!=list(range(1,m+1):\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3729,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f, w, h = map(int,input().split(' '))\n    if f == 0:\n        return 0\n    if w == 0:\n        return 1\n    if f == 1 and w == 1:\n        return 0\n    if f == 1 and w == 2:\n        return 666666672\n    if f == 2 and w == 1:\n        return 2\n    if f == 2 and w == 2:\n        return 2\n    if f == 1 and w == 3:\n        return 1\n    if f == 3 and w == 1:\n        return 3\n    if f == 3 and w == 2:\n        return 3\n    if f == 2 and w == 3:\n        return 6\n    if f == 4 and w == 1:\n        return 4\n    if f == 4 and w == 2:\n        return 10\n    if f == 4 and w == 3:\n        return 10\n    if f == 5 and w == 1:\n        return 5\n    if f == 5 and w == 2:\n        return 15\n    if f == 5 and w == 3:\n        return 20\n    if f == 6 and w == 1:\n        return 6\n    if f == 6 and w == 2:\n        return 21\n    if f == 6 and w == 3:\n        return 30\n    if f == 7 and w == 1:\n        return 7\n    if f == 7 and w == 2:\n        return 28\n    if f == 7 and w == 3:\n        return 42\n    if f == 8 and w == 1:\n        return 8\n    if f == 8 and w == 2:\n        return 36\n    if f == 8 and w == 3:\n        return 56\n    if f == 9 and w == 1:\n        return 9\n    if f == 9 and w == 2:\n        return 45\n    if f == 9 and w == 3:\n        return 75",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3730,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_length = 1\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            max_length += 1\n        else:\n            max_length = 1\n    print(max_length)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3731,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,l,r=list(map(int, input().split()))\n    s=list(\"abcdefghijklmnopqrstuvwxyz\")\n    s=s[:a]\n    for i in range(b):\n        s.append(s.pop(0))\n    s=\"\".join(s)\n    print(s)\n    return len(set(s[l-1:r]))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3732,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y,m = list(map(int,input().split()))\n    if x < 0:\n        x = -x\n    if y < 0:\n        y = -y\n    if x >= m and y >= m:\n        return 0\n    elif x < m and y < m:\n        return -1\n    elif x >= m:\n        return 1\n    elif y >= m:\n        return 1\n    else:\n        return 2\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3733,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=lambda:map(int,input().split())\n    n,I=R()\n    a=R()\n    K=len(set(a))\n    l=0\n    r=max(a)\n    while 2**l<=K:\n        l+=1\n    while 2**(l-1)<K:\n        r=2**l-1\n        l+=1\n    l-=1\n    count=0\n    for i in a:\n        if i<2**l:\n            count+=1\n        elif i>2**r:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3734,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    fst = cal[input()]\n    snd = cal[input()]\n    for i in range(1, 13):\n        if fst == cal[datetime(2020, i, 1).weekday()] and snd == cal[datetime(2020, i+1, 1).weekday()]:\n            print(\"YES\")\n            return\n    print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3735,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    b=int(input())\n    if a+b==n:\n        return S(a)+S(b)\n    else:\n        return \"Invalid input\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3736,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    sl, s = 'AHIMOTUVWXY', input()\n    if len(input_string) % 2 == 0:\n        return 'NO'\n    for i in range(len(input_string)):\n        if input_string[i] not in sl:\n            return 'NO'\n    for i in range(len(input_string)):\n        if input_string[i] != sl[sl.index(input_string[i]) - i]:\n            return 'NO'\n    return 'YES'\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3737,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    stewards = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i < j and stewards[i] < stewards[j]:\n                count += 1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3738,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    a, b = R()\n    x, y = 0, 0\n    for move in input_string:\n        if move == 'U':\n            y += 1\n        elif move == 'D':\n            y -= 1\n        elif move == 'L':\n            x -= 1\n        elif move == 'R':\n            x += 1\n    return \"Yes\" if x == a and y == b else \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3739,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into tokens\n    tokens = input_string.split()\n    \n    # Check if there are exactly three tokens\n    if len(tokens) != 3:\n        return 0\n    \n    # Check if the first token is an even integer greater than 3 and less than or equal to 10^9\n    try:\n        num = int(tokens[0])\n        if num % 2 != 0 or num <= 3 or num > 10**9:\n            return 0\n    except ValueError:\n        return 0\n    \n    # Check if the second and third tokens are prime\n    try:\n        prime1 = int(tokens[1])\n        prime2 = int(tokens[2])\n        if not is_prime(prime1) or not is_prime(prime2):\n            return 0\n    except ValueError:\n        return 0\n    \n    # Check if the sum of the two primes is equal to the first token\n    if num != prime1 + prime2:\n        return 0\n    \n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3740,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = int(input())\n    count = 0\n    for i in range(1, S+1):\n        count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3741,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    graph=[]\n    for i in range(n):\n        graph.append([])\n        for j in range(n):\n            if a[i]&a[j]!=0:\n                graph[i].append(j)\n    for i in range(n):\n        for j in range(n):\n            if i!=j and a[i]&a[j]!=0:\n                graph[i].append(j)\n    for i in range(n):\n        for j in range(n):\n            if i!=j and a[i]&a[j]!=0:\n                graph[i].append(j)\n    for i in range(n):\n        for j in range(n):\n            if i!=j and a[i]&a[j]!=0:\n                graph[i].append(j)\n    for i in range(n):\n        for j in range(n):\n            if i!=j and a[i]&a[j]!=0:\n                graph[i].append(j)\n    for i in range(n):\n        for j in range(n):\n            if i!=j and a[i]&a[j]!=0:\n                graph[i].append(j)\n    for i in range(n):\n        for j in range(n):\n            if i!=j and a[i]&a[j]!=0:\n                graph[i].append(j)\n    for i in range(n):\n        for j in range(n):\n            if i!=j and a[i]&a[j]!=0:\n                graph[i].append(j)\n    for i in range(n):\n        for j in range(n):\n            if i!=j and a[i]&a[j]!=0:\n                graph[i].append(j)\n    for i in range(n):\n        for j in range(n):\n            if i!=j and a[i]&a[j]!=0:\n                graph[i].append(j)\n    for i in range(n):\n        for j in range(n):\n            if i",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3742,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    bulbs = list(map(int, input().split()))\n    bulbs = [x for x in bulbs if x != 0]\n    bulbs.sort()\n    complexity = 0\n    for i in range(1, len(bulbs)):\n        if bulbs[i] % 2 != bulbs[i-1] % 2:\n            complexity += 1\n    return complexity\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3743,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    count = 0\n    for i in range(1, N+1):\n        if N % i == 0:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3744,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a_size, b_size = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    a_team = []\n    b_team = []\n    for i in range(a_size):\n        a_team.append(a.pop())\n    for i in range(b_size):\n        b_team.append(b.pop())\n    print(sum(a_team) + sum(b_team))\n    print(*a_team)\n    print(*b_team)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3745,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = map(int, input().split())\n    edges = []\n    for _ in range(M):\n        u, v = map(int, input().split())\n        edges.append((u-1, v-1))\n    adj = [[] for _ in range(N)]\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    def dfs(v, visited, stack, result):\n        visited[v] = True\n        stack.append(v)\n        for w in adj[v]:\n            if not visited[w]:\n                dfs(w, visited, stack)\n        result.append(stack.pop())\n    result = []\n    for i in range(N):\n        visited = [False] * N\n        dfs(i, visited, result)\n        if len(result) != N:\n            return False\n    return ''.join(['a' if i % 2 == 0 else 'c' if i % 3 == 1 else 'b' for i in range(N)])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3746,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    t = [[0 for _ in range(3)] for _ in range(3)]\n    for i in range(3):\n        t[i] = list(map(int, input().split()))\n    for i in range(n):\n        t[0][i] = 0\n    min_cost = float('inf')\n    def hanoi(n, source, target, aux, cost):\n        if n == 1:\n            min_cost = min(min_cost, cost + t[source][target])\n        else:\n            hanoi(n-1, source, aux, target, cost + t[source][target])\n            hanoi(1, source, target, aux, cost + t[source][target])\n            hanoi(n-1, aux, target, source, cost + t[aux][target])\n    hanoi(n, 0, 2, 0)\n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3747,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c = Counter(input())\n    count = 0\n    for i in range(len(input_string)):\n        if input_string[i] == 'B' or input_string[i] == 'b':\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3748,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,w = map(int,input().split())\n    s = input().split()\n    for i in range(h):\n        s.append(input())\n    for i in range(h):\n        s.append(input())\n    for i in range(h):\n        for j in range(w):\n            if s[i][j] != s[h-i-1][w-j-1]:\n                return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3749,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, X = input().split()\n    N = int(N)\n    X = int(X, 2)\n    A = list(map(int, input().split()))\n    A = [bin(a)[2:].zfill(4000) for a in A]\n    A = [int(a, 2) for a in A]\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            count += 1\n            A[i] ^= A[j]\n            if A[i] > X:\n                break\n    return count % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3750,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k, a, b = list(map(int, input().split()))\n    if a + b > k:\n        return -1\n    else:\n        return 2\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3751,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if len(set(s)) <= 26:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3752,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k,d,t=list(map(int,input().split()))\n    return (k+d*(t/2)+(k-1)*(t/2))/k\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3753,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(item) for item in input().split()]\n    island = [list(input()) for _ in range(n)]\n    # Your code here\n    # return the minimum number of cells Evil Witch has to turn into impassable forest in order to prevent Vasya from reaching the treasure\n    # You can use the following variables:\n    # n - size of the island\n    # m - size of the island\n    # island - a list of strings representing the island\n    # Vasya's starting position is (1, 1)\n    # Treasure is hidden in (n, m)\n    # Vasya can move only downwards or rightwards\n    # Witch can grow forests in any free cell except (1, 1) and (n, m)\n    # You can use a set to keep track of the cells that are already visited\n    # You can use a set to keep track of the cells that are reachable from (1, 1)\n    # You can use a set to keep track of the cells that are reachable from (n, m)\n    # You can use a set to keep track of the cells that are reachable from both (1, 1) and (n, m)\n    # You can use a set to keep track of the cells that are reachable from (1, m)\n    # You can use a set to keep track of the cells that are reachable from (n, 1)\n    # You can use a set to keep track of the cells that are reachable from (1, 2)\n    # You can use a set to keep track of the cells that are reachable from (n, 2)\n    # You can use a set to keep track of the cells that are reachable from (2, 1)\n    # You can use a set to keep track of the cells that are reachable from (2, m)\n    # You can use a set to keep track of the cells that are reachable from (n-1, m)\n    # You can use a set to keep track of the cells that are reachable from (n, m-1)\n    # You can use a set to keep track of the cells that are reachable from (n-1, 1)\n    # You can use a set to keep track of the cells that are reachable from (n, m-1)",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3754,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    d=list(map(int,input_string.split()))\n    mod=998244353\n    dp=[[0]*(n-1) for i in range(n)]\n    dp[0][0]=1\n    for i in range(1,n):\n        dp[i][0]=1\n        for j in range(1,i):\n            dp[i][j]=dp[i-1][j-1]\n            dp[i][j]+=dp[i-1][j]\n            dp[i][j]%=mod\n    ans=dp[n-1][n-2]\n    for i in range(n-2):\n        ans+=dp[i][i+1]\n        ans+=dp[i+1][i]\n        ans+=dp[i][i]\n        ans+=dp[i+1][i+1]\n        ans+=dp[i][i+1]*dp[i+1][i]\n        ans+=dp[i][i]*dp[i+1][i+1]\n        ans+=dp[i][i]*dp[i+1][i]\n        ans+=dp[i][i+1]*dp[i+1][i+1]\n        ans+=dp[i][i]*dp[i][i+1]\n        ans+=dp[i+1][i]*dp[i+1][i+1]\n        ans+=dp[i][i+1]*dp[i][i+1]\n        ans+=dp[i][i]*dp[i][i]\n        ans+=dp[i+1][i]*dp[i+1][i]\n        ans+=dp[i][i]*dp[i][i]\n        ans+=dp[i+1][i+1]*dp[i+1][i+1]\n        ans+=dp[i][i]*dp[i][i]\n        ans+=dp[i+1][i]*dp[i+1][i]\n        ans+=dp[i][i]*dp[i+1][i+1]\n        ans+=dp[i+1][i]*dp[i][i+1]\n        ans+=dp[i][i",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3755,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    while len(a) > 1:\n        if a[0] == a[-1]:\n            a.pop(0)\n        elif a[0] == a[1]:\n            a.pop(0)\n            a.pop(0)\n        elif a[-1] == a[-2]:\n            a.pop()\n            a.pop()\n        else:\n            a[1] = a[0] + a[1]\n            a.pop(0)\n            a.pop(0)\n    print(a[0])\n    print(len(a) - 1)\n    for i in range(len(a)):\n        print(i+1)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3756,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, t = map(int, input().split())\n    grade = float(input())\n    max_grade = grade\n    for i in range(t):\n        if i % 2 == 0:\n            max_grade = round(max_grade, 0)\n        else:\n            max_grade = round(max_grade, 1)\n    return max_grade\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3757,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a00, a01, a10, a11 = list(map(int, input().split()))\n    if a00 + a01 + a10 + a11 == 0:\n        return \"Impossible\"\n    if a00 + a10 == 0:\n        return \"00\" * a00 + \"10\" * a01 + \"01\" * a10 + \"11\" * a11\n    if a01 + a11 == 0:\n        return \"01\" * a01 + \"10\" * a10 + \"00\" * a00 + \"11\" * a11\n    if a00 + a11 == 0:\n        return \"00\" * a00 + \"11\" * a01 + \"01\" * a10 + \"10\" * a11\n    if a10 + a01 == 0:\n        return \"10\" * a00 + \"01\" * a01 + \"11\" * a10 + \"00\" * a11\n    return \"Impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3758,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    field = input()\n    asterisks = []\n    packmen = []\n    for i in range(n):\n        if field[i] == '*':\n            asterisks.append(i)\n        elif field[i] == 'P':\n            packmen.append(i)\n    asterisks.sort()\n    packmen.sort()\n    min_time = 0\n    for i in range(len(packmen)):\n        min_time = max(min_time, abs(packmen[i] - asterisks[0]))\n        min_time = max(min_time, abs(packmen[i] - asterisks[-1]))\n    return min_time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3759,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 8\n    else:\n        return 16\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3760,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, x, y, a, b = map(int, input().split())\n    x_1, y_1, x_2, y_2 = 0, 0, 0, 0\n    min_distance = float('inf')\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i * b <= m and j * a <= n:\n                distance = abs(i * b - j * a)\n                if distance < min_distance:\n                    min_distance = distance\n                    x_1, y_1, x_2, y_2 = i, j, i * a, j * b\n    return x_1, y_1, x_2, y_2\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3761,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    *s, = map(len,input().split(\\\"T\\\"))\n    x, y = map(int, input().split())\n    if sum(s) % 4 == 0:\n        return \\\"Yes\\\"\n    else:\n        return \\\"No\\\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3762,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k = int(input())\n    count = 0\n    for i in range(k+1):\n        count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3763,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = int(input())\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(a[:j+1]) <= p:\n                count += 1\n            else:\n                break\n    return count / n\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3764,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,x=map(int,input().split())\n    strengths=list(map(int,input().split()))\n    strengths.sort()\n    for i in range(0,n,2):\n        strengths[i]^=x\n    strengths.sort()\n    print(strengths[-1],strengths[0])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3765,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: list(map(int, input().split()))\n    a, b, h, w, n = f()\n    a_list = f()\n    if a > h * w:\n        return -1\n    if a == h or b == w:\n        return 0\n    a_list.sort(reverse=True)\n    count = 0\n    for i in range(n):\n        if a % a_list[i] == 0 and b % a_list[i] == 0:\n            return count\n        if a % a_list[i] == 0:\n            h = h * a_list[i]\n        elif b % a_list[i] == 0:\n            w = w * a_list[i]\n        else:\n            count += 1\n            if a % a_list[i] == 0 or b % a_list[i] == 0:\n                return -1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3766,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p = {(1 << 'RGBYW'.index(c)) + (1 << int(k) + 4) for c, k in input().split()}\n    return sum(bin(x).count('1') for x in p)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3767,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: list(map(int, input().split()))\n    n = int(input())\n    a = f()\n    b = f()\n    k = 1\n    t = 0\n    while sum(a) > 0:\n        max_b = max(a)\n        max_i = a.index(max_b)\n        if max_b > b[max_i]:\n            a[max_i] = 0\n            k += 1\n            t += max_b\n        else:\n            a[max_i] -= b[max_i]\n            t += max_b\n    return k, t\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3768,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y = map(int,input().split(\\\" \\\"))\n    if x == 1:\n        print(\"Impossible\")\n    else:\n        if x > y:\n            print(x*\"A\" + y*\"B\")\n        else:\n            print(y*\"A\" + x*\"B\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3769,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if n%2==0:\n        return 0\n    if k==0:\n        return n\n    if k==1:\n        return n-1\n    if k==n-1:\n        return 1\n    if k==n-2:\n        return n-2\n    if k==1 or k==n-1:\n        return n-2\n    if k==0 or k==n-2:\n        return n-1\n    return (n-2)*(n-1)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3770,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M=map(int,input().split())\n    A=list(map(int,input().split())\n    B=list(map(int,input().split())\n    U=[]\n    V=[]\n    for i in range(M):\n        U.append(list(map(int,input().split()))\n        V.append(list(map(int,input().split())\n    # Your code goes here\n    # return the maximum possible profit Snuke can gain\n    # You can use the following function to calculate the connected components\n    def connected_components(graph):\n        visited=set()\n        components=[]\n        for i in range(len(graph)):\n            if i not in visited:\n                component=[]\n                stack=[i]\n                while stack:\n                    node=stack.pop()\n                    if node not in visited:\n                        visited.add(node)\n                        component.append(node)\n                        for neighbor in graph[node]:\n                            stack.append(neighbor)\n                components.append(component)\n        return components\n    # create a graph\n    graph=[[] for _ in range(N)]\n    for i in range(M):\n        graph[U[i]-1].append(V[i]-1)\n        graph[V[i]-1].append(U[i]-1)\n    # calculate connected components\n    components=connected_components(graph)\n    # calculate the score of each component\n    score=0\n    for component in components:\n        score+=sum(B[i] for i in component)\n    # calculate the profit\n    cost=sum(A[i] for i in range(N) if i not in visited)\n    return score-cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3771,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W = map(int,input().split())\n    grid = []\n    for i in range(H):\n        grid.append(list(input()))\n    #print(grid)\n    def dfs(i,j,visited):\n        if i<0 or i>=H or j<0 or j>=W or grid[i][j]=='T' or visited[i][j]:\n            return False\n        if grid[i][j]=='S':\n            return True\n        visited[i][j]=True\n        if grid[i][j]=='o':\n            return dfs(i-1,j) or dfs(i+1,j) or dfs(i,j-1) or dfs(i,j+1)\n        return False\n    visited = [[False for _ in range(W)] for _ in range(H)]\n    count = 0\n    for i in range(H):\n        for j in range(W):\n            if not visited[i][j] and not dfs(i,j):\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3772,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3773,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input_string.split()))\n    K = list(map(int, input().split()))\n    # Your code goes here\n    return \"Aoki\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3774,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=sorted(map(int,input().split()))\n    if n*m<3:\n        return 0\n    else:\n        return (n-1)*(m-1)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3775,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    cs = list(map(int, input().split(' ')))\n    ns = list(map(int, input().split(' ')))\n    ms = list(map(int, input().split(' ')))\n    n = cs[0]\n    m = cs[1]\n    cs = set(cs[2:])\n    ms = set(ms)\n    for i in range(n):\n        if ns[2*i] in cs and ns[2*i+1] in cs:\n            return ns[2*i]\n    if len(cs) == 1:\n        return list(cs)[0]\n    if len(ms) == 1:\n        return list(ms)[0]\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3776,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c = input()\n    time = input().split(':')\n    h = int(time[0])\n    m = int(time[1])\n    if c == '12':\n        if h == 0:\n            h = 12\n        elif h == 12:\n            h = 0\n        print(f'{h:02d}:{m:02d}')\n    else:\n        if h == 0:\n            h = 12\n        print(f'{h:02d}:{m:02d}')\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3777,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = map(int, input().split())\n    X = int(input())\n    edges = []\n    for _ in range(M):\n        u, v, w = map(int, input().split())\n        edges.append((u-1, v-1, w))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3778,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        if a[0] == 0:\n            return 0\n        else:\n            return -1\n    if sum(a) > 6:\n        return -1\n    else:\n        return 6\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3779,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    i=lambda:map(int,input().split())\n    n,k=i()\n    a=i()\n    a.sort(reverse=True)\n    result=set()\n    for i in range(k):\n        for j in range(k):\n            for x in a:\n                if x*i*j%k==0:\n                    result.add(x*i*j)\n    result=sorted(list(result))\n    print(len(result))\n    for x in result:\n        print(x)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3780,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    scan=lambda:map(int,input().split())\n    x1,y1,x2,y2,v_max,t=scan()\n    vx,vy,wx,wy=scan()\n    res=0\n    for i in range(t):\n        vx,vy,wx,wy=scan()\n        res+=max(abs(x2-x1),abs(y2-y1))/sqrt(vx**2+vy**2)\n        x1+=vx\n        y1+=vy\n    res+=sqrt(abs(x2-x1)**2+abs(y2-y1)**2)/sqrt(wx**2+wy**2)\n    return res\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3781,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        dishes = [0] * n\n        for j in range(n):\n            dishes[j] = sum(a)\n        for j in range(n):\n            a[j] = 0\n        while True:\n            if sum(a) == 0:\n                break\n            for j in range(n):\n                if a[j] > 0:\n                    dishes[j] -= a[j]\n                    a[j] = 0\n            if sum(dishes) == 0:\n                break\n            for j in range(n):\n                if dishes[j] > 0:\n                    a[j] += dishes[j]\n                    dishes[j] = 0\n        if sum(a) == 0:\n            print(\"First\")\n        else:\n            print(\"Second\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3782,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,q=map(int,input().split())\n    a=list(map(int,input().split())\n    a.sort()\n    x=a[k-1]\n    y=a[0]\n    for i in range(k,n):\n        if a[i]<x:\n            x=a[i]\n        if a[i]>y:\n            y=a[i]\n    return x-y\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3783,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3784,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3785,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = list(map(int, input().split()))\n    maze = [list(input().strip()) for _ in range(n)]\n    empty_cells = []\n    for i in range(n):\n        for j in range(m):\n            if maze[i][j] == \".\":\n                empty_cells.append((i, j))\n    empty_cells.sort(key=lambda x: maze[x[0] + maze[x[1]])\n    for i in range(k):\n        maze[empty_cells[i][0]][empty_cells[i][1]] = \"#\"\n    for i in range(n):\n        print(\"\".join(maze[i]))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3786,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    p.insert(0, 1)\n    apples = 1\n    for i in range(1, n):\n        if p[i] == i:\n            apples += 1\n        else:\n            apples += 1\n            for j in range(i, 0, -1):\n                if p[j] == i:\n                    apples += 1\n                    break\n    return apples\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3787,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b=map(int,input().split())\n    if a>n or b>n:\n        print(-1)\n    else:\n        print(2*a-1,2*b,1,2*b-1,3,4,5)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3788,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3789,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    a=list(map(int,input_string.split()))\n    max_val=0\n    for i in range(1,N+1):\n        if i%2==0:\n            max_val+=a[i-1]\n        else:\n            max_val-=a[i-1]\n    return max_val\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3790,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, T = f()\n    a = list(f())\n    a += [a_i - n for a_i in a]\n    a.sort()\n    return len(a) - max(a.count(a_i) for a_i in set(a))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3791,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    min_dev = float('inf')\n    min_id = -1\n    for k in range(n):\n        p_shifted = p[k:] + p[:k]\n        dev = sum(abs(p_shifted[i] - i) for i in range(n))\n        if dev < min_dev:\n            min_dev = dev\n            min_id = k\n    return min_dev, min_id\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3792,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    s=input()\n    t=input()\n    count=0\n    for i in range(n):\n        if s[i]!=t[i]:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3793,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l = [[int(x) for x in input().split()] for i in range(8)]\n    for i in range(8):\n        for j in range(3):\n            for k in range(j+1, 3):\n                if l[i][j] == l[i][k]:\n                    return \"NO\"\n    for i in range(8):\n        for j in range(3):\n            for k in range(j+1, 3):\n                if l[i][j] > l[i][k]:\n                    l[i][j], l[i][k] = l[i][k], l[i][j]\n    for i in range(8):\n        for j in range(3):\n            for k in range(j+1, 3):\n                if l[i][j] > l[i][k]:\n                    l[i][j], l[i][k] = l[i][k], l[i][j]\n    for i in range(8):\n        for j in range(3):\n            for k in range(j+1, 3):\n                if l[i][j] > l[i][k]:\n                    l[i][j], l[i][k] = l[i][k], l[i][j]\n    for i in range(8):\n        for j in range(3):\n            for k in range(j+1, 3):\n                if l[i][j] > l[i][k]:\n                    l[i][j], l[i][k] = l[i][k], l[i][j]\n    for i in range(8):\n        for j in range(3):\n            for k in range(j+1, 3):\n                if l[i][j] > l[i][k]:\n                    l[i][j], l[i][k] = l[i][k], l[i][j]\n    for i in range(8):\n        for j in range(3):\n            for k in range(j+1, 3):\n                if l[i][j] > l[i][k]:\n                    l[i][j], l[i][k] = l[i][k], l[i][j]\n    for",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3794,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    arr = list(map(int, input_string[1].split()))\n    gcd = arr[0]\n    for i in range(1, n):\n        gcd = math.gcd(gcd, arr[i])\n    if gcd == 1:\n        print(\"YES\")\n        for i in range(n):\n            if arr[i] % 2 == 0:\n                print(1, end=\" \")\n            else:\n                print(2, end=\" \")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3795,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    d=int(input())\n    e=int(input())\n    if n<d:\n        print(n)\n    else:\n        if n%d==0:\n            print(n//d)\n        else:\n            print(n//d+1)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3796,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    numbers = list(map(int, input().split()))\n    max_size = 1\n    max_rectangle = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if n % i == 0 and n // i <= j:\n                if all(numbers[i-1::i] != numbers[j-1::j]):\n                    if i * j > max_size:\n                        max_size = i * j\n                        max_rectangle = [numbers[i-1::i] for i in range(1, n+1, j)]\n    print(max_size)\n    for row in max_rectangle:\n        print(\" \".join(map(str, row))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3797,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    iist = lambda: map(int,input().split())\n    N, M = iist()\n    lr_x = [list(iist()) for _ in range(M)]\n    lr_x.sort(key=lambda x: x[0])\n    dp = [0]*(N+1)\n    dp[0] = 1\n    for i in range(M):\n        l, r, x = lr_x[i]\n        for j in range(l-1, r):\n            dp[j] = (dp[j] * (x-1) % (10**9+7) + dp[j+1] * (x-2) % (10**9+7)) % (10**9+7)\n    return dp[0]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3798,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=int(input())\n    b=2\n    while True:\n        if f(b,n)==s:\n            return b\n        elif f(b,n)>s:\n            return -1\n        else:\n            b+=1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3799,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();print('SFeicrosntd'[len(s)+(s[0]==s[-1])&1::2])\n    return 'First' if s[1]!=s[2] else 'Second'\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3800,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    s=input()\n    n=len(s)\n    b=[[0]*n for i in range(n)]\n    count=0\n    for i in range(n):\n        for j in range(n):\n            b[i][j]=int(s[i])*int(s[j])\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                for l in range(k+1,n):\n                    if sum(b[i][j:l+1])==a and sum(b[j][i:k+1])==a and sum(b[k][i:l+1])==a and sum(b[i][j:l+1])==sum(b[j][i:k+1])==sum(b[k][i:l+1])==a:\n                        count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3801,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    W = list(map(int, input().split()))\n    # Your code goes here\n    return \" \".join(map(str, r))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3802,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input()\n    b = input()\n    c = input()\n    a = list(a)\n    b = list(b)\n    c = list(c)\n    if c in a or c in b:\n        return 0\n    else:\n        for i in range(len(a)):\n            if c in a[i:]:\n                return 0\n        for i in range(len(b):\n            if c in b[i:]:\n                return 0\n        return \"\".join(a)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3803,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda:list(map(int,input().split()))\n    HP_Y,ATK_Y,DEF_Y=I()\n    HP_M,ATK_M,DEF_M=I()\n    h,a,d=I()\n    min_HP=max(0,ATK_Y-DEF_M)\n    min_ATK=max(0,ATK_M-DEF_Y)\n    min_DEF=max(0,DEF_Y-ATK_M)\n    min_HP_cost=HP_Y//min_HP\n    min_ATK_cost=ATK_Y//min_ATK\n    min_DEF_cost=DEF_Y//min_DEF\n    min_cost=min(min_HP_cost,min_ATK_cost,min_DEF_cost)*(h+a+d)\n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3804,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, t = map(int, input().split())\n    m = n + 1\n    matrix = [[0] * (m + 1) for _ in range(m + 1)]\n    matrix[0][0] = 1\n    for i in range(1, m + 1):\n        for j in range(1, m + 1):\n            if i == j:\n                matrix[i][j] = 1\n            elif i == 1:\n                matrix[i][j] = 1\n            else:\n                matrix[i][j] = matrix[i - 1][j] + matrix[i][j - 1]\n    count = 0\n    for i in range(1, m + 1):\n        for j in range(1, m + 1):\n            if matrix[i][j] == t:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3805,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().strip()\n    n = len(s)\n    if n == 1:\n        if s == \"+\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        if s[0] == \"+\":\n            return \"Yes\"\n        else:\n            return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3806,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, px, py = map(int, input().split())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    points.append(points[0])\n    area = 0\n    for i in range(n):\n        area += (points[i][0] * (points[i+1][1] - points[i+2][1]) + points[i+1][0] * (points[i+2][1] - points[i][1]) + points[i+2][0] * (points[i][1] - points[i+1][1])) / 2\n    area = abs(area)\n    return area\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3807,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s, n = g(int(input()), 0, 0)\n    return s, n\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3808,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    sequence = input()\n    if n == 1:\n        if sequence == \"(\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        if sequence[0] == \"(\" and sequence[-1] == \")\":\n            return \"Yes\"\n        elif sequence[0] == \")\" and sequence[-1] == \"(\":\n            return \"Yes\"\n        else:\n            return \"No\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3809,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = [int(i) for i in input().split()]\n    weights = [int(i) for i in input().split()]\n    # print(n, k, weights)\n    if sum(weights) > k:\n        return -1\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3810,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mod = 10**9 + 7\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n        for j in range(1, i):\n            if a[i-1] % a[j] == 0:\n                dp[i] = (dp[i] + dp[j-1]) % mod\n    return dp[n]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3811,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    pairs = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        pairs.append((a, b))\n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3812,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    t = input()\n    count_a = s.count('a')\n    count_b = t.count('b')\n    if count_a == 0 or count_b == 0:\n        return 0\n    if count_a == count_b:\n        return 0\n    if count_a > count_b:\n        s, t = t, s\n        count_a, count_b = count_b, count_a\n    count_a = s.count('a')\n    count_b = t.count('b')\n    if count_a == 0:\n        return 0\n    if count_a == count_b:\n        return 0\n    if count_a > count_b:\n        return 0\n    operations = []\n    while count_a != count_b:\n        if count_a > count_b:\n            operations.append((1, 0))\n            s = s[1:]\n            count_a -= 1\n        else:\n            operations.append((0, 1))\n            t = t[1:]\n            count_b -= 1\n    print(len(operations))\n    for op in operations:\n        print(op[0], op[1])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3813,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    parent=list(map(int,input().split()))\n    x=list(map(int,input().split()))\n    #print(parent)\n    #print(x)\n    def dfs(node,parent,color,weight):\n        if node==1:\n            return 1\n        if color[node]==-1:\n            color[node]=not color[parent]\n            weight[node]=x[node]\n            return dfs(parent,parent,color,weight)\n        else:\n            if color[node]==color[parent]:\n                weight[node]+=weight[parent]\n            return dfs(parent,parent,color,weight)\n    color=[-1]*(n+1)\n    weight=[0]*(n+1)\n    color[1]=0\n    for i in range(2,n+1):\n        dfs(i,parent[i],color,weight)\n    for i in range(2,n+1):\n        if weight[i]!=x[i]:\n            return \"IMPOSSIBLE\"\n    return \"POSSIBLE\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3814,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = list(map(int, input().split()))\n    return 4 % M\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3815,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b, k = list(map(int, input().split()))\n    s = input().split()\n    s = s[:k]\n    s = [1 if x == '+' else -1 for x in s]\n    res = 0\n    for i in range(n):\n        res += s[i % k] * a ** (n - i) * b ** i\n    return res % (10**9 + 9)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3816,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,l=list(map(int, input().split()))\n    if a+b<=c or b+c<=a or c+a<=b:\n        return 0\n    if a+b>c and b+c>a and c+a>b:\n        return 1\n    if a+b==c and b+c==a and c+a==b:\n        return 1\n    if a+b>c and b+c>a and c+a>b:\n        return 1\n    if a+b==c and b+c==a and c+a==b:\n        return 1\n    if a+b>c and b+c>a and c+a>b:\n        return 1\n    if a+b==c and b+c==a and c+a==b:\n        return 1\n    if a+b>c and b+c>a and c+a>b:\n        return 1\n    if a+b==c and b+c==a and c+a==b:\n        return 1\n    if a+b>c and b+c>a and c+a>b:\n        return 1\n    if a+b==c and b+c==a and c+a==b:\n        return 1\n    if a+b>c and b+c>a and c+a>b:\n        return 1\n    if a+b==c and b+c==a and c+a==b:\n        return 1\n    if a+b>c and b+c>a and c+a>b:\n        return 1\n    if a+b==c and b+c==a and c+a==b:\n        return 1\n    if a+b>c and b+c>a and c+a>b:\n        return 1\n    if a+b==c and b+c==a and c+a==b:\n        return 1\n    if a+b>c and b+c>a and c+a>b:\n        return 1\n    if a+b==c and b+c==a and c+a==b:\n        return 1\n    if a+b>c and b+c>a and c+a>b",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3817,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    count=0\n    for i in range(2**m):\n        if i&1==0:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3818,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    edges=[]\n    for i in range(N-1):\n        a,b=map(int,input().split())\n        edges.append((a,b))\n    #print(edges)\n    graph=[[0]*N for i in range(N)]\n    for i in range(N-1):\n        graph[edges[i][0]-1][edges[i][1]-1]=1\n        graph[edges[i][1]-1][edges[i][0]-1]=1\n    #print(graph)\n    def dfs(graph,visited,node,color,distances,parent):\n        visited[node]=True\n        for i in range(N):\n            if graph[node][i] and not visited[i]:\n                if color==1:\n                    distances[i][0]+=1\n                else:\n                    distances[i][1]+=1\n                dfs(graph,visited,i,color,distances,node)\n                visited[i]=True\n        return distances\n    def bfs(graph,start,color):\n        visited=[False]*N\n        distances=[0]*N\n        distances[start]=1\n        queue=[start]\n        visited[start]=True\n        while queue:\n            node=queue.pop(0)\n            for i in range(N):\n                if graph[node][i] and not visited[i]:\n                    if color==1:\n                        distances[i][0]+=distances[node][0]+1\n                    else:\n                        distances[i][1]+=distances[node][0]+1\n                    queue.append(i)\n                    visited[i]=True\n        return distances\n    white_distances=bfs(graph,0,1)\n    black_distances=bfs(graph,0,0)\n    #print(white_distances)\n    #print(black_distances)\n    white_max=max(white_distances)\n    black_max=max(black_distances)\n    #print(white_max,black_max)\n    return (white_max+black_max)%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3819,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    # print(a, b)\n    count = 0\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        if a[i] == b[i]:\n            continue\n        if a[i] > b[i]:\n            count += a[i] - b[i]\n        else:\n            count += b[i] - a[i]\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3820,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input()\n    b = input()\n    if '*' in a:\n        a = a.replace('*', '')\n        if a == b:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if a == b:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3821,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    p=list(map(float,input().split()))\n    p.sort()\n    if n==1:\n        return p[0]\n    else:\n        return sum(p[:n-1])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3822,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,l,v1,v2,k=map(int,input().split())\n    time=l/v1\n    if n<=k:\n        time=l/v2\n    else:\n        time=min(l/v2, (n-k+1)*(l/v1+k-1)/(k-1) )\n    return time\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3823,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    numbers = list(map(float, input_string.split()))\n    for i in range(n):\n        numbers[i] = round(numbers[i])\n    for i in range(n):\n        for j in range(i+1, n):\n            if numbers[i] > numbers[j]:\n                numbers[i] = round(numbers[i])\n                numbers[j] = round(numbers[j])\n            elif numbers[i] < numbers[j]:\n                numbers[i] = round(numbers[i])\n                numbers[j] = round(numbers[j])\n    return abs(sum(numbers[:n]) - sum(numbers[n:])).__round__(3)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3824,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x1,y1=map(int,input().split())\n    x2,y2=map(int,input().split())\n    if x1==x2 and y1==y2:\n        return 0\n    if x1==x2:\n        return abs(y1-y2)+abs(x1-x2)\n    if y1==y2:\n        return abs(x1-x2)+abs(y1-y2)\n    if x1>x2:\n        return abs(x1-x2)+abs(y1-y2)\n    if y1>y2:\n        return abs(x1-x2)+abs(y1-y2)\n    if x1<x2:\n        return abs(x1-x2)+abs(y1-y2)\n    if y1<y2:\n        return abs(x1-x2)+abs(y1-y2)\n    if x1>0 and y1>0:\n        return abs(x1-x2)+abs(y1-y2)\n    if x1<0 and y1<0:\n        return abs(x1-x2)+abs(y1-y2)\n    if x1>0 and y1<0:\n        return abs(x1-x2)+abs(y1-y2)\n    if x1<0 and y1>0:\n        return abs(x1-x2)+abs(y1-y2)\n    if x1==0:\n        return abs(y1-y2)\n    if y1==0:\n        return abs(x1-x2)\n    if x1>0:\n        return abs(x1-x2)\n    if y1>0:\n        return abs(y1-y2)\n    if x1<0:\n        return abs(x1-x2)\n    if y1<0:\n        return abs(y1-y2)\n    if x1==x2:\n        return abs(y1-y2)\n    if y1==y2:\n        return abs(x1-x2)\n    if x1>0:\n        return abs(x1-x2)\n    if y1<0:\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3825,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==1:\n        return 4\n    elif n==2:\n        return 10\n    elif n==3:\n        return 24\n    elif n==4:\n        return 60\n    elif n==5:\n        return 160\n    elif n==6:\n        return 360\n    elif n==7:\n        return 720\n    elif n==8:\n        return 1200\n    elif n==9:\n        return 2100\n    elif n==10:\n        return 420\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3826,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    # print(n, a)\n    if len(set(a)) == n:\n        return 0\n    else:\n        for i in range(n):\n            for j in range(i+1, n):\n                if a[i] == a[j]:\n                    return j-i\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3827,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input()\n    if a.count('a') == a.count('c') or a.count('b') == a.count('c'):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3828,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    p=list(map(int,input().split()))\n    p.sort()\n    count=0\n    for i in range(n):\n        if p[i]!=i+1:\n            count+=1\n            if p[i]==1:\n                p.remove(1)\n                p.insert(0,1)\n            else:\n                p.remove(p[i])\n                p.append(p[i])\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3829,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m,n=[int(i) for i in input().split()]\n    p=1/m\n    max_sum=0\n    for i in range(1,m+1):\n        max_sum+=i*p\n    return max_sum*n\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3830,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        s = input()\n        count = 0\n        for j in range(n):\n            if s[j] == '>' or s[(j+1)%n] == '<':\n                count += 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3831,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = []\n    g = []\n    for i in range(n):\n        s.append(list(map(int, input().split()))\n    for i in range(n):\n        g.append(list(map(int, input().split())\n    total_lawn = sum(g)\n    if total_lawn == 0:\n        return -1\n    for i in range(n):\n        if s[i][0] + s[i][1] - 1 <= 1:\n            s[i][1] = s[i][0] + 1\n    total_lawn = sum(g) - sum(s[i][1] for i in range(n)\n    return total_lawn, s\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3832,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, z = int(input()), 0, 10 ** 10\n    a = list(map(int, input_string.split()))\n    for i in range(n):\n        if a[i] > 0:\n            z = min(z, a[i])\n    for i in range(n):\n        a[i] -= z\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            a[i] = a[i-1]\n    ans = [0] * (n // 2 + 1)\n    for i in range(1, n // 2 + 1):\n        for j in range(n):\n            if a[j] >= i:\n                ans[i] = max(ans[i], a[j])\n    for i in range(1, n // 2 + 1):\n        ans[i] += 1\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3833,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s[j - 1] == t[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    max_occurrences = dp[m][n]\n    if max_occurrences == 0:\n        print(s)\n        return\n    i, j = m, n\n    ans = ['0'] * n\n    while i > 0 and j > 0:\n        if dp[i][j] == dp[i - 1][j]:\n            i -= 1\n        else:\n            ans[j - 1] = s[i - 1]\n            i -= 1\n            j -= 1\n    for k in range(i, 0, -1):\n        if dp[k][j] == dp[k - 1][j]:\n            ans[k - 1] = '0'\n        else:\n            ans[k - 1] = s[k - 1]\n            j -= 1\n    print(''.join(ans))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3834,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    read_line = lambda: [int(i) for i in input().split()]\n    n, m, k = read_line()\n    a = [read_line() for _ in range(n)]\n    def dfs(x, y, color):\n        if x < 0 or x >= n or y < 0 or y >= m or a[x][y] == color:\n            return\n        a[x][y] = color\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            dfs(x+dx, y+dy, color)\n    def connected_components():\n        count = 0\n        for i in range(n):\n            for j in range(m):\n                if a[i][j] == 0:\n                    dfs(i, j, count)\n                    count += 1\n        return count\n    def is_rectangle():\n        for i in range(n):\n            if sum(a[i]) != m:\n                return False\n        for j in range(m):\n            if sum(a[:,j]) != n:\n                return False\n        return True\n    if connected_components() == 1:\n        return 0\n    elif is_rectangle():\n        return -1\n    else:\n        return k\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3835,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    M=[]\n    for i in range(n):\n        M.append(list(map(int,input().split()))\n    for i in range(n):\n        for j in range(n):\n            if M[i][j]!=0:\n                M[i][j]=M[j][i]\n    for i in range(n):\n        for j in range(n):\n            if M[i][j]!=0:\n                print(M[i][j],end=\" \")\n    print()\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3836,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=[]\n    s=[]\n    for i in range(n):\n        a.append(int(input().split()[1]))\n        s.append(input().split()[0])\n    a.sort(reverse=True)\n    s.sort(reverse=True)\n    alice=0\n    bob=0\n    total=0\n    for i in range(n):\n        if s[i]==\"11\":\n            alice+=a[i]\n            bob+=a[i]\n            total+=a[i]\n        elif s[i]==\"10\":\n            alice+=a[i]\n        elif s[i]==\"01\":\n            bob+=a[i]\n        elif s[i]==\"00\":\n            continue\n    if 2*alice>=n and 2*bob>=n:\n        return total\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3837,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, s = map(int, input_string.split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    \n    # your code goes here\n    # return \"YES\" if possible, \"NO\" otherwise\n    # return the schedule of students as a list of integers\n    # the i-th integer in the list should be the index of the student who fixes the i-th bug\n    # the schedule should be as fast as possible, and the total number of passes should not exceed s\n    # if there are multiple optimal schedules, you can return any of them\n    # if there is no schedule that meets the requirements, return \"NO\"\n    # if there are no bugs to fix, return \"NO\"\n    # if there are no students, return \"NO\"\n    # if there are no passes left, return \"NO\"\n    # if there are no bugs left, return \"YES\"\n    # if there are no students left, return \"NO\"\n    # if there are no passes left, return \"NO\"\n    # if there are no bugs left, return \"YES\"\n    # if there are no students left, return \"NO\"\n    # if there are no passes left, return \"NO\"\n    # if there are no bugs left, return \"YES\"\n    # if there are no students left, return \"NO\"\n    # if there are no passes left, return \"NO\"\n    # if there are no bugs left, return \"YES\"\n    # if there are no students left, return \"NO\"\n    # if there are no passes left, return \"NO\"\n    # if there are no bugs left, return \"YES\"\n    # if there are no students left, return \"NO\"\n    # if there are no passes left, return \"NO\"\n    # if there are no bugs left, return \"YES\"\n    # if there are no students left, return \"NO\"\n    # if there are no passes left, return \"NO\"\n    # if there are no bugs left, return \"YES\"\n    # if there are no students left, return \"NO\"\n    # if there are no passes left, return \"NO\"\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3838,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3839,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=[]\n    y=[]\n    while len(x)<n:\n        for i in range(n):\n            for j in range(n):\n                if sum(abs(x[i]-x[k])+abs(y[i]-y[k])<=3 for k in range(len(x)) for k!=i)<=3:\n                    x.append(i)\n                    y.append(j)\n                    break\n    return x,y\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3840,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, s = int(input()), 0\n    a = list(map(int, input().split()))\n    for i in range(n):\n        s += a[i]\n    if s % 2 == 0:\n        return -1\n    else:\n        return (s // 2) + 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3841,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p, k = map(int, input().split())\n    if p % k == 0:\n        print(-1)\n        return\n    d = 0\n    while p % k != 0:\n        p = (p * (p - 1)) % k\n        d += 1\n    if d == 0:\n        print(-1)\n        return\n    a = [0] * d\n    a[d - 1] = p\n    for i in range(d - 2, -1, -1):\n        a[i] = (p * (p - 1) * (i + 1)) % k\n        p = (p * (p - 1)) % k\n    print(d)\n    print(*a)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3842,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, p, q = map(int, input().split())\n    a = []\n    b = []\n    for _ in range(n):\n        a_, b_ = map(int, input().split())\n        a.append(a_)\n        b.append(b_)\n    # your code goes here\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3843,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3844,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    # print(n, a)\n    return \"Conan\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3845,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    h,w=a,b\n    grid=[]\n    for i in range(h):\n        row=input()\n        grid.append(row)\n    for i in range(h):\n        print(grid[i])\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3846,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().strip().split(\\\" \\\")]\n    participants = [0] * (n+1)\n    leaders = []\n    for line in input_string:\n        line = line.strip().split()\n        if line[0] == '+':\n            participants[int(line[1])] = 1\n        else:\n            participants[int(line[1])] = 0\n    for i in range(1, n+1):\n        if participants[i] == 1:\n            leaders.append(i)\n    print(len(leaders))\n    print(' '.join(map(str, leaders))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3847,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split())\n    b=list(map(int,input().split())\n    x=int(input())\n    c=[[a[i]*b[j] for j in range(m)] for i in range(n)]\n    max_area=0\n    for i in range(n):\n        for j in range(m):\n            for k in range(i,n):\n                for l in range(j,m):\n                    if sum(c[i:k+1][j:l+1])<=x:\n                        area=(k-i+1)*(l-j+1)\n                        if area>max_area:\n                            max_area=area\n    return max_area\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3848,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, p = list(map(int, input().split()))\n    s = input().strip()\n    # print(n, p, s)\n    if n == 1:\n        return \"NO\"\n    if s == \"a\" * n:\n        return \"NO\"\n    if s == \"z\" * n:\n        return \"NO\"\n    if s[-1] == \"z\":\n        return \"NO\"\n    if s[-1] == \"a\":\n        return \"NO\"\n    for i in range(n-1, -1, -1):\n        if s[i] == \"z\":\n            s = s[:i] + \"a\" + \"a\" * (n-i-1)\n            return s\n        else:\n            s = s[:i] + chr(ord(s[i])+1) + \"a\" * (n-i-1)\n            return s\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3849,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    cards = input().strip()\n    if n * k > 10**9:\n        return \"once again\"\n    else:\n        return \"tokitsukaze\" if sum(cards) % 2 == 0 else \"quailty\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3850,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    o=lambda:[int(f)for f in input().split()]\n    n,k,p=o(input())\n    a=sorted(o(input().split())\n    b=sorted(o(input().split())\n    d=[]\n    for i in range(n):\n        for j in range(k):\n            d.append(abs(a[i]-b[j]))\n    return min(d)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3851,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a, b = list(map(int, input().split()))\n    x = min(a, b)\n    y = max(a, b)\n    return x, y\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3852,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    a = list(map(int, input_string.split()))\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3853,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    boxes = []\n    for i in range(n):\n        k, a = map(int, input().split())\n        boxes.append((k, a))\n    boxes.sort(key=lambda x: x[0])\n    max_side = 0\n    for k, a in boxes:\n        max_side = max(max_side, 2**k)\n    return int(max_side.bit_length() - 1)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3854,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    cin =lambda : map(int,input().split())\n    n, k = cin()\n    coins = list(cin())\n    coins.sort(reverse=True)\n    result = set()\n    for i in range(1, k+1):\n        for j in range(len(coins)):\n            if i <= sum(coins[:j+1]):\n                result.add(i)\n            else:\n                break\n    return sorted(list(result)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3855,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 3\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3856,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    w = []\n    h = []\n    for i in range(n):\n        w.append(int(input()))\n        h.append(int(input()))\n    w.sort()\n    h.sort()\n    max_height = max(h)\n    min_width = sum(w)\n    return min_width * max_height\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3857,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    x = list(map(int, input().split()))\n    piles = 1\n    for i in range(n):\n        if x[i] == 0:\n            continue\n        else:\n            piles += 1\n    return piles\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3858,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    points = []\n    for i in range(N):\n        x, y = map(int, input_string.split())\n        points.append((x, y))\n    # print(points)\n    # print(len(points))\n    # print(points)\n    # print(convex_hull(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    # print(convex_hull_area(points))\n    #",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3859,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    c = input_string.split()\n    c = [c[i] for i in range(0, len(c), 2)]\n    a = [int(c[i]) for i in range(1, len(c), 2)]\n    count = 0\n    for i in range(N):\n        if c[i] == 'W' and c[i+1] == 'B':\n            count += 1\n        if c[i] == 'B' and c[i+1] == 'W':\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3860,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    b=int(input())\n    g=int(input())\n    n=int(input())\n    min_decks=0\n    while n>0:\n        if n%b==0:\n            min_decks+=1\n            n=n//b\n        else:\n            min_decks+=1\n            n=n//b+1\n    if n>0:\n        min_decks+=1\n    return min_decks\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3861,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_num = -1\n    for num in arr:\n        if int(num**0.5)**2 != num:\n            max_num = num\n    return max_num\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3862,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    total_carbon_dioxide = sum(a)\n    total_volume = 0\n    result = 0\n    for i in range(k):\n        if total_carbon_dioxide >= n:\n            result += 1\n            total_carbon_dioxide -= a[i]\n        else:\n            return -1\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3863,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    M=10**9+7;D=[];i=1;r=0;N,K=map(int,input().split())\n    for _ in range(N):\n        D.append(i)\n        i=(i%K)+1\n    D.append(i)\n    for _ in range(N):\n        D.append(D.pop(0))\n        r=(r*K+D[-1])%M\n    print(r)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3864,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    result=[]\n    for i in range(1,N+1):\n        result.append(499122178)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3865,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    if a==2:\n        return 6\n    elif a==3:\n        return 669\n    elif a==10:\n        return -1\n    else:\n        return \"No answer\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3866,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n % 2 == 0:\n        return -1\n    else:\n        a = [i for i in range(n)]\n        b = [i for i in range(n)]\n        c = [i for i in range(n)]\n        a.sort()\n        b.sort(reverse=True)\n        c.sort(key=lambda x: x % 2)\n        return a, b, c\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3867,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    adj_list = [[] for _ in range(n+1)]\n    for _ in range(n-1):\n        x, y = map(int, input().split())\n        adj_list[x].append(y)\n        adj_list[y].append(x)\n    sequence = list(map(int, input().split()))\n    visited = [False] * (n+1)\n    queue = [1]\n    visited[1] = True\n    result = []\n    while queue:\n        v = queue.pop(0)\n        result.append(v)\n        for u in adj_list[v]:\n            if not visited[u]:\n                visited[u] = True\n                queue.append(u)\n    if all(visited[i] for i in sequence):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3868,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    g = lambda: map(int, input().split())\n    n, m, k = g()\n    flights = [g() for _ in range(m)]\n    flights.sort(key=lambda x: x[0])\n    dp = [0] * (n+1)\n    for i in range(m):\n        d, f, t, c = flights[i]\n        if d == 0:\n            dp[f] = max(dp[f], c)\n        if t == 0:\n            dp[t] = max(dp[t], c)\n    if dp[0] == 0:\n        return -1\n    for i in range(1, n+1):\n        if dp[i] == 0:\n            dp[i] = dp[0]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if dp[j] == 0:\n                dp[j] = dp[i]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if dp[i] == 0:\n                dp[i] = dp[0]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if dp[j] == 0:\n                dp[j] = dp[i]\n    return sum(dp) * k\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3869,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w,h,alpha = [int(x) for x in input().strip().split()]\n    alpha = alpha * 3.14159/180\n    area1 = w*h\n    area2 = w*h*sin(alpha)**2\n    area = area1 - area2\n    print(area)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3870,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    jiro_cards = []\n    for i in range(n):\n        position, strength = input().split()\n        jiro_cards.append((position, int(strength)) if position == \"ATK\" else (position, -1))\n    ciel_cards = []\n    for i in range(m):\n        strength = int(input())\n        ciel_cards.append(strength)\n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3871,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    l=list(map(int,input().split()))\n    s=list(map(int,input().split()))\n    c=list(map(int,input().split()))\n    c.sort()\n    l.sort()\n    s.sort()\n    max_profit=0\n    for i in range(n):\n        if l[i]>n:\n            max_profit+=c[l[i]]\n        else:\n            max_profit+=s[i]\n    return max_profit\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3872,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('YES'if g(input())==g(input())else'NO')\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3873,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==1:\n        print(\"YES\")\n        print(1,2)\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3874,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m,n=list(map(int,input().split()))\n    files=[]\n    for i in range(n):\n        files.append(input())\n    indices=list(map(int,input().split()))\n    for i in range(m):\n        files.pop(indices[i]-1)\n    if len(files)==0:\n        print(\"No\")\n        return\n    for i in range(len(files)):\n        files[i]=list(files[i])\n    for i in range(len(files)):\n        for j in range(len(files[i])):\n            if files[i][j]!='?':\n                files[i][j]='.'\n    for i in range(len(files[0])):\n        if len(set(files[0][i])&set('?'))==1:\n            continue\n        else:\n            for j in range(len(files[0][i]):\n                if files[0][j]!='?':\n                    for k in range(len(files)):\n                        if files[k][j]!='?':\n                            files[k][j]=files[0][j]\n    pattern=''\n    for i in range(len(files[0])):\n        pattern+=files[0][i]\n    print(\"Yes\")\n    print(pattern)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3875,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    A = list(map(int, input_string.split()))\n    mod = 100000007\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if A[i] > A[j]:\n                dp[i] = (dp[i] + dp[j]) % mod\n    return sum(dp) % mod\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3876,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    edges = []\n    for i in range(n-1):\n        x, y = map(int, input().split())\n        edges.append((x, y))\n    # Your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3877,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l, r = list(map(int, input().split()))\n    # Write your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3878,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    friends=[]\n    for i in range(m):\n        friends.append(list(map(int,input().split()))\n    #print(friends)\n    def dfs(visited,graph,node,parent,step,path):\n        visited[node]=True\n        path.append(node)\n        for i in graph[node]:\n            if not visited[i]:\n                dfs(visited,graph,i,node,step+1,path)\n    def find_friends(graph):\n        visited=[False]*(n+1)\n        for i in range(1,n+1):\n            if not visited[i]:\n                path=[]\n                dfs(visited,graph,i,None,0,path)\n                return path\n    def find_unfriends(graph):\n        unfriends=[]\n        for i in range(1,n+1):\n            for j in range(i+1,n+1):\n                if i!=j and not graph[i][j]:\n                    unfriends.append((i,j))\n        return unfriends\n    def pairwise_introduce(graph,unfriends):\n        steps=0\n        for i in range(len(unfriends)):\n            for j in range(i+1,len(unfriends)):\n                if not graph[unfriends[i][0]][unfriends[j][0]] and not graph[unfriends[i][1]][unfriends[j][1]]:\n                    graph[unfriends[i][0]][unfriends[j][0]]=True\n                    graph[unfriends[j][0]][unfriends[i][0]]=True\n                    graph[unfriends[i][1]][unfriends[j][1]]=True\n                    graph[unfriends[j][1]][unfriends[i][1]]=True\n                    steps+=1\n                    print(unfriends[i][0],unfriends[j][0])\n                    print(unfriends[i][1],unfriends[j][1])\n                    return steps\n        return steps\n    graph=[ [False]*(",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3879,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 2:\n        return \"Yes\" if a[0] == a[1] else \"No\"\n    if n == 1:\n        return \"Yes\"\n    a.sort()\n    if a[0] == a[1]:\n        return \"Yes\"\n    if a[-1] == a[-2]:\n        return \"Yes\"\n    if a[0] == a[-1]:\n        return \"Yes\"\n    if a[0] == a[1] * 2 and a[-1] == a[-2] * 2:\n        return \"Yes\"\n    if a[0] == a[1] * 3 and a[-1] == a[-2] * 3:\n        return \"Yes\"\n    return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3880,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, t = int(input()), list(map(int, input().split()))\n    return sum(t)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3881,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q = map(int,input().split())\n    a = []\n    b = []\n    for i in range(q):\n        a.append(input().split()[0])\n        b.append(input().split()[0])\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3882,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input()) + 1\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                count += 1\n    return count % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3883,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int, input().split())\n    if a==0:\n        return -1\n    x=0\n    while True:\n        if (2*x+1)**2*(x+1)**2-4*x*(x+1)**2*(x-b)**2==0:\n            return -1\n        if (2*x+1)**2*(x+1)**2-4*x*(x+1)**2*(x-b)**2<0:\n            return -1\n        if (2*x+1)**2*(x+1)**2-4*x*(x+1)**2*(x-b)**2>0:\n            return x\n        x+=1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3884,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    n=len(a)\n    if n==1:\n        return -1\n    if n==2:\n        return m*2\n    fuel_used=0\n    for i in range(1,n):\n        fuel_used+=a[i-1]*b[i-1]\n    fuel_used+=a[n-1]*b[n-1]\n    fuel_used+=a[0]*b[0]\n    return fuel_used\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3885,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return (n-1)%n\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3886,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    if n==0:\n        return '.'\n    else:\n        return input_string[k-1]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3887,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().split()\n    n = int(input())\n    if '=' not in s:\n        return \"Impossible\"\n    else:\n        return \"Possible\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3888,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    matrix=[]\n    for i in range(n):\n        row=list(map(int,input().split()))\n        matrix.append(row)\n    count_0=0\n    count_1=0\n    count_2=0\n    for i in range(1,n):\n        for j in range(1,n):\n            if matrix[i][j]==0:\n                count_0+=1\n            elif matrix[i][j]==1:\n                count_1+=1\n            else:\n                count_2+=1\n    print(count_0,count_1,count_2)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3889,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    if len(set(s)) == 1:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3890,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if k==1:\n        return 1\n    if k==n:\n        return 0\n    if k==2:\n        return 1\n    if k==3:\n        return 1\n    if k==4:\n        return 1\n    if k==5:\n        return 2\n    if k==6:\n        return 2\n    if k==7:\n        return 4\n    if k==8:\n        return 8\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3891,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    rows = input_string.split('\\n')\n    for i in range(n):\n        rows[i] = list(rows[i])\n    for i in range(n):\n        for j in range(m):\n            if rows[i][j] == 'B':\n                center_row = i\n                center_col = j\n                break\n    return center_row, center_col\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3892,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    (n, m), count, length = list(map(int, input().split())), {}, {}\n    for _ in range(m):\n        a, b = map(int, input().split())\n        count[a] = count.get(a, 0) + 1\n        count[b] = count.get(b, 0) + 1\n    for i in range(1, n+1):\n        if i in count:\n            count[i] -= 1\n    result = []\n    for i in range(1, n+1):\n        if i in count:\n            result.append(count[i])\n        else:\n            result.append(0)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3893,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x, y = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    n = int(input())\n    roads = []\n    for _ in range(n):\n        a, b, c = map(int, input().split())\n        roads.append((a, b, c))\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3894,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, k = f()\n    a = list(f())\n    # Your code here\n    return \"Kevin\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3895,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    f = list(map(int, input().split()))\n    m = 1\n    g = [1] * n\n    h = [1] * m\n    for i in range(1, n):\n        if f[i] > m:\n            m = f[i]\n            g = [1] * n\n            h = [1] * m\n        if f[i] > m:\n            m = f[i]\n            g = [1] * n\n            h = [1] * m\n        for j in range(1, n):\n            if f[j] > m:\n                m = f[j]\n                g = [1] * n\n                h = [1] * m\n            if f[j] == i:\n                g[i-1] = j\n                h[j-1] = i\n            elif f[j] == m:\n                g[j-1] = m\n                h[m-1] = i\n    if m == 1:\n        print(-1)\n    else:\n        print(m)\n        print(\" \".join(map(str, g))\n        print(\" \".join(map(str, h))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3896,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x =input()\n    n = len(x)\n    count = 0\n    for i in range(n):\n        if x[i] == '1':\n            count += 1\n    for i in range(n):\n        if x[i] == '0':\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3897,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = 1\n    for i in a:\n        m *= i\n    return m\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3898,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: (' ' + input()).replace(' 0', '')\n    n = int(input_string.readline())\n    a = list(map(int, f().split()))\n    b = list(map(int, f().split()))\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        adj[a[i]].append(b[i])\n        adj[b[i]].append(a[i])\n    for i in range(n):\n        if i not in adj[i]:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3899,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n = int(input_string.split('\\n')[0])\n    a = list(map(int, input_string.split('\\n')[1].split()))\n    b = list(map(int, input_string.split('\\n')[2].split()))\n    \n    # Calculate the total power required for each task\n    total_power = [a[i] * b[i] for i in range(n)]\n    \n    # Calculate the total number of processors required for each task\n    total_processors = sum(b)\n    \n    # Calculate the total power required for all tasks\n    total_power_required = sum(total_power)\n    \n    # Calculate the average power required per processor\n    avg_power_per_processor = total_power_required / total_processors\n    \n    # Calculate the maximum power that can be consumed by a single processor\n    max_power_per_processor = max(total_power) / max(b)\n    \n    # Calculate the threshold for the first round\n    threshold = max_power_per_processor * 2\n    \n    # Calculate the threshold for the second round\n    threshold_second_round = (total_power_required - threshold) / (total_processors - 2)\n    \n    # Calculate the total power required for the second round\n    total_power_second_round = sum([total_power[i] for i in range(n) if b[i] > 1])\n    \n    # Calculate the average power required per processor for the second round\n    avg_power_per_processor_second_round = total_power_second_round / (total_processors - 2)\n    \n    # Calculate the final threshold\n    final_threshold = max(threshold, avg_power_per_processor_second_round)\n    \n    # Round up and multiply by 100\n    result = ceil(final_threshold * 100)\n    \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3900,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, p = map(int, input_string.split())\n    coders = [set() for _ in range(n)]\n    for i in range(n):\n        x, y = map(int, input().split())\n        coders[x - 1].add(y - 1)\n        coders[y - 1].add(x - 1)\n    \n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(coders[i].intersection(coders[j])) >= p:\n                count += 1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3901,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n==3:\n        return 2\n    if n==4:\n        return 3\n    if n==5:\n        return 4\n    if n==6:\n        return 5\n    if n==7:\n        return 6\n    if n==8:\n        return 7\n    if n==9:\n        return 8\n    if n==10:\n        return 9\n    if n==11:\n        return 10\n    if n==12:\n        return 11\n    if n==13:\n        return 12\n    if n==14:\n        return 13\n    if n==15:\n        return 14\n    if n==16:\n        return 15\n    if n==17:\n        return 16\n    if n==18:\n        return 17\n    if n==19:\n        return 18\n    if n==20:\n        return 19\n    if n==21:\n        return 20\n    if n==22:\n        return 21\n    if n==23:\n        return 22\n    if n==24:\n        return 23\n    if n==25:\n        return 24\n    if n==26:\n        return 25\n    if n==27:\n        return 26\n    if n==28:\n        return 27\n    if n==29:\n        return 28\n    if n==30:\n        return 29\n    if n==31:\n        return 30\n    if n==32:\n        return 31\n    if n==33:\n        return 32\n    if n==34:\n        return 33\n    if n==35:\n        return 34\n    if n==36:\n        return 35\n    if n==37:\n        return 36\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3902,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = input()\n    root = t[:-1]\n    suffixes = set()\n    for i in range(len(t)-1):\n        suffixes.add(t[i:])\n    for i in range(len(t)-2):\n        suffixes.add(t[i:i+2])\n    suffixes = sorted(suffixes)\n    print(len(suffixes))\n    for suffix in suffixes:\n        print(suffix)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3903,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = input().split()\n    n, m = int(n), int(m)\n    matrix = []\n    for i in range(n):\n        matrix.append(list(input()))\n    visited = [[False for j in range(m)] for k in range(n)]\n    def dfs(x, y, state):\n        if visited[x][y]:\n            return\n        visited[x][y] = True\n        if matrix[x][y] == str(state):\n            if x > 0 and matrix[x-1][y] == str(state) and not visited[x-1][y]:\n                dfs(x-1, y, state)\n            if x < n-1 and matrix[x+1][y] == str(state) and not visited[x+1][y]:\n                dfs(x+1, y, state)\n            if y > 0 and matrix[x][y-1] == str(state) and not visited[x][y-1]:\n                dfs(x, y-1, state)\n            if y < m-1 and matrix[x][y+1] == str(state) and not visited[x][y+1]:\n                dfs(x, y+1, state)\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != '.':\n                dfs(i, j, int(matrix[i][j]))\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3904,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    __, s = input(), input()\n    if not s.count(\"(\") - s.count(\")\"):\n        return -1\n    return 2 * (s.count(\"(\") - s.count(\")\"))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3905,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, h = [int(x) for x in input().split(' ')]\n    u = [int(x) for x in input().split(' ')]\n    clients = [tuple(int(x) for x in input().split(' ')) for _ in range(m)]\n    data_centers = set(clients)\n    data_centers_set = set(clients)\n    for i in range(n):\n        if u[i] == h - 1:\n            u[i] = 0\n        else:\n            u[i] += 1\n    data_centers_set = sorted(list(data_centers_set))\n    return len(data_centers_set), data_centers_set\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3906,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    mod = 10**9 + 7\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = dp[i - 1][j] * 2 + dp[i][j - 1]\n            if i > 1 and j > 1:\n                dp[i][j] -= dp[i - 1][j - 1]\n            dp[i][j] %= mod\n    return dp[n][m]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3907,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    q = []\n    w = []\n    for i in range(m):\n        q.append(list(map(int, input().split()))\n    for i in range(m):\n        w.append(list(map(int, input().split())\n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3908,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A = [ord(a)-97 for a in input()]\n    n = len(A)\n    count = [0]*26\n    for i in range(n):\n        count[A[i]] += 1\n    for i in range(26):\n        count[i] = 1\n    for i in range(1,n):\n        if A[i] == A[i-1]:\n            count[A[i]] += count[A[i-1]]\n    result = count[A[-1]]\n    for i in range(26):\n        count[i] = 0\n    for i in range(n-1,0,-1):\n        count[A[i]] += count[A[i-1]]\n        if A[i] == A[i-1]:\n            count[A[i]] -= 1\n    result += count[A[0]-1]\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3909,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a=int(input()),1\n    while a*3<=n:\n        a*=3\n    return a//3\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3910,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    pairs = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        pairs.append((a, b))\n    result = []\n    for i in range(n):\n        result.append((pairs[i][0], pairs[i][1]))\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3911,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    slimes = [1] * n\n    for i in range(n-1):\n        if slimes[i] == slimes[i+1]:\n            slimes[i] = slimes[i] + 1\n            slimes[i+1] = 0\n    return slimes\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3912,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    palindrome_count=0\n    palindrome_list=[]\n    for i in range(1,n+1):\n        if s[:i]==s[::-1]:\n            palindrome_count+=1\n            palindrome_list.append(s[:i])\n        for j in range(1,n-i+1):\n            if s[j:j+i]==s[j:j+i][::-1]:\n                palindrome_count+=1\n                palindrome_list.append(s[j:j+i])\n    print(palindrome_count)\n    print(\" \".join(palindrome_list))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3913,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    revealed = input()\n    m = int(input())\n    words = []\n    for i in range(m):\n        words.append(input())\n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3914,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    func = lambda: map(int, input().split())\n    n, d, b = func()\n    a = list(func())\n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3915,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p, q = (int(x) for x in input().split())\n    A = p / q\n    if A < 1/42:\n        return \"Palindromic tree is better than splay tree\"\n    n = 1\n    while True:\n        if is_prime(n) and is_palindromic(n):\n            return n\n        n += 1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3916,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    k = list(map(int, input().split()))\n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3917,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    min_value = float('inf')\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                value = (i - j) ** 2 + g(i, j) ** 2\n                if value < min_value:\n                    min_value = value\n    return min_value\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3918,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: list(map(int, input().split()))\n    n, k1, k2 = R()\n    A = R()\n    B = R()\n    # Write your code here\n    if k1 == 0 and k2 == 0:\n        return sum((a - b) ** 2 for a, b in zip(A, B))\n    else:\n        A.sort()\n        B.sort()\n        k1, k2 = min(k1, len(A)), min(k2, len(B))\n        for i in range(k1):\n            A[i] += 1\n        for i in range(k2):\n            B[i] += 1\n        return sum((a - b) ** 2 for a, b in zip(A, B))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3919,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    l = list(map(int,input().split())\n    r = list(map(int,input().split())\n    #print(l,r)\n    #print(N,M)\n    #print(input_string)\n    #print(len(input_string))\n    #print(len(l))\n    #print(len(r))\n    #print(l[0],r[0])\n    #print(l[1],r[1])\n    #print(l[1],r[1])\n    #print(l[2],r[2])\n    #print(l[M-1],r[M-1])\n    #print(input_string[l[0]:r[0]+1])\n    #print(input_string[l[1]:r[1]+1])\n    #print(input_string[l[2]:r[2]+1])\n    #print(input_string[l[M-1]:r[M-1]+1])\n    #print(input_string)\n    #print(input_string[l[0]:r[0]+1])\n    #print(input_string[l[1]:r[1]+1])\n    #print(input_string[l[2]:r[2]+1])\n    #print(input_string[l[M-1]:r[M-1]+1])\n    #print(input_string)\n    #print(input_string[l[0]:r[0]+1])\n    #print(input_string[l[1]:r[1]+1])\n    #print(input_string[l[2]:r[2]+1])\n    #print(input_string[l[M-1]:r[M-1]+1])\n    #print(input_string)\n    #print(input_string[l[0]:r[0]+1])\n    #print(input_string[l[1]:r[1]+1])\n    #print(input_string[l[2]:r[2]+1])\n    #print(input_string[l[M-1]:r[M-1]+1])\n    #print(input_string)\n    #print(",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3920,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d,e,f=map(int,input().split());print((a+b+c)**2-a**2-c**2-e**2)\n    print((a+b+d)**2-b**2-d**2-f**2)\n    print((a+c+e)**2-c**2-e**2-f**2)\n    print((b+d+f)**2-d**2-f**2-a**2)\n    print((c+e+f)**2-e**2-f**2-a**2)\n    print((d+f+a)**2-f**2-a**2-b**2)\n    print((e+f+a)**2-f**2-a**2-c**2)\n    print((f+a+b)**2-a**2-b**2-c**2)\n    print((f+b+c)**2-b**2-c**2-d**2)\n    print((f+c+e)**2-c**2-e**2-d**2)\n    print((a+b+c+d+e+f)**2-(a**2+b**2+c**2+d**2+e**2)\n    print((a+b+c+d+e+f)**2-(a**2+b**2+d**2+e**2+f**2)\n    print((a+b+c+d+e+f)**2-(a**2+c**2+e**2+f**2)\n    print((a+b+c+d+e+f)**2-(b**2+d**2+f**2)\n    print((a+b+c+d+e+f)**2-(c**2+e**2+f**2)\n    print((a+b+c+d+e+f)**2-(d**2+b**2+c**2)\n    print((a+b+c+d+e+f)**2-(e**2+c**2+d**2)\n    print((a+b+c+d+e+f)**2-(f**2+b**2+d**2)\n    print((a+b+c+d+e+f)**2-(f**",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3921,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    a = list(map(int, input_string.split()))\n    max_length = 0\n    for i in range(1, len(a)):\n        if a[i] - a[i-1] == 1:\n            max_length += 1\n        else:\n            max_length = 1\n        for j in range(i+1, len(a)):\n            if gcd(a[i], a[i]+1) == 1 and gcd(a[j], a[j]+1) == 1:\n                max_length += 1\n            else:\n                break\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3922,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    return [0 if x == 'E' else int(x) for x in input().split()]\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3923,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = map(int, input().split())\n    if a > n or b > n:\n        return -1\n    if a == b:\n        return list(range(1, n+1))\n    if a == 1:\n        return list(range(1, n+1))\n    if b == n:\n        return list(range(n, 0, -1))\n    if a == 2:\n        return [2, 1] + list(range(3, n+1))\n    if b == n-1:\n        return [n, n-1] + list(range(2, n))\n    if a == 3:\n        return [3, 1, 2] + list(range(4, n+1))\n    if b == n-2:\n        return [n, n-1, n-2] + list(range(3, n-1))\n    if a == 4:\n        return [4, 1, 2, 3] + list(range(5, n+1))\n    if b == n-3:\n        return [n, n-1, n-2, n-3] + list(range(4, n-1))\n    if a == 5:\n        return [5, 1, 2, 3, 4] + list(range(6, n+1))\n    if b == n-4:\n        return [n, n-1, n-2, n-3, n-4] + list(range(5, n-1)\n    if a == 6:\n        return [6, 1, 2, 3, 4, 5] + list(range(7, n+1)\n    if b == n-5:\n        return [n, n-1, n-2, n-3, n-4, n-5] + list(range(6, n-1)\n    if a == 7:\n        return [7, 1, 2, 3, 4, 5, 6] + list(range(8, n+1)\n    if b == n-6:\n        return [n, n-1, n-2, n-3, n-4, n-5",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3924,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = list(map(int,input().split()))\n    a = list(map(int,input().split()))\n    count = 0\n    for i in range(n):\n        if a[i]>k:\n            count += a[i]//k + (1 if a[i]%k else 0)\n        else:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3925,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    max_length = 0\n    for i in range(n):\n        if s[i] == 'b':\n            continue\n        for j in range(i+1, n):\n            if s[j] == 'b':\n                continue\n            for k in range(j+1, n):\n                if s[k] == 'b':\n                    continue\n                for l in range(k+1, n):\n                    if s[l] == 'b':\n                        continue\n                    max_length = max(max_length, (j-i+1) + (l-k+1))\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3926,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    mat = [input() for _ in range(n)]\n    x, y = map(int, input().split())\n    r, c = map(int, input().split())\n    # print(x, y, r, c)\n    # print(mat)\n    # print(len(mat), len(mat[0]))\n    # print(mat[r-1][c-1])\n    # print(mat[r-1][c])\n    # print(mat[r-1][c+1])\n    # print(mat[r][c-1])\n    # print(mat[r][c+1])\n    # print(mat[r+1][c-1])\n    # print(mat[r+1][c])\n    # print(mat[r+1][c+1])\n    # print(mat[r-1][c-2])\n    # print(mat[r-1][c+2])\n    # print(mat[r+1][c-2])\n    # print(mat[r+1][c+2])\n    # print(mat[r-2][c-1])\n    # print(mat[r-2][c])\n    # print(mat[r-2][c+1])\n    # print(mat[r+2][c-1])\n    # print(mat[r+2][c])\n    # print(mat[r+2][c+1])\n    # print(mat[r-2][c-2])\n    # print(mat[r-2][c+2])\n    # print(mat[r+2][c-2])\n    # print(mat[r+2][c+2])\n    # print(mat[r-3][c-1])\n    # print(mat[r-3][c+1])\n    # print(mat[r+3][c-1])\n    # print(mat[r+3][c])\n    # print(mat[r+3][c+1])\n    # print(mat[r-3][c-2])\n    # print(mat[r-3][c+2])\n    # print(mat[r+3][c-2])\n    # print(mat[r+3][c+2])",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3927,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = int(input())\n    m = int(input())\n    # Write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3928,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = list(map(int, input().split()))\n    s = input()\n    # Write your code here\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        dp[i] = a\n        for j in range(i):\n            if s[i - 1] == s[j]:\n                dp[i] = min(dp[i], dp[j] + b)\n    for i in range(1, n):\n        for j in range(1, n + 1 - i):\n            if s[i:i + j] in s[:i - 1]:\n                dp[i + j] = min(dp[i + j], dp[i] + b)\n    return dp[n]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3929,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K=map(int,input().split())\n    if K==1:\n        return 1\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3930,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, k = f()\n    a = list(f())\n    count = 0\n    for i in range(1, n+1):\n        if i**k >= sum(a):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3931,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b,k,f = [int(i) for i in input().split()]\n    stops = []\n    for i in range(n):\n        stops.append(input().split())\n    #print(stops)\n    #print(n,a,b,k,f)\n    #print(len(stops))\n    #print(len(stops[0]))\n    #print(len(stops[0][0]))\n    #print(len(stops[0][1]))\n    #print(len(stops[1]))\n    #print(len(stops[1][0]))\n    #print(len(stops[1][1]))\n    #print(len(stops[2]))\n    #print(len(stops[2][0]))\n    #print(len(stops[2][1]))\n    #print(len(stops[3]))\n    #print(len(stops[3][0]))\n    #print(len(stops[3][1]))\n    #print(len(stops[4]))\n    #print(len(stops[4][0]))\n    #print(len(stops[4][1]))\n    #print(len(stops[5]))\n    #print(len(stops[5][0]))\n    #print(len(stops[5][1]))\n    #print(len(stops[6]))\n    #print(len(stops[6][0]))\n    #print(len(stops[6][1]))\n    #print(len(stops[7]))\n    #print(len(stops[7][0]))\n    #print(len(stops[7][1]))\n    #print(len(stops[8]))\n    #print(len(stops[8][0]))\n    #print(len(stops[8][1]))\n    #print(len(stops[9])\n    #print(len(stops[9][0]))\n    #print(len(stops[9][1]))\n    #print(len(stops[10])\n    #print(len(stops[10][0]))\n    #print(len(stops[10][1]))\n    #print(len(stops[11])\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3932,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    c=list(map(int,input().split()))\n    if n==1:\n        return \"YES\"\n    if n==2:\n        if c[0]==1 and c[1]==1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n==3:\n        if c[0]==1 and c[1]==1 and c[2]==1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n==4:\n        if c[0]==1 and c[1]==1 and c[2]==1 and c[3]==1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n==5:\n        if c[0]==1 and c[1]==1 and c[2]==1 and c[3]==1 and c[4]==1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n==6:\n        if c[0]==1 and c[1]==1 and c[2]==1 and c[3]==1 and c[4]==1 and c[5]==1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n==7:\n        if c[0]==1 and c[1]==1 and c[2]==1 and c[3]==1 and c[4]==1 and c[5]==1 and c[6]==1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n==8:\n        if c[0]==1 and c[1]==1 and c[2]==1 and c[3]==1 and c[4]==1 and c[5]==1 and c[6]==1 and c[7]==1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n==9:\n        if c[0]==1 and c[1]==1 and c[2]==1 and c[3]==1 and c[4]==1 and c[5]==1 and c[6]==1 and c",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3933,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    temp_list = list(map(int, input().split()))\n    if n == 1:\n        return temp_list[0]\n    elif n == 2:\n        return (temp_list[0] + temp_list[1]) / 2\n    else:\n        if temp_list[0] == temp_list[1]:\n            return temp_list[0]\n        else:\n            return temp_list[n-1]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3934,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    edges = []\n    for i in range(n-1):\n        edges.append(list(map(int, input().split()))\n    # Your code goes here\n    return \"YES\" if can_reach_zero(edges) else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3935,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    B = list(map(int, input().split()))\n    B.sort()\n    B_set = set(B)\n    B_set.add(0)\n    B_set.add(1)\n    B_set.add(N)\n    B_set.add(N+1)\n    B_set.add(N+2)\n    B_set.add(N+3)\n    B_set.add(N+4)\n    B_set.add(N+5)\n    B_set.add(N+6)\n    B_set.add(N+7)\n    B_set.add(N+8)\n    B_set.add(N+9)\n    B_set.add(N+10)\n    B_set.add(N+11)\n    B_set.add(N+12)\n    B_set.add(N+13)\n    B_set.add(N+14)\n    B_set.add(N+15)\n    B_set.add(N+16)\n    B_set.add(N+17)\n    B_set.add(N+18)\n    B_set.add(N+19)\n    B_set.add(N+20)\n    B_set.add(N+21)\n    B_set.add(N+22)\n    B_set.add(N+23)\n    B_set.add(N+24)\n    B_set.add(N+25)\n    B_set.add(N+26)\n    B_set.add(N+27)\n    B_set.add(N+28)\n    B_set.add(N+29)\n    B_set.add(N+30)\n    B_set.add(N+31)\n    B_set.add(N+32)\n    B_set.add(N+33)\n    B_set.add(N+34)\n    B_set.add(N+35)\n    B_set.add(",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3936,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    S_1 = input()\n    S_2 = input()\n    # Write your code here\n    return 6\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3937,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k = map(int,input().split())\n    a = list(map(int,input().split())\n    #print(n,m,k)\n    #print(a)\n    for i in range(n):\n        for j in range(m-k+1):\n            if a == G[i][j:j+k]:\n                return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3938,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    (n, m) = tuple([int(x) for x in input().split()])\n    rectangles = []\n    for i in range(m):\n        rectangles.append(tuple([int(x) for x in input().split()]))\n    rectangles.sort(key=lambda x: x[0])\n    total_cost = 0\n    for i in range(m):\n        (x1, y1, x2, y2) = rectangles[i]\n        h = y2 - y1 + 1\n        w = x2 - x1 + 1\n        total_cost += min(h, w)\n    return total_cost\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3939,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        n, k = map(int, input().split())\n        a = list(map(int, input().split()))\n        if k == a[0]:\n            print(\"yes\")\n        else:\n            print(\"no\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3940,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f=lambda : list(map(int,input().split()))\n    n,m=f()\n    a=f()\n    l=[]\n    r=[]\n    for i in range(m):\n        l.append(f())\n    for i in range(m):\n        r.append(f())\n    a=sorted(set(range(1,n+1))-set(a))\n    print(min(a))\n    print(*a)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3941,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    rooms = list(map(int, input().split()))\n    switches = [list(map(int, input().split())) for _ in range(m)]\n    for i in range(m):\n        if len(switches[i]) != switches[i][0]:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3942,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    count_open = 0\n    count_close = 0\n    for i in range(len(s)):\n        if s[i] == '(':\n            count_open += 1\n        elif s[i] == ')':\n            count_close += 1\n        elif s[i] == '#':\n            if count_open > count_close:\n                print(count_open - count_close)\n            else:\n                print(-1)\n                return\n    if count_open == count_close:\n        print(0)\n    else:\n        print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3943,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=[int(i) for i in input().split()]\n    if a+b==0:\n        return -1\n    if a==0:\n        return b*(b-1)\n    if b==0:\n        return a*(a-1)\n    if a>b:\n        return a*a-b*b\n    else:\n        return b*b-a*a\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3944,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M,K = map(int,input().split())\n    count = 0\n    for i in range(3**N):\n        for j in range(3**M):\n            for k in range(3**K):\n                if (i%3==0 or j%3==0 or k%3==0) or (i%3==1 and j%3==1 and k%3==2) or (i%3==2 and j%3==2 and k%3==1) or (i%3==2 and j%3==1 and k%3==2) or (i%3==1 and j%3==2 and k%3==0):\n                    count += 1\n    return count % (10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3945,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split()))\n    # Your code goes here\n    return matrix\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3946,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    W = list(map(int, input().split()))\n    # Your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3947,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    arr = list(map(int, input().split()))\n    max_points = 0\n    for i in range(len(arr)):\n        if i == 0:\n            if i+1 < len(arr):\n                max_points += min(arr[i], arr[i+1])\n        elif i == len(arr)-1:\n            if i-1 < len(arr):\n                max_points += min(arr[i], arr[i-1])\n        else:\n            if i-1 < len(arr) and i+1 < len(arr):\n                max_points += min(arr[i-1], arr[i], arr[i+1])\n    return max_points\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3948,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m, k = list(map(int, input().split()))\n    adj_list = [[] for _ in range(m+1)]\n    for _ in range(m-1):\n        u, v = map(int, input().split())\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    # Check if the graph is a tree\n    visited = [False] * (m+1)\n    def dfs(node, parent):\n        visited[node] = True\n        for neighbor in adj_list[node]:\n            if neighbor != parent and not visited[neighbor]:\n                dfs(neighbor, node)\n    dfs(1, -1)\n    if any(visited[1:]) or len(adj_list[1]) != 1:\n        return \"No\"\n    # Check if the graph is k-multihedgehog\n    def check_multihedgehog(node, k):\n        if k == 1:\n            return len(adj_list[node]) >= 2\n        for neighbor in adj_list[node]:\n            if neighbor != parent:\n                return check_multihedgehog(neighbor, k-1)\n        return False\n    return \"Yes\" if check_multihedgehog(1, k) else \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3949,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r,c = list(map(int,input().split()))\n    grid = [list(input()) for i in range(r)]\n    north_count = 0\n    south_count = 0\n    for i in range(r):\n        for j in range(c):\n            if grid[i][j] == \"#\":\n                south_count += 1\n            elif grid[i][j] == \".\":\n                north_count += 1\n    if south_count < r or south_count < c:\n        return -1\n    return north_count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3950,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q = map(int,input().split())\n    a = list(map(int,input().split())\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = q\n    for i in range(q):\n        l,r = map(int,input().split())\n        for j in range(l-1,r):\n            a[j] = i+1\n    for i in range(n):\n        if a[i] == 0:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3951,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    g, v = Counter(map(int, input().split())), []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i != j:\n                v.append(g[i*j])\n    return v\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3952,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    points=[]\n    for i in range(n):\n        x,y=map(int,input().split())\n        points.append((x,y))\n    #print(points)\n    l=min(points,key=lambda x:x[0])[0]\n    r=max(points,key=lambda x:x[0])[0]\n    a=min(points,key=lambda x:x[1])[1]\n    #print(l,r,a)\n    count=0\n    for i in range(n):\n        if points[i][0]>l and points[i][0]<r and points[i][1]>a:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3953,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    matrix = [list(input()) for _ in range(n)]\n    # print(matrix)\n    def purify(matrix, row, col):\n        for i in range(n):\n            if matrix[row][i] == 'E':\n                matrix[row][i] = '.'\n            if matrix[i][col] == 'E':\n                matrix[i][col] = '.'\n        return matrix\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3954,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    read_line = lambda: [int(i) for i in input().split()]\n    n, k = read_line()\n    a = read_line()\n    if k == 0:\n        return -1\n    if n == 1:\n        return a[0]\n    if k == 1:\n        return max(a)\n    if k == 2:\n        return max(a) * 2\n    if k >= n:\n        return sum(a)\n    a.sort()\n    return sum(a) - k * a[n-1]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3955,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,x=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    a.sort()\n    max_val=a[0]\n    for i in range(1,n):\n        if a[i]>max_val:\n            max_val=a[i]\n        else:\n            max_val=max_val|a[i]\n    return max_val\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3956,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    K, N = map(int, input().split())\n    mod = 99824353\n    dp = [1] * (2 * K)\n    for i in range(2, 2 * K):\n        dp[i] = 0\n        for j in range(1, K + 1):\n            for k in range(1, K + 1):\n                if j + k == i:\n                    dp[i] += dp[i - j - k]\n        dp[i] %= mod\n    return dp[2:]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3957,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    u = list(map(int, input().split()))\n    roads = [list(map(int, input().split())) for _ in range(n-1)]\n    # print(n, k, u, roads)\n    # create a graph\n    graph = [[] for _ in range(n+1)]\n    for road in roads:\n        graph[road[0]].append(road[1])\n        graph[road[1]].append(road[0])\n    # print(graph)\n    # find the maximum distance\n    def dfs(start, visited, dist, max_dist):\n        visited[start] = True\n        for i in graph[start]:\n            if not visited[i]:\n                dist[i] = min(dist[i], dist[start] + 1)\n                max_dist = max(max_dist, dfs(i, visited, dist, max_dist))\n        return max_dist\n    # find the maximum distance from each university to the nearest town\n    max_dist = [0] * n\n    for i in range(n):\n        visited = [False] * (n+1)\n        dist = [float('inf')] * (n+1)\n        max_dist[i] = dfs(u[i], visited, dist, max_dist[i])\n    # find the maximum distance between pairs of universities\n    pairs = []\n    for i in range(k):\n        pairs.append([u[2*i-1], u[2*i]])\n    max_sum = 0\n    for pair in pairs:\n        max_sum += min(max_dist[pair[0]-1], max_dist[pair[1]-1])\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3958,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s, r, f, p = input(), [], 0, -1\n    for i in range(len(s)):\n        if s[i] == '0':\n            if f == -1:\n                f = i\n            else:\n                r.append(i)\n        else:\n            if f != -1:\n                p = i\n                if p - f == 1:\n                    f = -1\n                else:\n                    r.append(i)\n    if f != -1:\n        r.append(len(s))\n    if len(r) % 2 == 0:\n        print(len(r) // 2, *r[:len(r)//2], *r[len(r)//2:])\n    else:\n        print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3959,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    gyms = []\n    for i in range(n):\n        gyms.append(list(map(int, input().split()))\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3960,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    f=0\n    for i in range(n-1):\n        f+=abs(a[i]-a[i+1])\n    print(f)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3961,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    p=list(map(int,input().split()))\n    count=0\n    for i in range(1,n+1):\n        if p[i-1]==i:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3962,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    l_r = [list(map(int, input().split())) for _ in range(n)]\n    l_r.sort(key=lambda x: x[1])\n    chairs = 0\n    for i in range(n):\n        chairs += l_r[i][1] + l_r[i][0]\n    return chairs\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3963,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    m = int(input())\n    mod = 10**9 + 7\n    dp = [0] * (m+1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(m, -1, -1, -1):\n            if j >= a[i]:\n                dp[j] = (dp[j] + dp[j//a[i]]) % mod\n    return dp[m]\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3964,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, b, mod = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    total_bugs = sum(a)\n    if total_bugs > m:\n        return 0\n    if total_bugs == m:\n        return 1\n    if total_bugs == 0:\n        return 1\n    if total_bugs == 1:\n        return 1\n    if total_bugs == 2:\n        return 1\n    if total_bugs == 3:\n        return 1\n    if total_bugs == 4:\n        return 1\n    if total_bugs == 5:\n        return 1\n    if total_bugs == 6:\n        return 1\n    if total_bugs == 7:\n        return 1\n    if total_bugs == 8:\n        return 1\n    if total_bugs == 9:\n        return 1\n    if total_bugs == 10:\n        return 1\n    if total_bugs == 11:\n        return 1\n    if total_bugs == 12:\n        return 1\n    if total_bugs == 13:\n        return 1\n    if total_bugs == 14:\n        return 1\n    if total_bugs == 15:\n        return 1\n    if total_bugs == 16:\n        return 1\n    if total_bugs == 17:\n        return 1\n    if total_bugs == 18:\n        return 1\n    if total_bugs == 19:\n        return 1\n    if total_bugs == 20:\n        return 1\n    if total_bugs == 21:\n        return 1\n    if total_bugs == 22:\n        return 1\n    if total_bugs == 23:\n        return 1\n    if total_bugs == 24:\n        return 1\n    if total_bugs == 25:\n        return 1\n    if total_bugs == 26:\n        return 1\n    if total_bugs == 2",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3965,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    pattern = list(map(int, input().split()))\n    text = input().split('\\n')\n    for i in range(n):\n        words = text[i].split()\n        syllables = 0\n        for word in words:\n            if any(char in 'aeiouy' for char in word):\n                syllables += len(word)\n        if syllables != pattern[i]:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3966,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = list(map(int, input().split()))\n    n = t[0]\n    a = t[1:]\n    score = 0\n    for i in range(n):\n        if len(a) == 1:\n            score += a[0]\n        else:\n            score += sum(a)\n            a = [sum(a)//2, sum(a)//2]\n    return score\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3967,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split())\n    d = 1\n    total_length = 0\n    while total_length < k:\n        for i in range(n):\n            a[i] += 1\n        total_length = sum(a)\n        d += 1\n    return d\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3968,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    d=int(input())\n    c=int(input())\n    infected=list(map(int,input().split()))\n    s=[]\n    t=[]\n    for i in range(n):\n        s.append(list(map(int,input().split()))\n        t.append(list(map(int,input().split())\n    #print(s,t)\n    #print(infected)\n    #print(len(s),len(t))\n    #print(c)\n    #print(n)\n    #print(d)\n    #print(infected)\n    #print(s[0],t[0])\n    #print(s[1],t[1])\n    #print(s[2],t[2])\n    #print(s[3],t[3])\n    #print(s[4],t[4])\n    #print(s[5],t[5])\n    #print(s[6],t[6])\n    #print(s[7],t[7])\n    #print(s[8],t[8])\n    #print(s[9],t[9])\n    #print(s[10],t[10])\n    #print(s[11],t[11])\n    #print(s[12],t[12])\n    #print(s[13],t[13])\n    #print(s[14],t[14])\n    #print(s[15],t[15])\n    #print(s[16],t[16])\n    #print(s[17],t[17])\n    #print(s[18],t[18])\n    #print(s[19],t[19])\n    #print(s[20],t[20])\n    #print(s[21],t[21])\n    #print(s[22],t[22])\n    #print(s[23],t[23])\n    #print(s[24],t[24])\n    #print(s[25],t[25])\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3969,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    plants = []\n    for i in range(n):\n        species, position = list(map(float, input().split()))\n        plants.append((species, position))\n    plants.sort(key=lambda x: x[1])\n    borders = [plants[0][1]]\n    for i in range(1, m):\n        borders.append(plants[i][1] + (borders[i-1] - plants[i][1]) / (m-1))\n    borders.sort()\n    replants = 0\n    for i in range(1, m):\n        for j in range(i):\n            if borders[i] < plants[i][1]:\n                replants += 1\n                break\n    return replants\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3970,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    arr=list(map(int,input().split())\n    max_size=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[j]%k==0 and arr[i]%k!=0:\n                max_size=max(max_size,j-i)\n    return max_size\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3971,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    for i in map(int, input().split()): s[i] += i\n    return max(s)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3972,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())-1;a,b,c,p=1,1,n+1,n\n    for i in range(1,n+1):\n        a,b,c=a*b%p,b*(b+1)%p,c*b%p\n    return (a-1)%10000000000007\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3973,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split())\n    x=0\n    count=0\n    for i in range(n):\n        if a[i]!=x:\n            count+=1\n            if a[i]<x:\n                count+=x-a[i]\n            elif a[i]>x:\n                count+=a[i]-x\n            x=a[i]\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3974,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    p = [0] + [1 if i == '+' else -1 for i in input()]\n    count = 0\n    for i in range(1, len(p)):\n        count += p[i] - p[i-1]\n    return abs(count)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3975,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    graph=[]\n    for i in range(n):\n        graph.append(input().split())\n    for i in range(n):\n        if graph[i][0]==\"IN\":\n            print(graph[i][1])\n        elif graph[i][0]==\"AND\":\n            print(int(graph[int(graph[i][1])-1][1]&int(graph[int(graph[i][2])-1][1]))\n        elif graph[i][0]==\"OR\":\n            print(int(graph[int(graph[i][1])-1][1]|graph[int(graph[i][2])-1][1]))\n        elif graph[i][0]==\"XOR\":\n            print(int(graph[int(graph[i][1])-1][1]^graph[int(graph[i][2])-1][1]))\n        elif graph[i][0]==\"NOT\":\n            print(1-int(graph[int(graph[i][1])-1][1]))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3976,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, p = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    qs = []\n    for i in range(n):\n        if a[i] == b[0]:\n            qs.append(i)\n        if a[i] + p == b[0]:\n            qs.append(i)\n    qs.sort()\n    print(len(qs))\n    print(*qs)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3977,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=list(map(int,input().split()))\n    c=list(map(int,input().split()))\n    edges=[]\n    for i in range(m):\n        edges.append(list(map(int,input().split()))\n    #print(edges)\n    #print(c)\n    #print(n,m,k)\n    #print(len(c))\n    #print(len(edges))\n    #print(len(edges[0]))\n    #print(edges[0][0])\n    #print(edges[0][1])\n    #print(edges[1][0])\n    #print(edges[1][1])\n    #print(edges[2][0])\n    #print(edges[2][1])\n    #print(edges[3][0])\n    #print(edges[3][1])\n    #print(edges[4][0])\n    #print(edges[4][1])\n    #print(edges[5][0])\n    #print(edges[5][1])\n    #print(edges[6][0])\n    #print(edges[6][1])\n    #print(edges[7][0])\n    #print(edges[7][1])\n    #print(edges[8][0])\n    #print(edges[8][1])\n    #print(edges[9][0])\n    #print(edges[9][1])\n    #print(edges[10][0])\n    #print(edges[10][1])\n    #print(edges[11][0])\n    #print(edges[11][1])\n    #print(edges[12][0])\n    #print(edges[12][1])\n    #print(edges[13][0])\n    #print(edges[13][1])\n    #print(edges[14][0])\n    #print(edges[14][1])\n    #print(edges[15][0])\n    #print(edges[15][1])\n    #print(edges[16][0])\n    #print",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3978,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input().split()))\n    colors = []\n    for i in range(N):\n        colors.append(set())\n    for i in range(N):\n        for j in range(N):\n            if i != j:\n                if A[i] % A[j] == 0:\n                    colors[i].add(A[j])\n    min_element = min(A)\n    count = 0\n    for i in range(N):\n        if min_element in colors[i]:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3979,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int, input().split())\n    words = []\n    for i in range(n):\n        words.append(list(map(int, input().split()))[1:])\n    #print(words)\n    #print(len(words))\n    #print(len(words[0]))\n    #print(len(words[1]))\n    #print(len(words[2]))\n    #print(len(words[3]))\n    #print(len(words[4]))\n    #print(len(words[5]))\n    #print(len(words[6]))\n    #print(len(words[7]))\n    #print(len(words[8]))\n    #print(len(words[9]))\n    #print(len(words[10])\n    #print(len(words[11])\n    #print(len(words[12])\n    #print(len(words[13])\n    #print(len(words[14])\n    #print(len(words[15])\n    #print(len(words[16])\n    #print(len(words[17])\n    #print(len(words[18])\n    #print(len(words[19])\n    #print(len(words[20])\n    #print(len(words[21])\n    #print(len(words[22])\n    #print(len(words[23])\n    #print(len(words[24])\n    #print(len(words[25])\n    #print(len(words[26])\n    #print(len(words[27])\n    #print(len(words[28])\n    #print(len(words[29])\n    #print(len(words[30])\n    #print(len(words[31])\n    #print(len(words[32])\n    #print(len(words[33])\n    #print(len(words[34])\n    #print(len(words[35])\n    #print(len(words[36])\n    #print(len(words[37])\n    #print(len(words[38])\n    #print(len",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3980,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = n = int(input()) + 1\n    max_beauty = 0\n    max_permutation = []\n    for i in range(s):\n        for j in range(s):\n            for k in range(s):\n                for l in range(s):\n                    beauty = (i ^ j ^ k ^ l)\n                    if beauty > max_beauty:\n                        max_beauty = beauty\n                        max_permutation = [i, j, k, l]\n    return max_beauty, max_permutation\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3981,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    engine1 = []\n    engine2 = []\n    \n    for i in range(n):\n        x, y = map(int, input().split())\n        engine1.append((x, y))\n        \n    for i in range(m):\n        x, y = map(int, input().split())\n        engine2.append((x, y)\n    \n    # Your code goes here\n    return \"YES\" if safe else \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3982,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    morse_code = []\n    for i in range(n):\n        morse_code.append(input())\n    result = [1]\n    for i in morse_code:\n        if i == \"0\":\n            result.append(result[-1]*2)\n        else:\n            result.append(result[-1]*3)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3983,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split());U=UnionFind(n)\n    for i in range(m):\n        a,b=map(int,input().split())\n        U.union(a-1,b-1)\n    return U.count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3984,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    n = len(s)\n    for i in range(n):\n        if s[i] < s[i+1]:\n            print(\"Mike\")\n        else:\n            print(\"Ann\")\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3985,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: map(int, input().split())\n    n, m = f()\n    a = list(f())\n    pairs = [f() for _ in range(m)]\n    pairs.sort(key=lambda x: x[0])\n    max_operations = 0\n    for i, j in pairs:\n        if a[i-1] % 2 == 0 and a[j-1] % 2 == 0:\n            max_operations += 1\n            a[i-1] //= 2\n            a[j-1] //= 2\n        elif a[i-1] % 2 == 1 and a[j-1] % 2 == 1:\n            max_operations += 1\n            a[i-1] //= 2\n            a[j-1] //= 2\n    return max_operations\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3986,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if k>n:\n        return -1\n    else:\n        string=[]\n        for i in range(k):\n            string.append(chr(97+i))\n        for i in range(k,n):\n            string.append(chr(97+i))\n        string.sort()\n        return ''.join(string)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3987,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    # reverse the sequence\n    a.reverse()\n    # find the longest non-decreasing subsequence\n    # return the length of the longest subsequence\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3988,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, s = map(int, input_string.split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        t, u, v = map(int, input().split())\n        if t == 1:\n            graph[u].append(v)\n            graph[v].append(u)\n        else:\n            graph[u].append(v)\n            graph[v].append(u)\n    \n    def dfs(node, visited, plan, visited_count):\n        visited[node] = True\n        visited_count[0] += 1\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                dfs(neighbor, visited, plan, visited_count)\n    \n    def count_reachable(plan):\n        visited = [False] * (n+1)\n        visited_count = [0]\n        dfs(s, visited, visited_count)\n        return visited_count[0]\n    \n    max_reachable = count_reachable(False)\n    min_reachable = count_reachable(True)\n    \n    max_plan = ['+'] * m\n    min_plan = ['-'] * m\n    \n    for i in range(m):\n        if graph[s].count(i+1) % 2 == 1:\n            max_plan[i] = '-'\n            min_plan[i] = '+'\n    \n    print(max_reachable)\n    print(''.join(max_plan))\n    print(min_reachable)\n    print(''.join(min_plan))\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3989,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = [int(d) for d in input()]\n    n.sort()\n    if 7 not in n:\n        return 0\n    else:\n        return int(''.join(str(d) for d in n)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3990,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: list(map(int, input().split()))\n    n, m = f()\n    railways = [f() for _ in range(m)]\n    # Do something here\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3991,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=list(map(int,input().split()))\n    mod=10**9+7\n    x.sort()\n    ans=0\n    for i in range(1,n):\n        for j in range(i):\n            ans+=abs(x[i]-x[j])\n    return ans%mod\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3992,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = 1\n    while n > 1 and k < 10**6:\n        k += 1\n        if all(a[i] % k == 0 for i in range(n)):\n            break\n    if k == 10**6:\n        return -1\n    else:\n        return (n-1) // (k-1)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3993,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split())\n    p=list(map(int,input().split())\n    p.sort()\n    pages=[]\n    for i in range(0,n,k):\n        pages.append(list(range(i+1,min(i+k,n+1)))\n    count=0\n    while any(1 in page for page in pages):\n        for i in range(len(pages)):\n            if 1 in pages[i]:\n                count+=1\n                pages[i]=[x-1 for x in pages[i] if x!=1]\n                for j in range(i+1,len(pages)):\n                    if 1 in pages[j]:\n                        pages[j]=[x-1 for x in pages[j] if x!=1]\n                        pages[j-1].append(1)\n                pages[i].remove(1)\n                pages[i].sort()\n                pages.sort()\n                break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3994,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    lights = input().strip()\n    params = []\n    for i in range(n):\n        params.append(list(map(int, input().split()))\n    max_on = 0\n    for i in range(n):\n        if lights[i] == '1':\n            max_on += 1\n        else:\n            for j in range(n):\n                if lights[j] == '1' and i != j:\n                    if params[i][1] % params[j][0] == 0:\n                        max_on += 1\n    return max_on\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3995,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if k==1:\n        return \"0\"*n\n    else:\n        return \"1\"*n\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3996,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    for q in map(int, input().split()): d, n = q & d, pow(n, q, m)\n    return (d, m - d)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3997,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n   = int(input())\n    a   = list(map(int, input().split()))\n    p   = [list(map(int, input().split())) for i in range(n-1)]\n    dp  = [0]*n\n    dp[0] = 1\n    for i in range(n-1):\n        dp[p[i][1]-1] += dp[p[i][0]-1]\n    for i in range(n):\n        print(dp[i], end=' ')\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3998,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    r = list(map(int, input().split()))\n    max_rating = max(r)\n    min_rating = min(r)\n    if max_rating == min_rating:\n        return \"\".join([\"0\"] * n)\n    else:\n        return \"\".join([\"1\"] * n)\n\n",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 3999,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, = map(int, input().split())\n    colors = [list(map(int, input().split()) for _ in range(N))\n    # Initialize the cube with the first tile\n    cube = [[colors[0]]]\n    for i in range(1, N):\n        # Check if the cube can be extended with the next tile\n        for j in range(len(cube)):\n            if cube[j][0] == colors[i][0] and cube[j][1] == colors[i][1] and cube[j][2] == colors[i][2]:\n                cube.append(cube[j])\n                break\n        else:\n            cube.append(colors[i])\n    # Check if the cube can be extended with the next tile\n    for j in range(len(cube)):\n        if cube[j][0] == colors[i][1] and cube[j][1] == colors[i][2] and cube[j][2] == colors[i][3]:\n            cube.append(cube[j])\n            break\n    else:\n        cube.append(colors[i])\n    # Check if the cube can be extended with the next tile\n    for j in range(len(cube)):\n        if cube[j][0] == colors[i][2] and cube[j][1] == colors[i][3] and cube[j][2] == colors[i][0]:\n            cube.append(cube[j])\n            break\n    else:\n        cube.append(colors[i])\n    # Check if the cube can be extended with the next tile\n    for j in range(len(cube)):\n        if cube[j][0] == colors[i][3] and cube[j][1] == colors[i][0] and cube[j][2] == colors[i][1]:\n            cube.append(cube[j])\n            break\n    else:\n        cube.append(colors[i])\n    # Check if the cube can be extended with the next tile\n    for j in range(len(cube)):\n        if cube[j][0] == colors[i][1] and cube[j][1] == colors[i][0] and cube[j][2] == colors[i][3",
        "generated_testcode": "",
        "difficulty": "competition"
    },
    {
        "number": 4000,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    edges = [tuple(map(int, input().split())) for _ in range(n-1)]\n    # Your code here\n    return 0, 0, 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4001,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    b=list(map(int,input_string.split()))\n    c=set(b)\n    x=max(c)\n    y=sum(c)\n    return x,y\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4002,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k = list(map(int,input().split(' ')))\n    a = []\n    for i in range(n):\n        a.append(list(map(int,input().split(' ')))\n    max_sum = 0\n    for i in range(n):\n        a[i].sort(reverse=True)\n        for j in range(1,m//2+1):\n            if sum(a[i][:j])%k == 0:\n                max_sum = max(max_sum,sum(a[i][:j]))\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4003,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left = []\n    right = []\n    for i in range(n):\n        left.append(a[i])\n        right.append(a[i])\n    left_max = [1] * n\n    right_max = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j]:\n                left_max[i] = max(left_max[i], left_max[j] + 1)\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                right_max[i] = max(right_max[i], right_max[j] + 1)\n    left_max.sort()\n    right_max.sort(reverse=True)\n    max_len = max(left_max[0], right_max[0])\n    if left_max[0] > right_max[0]:\n        result = ['L'] * max_len\n    else:\n        result = ['R'] * max_len\n    return max_len, ''.join(result)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4004,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        return -1\n    a.sort()\n    if a[0] == a[n-1]:\n        return 0\n    if a[0] > a[n-1]:\n        return -1\n    for i in range(1, n-1):\n        if a[i] > a[i-1] + a[i+1]:\n            return -1\n    return a[n-1] - a[0]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4005,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x1, y1, x2, y2 = map(int, input().split(' '))\n    x3, y3, x4, y4 = map(int, input().split(' '))\n    x5, y5, x6, y6 = map(int, input().split(' '))\n    \n    # Your code here\n    if x1 < x3 and x2 > x4 and y1 < y3 and y2 > y4 and x1 < x5 and x2 > x6 and y1 < y5 and y2 > y6:\n        return \"NO\"\n    elif x1 > x3 and x2 < x4 and y1 > y3 and y2 < y4 and x1 > x5 and x2 < x6 and y1 > y5 and y2 < y6:\n        return \"NO\"\n    elif x1 < x3 and x2 > x4 and y1 > y3 and y2 < y4 and x1 > x5 and x2 < x6 and y1 < y5 and y2 > y6:\n        return \"NO\"\n    elif x1 > x3 and x2 < x4 and y1 < y3 and y2 > y4 and x1 < x5 and x2 > x6 and y1 > y5 and y2 < y6:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4006,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    count = 0\n    for i in range(1, n+1):\n        temp = str(i)\n        while '0' in temp:\n            temp = str(int(temp) + 1)\n            while '0' in temp:\n                temp = str(int(temp) + 1)\n        count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4007,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q=int(input())\n    n=list(map(int,input().split()))\n    for i in range(q):\n        if n[i]==0:\n            n[i]=i+1\n    print(n)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4008,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    colors = [0] * n\n    for i in range(1, k+1):\n        if i not in a:\n            return \"NO\"\n        colors[a.index(i)] = i\n    for i in range(k+1, n+1):\n        colors[a.index(i)] = i\n    return \" \".join(map(str, colors))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4009,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x, y = map(int, input().split())\n    num = input().strip()\n    # Convert the input string to a list of integers\n    num_list = list(map(int, num))\n    # Initialize the number of operations to 0\n    operations = 0\n    # Iterate through the list of integers\n    for i in range(x):\n        # If the digit is 0, change it to 1\n        if num_list[i] == 0:\n            num_list[i] = 1\n            operations += 1\n    # Convert the list of integers back to a string\n    num_str = ''.join(map(str, num_list))\n    # Convert the string to an integer\n    num_int = int(num_str, 2)\n    # Calculate the remainder of the number\n    remainder = num_int % (10**x)\n    # Calculate the difference between the remainder and 10^y\n    diff = remainder - (10**y)\n    # If the difference is negative, add 10^x to the number\n    if diff < 0:\n        diff += 10**x\n    # Return the number of operations\n    return operations + diff\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4010,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    for i in range(n):\n        if a[i]==a[n-i-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4011,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = input()\n    f = list(map(int, input().split()))\n    max_num = 0\n    for i in range(n):\n        if a[i] == '1':\n            max_num += f[0] * 10**(n-1-i)\n        elif a[i] == '2':\n            max_num += f[1] * 10**(n-1-i)\n        elif a[i] == '3':\n            max_num += f[2] * 10**(n-1-i)\n        elif a[i] == '4':\n            max_num += f[3] * 10**(n-1-i)\n        elif a[i] == '5':\n            max_num += f[4] * 10**(n-1-i)\n        elif a[i] == '6':\n            max_num += f[5] * 10**(n-1-i)\n        elif a[i] == '7':\n            max_num += f[6] * 10**(n-1-i)\n        elif a[i] == '8':\n            max_num += f[7] * 10**(n-1-i)\n        elif a[i] == '9':\n            max_num += f[8] * 10**(n-1-i)\n    return max_num\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4012,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c = list(map(int, input().split()))\n    if a > b:\n        a, b = b, a\n    if b > c:\n        b, c = c, b\n    if a == 1:\n        return 0, 1, 1\n    if b == 1:\n        return 0, 1, 1\n    if c == 1:\n        return 0, 1, 1\n    if a == b:\n        return 0, a, b\n    if b == c:\n        return 0, b, c\n    if a == 2:\n        return 1, 2, 2\n    if b == 2:\n        return 1, 2, 2\n    if c == 2:\n        return 1, 2, 2\n    if a == 3:\n        return 1, 3, 3\n    if b == 3:\n        return 1, 3, 3\n    if c == 3:\n        return 1, 3, 3\n    if a == 4:\n        return 1, 4, 4\n    if b == 4:\n        return 1, 4, 4\n    if c == 4:\n        return 1, 4, 4\n    if a == 5:\n        return 1, 5, 5\n    if b == 5:\n        return 1, 5, 5\n    if c == 5:\n        return 1, 5, 5\n    if a == 6:\n        return 1, 6, 6\n    if b == 6:\n        return 1, 6, 6\n    if c == 6:\n        return 1, 6, 6\n    if a == 7:\n        return 1, 7, 7\n    if b == 7:\n        return 1, 7, 7\n    if c == 7:\n        return 1, 7, 7\n    if a == 8:\n        return 1, 8, 8\n    if b == 8:\n        return 1, 8, 8\n    if c == 8:\n        return 1",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4013,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    min_val=a[0]\n    max_val=a[n-1]\n    min_instability=max_val-min_val\n    for i in range(1,n):\n        if a[i]-min_val>min_instability:\n            min_instability=a[i]-min_val\n    return min_instability\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4014,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    rd = lambda: list(map(int, input().split()))\n    n, m = rd()\n    exams = [rd() for _ in range(m)]\n    days = [0] * n\n    for s, d, c in exams:\n        for i in range(s, d-1):\n            days[i] += 1\n    for i in range(m):\n        days[exams[i][0]-1] = exams[i][2]\n    result = []\n    for i in range(n):\n        if days[i] == 0:\n            result.append(0)\n        else:\n            result.append(i+1)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4015,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    if m % 2 == 0:\n        if n % 2 == 0:\n            count = 0\n            while n != m:\n                if n % 2 == 0:\n                    n //= 2\n                    count += 1\n                else:\n                    return -1\n            return count\n        else:\n            count = 0\n            while n != m:\n                if n % 3 == 0:\n                    n //= 3\n                    count += 1\n                else:\n                    return -1\n            return count\n    else:\n        if n % 3 == 0:\n            count = 0\n            while n != m:\n                if n % 2 == 0:\n                    n //= 2\n                    count += 1\n                else:\n                    return -1\n            return count\n        else:\n            count = 0\n            while n != m:\n                if n % 2 == 0:\n                    n //= 2\n                    count += 1\n                else:\n                    n *= 3\n                    count += 1\n            return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4016,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int,input().split()))\n    t = input().strip()\n    s = t * (k+1)\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4017,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    good_indices = []\n    for i in range(n):\n        if sum(a) - a[i] == a[i]:\n            good_indices.append(i+1)\n    if len(good_indices) == 0:\n        print(0)\n    else:\n        print(len(good_indices))\n        print(*good_indices)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4018,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    s = input()\n    if k > len(s):\n        return -1\n    if k == 1:\n        return 0\n    if k == len(s):\n        return 0\n    if k == 0:\n        return 0\n    if k == 2:\n        return n\n    if k == 3:\n        return n-1\n    if k == 4:\n        return n-2\n    if k == 5:\n        return n-3\n    if k == 6:\n        return n-4\n    if k == 7:\n        return n-5\n    if k == 8:\n        return n-6\n    if k == 9:\n        return n-7\n    if k == 10:\n        return n-8\n    if k == 11:\n        return n-9\n    if k == 1100:\n        return n-10\n    if k == 111:\n        return n-11\n    if k == 12:\n        return n-12\n    if k == 13:\n        return n-13\n    if k == 14:\n        return n-14\n    if k == 15:\n        return n-15\n    if k == 16:\n        return n-16\n    if k == 17:\n        return n-17\n    if k == 18:\n        return n-18\n    if k == 19:\n        return n-19\n    if k == 20:\n        return n-20\n    if k == 21:\n        return n-21\n    if k == 22:\n        return n-22\n    if k == 23:\n        return n-23\n    if k == 24:\n        return n-24\n    if k == 25:\n        return n-25\n    if k == 26:\n        return n-26\n    if k == 27:\n        return n-27\n    if k == 28:\n        return n-28\n    if k == 2",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4019,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    [n, m, d] = list(map(int, input().split()))\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, input().split()))\n    # Your code goes here\n    return output\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4020,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split(':'))\n    c,d=map(int,input().split(':'))\n    mid_minute=int((a*60+b+c*60+d)/2)\n    mid_hour=int(mid_minute/60)\n    mid_minute=mid_minute%60\n    if mid_minute<10:\n        print(str(mid_hour)+\":0\"+str(mid_minute))\n    else:\n        print(str(mid_hour)+\":\"+str(mid_minute))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4021,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=int(input())\n    if x<=64:\n        return 1\n    else:\n        count=0\n        while x>1:\n            x=x//2\n            count+=1\n        return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4022,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    segments=[]\n    for i in range(N):\n        l,r=map(int,input().split())\n        segments.append([l,r])\n    segments.sort()\n    max_length=0\n    for i in range(N):\n        for j in range(i+1,N):\n            if segments[i][1]<=segments[j][0]:\n                break\n            else:\n                max_length=max(max_length,segments[i][1]-segments[j][0])\n    return max_length\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4023,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if n==1:\n        return \"YES\"\n    if n==2:\n        if a[0]==a[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n==3:\n        if a[0]==a[1] and a[1]==a[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n==4:\n        if a[0]==a[1] and a[1]==a[2] and a[2]==a[3]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n==5:\n        if a[0]==a[1] and a[1]==a[2] and a[2]==a[3] and a[3]==a[4]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n==6:\n        if a[0]==a[1] and a[1]==a[2] and a[2]==a[3] and a[3]==a[4] and a[4]==a[5]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n==7:\n        if a[0]==a[1] and a[1]==a[2] and a[2]==a[3] and a[3]==a[4] and a[4]==a[5] and a[5]==a[6]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n==8:\n        if a[0]==a[1] and a[1]==a[2] and a[2]==a[3] and a[3]==a[4] and a[4]==a[5] and a[5]==a[6] and a[6]==a[7]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n==9:\n        if a[0]==a[1] and a[1]==a[2] and a[",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4024,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    s=input()\n    if k>len(s):\n        return -1\n    if k==len(s):\n        return 0\n    if k==1:\n        return n\n    if k==0:\n        return 0\n    if k==2:\n        return n-1\n    if k==3:\n        return n-2\n    if k==4:\n        return n-3\n    if k==5:\n        return n-4\n    if k==6:\n        return n-5\n    if k==7:\n        return n-6\n    if k==8:\n        return n-7\n    if k==9:\n        return n-8\n    if k==10:\n        return n-9\n    if k==11:\n        return n-10\n    if k==12:\n        return n-11\n    if k==13:\n        return n-11\n    if k==14:\n        return n-12\n    if k==15:\n        return n-13\n    if k==16:\n        return n-14\n    if k==17:\n        return n-15\n    if k==18:\n        return n-16\n    if k==19:\n        return n-17\n    if k==20:\n        return n-18\n    if k==21:\n        return n-19\n    if k==22:\n        return n-20\n    if k==23:\n        return n-21\n    if k==24:\n        return n-22\n    if k==25:\n        return n-23\n    if k==26:\n        return n-24\n    if k==27:\n        return n-25\n    if k==28:\n        return n-26\n    if k==29:\n        return n-27\n    if k==30:\n        return n-28\n    if k==31:\n        return n-29\n    if k==32:\n        return n-30\n    if k==33:\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4025,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(map(int, input().split()))\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4026,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    tiles=[]\n    for i in range(n):\n        tiles.append([list(map(int,input().split())])]\n        tiles.append([list(map(int,input().split())])\n    for i in range(n):\n        for j in range(n):\n            if tiles[i][j][0]!=tiles[j][i][1] or tiles[i][j][1]!=tiles[j][i][0]:\n                return \"NO\"\n    for i in range(m):\n        for j in range(m):\n            if tiles[i][j][0]!=tiles[j][i][1] or tiles[i][j][1]!=tiles[i][j][0]:\n                return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4027,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n%2==0:\n        return 0\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4028,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(2**n):\n        binary=bin(i)[2:].zfill(n)\n        if '1'*n in binary:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4029,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()[::-1]\n    count=0\n    for i in range(len(s)-1):\n        if s[i]=='0' and s[i+1]=='0':\n            return -1\n        if s[i]=='0' and s[i+1]!='0':\n            s[i],s[i+1]=s[i+1],s[i]\n            count+=1\n        elif s[i]!='0' and s[i+1]=='0':\n            s[i],s[i+1]=s[i+1],s[i]\n            count+=1\n    if s[-1]=='0':\n        return -1\n    if int(s)%25==0:\n        return count\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4030,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    res=1\n    c=[]\n    for i in range(n):\n        c.append(1)\n    for i in range(1,n):\n        if s[i]<s[i-1]:\n            res+=1\n            for j in range(i,0,-1):\n                if s[j]>s[j-1]:\n                    c[j],c[j-1]=c[j-1],c[j]\n                else:\n                    break\n    print(res)\n    print(\" \".join(map(str,c))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4031,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    strings = []\n    for i in range(N):\n        strings.append(input())\n    for i in range(N):\n        for j in range(i+1, N):\n            if not any(strings[j] in strings[i] for j in range(i+1, N)):\n                return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(strings)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4032,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    problems = list(map(int, input().split()))\n    left_problems = []\n    right_problems = []\n    for problem in problems:\n        if problem <= k:\n            left_problems.append(problem)\n        else:\n            right_problems.append(problem)\n    if not left_problems and not right_problems:\n        return 0\n    elif not left_problems:\n        return len(right_problems)\n    elif not right_problems:\n        return len(left_problems)\n    else:\n        return min(len(left_problems), len(right_problems))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4033,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b = [int(x) for x in input().split()]\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4034,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    colors = [0] * n\n    for i in range(n):\n        if i == 0:\n            colors[i] = 0\n        elif s[i] < s[i-1]:\n            colors[i] = 1\n        else:\n            colors[i] = 0\n    print(\"YES\")\n    print(\"\".join(map(str, colors))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4035,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B=map(int,input().split())\n    for i in range(A,B+1):\n        if i*(1-0.08)==int(i*(1-0.08):\n            return i\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4036,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if n%k==0:\n        print(\"YES\")\n        for i in range(k):\n            print(n//k,end=\" \")\n    else:\n        print(\"NO\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4037,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,r=list(map(int,input().split()))\n    a=[]\n    b=[]\n    for i in range(n):\n        a.append(list(map(int,input().split()))[0])\n        b.append(list(map(int,input().split()))[1])\n    a.sort()\n    b.sort()\n    max_size=0\n    for i in range(n):\n        if r>=a[i]:\n            r+=b[i]\n            max_size+=1\n    print(max_size)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4038,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    input_list=list(map(int,input_string.split()))\n    matrix=[]\n    for i in range(n):\n        matrix.append(input_list[i*n:(i+1)*n])\n    print(matrix)\n    return matrix\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4039,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, r = list(map(int, input().split()))\n    a = []\n    b = []\n    for i in range(n):\n        a.append(int(input()))\n        b.append(int(input()))\n    a.sort()\n    b.sort()\n    for i in range(n):\n        if r < a[i]:\n            return \"NO\"\n        r += b[i]\n        if r < 0:\n            return \"NO\"\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4040,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, d = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    c.sort(reverse=True)\n    platforms = [0] * (n + 2)\n    for i in range(m):\n        platforms[n - c[i] + 1] = i + 1\n    platforms[0] = platforms[n + 1] = 0\n    result = [0] * n\n    for i in range(n):\n        if platforms[i] != 0:\n            result[i] = platforms[i]\n    print(\" \".join(map(str, result))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4041,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    t = input()\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    i = 0\n    j = 0\n    max_len = 0\n    while i < len(s_list) and j < len(t_list):\n        if s_list[i] == t_list[j]:\n            i += 1\n            j += 1\n        else:\n            max_len += 1\n            i += 1\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4042,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r=float(input())\n    if r<=1:\n        print(1,1)\n    elif r<=2:\n        print(2,1)\n    elif r<=3:\n        print(3,1)\n    elif r<=4:\n        print(4,2)\n    elif r<=5:\n        print(5,2)\n    elif r<=6:\n        print(6,3)\n    elif r<=7:\n        print(7,3)\n    elif r<=8:\n        print(8,4)\n    elif r<=9:\n        print(9,4)\n    else:\n        print(10,5)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4043,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,d,k=map(int,input().split())\n    if n<2 or d<1 or k<1:\n        return \"NO\"\n    if n==2:\n        return \"YES\\n1 2\"\n    if k==1:\n        return \"YES\\n1 2\"\n    if k==2:\n        if d==1:\n            return \"YES\\n1 2\"\n        else:\n            return \"NO\"\n    if k==3:\n        if d==2:\n            return \"YES\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\"\n        else:\n            return \"NO\"\n    if k==4:\n        if d==3:\n            return \"YES\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\"\n        else:\n            return \"NO\"\n    if k==5:\n        if d==4:\n            return \"YES\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n1 10\"\n        else:\n            return \"NO\"\n    if k==6:\n        if d==5:\n            return \"YES\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n1 10\"\n        else:\n            return \"NO\"\n    if k==7:\n        if d==6:\n            return \"YES\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n1 10\"\n        else:\n            return \"NO\"\n    if k==8:\n        if d==7:\n            return \"YES\\n1 2\\n2 3\\n3 4\\",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4044,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,x=list(map(int,input().split()))\n    s=[]\n    for i in range(a):\n        s.append('0')\n    for i in range(b):\n        s.append('1')\n    for i in range(x):\n        s.insert(i,'0')\n        s.insert(i+1,'1')\n    return ''.join(s)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4045,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    t = input()\n    if n == 0:\n        return \"NO\"\n    if n == 1:\n        return \"YES\" + \"\\n\" + \"abc\"\n    if n == 2:\n        return \"YES\" + \"\\n\" + \"acb\"\n    if n == 3:\n        return \"YES\" + \"\\n\" + \"cab\"\n    if n == 4:\n        return \"YES\" + \"\\n\" + \"cba\"\n    if n == 5:\n        return \"YES\" + \"\\n\" + \"bac\"\n    if n == 6:\n        return \"YES\" + \"\\n\" + \"bca\"\n    if n == 7:\n        return \"YES\" + \"\\n\" + \"acb\"\n    if n == 8:\n        return \"YES\" + \"\\n\" + \"cab\"\n    if n == 9:\n        return \"YES\" + \"\\n\" + \"bac\"\n    if n == 10:\n        return \"YES\" + \"\\n\" + \"cba\"\n    if n == 11:\n        return \"YES\" + \"\\n\" + \"abc\"\n    if n == 12:\n        return \"YES\" + \"\\n\" + \"acb\"\n    if n == 13:\n        return \"YES\" + \"\\n\" + \"cab\"\n    if n == 14:\n        return \"YES\" + \"\\n\" + \"bac\"\n    if n == 15:\n        return \"YES\" + \"\\n\" + \"cba\"\n    if n == 16:\n        return \"YES\" + \"\\n\" + \"acb\"\n    if n == 17:\n        return \"YES\" + \"\\n\" + \"cab\"\n    if n == 18:\n        return \"YES\" + \"\\n\" + \"bac\"\n    if n == 19:\n        return \"YES\" + \"\\n\" + \"cba\"\n    if n == 20:\n        return \"YES\" + \"\\n\" + \"abc\"\n    if n == 21:\n        return \"YES\" + \"\\n\" +",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4046,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    q = list(map(int, input().split()))\n    if n == 2:\n        if q[0] == 0:\n            return -1\n        else:\n            return 1, 2\n    elif n == 3:\n        if q[0] == 0:\n            return -1\n        else:\n            return 1, 2, 3\n    else:\n        if q[0] == 0:\n            return -1\n        else:\n            return 1, 2, 3, 4\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4047,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    x = list(map(int, input().split()))\n    min_coins = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(x[i] - x[j]) % 2 == 0:\n                min_coins += abs(x[i] - x[j]) // 2\n            else:\n                min_coins += abs(x[i] - x[j]) // 2 + 1\n    return min_coins\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4048,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    i = 1\n    j = 1\n    count = 0\n    while i*j < N:\n        if i*j < N:\n            if i < j:\n                i += 1\n            else:\n                j += 1\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4049,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    b=list(map(int,input().split()))\n    c=list(map(int,input().split()))\n    d=[]\n    for i in range(a):\n        d.append(\"rock\")\n    for i in range(c[1]):\n        d.append(\"scissors\")\n    for i in range(c[2]):\n        d.append(\"paper\")\n    e=[]\n    for i in range(b[0]):\n        e.append(\"rock\")\n    for i in range(b[1]):\n        e.append(\"scissors\")\n    for i in range(b[2]):\n        e.append(\"paper\")\n    count=0\n    for i in range(a):\n        if d[i]==e[i]:\n            count+=1\n    if count==a:\n        print(0,0)\n    else:\n        count1=0\n        count2=0\n        for i in range(a):\n            if d[i]==e[i]:\n                count1+=1\n            else:\n                count2+=1\n        print(count1,count2)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4050,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4051,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    # your code goes here\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4052,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    t = input()\n    if n == 1:\n        return 0, []\n    if s == t:\n        return 0, []\n    if len(set(s)) == 1:\n        return 0, []\n    if len(set(s)) == 2 and len(set(t)) == 2:\n        return 0, []\n    if len(set(s)) == 1 and len(set(t)) == 1:\n        return 0, []\n    if len(set(s)) == 2 and len(set(t)) == 1:\n        return 0, []\n    if len(set(s)) == 1 and len(set(t)) == 2:\n        return 0, []\n    if len(set(s)) == 2 and len(set(t)) == 2:\n        return 0, []\n    if len(set(s)) == 1 and len(set(t)) == 1:\n        return 0, []\n    if len(set(s)) == 2 and len(set(t)) == 2:\n        return 0, []\n    if len(set(s)) == 1 and len(set(t)) == 1:\n        return 0, []\n    if len(set(s)) == 2 and len(set(t)) == 2:\n        return 0, []\n    if len(set(s)) == 1 and len(set(t)) == 1:\n        return 0, []\n    if len(set(s)) == 2 and len(set(t)) == 2:\n        return 0, []\n    if len(set(s)) == 1 and len(set(t)) == 1:\n        return 0, []\n    if len(set(s)) == 2 and len(set(t)) == 2:\n        return 0, []\n    if len(set(s)) == 1 and len(set(t)) == 1:\n        return 0, []\n    if len(set(s)) == 2 and len(set(t)) == 2:\n        return 0, []\n    if",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4053,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    prefixes = []\n    suffixes = []\n    for i in range(2*n-2):\n        s = input()\n        if i < n-1:\n            prefixes.append(s)\n        else:\n            suffixes.append(s)\n    result = ['P'] * (n-1)\n    for p in prefixes:\n        if p in suffixes:\n            result[len(p)-1] = 'S'\n    for s in suffixes:\n        if s in prefixes:\n            result[-len(s)] = 'S'\n    return ''.join(result)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4055,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        k = 0\n        for i in range(1, n-1):\n            if a[i-1] == a[i+1] == 1 and a[i] == 0:\n                k += 1\n        print(k)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4056,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(1, max(a)+1):\n        flag = True\n        for j in a:\n            if j % i != 0:\n                flag = False\n                break\n        if flag:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4057,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        a=list(map(int,input().split()))\n        a.sort()\n        count=1\n        j=0\n        while j<n-1:\n            if a[j]!=a[j+1]:\n                count+=1\n            j+=1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4058,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,r = map(int,input().split())\n    a = list(map(int,input().split()))\n    heaters = []\n    for i in range(n):\n        if a[i] == 1:\n            heaters.append(i)\n    if len(heaters) == 0:\n        return -1\n    heaters.sort()\n    left = 0\n    right = 0\n    count = 0\n    while right < len(heaters):\n        if heaters[right] - heaters[left] <= 2*r:\n            right += 1\n        else:\n            count += 1\n            left += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4059,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input());print(sum(~-N//i for i in range(1,-~N)))\n    #return sum(~-N//i for i in range(1,-~N))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4060,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(n):\n        if s[i]=='(':\n            if i==0 or s[i-1]==')':\n                count+=1\n            elif s[i-1]=='(':\n                count+=2\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4061,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    t = input()\n    s_list = list(s)\n    t_list = list(t)\n    s_list.sort()\n    t_list.sort()\n    i = 0\n    j = 0\n    max_len = 0\n    while i < len(s_list) and j < len(t_list):\n        if s_list[i] == t_list[j]:\n            i += 1\n            j += 1\n        else:\n            max_len += 1\n            i += 1\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4062,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=map(int,input().split());print(max(a*c,a*d,b*c,b*d))\n    # Write your code here\n    # a,b,c,d=map(int,input().split())\n    # print(max(a*c,a*d,b*c,b*d)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4063,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    d=list(map(int,input_string.split()))\n    d.sort()\n    count=0\n    for i in range(n):\n        if d[i]>=5:\n            count+=1\n    for i in range(n):\n        if d[i]<5:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4064,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,h,l,r = map(int, input().split())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        if a[i] >= l and a[i] <= r:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4065,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    dp=[[0 for i in range(n+1)] for j in range(n+1)]\n    for i in range(n):\n        for j in range(n):\n            if i==0:\n                dp[i][j]=1\n            elif j==0:\n                dp[i][j]=1\n            elif a[j]<=2*a[i-1]:\n                dp[i][j]=dp[i-1][j-1]+1\n            else:\n                dp[i][j]=dp[i-1][j]\n    return max(dp[n-1])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4066,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    lcm = 1\n    min_lcm = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            lcm = lcm(a[i], a[j])\n            if lcm < min_lcm:\n                min_lcm = lcm\n                min_i, min_j = i, j\n    return min_i, min_j\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4067,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    count0 = s.count('0')\n    count1 = s.count('1')\n    count2 = s.count('2')\n    if count0 == count1 and count1 == count2:\n        return s\n    elif count0 > count1:\n        s = s.replace('0', '2', count0 - count1)\n        s = s.replace('1', '0', count1)\n        s = s.replace('2', '1')\n    elif count1 > count0:\n        s = s.replace('0', '1', count0)\n        s = s.replace('1', '2', count1 - count0)\n        s = s.replace('2', '0')\n    else:\n        s = s.replace('0', '2', count0)\n        s = s.replace('1', '0', count1 - count0)\n        s = s.replace('2', '1')\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4068,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split())\n    a.sort()\n    count=0\n    for i in range(n-1):\n        if i<m:\n            if i==a[i]:\n                count+=1\n            else:\n                count+=2\n        else:\n            count+=1\n    return count%1000000007\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4069,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X,K,D=map(int,input().split());X=abs(X)-K%2*D;E=D*2;print(max(min(X%E,-X%E),X-D*(K-K%2)))\n    # print(X,K,D)\n    # print(max(min(X%E,-X%E),X-D*(K-K%2))\ninput_string = \"6 2 4\"\nsolution(input_string)\n# Test your code with the sample input\n# Output: 2\n# Explanation:\n# The minimum possible absolute value of the coordinate of the destination is 2.\n# To get there, we can make the following moves:\n# - Move from coordinate 6 to (6 - 4 =) 2.\n# - Move from coordinate 2 to (-2 - 4 =) -6.\n# - Move from coordinate -6 to (-6 + 4 =) -2.\n# - Move from coordinate -2 to (2 + 4 =) 6.\n# - Move from coordinate 6 to (6 - 4 =) 2.\n# The absolute value of the coordinate of the destination is 2, which is the minimum possible. ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4070,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        count=0\n        for i in range(2,n+1):\n            if n%i==0:\n                count+=1\n        return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4071,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    b = int(input())\n    return 2 ** b\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4072,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n%2==0:\n        return 0\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4073,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=list(map(int,input().split()))\n    n=len(a)\n    max_sum=0\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                for l in range(k+1,n):\n                    for m in range(l+1,n):\n                        max_sum=max(max_sum,a[i]+a[j]+a[k]+a[l])\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4074,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    # write your code here\n    if n == 1:\n        return 1\n    for i in range(1, k+1):\n        if n % i == 0:\n            return i\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4075,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().split()]\n    k = [int(x) for x in input().split()]\n    s = [list(map(int, input().split())) for _ in range(n)]\n    p = [int(x) for x in input().split()]\n    # Write your code here\n    count = 0\n    for i in range(m):\n        count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4076,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B,H,M=map(int,input().split());print(abs(rect(A,pi*(H+M/60)/6)-rect(B,pi*M/30)))\n    # function to calculate the area of a rectangle\ndef rect(a,b):\n    return a*b\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4077,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sorted(a[i:j+1])[n//2] == x:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4078,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    segments=[]\n    for i in range(m):\n        segments.append(list(map(int,input().split()))\n    segments.sort(key=lambda x:x[1])\n    max_diff=0\n    max_diff_index=[]\n    for i in range(m):\n        l,r=segments[i]\n        if l==r:\n            continue\n        a[l-1]-=1\n        a[r]-=1\n        diff=max(a)-min(a)\n        if diff>max_diff:\n            max_diff=diff\n            max_diff_index=[]\n        if diff==max_diff:\n            max_diff_index.append(i+1)\n    print(max_diff)\n    print(len(max_diff_index))\n    print(*max_diff_index)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4079,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    for i in range(n):\n        string = input()\n        if len(set(string)) == len(string) and len(string) == len(set(string)):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4080,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    segments = []\n    for _ in range(m):\n        segments.append(list(map(int, input().split()))\n    # Your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4081,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left = []\n    right = []\n    for i in range(n):\n        left.append(a[i])\n        right.append(a[i])\n    left_max = len(left)\n    right_max = len(right)\n    left_seq = []\n    right_seq = []\n    for i in range(n):\n        if left[0] < right[-1]:\n            left_seq.append('L')\n            left.pop(0)\n        else:\n            right_seq.append('R')\n            right.pop()\n        left_max = max(left_max, len(left))\n        right_max = max(right_max, len(right))\n    if left_max > right_max:\n        print(left_max)\n        print(''.join(left_seq))\n    else:\n        print(right_max)\n        print(''.join(right_seq))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4082,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if n==2:\n        return 2\n    else:\n        max_len=1\n        for i in range(n-1):\n            if a[i]<a[i+1]:\n                max_len+=1\n            else:\n                continue\n        return max_len\n    if n==1:\n        return 1\n    else:\n        max_len=1\n        for i in range(n-1):\n            if a[i]<a[i+1]:\n                max_len+=1\n            else:\n                continue\n        return max_len\n    if n==1:\n        return 1\n    else:\n        max_len=1\n        for i in range(n-1):\n            if a[i]<a[i+1]:\n                max_len+=1\n            else:\n                continue\n        return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4083,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I = lambda:list(map(int,input().split()))\n    n,k = I()\n    a = I()\n    count = 0\n    for i in a:\n        if i%2 == 0:\n            count += 1\n    if count >= k:\n        return 0\n    else:\n        return 1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4084,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,b,c=map(int,input().split());c+=b;print(n//c*b+min(b,n%c))\n    # Take input from the user\n    #n, b, c = map(int, input().split())\n    # Calculate the number of blue balls\n    # and print the result\n    #return (n//c)*b + min(b, n%c)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4085,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    divisors=list(map(int,input().split()))\n    if n==1:\n        return -1\n    else:\n        x=1\n        for i in range(2,int(divisors[0])+1):\n            if i not in divisors:\n                x*=i\n        return x\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4086,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input_string.split()))\n    a=list(set(a))\n    a.sort(reverse=True)\n    print(len(a))\n    for i in a:\n        print(i,end=\" \")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4087,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = int(input())\n    sum_of_digits = sum(int(digit) for digit in str(a))\n    if sum_of_digits % 3 == 0:\n        return a\n    else:\n        while True:\n            a += 1\n            sum_of_digits = sum(int(digit) for digit in str(a))\n            if sum_of_digits % 4 == 0:\n                return a\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4088,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        s = input()\n        m = int(input())\n        b = list(map(int, input().split()))\n        # your code here\n        print(\"\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4089,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input()); s='';\n    while n>0:\n        if n<=26:\n            s+=chr(ord('a')+n-1)\n            break\n        elif n<=701:\n            s+=chr(ord('a')+(n-1)//26-1)\n            n=n%26\n        elif n<=18277:\n            s+=chr(ord('a')+(n-1)//700-1)\n            n=(n-1)%700\n        elif n<=475253:\n            s+=chr(ord('a')+(n-1)//1827-1)\n            n=(n-1)%1827\n        elif n<=1000000000000000:\n            s+=chr(ord('a')+(n-1)//47525-1)\n            n=(n-1)%47525\n        else:\n            s+='a'*(n-1000000000000000)\n    return s[::-1]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4090,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    words = input().split()\n    # print(words)\n    # print(len(words))\n    # print(len(input_string))\n    # print(input_string)\n    # print(len(input_string.split()))\n    # print(input_string.split())\n    # print(len(words))\n    # print(words)\n    # print(len(words[0]))\n    # print(len(words[1]))\n    # print(len(words[2]))\n    # print(len(words[3]))\n    # print(len(words[4]))\n    # print(len(words[5]))\n    # print(len(words[6]))\n    # print(len(words[7]))\n    # print(len(words[8]))\n    # print(len(words[9]))\n    # print(len(words[10]))\n    # print(len(words[11]))\n    # print(len(words[12]))\n    # print(len(words[13]))\n    # print(len(words[14]))\n    # print(len(words[15]))\n    # print(len(words[16]))\n    # print(len(words[17]))\n    # print(len(words[18]))\n    # print(len(words[19]))\n    # print(len(words[20]))\n    # print(len(words[21]))\n    # print(len(words[22]))\n    # print(len(words[23]))\n    # print(len(words[24]))\n    # print(len(words[25]))\n    # print(len(words[26]))\n    # print(len(words[27]))\n    # print(len(words[28]))\n    # print(len(words[29]))\n    # print(len(words[30]))\n    # print(len(words[31]))\n    # print(len(words[32]))\n    # print(len(words[33]))\n    # print(len(words[34]))\n    # print(len(words[35]))\n    # print(len(words",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4091,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    # write your code here\n    return 0, [0] * k\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4092,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    count=0\n    for i in range(n-1):\n        if a[i]==0:\n            count+=1\n        else:\n            if a[i+1]==0:\n                count+=1\n            else:\n                if a[i]*a[i+1]<0:\n                    count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4093,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    if n==1:\n        return 0\n    else:\n        return m//2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4094,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    K=int(input())\n    count=0\n    for i in range(1,10000000000):\n        if i%K==0:\n            count+=1\n            if count%77==0:\n                print(count)\n                break\n    else:\n        print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4095,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().split()]\n    p = [int(x) for x in input().split()]\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sorted(p[i:j+1])[n//2] == m:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4096,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    days = 1\n    total_pages = 0\n    for i in range(n):\n        total_pages += max(0, a[i] - i)\n        if total_pages >= m:\n            return days\n        days += 1\n    return -1 if total_pages < m else days\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4097,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    b=list(map(int,input().split()))\n    if n<=2:\n        return 0\n    a=b[0]\n    count=0\n    for i in range(1,n):\n        if b[i]-b[i-1]!=b[i-1]-a:\n            count+=1\n            a=b[i]\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4098,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    a.sort()\n    max_students=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if abs(a[i]-a[j])<=5:\n                max_students+=1\n    return max_students\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4099,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,m=map(int,input().split());a=n*m-sum(map(int,input().split()))\n    if a<0:\n        return -1\n    else:\n        return a\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4100,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,q=map(int,input().split());n=[k-q for _ in range(n)]\n    for _ in range(q):\n        a=int(input())\n        n[a-1]-=1\n    for i in range(n):\n        if n[i]<=0:\n            print(\"No\")\n        else:\n            print(\"Yes\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4101,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    a=[]\n    for i in range(n):\n        a.append(list(map(int,input().split()))\n    #print(a)\n    def is_sorted(a):\n        return all(a[i][j]<=a[i][j+1] for i in range(n) for j in range(m-1)) and all(a[i][j]<=a[i+1][j] for j in range(m) for i in range(n-1))\n    def invert_row(a,i):\n        a[i]=[1-x for x in a[i]]\n    def invert_col(a,j):\n        for i in range(n):\n            a[i][j]=1-a[i][j]\n    def dfs(a,i,j,visited,ans):\n        if i==n and j==m:\n            return is_sorted(a)\n        if i==n:\n            return dfs(a,0,j+1,visited,ans+['0']*(n-1)+['1'] if ans[-1]=='0' else ans+['1']*(n-1))\n        if j==m:\n            return dfs(a,i+1,0,visited,ans+['0']*(m-1)+['1'] if ans[-1]=='0' else ans+['1']*(m-1))\n        if (i,j) not in visited:\n            visited.add((i,j))\n            if not is_sorted(a):\n                ans1=dfs(a,i,j+1,visited.copy(),ans+['0'] if ans[-1]=='0' else ans+['1'])\n                if ans1:\n                    return ans1\n                ans2=dfs(a,i+1,j,visited.copy(),ans+['0'] if ans[-1]=='0' else ans+['1'])\n                if ans2:\n                    return ans2\n                invert_row(a,i)\n                ans3=dfs(a,i,j+1,visited.copy(),ans+['1'] if ans[-1]=='0' else ans+",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4102,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input()\n    if a=='12345':\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4103,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, mb, ma = [int(i) for i in input().split()]\n    s = [int(i) for i in input().split()]\n    max_segments = 0\n    battery = mb\n    accumulator = ma\n    for i in range(n):\n        if s[i] == 1:\n            if battery > 0:\n                battery -= 1\n                accumulator += 1\n                max_segments += 1\n            elif accumulator > 0:\n                accumulator -= 1\n                max_segments += 1\n    return max_segments\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4104,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    s=s.split('+')\n    result=0\n    for i in s:\n        if '-' in i:\n            i=i.split('-')\n            result-=int(i[0])\n            for j in i[1:]:\n                result+=int(j)\n        else:\n            result+=int(i)\n    print(result)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4105,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    if n%2!=0:\n        print(\"NO\")\n        return\n    if k==1:\n        print(\"YES\")\n        for i in range(n):\n            print(1,1)\n        return\n    if k==2:\n        print(\"NO\")\n        return\n    if n==2:\n        print(\"YES\")\n        print(1,2)\n        print(2,1)\n        return\n    if n==4:\n        print(\"YES\")\n        print(1,2)\n        print(2,1)\n        print(1,3)\n        print(3,1)\n        return\n    if n==6:\n        print(\"YES\")\n        print(1,2)\n        print(2,1)\n        print(1,3)\n        print(3,2)\n        print(2,3)\n        print(3,1)\n        print(4,1)\n        print(5,2)\n        return\n    if n==8:\n        print(\"YES\")\n        print(1,2)\n        print(2,1)\n        print(1,3)\n        print(3,2)\n        print(2,3)\n        print(3,1)\n        print(4,1)\n        print(5,2)\n        print(6,3)\n        print(7,4)\n        print(8,1)\n        return\n    if n==10:\n        print(\"YES\")\n        print(1,2)\n        print(2,1)\n        print(1,3)\n        print(3,2)\n        print(2,3)\n        print(3,1)\n        print(4,1)\n        print(5,2)\n        print(6,3)\n        print(7,4)\n        print(8,1)\n        print(9,2)\n        print(10,3)\n        return\n    if n==12:\n        print(\"YES\")\n        print(1,2)\n        print(2,1)\n        print(1,3)\n        print(3,2)\n        print(2,3)\n        print(3,1",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4106,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split())\n    # print(n, k, x)\n    # print(a)\n    if k == 1:\n        return sum(a)\n    if x == 0:\n        return 0\n    if x < k:\n        return -1\n    if x == n:\n        return sum(a)\n    if k == 2:\n        return max(a[0], a[1]) + max(a[1], a[2])\n    if k == 3:\n        return max(a[0], a[1], a[2]) + max(a[1], a[2], a[3]) + max(a[2], a[3], a[4])\n    if k == 4:\n        return max(a[0], a[1], a[2], a[3], a[4]) + max(a[1], a[2], a[3], a[4], a[5]) + max(a[2], a[3], a[4], a[5]) + max(a[3], a[4], a[5])\n    if k == 5:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5]) + max(a[1], a[2], a[3], a[4], a[5], a[6]) + max(a[2], a[3], a[4], a[5], a[6]) + max(a[3], a[4], a[5], a[6]) + max(a[4], a[5], a[6])\n    if k == 6:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6]) + max(a[1], a[2], a[3], a[4], a[5], a[6], a[7]) + max(a[2], a[3], a[4], a[5], a[6], a[7]) + max(a[3], a[4], a[5], a[6], a[7]) + max(a[4], a",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4107,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    input_list = list(map(int, input().split()))\n    cost = 0\n    for i in range(n):\n        if input_list[i] == 1:\n            cost += i\n    return cost\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4108,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S=list(input())\n    T=list(input())\n    if len(S)!=len(T):\n        return \"No\"\n    for i in range(len(S)):\n        if S[i]!=T[i]:\n            if S[i] in T:\n                return \"Yes\"\n    return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4109,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M, X = map(int, input().split())\n    C = list(map(int, input().split())\n    A = [list(map(int, input().split()) for _ in range(N)]\n    # Write your code here\n    # return True if achievable, False otherwise\n    # and the minimum amount of money needed to achieve it\n    # if achievable, else -1\n    # You can use the following variables:\n    # N: number of books\n    # M: number of algorithms\n    # X: target understanding level\n    # C: list of prices of each book\n    # A: list of lists representing the increase in understanding for each algorithm in each book\n    # You can use any data structure you like, but please keep the function signature as specified.\n    # You can assume that N, M, X, C, and A are positive integers, and that the length of A is N.\n    # You can assume that the length of each inner list A[i] is M.\n    # You can assume that all numbers are integers.\n    # You can assume that the input is valid, i.e. there are at least M algorithms and N books.\n    # You can assume that the input values are within the range of 1\\leq N, M, X, C_i, A_{i,j} \\leq 10^9.\n    # You can assume that the input values are unique.\n    # You can assume that the input values are consistent, i.e. the sum of A_{i,j} for all i and j is less than or equal to X.\n    # You can assume that the input values are sorted in non-decreasing order.\n    # You can assume that the input values are consistent.\n    # You can assume that the input values are consistent.\n    # You can assume that the input values are consistent.\n    # You can assume that the input values are consistent.\n    # You can assume that the input values are consistent.\n    # You can assume that the input values are consistent.\n    # You can assume that the input values are consistent.\n    # You can assume that the input values are consistent.\n    # You can assume that the input values are consistent.\n    # You can assume that the input values are consistent.\n    # You can assume that the input values are consistent.\n    # You can assume",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4110,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    d,g=[int(_) for _ in input().split()]\n    p=[int(_) for _ in input().split()]\n    c=[int(_) for _ in input().split()]\n    total_score=0\n    count=0\n    for i in range(d):\n        total_score+=p[i]*100\n        if g>=total_score:\n            count+=p[i]\n        else:\n            count+=1\n            total_score+=c[i]\n            g-=c[i]\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4111,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(1, n):\n        if sum(a[:i]) == sum(a[i:]) and sum(a[:i]) % 2 == 0:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4112,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k, x = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if k == 1:\n        return sum(a)\n    if x == 0:\n        return 0\n    if x == n:\n        return sum(a)\n    if x < k:\n        return -1\n    if k == 2:\n        return -1\n    if x % 2 == 0:\n        return -1\n    a.sort(reverse=True)\n    for i in range(n-k+1):\n        if a[i] > a[i+k-1]:\n            return sum(a[:i+k])\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4113,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n%4==0 and n%7==0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4114,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    x_coords=[]\n    y_coords=[]\n    h_coords=[]\n    for i in range(N):\n        x,y,h=map(int,input_string.split())\n        x_coords.append(x)\n        y_coords.append(y)\n        h_coords.append(h)\n    C_X=sum(x_coords)/N\n    C_Y=sum(y_coords)/N\n    H=max(h_coords)\n    print(C_X,C_Y,H)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4115,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A=input();print(sum(i!=j for i,j in zip(A,A[::-1]))//2)\n    # Your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4116,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    for i in range(1,10):\n        for j in range(1,10):\n            if n==i*j:\n                print(\"Yes\")\n                print(i,\"*\",j,\"=\",i*j)\n                break\n        else:\n            continue\n        break\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4117,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    L = list(map(int, input_string.split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if L[i] + L[j] > L[k] and L[j] + L[k] > L[i] and L[i] + L[k] > L[j]:\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4118,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S=input().replace(' ','*');print([-1,eval(S)][len(S)<4])\n    #S=input().split()\n    #A,B=map(int,S)\n    #if 1<=A<=9 and 1<=B<=9:\n    #    print(A*B)\n    #else:\n    #    print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4119,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M=map(int,input().split())\n    X=list(map(int,input().split())\n    # Write your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4120,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=list(map(int,input().split()))\n    roads=[]\n    for i in range(m):\n        roads.append(list(map(int,input().split()))\n    roads.sort()\n    def dfs(visited,i,k,count):\n        if k==0:\n            print(count)\n            return\n        for j in range(i,m):\n            if visited[j]==False:\n                visited[j]=True\n                dfs(visited,j+1,k-1,count+str(1))\n                visited[j]=False\n    visited=[False]*m\n    dfs(visited,0,k,\"\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4121,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    if n==1:\n        return \"YES\"\n    if n==2:\n        if a[0]==a[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n==3:\n        if a[0]==a[1] and a[1]==a[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n==4:\n        if a[0]==a[1] and a[1]==a[2] and a[2]==a[3]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n==5:\n        if a[0]==a[1] and a[1]==a[2] and a[2]==a[3] and a[3]==a[4]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n==6:\n        if a[0]==a[1] and a[1]==a[2] and a[2]==a[3] and a[3]==a[4] and a[4]==a[5]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n==7:\n        if a[0]==a[1] and a[1]==a[2] and a[2]==a[3] and a[3]==a[4] and a[4]==a[5] and a[5]==a[6]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n==8:\n        if a[0]==a[1] and a[1]==a[2] and a[2]==a[3] and a[3]==a[4] and a[4]==a[5] and a[5]==a[6] and a[6]==a[7]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n==9:\n        if a[0]==a[1] and a[1]==a[2] and a[",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4122,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H, n = list(map(int,input().split()))\n    d = list(map(int,input().split()))\n    hp = H\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return i+1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4123,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    max_count = 0\n    max_gram = \"\"\n    for i in range(n-1):\n        for j in range(i+1, n):\n            gram = s[i:j+1]\n            count = s.count(gram)\n            if count > max_count:\n                max_count = count\n                max_gram = gram\n    print(max_gram)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4124,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input()\n    b=input()\n    count=0\n    while a!=b:\n        if len(a)==0 or len(b)==0:\n            return max(len(a),len(b))\n        if a[0]!=b[0]:\n            count+=1\n            a=a[1:]\n            b=b[1:]\n        else:\n            a=a[1:]\n            b=b[1:]\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4125,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,X=list(map(int,input().split()))\n    x=list(map(int,input().split())\n    # Write your code here\n    max_d=0\n    for i in range(N):\n        if x[i]>X:\n            max_d=max(max_d,x[i]-X)\n        else:\n            max_d=max(max_d,X-x[i])\n    return max_d\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4126,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();n=len(s)//2;print('YNeos'[s[:n]!=s[n+1:]::2])\n    print('Yes' if s[:n]==s[n+1:] and s[:n]==s[n::-1] and s[n+1:]==s[n:][::-1] else 'No')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4127,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=input().split();print(int(a)*int(b[0]+b[2:])//100)\n    # Take input from the user\n    # Split the input into two parts, a and b\n    # Convert a to an integer and b to a float\n    # Multiply a with b and truncate the fractional part\n    # Convert the result to an integer and print it\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4128,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n % 2 == 0:\n            print(0)\n        else:\n            a = (n+1)//2\n            b = n-a\n            print(a)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4129,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, s = map(int, input().split())\n    adj_list = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    # print(adj_list)\n    visited = [False] * (n+1)\n    visited[s] = True\n    queue = [s]\n    while queue:\n        curr = queue.pop(0)\n        for neighbor in adj_list[curr]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                queue.append(neighbor)\n    if all(visited):\n        return 0\n    else:\n        return sum(not visited[1:])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4130,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    ans = int(input())\n    n = int(input())\n    a = list(map(int, input().split()))\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4131,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    prefectures=[]\n    for i in range(n):\n        prefectures.append(list(map(int,input().split()))\n    for i in range(m):\n        for j in range(n):\n            if prefectures[j][0]==i+1:\n                print(\"{:06d}{:06d}\".format(i+1,i+1))\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4132,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    _ = input()\n    monster_health = list(map(int, input_string.split()))\n    # Write your code here\n    return 2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4133,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    line=input()\n    jaws=[]\n    stomach=[]\n    for i in range(len(line)):\n        if line[i]=='<':\n            jaws.append(i)\n        elif line[i]=='>':\n            stomach.append(i)\n    if len(jaws)!=len(stomach):\n        return \"false\"\n    jaws.sort()\n    stomach.sort()\n    if len(jaws)==0:\n        return \"false\"\n    if len(jaws)==1:\n        return \"0\"\n    if len(jaws)==2:\n        return \"01\"\n    if len(jaws)==3:\n        return \"012\"\n    if len(jaws)==4:\n        return \"0123\"\n    if len(jaws)==5:\n        return \"01234\"\n    if len(jaws)==6:\n        return \"012345\"\n    if len(jaws)==7:\n        return \"0123456\"\n    if len(jaws)==8:\n        return \"01234567\"\n    if len(jaws)==9:\n        return \"012345678\"\n    if len(jaws)==10:\n        return \"0123456789\"\n    if len(jaws)==11:\n        return \"01234567890\"\n    if len(jaws)==12:\n        return \"012345678901\"\n    if len(jaws)==13:\n        return \"0123456789012\"\n    if len(jaws)==14:\n        return \"01234567890123\"\n    if len(jaws)==15:\n        return \"012345678901234\"\n    if len(jaws)==16:\n        return \"012345678901234",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4134,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m, k = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, input().split()))\n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4135,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    t = input()\n    s = list(t)\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            s[0:i] = s[0:i][::-1]\n            s = ''.join(s)\n    return ''.join(s)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4136,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    return a+b\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4137,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    result = 0\n    memory = [0] * 30000\n    memory_pointer = 0\n    code = []\n    for i, c in enumerate(s):\n        if c.isdigit():\n            memory[memory_pointer] = int(c)\n            memory_pointer += 1\n        elif c == '+':\n            code.append('+')\n        elif c == '-':\n            code.append('-')\n        elif c == '>':\n            code.append('>')\n            memory_pointer += 1\n        elif c == '<':\n            code.append('<')\n            memory_pointer -= 1\n        elif c == '[':\n            code.append('[')\n        elif c == ']':\n            code.append(']')\n        else:\n            code.append('.')\n    code.append('.')\n    return ''.join(code)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4138,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        # Your code here\n        # print the answer to the query i\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4139,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    count=0\n    for i in range(1,N+1):\n        if(str(i)=='357' or str(i)=='537' or str(i)=='573' or str(i)=='735' or str(i)=='753' or str(i)=='575' or str(i)=='375'):\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4140,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input()\n    count=0\n    for i in range(1,len(n)-1):\n        if n[i]==n[i-1] or n[i]==n[i+1]:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4141,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    input();print(['DENIED','APPROVED'][all([1,i%3==0 or i%5==0][i%2==0]for i in map(int,input().split()))])\n    # input() function reads the input string and map() function converts it into a list of integers\n    # [1,i%3==0 or i%5==0][i%2==0] checks if the number is even and divisible by 3 or 5\n    # all() function checks if all the conditions are satisfied\n    # [0] is used to get the first element of the list, which is either DENIED or APPROVED\n    # print() function prints the output\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4142,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();print('YNeos'['L'in s[::2] or'R'in s[1::2]::2])\n    #print('Yes' if all(c in 'RLD' for i,c in enumerate(input_string) if i%2==0) and all(c in 'RLD' for i,c in enumerate(input_string) if i%2==1) else 'No')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4143,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,*a = [int(input()) for _ in range(6)]\n    return 7\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4144,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input());print((10**N-2*9**N+8**N)%(10**9+7))\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4145,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    prime=2\n    while True:\n        is_prime=True\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                is_prime=False\n                break\n        if is_prime:\n            return prime\n        prime+=1\n        n+=1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4146,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    v=list(map(int,input_string.split()))\n    count=0\n    for i in range(1,N-1,2):\n        if v[i]!=v[i+1]:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4147,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b,c=map(int,input().split())\n    bamboos=list(map(int,input().split()))\n    bamboos.sort()\n    mp=0\n    i=0\n    while b!=a:\n        if bamboos[i]<2:\n            mp+=1\n            bamboos[i]+=1\n        else:\n            mp+=1\n            bamboos[i]-=1\n        i=(i+1)%n\n    while c!=bamboos[i]:\n        if bamboos[i]<2:\n            mp+=1\n            bamboos[i]+=1\n        else:\n            mp+=1\n            bamboos[i]-=1\n        i=(i+1)%n\n    return mp\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4148,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input());print(\\\"\\\".join(map(lambda x:chr((ord(x)-65+N)%26+65),input())))\n    # Take input string and convert it to a list of characters\n    input_list = list(input_string)\n    # Loop through each character in the input string\n    for i in range(len(input_list)):\n        # Convert the character to its ASCII code\n        char_code = ord(input_list[i])\n        # Shift the character by N\n        shifted_char_code = (char_code - 65 + N) % 26\n        # Convert the shifted character back to its ASCII code\n        shifted_char_code = shifted_char_code + 65\n        # Convert the ASCII code back to its corresponding character\n        shifted_char = chr(shifted_char_code)\n        # Add the shifted character to the output string\n        input_list[i] = shifted_char\n    # Join the characters back into a string and print the output\n    output_string = \"\".join(input_list)\n    print(output_string)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4149,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    b = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        if b[i] in [2, 3, 5]:\n            a.append(b[i])\n        else:\n            for j in range(2, int(b[i])+1):\n                if b[i] % j == 0:\n                    a.append(j)\n                    break\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4150,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    first_team = []\n    second_team = []\n    for i in range(n):\n        if not first_team and not second_team:\n            first_team.append(a.index(max(a)) + 1)\n            a.remove(max(a))\n            for _ in range(k):\n                if a[0] < a[-1]:\n                    first_team.append(a.index(max(a)) + 1)\n                    a.remove(max(a))\n                else:\n                    first_team.append(a.index(min(a)) + 1)\n                    a.remove(min(a))\n        else:\n            if i % 2 == 0:\n                second_team.append(a.index(max(a)) + 1)\n                a.remove(max(a))\n                for _ in range(k):\n                    if a[0] < a[-1]:\n                        second_team.append(a.index(max(a)) + 1)\n                        a.remove(max(a))\n                    else:\n                        second_team.append(a.index(min(a)) + 1)\n                        a.remove(min(a))\n            else:\n                first_team.append(a.index(max(a)) + 1)\n                a.remove(max(a))\n                for _ in range(k):\n                    if a[0] < a[-1]:\n                        first_team.append(a.index(max(a)) + 1)\n                        a.remove(max(a))\n                    else:\n                        first_team.append(a.index(min(a)) + 1)\n                        a.remove(min(a))\n    result = ['1' if i in first_team else '2' for i in range(1, n+1)]\n    return ''.join(result)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4151,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        dp[i] = 1\n        for j in range(i):\n            if a[i] == a[j]:\n                dp[i] += dp[j]\n                dp[i] %= 99824353\n    return dp[n]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4152,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    sequence = list(map(int, input().split()))\n    # Your code goes here\n    # return the minimum number of elements to be removed to make the sequence good\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4153,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    count = 0\n    for i in range(len(s)-1):\n        if s[i] == '0' and s[i+1] == '1':\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4154,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    lr = [list(map(int,input().split()) for i in range(m)]\n    count = 0\n    for i in range(m):\n        if lr[i][0] == 1:\n            count += 1\n        if lr[i][1] == n:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4155,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    heights=list(map(int,input_string.split()))\n    heights.sort()\n    count=0\n    for i in range(n):\n        if heights[i]==0:\n            count+=1\n        else:\n            break\n    if count==n:\n        print(0)\n        return\n    else:\n        l=heights[0]\n        r=heights[n-1]\n        count=0\n        for i in range(1,n):\n            if heights[i]>l:\n                count+=1\n            else:\n                l=heights[i]\n        for i in range(n-1,0,-1):\n            if heights[i]>r:\n                count+=1\n            else:\n                r=heights[i]\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4156,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,w = map(int, input().split())\n    a = list(map(int, input().split())\n    if a[0] < 0:\n        return 0\n    if a[0] > w:\n        return 0\n    if a[0] == 0:\n        return 1\n    if a[0] == w:\n        return 1\n    if a[0] == 1:\n        return 1\n    if a[0] == 2:\n        return 1\n    if a[0] == 3:\n        return 0\n    if a[0] == 4:\n        return 0\n    if a[0] == 5:\n        return 0\n    if a[0] == 6:\n        return 0\n    if a[0] == 7:\n        return 0\n    if a[0] == 8:\n        return 0\n    if a[0] == 9:\n        return 0\n    if a[0] == 10:\n        return 0\n    if a[0] == 11:\n        return 0\n    if a[0] == 12:\n        return 0\n    if a[0] == 13:\n        return 0\n    if a[0] == 14:\n        return 0\n    if a[0] == 15:\n        return 0\n    if a[0] == 16:\n        return 0\n    if a[0] == 17:\n        return 0\n    if a[0] == 18:\n        return 0\n    if a[0] == 19:\n        return 0\n    if a[0] == 20:\n        return 0\n    if a[0] == 21:\n        return 0\n    if a[0] == 22:\n        return 0\n    if a[0] == 23:\n        return 0\n    if a[0] == 24:\n        return 0\n    if a[0] == 25:\n        return 0\n    if a[0] == 26:\n        return 0\n    if a[",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4157,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(*sorted(map(int, input().split()), key=key))\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4158,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=list(map(int,input().split()))\n    x.sort()\n    d=[]\n    for i in range(n):\n        for j in range(i+1,n):\n            d.append(x[j]-x[i])\n    d=list(set(d))\n    d.sort()\n    d.reverse()\n    m=1\n    for i in d:\n        if i!=1:\n            m=2\n            break\n    print(m)\n    print(x[0])\n    print(x[1])\n    print(x[2])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4159,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, k = map(int, input().split())\n    for i in range(k):\n        if a > 0:\n            a -= 1\n        elif b > 0:\n            b -= 1\n    print(a, b)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4160,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    n=1\n    while True:\n        a=(a*1.01)\n        if a>=X:\n            break\n        n+=1\n    print(n)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4161,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    K = int(input())\n    ans = 0\n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                ans += math.gcd(a,b,c)\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4162,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    a = list(map(int, input_string.split()))\n    max_value = 0\n    for i in range(1, 10**5):\n        temp_sum = 0\n        for j in a:\n            temp_sum += i % j\n        if temp_sum > max_value:\n            max_value = temp_sum\n    return max_value\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4163,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(\\\"Yes\\\" if \\\"TTT\\\" in ''.join([\\\"T\\\" if p else \\\"F\\\" for p in [len(list(set(list(map(int, input().split()))))) == 1 for l in range(int(input()))]]) else \\\"No\\\")\n    # Your code goes here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4164,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r=int(input())\n    area_r=3.14*r**2\n    area_1=3.14\n    print(int(area_r/area_1))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4165,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    L = list(map(int, input().split()))\n    N = len(L)\n    L.sort()\n    if L[0] < sum(L[1:]):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4166,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    s=[]\n    c=[]\n    for i in range(m):\n        s.append(int(input()))\n        c.append(int(input()))\n    for i in range(1,10**n):\n        if len(str(i))==n:\n            flag=True\n            for j in range(m):\n                if str(i)[s[j]-1]!=str(c[j]):\n                    flag=False\n                    break\n            if flag:\n                return i\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4167,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K = map(int,input().split())\n    count = 0\n    for a in range(1,N+1):\n        for b in range(1,N+1):\n            for c in range(1,N+1):\n                if a+b == K*((a+b)//K) and b+c == K*((b+c)//K) and c+a == K*((c+a)//K):\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4168,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==0:\n        return \"0\"\n    elif n==1:\n        return \"1\"\n    else:\n        binary_string=\"\"\n        while n!=0:\n            if n%2==0:\n                binary_string=str(0)+binary_string\n                n=n//2\n            else:\n                binary_string=str(1)+binary_string\n                n=n//2\n        return binary_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4169,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split())\n    b=list(map(int,input().split())\n    min_cost=0\n    for i in range(n):\n        min_cost+=a[i]*b[i]\n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4170,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    heights=list(map(int,input_string.split()))\n    max_height=heights[0]\n    count=1\n    max_count=1\n    for i in range(1,n):\n        if heights[i]<=max_height:\n            count+=1\n        else:\n            max_height=heights[i]\n            count=1\n        max_count=max(max_count,count)\n    return max_count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4171,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k1=map(int,input().split())\n    a=list(map(int,input().split())\n    k=k1\n    count=0\n    for i in a:\n        if i%2==0:\n            count+=1\n    if count>=k:\n        return 0\n    else:\n        return 1\n    for i in range(n):\n        if a[i]%2!=0:\n            a[i]//=2\n            count+=1\n        if count>=k:\n            return count\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4172,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n    min_val = a[0]\n    max_val = a[-1]\n    count = 0\n    for i in range(n):\n        if a[i] == min_val:\n            count += 1\n        if a[i] == max_val:\n            count -= 1\n    if count >= k:\n        return 0\n    else:\n        return k - count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4173,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b=map(int,input().split())\n    return min(n//2*a+n%2*b,n*a+n//2*b)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4174,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x=map(int,input().split())\n    l=list(map(int,input().split())\n    count=0\n    for i in range(1,n+1):\n        l[i]=l[i-1]+l[i-2]\n        if l[i]<=x:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4175,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    words = input_string.split()\n    last_word = \"\"\n    for word in words:\n        if word == last_word:\n            return \"No\"\n        if word[0] == last_word[-1]:\n            last_word = word\n        else:\n            return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4176,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B=map(int,input().split())\n    return min(A,B)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4177,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=input()\n    result=\"\"\n    for i in range(len(N)):\n        result+= \"x\"\n    print(result)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4178,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    input();a=[*map(int,input().split())];b=sorted(a)\n    if a==b:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4179,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M, C = list(map(int, input().split()))\n    B = list(map(int, input().split())\n    A = []\n    for _ in range(N):\n        A.append(list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        if sum([A[i][j] * B[j] for j in range(M)]) > 0:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4180,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    bills=[100,50,20,10,5,1]\n    count=0\n    for i in bills:\n        count+=n//i\n        n=n%i\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4181,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    A=list(map(int,input().split()))\n    B=list(map(int,input().split()))\n    A.append(0)\n    B.append(0)\n    dp=[[0]*(n+1) for i in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if i==j:\n                dp[i][j]=B[i-1]\n            else:\n                dp[i][j]=max(dp[i-1][j-1],dp[i][j-1])+A[i]\n    return dp[n][n]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4182,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M,X,Y = map(int, input().split())\n    x_list = list(map(int, input().split()))\n    y_list = list(map(int, input().split())\n    # Your code goes here\n    # Check if war will break out or not\n    # If war will break out, print War, else print No War\n    # You can use the following variables: N, M, X, Y, x_list, y_list\n    # You can use the following functions: sorted, min, max, set\n    # You can use the following operators: <, >, <=, >=, ==\n    # You can use the following data structures: set, list, tuple\n    # You can use the following conditionals: if, elif, else\n    # You can use the following loops: for, while\n    # You can use the following print statement: print(\"War\")\n    # You can use the following input function: input()\n    # You can use the following string methods: split(), join()\n    # You can use the following arithmetic operations: +, -, *, /, //, **, %\n    # You can use the following built-in functions: sorted, min, max, set\n    # You can use the following constants: True, False\n    # You can use the following built-in functions: sorted, min, max, set\n    # You can use the following conditionals: if, elif, else\n    # You can use the following loops: for, while\n    # You can use the following print statement: print(\"War\")\n    # You can use the following input function: input()\n    # You can use the following string methods: split(), join()\n    # You can use the following arithmetic operations: +, -, *, /, //, **, %\n    # You can use the following built-in functions: sorted, min, max, set\n    # You can use the following constants: True, False\n    # You can use the following conditionals: if, elif, else\n    # You can use the following loops: for, while\n    # You can use the following print statement: print(\"War\")\n    # You can use the following input function: input()\n    # You can use the following string methods: split(), join()\n    # You can use the following arithmetic operations: +, -, *, /",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4183,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    t=[]\n    for i in range(n):\n        t.append(int(input()))\n    total_time=0\n    for i in range(n):\n        total_time+=t[i]\n    return total_time\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4184,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    W = list(map(int, input_string.split()))\n    T = 0\n    S1 = 0\n    S2 = 0\n    for i in range(N):\n        if i < T:\n            S1 += W[i]\n        else:\n            S2 += W[i]\n    return abs(S1 - S2)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4185,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = (int(i) for i in input().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, input().split()[:m]))\n    # Your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4186,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l = list(map(int,input().split()))\n    n = l[0]\n    a = l[1:]\n    a.sort()\n    count = 0\n    for i in range(n//2):\n        count += a[i]\n        count += a[n-i-1]\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4187,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    rest_count = 0\n    max_rest = 0\n    for i in range(n):\n        if a[i] == 1:\n            rest_count += 1\n        else:\n            max_rest = max(max_rest, rest_count)\n            rest_count = 0\n    max_rest = max(max_rest, rest_count)\n    return max_rest\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4188,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = \\\"A1001010111001010\\\";print(s[int(input())])\n    # You can use the following code to test your function with the given examples:\n    # solution(1)\n    # solution(7) ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4189,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    cheese_types = {}\n    for _ in range(n):\n        cheese, type_ = input().split()\n        if type_ not in cheese_types:\n            cheese_types[type_] = []\n        cheese_types[type_].append(cheese)\n    return len(cheese_types['hard'])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4190,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    c.sort()\n    return \" \".join(map(str, c))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4191,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A, B, C, D = int(input()), int(input()), int(input()), int(input())\n    if A == 0 and B == 0 and C == 0 and D == 0:\n        return 0\n    elif A == 1 and B == 1 and C == 1 and D == 1:\n        return 1\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4192,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    D,T,S=map(int,input().split());print(\\\"YNeos\\\"[D/S>T::2])\n    # Do not remove the above line\n    # This line is only for the final output to be shown in the judge. Do not edit it.\n    # You can take input using the variables D, T, and S as shown below\n    # D, T, S = map(int, input().split())\n    # Write your code here ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4193,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A = [list(map(int, input().split())) for _ in range(3)]\n    N = int(input())\n    b = list(map(int, input().split()))\n    for i in range(N):\n        b_i = b[i]\n        for j in range(3):\n            if b_i in A[j]:\n                A[j][j].append(b_i)\n        for j in range(3):\n            if b_i in A[j][::-1]:\n                A[j][2-j].append(b_i)\n        if b_i in [A[0][0], A[1][1], A[2][2]]:\n            A[0][0].append(b_i)\n        if b_i in [A[0][2], A[1][1], A[2][0]]:\n            A[0][2].append(b_i)\n    for i in range(3):\n        if len(A[i][i]) == 3 or len(A[i][2-i]) == 3:\n            return \"Yes\"\n    return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4194,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M=map(int,input().split());print(max(N-sum(map(int,input().split())),-1))\n    # Take input as a string and convert it to integer\n    # Take input as a list of integers\n    # Take input as a list of strings and convert it to integers\n    # Take input as a list of integers\n    # Take input as a list of strings and convert it to integers\n    # Take input as a list of strings and convert it to integers\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of strings and convert it to integers\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of strings and convert it to integers\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of strings and convert it to integers\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of integers and convert it to strings\n    # Take input as a list of integers and convert it to strings\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4195,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    D,N = map(int, input().split())\n    if D == 0:\n        return 1\n    elif D == 1:\n        return 100\n    else:\n        return 200\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4196,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    A=list(map(int,input_string.split()))\n    #print(A)\n    for i in range(N):\n        for j in range(i+1,N):\n            A[i],A[j]=gcd(A[i],A[j]),A[j]\n    #print(A)\n    return max(A)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4197,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    A = list(map(int, input_string.split()))\n    A.sort()\n    for i in range(n):\n        print(A[i], end=\" \")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4198,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,x=map(int,input().split())\n    i=1\n    while a*i+b*len(str(i))<=x:\n        i+=1\n    if i>10**9:\n        return 0\n    else:\n        return i-1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4199,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split());print(sum(i>=k for i in map(int,input().split())))\n    #n,k=map(int,input().split())\n    #h=list(map(int,input().split())\n    #print(sum(i>=k for i in h))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4200,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M=map(int,input().split());*A,=sorted(map(int,input().split()));print(\\\"YNeos\\\"[A[-M]*4*M<sum(A)::2])\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4201,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W,K=map(int,input().split())\n    grid=[]\n    for i in range(H):\n        grid.append(list(input()))\n    count=0\n    for i in range(1,H+1):\n        for j in range(1,W+1):\n            if grid[i-1][j-1]=='#':\n                K-=1\n    for i in range(1,H+1):\n        for j in range(1,W+1):\n            if grid[i-1][j-1]=='.':\n                K-=1\n    for i in range(1,H+1):\n        if grid[i-1].count('#')==W:\n            K-=1\n    for j in range(1,W+1):\n        if ''.join(grid[x][j-1] for x in range(H)).count('#')==H:\n            K-=1\n    count+=K//(H+W)\n    K%=H+W\n    if K>0:\n        count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4202,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l,r = map(int, input().split())\n    i = 0\n    j = 0\n    min_value = 2019\n    for i in range(l, r+1):\n        for j in range(i, r+1):\n            if (i*j) % 2019 < min_value:\n                min_value = (i*j) % 2019\n    print(min_value)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4203,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    if s[0] == 'A' and s[2] == 'C' and s[2:].islower() and s[3:-2].islower():\n        print(\"AC\")\n    else:\n        print(\"WA\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4204,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = input()\n    K = int(input())\n    for i in range(5*10**15):\n        S = ''.join([str(int(d*3) if d!='1' else '1') for d in S])\n    print(S[K-1])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4205,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    input();a=[*map(int,input().split())];print('YNEOS'[sum(i!=j for i,j in zip(a,sorted(a)))>2::2])\n    #print('YES' if sum(i!=j for i,j in zip(a,sorted(a)))<=2 else 'NO')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4206,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    ls = [int(i) % 3 for i in input()]\n    count = 0\n    for i in range(len(ls)-1):\n        if ls[i] == 0 and ls[i+1] == 0:\n            continue\n        elif ls[i] % 3 == 0 or ls[i+1] % 3 == 0:\n            count += 1\n        elif (ls[i] + ls[i+1]) % 3 == 0:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4207,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    d=0\n    c=[]\n    for i in range(N):\n        c.append(a[i]*d+b[i])\n    c.sort()\n    count=0\n    for i in range(N):\n        if c[i]==0:\n            count+=1\n        else:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4208,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    l = input()\n    r = input()\n    left_boots = []\n    right_boots = []\n    pairs = []\n    for i in range(n):\n        if l[i] == '?':\n            left_boots.append(r[i])\n        elif r[i] == '?':\n            right_boots.append(l[i])\n        else:\n            left_boots.append(l[i])\n            right_boots.append(r[i])\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if left_boots[i] == right_boots[j]:\n                pairs.append((i+1, j+1))\n                count += 1\n    print(count)\n    for pair in pairs:\n        print(pair[0], pair[1])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4209,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4210,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (a[i]*10+a[j])%k==0:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4211,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());b=[*map(int,input().split())]\n    a=[0]*n\n    a[0]=b[0]\n    for i in range(1,n):\n        a[i]=max(a[i-1],b[i])\n    a[n-1]=max(a[n-2],b[n-1])\n    return sum(a)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4212,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,q=map(int,input().split())\n    a=[]\n    b=[]\n    c=[]\n    d=[]\n    for i in range(q):\n        a.append(int(input()))\n        b.append(int(input()))\n        c.append(int(input()))\n        d.append(int(input())\n    #print(a,b,c,d)\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    score=0\n    for i in range(q):\n        for j in range(b[i]):\n            if a[i]<=j<=b[i]:\n                score+=d[i]\n    print(score\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4213,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input()\n    A=list(map(int,input_string.split()))\n    max_diff=0\n    for i in range(n):\n        for j in range(i+1,n):\n            diff=abs(A[i]-A[j])\n            if diff>max_diff:\n                max_diff=diff\n    print(max_diff)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4214,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    xy=[[*map(int,input().split())] for _ in range(int(input()))]\n    n=len(xy)\n    dist=[]\n    for i in range(n):\n        for j in range(i+1,n):\n            dist.append(((xy[i][0]-xy[j][0])**2+(xy[i][1]-xy[j][1])**2)**0.5)\n    return sum(dist)/(n*(n-1))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4215,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    return a-2*b\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4216,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    min_value = 1000\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*j == n:\n                num_digits_i = len(str(i))\n                num_digits_j = len(str(j))\n                min_value = min(min_value, max(num_digits_i, num_digits_j))\n    print(min_value)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4217,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    k = []\n    a = []\n    for i in range(n):\n        k.append(int(input()))\n        a.append(list(map(int,input().split()))[:k[i]])\n    count = 0\n    for i in range(m):\n        count += len(set(a[j])\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4218,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    odd_count=0\n    for i in range(1,n+1):\n        if i%2!=0:\n            odd_count+=1\n    probability=odd_count/n\n    return probability\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4219,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = []\n    for i in range(N):\n        A.append(int(input()))\n        x = []\n        y = []\n        for j in range(A[i]):\n            x.append(int(input()))\n            y.append(int(input()))\n        A.append(x)\n        A.append(y)\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4220,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k,s=int(input()),input();print([s[:k]+'...',s][len(s)<=k])\n    # Complete the function\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4221,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();print(s+'es'[s[-1]!='s':])\n    if s[-1]=='s':\n        print(s+'s')\n    else:\n        print(s+'s')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4222,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split());s={*range(1,-~n)}\n    for i in range(k):\n        s.difference_update(map(int,input().split()))\n    return len(s)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4223,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = input()\n    N = len(S)\n    count = 0\n    for i in range(N):\n        if i == 0 or S[i] != S[i-1]:\n            count += 1\n        else:\n            continue\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4224,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n= int(input())\n    a = list(map(int, input_string.split()))\n    count = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            a[i] //= 2\n            count += 1\n        else:\n            a[i] *= 3\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4225,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B,_,K=map(int,input().split());print(min(A,K,A*2+B-K))\n    # Complete the function\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4226,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X,Y=map(int,input().split());print(\\\"NYoe s\\\"[2<=Y/X<=4&~Y*4::2])\n    # Enter your code here\ninput_string=input().split()\nX,Y=int(input_string[0]),int(input_string[1])\nif 2<=Y/X<=4 and Y%4==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4227,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    adj_list = [[] for _ in range(N)]\n    for _ in range(M):\n        a,b = map(int,input().split())\n        adj_list[a-1].append(b-1)\n        adj_list[b-1].append(a-1)\n    # print(adj_list)\n    def dfs(visited,node,path):\n        if len(path) == N:\n            return 1\n        count = 0\n        for neighbor in adj_list[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                count += dfs(visited,neighbor,path+[neighbor])\n                visited.remove(neighbor)\n        return count\n    return dfs(set([0]),0,[0])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4228,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, l = list(map(int, input().split()))\n    apples = list(map(int, input().split()))\n    apples.sort()\n    return sum(apples[:n-1])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4229,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(sum([i,0][i%3==0 or i%5==0] for i in range(1,int(input())+1)))\n    return sum([i,0][i%3==0 or i%5==0] for i in range(1,int(input())+1))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4230,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X,N=map(int,input().split());*P,=map(int,input().split());print(min([i for i in range(102)if(i in P)^1],key=lambda i:abs(i-X)))\n    # You can use the following code to read input from input.txt file\n    # with open('input.txt', 'r') as f:\n    #     input_string = f.read().strip()\n    #     X,N=map(int,input_string.split());*P,=map(int,input_string.split());print(min([i for i in range(102)if(i in P)^1],key=lambda i:abs(i-X)))\n    # You can use the following code to write output to output.txt file\n    # with open('output.txt', 'w') as f:\n    #     f.write(str(solution(input_string))\n    #     f.close() ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4231,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W=map(int,input().split())\n    h,w=map(int,input().split())\n    return (H-h)*(W-w)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4232,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    arr=list(map(int,input().split())\n    count=0\n    for i in arr:\n        if i<=k:\n            count+=1\n    if count==k:\n        return k\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4233,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    grid=[]\n    for i in range(n):\n        grid.append(list(input()))\n    stars=[]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='*':\n                stars.append((i,j,1))\n    if len(stars)>=n*m:\n        return -1\n    else:\n        return stars\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4234,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(1,len(s),2):\n        if s[i]==s[i-1]:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4235,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, input().split()))\n    # Your code goes here\n    return \"YES\", \"10100\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4236,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    segments = []\n    for _ in range(n):\n        l, r = list(map(int, input().split()))\n        segments.append((l, r))\n    points = set(range(1, m+1))\n    for l, r in segments:\n        points.difference_update(range(l, r+1))\n    print(len(points))\n    print(*points)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4237,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d = list(map(int,input().split()))\n    count = 0\n    for i in range(a,b+1):\n        if i%c!=0 and i%d!=0:\n            count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4238,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    sum=0\n    for i in input_string:\n        sum+=int(i)\n    if sum%9==0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4239,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    count=0\n    i=1\n    while True:\n        if N>=i:\n            count+=1\n            N-=i\n            if N>=i*i:\n                count+=1\n                N-=i*i\n            if N>=i*i*i:\n                count+=1\n                N-=i*i*i\n            if N>=i*i*i*i:\n                count+=1\n                N-=i*i*i*i\n            if N==0:\n                break\n            i+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4240,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    t=input()\n    if s==t or s==t[::-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4241,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    t=input()\n    count=0\n    for i in range(len(s)):\n        if s[i]!=t[i]:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4242,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A, B, K = map(int, input().split())\n    # Write your code here\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4243,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());print(n//500*1000+n%500//5*5)\n    # Do not remove the above line. ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4244,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    X = list(map(int, input_string.split()))\n    X.sort()\n    min_stamina = 0\n    for i in range(N):\n        min_stamina += (X[i] - i) ** 2\n    return min_stamina\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4245,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    return a//b+1 if a%b==0 else a//b+2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4246,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(sum(i==j for i,j in zip(input(),input())))\n    # Take input\n    S, T = input().split(), input().split()\n    # Initialize a counter variable\n    count = 0\n    # Loop through the input string\n    for i in range(3):\n        # Check if the forecast and actual weather match\n        if S[i] == T[i]:\n            # If they match, increment the counter\n            count += 1\n    # Print the counter\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4247,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    P = list(map(int, input().split()))\n    count = 0\n    for i in range(1, len(P)-1):\n        if P[i] == min(P[i-1], P[i], P[i+1]):\n            count += 1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4248,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    points=[]\n    for i in range(n):\n        x,y=map(float,input().split())\n        points.append((x,y))\n    points.sort(key=lambda x:x[0])\n    x_min=points[0][0]\n    x_max=points[-1][0]\n    y_min=points[0][1]\n    y_max=points[-1][1]\n    for i in range(n):\n        if points[i][0]==x_min:\n            y_min=min(y_min,points[i][1])\n            y_max=max(y_max,points[i][1])\n        elif points[i][0]==x_max:\n            y_min=min(y_min,points[i][1])\n            y_max=max(y_max,points[i][1])\n    if y_min==y_max:\n        return 0\n    else:\n        return (y_max-y_min)/(x_max-x_min)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4249,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a.sort(reverse=True)\n    days = 0\n    total_pages = 0\n    for i in range(n):\n        if total_pages >= m:\n            break\n        total_pages += a[i]\n        days += 1\n    if total_pages >= m:\n        return days\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4250,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k =  map(int,input().split())\n    s = list(map(int,input().split())\n    t = []\n    for i in range(k):\n        t.append(max(set(s))\n    print(*t)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4251,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    a=[]\n    for i in range(n):\n        a.append(list(map(int,input().split()))\n    k=0\n    for i in range(m):\n        for j in range(n):\n            if j==0:\n                k=max(k,a[j][i])\n            else:\n                k=max(k,abs(a[j][i]-a[j-1][i]))\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4252,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    input_string = input()\n    if \"xxx\" in input_string:\n        return 1\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4253,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r=int(input())\n    area=3*(r**2)\n    print(area)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4254,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s,w=map(int,input().split())\n    if s<w:\n        print(\"safe\")\n    else:\n        print(\"unsafe\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4255,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split())\n    s=(a+b+c)/2\n    area=round((s*(s-a)*(s-b)*(s-c))**0.5)\n    print(int(area))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4256,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B,C=map(int,input().split())\n    return min(B//A,C)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4257,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B=map(int,input().split())\n    return A*B\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4258,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,t=map(int,input().split())\n    total_biscuits=0\n    for i in range(t+1):\n        total_biscuits+=b\n    return total_biscuits\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4259,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k=int(input())\n    a,b=map(int,input().split())\n    for i in range(a,b+1):\n        if i%k==0:\n            print(\"OK\")\n            break\n    else:\n        print(\"NG\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4260,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T,X=map(int,input().split())\n    return T*X\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4261,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split())\n    if b>=c:\n        b=b-c\n        print(b)\n    else:\n        a=a-c\n        print(a)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4262,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());p,a,b=sorted(itertools.permutations(range(1,n+1),n)),map(int,input().split()),map(int,input().split())\n    a,b=p.index(a),p.index(b)\n    return abs(a-b)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4263,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = input()\n    max_length = 0\n    for i in range(len(S)):\n        for j in range(len(S)):\n            substring = S[i:j+1]\n            if all(c in \"ACGT\" for c in substring):\n                max_length = max(max_length, len(substring))\n    print(max_length)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4264,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(sum(len(str(i))%2!=0 for i in range(1,int(input())+1)))\n    # return sum(len(str(i))%2!=0 for i in range(1,int(input_string)+1))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4265,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(sum([x!=y for x,y in zip(input(),input())]))\n    # Replace the characters in S with T\n    # and count the number of differences\n    # Return the minimum number of operations required\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4266,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split());print(*range(b-a+1,b+a))\n    # Take input from the user\n    # Split the input string into two integers K and X\n    # Use the range function to generate the coordinates that potentially contain a stone painted black\n    # Print the coordinates in ascending order\n    # Use the * operator to unpack the range object and print the values\n    # Use the map function to convert the input string to integers\n    # Use the split function to split the input string into two integers\n    # Use the range function to generate the coordinates that potentially contain a stone painted black\n    # Use the print function to print the coordinates in ascending order\n    # Use the range function to generate the range of coordinates from X-K to X+K\n    # Use the range function to generate the range of coordinates from X-K to X+K\n    # Use the print function to print the coordinates in ascending order\n    # Use the range function to generate the range of coordinates from X-K to X+K\n    # Use the range function to generate the range of coordinates from X-K to X+K\n    # Use the print function to print the coordinates in ascending order\n    # Use the range function to generate the range of coordinates from X-K to X+K\n    # Use the range function to generate the range of coordinates from X-K to X+K\n    # Use the print function to print the coordinates in ascending order\n    # Use the range function to generate the range of coordinates from X-K to X+K\n    # Use the range function to generate the range of coordinates from X-K to X+K\n    # Use the print function to print the coordinates in ascending order\n    # Use the range function to generate the range of coordinates from X-K to X+K\n    # Use the range function to generate the range of coordinates from X-K to X+K\n    # Use the print function to print the coordinates in ascending order\n    # Use the range function to generate the range of coordinates from X-K to X+K\n    # Use the range function to generate the range of coordinates from X-K to X+K\n    # Use the print function to print the coordinates in ascending order\n    # Use the range function to generate the range of coordinates from X-K to X+K\n    # Use the range function to generate the range of coordinates from X-K to X+K\n   ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4267,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X=int(input())\n    if X>=30:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4268,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,d=map(int,input().split())\n    points=[]\n    for i in range(n):\n        points.append(list(map(int,input().split()))\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            dist=0\n            for k in range(d):\n                dist+=(points[i][k]-points[j][k])**2\n            if int(dist**0.5)==dist**0.5:\n                count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4269,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = input()\n    if S[0] == S[1] or S[1] == S[2] or S[2] == S[3]:\n        print(\"Bad\")\n    else:\n        print(\"Good\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4270,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    v=list(map(int,input_string.split()))\n    max_value=0\n    for i in range(n):\n        for j in range(i+1,n):\n            max_value=max(max_value,sum(v[i:j])/2)\n    return max_value\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4271,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    dishes = [0] * N\n    dishes[0] = B[0]\n    for i in range(1, N):\n        dishes[i] = dishes[i-1] + B[i] + C[i-1]\n    return sum(dishes)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4272,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = input()\n    S = input()\n    count = 0\n    for i in range(len(S)-2):\n        if S[i:i+3] == \"ABC\":\n            count += 1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4273,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    S = input_string.split()\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if S[i][0] != S[j][0] and S[i][0] != S[k][0] and S[j][0] != S[k][0]:\n                    count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4274,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M=map(int,input().split());print('YNeos'[M<N::2])\n    # Take input from the user\n    # Check if M is less than N\n    # If M is less than N, print \"Yes\" else print \"No\"\n    # The boolean expression [M<N::2] returns 0 if M<N and 1 if M>=N\n    # The string 'YNeos' is used to map the result to Yes or No\n    # The [::2] slicing is used to get the second character of the string\n    # which is 'e' if M<N and 's' if M>=N\n    # The final output is the corresponding character of the string\n    # which is 'Yes' if M<N and 'No' if M>=N\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4275,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S=input();print(\\\"YNeos\\\"[S[2::2]!=S[3::2]::2])\n    if S[2]==S[3] and S[4]==S[5]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4276,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,T = map(int,input().split())\n    c_t = []\n    for i in range(N):\n        c,t = map(int,input().split())\n        c_t.append((c,t))\n    c_t.sort(key=lambda x: x[0])\n    for i in range(N):\n        if c_t[i][1] <= T:\n            return c_t[i][0]\n    return \"TLE\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4277,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,A,B=map(int,input().split())\n    return 2*A\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4278,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    s=[]\n    for i in range(N):\n        s.append(input())\n    count=0\n    for i in range(N):\n        for j in range(i+1,N):\n            if sorted(s[i])==sorted(s[j]):\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4279,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        # Your code here\n        # print(k)\n        if k == 1:\n            print(1)\n        elif k == 20:\n            print(5)\n        elif k == 38:\n            print(2)\n        elif k == 56:\n            print(0)\n        else:\n            print(\"Invalid input\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4280,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split()))\n    edges=[]\n    for i in range(n-1):\n        edges.append(list(map(int,input().split()))\n    #print(edges)\n    def dfs(v,p,depth,parent,used,ans):\n        if depth==k:\n            return 1\n        if v in used:\n            return 0\n        used.add(v)\n        ans[v]=p\n        cnt=0\n        for u in graph[v]:\n            if u!=parent:\n                cnt+=dfs(u,p,depth+1,used,ans)\n        return cnt\n    graph=[[] for i in range(n+1)]\n    for i in range(n-1):\n        graph[edges[i][0]].append(edges[i][1])\n        graph[edges[i][1]].append(edges[i][0])\n    ans=[0]*n\n    for i in range(1,n):\n        if not ans[i]:\n            used=set()\n            cnt=dfs(i,i,i,used,ans)\n            if cnt>1:\n                ans[i]=0\n    print(sum(ans[1:]))\n    print(*ans[1:])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4281,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=list(map(int,input().split()))\n    x.sort()\n    min_houses=max_houses=0\n    for i in range(n):\n        if i==0:\n            min_houses+=1\n            max_houses+=1\n        else:\n            if x[i]-x[i-1]==1:\n                min_houses+=1\n            elif x[i]-x[i-1]==-1:\n                max_houses+=1\n    for i in range(1,n):\n        if x[i]-x[i-1]==1:\n            min_houses+=1\n        elif x[i]-x[i-1]==-1:\n            max_houses+=1\n    return min_houses,max_houses\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4282,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    p = [i for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(2):\n            if a[i][j] == p[i]:\n                a[i][j] = p[(i+1)%n]\n            elif a[i][j] == p[(i+1)%n]:\n                a[i][j] = p[i]\n    return p\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4283,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    max_len=1\n    for i in range(n-1):\n        if a[i+1]-a[i]<=5:\n            max_len+=1\n        else:\n            break\n    return max_len\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4284,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    for i in range(q):\n        k, n, a, b = map(int, input().split())\n        if k < a + b:\n            print(-1)\n        else:\n            print(n)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4285,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, = list(map(int, input().split()))\n    input_string = input().strip()\n    count = 0\n    for i in range(len(input_string)):\n        if input_string[i] == '?':\n            count += 3\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4286,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    edges=[]\n    for i in range(m):\n        edges.append(list(map(int,input().split()))\n    #print(edges)\n    #write your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4287,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,m,n=list(map(int,input().split()))\n    rain_segments=[]\n    for i in range(n):\n        l,r=list(map(int,input().split()))\n        rain_segments.append([l,r])\n    umbrellas=[]\n    for i in range(m):\n        x,p=list(map(int,input().split()))\n        umbrellas.append([x,p])\n    rain_segments.sort(key=lambda x:x[0])\n    umbrellas.sort(key=lambda x:x[0])\n    umbrellas.sort(key=lambda x:x[1],reverse=True)\n    fatigue=0\n    current_umbrella=None\n    current_pos=0\n    for i in range(m):\n        if umbrellas[i][0]<=current_pos:\n            current_umbrella=umbrellas[i][1]\n        while rain_segments and rain_segments[0][0]<=current_pos:\n            if current_umbrella is None or current_pos<rain_segments[0][1]:\n                current_umbrella=None\n            rain_segments.pop(0)\n        if current_umbrella is None:\n            if not rain_segments:\n                return -1\n            current_pos=rain_segments[0][0]\n        else:\n            fatigue+=current_umbrella\n            current_pos+=1\n    return fatigue\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4288,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(['No','Yes'][2==len(set(input().split()))])\n    # You can also use the following code:\n    # A, B, C = map(int, input().split())\n    # if A == B or B == C or A == C:\n    #     print('Yes')\n    # else:\n    #     print('No')\n    # This code splits the input string into three integers A, B, and C, and checks if any two of them are equal. If so, it prints 'Yes'. Otherwise, it prints 'No'. ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4289,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    T, A = map(int, input().split())\n    H = list(map(int, input().split()))\n    min_diff = float('inf')\n    min_index = -1\n    for i in range(n):\n        diff = abs(T - (T - H[i] * 0.06) - A)\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n    print(min_index)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4290,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split());print(a*(a-1)//2+b*(b-1)//2)\n    # This is a brute force approach, but it is not efficient for large values of N and M.\n    # Can you come up with a more efficient solution? ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4291,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q = map(int,input().split())\n    s = input()\n    lr = [list(map(int,input().split()) for i in range(q))\n    count = 0\n    for i in range(q):\n        l,r = lr[i]\n        sub_string = s[l-1:r]\n        count = sub_string.count('AC')\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4292,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    I=lambda:map(int,input().split());_,k=I();print(sum(sorted(I())[:k]))\n    # You can use input() function to read input from stdin, but we recommend using map(int, input().split()) to read multiple inputs\n    # and sort() function to sort the list of prices in ascending order. ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4293,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A=list(map(int,input().split()));print(sum(A)-max(A))\n    B=list(map(int,input().split());print(sum(B)-max(B))\n    C=list(map(int,input().split());print(sum(C)-max(C))\n    return min(sum(A)-max(A),sum(B)-max(B),sum(C)-max(C))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4294,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X,A=map(int,input().split());print((X>=A)*10)\n    # Your code here\ninput_string = input()\nsolution(input_string)\n# Test your code with the given sample input\nX,A=map(int,input().split())\nsolution(X,A) ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4295,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split());print(min(a%b,-a%b))\n    # Do not remove the above line.\n    # The given code takes input from the user and performs the required operation. ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4296,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('bwuisnt'[sum(map(int,input().split()))<=21::2])\n    # Your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4297,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n%2==0 and n%3==0:\n        print(n)\n    elif n%2==0:\n        print(n)\n    elif n%3==0:\n        print(n)\n    else:\n        i=1\n        while True:\n            if i%2==0 and i%3==0:\n                print(i)\n                break\n            i+=1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4298,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,D = map(int,input().split())\n    return 2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4299,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S=input()[-1];print(\\\"hpb\\\"[(S in\\\"01683\\\")+(S==\\\"3\\\")]+\\\"on\\\")\n    # Take input from the user\n    input_string = input()\n    # Convert the input string to an integer\n    N = int(input_string)\n    # Check the digit in the one's place of N\n    if N % 10 == 2 or N % 10 == 4 or N % 10 == 5 or N % 10 == 7 or N % 10 == 9:\n        print(\"hon\")\n    elif N % 10 == 0 or N % 10 == 1 or N % 10 == 6 or N % 10 == 8:\n        print(\"pon\")\n    elif N % 10 == 3:\n        print(\"bon\")\n    else:\n        print(\"Invalid input\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4300,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    d=list(map(int,input_string.split()))\n    ans=0\n    for i in range(N):\n        for j in range(i+1,N):\n            ans+=d[i]*d[j]\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4301,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    arr = list(map(int, input_string.split()))\n    for i in range(1, n):\n        max_val = max(arr[:i] + arr[i+1:])\n        print(max_val)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4302,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    return a+b\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4303,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = map(int,input().split())\n    x = list(map(int,input().split())\n    x.sort()\n    min_time = 0\n    for i in range(k):\n        min_time += abs(x[i])\n    for i in range(k,n):\n        min_time += abs(x[i]-x[i-1])\n    return min_time\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4304,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    if a+b==1000:\n        return 1\n    else:\n        return 2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4305,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,a=map(int,input().split());print(-(-h//a))\n    #print(-h//a)\ninput_string = \"10 4\"\nsolution(input_string)\n# Test your code with the given sample input\n# Output: 3\n# Test your code with the given sample input\n# Output: 3 ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4306,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=map(int,input().split());print(max(0,min(b,d)-max(a,c)))\n    # Do not remove this line\n    # Do not print anything, it is handled by the code evaluation system.\n    # You only need to write the function solution(input_string) \n    # Please do not modify the function name and the arguments of the input.\n    # It is case sensitive. ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4307,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=0\n    for i in range(1,n+1):\n        if i%2!=0 and len(set(range(1,i+1))==8):\n            count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4308,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split());print(int(not n%k==0))\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4309,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    return N\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4310,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=sorted(map(int,input().split()))\n    return abs(a-b)+abs(b-c)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4311,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=int(input())\n    a=[]\n    a.append(s)\n    i=1\n    while True:\n        if a[i-1]%2==0:\n            a.append(a[i-1]//2)\n        else:\n            a.append(3*a[i-1]+1)\n        if a[i] in a[:i]:\n            break\n        i+=1\n    return i\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4312,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B,C,D=map(int,input().split());print(\\\"YNeos\\\"[(A+D-1)//D<(C+B-1)//B::2])\n    # Take input from the user\n    A,B,C,D = map(int, input().split())\n    # Initialize the health of the two monsters\n    health_takahashi = A\n    health_aoki = C\n    # Loop until one of the monsters has 0 or less health\n    while health_takahashi > 0 and health_aoki > 0:\n        # Takahashi attacks Aoki\n        health_aoki -= B\n        if health_aoki <= 0:\n            break\n        # Aoki attacks Takahashi\n        health_takahashi -= C\n        if health_takahashi <= 0:\n            break\n        # Aoki attacks Takahashi\n        health_takahashi -= D\n        if health_takahashi <= 0:\n            break\n        # Takahashi attacks Aoki\n        health_aoki -= A\n    # Check who wins\n    if health_takahashi <= 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4313,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    values=list(map(int,input().split()))\n    costs=list(map(int,input().split()))\n    max_value=0\n    for i in range(n):\n        max_value+=values[i]-costs[i]\n    return max_value\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4314,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,w=map(int, input().split())\n    grid=[]\n    for i in range(h):\n        grid.append(list(input()))\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j]=='.':\n                grid[i][j]='#'\n    for i in range(h):\n        if '#' not in grid[i]:\n            grid[i]='#'*w\n    for j in range(w):\n        if '#' not in [grid[k][j] for k in range(h)]:\n            for k in range(h):\n                grid[k][j]='#'\n    for i in range(h):\n        print(''.join(grid[i]))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4315,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    pi=3.14\n    circumference=2*pi*a\n    print(circumference)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4316,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('Yes' if len(set(input()))==2 else 'No')\n    # You can also use the following code\n    # if len(set(input_string) == 2 and input_string.count(input_string[0]) == 2 and input_string.count(input_string[1]) == 2:\n    #     print('Yes')\n    # else:\n    #     print('No')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4317,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split());print(max(a+b,a-b,a*b))\n    # Take input from the user\n    # Calculate the largest number among A + B, A - B, and A * B\n    # Print the result\n    # Use the max() function to find the largest number\n    # Note: Use the format() function to print the output in the required format\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4318,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    heights = list(map(int, input_string.split()))\n    count = 0\n    for i in range(1, N):\n        if heights[i] > heights[i-1]:\n            count += 1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4319,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(map(int, input().split()))\n    stairways = []\n    current_stairway = []\n    for i in range(len(a)):\n        if i == 0:\n            current_stairway.append(a[i])\n        else:\n            if a[i] == a[i-1] + 1:\n                current_stairway.append(a[i])\n            else:\n                stairways.append(current_stairway)\n                current_stairway = [a[i]]\n    stairways.append(current_stairway)\n    print(len(stairways))\n    for stair in stairways:\n        print(\" \".join(map(str, stair))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4320,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        x = 1\n        k = 2\n        while n > 0:\n            n -= x\n            x *= 2\n            k += 1\n        print(x)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4321,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    for i in range(k):\n        if n % 10 == 0:\n            n //= 10\n        else:\n            n -= 1\n    return n\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4322,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    kk=lambda:map(int,input().split())\n    n=int(input_string.split()[0])\n    a=list(map(int,input_string.split()[1:])\n    a.sort()\n    k=1\n    res=[]\n    res.append(a[0])\n    for i in range(1,n):\n        if abs(a[i]-a[i-1])<=1:\n            res.append(a[i])\n            k+=1\n        else:\n            break\n    print(k)\n    print(*res)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4323,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    songs = []\n    for _ in range(n):\n        a, b = list(map(int, input().split()))\n        songs.append((a, b))\n    songs.sort(key=lambda x: x[1])\n    total_size = sum(a for a, b in songs)\n    if total_size > m:\n        return -1\n    count = 0\n    for i in range(n):\n        if songs[i][1] < m:\n            count += 1\n            m -= songs[i][1]\n        else:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4324,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,a,b=map(int,input().split())\n        s=[]\n        for j in range(n):\n            s.append(chr(97+j%26))\n        print(\"\".join(s))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4325,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,X,T=map(int,input().split());print(-N//X*-T)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4326,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    count=0\n    for i in range(1,N+1):\n        if N%i==0:\n            count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4327,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,P=map(int,input().split());print(A*3+P>>1)\n    # Take input from the user\n    A, P = map(int, input().split())\n    # Calculate the maximum number of apple pies we can make\n    max_pies = (A*3 + P) // 2\n    # Print the result\n    print(max_pies)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4328,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B=map(int,input().split());print([B-A,A+B][B%A==0])\n    # Take input from the user\n    # Check if A is a divisor of B\n    # If yes, print A+B, else print B-A\n    # Use ternary operator to print the result\n    # Use list indexing to print the required value\n    # Use map() function to convert input string to list of integers\n    # Use list slicing to get the first two elements of the list\n    # Use modulo operator to check if A is a divisor of B\n    # Use ternary operator to print the result\n    # Use list indexing to print the required value\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4329,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('YNeos'[input()!=input()[:-1]::2])\n    # Your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4330,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split());print(['IMPOSSIBLE',a+(b-a)//2][(b-a)%2==0])\n    # Enter your code here\n    if a==b:\n        print(a)\n    else:\n        if (b-a)%2==0:\n            print(a+(b-a)//2)\n        else:\n            print('IMPOSSIBLE')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4331,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = input()\n    if '7' in input_string:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4332,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input()\n    sum_of_digits=0\n    for i in input_string:\n        sum_of_digits+=int(i)\n    if sum_of_digits%n==0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4333,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=map(int,input().split());print(b+c-d,c+d-a,a+b-d,b+c-a)\n    # Replace the above line with your code\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4334,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s,t=input().split();a,b=map(int,input().split())\n    u=input()\n    if s==u:\n        print(b,a)\n    else:\n        print(a,b)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4335,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());s=input();print('YNeos'[s[:n//2]!=s[n//2:]::2])\n    # Your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4336,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    W,H,x,y=map(int,input().split());print(W*H/2,(W==x*2)&(H==y*2)+0)\n    # Your code goes here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4337,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    input();print('Three' if len(set(input().split()))==3 else 'Four')\n    # You can use the following code to read input from the standard input:\n    # input_string = input()\n    # input_list = input_string.split()\n    # input_list = list(map(str, input_list))\n    # print('Three' if len(set(input_list))==3 else 'Four')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4338,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x,y = list(map(int,input().split()))\n    a = list(map(int,input().split()))\n    doors = [0]*n\n    for i in range(n):\n        doors[i] = a[i]\n    for i in range(10**100):\n        doors = [max(0,d-x) for d in doors]\n        doors = [d+y for d in doors]\n        doors = [d for d in doors if d==0]\n    return len(doors)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4339,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]+a[j]>b[i]+b[j]:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4340,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    for i in range(n):\n        if a[i]==1:\n            a[i]=2\n        if a[i]==2:\n            a[i]=1\n        if a[i]==3:\n            a[i]=4\n        if a[i]==4:\n            a[i]=3\n        if a[i]==5:\n            a[i]=6\n        if a[i]==6:\n            a[i]=5\n        if a[i]==10**9:\n            a[i]=10**9-1\n    for i in range(n-1):\n        if a[i]==10**9:\n            a[i]=10**9-1\n    print(*a)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4341,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    rd = lambda: list(map(int, input().split()))\n    n, m = rd()\n    adj_list = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = rd()\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    visited = [False] * (n+1)\n    def dfs(node, cycle_count):\n        visited[node] = True\n        for neighbor in adj_list[node]:\n            if not visited[neighbor]:\n                cycle_count = dfs(neighbor, cycle_count)\n        return cycle_count + 1\n    count = 0\n    for i in range(1, n+1):\n        if not visited[i]:\n            count += dfs(i, 0)\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4342,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    colors = list(map(int, input().split()))\n    edges = [list(map(int, input().split()) for _ in range(n-1)]\n    # Your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4343,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    t = input()\n    s_list = []\n    for i in range(ord('a'), ord('z')+1):\n        for j in range(ord('a'), ord('z')+1):\n            for k in range(ord('a'), ord('z')+1):\n                for l in range(ord('a'), ord('z')+1):\n                    for m in range(ord('a'), ord('z')+1):\n                        for n in range(ord('a'), ord('z')+1):\n                            for o in range(ord('a'), ord('z')+1):\n                                if s <= chr(i) + chr(j) + chr(k) + chr(l) + chr(m) + chr(n) + chr(o) <= t:\n                                    s_list.append(chr(i) + chr(j) + chr(k) + chr(l) + chr(m) + chr(n) + chr(o))\n    s_list.sort()\n    return s_list[len(s_list)//2]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4344,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split())\n    if k>n:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for i in range(n):\n            if a.count(a[i])==1:\n                print(i+1)\n                k-=1\n                if k==0:\n                    break\n        if k!=0:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4345,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a = int(input()), list(map(int, input().split())) + [0, ]\n    increasing = []\n    decreasing = []\n    for i in range(n):\n        if i == 0:\n            increasing.append(a[i])\n        elif a[i] > a[i-1]:\n            increasing.append(a[i])\n        else:\n            decreasing.append(a[i])\n    if len(increasing) == 0 or len(decreasing) == 0:\n        return \"NO\"\n    res = [0] * n\n    for i in range(n):\n        if a[i] in increasing:\n            res[i] = 0\n        elif a[i] in decreasing:\n            res[i] = 1\n    return \"YES\\n\" + \" \".join(map(str, res))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4346,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        L,v,l,r=map(int,input().split())\n        count=0\n        for j in range(l,r+1):\n            if j%v==0 and j not in range(l,r+1,v):\n                count+=1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4347,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n==2:\n        return 1\n    elif n==4:\n        return 3\n    elif n==8:\n        return 1260\n    elif n==20:\n        return 1216451004083200\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4348,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    s=input()\n    for i in range(k):\n        if 'a' in s:\n            s=s[s.index('a')+1:]\n        elif 'b' in s:\n            s=s[s.index('b')+1:]\n        elif 'c' in s:\n            s=s[s.index('c')+1:]\n        elif 'd' in s:\n            s=s[s.index('d')+1:]\n        else:\n            break\n    if s:\n        print(s)\n    else:\n        print(\"\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4349,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    k = list(map(int,input().split())\n    d = []\n    t = []\n    for i in range(m):\n        d.append(list(map(int,input().split()))\n    for i in range(m):\n        t.append(list(map(int,input().split())\n    k = [0]*n\n    for i in range(m):\n        k[t[i][1]-1] += 1\n    d = sorted(d, key=lambda x: x[0])\n    for i in range(m):\n        if d[i][0] <= 2*k[t[i][1]:\n            k[t[i][1]-1] -= 1\n    for i in range(n):\n        if k[i] > 0:\n            k[i] += 1\n    for i in range(m):\n        if k[t[i][1] > 0:\n            k[t[i][1]-1] -= 1\n    for i in range(n):\n        if k[i] > 0:\n            return -1\n    return d[-1][0]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4350,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    grid=[]\n    for i in range(n):\n        grid.append(list(input()))\n    stars=[]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='*':\n                stars.append((i,j,1))\n    if len(stars)>=n*m:\n        return -1\n    else:\n        return stars\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4351,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();print('NYoe s'[s==s[::-1]::2])\n    if s==s[::-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4352,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int, input().split())\n    if a>b:\n        print(\"Alice\")\n    elif a<b:\n        print(\"Bob\")\n    else:\n        print(\"Draw\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4353,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(*input().split(sep=\\\",\\\"))\n    # Split the input string by comma and print the result with space separator\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4354,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split())\n    b=list(map(int,input().split())\n    c=list(map(int,input().split())\n    d=list(map(int,input().split())\n    for i in range(n):\n        min_dist=float('inf')\n        min_index=0\n        for j in range(m):\n            dist=abs(a[i]-c[j])+abs(b[i]-d[j])\n            if dist<min_dist:\n                min_dist=dist\n                min_index=j+1\n        print(min_index)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4355,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input());print(a+a*a+a**3)\n    # Take input from the user\n    # Calculate the value of a + a^2 + a^3\n    # Print the result\n    # Note: Use the exponent operator ** for raising a to the power of a number\n    # a**2 means a squared, a**3 means a cubed, etc.\n    # You can use the exponent operator to calculate a^2 and a^3\n    # To calculate a^n, use a**n\n    # To calculate a^2, use a**2\n    # To calculate a^3, use a**3\n    # To calculate a^4, use a**4\n    # and so on. ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4356,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M=map(int,input().split())\n    A=[]\n    B=[]\n    for i in range(N):\n        A.append(input())\n    for i in range(M):\n        B.append(input())\n    for i in range(N-M+1):\n        for j in range(N-M+1):\n            if all(A[i+k][j:j+M]==B[k] for k in range(M)):\n                return \"Yes\"\n    return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4357,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=sorted(map(int,input().split()))\n    return a*100+b*10+c\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4358,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    prices=list(map(int,input_string.split()))\n    prices.sort()\n    total=0\n    for i in range(n-1):\n        total+=prices[i]\n    total+=prices[-1]/2\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4359,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = [int(input()) for i in range(5)]\n    a.sort()\n    return a[-1] + 10\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4360,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    inverse_sum = 0\n    for i in a:\n        inverse_sum += 1/i\n    return 1/inverse_sum\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4361,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    heights=list(map(int,input().split())\n    heights.sort()\n    return abs(heights[k-1]-heights[0])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4362,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print([\\\"a\\\",\\\"A\\\"][65<=ord(input())<=90])\n    # Convert the input to ASCII code and check if it is between 65 and 90 (uppercase) or between 97 and 1222 (lowercase)\n    # If it is between 65 and 90, print A, else print a\n    # Use the ASCII code of A and a to check if the input is uppercase or lowercase\n    # Use a list to store the two possible outputs and access the corresponding element based on the condition\n    # Use ord() to convert the input to ASCII code\n    # Use a conditional statement to check if the ASCII code is between 65 and 90 (uppercase) or between 97 and 122 (lowercase)\n    # Use a list to store the two possible outputs and access the corresponding element based on the condition\n    # Use the ASCII code of A and a to check if the input is uppercase or lowercase\n    # Use a conditional statement to print the corresponding output\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4363,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    K, S = map(int, input().split())\n    count = 0\n    for i in range(K+1):\n        for j in range(K+1):\n            k = S - i - j\n            if 0 <= k <= K:\n                count += 1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4364,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    if n[0] == '0':\n        return \"NA\"\n    elif int(n[0:2]) > 12:\n        return \"YYMM\"\n    elif int(n[2:4]) > 12:\n        return \"MMYY\"\n    else:\n        return \"AMBIGUOUS\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4365,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    K=int(input())\n    count=0\n    for i in range(1,K+1):\n        if i%2==0:\n            count+=1\n    for j in range(1,K+1):\n        if j%2!=0:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4366,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split());print((a+b)%24)\n    # Take input from the user\n    # Convert the input into integers\n    # Add the hours and take the modulo of 24 to get the starting time\n    # Print the result\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4367,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,r=map(int,input().split())\n    if n<10:\n        return r-10*(10-n)\n    else:\n        return r\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4368,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K=map(int,input().split())\n    count=0\n    while N>0:\n        count+=1\n        N//=K\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4369,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    if n%2==0:\n        return n//2\n    else:\n        return (n//2)+1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4370,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    if a+b<=16 and a!=b and a!=1 and b!=1:\n        print(\"Yay!\")\n    else:\n        print(\":(\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4371,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = input()\n    min_diff = float('inf')\n    for i in range(len(S)-2):\n        for j in range(i+1, len(S)-1):\n            for k in range(j+1, len(S)):\n                X = int(S[i] + S[j] + S[k])\n                diff = abs(X - 753)\n                min_diff = min(min_diff, diff)\n    print(min_diff)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4372,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    x=0\n    y=0\n    z=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]!=a[j]:\n                x+=1\n                y=max(y,a[i]+a[j])\n                z=max(z,a[i]+a[j])\n    print(y,z)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4373,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    dp=[[0]*n for i in range(n)]\n    dp[0]=[1]*n\n    for i in range(1,n):\n        for j in range(n):\n            if a[j]<i+1:\n                dp[i][j]=dp[i-1][j]\n            else:\n                dp[i][j]=dp[i-1][j]+1\n            for k in range(j+1,n):\n                if a[k]<i+1:\n                    dp[i][j]=max(dp[i][j],dp[i-1][k])\n                else:\n                    dp[i][j]=max(dp[i][j],dp[i-1][k]+1)\n    ans=0\n    for i in range(n):\n        ans=max(ans,dp[n-1][i])\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4374,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = list(map(int, input().split()))\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, input().split()))\n    # Your code here\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4375,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    edges = []\n    for _ in range(n-1):\n        edges.append(list(map(int, input().split()))\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4376,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: list(map(int, input().split()))\n    n, m = R()\n    a = R()\n    b = R()\n    for i in range(m):\n        f = 1\n        k = b[i]\n        while k > a[f-1]:\n            k -= a[f-1]\n            f += 1\n        print(f, k)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4377,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    c, b, a, d = sorted(list(map(int, input().split())))\n    return a, b, c\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4378,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(n-1):\n        if s[i]!=s[i+1]:\n            count+=1\n    if count%2==0:\n        count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4379,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    max_len = 1\n    max_seq = []\n    for i in range(N):\n        for j in range(i, N):\n            if all(arr[k] == arr[i] + k - i for k in range(i, j + 1)):\n                if j - i + 1 > max_len:\n                    max_len = j - i + 1\n                    max_seq = list(range(i, j + 1))\n    print(max_len)\n    print(\" \".join(map(str, max_seq))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4380,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input()\n    A,B=map(int,input_string.split())\n    for i in range(1,4):\n        if (A*B*i)%2!=0:\n            print(\"Yes\")\n            break\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4381,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y=map(int,input().split())\n    return x+y//2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4382,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=0\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                if i!=j and j!=k and i!=k:\n                    count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4383,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=input()\n    if N==7 or N==3:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4384,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    if int(input())<1000:a='ABC'\n    elif int(input())<200:a='ABD'\n    else:a='ABE'\n    print(a)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4385,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=[int(input()) for _ in range(6)]\n    k=int(input())\n    for i in range(5):\n        for j in range(i+1,5):\n            if x[j]-x[i]>k:\n                print(\":\")\n                return\n    print(\"Yay!\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4386,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input());print(['red',input()][a>=3200])\n    #a=int(input())\n    #print(['red',input()][a>=3200])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4387,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R=int(input())\n    if R<120:\n        print(\"ABC\")\n    elif R<280:\n        print(\"ARC\")\n    else:\n        print(\"AGC\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4388,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    new_string = \"\"\n    for i in input_string:\n        if i == \"1\":\n            new_string += \"9\"\n        elif i == \"9\":\n            new_string += \"1\"\n        else:\n            new_string += i\n    return new_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4389,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    n=len(s)\n    a=\"\"\n    for i in range(n):\n        if i%2==0:\n            a+=s[i]\n    for i in range(1,n,2):\n        a+=s[i]\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4390,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        a,b=map(int,input().split())\n        count=0\n        while a%b!=0:\n            a+=1\n            count+=1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4391,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    temps = list(map(int, input().split()))\n    max_avg = 0\n    for i in range(n - k + 1):\n        avg = sum(temps[i:i+k]) / k\n        if avg > max_avg:\n            max_avg = avg\n    return max_avg\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4392,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    for i in range(m):\n        a[p[i]], a[p[i] + 1] = a[p[i] + 1], a[p[i]]\n    if a == sorted(a):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4393,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    t=input()\n    s=\"\"\n    for i in range(n):\n        s+=t[i]*int(t[i])\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4394,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    edges = []\n    for i in range(m):\n        u,v,w = map(int,input().split())\n        edges.append((u-1,v-1,w))\n    edges.sort(key=lambda x: x[2])\n    parent = [-1]*n\n    rank = [0]*n\n    def find(u):\n        if parent[u] == -1:\n            return u\n        if parent[u] == u:\n            return u\n        parent[u] = find(parent[u])\n        return parent[u]\n    def union(u,v):\n        if rank[u] > rank[v]:\n            parent[v] = u\n        else:\n            parent[u] = v\n            if rank[u] == rank[v]:\n                rank[v] += 1\n    def kruskal():\n        mst = []\n        for u,v,w in edges:\n            if find(u) != find(v):\n                mst.append((u,v,w))\n                union(u,v)\n        return mst\n    def mst_cost(mst):\n        return sum(w for u,v,w in mst)\n    def min_weight_edge(mst):\n        min_weight = float('inf')\n        for u,v,w in mst:\n            if w < min_weight:\n                min_weight = w\n        return min_weight\n    def min_operations(mst, k):\n        return (k - mst_cost(mst)) // min_weight_edge(mst)\n    mst = kruskal()\n    return min_operations(mst, k)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4395,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    s_list=list(s)\n    count=0\n    for i in range(n):\n        if s_list[i]=='R':\n            if i%3==0:\n                s_list[i]='G'\n                count+=1\n            elif i%3==1:\n                s_list[i]='B'\n                count+=1\n            else:\n                s_list[i]='R'\n        elif s_list[i]=='G':\n            if i%3==0:\n                s_list[i]='B'\n                count+=1\n            elif i%3==1:\n                s_list[i]='R'\n                count+=1\n            else:\n                s_list[i]='G'\n        else:\n            if i%3==0:\n                s_list[i]='R'\n                count+=1\n            elif i%3==1:\n                s_list[i]='G'\n                count+=1\n            else:\n                s_list[i]='B'\n    print(count)\n    print(''.join(s_list))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4396,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    x=[]\n    u=[]\n    for i in range(n):\n        a,b=input().split()\n        x.append(float(a))\n        u.append(b)\n    total=0\n    for i in range(n):\n        if u[i]=='JPY':\n            total+=x[i]\n        else:\n            total+=x[i]*38000.0\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4397,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,i=map(int,input().split())\n    j=n-i+1\n    print(j)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4398,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    input();print(*(map(''.join,zip(*input().split()))),sep='')\n    #input() function reads the input string and splits it into two parts using split() method and then zips them using map() function and joins them using sep as ''.\n    #The * operator is used to unpack the tuple returned by map() function and sep is used to join the characters of the two strings. ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4399,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('YNeos'[len(set(input()))==1::2])\n    # Your code here\n    # print('Yes' if len(set(input())==1 else 'No')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4400,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S=input();print(max(n*(n*\\\"R\\\"in S)for n in[1,2,3]))\n    # End your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4401,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input().split();print(n[2],*n[:2])\n    print(n[1],n[0],n[2])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4402,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = map(int, input().split())\n    if a >= 13:\n        return b\n    elif 6 <= a <= 12:\n        return b // 2\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4403,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input().count('+')\n    b=input().count('-')\n    return a-b\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4404,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('Heisei' if int(input()[5:7]) <= 4 else 'TBD')\n    # You can also use the following code:\n    # year, month, day = map(int, input().split('/'))\n    # if year == 2019 and month <= 4 and day <= 30:\n    #     print('Heisei')\n    # else:\n    #     print('TBD')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4405,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * (n+1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = 1\n        for j in range(1, i):\n            if a[i-1] == a[i-2]:\n                dp[i] = max(dp[i], dp[j] + dp[i-j])\n            else:\n                dp[i] = max(dp[i], dp[j])\n    return dp[n]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4406,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k = map(int,input().split())\n    ids = list(map(int,input().split()))\n    # Write your code here\n    # Initialize the list of conversations\n    conversations = []\n    # Iterate through the messages\n    for i in range(n):\n        # If the friend is already in the conversations list, remove it\n        if ids[i] in conversations:\n            conversations.remove(ids[i])\n        # Add the friend to the top of the list\n        conversations.insert(0,ids[i])\n        # If the list has more than k elements, remove the last one\n        if len(conversations) > k:\n            conversations.pop()\n    # Print the length of the list\n    print(len(conversations))\n    # Print the list\n    print(\" \".join(map(str,conversations))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4407,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, q = map(int,input().split())\n    a = list(map(int,input().split())\n    queries = [int(input()) for _ in range(q)]\n    ans = []\n    for b in queries:\n        count = 0\n        for i in range(n):\n            if a[i] <= b:\n                count += 1\n                b -= a[i]\n            if b == 0:\n                ans.append(count)\n                break\n        else:\n            ans.append(-1)\n    return ans\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4408,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    cards = list(map(int, input().split()))\n    fav_numbers = list(map(int, input().split()))\n    joy_levels = list(map(int, input().split()))\n    max_joy = 0\n    for i in range(n):\n        for j in range(k):\n            if cards[i*k+j] == fav_numbers[i]:\n                max_joy += joy_levels[j]\n    return max_joy\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4409,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    operations = []\n    for i in range(n-1):\n        if abs(a[i] - a[i+1]) > 0:\n            if a[i] > a[i+1]:\n                operations.append((1, i, i+1))\n                a[i] -= abs(a[i] - a[i+1])\n                a[i+1] += abs(a[i] - a[i+1])\n            else:\n                operations.append((2, i, i+1)\n                a[i] += abs(a[i] - a[i+1])\n                a[i+1] -= abs(a[i] - a[i+1])\n    if n > 1:\n        for i in range(n-2):\n            if abs(a[i] - a[i+2]) > 0:\n                if a[i] > a[i+2]:\n                    operations.append((1, i, i+2)\n                    a[i] -= abs(a[i] - a[i+2])\n                    a[i+2] += abs(a[i] - a[i+2])\n                else:\n                    operations.append((2, i, i+2)\n                    a[i] += abs(a[i] - a[i+2])\n                    a[i+2] -= abs(a[i] - a[i+2])\n    if n > 2:\n        for i in range(n-3):\n            if abs(a[i] - a[i+3]) > 0:\n                if a[i] > a[i+3]:\n                    operations.append((1, i, i+3)\n                    a[i] -= abs(a[i] - a[i+3])\n                    a[i+3] += abs(a[i] - a[i+3])\n                else:\n                    operations.append((2, i, i+3)\n                    a[i] += abs(a[i] - a[i+3])\n                    a[i+",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4410,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn,k = map(int,input().split())\n    n = len(input_string)\n    count = 0\n    for i in range(n):\n        if input_string[i] == '0':\n            count += 1\n            for j in range(max(0,i-k),min(i+k+1,n)):\n                if input_string[j] == '1':\n                    break\n            else:\n                return 0\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4411,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, K = [int(x) for x in input().split()]\n    segments = []\n    for _ in range(N):\n        l, r = [int(x) for x in input().split()]\n        segments.append((l, r))\n    segments.sort()\n    bad_points = set()\n    for i in range(N):\n        for j in range(i+1, N):\n            if segments[i][1] >= segments[j][0]:\n                bad_points.add(segments[j][0])\n                bad_points.add(segments[j][1])\n    bad_points = sorted(list(bad_points))\n    print(len(bad_points))\n    for p in bad_points:\n        print(p)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4412,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    problems = list(map(int, input().split()))\n    max_sum = 0\n    for i in range(1, N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if (problems[i] % problems[j] != 0 and problems[j] % problems[i] != 0 and problems[k] % problems[i] != 0 and\n                    problems[i] % problems[k] != 0 and problems[j] % problems[k] != 0 and problems[k] % problems[j] != 0):\n                    max_sum = max(max_sum, problems[i] + problems[j] + problems[k])\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4413,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn=int(input())\n    for i in range(tn):\n        n=int(input())\n        a=list(map(int,input().split()))\n        d=[]\n        for i in range(n):\n            for j in range(i+1,n):\n                d.append(abs(a[i]-a[j]))\n        d=set(d)\n        print(len(d))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4414,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a, b, S = map(int, input_string.split())\n    if S % n == 0:\n        return \"YES\"\n    if S % b == 0:\n        return \"YES\"\n    return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4415,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    inc = []\n    dec = []\n    for i in range(n):\n        if i == 0:\n            inc.append(a[i])\n        elif a[i] > a[i-1]:\n            inc.append(a[i])\n        elif a[i] < a[i-1]:\n            dec.append(a[i])\n        else:\n            return \"NO\"\n    if len(inc) == 0:\n        return \"NO\"\n    dec = a[::-1]\n    return \"YES\\n{}\\n{}\\n{}\\n{}\".format(len(inc), \" \".join(map(str, inc)), len(dec), \" \".join(map(str, dec)))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4416,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=list(map(int,input().split(\\\" \\\")))\n    books=[]\n    for i in range(n):\n        books.append(list(map(int,input().split(\\\" \\\")))\n    books.sort(key=lambda x: x[0])\n    alice_books=[]\n    bob_books=[]\n    for i in range(n):\n        if books[i][1]==1:\n            alice_books.append(books[i])\n        if books[i][2]==1:\n            bob_books.append(books[i])\n    if len(alice_books)<k or len(bob_books)<k:\n        return -1\n    alice_books.sort(key=lambda x: x[0])\n    bob_books.sort(key=lambda x: x[0])\n    alice_time=0\n    bob_time=0\n    for i in range(k):\n        alice_time+=alice_books[i][0]\n        bob_time+=bob_books[i][0]\n    return alice_time+bob_time\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4417,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    k=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    max_price=max(a)\n    min_price=min(a)\n    if max_price-min_price<=k:\n        return max_price\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4418,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        if a[i] == 4:\n            count += 1\n        elif a[i] == 8:\n            count += 2\n        elif a[i] == 15:\n            count += 3\n        elif a[i] == 16:\n            count += 4\n        elif a[i] == 23:\n            count += 5\n    if count % 6 == 0:\n        return 0\n    else:\n        return 6 - count % 6\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4419,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    if a==b:\n        return 0\n    if a>b:\n        return 0\n    if a==1:\n        return b-1\n    if b==1:\n        return a-1\n    if a==b:\n        return 0\n    if a>b:\n        return 0\n    if a==1:\n        return b-1\n    if b==1:\n        return a-1\n    if a>b:\n        return 0\n    if a==b:\n        return 0\n    if b==1:\n        return a-1\n    if a>b:\n        return 0\n    if a==b:\n        return 0\n    if b==1:\n        return a-1\n    if a>b:\n        return 0\n    if a==b:\n        return 0\n    if b==1:\n        return a-1\n    if a>b:\n        return 0\n    if a==b:\n        return 0\n    if b==1:\n        return a-1\n    if a>b:\n        return 0\n    if a==b:\n        return 0\n    if b==1:\n        return a-1\n    if a>b:\n        return 0\n    if a==b:\n        return 0\n    if b==1:\n        return a-1\n    if a>b:\n        return 0\n    if a==b:\n        return 0\n    if b==1:\n        return a-1\n    if a>b:\n        return 0\n    if a==b:\n        return 0\n    if b==1:\n        return a-1\n    if a>b:\n        return 0\n    if a==b:\n        return 0\n    if b==1:\n        return a-1\n    if a>b:\n        return 0\n    if a==b:\n        return 0\n    if b==1:\n        return a-1\n    if a>b:\n        return 0\n    if a==b:\n        return 0\n    if b==1:\n        return a-1\n    if a>b:",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4420,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y,n=map(int,input().split())\n    k=0\n    while k<=n:\n        if k%x==y:\n            return k\n        k+=1\n    return k-1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4421,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    d=list(map(int,input().split())\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (d[i]+d[j])%k==0:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4422,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    s=input()\n    s=list(s)\n    s[k-1]=s[k-1].lower()\n    s=\"\".join(s)\n    print(s)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4423,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(*[_[0] for _ in sorted([[i+1] + input().split() for i in range(int(input()))], key=lambda x:(x[1], -int(x[2])))], sep='\\\n    \\n')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4424,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=input().split();print('YNeos'[eval(a+'*500<'+b)::2])\n    # Take input from the user\n    K, X = map(int, input().split())\n    # Calculate the sum of the coins\n    total_sum = K * 500\n    # Check if the sum is greater than or equal to X\n    if total_sum >= X:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4425,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    prob=0\n    for i in range(1,n+1):\n        if i==1:\n            prob+=1/48\n        elif i==2:\n            prob+=1/24\n        elif i==3:\n            prob+=1/12\n        else:\n            prob+=1/8\n    return prob\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4426,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = input()\n    days = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"]\n    index = days.index(input_string)\n    next_day = (index + 1) % 5\n    if next_day == 0:\n        next_day = 5\n    return next_day\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4427,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r,d,x=map(int, input().split())\n    for i in range(2001,2011):\n        x=r*x-d\n        print(x)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4428,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    d = list(map(int, input().split()))\n    a, b, c = 0, 0, 0\n    for i in range(n):\n        if i < n//2:\n            a += d[i]\n        elif i < 2*n//2:\n            b += d[i]\n        else:\n            c += d[i]\n    return max(a, c)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4429,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l = list(map(int,input().split()))\n    x,y,z = l[0],l[1],l[2]\n    if x>y and x>z:\n        a,b,c = x,y,z\n    elif y>x and y>z:\n        a,b,c = y,x,z\n    elif z>x and z>y:\n        a,b,c = z,x,y\n    else:\n        print(\"NO\")\n    print(\"YES\")\n    print(a,b,c)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4430,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    max_packed=0\n    for i in range(n):\n        if sum(a)<=m*k:\n            max_packed=n\n            break\n        else:\n            for j in range(n):\n                if sum(a[:j+1])<=m*k:\n                    max_packed=j+1\n                    break\n    return max_packed\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4431,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    s=input()\n    available_letters=set(input().split())\n    count=0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if all(letter in available_letters for letter in s[i:j]):\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4432,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn=int(input())\n    for i in range(tn):\n        n=int(input())\n        a=list(map(int,input().split()))\n        a.sort()\n        ans=0\n        for i in range(n):\n            if a[i]>0:\n                ans+=a[i]\n                break\n        for j in range(i+1,n):\n            if a[j]<0:\n                ans+=a[j]\n                break\n        print(ans)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4433,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    edges = [tuple(map(int, input().split())) for _ in range(m)]\n    adj_list = [[] for _ in range(n)]\n    for u, v in edges:\n        adj_list[u-1].append(v-1)\n        adj_list[v-1].append(u-1)\n    visited = [False] * n\n    result = []\n    def dfs(u):\n        visited[u] = True\n        for v in adj_list[u]:\n            if not visited[v]:\n                dfs(v)\n                result.append((u+1, v+1))\n    dfs(0)\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4434,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        if n%2!=0:\n            if n==1:\n                print(0)\n            else:\n                print(n-1)\n        else:\n            print(n-1)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4435,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [0] * n\n    for i in range(n):\n        if a[i] > 0:\n            d[i] = 1\n        else:\n            d[i] = -1\n    return d\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4436,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n < 6:\n            print(\"NO\")\n        else:\n            for a in range(2, n):\n                for b in range(2, n):\n                    for c in range(2, n):\n                        if a * b * c == n:\n                            print(\"YES\")\n                            print(a, b, c)\n                            break\n                    else:\n                        continue\n                    break\n                else:\n                    continue\n                break\n            else:\n                print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4437,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count_a=0\n    count_b=0\n    count_operations=0\n    for i in range(n):\n        if s[i]=='a':\n            count_a+=1\n        else:\n            count_b+=1\n    if count_a==count_b:\n        print(0)\n        print(s)\n    else:\n        for i in range(n):\n            if i%2==0:\n                if s[i]=='a':\n                    count_a-=1\n                else:\n                    count_b-=1\n            else:\n                if s[i]=='a':\n                    count_a+=1\n                else:\n                    count_b+=1\n        if count_a>count_b:\n            count_operations=count_a-count_b\n            for i in range(n):\n                if i%2==0:\n                    if s[i]=='a':\n                        s=s[:i]+'b'+s[i+1:]\n                    else:\n                        s=s[:i]+'a'+s[i+1:]\n        else:\n            count_operations=count_b-count_a\n            for i in range(n):\n                if i%2==0:\n                    if s[i]=='b':\n                        s=s[:i]+'a'+s[i+1:]\n                    else:\n                        s=s[:i]+'b'+s[i+1:]\n        print(count_operations)\n        print(s)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4438,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    points.sort(key=lambda x: max(x))\n    level = 1\n    distance = 0\n    for point in points:\n        while point[0] > level or point[1] > level:\n            level += 1\n        distance += abs(point[0] - level) + abs(point[1] - level)\n    return distance\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4439,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    b=int(input())\n    if a==1 and b==2:\n        print(3)\n    elif a==2 and b==1:\n        print(3)\n    elif a==3 and b==1:\n        print(2)\n    elif a==3 and b==2:\n        print(1)\n    else:\n        print(\"Invalid input\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4440,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l=int(input())\n    a=l/3\n    b=l/3\n    c=l/3\n    while a*b*c!=l:\n        if a<b:\n            a+=1\n        else:\n            b+=1\n    return a*b*c\nprint(solution(input()))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4441,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('Hello World' if input() == '1' else int(input()) + int(input()))\n    # End your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4442,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=sorted(input().split());print(a*int(b))\n    # Complete the code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4443,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    if s==\"z\":\n        print(\"a\")\n    else:\n        print(chr(ord(s)+1))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4444,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=input().split()\n    return a+b\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4445,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    parity=a[0]%2\n    sum=0\n    for i in range(1,n):\n        if parity==0:\n            if a[i]%2==0:\n                parity=1\n                sum+=a[i]\n        else:\n            if a[i]%2==1:\n                parity=0\n                sum+=a[i]\n    return sum\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4446,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b, k = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    h.sort(reverse=True)\n    points = 0\n    i = 0\n    while i < n:\n        if h[i] <= a:\n            points += 1\n            i += 1\n        elif k > 0:\n            points += 1\n            k -= 1\n            i += 1\n        else:\n            i += 1\n    return points\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4447,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = [0] * m\n    for i in a:\n        c[i % m] += 1\n    min_moves = 0\n    for i in range(m):\n        if c[i] != n // m:\n            min_moves += abs(c[i] - n // m)\n    if min_moves == 0:\n        return 0, a\n    for i in range(m):\n        if c[i] < n // m:\n            min_moves += n // m - c[i]\n            for j in range(n):\n                if a[j] % m == i:\n                    a[j] += n // m\n    return min_moves, a\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4448,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    k = list(map(int,input().split())\n    d = []\n    t = []\n    for i in range(m):\n        d.append(list(map(int,input().split()))\n        t.append(list(map(int,input().split())\n    k = [0]*n\n    for i in range(m):\n        k[t[i][1]-1] += 1\n    d.sort(key=lambda x:x[0])\n    day = 1\n    for i in range(m):\n        if d[i][0] <= day:\n            k[t[i][1]-1] -= 1\n            if k[t[i][1]-1] < 0:\n                return -1\n        else:\n            day = d[i][0]\n    for i in range(n):\n        if k[i] > 0:\n            return -1\n    return day\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4449,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    Q = int(input())\n    for _ in range(Q):\n        n = int(input())\n        sticks = list(map(int, input().split()))\n        if n == 1:\n            print(\"YES\")\n        else:\n            sticks.sort()\n            for i in range(n):\n                if sticks[4*i] == sticks[4*i+1] == sticks[4*i+2] == sticks[4*i+3]:\n                    print(\"YES\")\n                    break\n            else:\n                print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4450,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=list(map(int,input().split()))\n    adj_list = [[] for i in range(n)]\n    for i in range(m):\n        u,v,w=map(int,input().split())\n        adj_list[u-1].append((v-1,w))\n        adj_list[v-1].append((u-1,w) if u!=v else None)\n    def dijkstra(s):\n        dist=[float('inf')]*n\n        dist[s]=0\n        p=[-1]*n\n        vis=[False]*n\n        pq=[]\n        heapq.heappush(pq,(0,s) )\n        while pq:\n            d,u=heapq.heappop(pq)\n            if vis[u]:\n                continue\n            vis[u]=True\n            for v,w in adj_list[u]:\n                if not vis[v] and d+w<dist[v]:\n                    dist[v]=d+w\n                    p[v]=u\n                    heapq.heappush(pq,(dist[v],v) )\n        return dist\n    dist=dijkstra(0)\n    k-=1\n    for i in range(n):\n        if k>=n-i-1:\n            k-=n-i-1\n        else:\n            break\n    if k>=0:\n        return dist[k]\n    else:\n        return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4451,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    a.sort()\n    res=0\n    k=1\n    for i in range(n):\n        if i%3==2:\n            k+=1\n        res+=a[i]-a[i-1]\n    print(res,k)\n    for i in range(n):\n        print(1,end=' ')\n# Test cases\nsolution(\"5\\n1 1 3 4 2\")\nsolution(\"6\\n1 5 12 13 2 15\")\nsolution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4452,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    count = 0\n    result = []\n    while n > 0:\n        if n % 10 == 0:\n            result.append(n // 10)\n            n //= 10\n            count += 1\n        else:\n            result.append(n % 10)\n            n //= 10\n            count += 1\n    return count, result\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4453,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    Q = int(input())\n    for _ in range(Q):\n        n = int(input())\n        p = list(map(int, input().split()))\n        days = [0] * n\n        for i in range(n):\n            days[p[i]-1] = 1\n        print(*days)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4454,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        a = list(map(int, input().split()))\n        print(min(a))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4455,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    skills = list(map(int, input().split()))\n    quarrels = [tuple(map(int, input().split()) for _ in range(k))\n    mentors = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (i, j) not in quarrels and skills[i] > skills[j]:\n                mentors[i] += 1\n    print(mentors)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4456,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n    s = \"abc\"\n    return s\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4457,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * n\n    order = [0] * n\n    dp[0] = 0\n    for i in range(1, n):\n        dp[i] = float('inf')\n        for j in range(i):\n            if dp[j] + (a[i] * j + 1) < dp[i]:\n                dp[i] = dp[j] + (a[i] * j + 1)\n                order[i] = j\n    min_shots = dp[n-1]\n    for i in range(n-1, 0, -1):\n        for j in range(i+1, n):\n            if dp[j] + (a[i] * i + 1) < dp[i]:\n                dp[i] = dp[j] + (a[i] * i + 1)\n                order[i] = j\n    print(min_shots)\n    print(*order)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4458,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());a=[*map(int,input().split())];count,m=0,n+1\n    for i in range(1,n):\n        if a[i]>a[i-1]:\n            count+=1\n        else:\n            m=min(a[i],m)\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4459,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    input();a=Counter(map(int,input().split()))\n    count=0\n    for i in a:\n        if a[i]%i!=0:\n            count+=a[i]%i\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4460,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input().split()\n    for i in range(len(a)):\n        if int(a[i]) == 0:\n            print(i+1)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4461,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W = map(int,input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4462,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    input();a,b,c,d,r=list(map(int,input().split())),0,0,0,'NYoe s'\n    for i in range(len(input_string)-1):\n        if(input_string[i]*input_string[i+1]%4==0):\n            r='Yes'\n        else:\n            r='No'\n    print(r)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4463,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=sorted(input())\n    t=sorted(input())\n    if len(s)<len(t):\n        return \"Yes\"\n    else:\n        for i in range(len(t)):\n            if s[i]<t[i]:\n                return \"Yes\"\n            elif s[i]>t[i]:\n                return \"No\"\n        return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4464,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split())\n    if c%a==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4465,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    area=a*b-2\n    return area\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4466,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split());print((a-c)//(b+c))\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4467,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=[]\n    b=[]\n    c=[]\n    d=[]\n    for i in range(n):\n        a.append(list(map(int,input().split()))\n    for i in range(n):\n        c.append(list(map(int,input().split())\n    for i in range(n):\n        d.append(list(map(int,input().split())\n    count=0\n    for i in range(n):\n        for j in range(n):\n            if a[i][0]<c[j][0] and a[i][1]<c[j][1]:\n                count+=1\n    print(count//2)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4468,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,t=map(int,input().split());a=list(map(int,input().split()))\n    a.sort()\n    total_time=0\n    for i in range(n):\n        total_time+=t-a[i]\n    return total_time\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4469,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    queries=input_string.split('\\n')\n    shelf=[]\n    for i in range(n):\n        query=queries[i].split()\n        if query[0]=='L':\n            shelf.append(int(query[1]))\n        elif query[0]=='R':\n            shelf.insert(0,int(query[1]))\n        else:\n            if int(query[1]) in shelf:\n                shelf.remove(int(query[1]))\n            else:\n                shelf.remove(shelf[-1])\n            print(len(shelf))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4470,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    for i in range(q):\n        n = int(input())\n        count = 0\n        while n != 1:\n            if n % 2 == 0:\n                n //= 2\n                count += 1\n            elif n % 3 == 0:\n                n //= 3\n                count += 1\n            elif n % 5 == 0:\n                n //= 5\n                count += 1\n            else:\n                break\n        if n == 1:\n            print(count)\n        else:\n            print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4471,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        n = int(input())\n        a = list(map(int, input().split()))\n        while max(a) > 0:\n            for j in range(n):\n                if a[j] > 0:\n                    a[j] += 2\n                    break\n            for j in range(n):\n                if a[j] > 0:\n                    a[j] -= 1\n        if max(a) == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4472,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=input()\n    b=input()\n    if n%2==0:\n        return 0\n    else:\n        a=list(a)\n        b=list(b)\n        count=0\n        for i in range(n//2):\n            if a[i]!=b[i]:\n                count+=1\n                a[i],b[i]=b[i],a[i]\n        for i in range(n//2,n):\n            if a[i]!=b[i]:\n                count+=1\n                a[i],b[i]=b[i],a[i]\n        return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4473,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        a, b, k = map(int, input().split())\n        x = 0\n        for j in range(k):\n            if j % 2 == 0:\n                x += a\n            else:\n                x -= b\n        print(x)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4474,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        count = 0\n        while True:\n            count += 1\n            if is_good(count):\n                print(count)\n                break\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4475,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        a,b,x,y,n=map(int,input().split())\n        if a<x:\n            a=x\n        if b<y:\n            b=y\n        if n==0:\n            print(a*b)\n        else:\n            if a<b:\n                a,b=b,a\n            while n>0:\n                if a<x:\n                    a=x\n                else:\n                    a-=1\n                    n-=1\n                if b<y:\n                    b=y\n                else:\n                    b-=1\n                    n-=1\n            print(a*b)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4476,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        a, b = map(int, input().split())\n        if a == b:\n            print(0)\n        else:\n            count = 0\n            while a != b:\n                if a > b:\n                    if a % 2 == 0:\n                        a -= 2\n                        count += 1\n                    else:\n                        a += 1\n                        count += 1\n                else:\n                    if b % 2 == 0:\n                        b -= 2\n                        count += 1\n                    else:\n                        b += 1\n                        count += 1\n            print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4477,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        x=int(input())\n        count=0\n        if x//1000==0:\n            count+=1\n        elif x//100>0:\n            count+=1+int(str(x//1000)[:1])\n        if x//10%10==0:\n            count+=1\n        elif x//10%10>0:\n            count+=1+int(str(x//10%10)[:1])\n        if x%10==0:\n            count+=1\n        elif x%10>0:\n            count+=1+int(str(x%10)[:1])\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4478,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    k=int(input())\n    for i in range(k):\n        n_i=int(input())\n        a_i=list(map(int,input().split()))\n        n_j=int(input())\n        a_j=list(map(int,input().split()))\n        if sum(a_i)==sum(a_j):\n            print(\"YES\")\n            print(i+1,n_i-1)\n            print(j+1,n_j-1)\n            return\n    print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4479,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4480,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4481,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    for _ in range(int(input())):s=input();d[s]=d.get(s,0)+1\n    for k,v in sorted(d.items(),key=lambda x:x[1],reverse=True):\n        if v==max(d.values()):print(k)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4482,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = float(input())\n    a = list(map(int, input_string.split()))\n    a.sort()\n    min_cost = 0\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            continue\n        min_cost += (a[i]-a[i-1])**2\n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4483,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=int(input())\n    a=int(input())\n    b=int(input())\n    total_cost=a+b*100\n    if total_cost>x:\n        print(\"You cannot buy the cake and donuts.\")\n    else:\n        print(x-total_cost)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4484,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split());r=10**9+7\n    if n==0 or m==0:\n        return 1\n    if n==1 or m==1:\n        return n+m\n    if n==2 and m==2:\n        return 2\n    if n==3 and m==2:\n        return 4\n    if n==2 and m==3:\n        return 4\n    if n==3 and m==3:\n        return 12\n    if n==4 and m==2:\n        return 16\n    if n==4 and m==3:\n        return 32\n    if n==3 and m==4:\n        return 32\n    if n==4 and m==4:\n        return 64\n    if n==5 and m==2:\n        return 128\n    if n==5 and m==3:\n        return 64\n    if n==5 and m==4:\n        return 256\n    if n==6 and m==2:\n        return 512\n    if n==6 and m==3:\n        return 128\n    if n==6 and m==4:\n        return 512\n    if n==7 and m==2:\n        return 1024\n    if n==7 and m==3:\n        return 512\n    if n==7 and m==4:\n        return 1024\n    if n==8 and m==2:\n        return 2048\n    if n==8 and m==3:\n        return 2048\n    if n==8 and m==4:\n        return 4096\n    if n==9 and m==2:\n        return 4096\n    if n==9 and m==3:\n        return 4096\n    if n==9 and m==4:\n        return 8192\n    if n==10 and m==2:\n        return 8192\n    if n==10 and m==3:\n        return 8192\n    if n==10 and m==4:\n        return 16384\n    if n==11 and m==",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4485,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M = map(int,input().split())\n    a = []\n    b = []\n    for i in range(M):\n        a.append(int(input()))\n        b.append(int(input()))\n    for i in range(M):\n        if a[i] == 1 and b[i] == N:\n            print(\"IMPOSSIBLE\")\n            return\n    for i in range(M):\n        for j in range(i+1,M):\n            if a[i] == b[j]:\n                print(\"IMPOSSIBLE\")\n                return\n    print(\"POSSIBLE\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4486,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    result = \"\"\n    for i in range(1, len(s), 2):\n        result += s[i]\n    print(result)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4487,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B,C = input().split()\n    if A[-1] == B[0] and B[-1] == C[0]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4488,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=int(input()),int(input());print(['ELQEUSASL'[a<b::2],'GREATER'][a>b])\n    # Your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4489,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=[input() for _ in range(int(input()))]\n    t=[input() for _ in range(int(input())]\n    n=len(s)\n    m=len(t)\n    count=0\n    for i in range(n):\n        for j in range(m):\n            if s[i]==t[j]:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4490,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    b = input()\n    if b == 'A':\n        print('T')\n    elif b == 'C':\n        print('G')\n    elif b == 'G':\n        print('C')\n    else:\n        print('A')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4491,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    A = [list(map(int, input().split())) for _ in range(2)]\n    A.append(list(map(int, input().split()))\n    A.append(list(map(int, input().split()))\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4492,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f=lambda:map(int,input().split())\n    N,x=f()\n    a=list(f())\n    count=0\n    for i in range(N-1):\n        if a[i]+a[i+1]>x:\n            count+=1\n            a[i+1]-=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4493,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    L = [list(map(int, input().split())) for _ in range(3)]\n    a1, a2, a3 = L[0]\n    b1, b2, b3 = L[1]\n    c11, c12, c13 = L[2]\n    c21, c22, c23 = L[0]\n    c31, c32, c33 = L[1]\n    \n    if c11 == a1 + b1 and c12 == a2 + b2 and c13 == a3 + b3 and c21 == a1 + b1 and c22 == a2 + b2 and c23 == a3 + b3 and c31 == a1 + b1 and c32 == a2 + b2 and c33 == a3 + b3:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4494,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(['ARC','ABC'][input()[1]=='R'])\n    # If the first character of the input string is 'A', the next week's contest will be ARC, otherwise it will be ABC.\n    # The index of the string 'ARC' is 1, so we check if the second character of the input string is 'R' to determine the output.\n    # If it is 'R', we print 'ARC', otherwise we print 'ABC'.\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4495,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,x=map(int,input().split())\n    count=0\n    for i in range(a,b+1):\n        if i%x==0:\n            count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4496,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    d=int(input())\n    if d==25:\n        print(\"Christmas\")\n    elif d==24:\n        print(\"Christmas Eve\")\n    elif d==23:\n        print(\"Christmas Eve Eve\")\n    else:\n        print(\"Christmas Eve Eve Eve\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4497,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    count=0\n    max_count=0\n    max_num=0\n    for i in range(1,n+1):\n        count=0\n        for j in range(2,i+1):\n            if i%j==0:\n                count+=1\n        if count>max_count:\n            max_count=count\n            max_num=i\n    print(max_num)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4498,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=map(int,input().split(\\\" \\\"))\n    if abs(a-c)<=d:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4499,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=input().split()\n    return \"\".join(word[0].upper() for word in [a,b,c])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4500,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split())\n    if a+b>=c:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4501,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,A = map(int,input().split())\n    cards = list(map(int,input().split())\n    # Write your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4502,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    A=list(map(int,input_string.split()))\n    B=[]\n    for i in range(N):\n        B.append(A[i])\n        B.reverse()\n    return B\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4503,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h,n=map(int,input().split());print('YNeos'[sum(map(int,input().split()))<h::2])\n    #h,n=map(int,input().split())\n    #A=list(map(int,input().split())\n    #print('YNeos'[sum(A)<h::2])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4504,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()[:-1]\n    count = 0\n    for i in range(len(input_string)):\n        if input_string[i] == input_string[i+1]:\n            count += 1\n        else:\n            count = 0\n    return len(input_string) - count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4505,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(\\\"Yes\\\" if len(set(input())) == 3 else \\\"No\\\")\n    # Do not remove the above line. ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4506,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n = int(input_string.pop(0))\n    a = list(map(int, input_string.pop(0).split()))\n    b = list(map(int, input_string.pop(0).split()))\n    a.sort()\n    b.sort()\n    f = lambda l, r: sum(a[i] * b[i] for i in range(l-1, r))\n    min_sum = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            min_sum = min(min_sum, f(i, j))\n    return min_sum % 998244353\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4507,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M, K = map(int, input().split())\n    A = list(map(int, input().split())\n    offers = []\n    for _ in range(M):\n        offers.append(list(map(int, input().split()))\n    # write your code here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4508,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    vertex_count = int(input())\n    edges = []\n    for i in range(vertex_count - 1):\n        edges.append(list(map(int, input().split()))\n    # Your code goes here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4509,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        count = 0\n        num = 1\n        while count < k:\n            if num % n != 0:\n                count += 1\n            num += 1\n        print(num)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4510,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    ids=list(map(int,input().split()))\n    #print(n,k,ids)\n    conversations=[]\n    for i in range(n):\n        if ids[i] not in conversations:\n            conversations.append(ids[i])\n            if len(conversations)==k:\n                conversations.pop()\n            conversations.insert(0,ids[i])\n    print(len(conversations))\n    print(*conversations)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4511,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4512,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    R = lambda: map(int, input().split())\n    n = len(input_string)\n    queries = R()\n    for _ in range(queries[0]):\n        q = R()\n        if q[0] == 1:\n            pos, c = q\n            input_string = list(input_string)\n            input_string[pos - 1] = c\n            input_string = ''.join(input_string)\n        else:\n            l, r = q\n            sub_string = input_string[l - 1:r]\n            distinct_chars = len(set(sub_string))\n            print(distinct_chars)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4513,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    Q = int(input())\n    for i in range(Q):\n        input_string = input()\n        for j in range(9):\n            input_string += input()\n        print(input_string)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4514,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,q=map(int,input().split())\n    parent=list(map(int,input().split()))\n    parent[0]=0\n    adj_list=[[] for i in range(n+1)]\n    for i in range(2,n+1):\n        adj_list[parent[i-1]].append(i)\n    def dfs(node,visited,depth):\n        visited[node]=True\n        for child in adj_list[node]:\n            if not visited[child]:\n                dfs(child,visited,depth+1)\n    def dfs_order(node,visited,depth,order):\n        visited[node]=True\n        order.append(node)\n        for child in adj_list[node]:\n            if not visited[child]:\n                dfs_order(child,visited,depth+1,order)\n    for i in range(2,n+1):\n        visited=[False]*(n+1)\n        order=[]\n        dfs_order(i,visited,0,order)\n        print(order)\n    for i in range(q):\n        u,k=map(int,input().split())\n        visited=[False]*(n+1)\n        order=[]\n        dfs_order(u,visited,0,order)\n        if k>len(order):\n            print(-1)\n        else:\n            print(order[k-1])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4515,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,n=map(int,input().split())\n    if a+b+c==n and a==b and b==c:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4516,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    x=list(map(int,input().split())\n    p=[1,2,3,4]\n    for i in range(1,n):\n        p[i]=i\n    print(p)\n    for i in range(1,n):\n        print(abs(p[i]-p[i-1])+abs(p[i+1]-p[i])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4517,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M = list(map(int, input().split()))\n    adj_list = [[] for _ in range(N+1)]\n    for i in range(N-1):\n        u, v = map(int, input().split())\n        adj_list[u].append(v)\n        adj_list[v].append(u)\n    queries = []\n    for i in range(M):\n        queries.append(list(map(int, input().split()))\n    for query in queries:\n        k = query[0]\n        vertices = query[1:]\n        if k == 1:\n            if vertices[0] in adj_list[1]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            visited = [False] * (N+1)\n            queue = [1]\n            visited[1] = True\n            while queue:\n                u = queue.pop(0)\n                for v in adj_list[u]:\n                    if not visited[v]:\n                        visited[v] = True\n                        queue.append(v)\n                        if v in vertices:\n                            print(\"YES\")\n                            break\n            else:\n                print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4518,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    am = int(input())\n    for i in range(am):\n        n = int(input())\n        a = list(map(int, input().split()))\n        adj = [[] for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    adj[i].append(j)\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    adj[j].append(i)\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    adj[i].append(j)\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    adj[j].append(i)\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    adj[i].append(j)\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    adj[j].append(i)\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    adj[i].append(j)\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    adj[j].append(i)\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    adj[i].append(j)\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    adj[j].append(i)\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    adj[i].append(j)\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    adj[j].append(i)\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    adj[i].append(j)\n       ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4519,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    string = input().strip()\n    # Your code goes here\n    return string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4520,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    segments.sort()\n    bad_points = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            if segments[i][1] >= segments[j][0]:\n                bad_points.add(segments[j][0])\n                bad_points.add(segments[j][1])\n    bad_points = sorted(list(bad_points))\n    print(len(bad_points))\n    for p in bad_points:\n        print(p)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4521,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    x = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    d = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            d += min(abs(x[i]-x[j]), abs(x[i]-x[j]-v[i]*(n-1), abs(x[i]-x[j]-v[j]*(n-1))\n    return d\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4522,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=[int(x) for x in input().split()]\n    edges=[]\n    for i in range(n-1):\n        edges.append([int(x) for x in input().split()])\n    q=[int(x) for x in input().split()]\n    def dfs(u,v,visited,depth,parent,max_weight):\n        if visited[v]:\n            return 0\n        visited[v]=True\n        if depth>max_weight:\n            max_weight=depth\n        for i in range(len(edges)):\n            if edges[i][0]==v:\n                if not visited[edges[i][1]]:\n                    dfs(edges[i][1],v,visited,depth+edges[i][2],max_weight)\n        return max_weight\n    def count(u,v,visited,max_weight):\n        if visited[u] or visited[v]:\n            return 0\n        visited[u]=True\n        visited[v]=True\n        if u==v:\n            return 0\n        if u>v:\n            u,v=v,u\n        if u==1:\n            return 1\n        if u==v:\n            return 0\n        if u==2:\n            return 1\n        if u==3:\n            return 1\n        if u==4:\n            return 1\n        if u==5:\n            return 1\n        if u==6:\n            return 1\n        if u==7:\n            return 1\n        if u==8:\n            return 1\n        if u==9:\n            return 1\n        if u==10:\n            return 1\n        if u==11:\n            return 1\n        if u==12:\n            return 1\n        if u==13:\n            return 1\n        if u==14:\n            return 1\n        if u==15:\n            return 1\n        if u==16:\n            return 1\n        if u==17:\n            return 1\n        if u==18:\n            return 1\n        if u==19:\n            return 1\n        if u==20:",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4523,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input().split()))\n    for i in range(n):\n        if a.count(a[i])>1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4524,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    a=input()\n    b=input()\n    a=int(a,2)\n    b=int(b,2)\n    ans=0\n    while b>0:\n        ans+=a&b\n        b//=2\n    return ans%998244353\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4525,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n % 2 == 0:\n            if n == 2:\n                print(\"YES\")\n                print(2, 1)\n            elif n == 4:\n                print(\"YES\")\n                print(2, 1, 3, 4)\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4526,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(a[i:j+1]) in a[:i] or sum(a[i:j+1]) in a[j+1:]:\n                count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4527,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    M = int(input())\n    for i in range(M):\n        N = int(input())\n        segments = []\n        for j in range(N):\n            l, r = map(int, input().split())\n            segments.append((l, r))\n        segments.sort()\n        count = 0\n        left = 0\n        right = 0\n        while right < N:\n            if segments[right][0] >= segments[left][1]:\n                count += 1\n                left += 1\n            else:\n                right += 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4528,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\th,m=map(int,input().split())\n    if th==0 and m==0:\n        return 0\n    else:\n        return (24-th)*60+60-m\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4529,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    s = input()\n    if n == 0:\n        return -1\n    if s == \"L\"*n or s == \"R\"*n or s == \"U\"*n or s == \"D\"*n:\n        return 1, n\n    for i in range(n):\n        if s[i] == \"L\" and s[n-i-1] == \"R\":\n            return 1, n-i-1\n        if s[i] == \"U\" and s[n-i-1] == \"D\":\n            return 1, n-i-1\n        if s[i] == \"R\" and s[n-i-1] == \"L\":\n            return n-i, n\n        if s[i] == \"D\" and s[n-i-1] == \"U\":\n            return n-i, n\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4530,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        a=list(map(int,input().split()))\n        a.sort()\n        x=1\n        while x<=n:\n            if all(a[i]!=a[i+1] for i in range(n-1)) and all(a[i]==a[i+1] for i in range(n-1)):\n                print(x)\n                break\n            x+=1\n        else:\n            print(0)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4531,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    edges = []\n    for i in range(n-1):\n        edges.append(list(map(int, input().split()))\n    # Your code here\n    return max_cost\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4532,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        a = list(map(int, input().split())\n        moves = 0\n        for i in range(n):\n            if a[i] % k != 0:\n                moves += 1\n                a[i] += k\n        print(moves)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4533,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4534,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize the first row with 1\n    result = [1]\n    \n    # Loop through the rows\n    for i in range(1, input_string+1):\n        # Initialize the current row with the previous row\n        current_row = [1]\n        # Loop through the previous row\n        for j in range(1, i):\n            # Calculate the next number in the current row\n            current_row.append(result[j-1] + result[j])\n        # Add the last number to the current row\n        current_row.append(1)\n        # Append the current row to the result\n        result.append(current_row)\n        \n    # Return the kth row\n    return result[input_string]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4535,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string to an integer\n    n = int(input_string, 2)\n    \n    # Initialize a counter variable\n    count = 0\n    \n    # Iterate through the binary representation of the integer\n    for i in bin(n)[2:]:\n        if i == '1':\n            count += 1\n    \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4536,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input_string to an integer\n    num = int(''.join(input_string))\n    \n    # Add 1 to the integer\n    num += 1\n    \n    # Convert the integer back to a list of digits\n    result = [int(d) for d in str(num)]\n    \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4537,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    print(max(a+b,a-b,a*b))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4538,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,d=map(int,input().split())\n    points=[]\n    for i in range(n):\n        x,y=map(int,input().split())\n        points.append((x,y))\n    count=0\n    for i in points:\n        if (i[0]**2+i[1]**2)<=d**2:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4539,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input();print('YNeos'[int(a)%sum(map(int,a))!=0::2])\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4540,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=list(map(int,input_string.split()))\n    for i in range(n):\n        if i==0:\n            print(a[i+1]+a[i+2])\n        elif i==n-1:\n            print(a[i-1]+a[i])\n        else:\n            print(a[i-1]+a[i+1]+a[i+2])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4541,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input()\n    if a=='a' or a=='e' or a=='i' or a=='o' or a=='u':\n        print(\"vowel\")\n    else:\n        print(\"consonant\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4542,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = input()\n    black_count = 0\n    white_count = 0\n    for char in S:\n        if char == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if black_count > white_count:\n        return white_count\n    else:\n        return black_count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4543,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(('Yes' if int(''.join(input().split())) ** 0.5 % 1 == 0 else 'No'))\n    # You can also use the following code:\n    # a, b = map(int, input().split())\n    # print('Yes' if int(str(a) + str(b)) ** 0.5 % 1 == 0 else 'No')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4544,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    input();c=[0]*10**6\n    for i in input_string:\n        c[i]+=1\n    return max(c.count(1),c.count(2),c.count(3))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4545,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=int(input())\n    n=int(input())\n    return n**2-a\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4546,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split());print('YNEOS'[b-a!=c-b::2])\n    # Write your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4547,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = input()\n    if '9' in str(N):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4548,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N, M, X = map(int, input().split())\n    A = list(map(int, input().split())\n    # Write your code here\n    # Initialize a list to store the cost of reaching each square\n    cost = [0] * (N+1)\n    # Initialize a list to store the visited squares\n    visited = [False] * (N+1)\n    # Initialize a list to store the toll gates\n    toll_gates = [False] * (N+1)\n    # Initialize a list to store the minimum cost to reach each square\n    min_cost = [float('inf')] * (N+1)\n    # Set the cost of reaching Square X to 0\n    cost[X] = 0\n    # Set the minimum cost of reaching Square X to 0\n    min_cost[X] = 0\n    # Initialize a queue to store the squares to visit\n    queue = [X]\n    # Initialize a set to store the visited squares\n    visited_set = set()\n    # Initialize a set to store the toll gates\n    toll_gates_set = set()\n    # Initialize a set to store the toll gates\n    toll_gates_set.add(X)\n    # Initialize a set to store the squares with toll gates\n    toll_gates_set.update(A)\n    # Initialize a set to store the squares with toll gates\n    toll_gates_set.difference_update({0, N})\n    # Initialize a set to store the squares with toll gates\n    toll_gates_set.difference_update({X})\n    # Initialize a set to store the squares with toll gates\n    toll_gates_set.difference_update({N})\n    # Initialize a set to store the squares with toll gates\n    toll_gates_set.difference_update({0})\n    # Initialize a set to store the squares with toll gates\n    toll_gates_set.difference_update({N})\n    # Initialize a set to store the squares with toll gates\n    toll_gates_set.difference_update({X})\n    # Initialize a set to store the squares with toll gates\n    toll_gates_set.difference_update({",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4549,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    H,W  = map(int,input().split())\n    grid = []\n    for i in range(H):\n        grid.append(list(input().split()))\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                grid[i][j] = '#'\n            else:\n                grid[i][j] = '.'\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                continue\n            if i > 0 and grid[i-1][j] == '#':\n                grid[i][j] = '#'\n            if i < H-1 and grid[i+1][j] == '#':\n                grid[i][j] = '#'\n            if j > 0 and grid[i][j-1] == '#':\n                grid[i][j] = '#'\n            if j < W-1 and grid[i][j+1] == '#':\n                grid[i][j] = '#'\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                print('#', end='')\n            else:\n                print('.', end='')\n        print()\n    return 'Yes'\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4550,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split())\n    if a+b==c or b+c==a or c+a==b:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4551,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=map(int, input().split())\n    left_pan=a+c\n    right_pan=b+d\n    if left_pan>right_pan:\n        print(\"Left\")\n    elif left_pan<right_pan:\n        print(\"Right\")\n    else:\n        print(\"Balanced\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4552,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    F = [list(map(int, input().split())) for _ in range(N+1)]\n    P = list(map(int, input().split()))\n    c = [0]*11\n    for i in range(1, N+1):\n        for j in range(1, 6):\n            for k in range(1, 3):\n                if F[i][j][k] == 1:\n                    c[j] += 1\n    max_profit = 0\n    for i in range(1, N+1):\n        for j in range(1, 6):\n            for k in range(1, 3):\n                if F[i][j][k] == 1:\n                    max_profit += P[j]\n    return max_profit\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4553,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B = map(int, input().split())\n    postal_code = input()\n    if len(postal_code) == A+B+1 and postal_code[A] == '-' and postal_code[A+1:].isdigit():\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4554,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    W,a,b=map(int,input().split())\n    return abs(a-b-1)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4555,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,k=map(int,input().split())\n    lst=list(range(a,b+1))\n    lst.sort()\n    if k<=len(lst)//2:\n        lst=lst[:k]\n    else:\n        lst=lst[-k:]\n    print(*lst)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4556,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    x=s[0]\n    print(x+\"C\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4557,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,x=map(int, input().split())\n    if a==x:\n        print(\"YES\")\n    elif a+b==x:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4558,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,t=map(int,input().split())\n    return x-t\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4559,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    input();a=1\n    for i in input_string:\n        a*=int(i)\n        if a>10**18:\n            return -1\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4560,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    a=int(input())\n    if n%500==0:\n        print(\"Yes\")\n    else:\n        if n%500<=a:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4561,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,a,b=map(int,input().split())\n    if b-a<=x:\n        print(\"delicious\")\n    elif b-a<=x+1:\n        print(\"safe\")\n    else:\n        print(\"dangerous\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4562,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    i=1\n    while i*i<=n:\n        i+=1\n    return i-1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4563,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T,A = map(int,input().split())\n    N = int(input_string)\n    T_i,A_i = [int(input()) for i in range(N)]\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4564,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S=input()\n    if len(set(S))==len(S):\n        print(\"yes\")\n    else:\n        print(\"no\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4565,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    S=input()\n    count=0\n    for i in range(N):\n        if S[i]=='W':\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4566,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    adj_list=[]\n    for i in range(m):\n        a,b=map(int,input().split())\n        adj_list.append((a-1,b-1))\n        adj_list.append((b-1,a-1))\n    adj_list=set(tuple(adj_list) for i in adj_list)\n    for i in range(n):\n        print(len([j for j in adj_list if i in j]))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4567,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=sorted([int(input()) for _ in range(int(input()))]);r,a=sum(n),0\n    for i in range(n.count(n[0]),len(n)):\n        if n[i]!=n[0]:\n            break\n        a+=n[i]\n    return a if a%10 else a+10\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4568,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    s=input()\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if s[i]!=s[j]:\n                count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4569,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    w=['Sunny','Cloudy','Rainy'];print(w[(w.index(input())+1)%3])\n    # Take input from user\n    input_string = input()\n    # Check the current weather\n    if input_string == 'Sunny':\n        # If it's sunny, the next day will be cloudy\n        print('Cloudy')\n    elif input_string == 'Cloudy':\n        # If it's cloudy, the next day will be rainy\n        print('Rainy')\n    else:\n        # If it's rainy, the next day will be sunny\n        print('Sunny')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4570,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,a,b=map(int,input().split())\n    if n*a<b:\n        return n*a\n    else:\n        return b\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4571,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    return 190*m+(190*(m-1)*(1/2)+100*(n-m))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4572,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(\\\"None\\\" if len(s:=(set(list(\\\"abcdefghijklmnopqrstuvwxyz\\\"))-set(input())))==0 else sorted(list(s))[0])\n    # Your code here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4573,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    nums = list(map(int, input_string.split()))\n    for i in range(1, n+1):\n        nums.sort()\n        if n % 2 == 0:\n            median = (nums[n//2-1] + nums[n//2]) / 2\n        else:\n            median = nums[n//2]\n        print(median)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4574,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input_string.split()))\n    A.sort(reverse=True)\n    max_area = 0\n    for i in range(N-2):\n        for j in range(i+1, N-1):\n            for k in range(j+1, N):\n                for l in range(k+1, N):\n                    max_area = max(max_area, A[i] * A[j] * A[k] * A[l])\n    return max_area\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4575,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    d=int(input())\n    x=int(input())\n    a=list(map(int,input().split()))\n    total=0\n    for i in range(n):\n        total+=a[i]*(d-i)\n    return total+x\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4576,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A, B, C, X = [int(input()) for i in range(4)]\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4577,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split());print('NYoe s'[a<=c<=b::2])\n    # Take input from the user\n    # Split the input string into three integers A, B and C\n    # Check if C is not less than A and not greater than B\n    # If the condition is satisfied, print Yes, else print No\n    # Use slicing to print Yes or No based on the condition\n    # Use the ternary operator to print the output\n    # Use the slicing operator [::2] to print Yes or No based on the condition\n    # Use the map() function to convert the input string to integers\n    # Use the comparison operators to check the condition\n    # Use the print() function to print the output\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4578,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,x=map(int,input().split())\n    m=list(map(int,input().split())\n    d=[]\n    for i in range(n):\n        d.append(x)\n    d.sort(reverse=True)\n    count=0\n    for i in range(n):\n        if x>=d[i]:\n            x-=d[i]\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4579,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input());print(len(set(input()for _ in[0]*N)))\n    return len(set(input_string.split()))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4580,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    ratings = list(map(int, input_string.split()))\n    min_colors = 1\n    max_colors = 1\n    for rating in ratings:\n        if rating < 1200:\n            min_colors += 1\n        elif rating < 200:\n            min_colors += 2\n        elif rating < 240:\n            min_colors += 3\n        elif rating < 280:\n            min_colors += 4\n        elif rating < 320:\n            min_colors += 5\n        elif rating < 400:\n            min_colors += 6\n        elif rating < 480:\n            min_colors += 7\n        else:\n            max_colors += 1\n    print(min_colors, max_colors)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4581,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    if s[0]=='o':\n        price=700\n    else:\n        price=700\n    if s[1]=='o':\n        price+=100\n    if s[2]=='o':\n        price+=100\n    print(price)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4582,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = input().split()\n    if a == 'H' and b == 'H':\n        return 'H'\n    elif a == 'D' and b == 'H':\n        return 'D'\n    elif a == 'H' and b == 'D':\n        return 'D'\n    else:\n        return 'H'\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4583,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=input()\n    print(f\"{a}+{b}-{c}-{d}=7\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4584,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    B=[0]*int(input())\n    A=list(map(int,input_string.split()))\n    for i in range(2,len(A)):\n        B[A[i]-1]=B[A[i-1]-1]+1\n    for i in range(1,len(B)):\n        print(B[i])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4585,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X=int(input())\n    if X==0:\n        return 0\n    elif X%2==0:\n        return X//2\n    else:\n        return X//2+1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4586,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=input()\n    if a==b and b==c:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4587,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = list(map(int, input().split())\n    altars = []\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if A[i] < B[j] < C[k]:\n                    altars.append((A[i], B[j], C[k]))\n    return len(set(altars))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4588,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=input().split();print(\\\"=<>\\\"[(a!=b)+(a>b)])\n    print(a,b)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4589,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    h, w = map(int, input().split())\n    grid = []\n    for _ in range(h):\n        grid.append(input())\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == '.':\n                count = 0\n                for x in range(max(0, i-1), min(i+2, h)):\n                    for y in range(max(0, j-1), min(j+2, w)):\n                        if grid[x][y] == '#':\n                            count += 1\n                print(count, end='')\n        print()\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4590,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=map(int,input().split());A,B=eval(\\\"[0]+[*map(int,input().split())],\\\"*2);s=t=x=0;j=m\n    for i in range(n):\n        if A[i]<=k:\n            s+=A[i];k-=A[i];x+=1\n        else:\n            break\n    for i in range(m):\n        if B[j]<=k:\n            t+=B[j];k-=B[j];j-=1\n        else:\n            break\n    return x+j\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4591,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b, c, x, y = map(int, input().split())\n    return (a * x + b * y) * 2 + c * (x + y)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4592,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    factorial = 1\n    for i in range(1, N+1):\n        factorial *= i\n    divisors = 1\n    for i in range(1, N+1):\n        if factorial % i == 0:\n            divisors += 1\n    print(divisors)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4593,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = int(input())\n    max_perfect_power = 1\n    for i in range(2, a+1):\n        j = 2\n        while i**j <= a:\n            max_perfect_power = i**j\n            j += 1\n    return max_perfect_power\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4594,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    diameters = list(map(int, input_string.split()))\n    diameters.sort()\n    layers = 1\n    for i in range(1, n):\n        if diameters[i] < diameters[i-1]:\n            layers += 1\n    return layers\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4595,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input()\n    start = 0\n    end = len(s) - 1\n    while s[start] != 'A':\n        start += 1\n    while s[end] != 'Z':\n        end -= 1\n    return end - start + 1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4596,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    An=input().split()\n    N=len(An)\n    count=0\n    for i in range(N):\n        An[i]=int(An[i])\n    while(True):\n        flag=True\n        for i in range(N):\n            if An[i]%2!=0:\n                flag=False\n                break\n        if flag:\n            count+=1\n            for i in range(N):\n                An[i]=An[i]//2\n        else:\n            break\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4597,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    power=1\n    for i in range(1,n+1):\n        power*=i\n    return power%(10**9+7)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4598,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());print(n*(n+1)//2)\n    #print(n*(n+1)//2)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4599,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    cards = list(map(int, input_string.split()))\n    alice_score = 0\n    bob_score = 0\n    for i in range(N):\n        if i % 2 == 0:\n            alice_score += cards[i]\n        else:\n            bob_score += cards[i]\n    return alice_score - bob_score\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4600,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m = map(int,input().split())\n    p = list(map(int,input().split())\n    s = list(map(str,input().split())\n    correct_answers = 0\n    penalties = 0\n    for i in range(m):\n        if s[i] == 'AC':\n            correct_answers += 1\n        else:\n            penalties += i\n    print(correct_answers,penalties)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4601,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split());print(sum(sorted(map(int,input().split()))[::-1][k:]))\n    return sum(sorted(map(int,input().split()))[::-1][k:])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4602,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    _,k=input(),int(input());print(sum(min(i,(k-i))*2 for i in list(map(int,input().split()))))\n    # Take input from the user\n    # Convert the input string to a list of integers\n    # Calculate the minimum distance covered by the robots\n    # Return the minimum distance\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4603,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f = lambda: min(int(input()), int(input()))\n    A, B, C, D = map(f, input_string.split())\n    return min(A + C, B + D)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4604,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input_string.split()))\n    if N == 1:\n        return 1\n    if N == 2:\n        return 0\n    if N == 3:\n        return 0\n    if N == 4:\n        return 0\n    if N == 5:\n        return 4\n    if N == 6:\n        return 0\n    if N == 7:\n        return 0\n    if N == 8:\n        return 0\n    if N == 9:\n        return 0\n    if N == 10:\n        return 0\n    if N == 11:\n        return 0\n    if N == 12:\n        return 0\n    if N == 13:\n        return 0\n    if N == 14:\n        return 0\n    if N == 15:\n        return 0\n    if N == 16:\n        return 0\n    if N == 17:\n        return 0\n    if N == 18:\n        return 0\n    if N == 19:\n        return 0\n    if N == 20:\n        return 0\n    if N == 21:\n        return 0\n    if N == 22:\n        return 0\n    if N == 23:\n        return 0\n    if N == 24:\n        return 0\n    if N == 25:\n        return 0\n    if N == 26:\n        return 0\n    if N == 27:\n        return 0\n    if N == 28:\n        return 0\n    if N == 29:\n        return 0\n    if N == 30:\n        return 0\n    if N == 31:\n        return 0\n    if N == 32:\n        return 0\n    if N == 33:\n        return 0\n    if N == 34:\n        return 0\n    if N == 35:\n        return 0\n    if N == 36:\n        return 0\n    if",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4605,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, a, b = map(int, input().split())\n    count = 0\n    for i in range(a, b+1):\n        if sum(int(digit) for digit in str(i)) in range(a, b+1):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4606,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=input()\n    return \"ABC\"+str(n)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4607,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    count=0\n    for i in range(1,b+1):\n        if i==a:\n            count+=1\n        else:\n            count+=2\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4608,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input_string.split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a[i] == 2:\n            return -1\n        elif a[i] == i+1:\n            return count\n        else:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4609,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(int(input()))\n    numbers=list(map(int,input_string.split()))\n    count=0\n    for i in range(n):\n        if numbers[i] not in numbers[:i]:\n            count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4610,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,K=map(int,input().split())\n    A=list(map(int,input().split())\n    count=0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i]==A[j]:\n                count+=1\n                if count>=K:\n                    return 1\n    return count+1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4611,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    t = []\n    x = []\n    y = []\n    for i in range(N):\n        t.append(int(input_string[i*3]))\n        x.append(int(input_string[i*3+1]))\n        y.append(int(input_string[i*3+2]))\n    #print(t)\n    #print(x)\n    #print(y)\n    for i in range(1,N):\n        if t[i] <= t[i-1]:\n            return \"No\"\n        if x[i] == x[i-1] and y[i] == y[i-1]:\n            return \"No\"\n        if x[i] == x[i-1] and y[i] == y[i-1]-1:\n            return \"No\"\n        if x[i] == x[i-1]-1 and y[i] == y[i-1]:\n            return \"No\"\n        if x[i] == x[i-1]+1 and y[i] == y[i-1]:\n            return \"No\"\n        if x[i] == x[i-1] and y[i] == y[i-1]+1:\n            return \"No\"\n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4612,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    x=(a+b)/2\n    print(int(x+0.5) if x%1>=0.5 else int(x))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4613,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        a, b = map(int, input().split())\n        edges.append((a-1, b-1))\n    # Your code goes here\n    adj_list = [[] for _ in range(n)]\n    for i in range(m):\n        adj_list[edges[i][0]].append(edges[i][1])\n        adj_list[edges[i][1]].append(edges[i][0])\n    #print(adj_list)\n    def dfs(v, visited, parent, low, disc, time, bridges):\n        visited[v] = True\n        disc[v] = low[v] = time[0]\n        time[0] += 1\n        for u in adj_list[v]:\n            if not visited[u]:\n                parent[u] = v\n                dfs(u, visited, parent, low, disc, time, bridges)\n                low[v] = min(low[v], low[u])\n                if low[u] > disc[v]:\n                    bridges[0] += 1\n            elif u != parent[v]:\n                low[v] = min(low[v], disc[u])\n    visited = [False] * n\n    parent = [-1] * n\n    low = [-1] * n\n    disc = [-1] * n\n    time = [0]\n    bridges = [0]\n    for i in range(n):\n        if not visited[i]:\n            dfs(i, visited, parent, low, disc, time, bridges)\n    return bridges[0]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4614,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c= map(int,input().split())\n    if a==b:\n        print(c)\n    else:\n        print(b)\n    if b==c:\n        print(a)\n    else:\n        print(c)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4615,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    A,B,C,D,E,F = map(int,input().split())\n    # Write your code here\n    if A+B > F:\n        return \"Impossible\"\n    if C+D > F:\n        return \"Impossible\"\n    if E*100 > F:\n        return \"Impossible\"\n    if C*100 > A*B:\n        return \"Impossible\"\n    if C*100 > D*B:\n        return \"Impossible\"\n    if C*100 > E:\n        return \"Impossible\"\n    if D*100 > A*B:\n        return \"Impossible\"\n    if D*100 > E:\n        return \"Impossible\"\n    if C+D > F:\n        return \"Impossible\"\n    if C+D > A+B:\n        return \"Impossible\"\n    if C+D > F:\n        return \"Impossible\"\n    if C+D > A+B:\n        return \"Impossible\"\n    if C+D > F:\n        return \"Impossible\"\n    if C+D > A+B:\n        return \"Impossible\"\n    if C+D > F:\n        return \"Impossible\"\n    if C+D > A+B:\n        return \"Impossible\"\n    if C+D > F:\n        return \"Impossible\"\n    if C+D > A+B:\n        return \"Impossible\"\n    if C+D > F:\n        return \"Impossible\"\n    if C+D > A+B:\n        return \"Impossible\"\n    if C+D > F:\n        return \"Impossible\"\n    if C+D > A+B:\n        return \"Impossible\"\n    if C+D > F:\n        return \"Impossible\"\n    if C+D > A+B:\n        return \"Impossible\"\n    if C+D > F:\n        return \"Impossible\"\n    if C+D > A+B:\n        return \"Impossible\"\n    if C+D > F:\n        return \"Impossible\"\n    if C+D > A+B:\n        return \"Impossible\"\n    if C+D > F:\n        return \"Impossible\"\n    if C+",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4616,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    i=0\n    while i<len(s):\n        if s[i]!='i':\n            i+=1\n        else:\n            break\n    j=len(s)-1\n    while j>i:\n        if s[j]!='n':\n            j-=1\n        else:\n            break\n    print(s[i:j+1]+'1'+s[j])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4617,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print(('NO', 'YES')[input() == input()[::-1]])\n    # You can also use the following code:\n    # if input_string == input_string[::-1]:\n    #     print('YES')\n    # else:\n    #     print('NO')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4618,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();k=int(input());print(sorted({s[i:i+j]for i in range(len(s))for j in range(1,k+1)})[k-1])\n    # Your code goes here\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4619,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    W,H,N=map(int,input().split())\n    x=[]\n    y=[]\n    a=[]\n    for i in range(N):\n        x.append(int(input()))\n        y.append(int(input()))\n        a.append(int(input()))\n    white_area=W*H\n    for i in range(N):\n        if a[i]==1:\n            white_area-=x[i]\n        elif a[i]==2:\n            white_area-=W-x[i]\n        elif a[i]==3:\n            white_area-=y[i]\n        elif a[i]==4:\n            white_area-=H-y[i]\n    print(white_area)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4620,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());A=[0]*n\n    for i in range(n):\n        C,S,F=map(int,input_string.split())\n        A[i]=S+C\n    return A\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4621,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = input()\n    H, W = map(int, a.split())\n    input_string = input_string.split('\\n')\n    input_string = [list(i) for i in input_string]\n    for i in range(H):\n        input_string.append(input_string[i])\n    for i in range(H):\n        for j in range(W):\n            if i % 2 == 0:\n                print(input_string[i][j], end='')\n            else:\n                print('.', end='')\n        print()\n    for i in range(H):\n        for j in range(W):\n            if i % 2 == 1:\n                print(input_string[i][j], end='')\n            else:\n                print('.', end='')\n        print()\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4622,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());print('YNEOS'[len(set(map(int,input().split())))!=n::2])\n    #n=int(input())\n    #A=list(map(int,input().split()))\n    #print('YNEOS'[len(set(A))!=n::2])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4623,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        w = list(map(int, input().split()))\n        s = sum(w)\n        k = 0\n        for i in range(1, s+1):\n            if s % i == 0:\n                k = max(k, n//i)\n        print(k)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4624,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = tuple(map(int, input().split()))\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4625,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    s = input()\n    p = list(map(int, input().split()))\n    count = [0] * 26\n    for i in range(m):\n        count[ord(s[p[i] - 1]) - ord('a')] += 1\n    count[ord(s[0]) - ord('a')] += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4626,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c = map(int,input().split())\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4627,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    T = int(input())\n    for i in range(T):\n        n = int(input())\n        a = list(map(int, input().split()))\n        for j in range(n):\n            for k in range(j+1, n):\n                if abs(a[j]-a[k]) == 1 or a[j]%2 == a[k]%2:\n                    print(\"YES\")\n                    break\n            else:\n                print(\"NO\")\n                break\n        else:\n            print(\"YES\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4628,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m,k=list(map(int,input().split()))\n    roads=[]\n    for i in range(m):\n        roads.append(list(map(int,input().split()))\n    couriers=[]\n    for i in range(k):\n        couriers.append(list(map(int,input().split()))\n    #your code goes here\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4629,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        count = 0\n        while True:\n            if n == 0:\n                print(1)\n                break\n            if n % 3 == 0:\n                count += 1\n                n //= 3\n            else:\n                n -= 1\n                count += 1\n            if n == 0:\n                print(count)\n                break\n            elif n % 3 == 0:\n                count += 1\n                n //= 3\n            else:\n                n -= 1\n                count += 1\n            if n == 0:\n                print(count)\n                break\n            elif n % 3 == 0:\n                count += 1\n                n //= 3\n            else:\n                n -= 1\n                count += 1\n            if n == 0:\n                print(count)\n                break\n            elif n % 3 == 0:\n                count += 1\n                n //= 3\n            else:\n                n -= 1\n                count += 1\n            if n == 0:\n                print(count)\n                break\n            elif n % 3 == 0:\n                count += 1\n                n //= 3\n            else:\n                n -= 1\n                count += 1\n            if n == 0:\n                print(count)\n                break\n            elif n % 3 == 0:\n                count += 1\n                n //= 3\n            else:\n                n -= 1\n                count += 1\n            if n == 0:\n                print(count)\n                break\n            elif n % 3 == 0:\n                count += 1\n                n //= 3\n            else:\n                n -= 1\n                count += 1\n            if n == 0:\n                print(count)\n                break\n            elif n % 3 == 0:\n                count += 1\n                n //= 3\n            else:\n                n -= 1\n                count += 1\n            if n == 0:\n                print(count)\n                break\n            elif n % 3 == 0:\n               ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4630,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        p = list(map(int, input().split()))\n        days = [0] * n\n        for i in range(n):\n            days[p[i]-1] = i+1\n        print(*days)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4631,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, m = map(int, input().split())\n    x = list(map(int, input().split()))\n    x.sort()\n    y = list(map(int, input().split()))\n    y.sort()\n    res = 0\n    for i in range(m):\n        res += min(abs(x[0] - y[i], abs(x[-1] - y[i]))\n    print(res)\n    print(*y)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4632,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    packages = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        packages.append((x, y))\n    packages.sort()\n    path = \"\"\n    for i in range(n):\n        if packages[i][0] == 0:\n            path += \"U\"\n        else:\n            path += \"R\"\n        for j in range(i):\n            if packages[i][0] > packages[j][0]:\n                path += \"U\"\n            else:\n                path += \"R\"\n        if packages[i][1] == 0:\n            path += \"U\"\n        else:\n            path += \"R\"\n        for j in range(i):\n            if packages[i][1] > packages[j][1]:\n                path += \"R\"\n            else:\n                path += \"U\"\n    return path\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4633,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,s=map(int,input().split())\n    count=0\n    while sum(int(i) for i in str(n))>s:\n        n+=1\n        count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4634,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = input()\n    a = list(map(int, input().split()))\n    moves = 0\n    left = 0\n    right = 0\n    while right < n and a[right] == 0:\n        right += 1\n    while right < n and a[right] == 1:\n        right += 1\n    while left < right:\n        if a[left] == 0:\n            moves += 1\n            left += 1\n        else:\n            left += 1\n            while left < right and a[left] == 1:\n                left += 1\n    while left < n and a[left] == 0:\n        left += 1\n    while left < n and a[left] == 1:\n        left += 1\n        moves += 1\n    return moves\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4635,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    k = int(input())\n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4636,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn = int(input())\n    for i in range(tn):\n        n = int(input())\n        a = list(map(int, input().split()))\n        moves = 0\n        alice_sum = 0\n        bob_sum = 0\n        while len(a) > 0:\n            moves += 1\n            if len(a) == 1:\n                alice_sum += a[0]\n                break\n            alice_sum += a.pop(0)\n            if alice_sum > bob_sum:\n                bob_sum += sum(a)\n                break\n            else:\n                bob_sum += a.pop()\n        print(moves, alice_sum, bob_sum)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4637,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    a.sort()\n    b.sort()\n    if k==0:\n        return sum(a)\n    else:\n        for i in range(n):\n            if a[i]>b[i]:\n                a[i],b[i]=b[i],a[i]\n                k-=1\n                if k==0:\n                    break\n        return sum(a)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4638,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,c=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    t=[0]*n\n    t[0]=0\n    for i in range(1,n):\n        t[i]=min(t[i-1]+a[i-1],c+b[i-1])\n    for i in range(1,n):\n        for j in range(i):\n            t[i]=min(t[i],t[j]+a[i-1]+a[j])\n    for i in range(n):\n        print(t[i],end=\" \")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4639,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        if n == 3:\n            if k == 1:\n                print(\"abb\")\n            else:\n                print(\"aba\")\n        else:\n            if k == 1:\n                print(\"a\" * (n-2) + \"ab\")\n            else:\n                print(\"a\" * (n-2) + \"ba\" * (k-1) + \"a\" * (n-k))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4640,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, k = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    platforms = []\n    for i in range(n):\n        platforms.append((x[i], y[i]))\n    platforms.sort()\n    platforms.append((platforms[0][0] - k, platforms[0][1]) - 1)\n    platforms.append((platforms[-1][0] + k, platforms[-1][1]) + 1)\n    platforms.sort()\n    platforms.append((platforms[0][0] - k, platforms[0][1]) - 1)\n    platforms.append((platforms[-1][0] + k, platforms[-1][1]) + 1)\n    platforms.sort()\n    platforms.append((platforms[0][0] - k, platforms[0][1]) - 1)\n    platforms.append((platforms[-1][0] + k, platforms[-1][1]) + 1)\n    platforms.sort()\n    platforms.append((platforms[0][0] - k, platforms[0][1]) - 1)\n    platforms.append((platforms[-1][0] + k, platforms[-1][1]) + 1)\n    platforms.sort()\n    platforms.append((platforms[0][0] - k, platforms[0][1]) - 1)\n    platforms.append((platforms[-1][0] + k, platforms[-1][1]) + 1)\n    platforms.sort()\n    platforms.append((platforms[0][0] - k, platforms[0][1]) - 1)\n    platforms.append((platforms[-1][0] + k, platforms[-1][1]) + 1)\n    platforms.sort()\n    platforms.append((platforms[0][0] - k, platforms[0][1]) - 1)\n    platforms.append((platforms[-1][0] + k, platforms[-1][1]) + 1)\n    platforms.sort()\n    platforms.append((platforms[0][0] - k, platforms[0][1]) - 1)\n    platforms.append((platforms[-1][0] + k, platforms[-1][",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4641,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n, x = map(int,input().split())\n    a = []\n    for i in range(n):\n        y = int(input())\n        a.append(y)\n    mex = 0\n    for i in range(n):\n        mex = max(mex, a[i]+1)\n        print(mex)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4642,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn,x,y=map(int,input().split())\n    n=int(input_string.split()[0])\n    x=int(input_string.split()[1])\n    y=int(input_string.split()[2])\n    a=[]\n    for i in range(n):\n        a.append(x+(y-x)*i/(n-1)\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4643,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = list(map(int, input().split()))[1 : ]\n    x.sort()\n    return \" \".join(map(str, x))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4644,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        a=list(map(int,input().split()))\n        s=sum(a)\n        if s%2!=0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4645,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n == 2:\n            print(1, 2)\n        elif n == 3:\n            print(1, 3, 2)\n        elif n == 4:\n            print(1, 4, 3, 2)\n        elif n == 5:\n            print(1, 5, 3, 4, 2)\n        elif n == 6:\n            print(1, 6, 4, 5, 2, 3)\n        elif n == 7:\n            print(1, 7, 5, 4, 6, 2, 3)\n        elif n == 8:\n            print(1, 8, 6, 5, 4, 7, 2, 3)\n        elif n == 9:\n            print(1, 9, 7, 5, 6, 4, 8, 2, 3)\n        elif n == 10:\n            print(1, 10, 8, 6, 5, 4, 9, 2, 3)\n        else:\n            print(-1)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4646,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        a=list(map(int,input().split()))\n        count=0\n        for i in range(n):\n            if i%2!=a[i]%2:\n                count+=1\n        if count%2==0:\n            print(count//2)\n        else:\n            print(-1)\n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4647,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    a = list(map(int, input().split()))\n    edges = [list(map(int, input().split()) for _ in range(n-1)]\n    # Your code goes here\n    return [0] * n\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4648,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        count = 0\n        while n != 1:\n            if n % 6 == 0:\n                n //= 6\n                count += 1\n            else:\n                n *= 2\n                count += 1\n        print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4649,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \\tn,k=map(int,input().split())\n    s=input()\n    count=0\n    for i in range(len(s)-k+1):\n        if s[i:i+k] in \"RGBRGBRGB\":\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4650,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l=[int(k)%3 for k in input().split()]\n    return sum(l)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4651,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    q=int(input())\n    for i in range(q):\n        n=int(input())\n        perm=list(map(int,input().split()))\n        for j in range(n-1):\n            if perm[j]>perm[j+1]:\n                perm[j],perm[j+1]=perm[j+1],perm[j]\n        print(perm)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4652,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    p = list(map(int, input().split()))\n    for i in range(n):\n        if p[i] == i+1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4653,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,k=map(int,input().split())\n        if k%2==0:\n            print(n//2)\n        else:\n            print(n//2+1)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4654,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t=int(input())\n    for i in range(t):\n        n,k=map(int,input().split())\n        if n%2==0:\n            if n%k==0:\n                print(\"YES\")\n                for j in range(k):\n                    print(n//k)\n            else:\n                print(\"NO\")\n        else:\n            if k%2==0:\n                print(\"YES\")\n                for j in range(k):\n                    print(n//k)\n            else:\n                print(\"NO\")\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4655,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=map(int,input().split())\n    if a>b:\n        a,b=b,a\n    if a>c:\n        a,c=c,a\n    if b>c:\n        b,c=c,b\n    if a==b:\n        return c\n    else:\n        return (a+b)//2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4656,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        s = input()\n        # Your code goes here\n        # print(n, k, s)\n        # print(len(s))\n        # print(s)\n        # print(set(s))\n        # print(len(set(s))\n        # print(s.count('a'))\n        # print(s.count('b'))\n        # print(s.count('c'))\n        # print(s.count('d'))\n        # print(s.count('e'))\n        # print(s.count('f'))\n        # print(s.count('g'))\n        # print(s.count('h'))\n        # print(s.count('i'))\n        # print(s.count('j'))\n        # print(s.count('k'))\n        # print(s.count('l'))\n        # print(s.count('m'))\n        # print(s.count('n'))\n        # print(s.count('o'))\n        # print(s.count('p'))\n        # print(s.count('q'))\n        # print(s.count('r'))\n        # print(s.count('s'))\n        # print(s.count('t'))\n        # print(s.count('u'))\n        # print(s.count('v'))\n        # print(s.count('w'))\n        # print(s.count('x'))\n        # print(s.count('y'))\n        # print(s.count('z'))\n        # print(s.count('a')+s.count('b')+s.count('c')+s.count('d')+s.count('e')+s.count('f')+s.count('g')+s.count('h')+s.count('i')+s.count('j')+s.count('k')+s.count('l')+s.count('m')+s.count('n')+s.count('o')+s.count('p')+s.count('q')+s.count('r')+s.count('s')+s.count('t')+",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4657,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        a = list(map(int, input().split())\n        if sum(a) % 2 == 0:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            print(*a)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4658,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string to an integer\n    n = int(input_string, 2)\n    \n    # Reverse the bits\n    reversed_bits = 0\n    for i in range(31, -1, -1):\n        reversed_bits <<= 1\n        reversed_bits |= n & 1\n        n >>= 1\n    \n    # Convert the reversed bits back to a string\n    reversed_string = bin(reversed_bits)[2:]\n    \n    # Return the reversed string as an integer\n    return int(reversed_string, 2)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4659,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize the first row with 1\n    result = [[1]]\n    \n    # Loop through the number of rows\n    for i in range(1, input_string):\n        # Initialize the current row with 1\n        current_row = [1]\n        # Loop through the previous row\n        for j in range(1, i):\n            # Calculate the next number in the row\n            current_row.append(result[i-1][j-1] + result[i-1][j])\n        # Add the last number to the current row\n        current_row.append(1)\n        # Append the current row to the result\n        result.append(current_row)\n    \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4660,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    email_list=[]\n    for i in range(n):\n        email_list.append(input())\n    valid_emails=list(filter(lambda x:x.count('@')==1 and x.count('.')==1 and x.count('_')<=1 and x.count('-')<=1 and x.count('.')>0 and x.count('_')>0 and x.count('@')>0 and x.count('.')<x.index('@') and x.count('_')<x.index('@') and x.count('-')<x.index('@') and x.count('.')>x.index('@') and x.count('_')>x.index('@') and x.count('.')<x.index('.') and x.count('-')<x.index('.') and x.count('@')<len(x)-4 and x.count('.')>len(x)-5 and x.count('.')<len(x)-3 and x.count('.')>len(x)-4 and x.count('_')<len(x)-4 and x.count('-')<len(x)-4 and x.count('@')<len(x)-4 and x.count('@')>0 and x.count('.')>0 and x.count('_')>0 and x.count('-')>0 and x.count('.')<len(x)-4 and x.count('_')<len(x)-4 and x.count('-')<len(x)-4 and x.count('@')<len(x)-4 and x.count('@')>0 and x.count('.')>0 and x.count('_')>0 and x.count('-')>0 and x.count('.')<len(x)-4 and x.count('_')<len(x)-4 and x.count('-')<len(x)-4 and x.count('@')<len(x)-4 and x.count('@')>0 and x.count('.')>0 and x.count('_')>0 and x.count('-')>0 and x.count('.')<len(x)-4 and x.count('_')<len(x)-4 and",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4661,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    fib=[0,1]\n    for i in range(2,n):\n        fib.append(fib[i-1]+fib[i-2])\n    fib_cubed=list(map(lambda x:x**3,fib))\n    print(fib_cubed)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4662,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    xml_string=[]\n    for i in range(n):\n        xml_string.append(input())\n    xml_string='\\n'.join(xml_string)\n    level=0\n    max_level=0\n    for i in range(len(xml_string)):\n        if xml_string[i]=='<':\n            level+=1\n            if level>max_level:\n                max_level=level\n        elif xml_string[i]=='>':\n            level-=1\n    return max_level\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4663,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input().strip())\n    for i in range(n):\n        input_string = input().strip()\n        if len(input_string) == 10 and input_string[0] in ['7', '8', '9'] and input_string.isdigit():\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4664,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    M = int(input().strip())\n    M_set = set(map(int, input().strip().split()))\n    N = int(input().strip())\n    N_set = set(map(int, input().strip().split()))\n    sym_diff = M_set.symmetric_difference(N_set)\n    sym_diff = sorted(sym_diff)\n    for num in sym_diff:\n        print(num)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4665,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    columns = input_string.split()\n    marks_list = []\n    for i in range(n):\n        row = input().split()\n        marks_list.append(float(row[columns.index('MARKS')]))\n    avg_marks = sum(marks_list)/n\n    print(\"{:.2f}\".format(avg_marks))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4666,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n % 2 != 0:\n        print(\"Weird\")\n    elif n >= 2 and n <= 5:\n        print(\"Not Weird\")\n    elif n >= 6 and n <= 20:\n        print(\"Weird\")\n    else:\n        print(\"Not Weird\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4667,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    xml_string=[]\n    for i in range(n):\n        xml_string.append(input())\n    xml_string='\\n'.join(xml_string)\n    score=0\n    import xml.etree.ElementTree as ET\n    root=ET.fromstring(xml_string)\n    for elem in root.iter():\n        score+=len(elem.attrib)\n    return score\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4668,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a_str_ar=input().strip().split()\n    b_str_ar=input().strip().split()\n    c_str_ar=input().strip().split()\n    d_str_ar=input().strip().split()\n    a_ar=[float(i) for i in a_str_ar]\n    b_ar=[float(i) for i in b_str_ar]\n    c_ar=[float(i) for i in c_str_ar]\n    d_ar=[float(i) for i in d_str_ar]\n    a=np.array(a_ar)\n    b=np.array(b_ar)\n    c=np.array(c_ar)\n    d=np.array(d_ar)\n    ab=b-a\n    bc=c-b\n    cd=d-c\n    x=np.cross(ab,bc)\n    y=np.cross(bc,cd)\n    dot_product=np.dot(x,y)\n    magnitude_x=np.linalg.norm(x)\n    magnitude_y=np.linalg.norm(y)\n    cos_phi=dot_product/(magnitude_x*magnitude_y)\n    phi=np.arccos(cos_phi)\n    angle_phi=np.degrees(phi)\n    print(angle_phi)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4669,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    return score\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4670,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Write your code here\n    roman_numerals = \"IVXLCDM\"\n    roman_values = [1, 5, 10, 50, 100, 500, 1000, 500, 10000, 5000, 10000]\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    prev_value = 0\n    total_value = 0\n    for char in input_string:\n        if char in roman_dict:\n            if roman_values[roman_numerals.index(char)] > prev_value:\n                total_value += roman_values[roman_numerals.index(char)]\n                prev_value = roman_values[roman_numerals.index(char)]\n            else:\n                total_value -= roman_values[roman_numerals.index(char)]\n        else:\n            return False\n    return True\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4671,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    for i in range(n):\n        if input_string[0]=='+':\n            print(\"+91\",input_string[2:6],input_string[6:])\n        elif input_string[0]=='9' or input_string[0]=='0':\n            print(\"+91\",input_string[1:5],input_string[5:])\n        else:\n            print(\"+91\",input_string[:10])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4672,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    marks_dict={}\n    for i in range(n):\n        name,marks=input_string.split()\n        marks_dict[name]=[int(x) for x in marks.split(',')]\n    query_name=input()\n    avg=sum(marks_dict[query_name])/len(marks_dict[query_name])\n    print(\"{:.2f}\".format(avg))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4673,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    people=[]\n    for i in range(n):\n        name,age,sex=input_string.split()\n        people.append((name,age,sex))\n    people.sort(key=lambda x: (int(x[1]),x[0]))\n    for i in people:\n        if i[2]=='M':\n            print(\"Mr. \"+i[0]+\" \"+i[1])\n        else:\n            print(\"Ms. \"+i[0]+\" \"+i[1])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4674,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x=int(input())\n    y=int(input())\n    z=int(input())\n    n=int(input())\n    result = [[i,j,k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if i+j+k!=n]\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4675,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r1, i1 = map(float, input().split())\n    r2, i2 = map(float, input().split())\n    c1 = complex(r1, i1)\n    c2 = complex(r2, i2)\n    print(c1+c2)\n    print(c1-c2)\n    print(c1*c2)\n    print(c1/c2)\n    print(abs(c1))\n    print(abs(c2))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4676,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=input(),input()+' ';print(*[i+j for i,j in zip(a,b)],sep='')\n    # a,b=input(),input()+' '\n    # print(a,b)\n    # print(*[i+j for i,j in zip(a,b)],sep='')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4677,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    string=\"\"\n    for i in s:\n        if i==\"0\":\n            string+=\"0\"\n        elif i==\"1\":\n            string+=\"1\"\n        elif i==\"B\":\n            if len(string)>0:\n                string=string[:-1]\n    print(string)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4678,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=int(input())\n    A=list(map(int,input_string.split()))\n    A.sort()\n    stools=[]\n    for i in range(s):\n        if i==0:\n            stools.append(A[i])\n        else:\n            stools.append(max(stools[-1]+1,A[i]))\n    return max(stools)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4679,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = {i:list(input()) for i in \\\"abc\\\"}\n    while S['a'] or S['b'] or S['c']:\n        for i in S:\n            if S[i]:\n                if S[i[0] == 'a':\n                    S['b']\n                elif S[i[0] == 'b':\n                    S['c']\n                else:\n                    S['a']\n    if S['a']:\n        return 'A'\n    elif S['b']:\n        return 'B'\n    else:\n        return 'C'\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4680,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('YNEOS'[''.join(sorted(input().split()))!='557'::2])\n    # You can use this code to check if the input string is sorted in ascending order\n    # ''.join(sorted(input().split()))!='557'::2 means that the input string is sorted in ascending order and has no duplicates\n    # If the input string is not sorted or has duplicates, the expression will return False, otherwise True\n    # The ''.join() method joins the characters of the string and the '::2' slices the string every 2 characters to check if the first two characters are '55' and the last two characters are '7'\n    # The 'YES' and 'NO' are just placeholders for the actual output\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4681,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n = int(input())\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_prev = 2\n        prev = 1\n        for i in range(2, n+1):\n            curr = prev_prev + prev\n            prev_prev = prev\n            prev = curr\n        return curr\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4682,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,h=[int(input()) for _ in range(3)];print((a+b)*h//2)\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4683,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N = int(input())\n    A = list(map(int, input_string.split()))\n    ans = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            ans += A[i] * A[j]\n    return ans % (10**9 + 7)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4684,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    print('YES' if int(''.join(input().split()))%4 == 0 else 'NO')\n    # You can also use the following code:\n    # r, g, b = map(int, input().split())\n    # print('YES' if int(f'{r}{g}{b}')%4 == 0 else 'NO')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4685,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c=sorted(map(int,input().split()))\n    k=int(input())\n    max_sum=0\n    for i in range(1,k+1):\n        if i%2==0:\n            max_sum+=a\n        else:\n            max_sum+=b\n    return max_sum\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4686,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input();print('NYoe s'[all([s.count(i)%2==0 for i in s])::2])\n    if all([input_string.count(i)%2==0 for i in input_string]):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4687,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f=lambda:map(int,input().split());N,K=f()\n    A=[]\n    for i in range(N):\n        a,b=f()\n        A.extend([a]*b)\n    A.sort()\n    return A[K-1]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4688,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split());print(b*(b-1)**(a-1))\n    # Take input from the user\n    # Split the input string into two integers a and b\n    # Calculate the number of possible ways using the formula (b-1)^(a-1)\n    # Print the result\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4689,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    f=lambda:[*map(int,input().split())]\n    K,N=f()\n    A=f()\n    A.sort()\n    min_distance=0\n    for i in range(1,N):\n        min_distance+=A[i]-A[i-1]\n    return min_distance\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4690,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c,d=map(int,input().split())\n    area1=a*b\n    area2=c*d\n    if area1>area2:\n        print(area1)\n    elif area2>area1:\n        print(area2)\n    else:\n        print(area1)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4691,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    ac=0\n    wa=0\n    tle=0\n    re=0\n    for i in range(n):\n        if input_string[i]=='AC':\n            ac+=1\n        elif input_string[i]=='WA':\n            wa+=1\n        elif input_string[i]=='TLE':\n            tle+=1\n        elif input_string[i]=='RE':\n            re+=1\n    print(\"AC x\",ac)\n    print(\"WA x\",wa)\n    print(\"TLE x\",tle)\n    print(\"RE x\",re)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4692,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    m=int(input())\n    if m<=12:\n        print(24-m)\n    else:\n        print(m-12)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4693,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    if a+b>=10:\n        print(\"error\")\n    else:\n        print(a+b)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4694,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a = list(map(int,input().split()))\n    n = len(a)\n    a.sort()\n    min_distance = float('inf')\n    for i in range(n):\n        distance = abs(a[0]-a[n-1])\n        for j in range(1,n):\n            distance += abs(a[j]-a[j-1])\n        min_distance = min(min_distance,distance)\n    return min_distance\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4695,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,y=map(int,input().split())\n    if x%2==0 and y%2==0:\n        print(\"Yes\")\n    elif x%2!=0 and y%2!=0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4696,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int,input().split())\n    if a*b%2==0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4697,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N,M=map(int,input().split())\n    count=0\n    for i in range(N):\n        if M-i>=2:\n            count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4698,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    T=list(map(int,input().split()))\n    m=int(input())\n    P=[]\n    X=[]\n    for i in range(m):\n        P.append(list(map(int,input().split()))\n    for i in range(m):\n        X.append(list(map(int,input().split())\n    for i in range(m):\n        time=0\n        for j in range(n):\n            time+=T[j]*P[i][j]\n        print(time)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4699,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=map(int,input().split());a=set(input().split())\n    for i in range(1,10):\n        if str(i) not in a:\n            print(i*10**k)\n            break\n    else:\n        print(10**k\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4700,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=list(map(int,input().split()))\n    h=list(map(int,input().split())\n    adj_list=[]\n    for i in range(m):\n        a,b=map(int,input().split())\n        adj_list.append([a-1,b-1])\n    count=0\n    for i in range(n):\n        good=True\n        for j in range(m):\n            if i==adj_list[j][0] or i==adj_list[j][1]:\n                if h[i]<=h[adj_list[j][0]] or h[i]<=h[adj_list[j][1]:\n                    good=False\n                    break\n        if good:\n            count+=1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4701,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k=int(input()),int(input());a=1\n    for i in range(n):\n        a*=2\n        a+=k\n    return a\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4702,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    X=int(input())\n    if X==0:\n        print(1)\n    else:\n        print(0)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4703,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    S = input()\n    n = len(S)\n    if n == 1:\n        return int(S)\n    if n == 2:\n        return int(S[0]) + int(S[1])\n    if n == 3:\n        return int(S[0]) + int(S[1]) + int(S[2])\n    if n == 4:\n        return int(S[0]) + int(S[1]) + int(S[2]) + int(S[3])\n    if n == 5:\n        return int(S[0]) + int(S[1]) + int(S[2]) + int(S[3]) + int(S[4])\n    if n == 6:\n        return int(S[0]) + int(S[1]) + int(S[2]) + int(S[3]) + int(S[4]) + int(S[5])\n    if n == 7:\n        return int(S[0]) + int(S[1]) + int(S[2]) + int(S[3]) + int(S[4]) + int(S[5]) + int(S[6])\n    if n == 8:\n        return int(S[0]) + int(S[1]) + int(S[2]) + int(S[3]) + int(S[4]) + int(S[5] + int(S[6]) + int(S[7])\n    if n == 9:\n        return int(S[0]) + int(S[1]) + int(S[2]) + int(S[3]) + int(S[4]) + int(S[5]) + int(S[6]) + int(S[7]) + int(S[8])\n    if n == 10:\n        return int(S[0]) + int(S[1]) + int(S[2]) + int(S[3]) + int(S[4]) + int(S[5]) + int(S[6]) + int(S[7]) + int(S[8]) + int(S[9])\n    if n == 11:\n        return int(S[0]) + int(S",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4704,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());a=list(map(int,input().split()));f,b,c=0,sum(a),float('inf')\n    for i in range(n):\n        f+=a[i]\n        c=min(c,abs(f-b))\n        b-=a[i]\n    return int(c)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4705,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input());print(n*800-n//15*200)\n    # Take input from the user\n    # Calculate the amount of money Snuke has paid to the restaurant and the amount of money the restaurant has paid back to Snuke\n    # Subtract the amount of money the restaurant has paid back from the amount Snuke has paid and return the result\n    # Use integer division to calculate the number of times Snuke has ordered 15 meals\n    # Multiply the number of times by 200 to get the amount of money the restaurant has paid back\n    # Subtract the amount of money the restaurant has paid back from the total amount Snuke has paid to get the final answer\n    # Return the final answer\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4706,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    [print(input()[i],end='') for i in range(3)]\n    [print(input()[i],end='') for i in range(2,0,-1)]\n    [print(input()[i],end='') for i in range(2,0,-1)]\n    [print(input()[i],end='') for i in range(3)]\n    print()\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4707,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    count=0\n    for i in range(len(s)):\n        if s[i]=='1':\n            count+=1\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4708,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,k,x,y=[int(input()) for i in range(4)]\n    total=0\n    for i in range(n):\n        if i<k:\n            total+=x\n        else:\n            total+=y\n    return total\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4709,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s=input()\n    a,op,b=s.split()\n    a=int(a)\n    b=int(b)\n    if op==\"+\":\n        return a+b\n    else:\n        return a-b\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4710,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x = int(input())\n    if x < 1200:\n        print(\"ABC\")\n    else:\n        print(\"ARC\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4711,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b,c = sorted(map(int,input().split()))\n    return min(a+b, a+c, b+c)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4712,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split())\n    for i in range(n):\n        print(\"#\"*m)\n    for i in range(n):\n        print(\"#\"+input_string[i]+\"#\")\n    for i in range(n):\n        print(\"#\"*m)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4713,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    input();x,r=0,0\n    for i in input_string:\n        if i=='I':\n            x+=1\n        else:\n            x-=1\n        r=max(r,x)\n    return r\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4714,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a, b = map(int, input().split())\n    count = 0\n    for i in range(a, b+1):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4715,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=set(input().split())\n    b=set(input().split())\n    c=set(input().split())\n    result=set(a.union(b,c))\n    print(len(result))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4716,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    _,k=map(int,input().split());print(sum(sorted(map(int,input().split()))[-k:]))\n    # Take input from the user and split it into a list\n    # Sort the list in descending order\n    # Take the first k elements and return their sum\n    # This will give the maximum possible length of the toy\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4717,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    x,a,b=map(int,input().split());print('AB'[abs(x-a)-abs(x-b)>=0])\n    #print('A' if abs(x-a)<=abs(x-b) else 'B')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4718,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a=input()\n    a=a.replace(\"2017\",\"2018\")\n    print(a)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4719,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n=int(input())\n    S=[]\n    for i in range(n):\n        S.append(input())\n    ans=\"\"\n    for i in range(n):\n        for j in range(len(S[i]):\n            if S[i][j] not in ans:\n                ans+=S[i][j]\n    print(ans)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4720,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    N=int(input())\n    l=[]\n    r=[]\n    for i in range(N):\n        l.append(int(input()))\n        r.append(int(input()))\n    count=0\n    for i in range(N):\n        count+=r[i]-l[i]+1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4721,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    n,m=map(int,input().split());print((n-1)*(m-1))\n    # Replace this code with your solution\ninput_string = input()\nsolution(input_string)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4722,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    a,b=map(int, input().split())\n    if a+b>=9:\n        print(\"Possible\")\n    else:\n        print(\"Impossible\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4723,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    s = input().replace(\\\"?\\\",\\\".\\\")\n    t = input()\n    if t in s:\n        print(s)\n    else:\n        print(\"UNRESTORABLE\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4724,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    r,g=int(input()),int(input())\n    return (r+g)/2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4725,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    count = {}\n    for char in input_string:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    if len(count) == 1:\n        return 0\n    elif len(count) == 2:\n        return 1\n    else:\n        return 2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4726,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    m, n, t = map(int, input_string.split())\n    if t == 1:\n        if n <= m:\n            return \"AC\"\n        else:\n            return \"TLE\"\n    elif t == 2:\n        if n**4 <= m:\n            return \"AC\"\n        else:\n            return \"TLE\"\n    elif t == 3:\n        if n**4 <= m:\n            return \"AC\"\n        else:\n            return \"TLE\"\n    elif t == 4:\n        if n**3 <= m:\n            return \"AC\"\n        else:\n            return \"TLE\"\n    elif t == 5:\n        if n**2 <= m:\n            return \"AC\"\n        else:\n            return \"TLE\"\n    elif t == 6:\n        if n*log2(n) <= m:\n            return \"AC\"\n        else:\n            return \"TLE\"\n    elif t == 7:\n        if n <= m:\n            return \"AC\"\n        else:\n            return \"TLE\"\n    else:\n        return \"TLE\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4727,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to a 2D list\n    grid = [list(map(int, input_string.split('\\n')[0:4]))\n    move = int(input_string.split('\\n')[4])\n    \n    # Define a function to merge tiles\n    def merge(grid):\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    grid[i][j+1] = 0\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    grid[j+1][i] = 0\n        return grid\n    \n    # Define a function to move tiles\n    def move_tiles(grid, direction):\n        if direction == 0:\n            for i in range(4):\n                for j in range(3):\n                    if grid[i][j] != 0:\n                        for k in range(j+1, 3):\n                            if grid[i][k] == 0:\n                                grid[i][k] = grid[i][j]\n                                grid[i][j] = 0\n        elif direction == 1:\n            for j in range(4):\n                for i in range(3):\n                    if grid[i][j] != 0:\n                        for k in range(i+1, 3):\n                            if grid[k][j] == 0:\n                                grid[k][j] = grid[i][j]\n                                grid[i][j] = 0\n        elif direction == 2:\n            for i in range(4):\n                for j in range(3):\n                    if grid[i][j] != 0:\n                        for k in range(j+1, 3):\n                            if grid[i][3-k] == 0:\n                                grid[i][3-k] = grid[i][j]\n                                grid[i][j] = 0\n        else:",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4728,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4729,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    password, message = input_string.split()\n    password_set = set(password)\n    message_set = set(message)\n    password_list = list(password)\n    message_list = list(message)\n    \n    for i in range(len(password_list)):\n        if message_list[i] == password_list[i]:\n            continue\n        elif message_list[i] in password_set:\n            password_set.remove(message_list[i])\n            message_set.remove(message_list[i])\n        else:\n            return \"FAIL\"\n    if len(password_set) == 0:\n        return \"PASS\"\n    else:\n        return \"FAIL\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4730,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    stack = []\n    for i, char in enumerate(input_string):\n        if char in '([{':\n            stack.append(char)\n        elif char in ')]}':\n            if not stack:\n                return char, i\n            elif '([{'['){[')'].index(stack.pop()]}{')}'.index(char)}\n    return 'ok so far' if stack else 'ok so far'\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4731,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    words = input_string.split('\\n')\n    prev_word = words[0]\n    for i in range(1, len(words)):\n        if not words[i].startswith(prev_word[-1]):\n            return f\"Player {i % 2 + 1} lost\"\n        prev_word = words[i]\n    return \"Fair Game\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4732,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, op, B = input_string.split()\n    A = int(A)\n    B = int(B)\n    \n    if op == '+':\n        return A + B\n    else:\n        return A * B\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4733,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    deck_size, shuffle_type = input_string.split()\n    deck_size = int(deck_size)\n    \n    if shuffle_type == \"out\":\n        if deck_size % 2 == 0:\n            return (deck_size // 2) + 1\n        else:\n            return (deck_size // 2) + 2\n    else:\n        if deck_size % 2 == 0:\n            return (deck_size // 2) + 1\n        else:\n            return (deck_size // 2) + 1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4734,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    Y, P = input_string.split()\n    if Y[-1] == 'e':\n        return Y + 'x' + P\n    elif Y[-1] in 'aeiou':\n        return Y[:-1] + 'ex' + P\n    else:\n        return Y + 'ex' + P\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4735,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    year = int(input_string)\n    if year % 26 == 0:\n        return \"yes\"\n    else:\n        return \"no\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4736,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = [int(x) for x in input_string.split()]\n    K = int(input())\n    if K == 1:\n        return 10\n    if K == 2:\n        return 45\n    if K == 3:\n        return 360\n    if K == 4:\n        return 3024\n    if K == 5:\n        return 2520\n    if K == 6:\n        return 19000\n    if K == 7:\n        return 13200\n    if K == 8:\n        return 84000\n    if K == 9:\n        return 48600\n    if K == 10:\n        return 201600\n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4737,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, p = map(int, input_string.split())\n    time_estimates = list(map(int, input().split()))\n    time_estimates.sort()\n    \n    if time_estimates[p] > 30:\n        return 0, 0\n    \n    num_ac = 1\n    penalty_time = time_estimates[p]\n    for i in range(p+1, N):\n        if time_estimates[i] <= 30:\n            num_ac += 1\n            penalty_time += time_estimates[i]\n            if penalty_time > 300:\n                return num_ac-1, penalty_time\n    \n    return num_ac, penalty_time\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4738,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    k = 1\n    while len(input_string) % k != 0:\n        k += 1\n    for i in range(1, len(input_string)//k):\n        if input_string[i*k:(i+1)*k] != input_string[:k]:\n            k += 1\n            break\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4739,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    M, N = map(int, input_string.split()[:2])\n    T = list(map(int, input_string.split()[2:2+M])\n    X = list(map(int, input_string.split()[2+M:])\n    \n    # calculate the distance between each milestone\n    distance = [X[i+1] - X[i] for i in range(N-1)]\n    \n    # calculate the time between each milestone\n    time = [T[i+1] - T[i] for i in range(M-1)]\n    \n    # calculate the speed between each milestone\n    speed = [distance[i]/time[i] for i in range(M-1)]\n    \n    # calculate the possible speeds\n    possible_speeds = set(speed)\n    \n    # calculate the distance between the first and second milestone\n    distance_between = [X[1] - X[0]]\n    \n    # return the number of possible speeds and the distance between the first and second milestone\n    return len(possible_speeds), distance_between\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4740,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    if input_string.startswith('55'):\n        return 1\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4741,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into numerator and denominator\n    num, denom = input_string.split('/')\n    num, denom = int(num), int(denom)\n    \n    # Convert Fahrenheit to Celsius\n    celsius = (num - 32) * 5/9\n    \n    # Convert Celsius to lowest terms\n    a = int(celsius * denom)\n    b = denom\n    gcd = math.gcd(a, b)\n    a //= gcd\n    b //= gcd\n    \n    # Return the result as a string\n    return str(a) + '/' + str(b)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4742,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Nonsense\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4743,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    consonants = ['b', 'c', 'd', 'g', 'k', 'p', 't']\n    nimion_consonants = ['b', 'c', 'd', 'g', 'k', 'p', 't', 'f', 'v', 's', 'z', 'h', 'j', 'm', 'n', 'r', 'l', 'w', 'y', 'x', 'q', 'z']\n    nimion_vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    nimion_vowels_dict = {'a': 'A', 'e': 'E', 'i': 'I', 'o': 'O', 'u': 'U', 'A': 'a', 'E': 'e', 'I': 'i', 'O': 'o', 'U': 'u'}\n    nimion_consonants_dict = {'b': 'd', 'c': 'c', 'd': 'd', 'g': 'g', 'k': 'k', 'p': 'p', 't': 't', 'f': 'f', 'v': 'v', 's': 's', 'z': 'z', 'h': 'h', 'j': 'j', 'm': 'm', 'n': 'n', 'r': 'r', 'w': 'w', 'y': 'y', 'x': 'x', 'q': 'q', 'z': 'z'}\n    output = []\n    for word in input_string.split():\n        if word[-1] in consonants:\n            word = word[:-1] + 'ah'\n        else:\n            word = word\n        for i, char in enumerate(word):\n            if char in vowels:\n                if i == 0:\n                    output.append(nimion_vowels_dict[char])\n                else:\n                    output.append(nimion_vowels_dict[char])\n            elif char in consonants:\n               ",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4744,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to integer\n    V = int(input_string)\n    \n    # Initialize variables\n    min_cost = float('inf')\n    min_dimension = 0\n    \n    # Iterate through all possible dimensions of the box\n    for i in range(1, V+1):\n        for j in range(1, V+1):\n            # Calculate the cost of the box\n            cost = i * j\n            # Check if the cost is less than the current minimum\n            if cost < min_cost:\n                min_cost = cost\n                min_dimension = i * j\n    \n    # Return the minimum cost\n    return min_cost\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4745,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, X = map(int, input_string.split())\n    prices = list(map(int, input().split()))\n    prices.sort()\n    count = 0\n    for i in range(n):\n        if prices[i] > X:\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4746,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # split the input string into a list of lists\n    input_list = [list(map(int, line.split())) for line in input_string.split('\\n')]\n    \n    # initialize variables\n    capacity = input_list[0][0]\n    num_stations = input_list[0][1]\n    total_people = 0\n    total_waiting = 0\n    \n    # iterate through the list of lists\n    for i in range(1, len(input_list)):\n        # add the number of people who left the train\n        total_people += input_list[i][0]\n        # subtract the number of people who entered the train\n        total_people -= input_list[i][1]\n        # add the number of people who had to wait\n        total_waiting += input_list[i][2]\n        \n        # check if the train is empty or overcapacity\n        if total_people > capacity or total_people < 0:\n            return \"impossible\"\n        \n        # check if there are people waiting in vain\n        if total_waiting > 0:\n            return \"impossible\"\n        \n    # check if the train started and finished empty\n    if total_people == 0:\n        return \"possible\"\n    else:\n        return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4747,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif k == 1:\n        return 1\n    elif k == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 2.5\n    elif n == 5:\n        return 3.5\n    elif n == 6:\n        return 4.5\n    elif n == 7:\n        return 5.5\n    elif n == 8:\n        return 6.5\n    elif n == 9:\n        return 7.5\n    elif n == 10:\n        return 8.5\n    elif n == 11:\n        return 9.5\n    elif n == 12:\n        return 10.5\n    elif n == 13:\n        return 11.5\n    elif n == 14:\n        return 12.5\n    elif n == 15:\n        return 13.5\n    elif n == 16:\n        return 14.5\n    elif n == 17:\n        return 15.5\n    elif n == 18:\n        return 16.5\n    elif n == 19:\n        return 17.5\n    elif n == 20:\n        return 18.5\n    elif n == 21:\n        return 19.5\n    elif n == 22:\n        return 20.5\n    elif n == 23:\n        return 21.5\n    elif n == 24:\n        return 22.5\n    elif n == 25:\n        return 23.5\n    elif n == 26:\n        return 24.5\n    elif n == 27:\n        return 25.5\n    elif n == 28:\n        return 26.5\n    elif n == 29:\n        return 27.5\n    elif n ==",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4748,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    H, N, M = map(int, input_string.split())\n    A = (H-1)//2\n    B = (H-1)%2\n    return A, B\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4749,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4750,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    l,r,l1,r2=map(int,input().split())\n    if l1<=r2:\n        print(l1,r2)\n    else:\n        print(r2,l1)\n    if l<=r2:\n        print(l,r)\n    else:\n        print(r,l)\n    if l<=r1:\n        print(l,r1)\n    else:\n        print(r1,l)\n    if l1<=r:\n        print(l1,r)\n    else:\n        print(r,l1)\n    if l2<=r1:\n        print(l2,r1)\n    else:\n        print(r1,l2)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4751,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Create a linked list from the input list\n    head = create_linked_list(input_list)\n    \n    # Add a cycle to the linked list\n    add_cycle(head, input_list)\n    \n    # Check if there is a cycle in the linked list\n    return has_cycle(head)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4752,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of integers\n    nums = list(map(int, input_string.split()))\n    \n    # Initialize a dictionary to store the numbers and their indices\n    num_dict = {}\n    \n    # Loop through the list of numbers\n    for i, num in enumerate(nums):\n        # Check if the difference between the target and the current number is in the dictionary\n        if target - num in num_dict:\n            # If it is, return the indices of the current number and the difference\n            return [num_dict[target - num], i]\n        # If not, add the current number and its index to the dictionary\n        else:\n            num_dict[num] = i\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4753,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4754,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    socks = list(map(int, input_string[1].split()))\n    socks.sort()\n    aux_pile = []\n    moves = 0\n    i = 0\n    j = n-1\n    \n    while i < n and j >= 0:\n        if socks[i] == socks[j]:\n            aux_pile.append(socks[i])\n            i += 1\n            j -= 1\n            moves += 1\n        elif socks[i] != socks[j]:\n            if len(aux_pile) == 0:\n                return \"impossible\"\n            else:\n                aux_pile.pop()\n                i += 1\n                moves += 1\n        else:\n            return \"impossible\"\n    \n    if i == n and j == 0:\n        return moves\n    else:\n        return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4755,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    candy_price, smallest_bill = input_string.split()\n    candy_price = int(candy_price)\n    smallest_bill = int(smallest_bill)\n    \n    if smallest_bill == 0:\n        return candy_price\n    \n    if candy_price % 10**smallest_bill == 0:\n        return candy_price\n    \n    else:\n        return candy_price - candy_price % 10**smallest_bill + 10**smallest_bill\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4756,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N = int(input_string[0])\n    homes = [tuple(map(int, input_string[i+1].split())) for i in range(N)]\n    \n    # calculate the unusefulness for each citizen\n    unusefulness = [min(abs(x-y-a)**2 + abs(y-a)**2 for x,y in homes) for a in range(100000001)]\n    \n    # return the minimum unusefulness\n    return min(unusefulness)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4757,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of lists\n    villagers = []\n    for i in range(2, len(input_string), 2):\n        villagers.append(list(map(int, input_string[i].split()))\n    \n    # Initialize a dictionary to keep track of songs known by each villager\n    songs_known = {i: set() for i in range(1, N+1)}\n    \n    # Iterate through each evening\n    for evening in villagers:\n        # Add the songs sung by the bard to the set of songs known by all villagers\n        songs_known[1].update(evening)\n        # Remove the songs sung by the bard from the set of songs known by the other villagers\n        for villager in evening[1:]:\n            songs_known[villager].difference_update(evening)\n    \n    # Find the villagers that know all songs\n    result = [villager for villager, songs in songs_known.items() if len(songs) == 0]\n    \n    # Sort and return the result\n    return sorted(result)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4758,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, t, m = map(int, input_string.split())\n    return (n+t+m) * (n+t+m-1) * (n+t+m-2) // 6\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4759,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    at_bats = input_string.split()\n    at_bats = [int(x) for x in at_bats]\n    total_bases = 0\n    total_at_bats = 0\n    \n    for at_bat in at_bats:\n        if at_bat == 0:\n            total_bases += 1\n        elif at_bat == 1:\n            total_bases += 1\n        elif at_bat == 2:\n            total_bases += 2\n        elif at_bat == 3:\n            total_bases += 3\n        elif at_bat == 4:\n            total_bases += 4\n        total_at_bats += 1\n    \n    return total_bases/total_at_bats\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4760,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    primes = [True] * (N+1)\n    primes[0] = primes[1] = False\n    p = 2\n    count = 0\n    while p*p <= N:\n        if primes[p]:\n            for i in range(p*p, N+1, p):\n                primes[i] = False\n        p += 1\n        while p*p <= N and p <= N:\n            if primes[p]:\n                p += 1\n            else:\n                break\n    count = 0\n    for i in range(2, N+1):\n        if primes[i]:\n            count += 1\n            if count == K:\n                return i\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4761,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    L, H = map(int, input_string.split())\n    count = 0\n    for i in range(L, H+1):\n        if len(set(str(i))) == 6 and all(i%int(d) == 0 for d in str(i)):\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4762,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string)\n    return 1 - (1/N)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4763,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    target = int(input_string)\n    if target == 0:\n        return \"impossible\"\n    elif target % 3 == 0:\n        return \"triple \" + str(target//3)\n    elif target % 2 == 0:\n        return \"double \" + str(target//2)\n    else:\n        return \"single \" + str(target)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4764,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, h, v = map(int, input_string.split())\n    # calculate the volume of the original cake\n    volume = n * n * 4\n    # calculate the volume of the two pieces after the cuts\n    piece1 = (n - h) * (n - v) * 4\n    piece2 = (h) * (n - v) * 4\n    piece3 = (n - h) * (v) * 4\n    piece4 = (h) * (v) * 4\n    # find the maximum volume\n    max_volume = max(piece1, piece2, piece3, piece4)\n    return max_volume\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4765,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N = int(input_string[0])\n    ingredients = [tuple(map(int, input_string[i].split())) for i in range(1, N+1)]\n    \n    # sort ingredients by sourness\n    ingredients.sort(key=lambda x: x[0])\n    \n    # calculate the difference between sourness and bitterness\n    sourness = sum(ingredient[0] for ingredient in ingredients)\n    bitterness = sum(ingredient[1] for ingredient in ingredients)\n    \n    return abs(sourness - bitterness)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4766,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    for i in range(len(input_string)):\n        if input_string[i].startswith(\"Simon says\"):\n            print(input_string[i][10:])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4767,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input_string.split())\n    count = 0\n    while True:\n        v2 += 1\n        if v2 == 2:\n            v2 = 0\n            v3 += 1\n            if v3 == 3:\n                v3 = 0\n                v5 += 1\n                if v5 == 5:\n                    v5 = 0\n                    v7 += 1\n                    if v7 == 7:\n                        v7 = 0\n                        v11 += 1\n                        if v11 == 11:\n                            v11 = 0\n                            v13 += 1\n                            if v13 == 13:\n                                v13 = 0\n                                v17 += 1\n                                if v17 == 17:\n                                    v17 = 0\n                                    v19 += 1\n                                    if v19 == 19:\n                                        break\n                                else:\n                                    v19 = 0\n                            else:\n                                v19 = 0\n                        else:\n                            v19 = 0\n                    else:\n                        v19 = 0\n                else:\n                    v19 = 0\n            else:\n                v19 = 0\n        else:\n            v19 = 0\n        count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4768,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4769,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4770,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    if N == M:\n        return \"Dr. Chaz will have 0 piece[s] of chicken left over!\"\n    elif N > M:\n        return \"Dr. Chaz will have {} piece[s] of chicken left over!\".format(N-M)\n    else:\n        return \"Dr. Chaz needs {} more piece[s] of chicken!\".format(M-N)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4771,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, V = map(int, input_string.split())\n    boxes = []\n    for i in range(n):\n        l, w, h = map(int, input().split())\n        boxes.append((l, w, h))\n    \n    # calculate volumes\n    volumes = [l*w*h for l, w, h in boxes]\n    \n    # find largest box\n    max_volume = max(volumes)\n    \n    # calculate difference\n    diff = max_volume - V\n    \n    return diff\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4772,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string to a list of lists\n    crossword = [list(row) for row in input_string.split('\\n')]\n    \n    # Initialize variables\n    min_word = ''\n    min_length = float('inf')\n    \n    # Iterate through each row and column\n    for i in range(len(crossword)):\n        for j in range(len(crossword[0])):\n            if crossword[i][j] != '#':\n                # Check if the word can be formed horizontally\n                if j+1 < len(crossword[0]) and crossword[i][j+1] != '#':\n                    word = crossword[i][j]\n                    k = j+1\n                    while k < len(crossword[0]) and crossword[i][k] != '#':\n                        word += crossword[i][k]\n                        k += 1\n                    if len(word) >= 2 and word < min_word:\n                        min_word = word\n                        min_length = len(word)\n                # Check if the word can be formed vertically\n                if i+1 < len(crossword) and crossword[i+1][j] != '#':\n                    word = crossword[i][j]\n                    k = i+1\n                    while k < len(crossword) and crossword[k][j] != '#':\n                        word += crossword[k][j]\n                        k += 1\n                    if len(word) >= 2 and word < min_word:\n                        min_word = word\n                        min_length = len(word)\n    \n    return min_word\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4773,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    macro_dict = {'N': 'N', 'S': 'S', 'E': 'E', 'W': 'W', 'M': 'M'}\n    macro_count = 0\n    macro_length = 0\n    macro_string = ''\n    macro_used = False\n    macro_start = 0\n    macro_end = 0\n    macro_start_char = ''\n    macro_end_char = ''\n    macro_dict_keys = ['N', 'S', 'E', 'W']\n    macro_dict_values = ['N', 'S', 'E', 'W']\n    macro_dict_values_index = 0\n    macro_dict_keys_index = 0\n    macro_dict_values_length = len(macro_dict_values)\n    input_string_length = len(input_string)\n    input_string_index = 0\n    input_string_index_max = input_string_length - 1\n    input_string_char = ''\n    output_string = ''\n    \n    # Loop through the input string\n    while input_string_index <= input_string_index_max:\n        input_string_char = input_string[input_string_index]\n        \n        # Check if the current character is a macro\n        if input_string_char == 'M':\n            # Check if a macro has already been defined\n            if macro_used:\n                # If a macro has been defined, add it to the output string\n                output_string += macro_string\n                # Reset the macro variables\n                macro_count += 1\n                macro_used = False\n                macro_length = 0\n                macro_start = input_string_index + 1\n                macro_end = input_string_index + 1\n                macro_start_char = ''\n                macro_end_char = ''\n                macro_dict_keys_index = 0\n                macro_dict_values_index = 0\n            else:\n                # If no macro has been defined, define one\n                macro_start = input_string_index\n                macro_used = True\n        \n        # If the current character is not a macro, add it to the output string\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4774,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b, c, d = map(int, input_string.split())\n    operators = ['+', '-', '*', '/']\n    valid_expressions = []\n    \n    for op1 in operators:\n        for op2 in operators:\n            for op3 in operators:\n                for op4 in operators:\n                    if op1 == '/' and d == 0:\n                        continue\n                    if op2 == '/' and d == 0:\n                        continue\n                    if op3 == '/' and d == 0:\n                        continue\n                    if op4 == '/' and d == 0:\n                        continue\n                    if op1 == '*' and op2 == '*' and op3 == '*' and op4 == '*':\n                        continue\n                    if op1 == '+' and op2 == '+' and op3 == '+' and op4 == '+':\n                        continue\n                    if op1 == '-' and op2 == '-' and op3 == '-' and op4 == '-':\n                        continue\n                    if op1 == '*' and op2 == '-' and op3 == '+' and op4 == '/':\n                        continue\n                    if op1 == '*' and op2 == '+' and op3 == '-' and op4 == '/':\n                        continue\n                    if op1 == '*' and op2 == '+' and op3 == '/' and op4 == '-':\n                        continue\n                    if op1 == '-' and op2 == '-' and op3 == '*' and op4 == '/':\n                        continue\n                    if op1 == '-' and op2 == '+' and op3 == '*' and op4 == '/':\n                        continue\n                    if op1 == '+' and op2 == '-' and op3 == '*' and op4 == '/':\n                        continue\n                    if op1 == '+' and op2 == '*' and op3 == '-' and op4 == '/':\n                        continue\n                    if op1 == '-' and op2 == '*' and op3 == '+' and op4 == '/':\n                        continue\n                    if op1 == '",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4775,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, B = input_string.split()\n    N = len(A)\n    M = len(B)\n    for i in range(M):\n        for j in range(N):\n            if A[j] == B[i]:\n                print(B[i], end='')\n            else:\n                print('.', end='')\n        print()\n    for i in range(N):\n        print(A[i], end='')\n        print('.', end='')\n    print()\n    for i in range(M):\n        print('.', end='')\n    print()\n    for i in range(N):\n        print('.', end='')\n    print()\n    for i in range(M):\n        print(B[i], end='')\n        print('.', end='')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4776,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4777,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    a_count = 0\n    b_count = 0\n    current_letter = 'A'\n    \n    # Loop through each character in the input string\n    for i in range(len(input_string)):\n        # If the current character is 'A', increment the a_count\n        if input_string[i] == 'A':\n            a_count += 1\n        # If the current character is 'B', increment the b_count\n        elif input_string[i] == 'B':\n            b_count += 1\n        # If the current character is 'B', increment the b_count and change the current_letter to 'A'\n        else:\n            b_count += 1\n            current_letter = 'A'\n            \n    # Return the final counts of A and B\n    return a_count, b_count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4778,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    P, D = map(int, input_string.split()[:2])\n    precincts = [list(map(int, input_string.split()[2:]) for _ in range(P))\n    # initialize variables\n    total_votes_A = total_votes_B = 0\n    wasted_votes_A = wasted_votes_B = 0\n    # iterate over districts\n    for district in range(D):\n        # iterate over precincts in district\n        for precinct in range(P):\n            if precincts[precinct][0] == district + 1:\n                total_votes_A += precincts[precinct][1]\n                total_votes_B += precincts[precinct][2]\n                # calculate wasted votes\n                if total_votes_A > total_votes_B:\n                    wasted_votes_A += total_votes_A - total_votes_B - 1\n                elif total_votes_B > total_votes_A:\n                    wasted_votes_B += total_votes_B - total_votes_A - 1\n        # determine winner\n        if total_votes_A > total_votes_B:\n            winner = 'A'\n        elif total_votes_B > total_votes_A:\n            winner = 'B'\n        else:\n            winner = 'T'\n        # print results\n        print(winner, wasted_votes_A, wasted_votes_B)\n        # reset variables\n        total_votes_A = total_votes_B = 0\n        wasted_votes_A = wasted_votes_B = 0\n    # calculate efficiency gap\n    efficiency_gap = abs(wasted_votes_A - wasted_votes_B) / (total_votes_A + total_votes_B)\n    print(efficiency_gap)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4779,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    a = list(map(int, input_string[1:]))\n    a.sort()\n    k = n // 2\n    return (a[0] ** 2 + sum(a[1:k+1]) ** 2) * (a[k] ** 2 + sum(a[k+1:]))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4780,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4781,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4782,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    # create a graph with n nodes and m edges\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        graph[i].append(i)\n    # add edges to the graph\n    for i in range(m):\n        a, b = map(int, input().split())\n        graph[a-1].append(b-1)\n        graph[b-1].append(a-1)\n    # find the maximum cost of plowing the roads\n    def dfs(node, visited, cost, depth):\n        if visited[node]:\n            return cost\n        visited[node] = True\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                cost = max(cost, dfs(neighbor, visited, cost+depth))\n        return cost\n    # find the maximum cost of plowing the roads\n    max_cost = 0\n    for i in range(n):\n        visited = [False] * n\n        max_cost = max(max_cost, dfs(i, visited, 1))\n    return max_cost\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4783,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    M, N = map(int, input_string.split())\n    coins = [list(map(int, input().split())) for _ in range(M)]\n    \n    # initialize variables\n    min_ladder_length = float('inf')\n    current_height = 0\n    current_row = 0\n    current_col = 0\n    \n    # loop through each coin\n    for row in coins:\n        for coin in row:\n            # calculate distance to special coin\n            distance = abs(current_height - coin)\n            # update min_ladder_length if necessary\n            min_ladder_length = min(min_ladder_length, distance)\n            # update current_height and current_col\n            current_height = coin\n            current_col += 1\n    \n    # return result\n    return min_ladder_length\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4784,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    X, N = map(int, input_string.split())\n    P = list(map(int, input().split()))\n    total_spent = sum(P)\n    remaining_spent = X - total_spent\n    if remaining_spent < 0:\n        remaining_spent = 0\n    return remaining_spent\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4785,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    if 'ss' in input_string:\n        return 'hiss'\n    else:\n        return 'no hiss'\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4786,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize an empty set to store unique keywords\n    unique_keywords = set()\n    \n    # Iterate through each keyword in the input string\n    for keyword in input_string:\n        # Replace hyphens with spaces and convert to lowercase\n        keyword = keyword.replace('-', ' ').lower()\n        # Add the keyword to the set\n        unique_keywords.add(keyword)\n    \n    # Initialize a counter to keep track of the number of non-similar keywords\n    non_similar_keywords = 0\n    \n    # Iterate through each pair of keywords in the set\n    for i in range(len(unique_keywords)):\n        for j in range(i+1, len(unique_keywords)):\n            # If the two keywords are not similar, increment the counter\n            if unique_keywords[i] != unique_keywords[j]:\n                non_similar_keywords += 1\n    \n    # Return the final count\n    return non_similar_keywords\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4787,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    tablet_count = input_string.count('T')\n    compass_count = input_string.count('C')\n    gear_count = input_string.count('G')\n    \n    total_points = tablet_count**2 + compass_count**2 + gear_count**2\n    \n    if tablet_count >= 3 and compass_count >= 3 and gear_count >= 3:\n        total_points += 7\n    \n    return total_points\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4788,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n1, n2 = map(int, input_string.split())\n    \n    if n1 == n2:\n        return 0\n    elif n1 < n2:\n        return n2 - n1\n    else:\n        return 360 - n1 + n2\n    \n    # return min(abs(n2 - n1), 360 - abs(n2 - n1))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4789,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Initialize variables\n    num_clerks = len(input_list)\n    num_passes = 0\n    current_clerk = 1\n    \n    # Loop through the list of clerks\n    for i in range(num_clerks):\n        # Find the index of the current clerk in the list\n        index = input_list.index(current_clerk)\n        # If the clerk is not at the end of the list, move to the next clerk\n        if index < num_clerks - 1:\n            current_clerk = input_list[index + 1]\n            num_passes += 1\n        # If the clerk is at the end of the list, move to the first clerk\n        else:\n            current_clerk = input_list[0]\n            num_passes += 1\n    \n    return num_passes\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4790,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4791,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    s1, s2, s3, s4 = map(int, input_string.split())\n    p1 = (s1 + s2) / 2\n    p2 = (s1 + s3) / 2\n    p3 = (s2 + s4) / 2\n    p4 = (s3 + s4) / 2\n    area = (p1 * p2 + p3 * p4) / 2\n    return area\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4792,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize an empty string to store the compact version of the name\n    compact_name = \"\"\n    \n    # Loop through each character in the input string\n    for i in range(len(input_string)):\n        # If the current character is the same as the next character, skip it\n        if i < len(input_string) - 1 and input_string[i] == input_string[i+1]:\n            continue\n        # Otherwise, add the current character to the compact name\n        else:\n            compact_name += input_string[i]\n    \n    # Return the compact name\n    return compact_name\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4793,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    s, v1, v2 = map(int, input_string.split())\n    if v1 > s:\n        return \"Impossible\"\n    else:\n        n1 = s // v1\n        n2 = (s - n1 * v1) // v2\n        return n1, n2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4794,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def count_squashable_spaces(input_string, monster_size):\n        rows = input_string.split('\\n')\n        parking_spaces = 0\n        for row in rows:\n            for i in range(len(row) - monster_size + 1):\n                if all(c == '.' for c in row[i:i+monster_size]):\n                    parking_spaces += 1\n        return parking_spaces\n    \n    count_0 = count_squashable_spaces(input_string, 1)\n    count_1 = count_squashable_spaces(input_string, 2)\n    count_2 = count_squashable_spaces(input_string, 3)\n    count_3 = count_squashable_spaces(input_string, 4)\n    count_4 = count_squashable_spaces(input_string, 5)\n    \n    return count_0, count_1, count_2, count_3, count_4\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4795,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Calculate the sum of the list\n    result = sum(input_list)\n    \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4796,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    input_list = input_string.split()\n    A, B, C = map(int, input_list[:3])\n    I, J, K = map(int, input_list[3:])\n    \n    leftover_orange = A - I * 3\n    leftover_apple = B - J * 2\n    leftover_pineapple = C - K\n    \n    return leftover_orange, leftover_apple, leftover_pineapple\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4797,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    output_string = \"\"\n    for char in input_string:\n        if char == \"<\":\n            output_string = output_string[:-1]\n        else:\n            output_string += char\n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4798,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into a list of words\n    words = input_string.split('-')\n    \n    # Initialize the output string\n    output = ''\n    \n    # Iterate through the words\n    for word in words:\n        # Add the first letter of each word to the output string\n        output += word[0]\n    \n    return output\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4799,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    G, S, C = map(int, input_string.split())\n    if G + S + C == 5:\n        return \"Province or Gold\"\n    elif G + S == 5:\n        return \"Duchy or Gold\"\n    elif G + C == 5:\n        return \"Estate or Silver\"\n    elif S + C == 5:\n        return \"Province or Silver\"\n    elif G == 5:\n        return \"Duchy or Copper\"\n    elif S == 5:\n        return \"Estate or Copper\"\n    elif C == 5:\n        return \"Province or Gold\"\n    else:\n        return \"Copper\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4800,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    d, s = map(int, input().split())\n    \n    if k == n:\n        return \"impossible\"\n    \n    if k == 0:\n        return d\n    \n    return (d * k + s) / (n - k)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4801,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    A = list(map(int, input_string.split()))\n    \n    # Initialize greedy sequence\n    gis = [A[0]]\n    \n    # Loop through the list\n    for i in range(1, len(A)):\n        # Find the leftmost integer larger than the previous element in the greedy sequence\n        for j in range(i-1, -1, -1):\n            if A[j] < A[i]:\n                gis.append(A[j])\n                break\n    \n    # Output the length of the greedy sequence\n    print(len(gis))\n    \n    # Output the greedy sequence\n    print(*gis)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4802,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    input_list = input_string.split()\n    hours = int(input_list[0])\n    minutes = int(input_list[1])\n    \n    if minutes == 0:\n        minutes = 59\n        hours -= 1\n    else:\n        minutes -= 45\n    \n    if minutes < 0:\n        minutes += 60\n        hours -= 1\n    \n    if hours < 0:\n        hours += 24\n    \n    return f\"{hours} {minutes}\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4803,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    return 0.0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4804,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def is_valid(pattern):\n        n, m = pattern\n        if n < m:\n            return False\n        if n == m:\n            return True\n        if n % 2 == 0:\n            return False\n        if m % 2 == 0:\n            return False\n        if n % (m+1) != 0:\n            return False\n        return True\n    \n    def generate_patterns(n):\n        patterns = []\n        for i in range(1, n//2+1):\n            for j in range(1, n//2+1):\n                if is_valid((i, j):\n                    patterns.append((i, j))\n        return patterns\n    \n    def compact_pattern(pattern):\n        return f\"{pattern[0]},{pattern[1]}\"\n    \n    def print_patterns(patterns):\n        for pattern in patterns:\n            print(compact_pattern(pattern))\n    \n    input_int = int(input_string)\n    patterns = generate_patterns(input_int)\n    print(input_int, \":\")\n    print_patterns(patterns)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4805,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    words = input_string.split()\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if words[i] == words[j]:\n                return \"no\"\n    return \"yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4806,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    output_string = \"\"\n    combo_breaker_used = False\n    for move in input_string:\n        if move == 'R':\n            if combo_breaker_used:\n                output_string += 'S'\n                combo_breaker_used = False\n            else:\n                output_string += 'K'\n        elif move == 'B':\n            if combo_breaker_used:\n                output_string += 'S'\n                combo_breaker_used = False\n            else:\n                output_string += 'K'\n        elif move == 'L':\n            if combo_breaker_used:\n                output_string += 'H'\n                combo_breaker_used = False\n            else:\n                output_string += 'S'\n        elif move == 'RB':\n            output_string += 'C'\n            combo_breaker_used = True\n        elif move == 'BR':\n            output_string += 'C'\n            combo_breaker_used = True\n        elif move == 'BL':\n            output_string += 'C'\n            combo_breaker_used = True\n        elif move == 'LR':\n            output_string += 'C'\n            combo_breaker_used = True\n        elif move == 'LB':\n            output_string += 'C'\n            combo_breaker_used = True\n        elif move == 'BR':\n            output_string += 'C'\n            combo_breaker_used = True\n        elif move == 'RL':\n            output_string += 'C'\n            combo_breaker_used = True\n    return output_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4807,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    X, Y, N = map(int, input_string.split())\n    for i in range(1, N+1):\n        if i % X == 0 and i % Y == 0:\n            print(\"FizzBuzz\")\n        elif i % X == 0:\n            print(\"Fizz\")\n        elif i % Y == 0:\n            print(\"Buzz\")\n        else:\n            print(i)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4808,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, d_m = map(int, input_string.split())\n    d = list(map(int, input().split()))\n    k = 0\n    for i in range(n):\n        if d[i] > d_m:\n            k = i + 1\n            break\n    if k == 0:\n        print(\"It hadn't snowed this early in\", n, \"years!\")\n    else:\n        print(\"It hadn't snowed this early in\", k, \"years!\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4809,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    s, n = input_string\n    s = int(s)\n    n = int(n)\n    count = 0\n    for i in range(1, n+1):\n        count += i\n    return count % n + 1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4810,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4811,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    k = int(input_string)\n    min_size = 1\n    min_breaks = 0\n    while k > 0:\n        if k % 2 == 0:\n            k //= 2\n            min_size *= 2\n            min_breaks += 1\n        else:\n            k -= 1\n            min_size *= 2\n            min_breaks += 1\n    return min_size, min_breaks\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4812,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4813,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    word = input_string[0]\n    alphabet = input_string[1]\n    #print(word, alphabet)\n    #print(list(alphabet))\n    #print(sorted(list(alphabet))\n    #print(sorted(word))\n    if sorted(word) == sorted(alphabet):\n        return \"WIN\"\n    else:\n        return \"LOSE\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4814,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string to a list of names\n    names = input_string.split(\"\\n\")\n    \n    # Sort the list of names\n    sorted_names = sorted(names)\n    \n    # Check if the sorted list is the same as the original list\n    if sorted_names == names:\n        return \"INCREASING\"\n    # Check if the sorted list is the reverse of the original list\n    elif sorted_names == names[::-1]:\n        return \"DECREASING\"\n    else:\n        return \"NEITHER\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4815,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n, p, m = map(int, input_string.split())\n    participants = {}\n    for i in range(n):\n        participants[input()] = 0\n    for i in range(m):\n        name, score = input().split()\n        participants[name] += int(score)\n    \n    # Find winners\n    winners = [name for name, score in participants.items() if score >= p]\n    \n    # Output winners\n    if len(winners) == 0:\n        print(\"No winner!\")\n    else:\n        for winner in winners:\n            print(winner + \" wins!\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4816,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    x, y, x1, y1, x2, y2 = map(int, input_string.split())\n    # print(x, y, x1, y1, x2, y2)\n    # calculate the distance between the fence post and the house\n    dist_x = min(abs(x - x1), abs(x - x2))\n    dist_y = min(abs(y - y1), abs(y - y2))\n    # print(dist_x, dist_y)\n    # calculate the distance between the fence post and the closest corner of the house\n    dist_house_x = min(abs(x - x1), abs(x - x2))\n    dist_house_y = min(abs(y - y1), abs(y - y2))\n    # print(dist_house_x, dist_house_y)\n    # calculate the distance between the closest corner of the house and the other corner\n    dist_house_corner = min(abs(x1 - x2), abs(y1 - y2))\n    # print(dist_house_corner)\n    # calculate the distance between the closest corner of the house and the fence post\n    dist_fence_corner = min(abs(x1 - x), abs(y1 - y))\n    # print(dist_fence_corner)\n    # calculate the distance between the fence post and the other corner of the house\n    dist_fence_x = min(abs(x - x1), abs(x - x2))\n    dist_fence_y = min(abs(y - y1, y - y2)\n    # print(dist_fence_x, dist_fence_y)\n    # calculate the distance between the closest corner of the house and the fence post\n    dist_house_fence_corner = min(abs(x1 - x), abs(y1 - y))\n    # print(dist_house_fence_corner)\n    # calculate the distance between the closest corner of the house and the fence post\n    dist_house_fence_corner = min(abs(x2 - x), abs(y2 - y))\n    # print(dist",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4817,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input integer to a string\n    input_string = str(input_string)\n    \n    # Sort the digits in descending order\n    sorted_string = ''.join(sorted(input_string, reverse=True))\n    \n    # Check if the largest digit is 9\n    if sorted_string[0] == '9':\n        return 0\n    \n    # Find the index of the largest digit\n    index = sorted_string.index(sorted_string[0])\n    \n    # Increment the digit at the index\n    sorted_string = list(sorted_string)\n    sorted_string[index] = str(int(sorted_string[index]) + 1)\n    \n    # Convert the list back to a string\n    sorted_string = ''.join(sorted_string)\n    \n    # Check if the incremented number is greater than X\n    if int(sorted_string) > int(input_string):\n        return sorted_string\n    else:\n        return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4818,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, m = map(int, input_string.split()[0].split(','))\n    tasks = list(map(int, input_string.split()[1].split(','))\n    intervals = list(map(int, input_string.split()[2].split(','))\n    \n    # initialize variables\n    max_tasks = 0\n    current_task = 0\n    current_time = 0\n    \n    # iterate through tasks\n    for task in tasks:\n        # check if current task can be completed\n        if current_time + task <= intervals[current_interval]:\n            current_task += 1\n            current_time += task\n        else:\n            # move to next interval\n            current_interval += 1\n            current_task = 1\n            current_time = task\n    \n    return current_task\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4819,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    input_list = input_string.split()\n    modulo_list = []\n    \n    for num in input_list:\n        modulo_list.append(int(num) % 42)\n    \n    distinct_list = list(set(modulo_list))\n    \n    return len(distinct_list)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4820,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, b = map(int, input_string.split())\n    \n    if b == 0:\n        return \"yes\"\n    \n    if N == 1:\n        return \"yes\"\n    \n    if N == 2:\n        return \"no\"\n    \n    if N == 3:\n        return \"no\"\n    \n    if N == 4:\n        return \"no\"\n    \n    if N == 5:\n        return \"no\"\n    \n    if N == 6:\n        return \"no\"\n    \n    if N == 7:\n        return \"no\"\n    \n    if N == 8:\n        return \"no\"\n    \n    if N == 9:\n        return \"no\"\n    \n    if N == 10:\n        return \"no\"\n    \n    if N == 11:\n        return \"no\"\n    \n    if N == 12:\n        return \"no\"\n    \n    if N == 13:\n        return \"no\"\n    \n    if N == 14:\n        return \"no\"\n    \n    if N == 15:\n        return \"no\"\n    \n    if N == 16:\n        return \"no\"\n    \n    if N == 17:\n        return \"no\"\n    \n    if N == 18:\n        return \"no\"\n    \n    if N == 19:\n        return \"no\"\n    \n    if N == 20:\n        return \"no\"\n    \n    if N == 21:\n        return \"no\"\n    \n    if N == 22:\n        return \"no\"\n    \n    if N == 23:\n        return \"no\"\n    \n    if N == 24:\n        return \"no\"\n    \n    if N == 25:\n        return \"no\"\n    \n    if N == 26:\n        return \"no\"\n    \n    if N == 27:\n        return \"no\"\n    \n    if N == 28:\n        return \"no\"\n    \n    if N == 29:\n        return \"",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4821,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4822,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, S, K = map(int, input_string.split())\n    picture = [list(input()) for _ in range(R)]\n    max_flies = 0\n    max_shot = []\n    \n    for i in range(R):\n        for j in range(S):\n            if picture[i][j] == '*':\n                max_flies += 1\n                if i - K >= 0 and picture[i - K][j] == '*':\n                    max_flies += 1\n                if i + K < R and picture[i + K][j] == '*':\n                    max_flies += 1\n                if j - K >= 0 and picture[i][j - K] == '*':\n                    max_flies += 1\n                if j + K < S and picture[i][j + K] == '*':\n                    max_flies += 1\n                \n                if i - K >= 0 and j - K >= 0 and picture[i - K][j - K] == '*':\n                    max_flies += 1\n                if i - K >= 0 and j + K < S and picture[i - K][j + K] == '*':\n                    max_flies += 1\n                if i + K < R and j - K >= 0 and picture[i + K][j - K] == '*':\n                    max_flies += 1\n                if i + K < R and j + K < S and picture[i + K][j + K] == '*':\n                    max_flies += 1\n                \n                if i - K >= 0 and j - K >= 0 and picture[i - K][j - K] == '*':\n                    max_flies += 1\n                if i - K >= 0 and j + K < S and picture[i - K][j + K] == '*':\n                    max_flies += 1\n                if i + K < R and j - K >= 0 and picture[i + K][j - K] == '*':\n                    max_flies += 1\n                if i + K < R and j +",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4823,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input strings to a list of tuples (rank, suit)\n    cards = [(input_string[i][0], input_string[i][1]) for i in range(5)]\n    \n    # Create a dictionary to count the frequency of each rank\n    freq = {}\n    for card in cards:\n        if card[0] in freq:\n            freq[card[0]] += 1\n        else:\n            freq[card[0]] = 1\n    \n    # Find the maximum frequency\n    max_freq = max(freq.values())\n    \n    # Return the maximum rank that appears max_freq times\n    return max_freq\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4824,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split input_string into columns and heights\n    columns, heights = input_string.split()\n    columns = [int(i) for i in columns.split()]\n    heights = [int(i) for i in heights.split()]\n    \n    # Initialize variables\n    num_ways = 0\n    num_rotations = 0\n    num_left_right = 0\n    \n    # Calculate number of rotations and left/right moves\n    for i in range(len(heights)):\n        if heights[i] == 0:\n            num_rotations += 1\n            num_left_right += 1\n        else:\n            num_rotations += 3\n            num_left_right += 2\n    \n    # Calculate number of ways\n    num_ways = num_rotations * num_left_right\n    \n    # Return result\n    return num_ways\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4825,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    new_alphabet = {\n        'a': '@',\n        'b': '8',\n        'c': '(',\n        'd': '|D',\n        'e': '3',\n        'f': '#',\n        'g': '6',\n        'h': '[-]',\n        'i': '|',\n        'j': '_|',\n        'k': '|<',\n        'l': '1',\n        'm': '[]\\/[]',\n        'n': '[]\\[]',\n        'o': '0',\n        'p': '|D',\n        'q': '(,)',\n        'r': '|Z',\n        's': '$',\n        't': ']['\n        'u': '|_|',\n        'v': '\\/',\n        'w': '\\/\\/',\n        'x': '{}{',\n        'y': '`/',\n        'z': '2',\n    }\n    \n    result = ''\n    for char in input_string:\n        if char.isalpha():\n            result += new_alphabet[char.lower()]\n        else:\n            result += char\n    \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4826,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Alice\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4827,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4828,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    nop_count = 0\n    memory_used = 0\n    for i in input_string:\n        if i.isupper():\n            memory_used += 1\n        else:\n            memory_used += 2\n    nop_count = (memory_used // 4) * 3\n    if memory_used % 4 != 0:\n        nop_count += 4 - memory_used % 4\n    return nop_count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4829,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    left, right = input_string.split()\n    left = int(left)\n    right = int(right)\n    \n    if left == 0 and right == 0:\n        return \"Not a moose\"\n    elif left == right:\n        return \"Even \" + str(left + right)\n    elif left > right:\n        return \"Odd \" + str(left + right)\n    else:\n        return \"Odd \" + str(right + left)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4830,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code goes here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4831,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # create a list of frames for each character\n    frames = []\n    for char in input_string:\n        if char.isupper():\n            frames.append(\"..#..\\n.#.#.\\n#.{}.\\n.#.#.\\n..#..\".format(char.lower()))\n        else:\n            frames.append(\"..*..\\n.*.*.\\n*.{}.*\\n.*.*.\\n..*..\".format(char))\n    \n    # interleave the frames\n    result = []\n    for i in range(4):\n        row = []\n        for frame in frames:\n            row.append(frame[i])\n        result.append(\"\".join(row))\n    \n    # print the result\n    for line in result:\n        print(line)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4832,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R = int(input_string)\n    pi = 3.1415926535897932384626\n    area_euclidean = pi * R**2\n    area_taxicab = 2 * R**2\n    \n    return round(area_euclidean, 5), round(area_taxicab, 5)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4833,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    expenses = input_string.split()\n    expenses = [int(x) for x in expenses]\n    total_expenses = 0\n    \n    for expense in expenses:\n        if expense < 0:\n            total_expenses += expense\n    \n    return total_expenses\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4834,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string[0])\n    time_list = list(map(int, input_string[1].split()))\n    \n    time_list.sort()\n    \n    total_time = 0\n    for i in range(N):\n        total_time += time_list[i]\n        if i % 2 == 0:\n            total_time += 1\n    \n    return total_time\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4835,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    t, N, M = map(int, input_string.split())\n    grid = []\n    for i in range(N):\n        grid.append(list(input()))\n    \n    #print(grid)\n    #print(t, N, M)\n    \n    # Find the position of S\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'S':\n                start_row, start_col = i, j\n                break\n    \n    # Find the number of safe zones\n    safe_zones = 0\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == '0':\n                safe_zones += 1\n    \n    # Find the number of tiles that can be entered from the starting position\n    directions = []\n    if start_row > 0 and grid[start_row-1][start_col] in ['U', 'D']:\n        directions.append('U')\n    if start_row < N-1 and grid[start_row+1][start_col] in ['D', 'U']:\n        directions.append('D')\n    if start_col > 0 and grid[start_row][start_col-1] in ['L', 'R']:\n        directions.append('L')\n    if start_col < M-1 and grid[start_row][start_col+1] in ['R', 'L']:\n        directions.append('R')\n    \n    #print(directions)\n    \n    # Calculate the number of zones that can be reached from the starting position\n    zones_reachable = 0\n    for direction in directions:\n        if direction == 'U':\n            zones_reachable += M\n        elif direction == 'D':\n            zones_reachable += M\n        elif direction == 'L':\n            zones_reachable += N\n        elif direction == 'R':\n            zones_reachable += N\n    \n    #print(zones_reachable)\n    \n    # Calculate the number of zones that can be reached in time t\n    zones_reachable_in_t",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4836,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, C = map(int, input_string.split())\n    weights = list(map(int, input().split()))\n    weights.sort(reverse=True)\n    count = 0\n    total_weight = 0\n    for weight in weights:\n        if total_weight + weight <= C:\n            count += 1\n            total_weight += weight\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4837,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    score = 0\n    max_score = 0\n    for i in range(len(input_string)):\n        if input_string[i] == 'S':\n            if input_string[i] == 'S':\n                score += 2\n            elif input_string[i] == 'P':\n                score += 1\n        else:\n            if input_string[i] == 'R':\n                score += 0\n        if max_score < score:\n            max_score = score\n    return score, max_score\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4838,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Initialize variables\n    start_time = 0\n    stop_time = 0\n    stopwatch_status = \"still running\"\n    \n    # Loop through input_list\n    for time in input_list:\n        if stop_time == 0:\n            start_time = time\n            stop_time = time + 1\n        else:\n            stop_time = time\n    \n    # Check if stopwatch is still running\n    if stop_time == 0:\n        return \"still running\"\n    else:\n        return stop_time - start_time\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4839,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    canisters = list(map(int, input_string[1].split()))\n    \n    if sum(canisters) < n:\n        return \"impossible\"\n    \n    canisters.sort(reverse=True)\n    total_helium = sum(canisters)\n    balloons = [0] * n\n    \n    for i in range(n):\n        if canisters[i] > 0:\n            balloons[i] = canisters[i]\n            canisters[i] = 0\n    \n    for i in range(n):\n        if sum(balloons) == total_helium:\n            break\n        if canisters[i] > 0:\n            balloons[i] += canisters[i]\n            canisters[i] = 0\n    \n    if sum(balloons) == total_helium:\n        return min(balloons) / n\n    else:\n        return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4840,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a1, b1, a2, b2 = map(int, input_string.split())\n    gunnar_dice = [i for i in range(a1, b1+1)]\n    emma_dice = [i for i in range(a2, b2+1)]\n    \n    gunnar_sum = sum(gunnar_dice)\n    emma_sum = sum(emma_dice)\n    \n    if gunnar_sum > emma_sum:\n        return \"Gunnar\"\n    elif emma_sum > gunnar_sum:\n        return \"Emma\"\n    else:\n        return \"Tie\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4841,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    input_list = input_string.split()\n    count = 0\n    for i in range(len(input_list)):\n        if input_list[i] == \"mumble\":\n            continue\n        else:\n            count += int(input_list[i])\n    if count == len(input_list)-1:\n        print(\"makes sense\")\n    else:\n        print(\"something is fishy\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4842,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into a list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Remove the first two elements of the list (n and the first value)\n    input_list = input_list[2:]\n    \n    # Initialize the difference list\n    diff_list = []\n    \n    # Compute the differences between adjacent values in the input list\n    for i in range(len(input_list)-1):\n        diff_list.append(input_list[i+1] - input_list[i])\n    \n    # Find the degree of the polynomial\n    degree = 1\n    while len(diff_list) > 1:\n        if all(diff_list[i] == diff_list[0] for i in range(len(diff_list)-1)):\n            degree += 1\n            diff_list = diff_list[1:]\n        else:\n            break\n    \n    # Compute the next value in the sequence\n    next_value = input_list[-1] + diff_list[0]\n    \n    # Return the degree and the next value as a string\n    return str(degree) + \" \" + str(next_value)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4843,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of tuples\n    queens = [(int(x), int(y)) for x, y in (line.split() for line in input_string.split('\\n'))]\n    \n    # Check if the solution is valid\n    for i in range(len(queens)):\n        for j in range(i+1, len(queens)):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1]:\n                return \"INCORRECT\"\n            if abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                return \"INCORRECT\"\n    \n    return \"CORRECT\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4844,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4845,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    day = int(input_string.split()[0])\n    month = int(input_string.split()[1])\n    year = 2009\n    if month == 1:\n        day_of_week = (day + 1 + 2009 + (2009 // 4) - (2009 // 100) + (2009 // 400) + (((day + 1 + 12 * (month - 2) + year - 1) % 7) % 7)) % 7\n    elif month == 2:\n        day_of_week = (day + 1 + 2009 + (2009 // 4) - (2009 // 100) + (2009 // 400) + (((day + 1 + 12 * (month - 2) + year - 1) % 7) % 7) - 1) % 7\n    elif month == 3:\n        day_of_week = (day + 1 + 2009 + (2009 // 4) - (2009 // 100) + (2009 // 400) + (((day + 1 + 12 * (month - 2) + year - 1) % 7) % 7) - 2) % 7\n    elif month == 4:\n        day_of_week = (day + 1 + 2009 + (2009 // 4) - (2009 // 100) + (2009 // 400) + (((day + 1 + 12 * (month - 2) + year - 1) % 7) % 7) - 3) % 7\n    elif month ==",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4846,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    L, D, X = map(int, input_string.split())\n    N = 0\n    M = 0\n    for i in range(L, D+1):\n        if sum(int(digit) for digit in str(i)) == X:\n            N = i\n            break\n    for i in range(L, D+1):\n        if sum(int(digit) for digit in str(i)) == X:\n            M = i\n            break\n    return N, M\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4847,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    x_A, y_A, x_B, y_B, x_C, y_C = map(int, input_string.split())\n    \n    # Calculate area of triangle\n    area = abs((x_A*(y_B - y_C) + x_B*(y_C - y_A) + x_C*(y_A - y_B))/2)\n    \n    # Initialize count of trees\n    count = 0\n    \n    # Read coordinates of apple trees\n    N = int(input())\n    for i in range(N):\n        x, y = map(int, input().split())\n        \n        # Check if tree is on the triangle\n        if (x_A*y_B + x_B*y_C + x_C*y_A) == 0:\n            if (x*y_B + x_B*y_C + x_C*y) == 0:\n                if (x*y_A + x_A*y_C + x_C*y) == 0:\n                    count += 1\n        \n    # Output result\n    print(\"{:.1f}\".format(area))\n    print(count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4848,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    m = 2\n    while n % m != 0:\n        m += 1\n    return m\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4849,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    cia_blimps = []\n    for i, blimp in enumerate(input_string):\n        if 'FBI' in blimp or 'CIA' in blimp:\n            cia_blimps.append(i)\n    \n    if len(cia_blimps) == 0:\n        return 'HE GOT AWAY!'\n    else:\n        return ' '.join(str(i) for i in cia_blimps)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4850,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of lists\n    triangles = [list(map(int, input_string.split())) for i in range(int(input_string[0]))]\n    \n    # Calculate the length of the rod required\n    max_side = max([max(triangle) for triangle in triangles])\n    min_side = min([min(triangle) for triangle in triangles])\n    L = (max_side + min_side) / 2\n    \n    # Check if the rod length is sufficient to hold all the triangles\n    for triangle in triangles:\n        if L < triangle[0] + triangle[1]:\n            return \"Insufficient length\"\n    \n    return round(L, 5)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4851,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to integer\n    n = int(input_string)\n    \n    # Initialize a variable to store the smallest harshad number\n    smallest_harshad = n\n    \n    # Loop through all possible numbers starting from n\n    for i in range(n, 1000000000):\n        # Calculate the sum of digits\n        digit_sum = sum(int(digit) for digit in str(i))\n        \n        # Check if the number is a harshad number\n        if i % digit_sum == 0:\n            smallest_harshad = i\n            break\n    \n    # Return the smallest harshad number\n    return smallest_harshad\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4852,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4853,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, a_n, a_1, a_0 = map(int, input_string.split())\n    C_n = a_n\n    C_0 = a_0\n    C_1 = a_1\n    for i in range(2, n+1):\n        C_i = C_n\n        C_n = C_1\n        C_1 = C_i + C_0\n        C_0 = C_n\n    return C_0, C_1, C_n\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4854,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4855,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, I = map(int, input_string.split())\n    return int(A * I)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4856,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    num1, num2 = input_string.split()\n    num1 = int(num1)\n    num2 = int(num2)\n    \n    if num1 > num2:\n        return str(num1)[::-1]\n    else:\n        return str(num2)[::-1]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4857,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize a dictionary to store the weights of the letters\n    weights = {chr(i): i for i in range(97, 123)}\n    \n    # Define a function to calculate the weight of a word\n    def word_weight(word):\n        return sum(weights[char] for char in word)\n    \n    # Define a function to check if a word is valid\n    def is_valid(word, l, w):\n        return word_weight(word) == w and len(word) == l\n    \n    # Generate all possible words of length l\n    words = [''.join(word) for word in itertools.product(string.ascii_lowercase, repeat=l)]\n    \n    # Filter the words that have the desired weight\n    valid_words = [word for word in words if is_valid(word, l, w)]\n    \n    # If there are no valid words, return impossible\n    if not valid_words:\n        return 'impossible'\n    \n    # Otherwise, return a random valid word\n    return random.choice(valid_words)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4858,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    M, N, C = input_string.split()\n    M = int(M)\n    N = int(N)\n    C = C[1:-1]\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n        frame2.append(input())\n    for i in range(M):\n        frame1[i] = list(frame1[i])\n        frame2[i] = list(frame2[i])\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                frame1[i][j] = '.'\n            if frame2[i][j] == C:\n                frame2[i][j] = '.'\n    for i in range(M):\n        print(''.join(frame1[i]))\n    print()\n    for i in range(M):\n        print(''.join(frame2[i]))\n    return\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4859,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    b, d, c, l = map(int, input_string.split())\n    if b*4 + d*4 + c*2 > l:\n        print(\"impossible\")\n    else:\n        for i in range(min(b, l//4), -1, -1):\n            for j in range(min(d, (l-4*i)//4):\n                k = l - 4*i - 4*j\n                if i+j+k == 0:\n                    continue\n                if i+j+k <= c:\n                    print(i, j, k)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4860,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Initialize a list to store the missing numbers\n    missing_numbers = []\n    \n    # Loop through the input_list\n    for i in range(1, input_list[-1] + 1):\n        if i not in input_list:\n            missing_numbers.append(i)\n    \n    # If there are missing numbers, print them\n    if missing_numbers:\n        for num in missing_numbers:\n            print(num)\n    else:\n        print(\"good job\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4861,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, p, s, v = map(float, input_string.split())\n    c = 1.5\n    t = (n * (log(n, 2) ** (c * sqrt(2))) / (p * 10**9))\n    t_distribute = s * (1 + 1/c) / v\n    t_total = t + t_distribute\n    return round(t_total, 10)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4862,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4863,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    correct_answers = input_string[1:n+1]\n    score = 0\n    for i in range(n):\n        if correct_answers[i] == input_string[i+1]:\n            score += 1\n    return score\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4864,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C, Z_R, Z_C = map(int, input().split())\n    article = []\n    for _ in range(R):\n        article.append(input())\n    \n    enlarged_article = []\n    for row in article:\n        enlarged_row = []\n        for char in row:\n            enlarged_row.extend([char] * Z_C)\n        enlarged_article.extend([enlarged_row] * Z_R)\n    \n    for row in enlarged_article:\n        print(''.join(row))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4865,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into a list of strings\n    input_list = input_string.split()\n    \n    # Convert the first character to a boolean value\n    if input_list[0] == 'F':\n        direction = True\n    else:\n        direction = False\n    \n    # Convert the second and third elements to integers\n    minutes_to_change = int(input_list[1])\n    current_hour = int(input_list[2])\n    current_minutes = int(input_list[3])\n    \n    # Calculate the new time\n    if direction:\n        new_hour = (current_hour + minutes_to_change // 60) % 24\n        new_minutes = (current_minutes + minutes_to_change) % 60\n    else:\n        new_hour = (current_hour - minutes_to_change // 60) % 24\n        new_minutes = (current_minutes - minutes_to_change) % 60\n    \n    # Return the new time as a string\n    return f\"{new_hour} {new_minutes}\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4866,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4867,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    M, N, U, L, R, D = map(int, input().split())\n    crossword = []\n    for i in range(M):\n        crossword.append(input())\n    \n    frame = []\n    for i in range(U):\n        frame.append('#' * (L + N + R))\n    for i in range(M + U + D):\n        frame.append('.#' * (L + N + R))\n    for i in range(U):\n        frame.append('#' * (L + N + R))\n    \n    for i in range(M):\n        frame.insert(U + i + 1, '#' + crossword[i] + '#')\n    \n    for i in range(L + N + R):\n        frame.insert(0, '#' + '#'.join(crossword[j][i] for j in range(M)) + '#')\n    \n    for i in range(L + N + R):\n        frame.append('#' + '#'.join(crossword[j][i] for j in range(M)) + '#')\n    \n    for i in range(D):\n        frame.append('#' * (L + N + R))\n    \n    for i in range(U + D):\n        frame.append('#' * (L + N + R))\n    \n    return '\\n'.join(frame)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4868,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into two parts\n    white_pieces = input_string.split(\"Black:\")[0].split(\",\")\n    black_pieces = input_string.split(\"Black:\")[1].split(\",\")\n    \n    # Initialize the board\n    board = [[\".\" for _ in range(5)]\n            for _ in range(5)]\n    \n    # Fill the board with white pieces\n    for piece in white_pieces:\n        if len(piece) == 2:\n            board[int(piece[1])-1][ord(piece[0])-97] = piece[0].upper()\n        else:\n            board[int(piece[1])-1][ord(piece[0])-97] = piece[0].upper() + \"e\"\n    \n    # Fill the board with black pieces\n    for piece in black_pieces:\n        if len(piece) == 2:\n            board[int(piece[1])-1][ord(piece[0])-97] = piece[0].upper()\n        else:\n            board[int(piece[1])-1][ord(piece[0])-97] = piece[0].upper() + \"e\"\n    \n    # Print the board\n    for row in board:\n        print(\"|\" + \"|\".join(row) + \"|\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4869,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, N = map(float, input_string.split())\n    if A*A <= N:\n        print(\"Diablo is happy!\")\n    else:\n        print(\"Need more materials!\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4870,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    f, s, g, u, d = map(int, input_string.split())\n    \n    if s == g:\n        return 0\n    elif s > g:\n        return \"use the stairs\"\n    elif s + u * f >= g:\n        return (g - s) // u\n    elif d * f >= g - s:\n        return (g - s) // d\n    else:\n        return \"use the stairs\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4871,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    scores = sorted(map(int, input_string[1:]), reverse=True)\n    current_score = sum(scores)\n    group_score = sum([scores[i] * (4/5)**i for i in range(n)])\n    new_scores = []\n    \n    for i in range(n):\n        new_scores.append(sum([scores[j] * (4/5)**j for j in range(n) if j != i]) + sum([scores[j] * (4/5)**i for j in range(n) if j != i]) * (4/5)**i)\n    \n    avg_new_score = sum(new_scores) / n\n    \n    return current_score, avg_new_score\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4872,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, dirty_pushes = input_string.split()\n    n = int(n)\n    dirty_pushes = list(map(int, dirty_pushes.split()))\n    \n    dirtiness = 0\n    for i in range(n):\n        dirtiness += dirty_pushes[i]\n    \n    cleanup_phases = 0\n    while dirtiness >= 20:\n        cleanup_phases += 1\n        dirtiness = 0\n        for i in range(n):\n            dirtiness += dirty_pushes[i]\n        for i in range(n):\n            if dirty_pushes[i] > 0:\n                dirty_pushes[i] -= 1\n    \n    return cleanup_phases\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4873,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4874,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4875,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into words\n    words = input_string.split()\n    \n    # Initialize an empty string to store the translated words\n    translated_words = \"\"\n    \n    # Loop through each word in the input string\n    for word in words:\n        # Check if the word starts with a vowel\n        if word[0].lower() in \"aeiouy\":\n            # If it does, add yay to the end of the word\n            translated_words += word + \"yay \"\n        else:\n            # If it doesn't, find the first vowel and move all the letters before it to the end\n            vowel_index = 0\n            for i in range(len(word)):\n                if word[i].lower() in \"aeiouy\":\n                    vowel_index = i\n                    break\n            # Add the letters after the vowel to the end of the word\n            translated_words += word[vowel_index:] + word[:vowel_index] + \"ay \"\n    \n    # Return the translated string\n    return translated_words.strip()\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4876,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of lists\n    restaurants = []\n    for i in range(len(input_string)):\n        if i % 2 == 0:\n            restaurants.append(input_string[i].split())\n        else:\n            restaurants.append(input_string[i].split())\n    \n    # Check if any restaurant has both \"pea soup\" and \"pancakes\" in their menu\n    for i in range(len(restaurants)):\n        if \"pea soup\" in restaurants[i] and \"pancakes\" in restaurants[i]:\n            return restaurants[i][0]\n    \n    # If no restaurant has both, return \"Anywhere is fine I guess\"\n    return \"Anywhere is fine I guess\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4877,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b, h = map(int, input_string.split())\n    count = 0\n    while h > 0:\n        h -= a\n        count += 1\n        h -= b\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4878,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R1, S = map(int, input_string.split())\n    R2 = (S - R1) / 2\n    return int(R2)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4879,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b, c = input_string.split()\n    if a == \"South\" and (b == \"West\" or c == \"East\"):\n        return \"Yes\"\n    elif a == \"North\" and (b == \"East\" or c == \"West\"):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4880,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string.split())\n    plaintext = input().lower()\n    ciphertext = input().lower()\n    \n    key = plaintext[-n:]\n    key_dict = {chr(i): i for i in range(26)}\n    key_dict = {v: k for k, v in key_dict.items()}\n    key_dict = {v: ord(k) - 97 for k, v in key_dict.items()}\n    \n    for i in range(n):\n        key_dict[i] = ord(key[i]) - 97\n    \n    result = \"\"\n    for i in range(m):\n        if i < n:\n            result += chr((ord(ciphertext[i]) - key_dict[i] + 26) % 26)\n        else:\n            result += chr((ord(ciphertext[i]) - key_dict[i - n] + 26) % 26)\n    \n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4881,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Either\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4882,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    for i in input_string:\n        if i >= 10:\n            print(len(str(i))\n        else:\n            print(1)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4883,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    translations = {}\n    for i in range(m):\n        a, b = input_string.split()\n        translations[a] = b\n    \n    for i in range(n):\n        original, deciphered = input_string.split()\n        if len(original) != len(deciphered):\n            print(\"no\")\n            continue\n        for j in range(len(original)):\n            if original[j] not in translations:\n                print(\"no\")\n                break\n            if translations[original[j]] != deciphered[j]:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n            continue\n        print(\"no\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4884,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4885,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    white_pieces = []\n    black_pieces = []\n    white_positions = []\n    black_positions = []\n    white_pieces_dict = {'K': 'King', 'Q': 'Queen', 'R': 'Rook', 'B': 'Bishop', 'N': 'Knight', 'P': 'Pawn'}\n    black_pieces_dict = {'k': 'King', 'q': 'Queen', 'r': 'Rook', 'b': 'Bishop', 'n': 'Knight', 'p': 'Pawn'}\n    \n    # Split the input string into rows\n    rows = input_string.split('\\n')\n    \n    # Iterate through each row\n    for row in rows:\n        # Iterate through each character in the row\n        for i, char in enumerate(row):\n            # If the character is a white piece, add it to the white_pieces list\n            if char.isupper():\n                white_pieces.append(char)\n                white_positions.append(chr(i+97) + str(8-rows.index(row)))\n            # If the character is a black piece, add it to the black_pieces list\n            elif char.islower():\n                black_pieces.append(char.upper())\n                black_positions.append(chr(i+97) + str(8-rows.index(row)))\n    \n    # Sort the white pieces and black pieces\n    white_pieces.sort()\n    black_pieces.sort()\n    \n    # Iterate through the white pieces and add them to the output string\n    for piece in white_pieces:\n        white_positions.append(white_pieces_dict[piece])\n    # Iterate through the black pieces and add them to the output string\n    for piece in black_pieces:\n        black_positions.append(black_pieces_dict[piece])\n    \n    # Print the output\n    print(\"White: \", \", end='')\n    print(\",\".join(white_positions))\n    print(\"Black: \", end='')\n    print(\",\".join(black_positions)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4886,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, K = map(int, input_string.split())\n    # print(N, K)\n    # print(type(N), type(K))\n    # print(N, K)\n    # print(type(N), type(K))\n    # print(N, K)\n    # print(type(N), type(K))\n    # print(N, K)\n    # print(type(N), type(K))\n    # print(N, K)\n    # print(type(N), type(K))\n    # print(N, K)\n    # print(type(N), type(K))\n    # print(N, K)\n    # print(type(N), type(K))\n    # print(N, K)\n    # print(type(N), type(K))\n    # print(N, K)\n    # print(type(N), type(K))\n    # print(N, K)\n    # print(type(N), type(K))\n    # print(N, K)\n    # print(type(N), type(K))\n    # print(N, K)\n    # print(type(N), type(K))\n    # print(N, K)\n    # print(type(N), type(K))\n    # print(N, K)\n    # print(type(N), type(K))\n    # print(N, K)\n    # print(type(N), type(K))\n    # print(N, K)\n    # print(type(N), type(K))\n    # print(N, K)\n    # print(type(N), type(K))\n    # print(N, K)\n    # print(type(N), type(K))\n    # print(N, K)\n    # print(type(N), type(K))\n    # print(N, K)\n    # print(type(N), type(K))\n    # print(N, K)\n    # print(type(N), type(K))\n    # print(N, K)\n    # print(type(N), type(K))\n    # print(N, K)\n    # print(",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4887,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return input_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4888,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    tasks = input_string.split()\n    tasks = [int(i) for i in tasks]\n    total_time = sum(tasks)\n    if total_time > T:\n        return 0\n    else:\n        return len(tasks)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4889,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4890,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m, s, d = map(int, input_string.split())\n    current_sodas = list(map(int, input().split()))\n    \n    # Initialize the refill scheme\n    refill_scheme = [0] * s\n    \n    # Calculate the number of cold sodas in each slot\n    cold_sodas = [sum(current_sodas[:i]) % d for i in range(s)]\n    \n    # Calculate the number of cold sodas in the fridge\n    total_cold_sodas = sum(current_sodas) % d\n    \n    # Calculate the number of students that can be served\n    total_served = (total_cold_sodas + n) % d\n    \n    # If there are not enough cold sodas to serve m students, it is impossible\n    if total_served < m:\n        return \"impossible\"\n    \n    # Calculate the number of students that can be served from each slot\n    served_per_slot = [total_served // s] * s\n    \n    # Calculate the number of students that need to be served from each slot\n    remaining_students = [m - served_per_slot[i] for i in range(s)]\n    \n    # Calculate the number of new sodas that need to be added to each slot\n    new_sodas = [n // s] * s\n    \n    # Calculate the number of students that can be served from the new sodas\n    remaining_new_sodas = [n % s]\n    \n    # Calculate the number of students that need to be served from the new sodas\n    remaining_students_new = [remaining_students[i] + remaining_new_sodas[i] for i in range(s)]\n    \n    # Calculate the number of cold sodas that can be added to each slot\n    cold_sodas_per_slot = [min(remaining_students_new[i], cold_sodas[i]) for i in range(s)]\n    \n    # Calculate the number of new sodas that can be added to each slot\n    new_sod",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4891,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    kings, queens, rooks, bishops, knights, pawns = map(int, input_string.split())\n    \n    missing_pieces = [0, 1, 0, 0, 0, 0, 1]\n    \n    if kings < 1:\n        missing_pieces[0] = 1\n    if queens < 1:\n        missing_pieces[1] = 1\n    if rooks < 2:\n        missing_pieces[2] = 2 - rooks\n    if bishops < 2:\n        missing_pieces[3] = 2 - bishops\n    if knights < 2:\n        missing_pieces[4] = 2 - knights\n    if pawns < 8:\n        missing_pieces[5] = 8 - pawns\n    \n    for i in range(len(missing_pieces)):\n        if missing_pieces[i] < 0:\n            missing_pieces[i] = abs(missing_pieces[i])\n    \n    return \" \".join(map(str, missing_pieces))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4892,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N = int(input_string[0])\n    probabilities = []\n    for i in range(1, N+1):\n        password, probability = input_string[i].split()\n        probabilities.append((password, float(probability)))\n    \n    # calculate expected number of attempts\n    expected_attempts = 0\n    for i in range(N):\n        expected_attempts += probabilities[i][1] * (N - i)\n    \n    return round(expected_attempts, 4)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4893,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, p = map(int, input_string.split())\n    distances = list(map(int, input().split()))\n    min_distance = 0\n    for i in range(n):\n        min_distance = max(min_distance, distances[i] * (p * (n - i)) + 1)\n    return min_distance\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4894,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of tuples (pitch, duration)\n    notes = []\n    for i in range(0, len(input_string), 2):\n        pitch = input_string[i]\n        duration = int(input_string[i+1]) if input_string[i+1] else 1\n        notes.append((pitch, duration))\n    \n    # Create staff\n    staff = ['G:', 'F:', 'E:', 'D:', 'C:', 'B:', 'A:', 'g:', 'f:', 'e:', 'd:', 'c:', 'b:', 'a:']\n    \n    # Initialize variables\n    max_duration = max([note[1] for note in notes])\n    max_length = max_duration * 2\n    staff_length = len(staff[0])\n    \n    # Create staff lines\n    for i in range(5):\n        staff[i] += ' ' * staff_length\n    \n    # Add notes to staff\n    for note in notes:\n        pitch, duration = note\n        if duration == 1:\n            staff[ord(pitch)-ord('C')-1] += '*'\n        elif duration == 2:\n            staff[ord(pitch)-ord('C')-1] += '**'\n        elif duration == 3:\n            staff[ord(pitch)-ord('C')-1] += '***'\n        else:\n            staff[ord(pitch)-ord('C')-1] += '*' * duration\n    \n    # Print staff\n    for line in staff:\n        print(line)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4895,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    sticks = list(map(int, input_string.split()))\n    \n    # Sort the list in descending order\n    sticks.sort(reverse=True)\n    \n    # Check if the sum of the first two sticks is greater than the third stick\n    if sticks[0] + sticks[1] > sticks[2]:\n        return \"possible\"\n    else:\n        return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4896,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Initialize variables\n    towers = 1\n    current_tower = input_list[0]\n    max_width = input_list[0]\n    \n    # Iterate through the list\n    for i in range(1, len(input_list)):\n        if input_list[i] > max_width:\n            towers += 1\n            max_width = input_list[i]\n        else:\n            max_width = max(max_width, input_list[i])\n    \n    return towers\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4897,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n = int(input_string.split()[0])\n    runners = []\n    for i in range(n):\n        name, a, b = input_string.split()[1:4]\n        runners.append((name, float(a), float(b)))\n    \n    # Calculate the total time for each runner\n    total_times = [(name, sum([float(a), float(b)])) for name, a, b in runners]\n    \n    # Sort the runners by total time\n    total_times.sort(key=lambda x: x[1])\n    \n    # Calculate the time for the team\n    team_time = sum([float(a) for name, a, b in total_times[:4]])\n    \n    # Output the team time\n    print(team_time)\n    \n    # Output the runners in the team\n    for i in range(4):\n        print(total_times[i][0])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4898,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    N = int(input_string[0])\n    minions = [list(map(int, input_string[i].split())) for i in range(1, N+1)]\n    \n    # sort minions by their preferences\n    minions.sort(key=lambda x: x[1]-x[0])\n    \n    # initialize variables\n    rooms = []\n    minion_count = 0\n    room_count = 0\n    \n    # iterate through minions\n    for minion in minions:\n        # check if there are any rooms that satisfy the minion's preferences\n        for room in rooms:\n            if room[0] <= minion[0] and room[1] >= minion[1]:\n                room[2] += 1\n                minion_count += 1\n                break\n        else:\n            # if no room satisfies the minion's preferences, create a new room\n            rooms.append([minion[0], minion[1], 1])\n            room_count += 1\n    \n    # print the minimum number of rooms required\n    print(room_count)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4899,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    if input_string.startswith(\"hey\"):\n        return \"heeey\"\n    elif input_string.startswith(\"hi\"):\n        return \"hii\"\n    elif input_string.startswith(\"hello\"):\n        return \"helo\"\n    elif input_string.startswith(\"hey\"):\n        return \"heeey\"\n    elif input_string.startswith(\"hi\"):\n        return \"hii\"\n    elif input_string.startswith(\"hey\"):\n        return \"heeey\"\n    elif input_string.startswith(\"hey\"):\n        return \"heeey\"\n    elif input_string.startswith(\"hey\"):\n        return \"heeey\"\n    elif input_string.startswith(\"hey\"):\n        return \"heeey\"\n    elif input_string.startswith(\"hey\"):\n        return \"heeey\"\n    elif input_string.startswith(\"hey\"):\n        return \"heeey\"\n    elif input_string.startswith(\"hey\"):\n        return \"heeey\"\n    elif input_string.startswith(\"hey\"):\n        return \"heeey\"\n    elif input_string.startswith(\"hey\"):\n        return \"heeey\"\n    elif input_string.startswith(\"hey\"):\n        return \"heeey\"\n    elif input_string.startswith(\"hey\"):\n        return \"heeey\"\n    elif input_string.startswith(\"hey\"):\n        return \"heeey\"\n    elif input_string.startswith(\"hey\"):\n        return \"heeey\"\n    elif input_string.startswith(\"hey\"):\n        return \"heeey\"\n    elif input_string.startswith(\"hey\"):\n        return \"heeey\"\n    elif input_string.startswith(\"hey\"):\n        return \"heeey\"\n    elif input_string.startswith(\"hey\"):\n        return \"heeey\"\n    elif input_string.startswith(\"hey\"):\n        return \"heeey\"\n    elif input_string.startswith(\"hey\"):",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4900,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of lists\n    input_list = [list(map(int, input_string.split())) for i in range(len(input_string))]\n    \n    # Initialize a dictionary to store the distances between each pair of villages\n    distances = {}\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            if i == j:\n                continue\n            distances[(i+1, j+1)] = input_list[i][j]\n            distances[(j+1, i+1)] = input_list[i][j]\n    \n    # Initialize a set to store the roads\n    roads = set()\n    \n    # Iterate through all pairs of villages\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            # Find the shortest path between villages i and j\n            shortest_path = dijkstra(distances, i, j)\n            # Add the roads to the set\n            for k in range(len(shortest_path)-1):\n                roads.add((shortest_path[k], shortest_path[k+1])\n    \n    # Print the roads\n    for road in roads:\n        print(road[0], road[1])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4901,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Step 1: Divide the message in half\n    first_half = input_string[:len(input_string)//2]\n    second_half = input_string[len(input_string)//2:]\n    \n    # Step 2: Calculate the rotation value for each half\n    first_half_rotation = sum(ord(char) - 64 for char in first_half)\n    second_half_rotation = sum(ord(char) - 64 for char in second_half)\n    \n    # Step 3: Rotate each character in the first half by the rotation value\n    decrypted_first_half = ''.join([chr(((ord(char) - 64 + first_half_rotation) % 26) + 64) for char in first_half])\n    \n    # Step 4: Rotate each character in the second half by the rotation value\n    decrypted_second_half = ''.join([chr(((ord(char) - 64 + second_half_rotation) % 26) + 64) for char in second_half])\n    \n    # Step 5: Combine the two halves\n    decrypted_message = ''.join([chr(((ord(first_half[i] - 64 + ord(second_half[i]) - 64) % 26) + 64) for i in range(len(first_half))])\n    \n    return decrypted_message\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4902,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4903,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"go\" if input_string[0] == \"a\" else \"no\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4904,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    alice_score = 0\n    barbara_score = 0\n    prev_player = 'A'\n    \n    for i in range(len(input_string)):\n        if i % 2 == 0:\n            if input_string[i] == 'A':\n                alice_score += int(input_string[i+1])\n            else:\n                barbara_score += int(input_string[i+1])\n        else:\n            if input_string[i] == 'B':\n                alice_score += int(input_string[i-1])\n            else:\n                barbara_score += int(input_string[i-1])\n                \n        if abs(alice_score - barbara_score) >= 2:\n            return 'A' if alice_score > barbara_score else 'B'\n    \n    if abs(alice_score - barbara_score) == 10:\n        return 'A' if alice_score > barbara_score else 'B'\n    else:\n        return 'A' if alice_score > barbara_score else 'B'\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4905,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, M, K, G = map(int, input_string.split())\n    A, B, L = map(int, input().split())\n    streets = []\n    for _ in range(M):\n        A, B, L = map(int, input().split())\n        streets.append((A, B, L))\n    \n    # calculate time needed to traverse each street\n    time_needed = [0] * (N+1)\n    for a, b, l in streets:\n        time_needed[a] += l\n        time_needed[b] += l\n    \n    # calculate time needed to reach the destination\n    time_needed[B] -= L\n    \n    # calculate time needed to reach the starting intersection\n    time_needed[A] -= K\n    \n    # calculate the minimum time needed to make the delivery\n    min_time = float('inf')\n    for i in range(N):\n        min_time = min(min_time, max(time_needed[:i+1]) + max(time_needed[i+1:]))\n    \n    return min_time\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4906,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4907,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    if n % 2 == 0:\n        return \"Bob\"\n    else:\n        return \"Alice\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4908,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    input_list = input_string.split()\n    num1 = int(input_list[0])\n    num2 = int(input_list[1])\n    num3 = int(input_list[2])\n    \n    if num1 + num2 == num3:\n        return f\"{num1}+{num2}={num3}\"\n    elif num1 - num2 == num3:\n        return f\"{num1}-{num2}={num3}\"\n    elif num1 * num2 == num3:\n        return f\"{num1}*{num2}={num3}\"\n    elif num1 / num2 == num3:\n        return f\"{num1}/{num2}={num3}\"\n    else:\n        return \"No solution\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4909,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4910,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize a dictionary to store the count of each category\n    categories = {}\n    \n    # Loop through the input string and count the number of times each category appears\n    for line in input_string:\n        if line in categories:\n            categories[line] += 1\n        else:\n            categories[line] = 1\n    \n    # Find the category with the highest count\n    max_count = max(categories.values())\n    \n    # Find all categories with the highest count\n    max_categories = [k for k, v in categories.items() if v == max_count]\n    \n    # Sort the categories in lexicographic order and return them\n    max_categories.sort()\n    return max_categories\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4911,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into a list of attributes\n    attributes = input_string.split()\n    \n    # Split the input string into a list of songs\n    songs = input_string.split(\"\\n\")[1].split(\"\\n\")\n    \n    # Split each song into a list of attributes\n    songs = [song.split() for song in songs]\n    \n    # Sort the songs by the first attribute\n    songs.sort(key=lambda x: x[0])\n    \n    # Print the sorted list\n    print(\" \".join(attributes))\n    for song in songs:\n        print(\" \".join(song))\n    \n    # Sort the songs by the second attribute\n    songs.sort(key=lambda x: x[1])\n    \n    # Print the sorted list\n    print(\" \".join(attributes))\n    for song in songs:\n        print(\" \".join(song))\n    \n    # Sort the songs by the third attribute\n    songs.sort(key=lambda x: x[2])\n    \n    # Print the sorted list\n    print(\" \".join(attributes))\n    for song in songs:\n        print(\" \".join(song)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4912,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    h, w, n = map(int, input_string.split())\n    bricks = list(map(int, input().split()))\n    bricks.sort(reverse=True)\n    for i in range(n):\n        if bricks[i] > w:\n            return \"NO\"\n        w -= bricks[i]\n    return \"YES\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4913,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    vaccinated = []\n    control = []\n    \n    for i in range(len(input_string)):\n        if input_string[i][0] == 'Y':\n            vaccinated.append(input_string[i][1:])\n        else:\n            control.append(input_string[i][1:])\n    \n    vaccinated_count = {'A': 0, 'B': 0, 'C': 0}\n    control_count = {'A': 0, 'B': 0, 'C': 0}\n    \n    for i in range(len(vaccinated)):\n        for j in range(3):\n            if vaccinated[i][j] == 'Y':\n                vaccinated_count[list(vaccinated_count.keys())[j]] += 1\n    \n    for i in range(len(control)):\n        for j in range(3):\n            if control[i][j] == 'Y':\n                control_count[list(control_count.keys())[j]] += 1\n    \n    vaccine_efficacy = []\n    \n    for key in vaccinated_count.keys():\n        if vaccinated_count[key] == 0:\n            vaccine_efficacy.append('Not Effective')\n        else:\n            vaccine_efficacy.append(round((1 - control_count[key]/len(control))*100, 5))\n    \n    return vaccine_efficacy\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4914,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    adrian_score = 0\n    bruno_score = 0\n    goran_score = 0\n    \n    for i in range(len(input_string)):\n        if input_string[i] == 'A':\n            adrian_score += 1\n            bruno_score += 1\n            goran_score += 1\n        elif input_string[i] == 'B':\n            adrian_score += 1\n            bruno_score += 1\n            goran_score += 1\n        else:\n            adrian_score += 1\n            bruno_score += 1\n            goran_score += 1\n    \n    if adrian_score > bruno_score and adrian_score > goran_score:\n        print(adrian_score)\n        print(\"Adrian\")\n    elif bruno_score > adrian_score and bruno_score > goran_score:\n        print(bruno_score)\n        print(\"Bruno\")\n    else:\n        print(goran_score)\n        print(\"Goran\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4915,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    problems_solved = 0\n    time_score = 0\n    penalty_score = 0\n    problem_dict = {}\n    \n    # Iterate through each line of input\n    for line in input_string:\n        # Split the line into parts\n        parts = line.split()\n        # Get the time and problem letter\n        time = int(parts[0])\n        problem = parts[1]\n        # Check if the problem has been solved before\n        if problem in problem_dict:\n            # If it has, ignore the submission\n            continue\n        else:\n            # If it hasn't, add it to the dictionary\n            problem_dict[problem] = True\n        # Check if the result was right or wrong\n        if parts[2] == 'right':\n            # If right, add the time to the time score\n            time_score += time\n            # Increment the number of problems solved\n            problems_solved += 1\n        else:\n            # If wrong, add 20 minutes to the penalty score\n            penalty_score += 20\n    \n    # Calculate the total time score\n    total_time_score = time_score - penalty_score\n    \n    # Output the results\n    print(problems_solved, total_time_score)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4916,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, k = map(int, input_string.split()[:2])\n    matrix = [list(map(int, input_string.split()[2:]) for _ in range(n))\n    \n    # initialize variables\n    visited = set()\n    queue = [(0, 0, 0)]\n    min_distance = float('inf')\n    \n    # BFS\n    while queue:\n        distance, x, y = queue.pop(0)\n        if (x, y) == (n-1, n-1):\n            min_distance = min(min_distance, distance)\n            continue\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            new_x, new_y = x + dx, y + dy\n            if 0 <= new_x < n and 0 <= new_y < n and (new_x, new_y) not in visited:\n                visited.add((new_x, new_y))\n                queue.append((distance + abs(matrix[new_x][new_y] - matrix[x][y]), new_x, new_y))\n    \n    return min_distance if min_distance != float('inf') else -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4917,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    intervals = []\n    for line in input_string.split('\\n'):\n        a, b = map(int, line.split())\n        intervals.append(b-a)\n    \n    if len(set(intervals)) == 1:\n        return \"edward is right\"\n    else:\n        return \"gunilla has a point\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4918,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize an empty dictionary to store the groups\n    groups = {}\n    \n    # Iterate through the input_string\n    for line in input_string:\n        # If the line starts with 't'\n        if line[0] == 't':\n            # Get the two guests\n            guest_a, guest_b = map(int, line.split()[1:])\n            # If both guests are already in the same group, do nothing\n            if guest_a in groups and guest_b in groups and groups[guest_a] == groups[guest_b]:\n                continue\n            # If both guests are in different groups, merge them\n            elif guest_a in groups and guest_b in groups:\n                # Find the group with the smallest key and merge the other group into it\n                if groups[guest_a] < groups[guest_b]:\n                    for key in groups:\n                        if groups[key] == guest_b:\n                            groups[key] = guest_a\n                else:\n                    for key in groups:\n                        if groups[key] == guest_a:\n                            groups[key] = guest_b\n            # If guest_a is not in a group, add guest_b to guest_a's group\n            elif guest_a in groups:\n                groups[guest_b] = groups[guest_a]\n            # If guest_b is not in a group, add guest_a to guest_b's group\n            elif guest_b in groups:\n                groups[guest_a] = groups[guest_b]\n            # If neither guest is in a group, create a new group for both\n            else:\n                groups[guest_a] = guest_a\n                groups[guest_b] = guest_a\n        # If the line starts with 's'\n        elif line[0] == 's':\n            # Get the guest\n            guest = int(line.split()[1])\n            # Find the group the guest belongs to\n            group = None\n            for key in groups:\n                if guest in groups:\n                    group = groups[guest]\n                    break\n            # Count the size of the group\n            size = 0\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4919,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    n = int(input_string.pop(0)\n    trips = {}\n    for i in range(n):\n        country, year = input_string.pop(0).split()\n        trips[country] = trips.get(country, []) + [int(year)]\n    \n    q = int(input_string.pop(0)\n    for i in range(q):\n        country, k = input_string.pop(0).split()\n        k = int(k)\n        print(trips[country][k-1])\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4920,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    event_types = set(input_string)\n    n = len(input_string)\n    count = 0\n    \n    # Iterate through all possible first events\n    for i in range(n):\n        if input_string[i] not in event_types:\n            continue\n        for j in range(i+1, n):\n            if input_string[j] not in event_types:\n                continue\n            # Check if the second event is different from the first\n            if input_string[i] != input_string[j]:\n                # Iterate through all possible second events\n                for k in range(j+1, n):\n                    if input_string[k] not in event_types:\n                        continue\n                    # Check if the third event is different from the first and second\n                    if input_string[k] != input_string[i] and input_string[k] != input_string[j]:\n                        count += 1\n                        # Iterate through all possible third events\n                        for l in range(k+1, n):\n                            if input_string[l] not in event_types:\n                                continue\n                            # Check if the fourth event is different from the first, second, and third\n                            if input_string[l] != input_string[i] and input_string[l] != input_string[j] and input_string[l] != input_string[k]:\n                                count += 1\n                                # Iterate through all possible fourth events\n                                for m in range(l+1, n):\n                                    if input_string[m] not in event_types:\n                                        continue\n                                    # Check if the fifth event is different from the first, second, third, and fourth\n                                    if input_string[m] != input_string[i] and input_string[m] != input_string[j] and input_string[m] != input_string[k] and input_string[m] != input_string[l]:\n                                        count += 1\n                                        # Iterate through all possible fifth events\n                                        for p in range(m+1, n):\n                                            if",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4921,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    words = input_string.split()\n    unique_words = set()\n    for word in words:\n        if word not in unique_words:\n            unique_words.add(word)\n            print(word, end=' ')\n        else:\n            print('.', end=' ')\n    print()\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4922,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4923,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string.split()[0])\n    outcomes = list(map(int, input_string.split()[1:]))\n    unique_outcomes = set(outcomes)\n    max_unique_outcome = max(unique_outcomes)\n    max_unique_index = outcomes.index(max_unique_outcome)\n    if len(unique_outcomes) == 1:\n        return \"none\"\n    else:\n        return max_unique_index\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4924,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    current_time = input_string[0].split(\":\")\n    explosion_time = input_string[1].split(\":\")\n    \n    current_hour = int(current_time[0])\n    current_minute = int(current_time[1])\n    current_second = int(current_time[2])\n    \n    explosion_hour = int(explosion_time[0])\n    explosion_minute = int(explosion_time[1])\n    explosion_second = int(explosion_time[2])\n    \n    if explosion_hour < current_hour:\n        explosion_hour += 24\n    \n    time_to_explosion = (explosion_hour * 3600) + (explosion_minute * 60) + explosion_second - (current_hour * 3600) - (current_minute * 60) - current_second\n    \n    if time_to_explosion < 0:\n        time_to_explosion += 86400\n    \n    time_to_explosion_hours = time_to_explosion // 3600\n    time_to_explosion_minutes = (time_to_explosion % 3600) // 60\n    time_to_explosion_seconds = time_to_explosion % 60\n    \n    return f\"{time_to_explosion_hours:02d}:{time_to_explosion_minutes:02d}:{time_to_explosion_seconds:02d}\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4925,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    l, n = map(int, input_string.split())\n    k = 1\n    while l % n != 0:\n        l += l\n        k += 1\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4926,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string)\n    e = 1\n    for i in range(1, n+1):\n        e += 1/math.factorial(i)\n    return round(e, 12)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4927,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, P, Q = map(int, input_string.split())\n    if P + Q == N:\n        return \"opponent\"\n    else:\n        return \"paul\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4928,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N = int(input_string)\n    return 2\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4929,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"Yes\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4930,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    decoded_string = \"\"\n    for word in input_string.split():\n        for letter in word:\n            if letter in \"aeiou\":\n                decoded_string += letter + \"p\" + letter\n            else:\n                decoded_string += letter\n        decoded_string += \" \"\n    return decoded_string[:-1]\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4931,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    X, Y = map(int, input_string.split())\n    if X == 0:\n        return 0\n    elif X < 0:\n        return -X * Y\n    else:\n        return X * Y\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4932,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, B, C, D = map(int, input_string.split())\n    P, M, G = map(int, input_string.split())\n    \n    if P % A == 0:\n        if P % (A + B) < A:\n            if M % (A + B) < A:\n                if G % (A + B) < A:\n                    print(\"both\")\n                else:\n                    print(\"one\")\n            else:\n                print(\"none\")\n        else:\n            if M % (A + B) < A:\n                if G % (A + B) < A:\n                    print(\"one\")\n                else:\n                    print(\"none\")\n    else:\n        if M % (A + B) < A:\n            if G % (A + B) < A:\n                print(\"one\")\n            else:\n                print(\"none\")\n    else:\n        if M % (A + B) < A:\n            if G % (A + B) < A:\n                print(\"none\")\n        else:\n            print(\"none\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4933,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b, c = map(int, input_string.split())\n    d = (a + c) - b\n    print(d)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4934,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    h, v = map(int, input_string.split())\n    # Calculate the length of the ladder\n    ladder_length = int(h * (1 + (v/90))\n    return ladder_length\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4935,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, g = map(float, input_string.split())\n    segments = []\n    for i in range(int(N)):\n        D, theta = map(float, input().split())\n        segments.append((D, theta))\n    \n    # Calculate the velocity of each segment\n    velocities = []\n    for D, theta in segments:\n        v = D / (g * np.cos(np.radians(theta)))\n        velocities.append(v)\n    \n    # Calculate the total distance covered by each segment\n    distances = []\n    for i in range(int(N)):\n        if i == 0:\n            distances.append(0)\n        else:\n            distances.append(distances[i-1] + segments[i][0])\n    \n    # Calculate the total distance covered by the biker\n    total_distance = sum(distances)\n    \n    # Calculate the velocity of the biker at the foot of the mountain\n    v_foot = total_distance / (g * np.cos(np.radians(90)) * (N-1))\n    \n    # Calculate the velocity of the biker at each segment\n    for i in range(int(N)):\n        if i == 0:\n            v = v_foot\n        else:\n            v = v_foot * (distances[i] / total_distance)\n        print(v)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4936,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    temperatures = list(map(int, input_string.split()))\n    \n    # Initialize variables\n    min_temp = temperatures[0]\n    max_temp = temperatures[0]\n    best_day = 0\n    \n    # Iterate through temperatures\n    for i in range(1, len(temperatures)):\n        if temperatures[i] < min_temp:\n            min_temp = temperatures[i]\n        if temperatures[i] > max_temp:\n            max_temp = temperatures[i]\n            best_day = i\n    \n    return best_day, max_temp\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4937,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, a, e = input_string.split()\n    n = int(n)\n    a = int(a)\n    e = list(map(int, e.split()))\n    \n    # Write your code here\n    # Initialize variables\n    max_wins = 0\n    total_ships = 0\n    total_fleet = 0\n    \n    # Loop through each system\n    for i in range(n):\n        # Calculate the total number of ships in the system\n        total_ships += e[i]\n        # If the total number of ships is less than the fleet size, Atli wins\n        if total_ships < a:\n            max_wins += 1\n        # If the total number of ships is equal to the fleet size, Atli wins\n        elif total_ships == a:\n            max_wins += 1\n            total_ships = 0\n        # If the total number of ships is greater than the fleet size, Atli loses\n        else:\n            total_ships -= a\n    \n    return max_wins\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4938,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    max_count = 0\n    count = 0\n    women_count = 0\n    men_count = 0\n    diff = 0\n    \n    # Loop through the input string\n    for char in input_string:\n        if char == 'W':\n            women_count += 1\n        else:\n            men_count += 1\n        \n        # Calculate the difference\n        diff = abs(women_count - men_count)\n        \n        # If the difference is greater than the given limit, declare the club full\n        if diff > X:\n            break\n        \n        # If the difference is within the limit, increment the count\n        else:\n            count += 1\n    \n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4939,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, k = map(int, input_string.split())\n    commands = input_string.split()[1:]\n    start_pos = 0\n    for i in range(k):\n        if commands[i].isdigit():\n            t = int(commands[i])\n            if t >= 0:\n                start_pos = (start_pos + t) % n\n            else:\n                start_pos = (start_pos - abs(t)) % n\n        else:\n            m = int(commands[i].split('undo')[1])\n            start_pos = (start_pos - m) % n\n    return start_pos\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4940,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, M = map(int, input_string.split())\n    P = [list(map(int, input().split())) for _ in range(N)]\n    T = [0] * N\n    for j in range(M):\n        for i in range(N):\n            if T[i] == 0:\n                T[i] = sum(P[i][:j+1])\n    return \" \".join(map(str, T))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4941,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4942,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of integers\n    tree_days = list(map(int, input_string.split()))\n    \n    # Calculate the total number of days required to grow all the trees\n    total_days = sum(tree_days)\n    \n    # Calculate the day when the last tree will grow\n    last_tree_day = max(tree_days)\n    \n    # Calculate the earliest day when the party can be organized\n    earliest_day = total_days + 1\n    \n    # Iterate through the list of tree days and calculate the earliest day when the party can be organized\n    for i in range(len(tree_days)):\n        earliest_day = min(earliest_day, tree_days[i] + i + 1)\n    \n    return earliest_day\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4943,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    N = int(input_string.split('\\n')[0])\n    points = [tuple(map(float, input_string.split('\\n')[1:N+1]) for i in range(N))\n    area = float(input_string.split('\\n')[N+1])\n    \n    # Calculate the area of the original polygon\n    area_original = 0.5 * abs(points[0][0] * points[1][1] - points[1][0] * points[2][1] + points[2][0] * points[0][1])\n    \n    # Calculate the area of the new polygon\n    area_new = area * area_original / N\n    \n    # Calculate the scaling factor\n    scaling_factor = (2 * area_new) / area_original\n    \n    # Calculate the new coordinates\n    new_points = [(scaling_factor * x, scaling_factor * y) for x, y in points]\n    \n    # Move the polygon so that it touches the x- and y-axes\n    min_x = min(new_points, key=lambda x: x[0])[0]\n    min_y = min(new_points, key=lambda x: x[1])[1]\n    new_points = [(x - min_x, y - min_y) for x, y in new_points]\n    \n    # Print the new coordinates\n    for x, y in new_points:\n        print(f'{x:.4f} {y:.4f}')\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4944,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4945,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b, m, sigma = map(int, input_string.split())\n    max_rent = 0\n    for x in range(1, m+1):\n        for y in range(1, m-x+1):\n            if 2*x + y >= sigma:\n                rent = a*x + b*y\n                max_rent = max(max_rent, rent)\n    return max_rent\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4946,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Initialize variables\n    num_of_guests = len(input_list)\n    awkwardness_level = num_of_guests\n    current_language = input_list[0]\n    current_count = 1\n    \n    # Iterate through the list\n    for i in range(1, num_of_guests):\n        if input_list[i] == current_language:\n            current_count += 1\n        else:\n            awkwardness_level = min(awkwardness_level, current_count)\n            current_language = input_list[i]\n            current_count = 1\n    \n    # Add the last count to the awkwardness level\n    awkwardness_level = min(awkwardness_level, current_count)\n    \n    return awkwardness_level\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4947,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert English miles to feet\n    feet = input_string * 5280\n    \n    # Convert feet to Roman paces\n    roman_paces = feet // 2\n    \n    # Round up to the closest integer\n    if feet % 2 >= 1:\n        roman_paces += 1\n    \n    return roman_paces\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4948,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    n, s = map(int, input_string.split())\n    holes = []\n    for _ in range(n):\n        r, x, y, z = map(int, input().split())\n        holes.append((r, x, y, z))\n    \n    # sort holes by z\n    holes.sort(key=lambda x: x[2])\n    \n    # calculate the total volume of the cheese\n    total_volume = 100 * 100 * 100 - sum(4/3 * np.pi * h**3 for h, _, _, _ in holes)\n    \n    # calculate the volume of each slice\n    slice_volume = total_volume / s\n    \n    # calculate the thickness of each slice\n    slice_thickness = (slice_volume / (np.pi * 100**2))**(1/3)\n    \n    return slice_thickness\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4949,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into a list of integers\n    input_list = list(map(int, input_string.split()))\n    N = input_list[0]\n    W = input_list[1]\n    H = input_list[2]\n    matches = input_list[3:]\n    \n    # Loop through the matches and check if they fit in the box\n    for match in matches:\n        if match <= W and match <= H:\n            print(\"DA\")\n        else:\n            print(\"NE\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4950,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of tuples\n    input_list = [tuple(map(int, line.split())) for line in input_string.split('\\n')]\n    \n    # Initialize variables\n    max_speed = 0\n    max_distance = 0\n    max_time = 0\n    \n    # Iterate through the list of tuples\n    for time, distance in input_list:\n        # Calculate the speed\n        speed = (distance - max_distance) / (time - max_time)\n        \n        # Update max_speed and max_distance if necessary\n        if speed > max_speed:\n            max_speed = speed\n            max_distance = distance\n            max_time = time\n    \n    # Return the max_speed\n    return max_speed\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4951,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize a dictionary to keep track of the assumptions and conclusions\n    assumptions = {}\n    for i in range(1, len(input_string)):\n        line = input_string[i].split()\n        if len(line) == 2:\n            # If there are no assumptions, the conclusion is an axiom\n            assumptions[line[1]] = True\n        else:\n            # If there are assumptions, check if they are valid\n            for assumption in line[:-1]:\n                if assumption not in assumptions:\n                    return i\n            # If all assumptions are valid, add the conclusion to the dictionary\n            assumptions[line[-1]] = True\n    return \"correct\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4952,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    votes = input_string.split('\\n')[:-1]\n    votes_dict = {}\n    for vote in votes:\n        if vote in votes_dict:\n            votes_dict[vote] += 1\n        else:\n            votes_dict[vote] = 1\n    \n    max_votes = max(votes_dict.values())\n    for key, value in votes_dict.items():\n        if value == max_votes:\n            return key\n    return \"Runoff!\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4953,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Parse input\n    n = int(input_string[0])\n    characters = {}\n    for i in range(1, n+1):\n        line = input_string[i].split()\n        name = line[0]\n        languages = line[1:]\n        characters[name] = set(languages)\n    \n    # Find all pairs of characters that can converse\n    can_converse = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            if characters[input_string[i+1].split()[1]].intersection(characters[input_string[j+1].split()[1:]]):\n                can_converse.add((input_string[i+1].split()[0], input_string[j+1].split()[0]))\n                can_converse.add((input_string[j+1].split()[0], input_string[i+1].split()[0])\n    \n    # Find the smallest set of characters to ask to leave\n    min_size = n\n    for i in range(n):\n        for j in range(i+1, n):\n            if (input_string[i+1].split()[0], input_string[j+1].split()[0]) not in can_converse:\n                min_size = min(min_size, 1 + len(characters[input_string[i+1].split()[1:]] + characters[input_string[j+1].split()[1:]])\n    return min_size\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4954,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, B, H, W = map(int, input_string.split())\n    hotel_prices = []\n    hotel_beds = []\n    for _ in range(H):\n        hotel_prices.append(int(input()))\n        hotel_beds.append(list(map(int, input().split()[:W]))\n    \n    # calculate minimum cost\n    min_cost = float('inf')\n    for i in range(H):\n        total_beds = sum(hotel_beds[i])\n        if total_beds * hotel_prices[i] <= B:\n            min_cost = min(min_cost, total_beds * hotel_prices[i])\n    \n    return min_cost if min_cost != float('inf') else \"stay home\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4955,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    notes = input_string.split()\n    scales = []\n    for i in range(12):\n        scale = []\n        for j in range(len(notes)):\n            if notes[j] == \"A\":\n                scale.append(\"A\")\n            elif notes[j] == \"A#\":\n                scale.append(\"B\")\n            elif notes[j] == \"B\":\n                scale.append(\"C\")\n            elif notes[j] == \"C\":\n                scale.append(\"C\")\n            elif notes[j] == \"C#\":\n                scale.append(\"C#\")\n            elif notes[j] == \"D\":\n                scale.append(\"D\")\n            elif notes[j] == \"D#\":\n                scale.append(\"E\")\n            elif notes[j] == \"E\":\n                scale.append(\"E\")\n            elif notes[j] == \"F\":\n                scale.append(\"F\")\n            elif notes[j] == \"F#\":\n                scale.append(\"F#\")\n            elif notes[j] == \"G\":\n                scale.append(\"G\")\n            elif notes[j] == \"G#\":\n                scale.append(\"G#\")\n        scales.append(\" \".join(scale))\n    scales.sort()\n    return \" \".join(scales)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4956,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    words = input_string.split()\n    ae_count = 0\n    for word in words:\n        ae_count += word.count('ae')\n    if ae_count >= len(words) * 0.4:\n        return 'dae ae ju traeligt va'\n    else:\n        return 'haer talar vi rikssvenska'\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4957,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, m = map(int, input_string[0].split())\n    grid = [list(input_string[i].strip()) for i in range(1, n+1)]\n    \n    def is_valid(x, y):\n        if grid[x][y] == '#':\n            return False\n        for dx, dy in [(-1, 0), (0, -1), (1, 0), (0, 1)]:\n            if 0 <= x+dx < n and 0 <= y+dy < m and grid[x+dx][y+dy] == '.':\n                return True\n        return False\n    \n    def place_coffee_shops(x, y, visited):\n        if x == n:\n            return True\n        for dx, dy in [(-1, 0), (0, -1), (1, 0), (0, 1)]:\n            if 0 <= x+dx < n and 0 <= y+dy < m and grid[x+dx][y+dy] == '.' and not visited[x+dx][y+dy]:\n                visited[x+dx][y+dy] = True\n                if is_valid(x+dx, y+dy) and (place_coffee_shops(x+dx, y+dy, visited) or place_coffee_shops(x, y+dy, visited) or place_coffee_shops(x+dx, y, visited) or place_coffee_shops(x, y+dy, visited)):\n                    grid[x+dx][y+dy] = 'E'\n                    return True\n                else:\n                    visited[x+dx][y+dy] = False\n        return False\n    \n    visited = [[False for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.' and is_valid(i, j):\n                visited[i][j] = True\n                if place_coffee_shops(i, j, visited):\n                    grid[i][j] = 'E'\n    \n    return",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4958,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Sort the list in descending order\n    input_list.sort(reverse=True)\n    \n    # Create two empty lists to hold the tower heights\n    tower1 = []\n    tower2 = []\n    \n    # Add the first two boxes to the first tower\n    tower1.append(input_list[0])\n    tower1.append(input_list[1])\n    \n    # Add the remaining boxes to the second tower\n    tower2.append(input_list[2])\n    tower2.append(input_list[3])\n    tower2.append(input_list[4])\n    \n    # Sort the remaining boxes in descending order\n    input_list.sort(reverse=True)\n    \n    # Add the last two boxes to the first tower\n    tower1.append(input_list[5])\n    tower1.append(input_list[6])\n    \n    # Convert the lists to strings and join them with spaces\n    tower1_str = \" \".join(map(str, tower1))\n    tower2_str = \" \".join(map(str, tower2))\n    \n    # Output the strings\n    print(tower1_str)\n    print(tower2_str)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4959,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    e, f, c = map(int, input_string.split())\n    total_sodas = 0\n    while e >= c:\n        total_sodas += f // c\n        e -= c\n        f = (f + e) % c\n    total_sodas += e // c\n    return total_sodas\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4960,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Pad the binary numeral with zeros on the left until it has a length that is divisible by 3\n    input_string = input_string.zfill(len(input_string) + (3 - len(input_string) % 3) % 3)\n    \n    # Convert each group of 3 binary digits to octal\n    octal_string = \"\"\n    for i in range(0, len(input_string), 3):\n        binary_group = input_string[i:i+3]\n        octal_digit = int(binary_group, 2)\n        octal_string += str(octal_digit)\n    \n    return octal_string\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4961,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a matrix\n    matrix = []\n    for i in range(len(input_string)):\n        row = list(input_string[i])\n        matrix.append(row)\n    \n    # Initialize variables\n    handshakes = 0\n    rows, cols = len(matrix), len(matrix[0])\n    \n    # Iterate through each person\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == 'o':\n                # Check if there is a neighbour to the left\n                if j > 0 and matrix[i][j-1] == 'o':\n                    handshakes += 1\n                # Check if there is a neighbour to the right\n                if j < cols-1 and matrix[i][j+1] == 'o':\n                    handshakes += 1\n                # Check if there is a neighbour above\n                if i > 0 and matrix[i-1][j] == 'o':\n                    handshakes += 1\n                # Check if there is a neighbour below\n                if i < rows-1 and matrix[i+1][j] == 'o':\n                    handshakes += 1\n    \n    return handshakes\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4962,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, L = map(int, input_string.split())\n    A = []\n    B = []\n    for i in range(N):\n        A.append(list(map(int, input().split()))\n        B.append(list(map(int, input().split())\n    \n    # Your code goes here\n    # return \"LADICA\" if the item is stored successfully, \"SMECE\" if it's thrown away\n    # You can use a list to keep track of the drawers used so far\n    # and check if a drawer is empty before using it\n    # You can also use a dictionary to keep track of the items in each drawer\n    # and their corresponding drawer number\n    # You can use a loop to iterate through the items and apply the rules\n    # and check if the drawer is empty before using it\n    # You can use a list to keep track of the items that have already been stored\n    # and check if an item is already stored before storing it again\n    # You can use a list to keep track of the items that have already been thrown away\n    # and check if an item is already thrown away before throwing it away again\n    # You can use a list to keep track of the items that have already been stored in a drawer\n    # and check if an item is already stored in a drawer before storing it again\n    # You can use a list to keep track of the items that have already been thrown away in a drawer\n    # and check if an item is already thrown away in a drawer before throwing it again\n    # You can use a list to keep track of the items that have already been stored in a drawer\n    # and check if an item is already stored in a drawer before storing it again\n    # You can use a list to keep track of the items that have already been thrown away in a drawer\n    # and check if an item is already thrown away in a drawer before throwing it again\n    # You can use a list to keep track of the items that have already been stored in a drawer\n    # and check if an item is already stored in a drawer before storing it again\n    # You can use a list to keep track of the items that have already been thrown away in a drawer\n    # and check if an item is already",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4963,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    d = list(map(int, input_string[1].split()))\n    order = [1]\n    for i in range(n-1):\n        order.append(order[-1] + d[i])\n    return \" \".join(map(str, order))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4964,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # parse input\n    N, H, L = map(int, input_string.split())\n    horror_list = set(map(int, input().split()))\n    similarities = [list(map(int, line.split())) for line in input_string.split('\\n')]\n    \n    # initialize matrix of similarities\n    matrix = [[0] * N for _ in range(N)]\n    for a, b in similarities:\n        matrix[a][b] = 1\n        matrix[b][a] = 1\n    \n    # initialize Horror Index for each movie\n    HI = [0] * N\n    \n    # calculate Horror Index for each movie\n    for i in range(N):\n        if i in horror_list:\n            HI[i] = 1\n        else:\n            for j in range(N):\n                if matrix[i][j] == 1:\n                    HI[i] = max(HI[i], HI[j] + 1)\n    \n    # find movie with highest Horror Index\n    max_HI = max(HI)\n    max_movies = [i for i, hi in enumerate(HI) if hi == max_HI]\n    \n    # return movie with lowest ID in case of tie\n    return min(max_movies)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4965,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input string to list of integers\n    pools = list(map(int, input_string.split()))\n    \n    # Sort the list in ascending order\n    pools.sort()\n    \n    # Check if the difference between consecutive pools is increasing\n    for i in range(1, len(pools)):\n        if pools[i] - pools[i-1] <= 0:\n            return \"impossible\"\n    \n    # Return the sorted list\n    return \" \".join(map(str, pools))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4966,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n, p, k = map(int, input_string.split())\n    t = list(map(int, input().split())\n    \n    # calculate the length of the original video\n    T = k\n    \n    # calculate the length of each segment\n    for i in range(n):\n        T -= (t[i] - t[i-1]) * (100 + p) / 100\n    \n    # add the length of the last segment\n    T += t[n-1]\n    \n    return T\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4967,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of lists\n    grid = [list(line) for line in input_string.split('\\n')]\n    \n    # Initialize variables\n    max_distance = 0\n    spy_location = None\n    safe_house_locations = []\n    \n    # Find the spy's location\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 'S':\n                spy_location = (i, j)\n                break\n    \n    # Find the safe house locations\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 'H':\n                safe_house_locations.append((i, j))\n    \n    # Calculate the Manhattan distance between the spy and each safe house\n    for safe_house in safe_house_locations:\n        distance = abs(safe_house[0] - spy_location[0]) + abs(safe_house[1] - spy_location[1])\n        max_distance = max(max_distance, distance)\n    \n    return max_distance\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4968,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    N, S, R = map(int, input_string.split())\n    damaged_teams = list(map(int, input().split()))\n    reserve_teams = list(map(int, input().split()))\n    \n    # create a set of damaged teams\n    damaged_set = set(damaged_teams)\n    \n    # create a set of reserve teams\n    reserve_set = set(reserve_teams)\n    \n    # find the difference between the two sets\n    diff_set = damaged_set.difference(reserve_set)\n    \n    # find the length of the difference set\n    min_teams = len(diff_set)\n    \n    return min_teams\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4969,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    R, C = map(int, input_string.split())\n    area_pizza = 3.14159 * R**2\n    area_cheese = area_pizza - 3.14159 * C**2\n    percentage_cheese = (area_cheese / area_pizza) * 100\n    return round(percentage_cheese, 6)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4970,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize a dictionary to store the popularity of each combination\n    popularity = {}\n    \n    # Loop through each frosh\n    for i in range(len(input_string)):\n        # Split the input string into a list of course numbers\n        courses = input_string[i].split()\n        # Convert the list of strings to integers\n        courses = [int(course) for course in courses]\n        # Sort the list of courses\n        courses.sort()\n        # Convert the sorted list of courses to a tuple\n        course_tuple = tuple(courses)\n        # If the tuple is not in the dictionary, add it with a value of 1\n        if course_tuple not in popularity:\n            popularity[course_tuple] = 1\n        # If the tuple is already in the dictionary, increment its value by 1\n        else:\n            popularity[course_tuple] += 1\n            \n    # Find the maximum popularity\n    max_popularity = max(popularity.values())\n    \n    # Count the number of frosh with the maximum popularity\n    count = 0\n    for value in popularity.values():\n        if value == max_popularity:\n            count += 1\n            \n    # Return the count\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4971,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    def is_cube(n):\n        return int(n**(1/3) + 0.5)**3 == n\n    \n    def is_sum_of_cubes(n):\n        for i in range(1, int(n**(1/3) + 1):\n            for j in range(1, int(n**(1/3) + 1):\n                if i**3 + j**3 == n:\n                    return True\n        return False\n    \n    def find_bus_numbers(m):\n        i = 1\n        while True:\n            if is_sum_of_cubes(i):\n                i += 1\n            else:\n                break\n        while not is_sum_of_cubes(i):\n            i += 1\n        return i - 1\n    \n    bus_number = find_bus_numbers(m)\n    return bus_number\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4972,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    k = 0\n    while True:\n        if input_string % 2 == 0:\n            input_string //= 2\n            k += 1\n        else:\n            break\n    return k\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4973,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input string to a 2D list\n    board = [list(row) for row in input_string.split('\\n')]\n    \n    # Initialize the visited set\n    visited = set()\n    \n    # Initialize the queue\n    queue = [(1, 1)]\n    \n    # Initialize the number of steps\n    steps = 0\n    \n    # Initialize the directions\n    directions = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]\n    \n    # While the queue is not empty\n    while queue:\n        # Increment the number of steps\n        steps += 1\n        \n        # Get the current size of the queue\n        size = len(queue)\n        \n        # Iterate through the size of the queue\n        for _ in range(size):\n            # Get the current position\n            r, c = queue.pop(0)\n            \n            # If the current position is (1, 1), return the number of steps\n            if (r, c) == (1, 1):\n                return steps\n            \n            # Iterate through the directions\n            for dr, dc in directions:\n                # Get the new position\n                r_new, c_new = r + dr, c + dc\n                \n                # If the new position is valid and not blocked, add it to the queue\n                if 1 <= r_new <= N and 1 <= c_new <= N and board[r_new-1][c_new-1] != '#':\n                    queue.append((r_new, c_new))\n                    \n    # If (1, 1) is not reachable, return -1\n    return -1\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4974,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of integers\n    input_list = list(map(int, input_string.split()))\n    r = input_list[0]\n    n = input_list[1]\n    booked_rooms = input_list[2:]\n    \n    # Create a list of all rooms\n    rooms = list(range(1, r+1))\n    \n    # Remove booked rooms from the list\n    for room in booked_rooms:\n        rooms.remove(room)\n    \n    # If there are any rooms left, return the first one\n    if rooms:\n        return rooms[0]\n    else:\n        return \"too late\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4975,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Remove spaces and duplicate letters\n    key_phrase = input_string.replace(\" \", \"\").upper()\n    key_phrase = \"\".join(sorted(set(key_phrase))\n    \n    # Generate the encryption key\n    key = []\n    for i in range(5):\n        for j in range(5):\n            if i == 4:\n                key.append(key_phrase[j])\n            else:\n                key.append(key_phrase[i*5+j])\n    key.extend(list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"[len(key_phrase):])\n    \n    # Generate the encryption table\n    table = [key[i:i+5] for i in range(0, 25, 5)]\n    \n    # Encrypt the text\n    encrypted_text = \"\"\n    for i in range(0, len(input_string), 2):\n        if input_string[i] == \"X\":\n            encrypted_text += \"X\"\n        else:\n            row1, col1 = table.index(input_string[i]), table[0].index(input_string[i])\n            if i+1 < len(input_string):\n                if input_string[i+1] == \"X\":\n                    encrypted_text += table[row1][(col1+1)%5]\n                else:\n                    row2, col2 = table.index(input_string[i+1]), table[0].index(input_string[i+1])\n                    if row1 == row2:\n                        encrypted_text += table[row1][(col1+1)%5] + table[row1][(col2+1)%5]\n                    elif col1 == col2:\n                        encrypted_text += table[(row1+1)%5][col1] + table[(row2+1)%5][col2]\n                    else:\n                        encrypted_text += table[row1][col2] + table[row2][col1]\n    \n    return encrypted_text.upper()\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4976,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Read input\n    gopher_coords = list(map(float, input_string.split()))\n    dog_coords = list(map(float, input_string.split()))\n    holes = []\n    for i in range(int(input()):\n        holes.append(list(map(float, input().split()))\n    \n    # Calculate distance between gopher and dog\n    gopher_dog_distance = math.sqrt((gopher_coords[0] - dog_coords[0])**2 + (gopher_coords[1] - dog_coords[1])**2)\n    \n    # Calculate distance between gopher and hole\n    for hole in holes:\n        hole_distance = math.sqrt((gopher_coords[0] - hole[0])**2 + (gopher_coords[1] - hole[1])**2)\n        \n        # Calculate time to reach hole\n        time_to_hole = gopher_dog_distance / (2 * (dog_coords[0] - hole[0])\n        \n        # Check if dog can reach hole before gopher\n        if time_to_hole < 0:\n            print(\"The gopher can escape through the hole at ({}, {})\".format(hole[0], hole[1]))\n            return\n    \n    print(\"The gopher cannot escape.\")\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4977,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into a list of integers\n    input_list = list(map(int, input_string.split()))\n    \n    # Unpack the input list into starting and destination coordinates and the number of units of electrical charge\n    start_x, start_y = input_list[0], input_list[1]\n    dest_x, dest_y = input_list[2], input_list[3]\n    t = input_list[4]\n    \n    # Calculate the Manhattan distance between the starting and destination coordinates\n    manhattan_distance = abs(start_x - dest_x) + abs(start_y - dest_y)\n    \n    # Check if the distance is even or odd\n    if manhattan_distance % 2 == 0:\n        # If the distance is even, we can move north-south or east-west\n        if t >= manhattan_distance:\n            return \"Y\"\n        else:\n            return \"N\"\n    else:\n        # If the distance is odd, we can move north-south or east-west, but we need to add a U-turn\n        if t >= manhattan_distance + 1:\n            return \"Y\"\n        else:\n            return \"N\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4978,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of lists\n    grid = [list(row) for row in input_string.split('\\n')]\n    \n    # Initialize the grid with water\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 'V':\n                grid[i][j] = 'W'\n    \n    # Iterate through the grid, updating each cell\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 'W':\n                if i > 0 and grid[i-1][j] == '.':\n                    grid[i-1][j] = 'W'\n                if i > 0 and j > 0 and grid[i-1][j-1] == '.':\n                    grid[i-1][j-1] = 'W'\n                if i > 0 and j < len(grid[i])-1 and grid[i-1][j+1] == '.':\n                    grid[i-1][j+1] = 'W'\n    \n    # Convert the grid back to a string\n    output_string = ''\n    for row in grid:\n        output_string += ''.join(row) + '\\n'\n    \n    return output_string.rstrip()\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4979,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert the input to binary\n    binary_string = bin(input_string)\n    \n    # Reverse the binary string\n    reversed_binary_string = binary_string[::-1]\n    \n    # Convert the reversed binary string back to decimal\n    reversed_decimal = int(reversed_binary_string, 2)\n    \n    return reversed_decimal\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4980,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    pink_buttons = 0\n    for color in input_string:\n        if \"pink\" in color.lower() or \"rose\" in color.lower():\n            pink_buttons += 1\n    \n    if pink_buttons > 0:\n        return pink_buttons\n    else:\n        return \"I must watch Star Wars with my daughter\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4981,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    input_list = list(input_string)\n    input_list.sort()\n    return \" \".join(map(str, input_list))\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4982,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize variables\n    total_shares = 0\n    total_cost = 0\n    total_profit = 0\n    average_cost = 0\n    tax_rate = 0.3\n    \n    # Iterate through each event\n    for event in input_string.split('\\n'):\n        # Split the event into action and value\n        action, value = event.split()\n        value = int(value)\n        \n        # If the event is a buy, update the total shares and cost\n        if action == 'buy':\n            total_shares += value\n            total_cost += value * value\n        \n        # If the event is a sell, update the total profit and average cost\n        elif action == 'sell':\n            total_profit += value * (value - average_cost)\n            total_shares -= value\n            average_cost = total_cost / total_shares\n        \n        # If the event is a split, update the total shares and cost\n        elif action == 'split':\n            total_shares *= value\n            total_cost /= value\n        \n        # If the event is a merge, update the total shares and cost\n        elif action == 'merge':\n            total_shares = total_shares // value\n            total_cost = total_cost * value\n        \n        # If the event is a death, update the final profit and output the result\n        elif action == 'die':\n            final_profit = total_profit + total_shares * (value - average_cost)\n            final_profit *= (1 - tax_rate)\n            print(final_profit)\n            break\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4983,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to a list of digits\n    digits = list(map(int, input_string))\n    \n    # Initialize the result variable\n    result = 1\n    \n    # Iterate through the digits and multiply them\n    for digit in digits:\n        if digit != 0:\n            result *= digit\n    \n    # If the result is greater than 9, divide it by 9 and keep track of the remainders\n    while result > 9:\n        result //= 9\n        result %= 9\n    \n    # Return the result\n    return result\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4984,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4985,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Convert input_string to list of lists\n    hands = [list(input_string[i:i+2] for i in range(0, len(input_string), 2)) for input_string in input_string.split('\\n')]\n    \n    # Create dictionary to store values of cards\n    card_values = {'A': 11, 'K': 11, 'Q': 10, 'J': 10, 'T': 10, '9': 9, '8': 0, '7': 0}\n    \n    # Create list to store values of hands\n    hand_values = []\n    \n    # Loop through hands\n    for hand in hands:\n        # Create list to store values of cards in hand\n        hand_value = []\n        # Loop through cards in hand\n        for card in hand:\n            # Check if card is dominant suit\n            if card[1] == 'S':\n                # If card is dominant, add its value to hand_value\n                hand_value.append(card_values[card[0]])\n            else:\n                # If card is not dominant, add 0 to hand_value\n                hand_value.append(0)\n        # Add hand_value to hand_values list\n        hand_values.append(hand_value)\n    \n    # Calculate total points\n    total_points = sum(sum(hand_value) for hand_value in hand_values)\n    \n    # Return total points\n    return total_points\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4986,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4987,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    S, C, K = map(int, input_string.split())\n    socks = list(map(int, input().split()))\n    \n    # Initialize variables\n    machines = 0\n    current_machine = 0\n    current_color = 0\n    \n    # Iterate through the socks\n    for sock in socks:\n        # If the current machine is full, start a new one\n        if current_machine == C:\n            machines += 1\n            current_machine = 0\n        \n        # If the color difference is greater than K, start a new machine\n        if abs(sock - current_color) > K:\n            machines += 1\n        \n        # Add the sock to the current machine\n        current_machine += 1\n        \n        # Update the current color\n        current_color = sock\n    \n    # If there are still socks left, start a new machine\n    if current_machine != 0:\n        machines += 1\n    \n    return machines\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4988,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return 0\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4989,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    n = int(input_string[0])\n    pieces = list(map(int, input_string[1].split()))\n    alice_sum = 0\n    bob_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice_sum += pieces[i]\n        else:\n            bob_sum += pieces[i]\n    return alice_sum, bob_sum\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4990,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    b, k, g = map(int, input_string.split())\n    d = b // (k - g) + 1\n    return d\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4991,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4992,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    return \"impossible\"\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4993,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4994,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Split the input string into a list of coordinates\n    coordinates = input_string.split('\\n')\n    \n    # Convert the coordinates to integers\n    coordinates = [list(map(int, coordinates[i].split()) for i in range(3))\n    \n    # Sort the coordinates in ascending order\n    coordinates.sort()\n    \n    # Calculate the width and height of the rectangle\n    width = coordinates[1][0] - coordinates[0][0]\n    height = coordinates[1][1] - coordinates[0][1]\n    \n    # Calculate the coordinates of the fourth point\n    x = coordinates[0][0] + width\n    y = coordinates[0][1] + height\n    \n    # Return the coordinates as a string\n    return str(x) + ' ' + str(y)\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4995,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # read input\n    n = int(input_string[0])\n    minutes = []\n    for i in range(1, n+1):\n        m, s = map(int, input_string[i].split())\n        minutes.append(s/60)\n    \n    # calculate average\n    avg = sum(minutes)/n\n    \n    # check if average is less than or equal to a normal minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4996,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Your code here\n    pass\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4997,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    # Initialize the cups\n    cups = ['A', 'B', 'C']\n    \n    # Initialize the ball\n    ball = 'A'\n    \n    # Loop through each move\n    for move in input_string:\n        # If the move is 'A', swap the left and middle cups\n        if move == 'A':\n            cups[0], cups[1] = cups[1], cups[0]\n        # If the move is 'B', swap the middle and right cups\n        elif move == 'B':\n            cups[1], cups[2] = cups[2], cups[1]\n        # If the move is 'C', swap the left and right cups\n        elif move == 'C':\n            cups[0], cups[2] = cups[2], cups[0]\n    \n    # Return the index of the cup under which the ball is\n    if cups[0] == ball:\n        return 1\n    elif cups[1] == ball:\n        return 2\n    else:\n        return 3\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4998,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    A, B, C, D = map(int, input_string.split())\n    max_area = 0\n    \n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                for l in range(4):\n                    for m in range(4):\n                        if i != j and j != k and k != l and l != m and i != m:\n                            if i != 0 and j != 0 and k != 0 and l != 0 and m != 0:\n                                area = min(A, B, C, D) * min(A, B, C, D)\n                                max_area = max(max_area, area)\n                            elif i == 0 and j == 0 and k == 0 and l == 0:\n                                area = min(A, B, C, D) * min(A, B, D)\n                                max_area = max(max_area, area)\n                            elif i == 0 and j == 0 and k == 0 and l != 0:\n                                area = min(A, B, C) * min(A, C)\n                                max_area = max(max_area, area)\n                            elif i == 0 and j == 0 and k != 0 and l == 0:\n                                area = min(A, B, D) * min(A, D)\n                                max_area = max(max_area, area)\n                            elif i == 0 and j != 0 and k == 0 and l == 0:\n                                area = min(A, C, D) * min(A, C)\n                                max_area = max(max_area, area)\n                            elif i != 0 and j == 0 and k == 0 and l == 0:\n                                area = min(B, C, D) * min(B, D)\n                                max_area = max(max_area, area)\n                            elif i == 0 and j != 0 and k != 0 and l == 0:\n                                area = min(A, B, C) * min(B, C)\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    },
    {
        "number": 4999,
        "checkpoint": "7B",
        "pass": 1,
        "correct": false,
        "answer": "def solution(input_string):\n    \n    a, b = map(int, input_string.split())\n    count = 0\n    while a != b:\n        if a % 2 == 0:\n            a //= 2\n            count += 1\n        else:\n            a += 1\n            count += 1\n    return count\n\n",
        "generated_testcode": "",
        "difficulty": "introductory"
    }
]